/**********************************************************************************************************************
 * \file    GPT12_Incremental_Encoder.h
 * \copyright Copyright (C) Infineon Technologies AG 2023
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef GPT12_INCREMENTAL_ENCODER_H_
#define GPT12_INCREMENTAL_ENCODER_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxGpt12.h"
#include "IfxGpt12_IncrEnc.h"
#include "Bsp.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    uint32           dummy;                         /* Dummy variable                                                */

    struct
    {
        boolean          run;                       /* Status: TRUE: the encoder turn                                */
        IfxStdIf_Pos_Dir direction;                 /* Direction                                                     */
        uint32           step;                      /* Current step                                                  */
        sint32           rawPosition;               /* Expected rawPosition                                          */
        sint32           positionMask;              /* Mask for rawPosition value                                    */
        uint32           resolution;                /* Encoder resolution                                            */
        uint32           multiplicationFactor;      /* Encoder multiplication factor                                 */
        float32          updatePeriod;              /* Refresh period                                                */
        float32          speed;                     /* Requested encoder speed in rad/s                              */
    } control;
    struct
    {
        float32          speed;                     /* Acquired encoder speed in rad/s                               */
        sint32           rawPosition;               /* Acquired rawPosition                                          */
        IfxStdIf_Pos_Dir direction;                 /* Acquired direction                                            */
    }status;
} Encoder;

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initGpt12Timer(void);        /* Function to initialize the GPT12 Module and start the timer                     */
void interruptGpt12(void);        /* Interrupt Service Routine of the GPT12                                          */
void initEncoderEmulation(void);  /* Function to initialize encoder emulator                                         */
void doEncoderEmulation(void);    /* Function to execute encoder emulator                                            */
void doEncoderEmulationStep(void);/* Function to execute encoder emulator step                                       */

#endif /* GPT12_INCREMENTAL_ENCODER_H_ */
