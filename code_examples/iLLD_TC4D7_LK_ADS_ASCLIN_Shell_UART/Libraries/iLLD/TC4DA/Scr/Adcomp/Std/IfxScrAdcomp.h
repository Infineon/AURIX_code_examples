/**
 * \file IfxScrAdcomp.h
 * \brief SCRADCOMP  basic functionality
 * \ingroup IfxLld_Scr
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Scr_Adcomp ADCOMP
 * \ingroup IfxLld_Scr
 * \defgroup IfxLld_Scr_Adcomp_Enumerations Enum
 * \ingroup IfxLld_Scr_Adcomp
 * \defgroup IfxLld_Scr_Adcomp_Module Module Functionality
 * \ingroup IfxLld_Scr_Adcomp
 */

#ifndef IFXSCRADCOMP_H
#define IFXSCRADCOMP_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxScrAdcomp_cfg.h"
#include "_Reg/IfxScr_bf.h"
#include "_Reg/IfxScr_reg.h"

/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/
/** \addtogroup IfxLld_Scr_Adcomp_Enumerations
 * \{ */
/** \brief Input channel number
 */
typedef enum
{
    IfxScrAdcomp_Channel_0  = 0,  /**< \brief ADC Input Channel 0 */
    IfxScrAdcomp_Channel_1  = 1,  /**< \brief ADC Input Channel 1 */
    IfxScrAdcomp_Channel_2  = 2,  /**< \brief ADC Input Channel 2 */
    IfxScrAdcomp_Channel_3  = 3,  /**< \brief ADC Input Channel 3 */
    IfxScrAdcomp_Channel_4  = 4,  /**< \brief ADC Input Channel 4 */
    IfxScrAdcomp_Channel_5  = 5,  /**< \brief ADC Input Channel 5 */
    IfxScrAdcomp_Channel_6  = 6,  /**< \brief ADC Input Channel 6 */
    IfxScrAdcomp_Channel_7  = 7,  /**< \brief ADC Input Channel 7 */
    IfxScrAdcomp_Channel_8  = 8,  /**< \brief ADC Input Channel 8 */
    IfxScrAdcomp_Channel_9  = 9,  /**< \brief ADC Input Channel 9 */
    IfxScrAdcomp_Channel_10 = 10, /**< \brief ADC Input Channel 8 */
    IfxScrAdcomp_Channel_11 = 11, /**< \brief ADC Input Channel 8 */
    IfxScrAdcomp_Channel_12 = 12, /**< \brief ADC Input Channel 8 */
    IfxScrAdcomp_Channel_13 = 13, /**< \brief ADC Input Channel 8 */
    IfxScrAdcomp_Channel_14 = 14, /**< \brief ADC Input Channel 8 */
    IfxScrAdcomp_Channel_15 = 15  /**< \brief ADC Input Channel 8 */
} IfxScrAdcomp_Channel;

/** \brief Enumeration for sample time
 */
typedef enum
{
    IfxScrAdcomp_SampleTIme_60_80ns = 0,  /**< \brief Sample time (60ns-80ns) */
    IfxScrAdcomp_SampleTIme_100ns   = 1,  /**< \brief Sample time 100ns */
    IfxScrAdcomp_SampleTIme_200ns   = 2,  /**< \brief Sample time 200ns */
    IfxScrAdcomp_SampleTIme_400ns   = 3   /**< \brief Sample time 400ns */
} IfxScrAdcomp_SampleTIme;

/** \} */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/
/** \addtogroup IfxLld_Scr_Adcomp_Module
 * \{ */
/** \brief Enable the ADC comparator.
 *   Note: 100Mhz clock source should be enabled before calling this function
 * \return None
 */
IFX_INLINE void IfxScrAdcomp_enableModule(void);

/** \brief Disable the ADC comparator.
 * \return None
 */
IFX_INLINE void IfxScrAdcomp_disableModule(void);

/** \brief Checks if the module is enabled
 */
IFX_INLINE boolean IfxScrAdcomp_isEnabled(void);

/** \brief Checks if the ADC is ready for a new conversion to be triggered
 *  \return TRUE --> ADC conversion is completed
 *          FALSE --> ADC conversion is ongoing
 */
IFX_INLINE boolean IfxScrAdcomp_isReadyForNewConversion(void);

/** \brief Selects the input channel for ADC
 * \param channel The input channel to be selected
 * \return None
 */
IFX_INLINE void IfxScrAdcomp_selectChannel(IfxScrAdcomp_Channel channel);

/** \brief Selects the sample time for ADC
 * \param time Sample time
 * \return None
 */
IFX_INLINE void IfxScrAdcomp_selectSampleTime(IfxScrAdcomp_SampleTIme time);

/** \brief Triggers a ADC conversion
 * \return None
 */
IFX_INLINE void IfxScrAdcomp_startConversion(void);

/** \brief Returns the converted result
 * \return The converted value
 */
IFX_INLINE uint16 IfxScrAdcomp_getResult(void);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScrAdcomp_enableModule(void)
{
    SCR_SYSCON0.U    = SCR_SYSCON0.U & (uint8)(0xFE);
    SCR_ADCOMP_CON.U = (SCR_ADCOMP_CON.U | (1u << IFX_SCR_ADCOMP_CON_EN_REQ_OFF));

    /* Wait for module to start */
    while (!(SCR_ADCOMP_RESHSTAT.B.EN_STAT))
    {}
}


IFX_INLINE void IfxScrAdcomp_disableModule(void)
{
    SCR_SYSCON0.U    = SCR_SYSCON0.U & (uint8)(0xFE);
    SCR_ADCOMP_CON.U = (SCR_ADCOMP_CON.U & ~IFX_SCR_ADCOMP_CON_EN_REQ_MSK);
}


IFX_INLINE boolean IfxScrAdcomp_isEnabled(void)
{
    SCR_SYSCON0.U = SCR_SYSCON0.U & (uint8)(0xFE);
    return (boolean)((SCR_ADCOMP_RESHSTAT.U & (1u << IFX_SCR_ADCOMP_RESHSTAT_EN_STAT_OFF)) >> IFX_SCR_ADCOMP_RESHSTAT_EN_STAT_OFF);
}


IFX_INLINE boolean IfxScrAdcomp_isReadyForNewConversion(void)
{
    SCR_SYSCON0.U = SCR_SYSCON0.U & (uint8)(0xFE);
    unsigned char status = 0;

    /*Check if both ADCEN and EOCSAMPLE is set*/
    if (SCR_ADCOMP_RESHSTAT.U & (1u << IFX_SCR_ADCOMP_RESHSTAT_EN_STAT_OFF))
    {
        status = ((SCR_ADCOMP_RESHSTAT.U & (1u << IFX_SCR_ADCOMP_RESHSTAT_EOC_OFF)) >> IFX_SCR_ADCOMP_RESHSTAT_EOC_OFF);
    }

    return status;
}

IFX_INLINE void IfxScrAdcomp_selectChannel(IfxScrAdcomp_Channel channel)
{
    SCR_SYSCON0.U    = SCR_SYSCON0.U & (uint8)(0xFE);
    SCR_ADCOMP_CON.U = ((SCR_ADCOMP_CON.U & ~(IFX_SCR_ADCOMP_CON_CHSEL_MSK << IFX_SCR_ADCOMP_CON_CHSEL_OFF)) | channel << IFX_SCR_ADCOMP_CON_CHSEL_OFF);
}


IFX_INLINE void IfxScrAdcomp_selectSampleTime(IfxScrAdcomp_SampleTIme time)
{
    SCR_SYSCON0.U    = SCR_SYSCON0.U & (uint8)(0xFE);
    SCR_ADCOMP_CON.U = ((SCR_ADCOMP_CON.U & ~(IFX_SCR_ADCOMP_CON_STSEL_MSK << IFX_SCR_ADCOMP_CON_STSEL_OFF)) | time << IFX_SCR_ADCOMP_CON_STSEL_OFF);
}


IFX_INLINE void IfxScrAdcomp_startConversion(void)
{
    SCR_SYSCON0.U     = SCR_SYSCON0.U & (uint8)(0xFE);
    SCR_ADCOMP_CON.U |= (1u << IFX_SCR_ADCOMP_CON_SOC_OFF);
}

IFX_INLINE uint16 IfxScrAdcomp_getResult(void)
{
    uint16 result;
    SCR_SYSCON0.U = SCR_SYSCON0.U & (uint8)(0xFE);
    result        = SCR_ADCOMP_RESL.U | ((SCR_ADCOMP_RESHSTAT.U & IFX_SCR_ADCOMP_RESHSTAT_RES10_8_MSK) << 8u);
    return result;
}


#endif /* IFXSCRADCOMP_H */
