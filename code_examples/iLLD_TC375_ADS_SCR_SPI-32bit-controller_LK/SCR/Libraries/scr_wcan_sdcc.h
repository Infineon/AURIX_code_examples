/**********************************************************************************************************************
 * \file scr_wcan_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_WCAN_SDCC_H_
#define SCR_WCAN_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SCR_SET_WCAN_PAGE(p)            SCR_WCAN_PAGE = ((uint8)(p & MOD_PAGE_MASK))

#define SCR_SET_WCAN_PAGE_STNR0(p)      SCR_WCAN_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_0 | (p & MOD_PAGE_MASK)))
#define SCR_SET_WCAN_PAGE_STNR1(p)      SCR_WCAN_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_1 | (p & MOD_PAGE_MASK)))
#define SCR_SET_WCAN_PAGE_STNR2(p)      SCR_WCAN_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_2 | (p & MOD_PAGE_MASK)))
#define SCR_SET_WCAN_PAGE_STNR3(p)      SCR_WCAN_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_3 | (p & MOD_PAGE_MASK)))

#define SCR_RESTORE_WCAN_PAGE_STNR0()       SCR_WCAN_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_0))
#define SCR_RESTORE_WCAN_PAGE_STNR1()       SCR_WCAN_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_1))
#define SCR_RESTORE_WCAN_PAGE_STNR2()       SCR_WCAN_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_2))
#define SCR_RESTORE_WCAN_PAGE_STNR3()       SCR_WCAN_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_3))

/*********************************************************************************************************************/
/*----------------------------------------------Page Register for WCAN-----------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_WCAN_PAGE)              SCR_WCAN_PAGE;          /* bit-addressable SFR */

/*********************************************************************************************************************/
/*--------------------------------------WCAN Configuration and Status Registers--------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_WCAN_CFG)               SCR_WCAN_CFG;           /* bit-addressable SFR */
__sfr __at(ADDR_SCR_WCAN_INTMRSLT)          SCR_WCAN_INTMRSLT;
__sfr __at(ADDR_SCR_WCAN_INTESTAT0)         SCR_WCAN_INTESTAT0;     /* bit-addressable SFR */
__sfr __at(ADDR_SCR_WCAN_INTESTAT1)         SCR_WCAN_INTESTAT1;
__sfr __at(ADDR_SCR_WCAN_FRMERRCNT)         SCR_WCAN_FRMERRCNT;
__sfr __at(ADDR_SCR_WCAN_INTESCLR0)         SCR_WCAN_INTESCLR0;
__sfr __at(ADDR_SCR_WCAN_INTESCLR1)         SCR_WCAN_INTESCLR1;

/*********************************************************************************************************************/
/*------------------------------------------------CAN Node Registers-------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_WCAN_BTL1_CTRL)         SCR_WCAN_BTL1_CTRL;
__sfr __at(ADDR_SCR_WCAN_BTL2_CTRL)         SCR_WCAN_BTL2_CTRL;
__sfr __at(ADDR_SCR_WCAN_CDR_CTRL)          SCR_WCAN_CDR_CTRL;
__sfr __at(ADDR_SCR_WCAN_CDR_UPPER_CTRL)    SCR_WCAN_CDR_UPPER_CTRL;
__sfr __at(ADDR_SCR_WCAN_CDR_LOWER_CTRL)    SCR_WCAN_CDR_LOWER_CTRL;
__sfr __at(ADDR_SCR_WCAN_CDR_MEAS_HIGH)     SCR_WCAN_CDR_MEAS_HIGH;
__sfr __at(ADDR_SCR_WCAN_CDR_MEAS_LOW)      SCR_WCAN_CDR_MEAS_LOW;
__sfr __at(ADDR_SCR_WCAN_FD_CTRL)           SCR_WCAN_FD_CTRL;

/*********************************************************************************************************************/
/*--------------------------------------------WUF Configuration Registers--------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_WCAN_DLC_CTRL)          SCR_WCAN_DLC_CTRL;
__sfr __at(ADDR_SCR_WCAN_ID0_CTRL)          SCR_WCAN_ID0_CTRL;      /* bit-addressable SFR */
__sfr __at(ADDR_SCR_WCAN_ID1_CTRL)          SCR_WCAN_ID1_CTRL;
__sfr __at(ADDR_SCR_WCAN_ID2_CTRL)          SCR_WCAN_ID2_CTRL;
__sfr __at(ADDR_SCR_WCAN_ID3_CTRL)          SCR_WCAN_ID3_CTRL;
__sfr __at(ADDR_SCR_WCAN_MASK_ID0_CTRL)     SCR_WCAN_MASK_ID0_CTRL;
__sfr __at(ADDR_SCR_WCAN_MASK_ID1_CTRL)     SCR_WCAN_MASK_ID1_CTRL;
__sfr __at(ADDR_SCR_WCAN_MASK_ID2_CTRL)     SCR_WCAN_MASK_ID2_CTRL;
__sfr __at(ADDR_SCR_WCAN_MASK_ID3_CTRL)     SCR_WCAN_MASK_ID3_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA0_CTRL)        SCR_WCAN_DATA0_CTRL;    /* bit-addressable SFR */
__sfr __at(ADDR_SCR_WCAN_DATA1_CTRL)        SCR_WCAN_DATA1_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA2_CTRL)        SCR_WCAN_DATA2_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA3_CTRL)        SCR_WCAN_DATA3_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA4_CTRL)        SCR_WCAN_DATA4_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA5_CTRL)        SCR_WCAN_DATA5_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA6_CTRL)        SCR_WCAN_DATA6_CTRL;
__sfr __at(ADDR_SCR_WCAN_DATA7_CTRL)        SCR_WCAN_DATA7_CTRL;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_WCAN_Registers_Bitfields
 * \{  */

/** \brief Page Register for WCAN */
typedef struct
{
    Scr_UReg_8Bit PAGE:3;           /**< \brief [2:0] Page Bits (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [3:3] \internal Reserved */
    Scr_UReg_8Bit STNR:2;           /**< \brief [5:4] Storage Number (w) */
    Scr_UReg_8Bit OP:2;             /**< \brief [7:6] Operation (w) */
} Scr_WCAN_PAGE_Bits;

/** \brief Wake-Up CAN Configuration Register */
typedef struct
{
    Scr_UReg_8Bit WCAN_EN:1;        /**< \brief [0:0] WCAN Enable (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [1:1] \internal Reserved */
    Scr_UReg_8Bit SELWK_EN:1;       /**< \brief [2:2] Selective Wake-Up Enable (rwh) */
    Scr_UReg_8Bit CCE:1;            /**< \brief [3:3] Configuration Change Enable (rw) */
    Scr_UReg_8Bit reserved_1:4;     /**< \brief [7:4] \internal Reserved */
} Scr_WCAN_CFG_Bits;

/** \brief Wake-Up CAN Interrupt Mask Register */
typedef struct
{
    Scr_UReg_8Bit CANTOMASK:1;      /**< \brief [0:0] CAN Time-Out Masking (rw) */
    Scr_UReg_8Bit ERRMASK:1;        /**< \brief [1:1] SYSERR Masking (rw) */
    Scr_UReg_8Bit WUFMASK:1;        /**< \brief [2:2] Wake-Up Frame Interrupt Masking (rw) */
    Scr_UReg_8Bit WUPMASK:1;        /**< \brief [3:3] Wake-Up Pattern Detected Interrupt Masking (rw) */
    Scr_UReg_8Bit reserved_0:4;     /**< \brief [7:4] \internal Reserved */
} Scr_WCAN_INTMRSLT_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Register 0 */
typedef struct
{
    Scr_UReg_8Bit SWACK:1;          /**< \brief [0:0] Selective Wake-Up Enable Acknowledge (rh) */
    Scr_UReg_8Bit MODE:1;           /**< \brief [1:1] WCAN Mode of Operation (rh) */
    Scr_UReg_8Bit SYSERR:1;         /**< \brief [2:2] CAN Wake-Up System Error (rh) */
    Scr_UReg_8Bit CANTO:1;          /**< \brief [3:3] CAN Time-Out Detection (rh) */
    Scr_UReg_8Bit ECOFL:1;          /**< \brief [4:4] Error Counter Overflow (rh) */
    Scr_UReg_8Bit MORC:1;           /**< \brief [5:5] Message Object Register Changed (rh) */
    Scr_UReg_8Bit ERSEL:1;          /**< \brief [6:6] Error Select (rh) */
    Scr_UReg_8Bit WUP:1;            /**< \brief [7:7] Wake-Up Pattern Detected (rh) */
} Scr_WCAN_INTESTAT0_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Register 1 */
typedef struct
{
    Scr_UReg_8Bit WUF:1;            /**< \brief [0:0] Wake-Up Frame Detection (acc. ISO 11898-6) (rh) */
    Scr_UReg_8Bit SYNC:1;           /**< \brief [1:1] Synchronisation (at least one CAN frame without fail must have been received) (rh) */
    Scr_UReg_8Bit SWKSET:1;         /**< \brief [2:2] Selective Wake Activity (rh) */
    Scr_UReg_8Bit CANSIL:1;         /**< \brief [3:3] CAN Bus Silent Time during Selective Wake Operation (rh) */
    Scr_UReg_8Bit FDF:1;            /**< \brief [4:4] FD Frame Reception (rh) */
    Scr_UReg_8Bit RXDF:1;           /**< \brief [5:5] Filtered Receive Data Input (rh) */
    Scr_UReg_8Bit RXDS:1;           /**< \brief [6:6] Sampled Receive Data Input (rh) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [7:7] \internal Reserved */
} Scr_WCAN_INTESTAT1_Bits;

/** \brief Wake-Up CAN Error Counter Register */
typedef struct
{
    Scr_UReg_8Bit ECNT:6;           /**< \brief [5:0] SWK CAN Frame Error Counter (rh) */
    Scr_UReg_8Bit FDEC_DIS:1;       /**< \brief [6:6] Error Count Disable on CAN FD Frame (rw) */
    Scr_UReg_8Bit ECNTCLR:1;        /**< \brief [7:7] Error Counter Clear Bit (w) */
} Scr_WCAN_FRMERRCNT_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 0 */
typedef struct
{
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [1:0] \internal Reserved */
    Scr_UReg_8Bit SYSERRCLR:1;      /**< \brief [2:2] CAN WUP System Error Clear Bit (w) */
    Scr_UReg_8Bit CANTOCLR:1;       /**< \brief [3:3] CAN Time-Out Detection Clear Bit (w) */
    Scr_UReg_8Bit ECOFLCLR:1;       /**< \brief [4:4] Error Counter Overflow Clear Bit (w) */
    Scr_UReg_8Bit MORCCLR:1;        /**< \brief [5:5] Message Object Register Changed Clear Bit (w) */
    Scr_UReg_8Bit ERSELCLR:1;       /**< \brief [6:6] Error Select Clear Bit (w) */
    Scr_UReg_8Bit WUPCLR:1;         /**< \brief [7:7] WUP Clear Bit (w) */
} Scr_WCAN_INTESCLR0_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 1 */
typedef struct
{
    Scr_UReg_8Bit WUFCLR:1;         /**< \brief [0:0] Wake-up Frame Detection Flag Clear Bit (w) */
    Scr_UReg_8Bit SYNCCLR:1;        /**< \brief [1:1] Synchronisation (at least one can frame without fail must have been received) Clear Bit (w) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [2:2] \internal Reserved */
    Scr_UReg_8Bit CANSILCLR:1;      /**< \brief [3:3] CAN Silent Time during SWK Operation Clear Bit (w) */
    Scr_UReg_8Bit reserved_1:4;     /**< \brief [7:4] \internal Reserved */
} Scr_WCAN_INTESCLR1_Bits;

/** \brief Bit Timing Logic 1 Control Register */
typedef struct
{
    Scr_UReg_8Bit TBIT;             /**< \brief [7:0] Number of Time Quanta in a Bit Time (rw) */
} Scr_WCAN_BTL1_CTRL_Bits;

/** \brief Bit Timing Logic 2 Control Register */
typedef struct
{
    Scr_UReg_8Bit SP:6;             /**< \brief [5:0] Sample Point Position (rw) */
    Scr_UReg_8Bit BRP:2;            /**< \brief [7:6] Baudrate Prescaler (rw) */
} Scr_WCAN_BTL2_CTRL_Bits;

/** \brief CDR Control Register */
typedef struct
{
    Scr_UReg_8Bit CDREN:1;          /**< \brief [0:0] Enable CDR (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [1:1] \internal Reserved */
    Scr_UReg_8Bit ESF:2;            /**< \brief [3:2] Error scaling factor (rw) */
    Scr_UReg_8Bit reserved_1:4;     /**< \brief [7:4] \internal Reserved */
} Scr_WCAN_CDR_CTRL_Bits;

/** \brief CDR Upper Limit Control Register */
typedef struct
{
    Scr_UReg_8Bit UPPER;            /**< \brief [7:0] CDR Upper Limit (rw) */
} Scr_WCAN_CDR_UPPER_CTRL_Bits;

/** \brief CDR Lower Limit Control Register */
typedef struct
{
    Scr_UReg_8Bit LOWER;            /**< \brief [7:0] CDR Lower Limit (rw) */
} Scr_WCAN_CDR_LOWER_CTRL_Bits;

/** \brief CDR Measured High Register */
typedef struct
{
    Scr_UReg_8Bit HIGH;             /**< \brief [7:0] CDR Internally Measured High Value (rh) */
} Scr_WCAN_CDR_MEAS_HIGH_Bits;

/** \brief CDR Measured Low Register */
typedef struct
{
    Scr_UReg_8Bit LOW:6;            /**< \brief [5:0] CDR Internally Measured Low Value (rh) */
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [7:6] \internal Reserved */
} Scr_WCAN_CDR_MEAS_LOW_Bits;

/** \brief CAN FD Control Register */
typedef struct
{
    Scr_UReg_8Bit FDEN:1;           /**< \brief [0:0] CAN FD Tolerant Enable (rw) */
    Scr_UReg_8Bit FDFILT:3;         /**< \brief [3:1] CAN FD Filter Time (rw) */
    Scr_UReg_8Bit reserved_0:4;     /**< \brief [7:4] \internal Reserved */
} Scr_WCAN_FD_CTRL_Bits;

/** \brief Message Data Length Code Control Register */
typedef struct
{
    Scr_UReg_8Bit DLC:4;            /**< \brief [3:0] Data Length Code (rw) */
    Scr_UReg_8Bit reserved_0:4;     /**< \brief [7:4] \internal Reserved */
} Scr_WCAN_DLC_CTRL_Bits;

/** \brief Message Identifier Control Register 0 */
typedef struct
{
    Scr_UReg_8Bit ID;               /**< \brief [7:0] CAN Identifier [7:0] (rw) */
} Scr_WCAN_ID0_CTRL_Bits;

/** \brief Message Identifier Control Register 1 */
typedef struct
{
    Scr_UReg_8Bit ID;               /**< \brief [7:0] CAN Identifier [15:8] (rw) */
} Scr_WCAN_ID1_CTRL_Bits;

/** \brief Message Identifier Control Register 2 */
typedef struct
{
    Scr_UReg_8Bit ID;               /**< \brief [7:0] CAN Identifier [23:16] (rw) */
} Scr_WCAN_ID2_CTRL_Bits;

/** \brief Message Identifier Control Register 3 */
typedef struct
{
    Scr_UReg_8Bit IDE:1;            /**< \brief [0:0] Identified Extension Bit (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [1:1] \internal Reserved */
    Scr_UReg_8Bit ID:5;             /**< \brief [6:2] CAN Identifier [28:24] (rw) */
    Scr_UReg_8Bit reserved_1:1;     /**< \brief [7:7] \internal Reserved */
} Scr_WCAN_ID3_CTRL_Bits;

/** \brief Message Identifier Mask Register 0 */
typedef struct
{
    Scr_UReg_8Bit MID;              /**< \brief [7:0] Mask for Message Identifier [7:0] (rw) */
} Scr_WCAN_MASK_ID0_CTRL_Bits;

/** \brief Message Identifier Mask Register 1 */
typedef struct
{
    Scr_UReg_8Bit MID;              /**< \brief [7:0] Mask for Message Identifier [15:8] (rw) */
} Scr_WCAN_MASK_ID1_CTRL_Bits;

/** \brief Message Identifier Mask Register 2 */
typedef struct
{
    Scr_UReg_8Bit MID;              /**< \brief [7:0] Mask for Message Identifier [23:16] (rw) */
} Scr_WCAN_MASK_ID2_CTRL_Bits;

/** \brief Message Identifier Mask Register 3 */
typedef struct
{
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [1:0] \internal Reserved */
    Scr_UReg_8Bit MID:5;            /**< \brief [6:2] Mask for Message Identifier [28:24] (rw) */
    Scr_UReg_8Bit reserved_1:1;     /**< \brief [7:7] \internal Reserved */
} Scr_WCAN_MASK_ID3_CTRL_Bits;

/** \brief DATA Control Register n */
typedef struct
{
    Scr_UReg_8Bit DATA;             /**< \brief [7:0] CAN Data Byte (rw) */
} Scr_WCAN_DATAn_CTRL_Bits;

/** \}  */

/** \addtogroup Scr_WCAN_Registers_union
 * \{   */

/** \brief Page Register for WCAN */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_PAGE_Bits B;           /**< \brief Bitfield access */
} Scr_WCAN_PAGE;

/** \brief Wake-Up CAN Configuration Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_CFG_Bits B;            /**< \brief Bitfield access */
} Scr_WCAN_CFG;

/** \brief Wake-Up CAN Interrupt Mask Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_INTMRSLT_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_INTMRSLT;

/** \brief Wake-Up CAN Interrupt and Event Status Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_INTESTAT0_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_INTESTAT0;

/** \brief Wake-Up CAN Interrupt and Event Status Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_INTESTAT1_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_INTESTAT1;

/** \brief Wake-Up CAN Error Counter Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_FRMERRCNT_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_FRMERRCNT;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_INTESCLR0_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_INTESCLR0;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_INTESCLR1_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_INTESCLR1;

/** \brief Bit Timing Logic 1 Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_BTL1_CTRL_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_BTL1_CTRL;

/** \brief Bit Timing Logic 2 Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_BTL2_CTRL_Bits B;      /**< \brief Bitfield access */
} Scr_WCAN_BTL2_CTRL;

/** \brief CDR Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_CDR_CTRL_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_CDR_CTRL;

/** \brief CDR Upper Limit Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_CDR_UPPER_CTRL_Bits B; /**< \brief Bitfield access */
} Scr_WCAN_CDR_UPPER_CTRL;

/** \brief CDR Lower Limit Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_CDR_LOWER_CTRL_Bits B; /**< \brief Bitfield access */
} Scr_WCAN_CDR_LOWER_CTRL;

/** \brief CDR Measured High Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_CDR_MEAS_HIGH_Bits B;  /**< \brief Bitfield access */
} Scr_WCAN_CDR_MEAS_HIGH;

/** \brief CDR Measured Low Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_CDR_MEAS_LOW_Bits B;   /**< \brief Bitfield access */
} Scr_WCAN_CDR_MEAS_LOW;

/** \brief CAN FD Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_FD_CTRL_Bits B;        /**< \brief Bitfield access */
} Scr_WCAN_FD_CTRL;

/** \brief Message Data Length Code Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DLC_CTRL_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_DLC_CTRL;

/** \brief Message Identifier Control Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_ID0_CTRL_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_ID0_CTRL;

/** \brief Message Identifier Control Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_ID1_CTRL_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_ID1_CTRL;

/** \brief Message Identifier Control Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_ID2_CTRL_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_ID2_CTRL;

/** \brief Message Identifier Control Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_ID3_CTRL_Bits B;       /**< \brief Bitfield access */
} Scr_WCAN_ID3_CTRL;

/** \brief Message Identifier Mask Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_MASK_ID0_CTRL_Bits B;  /**< \brief Bitfield access */
} Scr_WCAN_MASK_ID0_CTRL;

/** \brief Message Identifier Mask Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_MASK_ID1_CTRL_Bits B;  /**< \brief Bitfield access */
} Scr_WCAN_MASK_ID1_CTRL;

/** \brief Message Identifier Mask Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_MASK_ID2_CTRL_Bits B;  /**< \brief Bitfield access */
} Scr_WCAN_MASK_ID2_CTRL;

/** \brief Message Identifier Mask Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_MASK_ID3_CTRL_Bits B;  /**< \brief Bitfield access */
} Scr_WCAN_MASK_ID3_CTRL;

/** \brief DATA Control Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA0_CTRL;

/** \brief DATA Control Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA1_CTRL;

/** \brief DATA Control Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA2_CTRL;

/** \brief DATA Control Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA3_CTRL;

/** \brief DATA Control Register 4 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA4_CTRL;

/** \brief DATA Control Register 5 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA5_CTRL;

/** \brief DATA Control Register 6 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA6_CTRL;

/** \brief DATA Control Register 7 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_WCAN_DATAn_CTRL_Bits B;     /**< \brief Bitfield access */
} Scr_WCAN_DATA7_CTRL;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/

#endif /* SCR_WCAN_SDCC_H_ */
