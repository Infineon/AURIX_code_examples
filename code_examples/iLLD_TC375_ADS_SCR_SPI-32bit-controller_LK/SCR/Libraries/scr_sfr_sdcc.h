/**********************************************************************************************************************
 * \file scr_sfr_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_SFR_SDCC_H_
#define SCR_SFR_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/* Disable protection scheme
 *      PASS = 0x18 (MODE_EN), MODE = 00b (SCHEME_DIS) */
#define SCR_DISABLE_PROTECTION_SCHEME() SCR_PASSWD = 0xC0

/* Enable protection scheme
 *      PASS = 0x18 (MODE_EN), MODE = 11b (SCHEME_EN3) */
#define SCR_ENABLE_PROTECTION_SCHEME()  SCR_PASSWD = 0xC3

/* Open access to write protected bits
 *      PASS = 0x13 (PROT_OPEN), MODE = 00b */
#define SCR_UNLOCK_PROTECTED_BITS()     SCR_PASSWD = 0x98

/* Close access to write protected bits
 *      PASS = 0x15 PROT_CLOSE), MODE = 00b */
#define SCR_LOCK_PROTECTED_BITS()       SCR_PASSWD = 0xA8

#define IDLE_MASK                       (0x01)

/*********************************************************************************************************************/
/*-------------------------------------------------------SFRs--------------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_SP)                     SCR_SP;
__sfr __at(ADDR_SCR_DPL)                    SCR_DPL;
__sfr __at(ADDR_SCR_DPH)                    SCR_DPH;
__sfr __at(ADDR_SCR_ACC)                    SCR_ACC;            /* bit-addressable SFR */
__sfr __at(ADDR_SCR_B)                      SCR_B;
__sfr __at(ADDR_SCR_PSW)                    SCR_PSW;            /* bit-addressable SFR */
__sbit __at(ADDR_SCR_PSW+0)                 SCR_PSW_P;          /* Parity Flag */
__sbit __at(ADDR_SCR_PSW+1)                 SCR_PSW_F1;         /* General Purpose Flag */
__sbit __at(ADDR_SCR_PSW+2)                 SCR_PSW_OV;         /* Overflow Flag */
__sbit __at(ADDR_SCR_PSW+5)                 SCR_PSW_F0;         /* General Purpose Flag */
__sbit __at(ADDR_SCR_PSW+6)                 SCR_PSW_AC;         /* Auxiliary Carry Flag */
__sbit __at(ADDR_SCR_PSW+7)                 SCR_PSW_CY;         /* Carry Flag */
__sfr __at(ADDR_SCR_EO)                     SCR_EO;
__sfr __at(ADDR_SCR_PCON)                   SCR_PCON;
__sfr __at(ADDR_SCR_XADDRH)                 SCR_XADDRH;
__sfr __at(ADDR_SCR_SYSCON0)                SCR_SYSCON0;        /* bit-addressable SFR */
__sbit __at(ADDR_SCR_SYSCON0+0)             SCR_SYSCON0_RMAP;   /* Special Function Register Map Control */
__sbit __at(ADDR_SCR_SYSCON0+2)             SCR_SYSCON0_AMSEL;  /* Active Memory Map Select */
__sfr __at(ADDR_SCR_PASSWD)                 SCR_PASSWD;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_SFR_Registers_Bitfields
 * \{  */

/** \brief Program Status Word Register */
typedef struct
{
    Scr_UReg_8Bit P:1;              /**< \brief [0:0] Parity Flag (rh) */
    Scr_UReg_8Bit F1:1;             /**< \brief [1:1] General Purpose Flag (rw) */
    Scr_UReg_8Bit OV:1;             /**< \brief [2:2] Overflow Flag (rwh) */
    Scr_UReg_8Bit RS:2;             /**< \brief [4:3] Register Bank Select (rw) */
    Scr_UReg_8Bit F0:1;             /**< \brief [5:5] General Purpose Flag (rw) */
    Scr_UReg_8Bit AC:1;             /**< \brief [6:6] Auxiliary Carry Flag (rwh) */
    Scr_UReg_8Bit CY:1;             /**< \brief [7:7] Carry Flag (rwh) */
} Scr_PSW_Bits;

/** \brief Extended Operation Register */
typedef struct
{
    Scr_UReg_8Bit DPSEL:3;          /**< \brief [2:0] Data Pointer Select (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [3:3] \internal Reserved */
    Scr_UReg_8Bit TRAP_EN:1;        /**< \brief [4:4] TRAP Enable (rw) */
    Scr_UReg_8Bit reserved_1:3;     /**< \brief [7:5] \internal Reserved */
} Scr_EO_Bits;

/** \brief Power Control Register */
typedef struct
{
    Scr_UReg_8Bit IDLE:1;           /**< \brief [0:0] Idle Mode Enable (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [1:1] \internal Reserved */
    Scr_UReg_8Bit GF0:1;            /**< \brief [2:2] General Purpose Flag Bit 0 (rw) */
    Scr_UReg_8Bit GF1:1;            /**< \brief [3:3] General Purpose Flag Bit 1 (rw) */
    Scr_UReg_8Bit reserved_1:3;     /**< \brief [6:4] \internal Reserved */
    Scr_UReg_8Bit SMOD:1;           /**< \brief [7:7] Double Baud Rate Enable (rw) */
} Scr_PCON_Bits;

/** \brief On-Chip XRAM Address Higher Order */
typedef struct
{
    Scr_UReg_8Bit ADDRH;            /**< \brief [7:0] Higher Order of On-chip XRAM Address (rw) */
} Scr_XADDRH_Bits;

/** \brief System Control Register 0 */
typedef struct
{
    Scr_UReg_8Bit RMAP:1;           /**< \brief [0:0] Special Function Register Map Control (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [1:1] \internal Reserved */
    Scr_UReg_8Bit AMSEL:1;          /**< \brief [2:2] Active Memory Map Select (rw) */
    Scr_UReg_8Bit reserved_1:5;     /**< \brief [7:3] \internal Reserved */
} Scr_SYSCON0_Bits;

/** \brief Password Register */
typedef struct
{
    Scr_UReg_8Bit MODE:2;           /**< \brief [1:0] Bit-Protection Scheme Control Bit (rw) */
    Scr_UReg_8Bit PROTECT_S:1;      /**< \brief [2:2] Bit-Protection Signal Status Bit (rh) */
    Scr_UReg_8Bit PASS:5;           /**< \brief [7:3] Password Bits (w) */
} Scr_PASSWD_Bits;

/** \}  */

/** \addtogroup Scr_SFR_Registers_union
 * \{   */

/** \brief Program Status Word Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_PSW_Bits B;                 /**< \brief Bitfield access */
} Scr_PSW;

/** \brief Extended Operation Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_EO_Bits B;                  /**< \brief Bitfield access */
} Scr_EO;

/** \brief Power Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_PCON_Bits B;                /**< \brief Bitfield access */
} Scr_PCON;

/** \brief On-Chip XRAM Address Higher Order */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_XADDRH_Bits B;              /**< \brief Bitfield access */
} Scr_XADDRH;

/** \brief System Control Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SYSCON0_Bits B;             /**< \brief Bitfield access */
} Scr_SYSCON0;

/** \brief Password Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_PASSWD_Bits B;              /**< \brief Bitfield access */
} Scr_PASSWD;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/

#endif /* SCR_SFR_SDCC_H_ */
