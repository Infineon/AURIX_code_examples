/**********************************************************************************************************************
 * \file scr_t2ccu_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_T2CCU_SDCC_H_
#define SCR_T2CCU_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SCR_SET_T2CCU_PAGE(p)           SCR_T2CCU_PAGE = ((uint8)(p & MOD_PAGE_MASK))

#define SCR_SET_T2CCU_PAGE_STNR0(p)     SCR_T2CCU_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_0 | (p & MOD_PAGE_MASK)))
#define SCR_SET_T2CCU_PAGE_STNR1(p)     SCR_T2CCU_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_1 | (p & MOD_PAGE_MASK)))
#define SCR_SET_T2CCU_PAGE_STNR2(p)     SCR_T2CCU_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_2 | (p & MOD_PAGE_MASK)))
#define SCR_SET_T2CCU_PAGE_STNR3(p)     SCR_T2CCU_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_3 | (p & MOD_PAGE_MASK)))

#define SCR_RESTORE_T2CCU_PAGE_STNR0()      SCR_T2CCU_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_0))
#define SCR_RESTORE_T2CCU_PAGE_STNR1()      SCR_T2CCU_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_1))
#define SCR_RESTORE_T2CCU_PAGE_STNR2()      SCR_T2CCU_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_2))
#define SCR_RESTORE_T2CCU_PAGE_STNR3()      SCR_T2CCU_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_3))

/*********************************************************************************************************************/
/*----------------------------------------------Page Register for T2CCU----------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_T2CCU_PAGE)             SCR_T2CCU_PAGE;

/*********************************************************************************************************************/
/*-------------------------------------------------Timer 2 Registers-------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_T2_MOD)                 SCR_T2_MOD;
__sfr __at(ADDR_SCR_T2_CON)                 SCR_T2_CON;                 /* bit-addressable SFR */
__sbit __at(ADDR_SCR_T2_CON+0)              SCR_T2_CON_CP_RL2;          /* Capture/Reload Select */
__sbit __at(ADDR_SCR_T2_CON+1)              SCR_T2_CON_C_T2;            /* Timer or Counter Select */
__sbit __at(ADDR_SCR_T2_CON+2)              SCR_T2_CON_TR2;             /* Timer 2 Run Control */
__sbit __at(ADDR_SCR_T2_CON+3)              SCR_T2_CON_EXEN2;           /* Timer 2 External Enable Control */
__sbit __at(ADDR_SCR_T2_CON+6)              SCR_T2_CON_EXF2;            /* Timer 2 External Flag */
__sbit __at(ADDR_SCR_T2_CON+7)              SCR_T2_CON_TF2;             /* Timer 2 Overflow/Underflow Flag */
__sfr __at(ADDR_SCR_T2_CON1)                SCR_T2_CON1;
__sfr __at(ADDR_SCR_T2_RC2L)                SCR_T2_RC2L;
__sfr __at(ADDR_SCR_T2_RC2H)                SCR_T2_RC2H;
__sfr __at(ADDR_SCR_T2_T2L)                 SCR_T2_T2L;
__sfr __at(ADDR_SCR_T2_T2H)                 SCR_T2_T2H;
__sfr __at(ADDR_SCR_T2CCU_CCTBSEL)          SCR_T2CCU_CCTBSEL;
__sfr __at(ADDR_SCR_T2CCU_CCTRELL)          SCR_T2CCU_CCTRELL;
__sfr __at(ADDR_SCR_T2CCU_CCTRELH)          SCR_T2CCU_CCTRELH;
__sfr __at(ADDR_SCR_T2CCU_CCTL)             SCR_T2CCU_CCTL;
__sfr __at(ADDR_SCR_T2CCU_CCTH)             SCR_T2CCU_CCTH;
__sfr __at(ADDR_SCR_T2CCU_CCTCON)           SCR_T2CCU_CCTCON;
__sfr __at(ADDR_SCR_T2CCU_CCTDTCL)          SCR_T2CCU_CCTDTCL;
__sfr __at(ADDR_SCR_T2CCU_CCTDTCH)          SCR_T2CCU_CCTDTCH;
__sfr __at(ADDR_SCR_T2CCU_CCEN)             SCR_T2CCU_CCEN;             /* bit-addressable SFR */
__sfr __at(ADDR_SCR_T2CCU_COSHDW)           SCR_T2CCU_COSHDW;           /* bit-addressable SFR */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+0)        SCR_T2CCU_COSHDW_COOUT0;    /* Compare Channel 0 Output */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+1)        SCR_T2CCU_COSHDW_COOUT1;    /* Compare Channel 1 Output */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+2)        SCR_T2CCU_COSHDW_COOUT2;    /* Compare Channel 2 Output */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+3)        SCR_T2CCU_COSHDW_COOUT3;    /* Compare Channel 3 Output */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+4)        SCR_T2CCU_COSHDW_COOUT4;    /* Compare Channel 4 Output */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+5)        SCR_T2CCU_COSHDW_COOUT5;    /* Compare Channel 5 Output */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+6)        SCR_T2CCU_COSHDW_TXOV;      /* Enable Shadow Transfer On Timer Overflow */
__sbit __at(ADDR_SCR_T2CCU_COSHDW+7)        SCR_T2CCU_COSHDW_ENSHDW;    /* Enable Shadow Transfer With COOUTx */
__sfr __at(ADDR_SCR_T2CCU_COCON)            SCR_T2CCU_COCON;            /* bit-addressable SFR */
__sbit __at(ADDR_SCR_T2CCU_COCON+2)         SCR_T2CCU_COCON_POLA;       /* Compare Active Level for Channel Group A */
__sbit __at(ADDR_SCR_T2CCU_COCON+3)         SCR_T2CCU_COCON_POLB;       /* Compare Active Level for Channel Group B */
__sbit __at(ADDR_SCR_T2CCU_COCON+4)         SCR_T2CCU_COCON_CM4F;       /* Compare Channel 4 Interrupt Flag */
__sbit __at(ADDR_SCR_T2CCU_COCON+5)         SCR_T2CCU_COCON_CM5F;       /* Compare Channel 5 Interrupt Flag */
__sbit __at(ADDR_SCR_T2CCU_COCON+6)         SCR_T2CCU_COCON_CCM4;       /* Compare Enable for Channel 4 */
__sbit __at(ADDR_SCR_T2CCU_COCON+7)         SCR_T2CCU_COCON_CCM5;       /* Compare Enable for Channel 5 */
__sfr __at(ADDR_SCR_T2CCU_CC0L)             SCR_T2CCU_CC0L;
__sfr __at(ADDR_SCR_T2CCU_CC1L)             SCR_T2CCU_CC1L;
__sfr __at(ADDR_SCR_T2CCU_CC2L)             SCR_T2CCU_CC2L;
__sfr __at(ADDR_SCR_T2CCU_CC3L)             SCR_T2CCU_CC3L;
__sfr __at(ADDR_SCR_T2CCU_CC4L)             SCR_T2CCU_CC4L;
__sfr __at(ADDR_SCR_T2CCU_CC5L)             SCR_T2CCU_CC5L;
__sfr __at(ADDR_SCR_T2CCU_CC0H)             SCR_T2CCU_CC0H;
__sfr __at(ADDR_SCR_T2CCU_CC1H)             SCR_T2CCU_CC1H;
__sfr __at(ADDR_SCR_T2CCU_CC2H)             SCR_T2CCU_CC2H;
__sfr __at(ADDR_SCR_T2CCU_CC3H)             SCR_T2CCU_CC3H;
__sfr __at(ADDR_SCR_T2CCU_CC4H)             SCR_T2CCU_CC4H;
__sfr __at(ADDR_SCR_T2CCU_CC5H)             SCR_T2CCU_CC5H;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_T2CCU_Registers_Bitfields
 * \{  */

/** \brief Page Register for T2CCU */
typedef struct
{
    Scr_UReg_8Bit PAGE:3;           /**< \brief [2:0] Page Bits (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [3:3] \internal Reserved */
    Scr_UReg_8Bit STNR:2;           /**< \brief [5:4] Storage Number (w) */
    Scr_UReg_8Bit OP:2;             /**< \brief [7:6] Operation (w) */
} Scr_T2CCU_PAGE_Bits;

/** \brief Timer 2 Mode Register */
typedef struct
{
    Scr_UReg_8Bit DCEN:1;           /**< \brief [0:0] Up/Down Counter Enable (rw) */
    Scr_UReg_8Bit T2PRE:3;          /**< \brief [3:1] Timer 2 Prescaler Bit (rw) */
    Scr_UReg_8Bit PREN:1;           /**< \brief [4:4] Prescaler Enable (rw) */
    Scr_UReg_8Bit EDGESEL:1;        /**< \brief [5:5] Edge Select in Capture Mode/Reload Mode (rw) */
    Scr_UReg_8Bit T2RHEN:1;         /**< \brief [6:6] Timer 2 External Start Enable (rw) */
    Scr_UReg_8Bit T2REGS:1;         /**< \brief [7:7] Edge Select for Timer 2 External Start (rw) */
} Scr_T2_MOD_Bits;

/** \brief Timer 2 Control Register */
typedef struct
{
    Scr_UReg_8Bit CP_RL2:1;         /**< \brief [0:0] Capture/Reload Select (rw) */
    Scr_UReg_8Bit C_T2:1;           /**< \brief [1:1] Timer or Counter Select (rw) */
    Scr_UReg_8Bit TR2:1;            /**< \brief [2:2] Timer 2 Run Control (rwh) */
    Scr_UReg_8Bit EXEN2:1;          /**< \brief [3:3] Timer 2 External Enable Control (rw) */
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [5:4] \internal Reserved */
    Scr_UReg_8Bit EXF2:1;           /**< \brief [6:6] Timer 2 External Flag (rwh) */
    Scr_UReg_8Bit TF2:1;            /**< \brief [7:7] Timer 2 Overflow/Underflow Flag (w) */
} Scr_T2_CON_Bits;

/** \brief Timer 2 Control Register 1 */
typedef struct
{
    Scr_UReg_8Bit EXF2EN:1;         /**< \brief [0:0] External Interrupt Enable (rw) */
    Scr_UReg_8Bit TF2EN:1;          /**< \brief [1:1] Overflow/Underflow Interrupt Enable (rw) */
    Scr_UReg_8Bit reserved_0:6;     /**< \brief [7:2] \internal Reserved */
} Scr_T2_CON1_Bits;

/** \brief Timer 2 Reload/Capture Register, Low Byte */
typedef struct
{
    Scr_UReg_8Bit RC2;              /**< \brief [7:0] Reload/Capture Value [7:0] (rwh) */
} Scr_T2_RC2L_Bits;

/** \brief Timer 2 Reload/Capture Register, High Byte */
typedef struct
{
    Scr_UReg_8Bit RC2;              /**< \brief [7:0] Reload/Capture Value [15:8] (rwh) */
} Scr_T2_RC2H_Bits;

/** \brief Timer 2, Low Byte */
typedef struct
{
    Scr_UReg_8Bit THL2;             /**< \brief [7:0] Timer 2 Value [7:0] (rwh) */
} Scr_T2_T2L_Bits;

/** \brief Timer 2, High Byte */
typedef struct
{
    Scr_UReg_8Bit THL2;             /**< \brief [7:0] Timer 2 Value [15:8] (rwh) */
} Scr_T2_T2H_Bits;

/** \brief T2CCU Capture/Compare Time Base Select Register */
typedef struct
{
    Scr_UReg_8Bit CCTB0:1;          /**< \brief [0:0] Channel 0 Time Base Select (rw) */
    Scr_UReg_8Bit CCTB1:1;          /**< \brief [1:1] Channel 1 Time Base Select (rw) */
    Scr_UReg_8Bit CCTB2:1;          /**< \brief [2:2] Channel 2 Time Base Select (rw) */
    Scr_UReg_8Bit CCTB3:1;          /**< \brief [3:3] Channel 3 Time Base Select (rw) */
    Scr_UReg_8Bit CCTB4:1;          /**< \brief [4:4] Channel 4 Time Base Select (rw) */
    Scr_UReg_8Bit CCTB5:1;          /**< \brief [5:5] Channel 5 Time Base Select (rw) */
    Scr_UReg_8Bit CCTTOV:1;         /**< \brief [6:6] Trigger CCT Timer Overflow Event (rwh) */
    Scr_UReg_8Bit CASC:1;           /**< \brief [7:7] Cascade Timers (rw) */
} Scr_T2CCU_CCTBSEL_Bits;

/** \brief T2CCU Capture/Compare Timer Reload Register Low */
typedef struct
{
    Scr_UReg_8Bit CCTREL;           /**< \brief [7:0] Capture/Compare Timer Low Byte Reload Value [7:0] (rw) */
} Scr_T2CCU_CCTRELL_Bits;

/** \brief T2CCU Capture/Compare Timer Reload Register High */
typedef struct
{
    Scr_UReg_8Bit CCTREL;           /**< \brief [7:0] Capture/Compare Timer Low Byte Reload Value [15:8] (rw) */
} Scr_T2CCU_CCTRELH_Bits;

/** \brief T2CCU Capture/Compare Timer Register Low */
typedef struct
{
    Scr_UReg_8Bit CCT;              /**< \brief [7:0] Capture/Compare Timer Low Byte Value [7:0] (rwh) */
} Scr_T2CCU_CCTL_Bits;

/** \brief T2CCU Capture/Compare Timer Register High */
typedef struct
{
    Scr_UReg_8Bit CCT;              /**< \brief [7:0] Capture/Compare Timer Low Byte Value [15:8] (rwh) */
} Scr_T2CCU_CCTH_Bits;

/** \brief T2CCU Capture/Compare Timer Control Register */
typedef struct
{
    Scr_UReg_8Bit CCTST:1;          /**< \brief [0:0] Capture/Compare Timer Start/Stop Control (rw) */
    Scr_UReg_8Bit TIMSYN:1;         /**< \brief [1:1] Enable Synchronized Timer Starts (rw) */
    Scr_UReg_8Bit CCTOVEN:1;        /**< \brief [2:2] Capture/Compare Timer Overflow Interrupt Enable (rw) */
    Scr_UReg_8Bit CCTOVF:1;         /**< \brief [3:3] Capture/Compare Timer Overflow Flag (rwh) */
    Scr_UReg_8Bit CCTPRE:4;         /**< \brief [7:4] Compare/Compare Timer Prescaler Bitfield (rw) */
} Scr_T2CCU_CCTCON_Bits;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register Low */
typedef struct
{
    Scr_UReg_8Bit DTM;              /**< \brief [7:0] Dead-Time Value (rwh) */
} Scr_T2CCU_CCTDTCL_Bits;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register High */
typedef struct
{
    Scr_UReg_8Bit DTE0:1;           /**< \brief [0:0] Dead-Time Enable for Channel Pair 0 (rw) */
    Scr_UReg_8Bit DTE1:1;           /**< \brief [1:1] Dead-Time Enable for Channel Pair 1 (rw) */
    Scr_UReg_8Bit DTE2:1;           /**< \brief [2:2] Dead-Time Enable for Channel Pair 2 (rw) */
    Scr_UReg_8Bit DTLEV:1;          /**< \brief [3:3] Dead-Time Level (rw) */
    Scr_UReg_8Bit DTR0:1;           /**< \brief [4:4] Dead-Time Run Indication Bits 0 (rh) */
    Scr_UReg_8Bit DTR1:1;           /**< \brief [5:5] Dead-Time Run Indication Bits 1 (rh) */
    Scr_UReg_8Bit DTR2:1;           /**< \brief [6:6] Dead-Time Run Indication Bits 2 (rh) */
    Scr_UReg_8Bit DTRES:1;          /**< \brief [7:7] Reset Dead-Time Counters (rwh) */
} Scr_T2CCU_CCTDTCH_Bits;

/** \brief T2CCU Capture/Compare Enable Register */
typedef struct
{
    Scr_UReg_8Bit CCM0:2;           /**< \brief [1:0] Capture/Compare Enable for Channel 0 (rw) */
    Scr_UReg_8Bit CCM1:2;           /**< \brief [3:2] Capture/Compare Enable for Channel 1 (rw) */
    Scr_UReg_8Bit CCM2:2;           /**< \brief [5:4] Capture/Compare Enable for Channel 2 (rw) */
    Scr_UReg_8Bit CCM3:2;           /**< \brief [7:6] Capture/Compare Enable for Channel 3 (rw) */
} Scr_T2CCU_CCEN_Bits;

/** \brief T2CCU Compare Shadow Register */
typedef struct
{
    Scr_UReg_8Bit COOUT0:1;         /**< \brief [0:0] Compare Channel 0 Output (rwh) */
    Scr_UReg_8Bit COOUT1:1;         /**< \brief [1:1] Compare Channel 1 Output (rwh) */
    Scr_UReg_8Bit COOUT2:1;         /**< \brief [2:2] Compare Channel 2 Output (rwh) */
    Scr_UReg_8Bit COOUT3:1;         /**< \brief [3:3] Compare Channel 3 Output (rwh) */
    Scr_UReg_8Bit COOUT4:1;         /**< \brief [4:4] Compare Channel 4 Output (rwh) */
    Scr_UReg_8Bit COOUT5:1;         /**< \brief [5:5] Compare Channel 5 Output (rwh) */
    Scr_UReg_8Bit TXOV:1;           /**< \brief [6:6] Enable Shadow Transfer On Timer Overflow (rw) */
    Scr_UReg_8Bit ENSHDW:1;         /**< \brief [7:7] Enable Shadow Transfer With COOUTx (rwh) */
} Scr_T2CCU_COSHDW_Bits;

/** \brief T2CCU Compare Control Register */
typedef struct
{
    Scr_UReg_8Bit COMOD:2;          /**< \brief [1:0] Compare Mode Control (for compare channels) (rw) */
    Scr_UReg_8Bit POLA:1;           /**< \brief [2:2] Compare Active Level for Channel Group A (rw) */
    Scr_UReg_8Bit POLB:1;           /**< \brief [3:3] Compare Active Level for Channel Group B (rw) */
    Scr_UReg_8Bit CM4F:1;           /**< \brief [4:4] Compare Channel 4 Interrupt Flag (rwh) */
    Scr_UReg_8Bit CM5F:1;           /**< \brief [5:5] Compare Channel 5 Interrupt Flag (rwh) */
    Scr_UReg_8Bit CCM4:1;           /**< \brief [6:6] Compare Enable for Channel 4 (rw) */
    Scr_UReg_8Bit CCM5:1;           /**< \brief [7:7] Compare Enable for Channel 5 (rw) */
} Scr_T2CCU_COCON_Bits;

/** \brief T2CCU Capture/Compare Register x Low */
typedef struct
{
    Scr_UReg_8Bit CCVALL;           /**< \brief [7:0] Capture/Compare Low Byte Value for Channel x (rwh) */
} Scr_T2CCU_CCxL_Bits;

/** \briefT2CCU Capture/Compare Register x High */
typedef struct
{
    Scr_UReg_8Bit CCVALH;           /**< \brief [7:0] Capture/Compare High Byte Value for Channel x (rwh) */
} Scr_T2CCU_CCxH_Bits;

/** \}  */

/** \addtogroup Scr_T2_Registers_union
 * \{   */

/** \brief Timer 2 Mode Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_MOD_Bits B;              /**< \brief Bitfield access */
} Scr_T2_MOD;

/** \brief Timer 2 Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_CON_Bits B;              /**< \brief Bitfield access */
} Scr_T2_CON;

/** \brief Timer 2 Control Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_CON1_Bits B;             /**< \brief Bitfield access */
} Scr_T2_CON1;

/** \brief Timer 2 Reload/Capture Register, Low Byte */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_RC2L_Bits B;             /**< \brief Bitfield access */
} Scr_T2_RC2L;

/** \brief Timer 2 Reload/Capture Register, High Byte */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_RC2H_Bits B;             /**< \brief Bitfield access */
} Scr_T2_RC2H;

/** \brief Timer 2, Low Byte */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_T2L_Bits B;              /**< \brief Bitfield access */
} Scr_T2_T2L;

/** \brief Timer 2, High Byte */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2_T2H_Bits B;              /**< \brief Bitfield access */
} Scr_T2_T2H;

/** \}  */

/** \addtogroup Scr_T2CCU_Registers_union
 * \{   */

/** \brief Page Register for T2CCU */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_PAGE_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_PAGE;

/** \brief T2CCU Capture/Compare Time Base Select Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTBSEL_Bits B;       /**< \brief Bitfield access */
} Scr_T2CCU_CCTBSEL;

/** \brief T2CCU Capture/Compare Timer Reload Register Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTRELL_Bits B;       /**< \brief Bitfield access */
} Scr_T2CCU_CCTRELL;

/** \brief T2CCU Capture/Compare Timer Reload Register High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTRELH_Bits B;       /**< \brief Bitfield access */
} Scr_T2CCU_CCTRELH;

/** \brief T2CCU Capture/Compare Timer Register Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CCTL;

/** \brief T2CCU Capture/Compare Timer Register High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CCTH;

/** \brief T2CCU Capture/Compare Timer Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTCON_Bits B;        /**< \brief Bitfield access */
} Scr_T2CCU_CCTCON;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTDTCL_Bits B;       /**< \brief Bitfield access */
} Scr_T2CCU_CCTDTCL;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCTDTCH_Bits B;       /**< \brief Bitfield access */
} Scr_T2CCU_CCTDTCH;

/** \brief T2CCU Capture/Compare Enable Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCEN_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CCEN;

/** \brief T2CCU Compare Shadow Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_COSHDW_Bits B;        /**< \brief Bitfield access */
} Scr_T2CCU_COSHDW;

/** \brief T2CCU Compare Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_COCON_Bits B;         /**< \brief Bitfield access */
} Scr_T2CCU_COCON;

/** \brief T2CCU Capture/Compare Register 0 Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC0L;

/** \brief T2CCU Capture/Compare Register 1 Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC1L;

/** \brief T2CCU Capture/Compare Register 2 Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC2L;

/** \brief T2CCU Capture/Compare Register 3 Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC3L;

/** \brief T2CCU Capture/Compare Register 4 Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC4L;

/** \brief T2CCU Capture/Compare Register 5 Low */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxL_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC5L;

/** \brief T2CCU Capture/Compare Register 0 High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC0H;

/** \brief T2CCU Capture/Compare Register 1 High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC1H;

/** \brief T2CCU Capture/Compare Register 2 High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC2H;

/** \brief T2CCU Capture/Compare Register 3 High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC3H;

/** \brief T2CCU Capture/Compare Register 4 High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC4H;

/** \brief T2CCU Capture/Compare Register 5 High */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_T2CCU_CCxH_Bits B;          /**< \brief Bitfield access */
} Scr_T2CCU_CC5H;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/

#endif /* SCR_T2CCU_SDCC_H_ */
