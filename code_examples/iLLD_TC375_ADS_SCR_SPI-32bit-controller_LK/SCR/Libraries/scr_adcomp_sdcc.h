/**********************************************************************************************************************
 * \file scr_adcomp_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_ADCOMP_SDCC_H_
#define SCR_ADCOMP_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"
#include "scr_scu_sdcc.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define ADCENREQ_MASK                       (0x01)
#define ADCEN_MASK                          (0x02)
#define ADCIEN_MASK                         (0x04)
#define ADCCHSEL_MASK                       (0x18)
#define VF_MASK                             (0x20)
#define EOCSAMPLE_MASK                      (0x40)
#define SOC_MASK                            (0x80)

/*********************************************************************************************************************/
/*-------------------------------------------------ADCOMP Registers--------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_SCU_ADCOMP_CON)         SCR_SCU_ADCOMP_CON;
__sfr __at(ADDR_SCR_SCU_ADCOMP_RES)         SCR_SCU_ADCOMP_RES;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_ADCOMP_Registers_Bitfields
 * \{  */

/** \brief ADCOMP Control Register */
typedef struct
{
    Scr_UReg_8Bit ADCENREQ:1;       /**< \brief [0:0] ADC Comparator Enable Request (rw) */
    Scr_UReg_8Bit ADCEN:1;          /**< \brief [1:1] ADC Comparator Enable Status (rh) */
    Scr_UReg_8Bit ADCIEN:1;         /**< \brief [2:2] ADC Comparator Interrupt Enable (rw) */
    Scr_UReg_8Bit ADCCHSEL:2;       /**< \brief [4:3] ADC Channel Select (rw) */
    Scr_UReg_8Bit VF:1;             /**< \brief [5:5] ADC Valid Flag for Result Register (rh) */
    Scr_UReg_8Bit EOCSAMPLE:1;      /**< \brief [6:6] ADC End of Conversion / Sampling Indication (rh) */
    Scr_UReg_8Bit SOC:1;            /**< \brief [7:7] ADC Start of Conversion Request (rwh) */
} SCR_SCU_ADCOMP_CON_Bits;

/** \brief ADCOMP Result Register */
typedef struct
{
    Scr_UReg_8Bit ADRES;            /**< \brief [7:0] ADC Conversion Result (rh) */
} SCR_SCU_ADCOMP_RES_Bits;

/** \}  */

/** \addtogroup Scr_IO_Registers_union
 * \{   */

/** \brief ADCOMP Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    SCR_SCU_ADCOMP_CON_Bits B;      /**< \brief Bitfield access */
} Scr_SCU_ADCOMP_CON;

/** \brief ADCOMP Result Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    SCR_SCU_ADCOMP_RES_Bits B;      /**< \brief Bitfield access */
} Scr_SCU_ADCOMP_RES;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/
SCR_INLINE boolean Scr_is_adc_enabled(void)
{
    return (SCR_SCU_ADCOMP_CON & ADCEN_MASK);
}

SCR_INLINE void Scr_init_adc(void)
{
    SCR_SET_SCU_PAGE(MOD_PAGE_0);
    SCR_SCU_ADCOMP_CON |= (ADCENREQ_MASK | ADCIEN_MASK);
    while(!Scr_is_adc_enabled())
    {}
}

SCR_INLINE void Scr_deinit_adc(void)
{
    SCR_SET_SCU_PAGE(MOD_PAGE_0);
    SCR_SCU_ADCOMP_CON = 0x00;
    while(Scr_is_adc_enabled())
    {}
}

SCR_INLINE void Scr_set_adc_channel(uint8 ch)
{
    SCR_SCU_ADCOMP_CON &= (~ADCCHSEL_MASK);
    SCR_SCU_ADCOMP_CON |= ((ch << 3) & ADCCHSEL_MASK);
    for(uint8 i=0; i<2; i++)
    {}
}

SCR_INLINE void Scr_trigger_adc(void)
{
    SCR_SET_SCU_PAGE(MOD_PAGE_0);
    SCR_SCU_ADCOMP_CON |= SOC_MASK;
}

SCR_INLINE boolean Scr_is_adc_result_valid(void)
{
    return (SCR_SCU_ADCOMP_CON & VF_MASK);
}

SCR_INLINE uint8 Scr_get_adc_result(void)
{
    return SCR_SCU_ADCOMP_RES;
}

#endif /* SCR_ADCOMP_SDCC_H_ */
