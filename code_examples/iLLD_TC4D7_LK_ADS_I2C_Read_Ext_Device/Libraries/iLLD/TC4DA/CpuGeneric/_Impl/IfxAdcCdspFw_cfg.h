/**
 * \file IfxAdcCdspFw_cfg.h
 * \brief ADC on-chip implementation data
 * \ingroup IfxLld_Adc
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_AdcCdspFw ADC
 * \ingroup IfxLld_Adc
 * \defgroup IfxLld_AdcCdspFw_Impl Implementation
 * \ingroup IfxLld_Adc
 * \defgroup IfxLld_AdcCdspFw_Std Standard
 * \ingroup IfxLld_Adc
 */

#ifndef IFXADCCDSPFW_CFG_H
#define IFXADCCDSPFW_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
#include "Cpu/Std/Ifx_Types.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/
#define FIR_NTAPS_MAX           (162U)                                  /* Maximum number of FIR coefficients */
#define IIR_ORDER               (6U)                                    /* Order of IIR filter */
#define FFT_BUFFER_SIZE_MAX     (512U)                                  /* Maximum number of FFT input sample */

#define FIR_X_ARR_DIM           (192U)                                  /* Maximum size of FIR input buffer */
#define IIR_BIQ_SECT_N          (IIR_ORDER >> 1)                        /* Number of BiQuad sections of IIR6 filter */
#define IIR_BIQ_ORDER           (2U)                                    /* Order of IIR6 filter */
#define IIR_BIQ_NTAPS           (IIR_BIQ_ORDER + 1U)                    /* Number of Taps of IIR6 filter */
#define IIR_CFG_COEFFS_ARR_DIM  ((IIR_BIQ_NTAPS * 2U) * IIR_BIQ_SECT_N) /* Number of IIR coefficients */

#if (((((FIR_NTAPS_MAX + 15U) / 16U) + 3U) / 4U * 64U) > FIR_X_ARR_DIM)
  #error "FIR_X_ARR_DIM is too few."
#endif  /* Check plausibility of macro values */

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/
/*[cover parentID="{8C6796F0-9AF2-4524-9F46-A1FBB829DEB5}"] UserConfig_CommonType [/cover]*/
/* Section of the User Configuration Table dedicated to general input addresses parameters */
typedef struct UserConfig_CommonType_tag {
  uint32 InputAddress;            /* Address of the primary CDSP input sample */
  uint32 SecondaryInputAddress;   /* Address of the secondary CDSP channel */
} UserConfig_CommonType;

/*[cover parentID="{D2D4A9D8-4C10-4c0c-8E72-10A71E2249B4}"] UserConfig_FirType [/cover]*/
/* Section of the User Configuration Table dedicated to FIR filter */
typedef struct UserConfig_FirType_tag {
  uint16 NTaps;                   /* Number of active coefficients (or taps) of the FIR filter */
  uint16 DecRate;                 /* Decimation Rate of FIR filter */
  uint16 GradualAccum;            /* Whether accumulations for output phase are divided or not */
  sint16  FirCoeffs[FIR_NTAPS_MAX];/* Array of FIR coefficients */
} UserConfig_FirType;

/*[cover parentID="{730D3270-5CDA-4253-AB9F-69E9072513B3}"] UserConfig_IirType [/cover]*/
/* Section of the User Configuration Table dedicated to IIR filter */
typedef struct UserConfig_IirType_tag {
  uint16 DecRate;                             /* Decimation Rate of IIR filter */
  uint16 BitExtension;                        /* The bit extension for IIR6 filter */
  sint16  IirCoeffs[IIR_CFG_COEFFS_ARR_DIM];   /* Coefficients for all BiQuad sections of IIR filter */
} UserConfig_IirType;

/*[cover parentID="{1AB4C6B7-CEF7-4dc4-8E94-4E3B3ADAC7F0}"] UserConfig_MatType [/cover]*/
/* Section of the User Configuration Table dedicated to MAT filter */
typedef struct UserConfig_MatType_tag {
  uint16 Operation;       /* Operation to be performed from the MAT filter */
  sint16  OpBValue;        /* Constant value for the operand B */
  sint16  BitShiftValue;   /* Bitshift to be applied in the MUL_BITSHIFT operation */
} UserConfig_MatType;

/*[cover parentID="{261EDDBC-A0AD-46f6-86D6-CA6A4FB29CEE}"] UserConfig_AvgType [/cover]*/
/* Section of the User Configuration Table dedicated to AVG filter */
typedef struct UserConfig_AvgType_tag {
  uint16 NofSamples;      /* Length of the moving average filter */
} UserConfig_AvgType;

/*[cover parentID="{69C4A6FD-C706-4470-8785-8EA71C7DCC98}"] UserConfig_MdnType [/cover]*/
/* Section of the User Configuration Table dedicated to MDN filter */
typedef struct UserConfig_MdnType_tag {
  uint16 NofSamples;      /* Length of the Median filter */
} UserConfig_MdnType;

/*[cover parentID="{D4719BAC-5B50-4d73-8977-CB3FF3BB6B0D}"] UserConfig_DacType [/cover]*/
/* Section of the User Configuration Table dedicated to DA filter and SDA filter */
typedef struct UserConfig_DacType_tag {
  uint16 FcRestartCtrl;   /* Control if the filterchain has to be reset when start event occurs (only DA) */
  uint16 DiscN;           /* Number of samples to be discarded during the discard phase of DA filter (only DA) */
  uint16 AccumN;          /* Number of accumulation steps forming a complete accumulation cycle (DA and SDA) */
  uint16 RepN;            /* Number of times the accumulation cycle has to be repeated (only DA) */
  uint16 BitShift;        /* Right bit shift to be applied to the Final Result of DA filter and SDA filter */
  uint16 BypassEnable;    /* Whether DA filter is bypassed or not (only DA) */
} UserConfig_DacType;

/*[cover parentID="{83B54685-D5A1-449e-961E-B5E9169B4DFE}"] UserConfig_EntireType [/cover]*/
/* This structure contains the entire CDSP User Configuration Table (UCT) */
typedef struct UserConfig_EntireType_tag {
  UserConfig_CommonType Common; /* Section of the configuration table for general filter chain parameters */
  UserConfig_FirType    Fir;    /* Section of the configuration table for FIR filter (Not supported in V0.1.1) */
  UserConfig_IirType    Iir;    /* Section of the configuration table for IIR filter (Not supported in V0.1.1) */
  UserConfig_MatType    Mat;    /* Section of the configuration table for MAT filter */
  UserConfig_AvgType    Avg;    /* Section of the configuration table for AVG filter */
  UserConfig_MdnType    Mdn;    /* Section of the configuration table for MDN filter */
  UserConfig_DacType    Dac;    /* Section of the configuration table for SDA filter */
} UserConfig_EntireType;

/*[cover parentID="{EE463899-1F71-4f5c-B7CB-77A268F38640}"] UserConfig_LoType [/cover]*/
/* Section of the User Configuration Table dedicated to LO filter */
typedef struct UserConfig_LoType_tag {
  uint32 CoeffA;                  /* Coefficient A value */
  uint32 CoeffB;                  /* Coefficinet B value */
  uint32 CoeffC;                  /* Coefficient C value */
  uint32 OutputTypeSelect;        /* Radian or in degree. 0 = radian, 1 = degree */
  uint32 DiscN;                   /* Number of discarded samples */
  uint32 AcclAddress;             /* Address of register that contains acceleration data */
  uint32 SineAddress;             /* Address of register that contains sine waveform data */
  uint32 CosiAddress;             /* Address of register that contains cosine waveform data */
  uint32 CarrAddress;             /* Address of register that contains carrier signal */
} UserConfig_LoType;

/*[cover parentID="{9ADA9611-570F-495e-A591-4CE1372F6EBE}"] UserConfig_FftType [/cover]*/
/* Section of the User Configuration Table dedicated to FFT filter */
typedef struct UserConfig_FftType_tag {
  uint32 InputAddress;                            /* Address of the CDSP input sample */
  uint32 NofSamples;                              /* The number of samples for calculation FFT frequency bins */
  sint16  WindowCoeffs[FFT_BUFFER_SIZE_MAX >> 1];  /* Symmetric window coefficients */
} UserConfig_FftType;

/*[cover parentID="{8F9F777C-1208-4c52-97B3-AFBC84706A3B}"] UserConfig_Stat0Type [/cover]*/
/* Section of the User Configuration Table dedicated to STAT0 filter */
typedef struct UserConfig_Stat0Type_tag {
  uint16 NoOfChannels;      /* Configured number of channels */
  uint16 NoOfSamples;       /* Configured number of input samples */
} UserConfig_Stat0Type;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/
IFX_EXTERN IFX_CONST UserConfig_EntireType cdspFc0Dccm;
IFX_EXTERN IFX_CONST uint16                cdspFc0DccmSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc0IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc0IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc1IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc1IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc2IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc2IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc3IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc3IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc4IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc4IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc5IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc5IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc6IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc6IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc7IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc7IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc8IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc8IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc9IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc9IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFc10IccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFc10IccmImageSize;
IFX_EXTERN IFX_CONST unsigned char         cdspFcmIccmImage[];
IFX_EXTERN IFX_CONST unsigned int          cdspFcmIccmImageSize;

#endif /* IFXADCCDSPFW_CFG_H */
