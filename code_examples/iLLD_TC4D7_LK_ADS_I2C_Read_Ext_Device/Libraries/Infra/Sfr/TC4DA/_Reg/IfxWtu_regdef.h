/**
 * \file IfxWtu_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_WTU/V0.2.2.0.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Wtu_Registers Wtu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Wtu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Wtu_Registers
 * 
 * \defgroup IfxSfr_Wtu_Registers_union Register unions
 * \ingroup IfxSfr_Wtu_Registers
 * 
 * \defgroup IfxSfr_Wtu_Registers_struct Memory map
 * \ingroup IfxSfr_Wtu_Registers
 */
#ifndef IFXWTU_REGDEF_H
#define IFXWTU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Wtu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_WTU_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_WTU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_WTU_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_WTU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_WTU_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_WTU_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_WTU_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_WTU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_WTU_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_WTU_ACCEN_WRA_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_WTU_ACCEN_WRA_CPU_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (r) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID of CERBERUS - EN28 (rw) */
    __I  Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (r) */
} Ifx_WTU_ACCEN_WRA_CPU_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_WTU_ACCEN_WRA_CS_Bits
{
    __I  Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (r) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (r) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID of CERBERUS - EN28 (rw) */
    __I  Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (r) */
    __I  Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (r) */
} Ifx_WTU_ACCEN_WRA_CS_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_WTU_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_WTU_ACCEN_WRB_FPI_Bits;

/** \brief WDT Control Register A */
typedef struct _Ifx_WTU_CTRLA_Bits
{
    __IO Ifx_Strict_32Bit LCK:1;           /**< \brief [0:0] Lock bit - LCK (rwh) */
    __IO Ifx_Strict_32Bit PW:15;           /**< \brief [15:1] Password - PW (rwh) */
    __O  Ifx_Strict_32Bit TCVI:16;         /**< \brief [31:16] Timer check value inverted (w) */
} Ifx_WTU_CTRLA_Bits;

/** \brief WDT Control Register B */
typedef struct _Ifx_WTU_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit DR:1;              /**< \brief [0:0] Disable request bit - DR (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit IFSR:2;            /**< \brief [5:4] Input frequency selection request bits - IFSR (rw) */
    __IO Ifx_UReg_32Bit URR:1;             /**< \brief [6:6] Unlock restriction request bit - URR (rw) */
    __IO Ifx_UReg_32Bit PAR:1;             /**< \brief [7:7] Password auto-sequence request bit - PAR (rw) */
    __IO Ifx_UReg_32Bit TCR:1;             /**< \brief [8:8] Timer check request bit - TCR (rw) */
    __IO Ifx_UReg_32Bit TCTR:7;            /**< \brief [15:9] Timer check tolerance request - TCTR (rw) */
    __IO Ifx_UReg_32Bit TIMR:16;           /**< \brief [31:16] Timer base request value - TIMR (rw) */
} Ifx_WTU_CTRLB_Bits;

/** \brief Module identification register */
typedef struct _Ifx_WTU_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision number (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number value (r) */
} Ifx_WTU_ID_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_WTU_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_WTU_PROT_Bits;

/** \brief SMU partitions register */
typedef struct _Ifx_WTU_SMUFSP_Bits
{
    __IO Ifx_UReg_32Bit PART0:1;           /**< \brief [0:0] Consider signals from SMU state machine partition 0 (rw) */
    __IO Ifx_UReg_32Bit PART1:1;           /**< \brief [1:1] Consider signals from SMU state machine partition 1 (rw) */
    __IO Ifx_UReg_32Bit PART2:1;           /**< \brief [2:2] Consider signals from SMU state machine partition 2 (rw) */
    __IO Ifx_UReg_32Bit PART3:1;           /**< \brief [3:3] Consider signals from SMU state machine partition 3 (rw) */
    __IO Ifx_UReg_32Bit CSPART:1;          /**< \brief [4:4] Consider signals from SMU CS-related partition (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_WTU_SMUFSP_Bits;

/** \brief WDT Status Register */
typedef struct _Ifx_WTU_STAT_Bits
{
    __I  Ifx_UReg_32Bit D:1;               /**< \brief [0:0] Watchdog enable/disable status Flag - D (rh) */
    __I  Ifx_UReg_32Bit TOM:1;             /**< \brief [1:1] Watchdog time-out mode flag - TOM (rh) */
    __I  Ifx_UReg_32Bit OE:1;              /**< \brief [2:2] Watchdog overflow error status flag - OE (rh) */
    __I  Ifx_UReg_32Bit AE:1;              /**< \brief [3:3] Watchdog access error status flag - AE (rh) */
    __I  Ifx_UReg_32Bit IFS:2;             /**< \brief [5:4] Watchdog internal frequency selection status flag - IFS (rh) */
    __I  Ifx_UReg_32Bit UR:1;              /**< \brief [6:6] SMU unlock restriction status flag - UR (rh) */
    __I  Ifx_UReg_32Bit PA:1;              /**< \brief [7:7] Password auto-sequence status flag - PA (rh) */
    __I  Ifx_UReg_32Bit TC:1;              /**< \brief [8:8] Timer check status flag - TC (rh) */
    __I  Ifx_UReg_32Bit TCT:7;             /**< \brief [15:9] Timer check tolerance - TCT (rh) */
    __I  Ifx_UReg_32Bit TIM:16;            /**< \brief [31:16] Timer value - TIM (rh) */
} Ifx_WTU_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_wtu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_WRA;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_WRA_CPU_Bits B;          /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_WRA_CPU;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_WRA_CS_Bits B;           /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_WRA_CS;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_WTU_ACCEN_WRB_FPI;

/** \brief Write access enable register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_WTU_ACCEN_WRB_NONE;

/** \brief WDT Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_CTRLA_Bits B;                  /**< \brief Bitfield access */
} Ifx_WTU_CTRLA;

/** \brief WDT Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_CTRLB_Bits B;                  /**< \brief Bitfield access */
} Ifx_WTU_CTRLB;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_WTU_ID;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_WTU_PROT;

/** \brief SMU partitions register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_SMUFSP_Bits B;                 /**< \brief Bitfield access */
} Ifx_WTU_SMUFSP;

/** \brief WDT Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_WTU_STAT_Bits B;                   /**< \brief Bitfield access */
} Ifx_WTU_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_WDTCPU_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_WTU_WDTCPU_ACCEN
{
       __IO Ifx_WTU_ACCEN_WRA_CPU               WRA;                    /**< \brief 0, CPU0 WDT write access enable register A*/
       __I  Ifx_WTU_ACCEN_WRB_NONE              WRB;                    /**< \brief 4, CPU0 WDT write access enable register B*/
       __IO Ifx_WTU_ACCEN_RDA                   RDA;                    /**< \brief 8, CPU0 WDT read access enable register A*/
       __IO Ifx_WTU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, CPU0 WDT read access enable register B*/
       __IO Ifx_WTU_ACCEN_VM                    VM;                     /**< \brief 10, CPU0 WDT VM access enable register*/
       __IO Ifx_WTU_ACCEN_PRS                   PRS;                    /**< \brief 14, CPU0 WDT PRS access enable register*/
} Ifx_WTU_WDTCPU_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_WDTCPU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WDTCPU object */
typedef volatile struct _Ifx_WTU_WDTCPU
{
       __IO Ifx_WTU_PROT                        PROTSE;                 /**< \brief 0, CPU0 WDT PROT register safe endinit - SE0*/
       __IO Ifx_WTU_WDTCPU_ACCEN                ACCEN;                  /**< \brief 4, CPU0 WDT access enable registers*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_WTU_SMUFSP                      SMUFSP;                 /**< \brief 20, CPU0 WDT SMU partitions register*/
       __IO Ifx_WTU_CTRLA                       CTRLA;                  /**< \brief 24, CPU0 WDT control register A*/
       __IO Ifx_WTU_CTRLB                       CTRLB;                  /**< \brief 28, CPU0 WDT control register B*/
       __I  Ifx_WTU_STAT                        STAT;                   /**< \brief 2C, CPU0 WDT status register*/
} Ifx_WTU_WDTCPU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_WDTSEC_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_WTU_WDTSEC_ACCEN
{
       __IO Ifx_WTU_ACCEN_WRA_CS                WRA;                    /**< \brief 0, Security WDT write access enable register A*/
       __I  Ifx_WTU_ACCEN_WRB_NONE              WRB;                    /**< \brief 4, Security WDT write access enable register B*/
       __IO Ifx_WTU_ACCEN_RDA                   RDA;                    /**< \brief 8, Security WDT read access enable register A*/
       __IO Ifx_WTU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Security WDT read access enable register B*/
       __IO Ifx_WTU_ACCEN_VM                    VM;                     /**< \brief 10, Security WDT VM access enable register*/
       __IO Ifx_WTU_ACCEN_PRS                   PRS;                    /**< \brief 14, Security WDT PRS access enable register*/
} Ifx_WTU_WDTSEC_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_WDTSEC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WDTSEC object */
typedef volatile struct _Ifx_WTU_WDTSEC
{
       __IO Ifx_WTU_PROT                        PROTCSE;                /**< \brief 0, Security WDT PROT register cyber-secure endinit - CSE*/
       __IO Ifx_WTU_WDTSEC_ACCEN                ACCEN;                  /**< \brief 4, Security WDT access enable registers*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_WTU_SMUFSP                      SMUFSP;                 /**< \brief 20, Security WDT SMU partitions register*/
       __IO Ifx_WTU_CTRLA                       CTRLA;                  /**< \brief 24, Security WDT control register A*/
       __IO Ifx_WTU_CTRLB                       CTRLB;                  /**< \brief 28, Security WDT control register B*/
       __I  Ifx_WTU_STAT                        STAT;                   /**< \brief 2C, Security WDT status register*/
} Ifx_WTU_WDTSEC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_WDTSYS_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_WTU_WDTSYS_ACCEN
{
       __IO Ifx_WTU_ACCEN_WRA                   WRA;                    /**< \brief 0, System WDT write access enable register A*/
       __IO Ifx_WTU_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, System WDT write access enable register B*/
       __IO Ifx_WTU_ACCEN_RDA                   RDA;                    /**< \brief 8, System WDT read access enable register A*/
       __IO Ifx_WTU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, System WDT read access enable register B*/
       __IO Ifx_WTU_ACCEN_VM                    VM;                     /**< \brief 10, System WDT VM access enable register*/
       __IO Ifx_WTU_ACCEN_PRS                   PRS;                    /**< \brief 14, System WDT PRS access enable register*/
} Ifx_WTU_WDTSYS_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_WDTSYS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WDTSYS object */
typedef volatile struct _Ifx_WTU_WDTSYS
{
       __IO Ifx_WTU_PROT                        PROTSE;                 /**< \brief 0, System WDT PROT register safe endinit - SSE*/
       __IO Ifx_WTU_WDTSYS_ACCEN                ACCEN;                  /**< \brief 4, System WDT access enable registers*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_WTU_SMUFSP                      SMUFSP;                 /**< \brief 20, System WDT SMU partitions register*/
       __IO Ifx_WTU_CTRLA                       CTRLA;                  /**< \brief 24, System WDT control register A*/
       __IO Ifx_WTU_CTRLB                       CTRLB;                  /**< \brief 28, System WDT control register B*/
       __I  Ifx_WTU_STAT                        STAT;                   /**< \brief 2C, System WDT status register*/
} Ifx_WTU_WDTSYS;

/******************************************************************************/
/** \addtogroup IfxSfr_Wtu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief WTU object */
typedef volatile struct _Ifx_WTU
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_WTU_ID                          ID;                     /**< \brief 8, Module identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[12];         /**< \brief C, \internal Reserved */
       __IO Ifx_WTU_WDTCPU                      WDTCPU[6];              /**< \brief 18, */
       __I  Ifx_UReg_8Bit                       reserved_138[24];       /**< \brief 138, \internal Reserved */
       __IO Ifx_WTU_WDTSEC                      WDTSEC;                 /**< \brief 150, Security WDT status register*/
       __I  Ifx_UReg_8Bit                       reserved_180[4];        /**< \brief 180, \internal Reserved */
       __IO Ifx_WTU_WDTSYS                      WDTSYS;                 /**< \brief 184, System WDT status register*/
       __I  Ifx_UReg_8Bit                       reserved_1B4[1612];     /**< \brief 1B4, \internal Reserved */
} Ifx_WTU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXWTU_REGDEF_H */
