/**
 * \file IfxAsclin_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_ASCLIN/V0.2.2.1.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Asclin_Registers Asclin Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Asclin_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Asclin_Registers
 * 
 * \defgroup IfxSfr_Asclin_Registers_union Register unions
 * \ingroup IfxSfr_Asclin_Registers
 * 
 * \defgroup IfxSfr_Asclin_Registers_struct Memory map
 * \ingroup IfxSfr_Asclin_Registers
 */
#ifndef IFXASCLIN_REGDEF_H
#define IFXASCLIN_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Asclin_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_ASCLIN_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ASCLIN_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_ASCLIN_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_ASCLIN_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_ASCLIN_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ASCLIN_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_ASCLIN_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ASCLIN_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_ASCLIN_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_ASCLIN_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_ASCLIN_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ASCLIN_ACCEN_WRB_FPI_Bits;

/** \brief Bit Configuration Register */
typedef struct _Ifx_ASCLIN_BITCON_Bits
{
    __IO Ifx_UReg_32Bit PRESCALER:12;      /**< \brief [11:0] Prescaling of the Fractional Divider - PRESCALER (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit OVERSAMPLING:4;    /**< \brief [19:16] Oversampling Factor - OVERSAMPLING (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit SAMPLEPOINT:4;     /**< \brief [27:24] Sample Point Position - SAMPLEPOINT (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [30:28] \internal Reserved */
    __IO Ifx_UReg_32Bit SM:1;              /**< \brief [31:31] Sample Mode - SM (rw) */
} Ifx_ASCLIN_BITCON_Bits;

/** \brief Baud Rate Detection Register */
typedef struct _Ifx_ASCLIN_BRD_Bits
{
    __IO Ifx_UReg_32Bit LOWERLIMIT:8;      /**< \brief [7:0] Lower Limit - LOWERLIMIT (rw) */
    __IO Ifx_UReg_32Bit UPPERLIMIT:8;      /**< \brief [15:8] Upper Limit - UPPERLIMIT (rw) */
    __I  Ifx_UReg_32Bit MEASURED:12;       /**< \brief [27:16] Measured Value of 8-bits from Sync Field - MEASURED (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ASCLIN_BRD_Bits;

/** \brief Baud Rate Generation Register */
typedef struct _Ifx_ASCLIN_BRG_Bits
{
    __IO Ifx_UReg_32Bit DENOMINATOR:12;    /**< \brief [11:0] Denominator - DENOMINATOR (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit NUMERATOR:12;      /**< \brief [27:16] Numerator - NUMERATOR (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ASCLIN_BRG_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_ASCLIN_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ASCLIN_CLC_Bits;

/** \brief Clock Selection Register */
typedef struct _Ifx_ASCLIN_CSR_Bits
{
    __IO Ifx_UReg_32Bit CLKSEL:5;          /**< \brief [4:0] Baud Rate Logic Clock Select - CLKSEL (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [30:5] \internal Reserved */
    __I  Ifx_UReg_32Bit CON:1;             /**< \brief [31:31] Clock On Flag - CON (rh) */
} Ifx_ASCLIN_CSR_Bits;

/** \brief Data Configuration Register */
typedef struct _Ifx_ASCLIN_DATCON_Bits
{
    __IO Ifx_UReg_32Bit DATLEN:4;          /**< \brief [3:0] Data Length - DATLEN (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit TRGSRC:2;          /**< \brief [9:8] Trigger Source - TRGSRC (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [12:10] \internal Reserved */
    __IO Ifx_UReg_32Bit HO:1;              /**< \brief [13:13] Header Only - HO (rw) */
    __IO Ifx_UReg_32Bit RM:1;              /**< \brief [14:14] Response Mode - RM (rw) */
    __IO Ifx_UReg_32Bit CSM:1;             /**< \brief [15:15] Checksum Mode - CSM (rw) */
    __IO Ifx_UReg_32Bit RESPONSE:8;        /**< \brief [23:16] Response Timeout Threshold Value - RESPONSE (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ASCLIN_DATCON_Bits;

/** \brief Flags Register */
typedef struct _Ifx_ASCLIN_FLAGS_Bits
{
    __I  Ifx_UReg_32Bit TH:1;              /**< \brief [0:0] Transmit Header End Flag - TH (rh) */
    __I  Ifx_UReg_32Bit TR:1;              /**< \brief [1:1] Transmit Response End Flag - TR (rh) */
    __I  Ifx_UReg_32Bit RH:1;              /**< \brief [2:2] Receive Header End Flag - RH (rh) */
    __I  Ifx_UReg_32Bit RR:1;              /**< \brief [3:3] Receive Response End Flag - RR (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __I  Ifx_UReg_32Bit FED:1;             /**< \brief [5:5] Falling Edge from Level 1 to Level 0 Detected - FED (rh) */
    __I  Ifx_UReg_32Bit RED:1;             /**< \brief [6:6] Rising Edge from Level 0 to Level 1 Detected - RED (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [9:7] \internal Reserved */
    __I  Ifx_UReg_32Bit TFE:1;             /**< \brief [10:10] Transmit FIFO Empty Flag - TFE (rh) */
    __I  Ifx_UReg_32Bit OMT:1;             /**< \brief [11:11] Overload of Multiple Triggers - OMT (rh) */
    __I  Ifx_UReg_32Bit SWTRG:1;           /**< \brief [12:12] Software Trigger Transmit Request Flag - SWTRG (rh) */
    __I  Ifx_UReg_32Bit TWRQ:1;            /**< \brief [13:13] Transmit Wake Request Flag - TWRQ (rh) */
    __I  Ifx_UReg_32Bit THRQ:1;            /**< \brief [14:14] Transmit Header Request Flag - THRQ (rh) */
    __I  Ifx_UReg_32Bit TRRQ:1;            /**< \brief [15:15] Transmit Response Request Flag - TRRQ (rh) */
    __I  Ifx_UReg_32Bit PE:1;              /**< \brief [16:16] Parity Error Flag - PE (rh) */
    __I  Ifx_UReg_32Bit TC:1;              /**< \brief [17:17] Transmission Completed Flag - TC (rh) */
    __I  Ifx_UReg_32Bit FE:1;              /**< \brief [18:18] Framing Error Flag - FE (rh) */
    __I  Ifx_UReg_32Bit HT:1;              /**< \brief [19:19] Header Timeout Flag - HT (rh) */
    __I  Ifx_UReg_32Bit RT:1;              /**< \brief [20:20] Response Timeout Flag - RT (rh) */
    __I  Ifx_UReg_32Bit BD:1;              /**< \brief [21:21] Break Detected Flag - BD (rh) */
    __I  Ifx_UReg_32Bit LP:1;              /**< \brief [22:22] LIN Parity Error Flag - LP (rh) */
    __I  Ifx_UReg_32Bit LA:1;              /**< \brief [23:23] LIN Autobaud Detection Error Flag - LA (rh) */
    __I  Ifx_UReg_32Bit LC:1;              /**< \brief [24:24] LIN Checksum Error Flag - LC (rh) */
    __I  Ifx_UReg_32Bit CE:1;              /**< \brief [25:25] Collision Detection Error Flag - CE (rh) */
    __I  Ifx_UReg_32Bit RFO:1;             /**< \brief [26:26] Receive FIFO Overflow Flag - RFO (rh) */
    __I  Ifx_UReg_32Bit RFU:1;             /**< \brief [27:27] Receive FIFO Underflow Flag - RFU (rh) */
    __I  Ifx_UReg_32Bit RFL:1;             /**< \brief [28:28] Receive FIFO Level Flag - RFL (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __I  Ifx_UReg_32Bit TFO:1;             /**< \brief [30:30] Transmit FIFO Overflow Flag - TFO (rh) */
    __I  Ifx_UReg_32Bit TFL:1;             /**< \brief [31:31] Transmit FIFO Level Flag - TFL (rh) */
} Ifx_ASCLIN_FLAGS_Bits;

/** \brief Flags Clear Register */
typedef struct _Ifx_ASCLIN_FLAGSCLEAR_Bits
{
    __O  Ifx_UReg_32Bit THC:1;             /**< \brief [0:0] Flag Clear Bit - THC (w) */
    __O  Ifx_UReg_32Bit TRC:1;             /**< \brief [1:1] Flag Clear Bit - TRC (w) */
    __O  Ifx_UReg_32Bit RHC:1;             /**< \brief [2:2] Flag Clear Bit - RHC (w) */
    __O  Ifx_UReg_32Bit RRC:1;             /**< \brief [3:3] Flag Clear Bit - RRC (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __O  Ifx_UReg_32Bit FEDC:1;            /**< \brief [5:5] Flag Clear Bit - FEDC (w) */
    __O  Ifx_UReg_32Bit REDC:1;            /**< \brief [6:6] Flag Clear Bit - REDC (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [9:7] \internal Reserved */
    __O  Ifx_UReg_32Bit TFEC:1;            /**< \brief [10:10] Flag Clear Bit - TFEC (w) */
    __O  Ifx_UReg_32Bit OMTC:1;            /**< \brief [11:11] Flag Clear Bit - OMTC (w) */
    __O  Ifx_UReg_32Bit SWTRGC:1;          /**< \brief [12:12] Flag Clear Bit - SWTRGC (w) */
    __O  Ifx_UReg_32Bit TWRQC:1;           /**< \brief [13:13] Flag Clear Bit - TWRQC (w) */
    __O  Ifx_UReg_32Bit THRQC:1;           /**< \brief [14:14] Flag Clear Bit - THRQC (w) */
    __O  Ifx_UReg_32Bit TRRQC:1;           /**< \brief [15:15] Flag Clear Bit - TRRQC (w) */
    __O  Ifx_UReg_32Bit PEC:1;             /**< \brief [16:16] Flag Clear Bit - PEC (w) */
    __O  Ifx_UReg_32Bit TCC:1;             /**< \brief [17:17] Flag Clear Bit - TCC (w) */
    __O  Ifx_UReg_32Bit FEC:1;             /**< \brief [18:18] Flag Clear Bit - FEC (w) */
    __O  Ifx_UReg_32Bit HTC:1;             /**< \brief [19:19] Flag Clear Bit - HTC (w) */
    __O  Ifx_UReg_32Bit RTC:1;             /**< \brief [20:20] Flag Clear Bit - RTC (w) */
    __O  Ifx_UReg_32Bit BDC:1;             /**< \brief [21:21] Flag Clear Bit - BDC (w) */
    __O  Ifx_UReg_32Bit LPC:1;             /**< \brief [22:22] Flag Clear Bit - LPC (w) */
    __O  Ifx_UReg_32Bit LAC:1;             /**< \brief [23:23] Flag Clear Bit - LAC (w) */
    __O  Ifx_UReg_32Bit LCC:1;             /**< \brief [24:24] Flag Clear Bit - LCC (w) */
    __O  Ifx_UReg_32Bit CEC:1;             /**< \brief [25:25] Flag Clear Bit - CEC (w) */
    __O  Ifx_UReg_32Bit RFOC:1;            /**< \brief [26:26] Flag Clear Bit - RFOC (w) */
    __O  Ifx_UReg_32Bit RFUC:1;            /**< \brief [27:27] Flag Clear Bit - RFUC (w) */
    __O  Ifx_UReg_32Bit RFLC:1;            /**< \brief [28:28] Flag Clear Bit - RFLC (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __O  Ifx_UReg_32Bit TFOC:1;            /**< \brief [30:30] Flag Clear Bit - TFOC (w) */
    __O  Ifx_UReg_32Bit TFLC:1;            /**< \brief [31:31] Flag Clear Bit - TFLC (w) */
} Ifx_ASCLIN_FLAGSCLEAR_Bits;

/** \brief Flags Enable Register */
typedef struct _Ifx_ASCLIN_FLAGSENABLE_Bits
{
    __IO Ifx_UReg_32Bit THE:1;             /**< \brief [0:0] Flag Enable Bit - THE (rw) */
    __IO Ifx_UReg_32Bit TRE:1;             /**< \brief [1:1] Flag Enable Bit - TRE (rw) */
    __IO Ifx_UReg_32Bit RHE:1;             /**< \brief [2:2] Flag Enable Bit - RHE (rw) */
    __IO Ifx_UReg_32Bit RRE:1;             /**< \brief [3:3] Flag Enable Bit - RRE (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit FEDE:1;            /**< \brief [5:5] Flag Enable Bit - FEDE (rw) */
    __IO Ifx_UReg_32Bit REDE:1;            /**< \brief [6:6] Flag Enable Bit - REDE (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [9:7] \internal Reserved */
    __IO Ifx_UReg_32Bit TFEE:1;            /**< \brief [10:10] Flag Enable Bit - TFEE (rw) */
    __IO Ifx_UReg_32Bit OMTE:1;            /**< \brief [11:11] Flag Enable Bit - OMTE (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit PEE:1;             /**< \brief [16:16] Flag Enable Bit - PEE (rw) */
    __IO Ifx_UReg_32Bit TCE:1;             /**< \brief [17:17] Flag Enable Bit - TCE (rw) */
    __IO Ifx_UReg_32Bit FEE:1;             /**< \brief [18:18] Flag Enable Bit - FEE (rw) */
    __IO Ifx_UReg_32Bit HTE:1;             /**< \brief [19:19] Flag Enable Bit - HTE (rw) */
    __IO Ifx_UReg_32Bit RTE:1;             /**< \brief [20:20] Flag Enable Bit - RTE (rw) */
    __IO Ifx_UReg_32Bit BDE:1;             /**< \brief [21:21] Flag Enable Bit - BDE (rw) */
    __IO Ifx_UReg_32Bit LPE:1;             /**< \brief [22:22] Flag Enable Bit - LPE (rw) */
    __IO Ifx_UReg_32Bit LAE:1;             /**< \brief [23:23] Flag Enable Bit - LAE (rw) */
    __IO Ifx_UReg_32Bit LCE:1;             /**< \brief [24:24] Flag Enable Bit - LCE (rw) */
    __IO Ifx_UReg_32Bit CEE:1;             /**< \brief [25:25] Flag Enable Bit - CEE (rw) */
    __IO Ifx_UReg_32Bit RFOE:1;            /**< \brief [26:26] Flag Enable Bit - RFOE (rw) */
    __IO Ifx_UReg_32Bit RFUE:1;            /**< \brief [27:27] Flag Enable Bit - RFUE (rw) */
    __IO Ifx_UReg_32Bit RFLE:1;            /**< \brief [28:28] Flag Enable Bit - RFLE (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __IO Ifx_UReg_32Bit TFOE:1;            /**< \brief [30:30] Flag Enable Bit - TFOE (rw) */
    __IO Ifx_UReg_32Bit TFLE:1;            /**< \brief [31:31] Flag Enable Bit - TFLE (rw) */
} Ifx_ASCLIN_FLAGSENABLE_Bits;

/** \brief Flags Set Register */
typedef struct _Ifx_ASCLIN_FLAGSSET_Bits
{
    __O  Ifx_UReg_32Bit THS:1;             /**< \brief [0:0] Flag Set Bit - THS (w) */
    __O  Ifx_UReg_32Bit TRS:1;             /**< \brief [1:1] Flag Set Bit - TRS (w) */
    __O  Ifx_UReg_32Bit RHS:1;             /**< \brief [2:2] Flag Set Bit - RHS (w) */
    __O  Ifx_UReg_32Bit RRS:1;             /**< \brief [3:3] Flag Set Bit - RRS (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __O  Ifx_UReg_32Bit FEDS:1;            /**< \brief [5:5] Flag Set Bit - FEDS (w) */
    __O  Ifx_UReg_32Bit REDS:1;            /**< \brief [6:6] Flag Set Bit - REDS (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [9:7] \internal Reserved */
    __O  Ifx_UReg_32Bit TFES:1;            /**< \brief [10:10] Flag Set Bit - TFES (w) */
    __O  Ifx_UReg_32Bit OMTS:1;            /**< \brief [11:11] Flag Set Bit - OMTS (w) */
    __O  Ifx_UReg_32Bit SWTRGS:1;          /**< \brief [12:12] Flag Set Bit - SWTRGS (w) */
    __O  Ifx_UReg_32Bit TWRQS:1;           /**< \brief [13:13] Flag Set Bit - TWRQS (w) */
    __O  Ifx_UReg_32Bit THRQS:1;           /**< \brief [14:14] Flag Set Bit - THRQS (w) */
    __O  Ifx_UReg_32Bit TRRQS:1;           /**< \brief [15:15] Flag Set Bit - TRRQS (w) */
    __O  Ifx_UReg_32Bit PES:1;             /**< \brief [16:16] Flag Set Bit - PES (w) */
    __O  Ifx_UReg_32Bit TCS:1;             /**< \brief [17:17] Flag Set Bit - TCS (w) */
    __O  Ifx_UReg_32Bit FES:1;             /**< \brief [18:18] Flag Set Bit - FES (w) */
    __O  Ifx_UReg_32Bit HTS:1;             /**< \brief [19:19] Flag Set Bit - HTS (w) */
    __O  Ifx_UReg_32Bit RTS:1;             /**< \brief [20:20] Flag Set Bit - RTS (w) */
    __O  Ifx_UReg_32Bit BDS:1;             /**< \brief [21:21] Flag Set Bit - BDS (w) */
    __O  Ifx_UReg_32Bit LPS:1;             /**< \brief [22:22] Flag Set Bit - LPS (w) */
    __O  Ifx_UReg_32Bit LAS:1;             /**< \brief [23:23] Flag Set Bit - LAS (w) */
    __O  Ifx_UReg_32Bit LCS:1;             /**< \brief [24:24] Flag Set Bit - LCS (w) */
    __O  Ifx_UReg_32Bit CES:1;             /**< \brief [25:25] Flag Set Bit - CES (w) */
    __O  Ifx_UReg_32Bit RFOS:1;            /**< \brief [26:26] Flag Set Bit - RFOS (w) */
    __O  Ifx_UReg_32Bit RFUS:1;            /**< \brief [27:27] Flag Set Bit - RFUS (w) */
    __O  Ifx_UReg_32Bit RFLS:1;            /**< \brief [28:28] Flag Set Bit - RFLS (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __O  Ifx_UReg_32Bit TFOS:1;            /**< \brief [30:30] Flag Set Bit - TFOS (w) */
    __O  Ifx_UReg_32Bit TFLS:1;            /**< \brief [31:31] Flag Set Bit - TFLS (w) */
} Ifx_ASCLIN_FLAGSSET_Bits;

/** \brief Frame Control Register */
typedef struct _Ifx_ASCLIN_FRAMECON_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit IDLE:3;            /**< \brief [8:6] Duration of the IDLE delay - IDLE (rw) */
    __IO Ifx_UReg_32Bit STOP:3;            /**< \brief [11:9] Number of Stop Bits - STOP (rw) */
    __IO Ifx_UReg_32Bit LEAD:3;            /**< \brief [14:12] Duration of the Leading Delay - LEAD (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [17:16] Mode Selection - MODE (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [27:18] \internal Reserved */
    __IO Ifx_UReg_32Bit MSB:1;             /**< \brief [28:28] Shift Direction - MSB (rw) */
    __IO Ifx_UReg_32Bit CEN:1;             /**< \brief [29:29] Collision Detection Enable - CEN (rw) */
    __IO Ifx_UReg_32Bit PEN:1;             /**< \brief [30:30] Parity Enable - PEN (rw) */
    __IO Ifx_UReg_32Bit ODD:1;             /**< \brief [31:31] Parity Type - ODD (rw) */
} Ifx_ASCLIN_FRAMECON_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_ASCLIN_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_ASCLIN_ID_Bits;

/** \brief Input and Output Control Register */
typedef struct _Ifx_ASCLIN_IOCR_Bits
{
    __IO Ifx_UReg_32Bit ALTI:3;            /**< \brief [2:0] Alternate Input Select - ALTI (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit DEPTH:6;           /**< \brief [9:4] Digital Glitch Filter Depth - DEPTH (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit CTS:2;             /**< \brief [17:16] CTS Select - CTS (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [24:18] \internal Reserved */
    __IO Ifx_UReg_32Bit RCPOL:1;           /**< \brief [25:25] RTS CTS Polarity - RCPOL (rw) */
    __IO Ifx_UReg_32Bit CPOL:1;            /**< \brief [26:26] Clock Polarity in Synchronous Mode - CPOL (rw) */
    __IO Ifx_UReg_32Bit SPOL:1;            /**< \brief [27:27] Slave Polarity in Synchronous Mode - SPOL (rw) */
    __IO Ifx_UReg_32Bit LB:1;              /**< \brief [28:28] Loop Back Mode - LB (rw) */
    __IO Ifx_UReg_32Bit CTSEN:1;           /**< \brief [29:29] Input Signal CTS Enable - CTSEN (rw) */
    __I  Ifx_UReg_32Bit RXM:1;             /**< \brief [30:30] Receive Monitor - RXM (rh) */
    __I  Ifx_UReg_32Bit TXM:1;             /**< \brief [31:31] Transmit Monitor - TXM (rh) */
} Ifx_ASCLIN_IOCR_Bits;

/** \brief LIN Break Timer Register */
typedef struct _Ifx_ASCLIN_LIN_BTIMER_Bits
{
    __IO Ifx_UReg_32Bit BREAK:6;           /**< \brief [5:0] Break Pulse Generation and Detection - BREAK (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ASCLIN_LIN_BTIMER_Bits;

/** \brief LIN Control Register */
typedef struct _Ifx_ASCLIN_LIN_CON_Bits
{
    __I  Ifx_UReg_32Bit :23;               /**< \brief [22:0] \internal Reserved */
    __IO Ifx_UReg_32Bit CSI:1;             /**< \brief [23:23] Checksum Injection - CSI (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [24:24] \internal Reserved */
    __IO Ifx_UReg_32Bit CSEN:1;            /**< \brief [25:25] Hardware Checksum Enable - CSEN (rw) */
    __IO Ifx_UReg_32Bit MS:1;              /**< \brief [26:26] Master Slave Mode - MS (rw) */
    __IO Ifx_UReg_32Bit ABD:1;             /**< \brief [27:27] Autobaud Detection - ABD (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ASCLIN_LIN_CON_Bits;

/** \brief LIN Header Timer Register */
typedef struct _Ifx_ASCLIN_LIN_HTIMER_Bits
{
    __IO Ifx_UReg_32Bit HEADER:8;          /**< \brief [7:0] Header Timeout Threshold Value - HEADER (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ASCLIN_LIN_HTIMER_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_ASCLIN_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ASCLIN_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_ASCLIN_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_ASCLIN_PROT_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_ASCLIN_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ASCLIN_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_ASCLIN_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_ASCLIN_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_ASCLIN_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ASCLIN_RST_STAT_Bits;

/** \brief Receive Data Register */
typedef struct _Ifx_ASCLIN_RXDATA_Bits
{
    __I  Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data - DATA (rh) */
} Ifx_ASCLIN_RXDATA_Bits;

/** \brief Receive Data Debug Register */
typedef struct _Ifx_ASCLIN_RXDATAD_Bits
{
    __I  Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data - DATA (rh) */
} Ifx_ASCLIN_RXDATAD_Bits;

/** \brief RxFIFO Configuration Register */
typedef struct _Ifx_ASCLIN_RXFIFOCON_Bits
{
    __O  Ifx_UReg_32Bit FLUSH:1;           /**< \brief [0:0] Flush the receive FIFO - FLUSH (w) */
    __IO Ifx_UReg_32Bit ENI:1;             /**< \brief [1:1] Receive FIFO Inlet Enable - ENI (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FM:2;              /**< \brief [5:4] RxFIFO Mode - FM (rw) */
    __IO Ifx_UReg_32Bit OUTW:2;            /**< \brief [7:6] Receive FIFO Outlet Width - OUTW (rw) */
    __IO Ifx_UReg_32Bit INTLEVEL:4;        /**< \brief [11:8] FIFO Interrupt Level - INTLEVEL (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit FILL:5;            /**< \brief [20:16] FIFO Filling Level - FILL (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [30:21] \internal Reserved */
    __IO Ifx_UReg_32Bit BUF:1;             /**< \brief [31:31] Receive Buffer Mode - BUF (rw) */
} Ifx_ASCLIN_RXFIFOCON_Bits;

/** \brief Transmit Data Register */
typedef struct _Ifx_ASCLIN_TXDATA_Bits
{
    __O  Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data - DATA (w) */
} Ifx_ASCLIN_TXDATA_Bits;

/** \brief TxFIFO Configuration Register */
typedef struct _Ifx_ASCLIN_TXFIFOCON_Bits
{
    __O  Ifx_UReg_32Bit FLUSH:1;           /**< \brief [0:0] Flush the transmit FIFO - FLUSH (w) */
    __IO Ifx_UReg_32Bit ENO:1;             /**< \brief [1:1] Transmit FIFO Outlet Enable - ENO (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FM:2;              /**< \brief [5:4] TxFIFO Mode - FM (rw) */
    __IO Ifx_UReg_32Bit INW:2;             /**< \brief [7:6] Transmit FIFO Inlet Width - INW (rw) */
    __IO Ifx_UReg_32Bit INTLEVEL:4;        /**< \brief [11:8] FIFO Interrupt Level - INTLEVEL (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit FILL:5;            /**< \brief [20:16] FIFO Filling Level - FILL (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit CIRCLEVEL:5;       /**< \brief [28:24] FIFO Circulate Level - CIRCLEVEL (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_ASCLIN_TXFIFOCON_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_asclin_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ACCEN_PRS_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ACCEN_RDA_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ACCEN_RDB_FPI_Bits B;       /**< \brief Bitfield access */
} Ifx_ASCLIN_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ACCEN_VM_Bits B;            /**< \brief Bitfield access */
} Ifx_ASCLIN_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ACCEN_WRA_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ACCEN_WRB_FPI_Bits B;       /**< \brief Bitfield access */
} Ifx_ASCLIN_ACCEN_WRB_FPI;

/** \brief Bit Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_BITCON_Bits B;              /**< \brief Bitfield access */
} Ifx_ASCLIN_BITCON;

/** \brief Baud Rate Detection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_BRD_Bits B;                 /**< \brief Bitfield access */
} Ifx_ASCLIN_BRD;

/** \brief Baud Rate Generation Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_BRG_Bits B;                 /**< \brief Bitfield access */
} Ifx_ASCLIN_BRG;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_CLC_Bits B;                 /**< \brief Bitfield access */
} Ifx_ASCLIN_CLC;

/** \brief Clock Selection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_CSR_Bits B;                 /**< \brief Bitfield access */
} Ifx_ASCLIN_CSR;

/** \brief Data Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_DATCON_Bits B;              /**< \brief Bitfield access */
} Ifx_ASCLIN_DATCON;

/** \brief Flags Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_FLAGS_Bits B;               /**< \brief Bitfield access */
} Ifx_ASCLIN_FLAGS;

/** \brief Flags Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_FLAGSCLEAR_Bits B;          /**< \brief Bitfield access */
} Ifx_ASCLIN_FLAGSCLEAR;

/** \brief Flags Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_FLAGSENABLE_Bits B;         /**< \brief Bitfield access */
} Ifx_ASCLIN_FLAGSENABLE;

/** \brief Flags Set Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_FLAGSSET_Bits B;            /**< \brief Bitfield access */
} Ifx_ASCLIN_FLAGSSET;

/** \brief Frame Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_FRAMECON_Bits B;            /**< \brief Bitfield access */
} Ifx_ASCLIN_FRAMECON;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_ID_Bits B;                  /**< \brief Bitfield access */
} Ifx_ASCLIN_ID;

/** \brief Input and Output Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_IOCR_Bits B;                /**< \brief Bitfield access */
} Ifx_ASCLIN_IOCR;

/** \brief LIN Break Timer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_LIN_BTIMER_Bits B;          /**< \brief Bitfield access */
} Ifx_ASCLIN_LIN_BTIMER;

/** \brief LIN Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_LIN_CON_Bits B;             /**< \brief Bitfield access */
} Ifx_ASCLIN_LIN_CON;

/** \brief LIN Header Timer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_LIN_HTIMER_Bits B;          /**< \brief Bitfield access */
} Ifx_ASCLIN_LIN_HTIMER;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_OCS_Bits B;                 /**< \brief Bitfield access */
} Ifx_ASCLIN_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_PROT_Bits B;                /**< \brief Bitfield access */
} Ifx_ASCLIN_PROT;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_RST_CTRLA_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_RST_CTRLB_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_RST_STAT_Bits B;            /**< \brief Bitfield access */
} Ifx_ASCLIN_RST_STAT;

/** \brief Receive Data Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_RXDATA_Bits B;              /**< \brief Bitfield access */
} Ifx_ASCLIN_RXDATA;

/** \brief Receive Data Debug Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_RXDATAD_Bits B;             /**< \brief Bitfield access */
} Ifx_ASCLIN_RXDATAD;

/** \brief RxFIFO Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_RXFIFOCON_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_RXFIFOCON;

/** \brief Transmit Data Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_TXDATA_Bits B;              /**< \brief Bitfield access */
} Ifx_ASCLIN_TXDATA;

/** \brief TxFIFO Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ASCLIN_TXFIFOCON_Bits B;           /**< \brief Bitfield access */
} Ifx_ASCLIN_TXFIFOCON;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Asclin_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_ASCLIN_RST
{
       __IO Ifx_ASCLIN_RST_CTRLA                CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_ASCLIN_RST_CTRLB                CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_ASCLIN_RST_STAT                 STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_ASCLIN_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Asclin_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_ASCLIN_ACCEN
{
       __IO Ifx_ASCLIN_ACCEN_WRA                WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_ASCLIN_ACCEN_WRB_FPI            WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_ASCLIN_ACCEN_RDA                RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_ASCLIN_ACCEN_RDB_FPI            RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_ASCLIN_ACCEN_VM                 VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_ASCLIN_ACCEN_PRS                PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_ASCLIN_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Asclin_LIN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief LIN object */
typedef volatile struct _Ifx_ASCLIN_LIN
{
       __IO Ifx_ASCLIN_LIN_CON                  CON;                    /**< \brief 0, LIN Control Register*/
       __IO Ifx_ASCLIN_LIN_BTIMER               BTIMER;                 /**< \brief 4, LIN Break Timer Register*/
       __IO Ifx_ASCLIN_LIN_HTIMER               HTIMER;                 /**< \brief 8, LIN Header Timer Register*/
} Ifx_ASCLIN_LIN;

/******************************************************************************/
/** \addtogroup IfxSfr_Asclin_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief ASCLIN object */
typedef volatile struct _Ifx_ASCLIN
{
       __IO Ifx_ASCLIN_CLC                      CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_ASCLIN_OCS                      OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_ASCLIN_ID                       ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_ASCLIN_RST                      RST;                    /**< \brief C, Reset Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_ASCLIN_PROT                     PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_ASCLIN_PROT                     PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_ASCLIN_ACCEN                    ACCEN;                  /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_60[160];       /**< \brief 60, \internal Reserved */
       __IO Ifx_ASCLIN_IOCR                     IOCR;                   /**< \brief 100, Input and Output Control Register*/
       __IO Ifx_ASCLIN_TXFIFOCON                TXFIFOCON;              /**< \brief 104, TxFIFO Configuration Register*/
       __IO Ifx_ASCLIN_RXFIFOCON                RXFIFOCON;              /**< \brief 108, RxFIFO Configuration Register*/
       __IO Ifx_ASCLIN_BITCON                   BITCON;                 /**< \brief 10C, Bit Configuration Register*/
       __IO Ifx_ASCLIN_FRAMECON                 FRAMECON;               /**< \brief 110, Frame Control Register*/
       __IO Ifx_ASCLIN_DATCON                   DATCON;                 /**< \brief 114, Data Configuration Register*/
       __IO Ifx_ASCLIN_BRG                      BRG;                    /**< \brief 118, Baud Rate Generation Register*/
       __IO Ifx_ASCLIN_BRD                      BRD;                    /**< \brief 11C, Baud Rate Detection Register*/
       __IO Ifx_ASCLIN_LIN                      LIN;                    /**< \brief 120, LIN Header Timer Register*/
       __I  Ifx_ASCLIN_FLAGS                    FLAGS;                  /**< \brief 12C, Flags Register*/
       __O  Ifx_ASCLIN_FLAGSSET                 FLAGSSET;               /**< \brief 130, Flags Set Register*/
       __O  Ifx_ASCLIN_FLAGSCLEAR               FLAGSCLEAR;             /**< \brief 134, Flags Clear Register*/
       __IO Ifx_ASCLIN_FLAGSENABLE              FLAGSENABLE;            /**< \brief 138, Flags Enable Register*/
       __IO Ifx_ASCLIN_CSR                      CSR;                    /**< \brief 13C, Clock Selection Register*/
       __O  Ifx_ASCLIN_TXDATA                   TXDATA[8];              /**< \brief 140, MIRROR, Transmit Data Register*/
       __I  Ifx_ASCLIN_RXDATA                   RXDATA[8];              /**< \brief 160, MIRROR, Receive Data Register*/
       __I  Ifx_ASCLIN_RXDATAD                  RXDATAD;                /**< \brief 180, Receive Data Debug Register*/
       __I  Ifx_UReg_8Bit                       reserved_184[124];      /**< \brief 184, \internal Reserved */
} Ifx_ASCLIN;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXASCLIN_REGDEF_H */
