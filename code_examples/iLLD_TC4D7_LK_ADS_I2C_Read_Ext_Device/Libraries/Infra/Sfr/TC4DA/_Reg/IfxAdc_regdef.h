/**
 * \file IfxAdc_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_ADC/V0.2.3.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Adc_Registers Adc Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Adc_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Adc_Registers
 * 
 * \defgroup IfxSfr_Adc_Registers_union Register unions
 * \ingroup IfxSfr_Adc_Registers
 * 
 * \defgroup IfxSfr_Adc_Registers_struct Memory map
 * \ingroup IfxSfr_Adc_Registers
 */
#ifndef IFXADC_REGDEF_H
#define IFXADC_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Adc_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_ADC_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_ADC_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_ADC_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_ADC_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_ADC_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_ADC_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_ADC_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_ADC_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_ADC_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_ACCEN_WRB_FPI_Bits;

/** \brief CDSP boudary flag event register */
typedef struct _Ifx_ADC_CDSP_BNDCF_Bits
{
    __IO Ifx_UReg_32Bit BNDF:2;            /**< \brief [1:0] Boundary event for CDSP channel (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_BNDCF_Bits;

/** \brief CDSP boundary flag event clear */
typedef struct _Ifx_ADC_CDSP_BNDCFCL_Bits
{
    __O  Ifx_UReg_32Bit BNDFCLR:2;         /**< \brief [1:0] Boundary event clear for CDSP channels (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_BNDCFCL_Bits;

/** \brief CDSP debug address register */
typedef struct _Ifx_ADC_CDSP_DB_ADDR_Bits
{
    __IO Ifx_UReg_32Bit ADDRESS:32;        /**< \brief [31:0] Debug address location (rwh) */
} Ifx_ADC_CDSP_DB_ADDR_Bits;

/** \brief CDSP debug command register */
typedef struct _Ifx_ADC_CDSP_DB_CMD_Bits
{
    __IO Ifx_UReg_32Bit COMMAND:4;         /**< \brief [3:0] Defines the debug command (read/write to aux/core/mem) (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_CDSP_DB_CMD_Bits;

/** \brief CDSP debug data register */
typedef struct _Ifx_ADC_CDSP_DB_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA_REGISTER:32;    /**< \brief [31:0] Data register (rwh) */
} Ifx_ADC_CDSP_DB_DATA_Bits;

/** \brief CDSP debug reset register */
typedef struct _Ifx_ADC_CDSP_DB_RESET_Bits
{
    __O  Ifx_UReg_32Bit RESET:2;           /**< \brief [1:0] Resets DSP internal debug registers (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_DB_RESET_Bits;

/** \brief CDSP debug status register */
typedef struct _Ifx_ADC_CDSP_DB_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ST:1;              /**< \brief [0:0] The stalled (ST) flag indicates that the debug interface is busy (rh) */
    __I  Ifx_UReg_32Bit FL:1;              /**< \brief [1:1] When true, the failure (FL) flag indicates that the debug operation has failed (rh) */
    __I  Ifx_UReg_32Bit RD:1;              /**< \brief [2:2] Ready flag (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RU:1;              /**< \brief [4:4] The run (RU) flag is set to one when the ARC HS processor is running (rh) */
    __I  Ifx_UReg_32Bit RA:1;              /**< \brief [5:5] Reset applied (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ADC_CDSP_DB_STATUS_Bits;

/** \brief CDSP boundary mode configuration register */
typedef struct _Ifx_ADC_CDSP_DSP_BNDCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDMODE:2;         /**< \brief [1:0] Boundary flag mode (rw) */
    __IO Ifx_UReg_32Bit HYSTEN:1;          /**< \brief [2:2] Hysteresis enable (rw) */
    __IO Ifx_UReg_32Bit SR2CFG:1;          /**< \brief [3:3] Conditions under which SR2 is generated (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_CDSP_DSP_BNDCFG_Bits;

/** \brief CDSP boundary trigger configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_BNDTRCFG_Bits
{
    __IO Ifx_UReg_32Bit BNDTRS:6;          /**< \brief [5:0] Trigger selection select for boundary value update (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRM:2;          /**< \brief [9:8] Trigger mode select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit BNDTRDLY:16;       /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_CDSP_DSP_BNDTRCFG_Bits;

/** \brief CDSP boundary select register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_BOUNDSEL_Bits
{
    __IO Ifx_UReg_32Bit BOUNDARYL:16;      /**< \brief [15:0] Lower boundary value for limit checking (rw) */
    __IO Ifx_UReg_32Bit BOUNDARYU:16;      /**< \brief [31:16] Upper boundary value for limit checking (rw) */
} Ifx_ADC_CDSP_DSP_BOUNDSEL_Bits;

/** \brief CDSP boundary status register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_BOUNDST_Bits
{
    __I  Ifx_UReg_32Bit LOWERST:16;        /**< \brief [15:0] Lower boundary value for limit checking (rh) */
    __I  Ifx_UReg_32Bit UPPERST:16;        /**< \brief [31:16] Upper boundary value for limit checking (rh) */
} Ifx_ADC_CDSP_DSP_BOUNDST_Bits;

/** \brief CDSP channel error clear register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_CHERRCL_Bits
{
    __O  Ifx_UReg_32Bit RDEC:1;            /**< \brief [0:0] Read error flag clear (w) */
    __O  Ifx_UReg_32Bit WREC:1;            /**< \brief [1:1] Write error flag clear (w) */
    __O  Ifx_UReg_32Bit SRTRERC:1;         /**< \brief [2:2] Service request trigger error clear (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit TSTRERC:1;         /**< \brief [4:4] Time-stamp trigger error clear (w) */
    __O  Ifx_UReg_32Bit SWTRERC:1;         /**< \brief [5:5] Software trigger error clear (w) */
    __O  Ifx_UReg_32Bit BNDTRERC:1;        /**< \brief [6:6] Boundary request trigger error clear (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_ADC_CDSP_DSP_CHERRCL_Bits;

/** \brief CDSP configuration of CDSP  0 */
typedef struct _Ifx_ADC_CDSP_DSP_DSPCFG_Bits
{
    __IO Ifx_UReg_32Bit INPSEL:8;          /**< \brief [7:0] Input selection (rw) */
    __IO Ifx_UReg_32Bit HSIMON:8;          /**< \brief [15:8] Input register monitoring (rw) */
    __IO Ifx_UReg_32Bit TSM:1;             /**< \brief [16:16] Time-stamp mode (rw) */
    __IO Ifx_UReg_32Bit TSCLK:2;           /**< \brief [18:17] Timestamp counter clock selection (rw) */
    __IO Ifx_UReg_32Bit TSCRUN:1;          /**< \brief [19:19] Timestamp counter run control (rw) */
    __IO Ifx_UReg_32Bit SRLVL:2;           /**< \brief [21:20] Service request FIFO level (rw) */
    __O  Ifx_UReg_32Bit FIFL:1;            /**< \brief [22:22] FIFO flush (w) */
    __IO Ifx_UReg_32Bit RDM:1;             /**< \brief [23:23] Result display mode (rw) */
    __IO Ifx_UReg_32Bit DRM:2;             /**< \brief [25:24] Data read mode (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_ADC_CDSP_DSP_DSPCFG_Bits;

/** \brief CDSP status register */
typedef struct _Ifx_ADC_CDSP_DSP_DSPST_Bits
{
    __I  Ifx_UReg_32Bit FILL:3;            /**< \brief [2:0] FIFO fill level (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [22:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RDERR:1;           /**< \brief [23:23] Read error flag (rh) */
    __I  Ifx_UReg_32Bit WRERR:1;           /**< \brief [24:24] Write error flag (rh) */
    __I  Ifx_UReg_32Bit SWTRER:1;          /**< \brief [25:25] Software trigger error flag (rh) */
    __I  Ifx_UReg_32Bit TSTRER:1;          /**< \brief [26:26] Timestamp trigger error flag - TSTRER (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __I  Ifx_UReg_32Bit SRTRER:1;          /**< \brief [28:28] Service request trigger error flag - SRTRER (rh) */
    __I  Ifx_UReg_32Bit BNDTRER:1;         /**< \brief [29:29] Boundary update trigger error flag - BNDTRER (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_ADC_CDSP_DSP_DSPST_Bits;

/** \brief CDSP input from DSADC, TMADC, EXMOD or CARMAG */
typedef struct _Ifx_ADC_CDSP_DSP_INPUTMON_Bits
{
    __I  Ifx_UReg_32Bit MONDATA:32;        /**< \brief [31:0] Input data to CDSP (rh) */
} Ifx_ADC_CDSP_DSP_INPUTMON_Bits;

/** \brief CDSP intermediate integration value */
typedef struct _Ifx_ADC_CDSP_DSP_INTIVAL_Bits
{
    __I  Ifx_UReg_32Bit IVAL:23;           /**< \brief [22:0] Integrator intermediate value - IVAL (rh) */
    __I  Ifx_UReg_32Bit ICNT:9;            /**< \brief [31:23] Integrator intermediate count - ICNT (rh) */
} Ifx_ADC_CDSP_DSP_INTIVAL_Bits;

/** \brief CDSP result register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_RES_Bits
{
    __I  Ifx_UReg_32Bit CRESULTLO:16;      /**< \brief [15:0] CDSP result value lower part (rh) */
    __I  Ifx_UReg_32Bit CRESULTHI:16;      /**< \brief [31:16] CDSP result value higher part (rh) */
} Ifx_ADC_CDSP_DSP_RES_Bits;

/** \brief CDSP service request configuration register */
typedef struct _Ifx_ADC_CDSP_DSP_SRCFG_Bits
{
    __IO Ifx_UReg_32Bit SR0E:2;            /**< \brief [1:0] Conditions under which SR0 shall be generated (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit SR1E:2;            /**< \brief [5:4] Service request 1 enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [9:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SR2E:1;            /**< \brief [10:10] Service request 2 enable (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_ADC_CDSP_DSP_SRCFG_Bits;

/** \brief CDSP service request trigger configuration register */
typedef struct _Ifx_ADC_CDSP_DSP_SRTRCFG_Bits
{
    __IO Ifx_UReg_32Bit SRTRS:6;           /**< \brief [5:0] Trigger source select for service request (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SRTRDLY:16;        /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_CDSP_DSP_SRTRCFG_Bits;

/** \brief CDSP software configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_SWCFG_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit WC:1;              /**< \brief [3:3] Window control (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [29:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SWMODE:2;          /**< \brief [31:30] Software mode (rw) */
} Ifx_ADC_CDSP_DSP_SWCFG_Bits;

/** \brief CDSP software trigger configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_SWTRCFG_Bits
{
    __IO Ifx_UReg_32Bit SWTRS:6;           /**< \brief [5:0] Software trigger source for the configured software function (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SWTRM:2;           /**< \brief [9:8] Trigger mode select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit SWTRDLY:16;        /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_CDSP_DSP_SWTRCFG_Bits;

/** \brief CDSP time-stamp counter 0 */
typedef struct _Ifx_ADC_CDSP_DSP_TSCNT_Bits
{
    __I  Ifx_UReg_32Bit TSCOUNT:16;        /**< \brief [15:0] Timestamp counter value (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_CDSP_DSP_TSCNT_Bits;

/** \brief CDSP time-stamp register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_TSTMP_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The most recent captured timestamp value (rh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [30:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TSVAL:1;           /**< \brief [31:31] Timestamp valid (rh) */
} Ifx_ADC_CDSP_DSP_TSTMP_Bits;

/** \brief CDSP time stamp trigger configuration register 0 */
typedef struct _Ifx_ADC_CDSP_DSP_TSTRCFG_Bits
{
    __IO Ifx_UReg_32Bit TSTRS:6;           /**< \brief [5:0] Trigger source select for timestamp (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRM:2;           /**< \brief [9:8] Trigger mode select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TSTRDLY:16;        /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_CDSP_DSP_TSTRCFG_Bits;

/** \brief CDSP global halt control register */
typedef struct _Ifx_ADC_CDSP_GLOBHCD_Bits
{
    __O  Ifx_UReg_32Bit CHHLTD:2;          /**< \brief [1:0] Channel halt for DSP (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_GLOBHCD_Bits;

/** \brief CDSP global halt status register */
typedef struct _Ifx_ADC_CDSP_GLOBHSTD_Bits
{
    __I  Ifx_UReg_32Bit DSPHST:2;          /**< \brief [1:0] DSP halt status (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_GLOBHSTD_Bits;

/** \brief CDSP global run control register */
typedef struct _Ifx_ADC_CDSP_GLOBRCD_Bits
{
    __O  Ifx_UReg_32Bit CHRUND:2;          /**< \brief [1:0] Channel run for CDSP (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_GLOBRCD_Bits;

/** \brief CDSP global reset control */
typedef struct _Ifx_ADC_CDSP_GLOBRD_Bits
{
    __O  Ifx_UReg_32Bit DSPRST:2;          /**< \brief [1:0] DSP reset (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_GLOBRD_Bits;

/** \brief CDSP global run status register */
typedef struct _Ifx_ADC_CDSP_GLOBRSD_Bits
{
    __I  Ifx_UReg_32Bit DSPRST:2;          /**< \brief [1:0] DSP run status (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_GLOBRSD_Bits;

/** \brief CDSP input from general purpose register 0 */
typedef struct _Ifx_ADC_CDSP_GP_Bits
{
    __IO Ifx_UReg_32Bit GPI:32;            /**< \brief [31:0] General purpose input data mapped to DSP address space (rw) */
} Ifx_ADC_CDSP_GP_Bits;

/** \brief OCDS control and status register 0 for CDSP0-8 */
typedef struct _Ifx_ADC_CDSP_OCSCDSPA_Bits
{
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [1:0] OCDS suspend control mode - SUSM (rw) */
    __IO Ifx_UReg_32Bit SUS:2;             /**< \brief [3:2] OCDS suspend control - SUS (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [16:16] SUS write protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:2;          /**< \brief [18:17] Suspend state - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_ADC_CDSP_OCSCDSPA_Bits;

/** \brief CDSP event flag register 0 */
typedef struct _Ifx_ADC_CDSP_RESEV_Bits
{
    __IO Ifx_UReg_32Bit RESEV:2;           /**< \brief [1:0] Result event for result register 0 of CDSP (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_RESEV_Bits;

/** \brief CDSP result event flag clear 0 */
typedef struct _Ifx_ADC_CDSP_RESEVCLR_Bits
{
    __O  Ifx_UReg_32Bit RESEVCLR:2;        /**< \brief [1:0] Result event clear for result register 0 of CDSP (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_RESEVCLR_Bits;

/** \brief CDSP sleep status register */
typedef struct _Ifx_ADC_CDSP_SLPST_Bits
{
    __I  Ifx_UReg_32Bit DSPSLP:2;          /**< \brief [1:0] CDSP sleep status (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_SLPST_Bits;

/** \brief CDSP wake up error event clear register */
typedef struct _Ifx_ADC_CDSP_WUERRCL_Bits
{
    __O  Ifx_UReg_32Bit WUERRCLR:2;        /**< \brief [1:0] Wake up error event clear (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_WUERRCL_Bits;

/** \brief CDSP wake up error flag register */
typedef struct _Ifx_ADC_CDSP_WUERREV_Bits
{
    __IO Ifx_UReg_32Bit WUERREV:2;         /**< \brief [1:0] Wake up error event (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_ADC_CDSP_WUERREV_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_ADC_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_CLC_Bits;

/** \brief Clock enable for CDSP */
typedef struct _Ifx_ADC_CLKEN_CDSP_Bits
{
    __IO Ifx_UReg_32Bit CDSPEN:2;          /**< \brief [1:0] Clock enable for corressponding CDSP (rwh) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [30:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CDSPGL:1;          /**< \brief [31:31] Enables the global part of CDSP (rwh) */
} Ifx_ADC_CLKEN_CDSP_Bits;

/** \brief Clock enable for TMADC */
typedef struct _Ifx_ADC_CLKEN_TMADC_Bits
{
    __IO Ifx_UReg_32Bit TMADCEN:4;         /**< \brief [3:0] Clock enable for TMADC (rwh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_CLKEN_TMADC_Bits;

/** \brief ADC to eGTM boundary flag select register, cluster 0 */
typedef struct _Ifx_ADC_ETBFSEL_Bits
{
    __IO Ifx_UReg_32Bit OUT0SEL:6;         /**< \brief [5:0] Boundary flag output select (rw) */
    __IO Ifx_UReg_32Bit OUT1SEL:6;         /**< \brief [11:6] Boundary flag output select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit OUT2SEL:6;         /**< \brief [21:16] Boundary flag output select (rw) */
    __IO Ifx_UReg_32Bit OUT3SEL:6;         /**< \brief [27:22] Boundary flag output select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_ETBFSEL_Bits;

/** \brief ADC global alarm configuration register */
typedef struct _Ifx_ADC_GLALCFG_Bits
{
    __IO Ifx_UReg_32Bit EVEN0:6;           /**< \brief [5:0] Event Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit EVEN1:6;           /**< \brief [13:8] Event Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit EVOP:2;            /**< \brief [17:16] Event Operation (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_GLALCFG_Bits;

/** \brief ADC global alarm set register */
typedef struct _Ifx_ADC_GLALSET_Bits
{
    __O  Ifx_UReg_32Bit ALSET:8;           /**< \brief [7:0] Alarm set by SW write - ALSET (w) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_GLALSET_Bits;

/** \brief ADC global service request configuration register */
typedef struct _Ifx_ADC_GLSRCFG_Bits
{
    __IO Ifx_UReg_32Bit EVEN:4;            /**< \brief [3:0] Event Enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit EVOP:1;            /**< \brief [8:8] Event Operation (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_ADC_GLSRCFG_Bits;

/** \brief ADC global service request set register */
typedef struct _Ifx_ADC_GLSRSET_Bits
{
    __O  Ifx_UReg_32Bit SRSET:4;           /**< \brief [3:0] Service request set by SW write - ALSET (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_ADC_GLSRSET_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_ADC_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_ADC_ID_Bits;

/** \brief OCDS control and status register for TMADC */
typedef struct _Ifx_ADC_OCSTM_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger set for OTGB0 and OTGB1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0 and OTGB1 bus select - TGB (rw) */
    __IO Ifx_UReg_32Bit TRIG1SEL:2;        /**< \brief [4:3] Trigger set 1 select (rw) */
    __IO Ifx_UReg_32Bit TRIG2SEL:2;        /**< \brief [6:5] Trigger set 2 select (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [7:7] TGS, TGB write protection - TG_P (w) */
    __IO Ifx_UReg_32Bit SUSM:2;            /**< \brief [9:8] OCDS suspend control mode - SUS (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [14:10] \internal Reserved */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [15:15] SUS write protection - SUS_P (w) */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [19:16] OCDS suspend control - SUS (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __I  Ifx_UReg_32Bit SUSSTA:4;          /**< \brief [27:24] Suspend state - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_OCSTM_Bits;

/** \brief ADC pull down diagnostics configuration register */
typedef struct _Ifx_ADC_PDDCFG_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Enable (rw) */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Enable (rw) */
    __IO Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Enable (rw) */
    __IO Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Enable (rw) */
    __IO Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Enable (rw) */
    __IO Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Enable (rw) */
    __IO Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Enable (rw) */
    __IO Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Enable (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_PDDCFG_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_ADC_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_ADC_PROT_Bits;

/** \brief  */
typedef struct _Ifx_ADC_RES_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Conversion result for the configured channel (rh) */
    __I  Ifx_UReg_32Bit CHNR:4;            /**< \brief [19:16] TMADC channel number (rh) */
    __I  Ifx_UReg_32Bit TRNM:6;            /**< \brief [25:20] Trigger number (rh) */
    __I  Ifx_UReg_32Bit SWTR:1;            /**< \brief [26:26] Software trigger status (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [29:27] \internal Reserved */
    __I  Ifx_UReg_32Bit DR:1;              /**< \brief [30:30] Diagnostic result (rh) */
    __I  Ifx_UReg_32Bit TRE:1;             /**< \brief [31:31] Trigger edge (rh) */
} Ifx_ADC_RES_Bits;

/** \brief Resource allocation register for CDSP */
typedef struct _Ifx_ADC_RESALLOC_CDSPA_Bits
{
    __IO Ifx_UReg_32Bit CDSP0:4;           /**< \brief [3:0] APU Asignment for Corresponsing CDSP 0 (rw) */
    __IO Ifx_UReg_32Bit CDSP1:4;           /**< \brief [7:4] APU Asignment for Corresponsing CDSP1 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_RESALLOC_CDSPA_Bits;

/** \brief Resource allocation register for Global Rsources */
typedef struct _Ifx_ADC_RESALLOC_GLOB_Bits
{
    __IO Ifx_UReg_32Bit GLOB:4;            /**< \brief [3:0] APU Asignment for Global parts of ADC (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit CDSPGL:4;          /**< \brief [11:8] APU Asignment for Global parts of CDSP (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_RESALLOC_GLOB_Bits;

/** \brief Resource allocation register for TMADC Resources */
typedef struct _Ifx_ADC_RESALLOC_TMADC_Bits
{
    __IO Ifx_UReg_32Bit TMADC0:4;          /**< \brief [3:0] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC1:4;          /**< \brief [7:4] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC2:4;          /**< \brief [11:8] APU Asignment for Corresponsing TMADC (rw) */
    __IO Ifx_UReg_32Bit TMADC3:4;          /**< \brief [15:12] APU Asignment for Corresponsing TMADC (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_RESALLOC_TMADC_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_ADC_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_ADC_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_ADC_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_ADC_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_RST_STAT_Bits;

/** \brief Supply level selection for ADC */
typedef struct _Ifx_ADC_SUPLLEV_Bits
{
    __IO Ifx_UReg_32Bit TMADCSUP:1;        /**< \brief [0:0] TMADC supply level (rw) */
    __IO Ifx_UReg_32Bit FCCSUP:1;          /**< \brief [1:1] FCC supply level (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [14:2] \internal Reserved */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [15:15] High ohmic reference voltage enable - VEN (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_SUPLLEV_Bits;

/** \brief TMADC boundary flag configuration register 0 */
typedef struct _Ifx_ADC_TMADC_BFL_CFG_Bits
{
    __IO Ifx_UReg_32Bit RESEL:4;           /**< \brief [3:0] Result register select (rw) */
    __IO Ifx_UReg_32Bit BFM:1;             /**< \brief [4:4] Boundary flag mode (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_ADC_TMADC_BFL_CFG_Bits;

/** \brief TMADC boundary flag status register 0 */
typedef struct _Ifx_ADC_TMADC_BFL_STAT_Bits
{
    __I  Ifx_UReg_32Bit BFL:1;             /**< \brief [0:0] Boundary flag value (rh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_ADC_TMADC_BFL_STAT_Bits;

/** \brief TMADC boundary event flag register */
typedef struct _Ifx_ADC_TMADC_BNDF_Bits
{
    __I  Ifx_UReg_32Bit BNDEV:18;          /**< \brief [17:0] Boundary event (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_BNDF_Bits;

/** \brief TMADC boundary event flag clear register */
typedef struct _Ifx_ADC_TMADC_BNDFCLR_Bits
{
    __O  Ifx_UReg_32Bit BNDEVCLR:18;       /**< \brief [17:0] Boundary event clear (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_BNDFCLR_Bits;

/** \brief TMADC boundary  select register 0 */
typedef struct _Ifx_ADC_TMADC_BND_SEL_Bits
{
    __IO Ifx_UReg_32Bit LB:12;             /**< \brief [11:0] Lower boundary value for limit checking (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit UB:12;             /**< \brief [27:16] Upper boundary value for limit checking (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_TMADC_BND_SEL_Bits;

/** \brief TMADC boundary status regsiter */
typedef struct _Ifx_ADC_TMADC_BND_STAT_Bits
{
    __I  Ifx_UReg_32Bit CLB:12;            /**< \brief [11:0] Current lower boundary value for limit checking (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit CUB:12;            /**< \brief [27:16] Current upper boundary value for limit checking (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_ADC_TMADC_BND_STAT_Bits;

/** \brief TMADC boundary trigger configuration register, boundary register 0 */
typedef struct _Ifx_ADC_TMADC_BND_TRGCFG_Bits
{
    __IO Ifx_UReg_32Bit TRS:6;             /**< \brief [5:0] Trigger source select for Boundary value update in shadow update mode (rw) */
    __IO Ifx_UReg_32Bit TRMS:2;            /**< \brief [7:6] Trigger mode select (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_TMADC_BND_TRGCFG_Bits;

/** \brief TMADC broken wire detection control register */
typedef struct _Ifx_ADC_TMADC_BWDCFG_Bits
{
    __IO Ifx_UReg_32Bit ENCH0:2;           /**< \brief [1:0] Enable BWD channel 0 (rw) */
    __IO Ifx_UReg_32Bit ENCH1:2;           /**< \brief [3:2] Enable BWD channel 1 (rw) */
    __IO Ifx_UReg_32Bit ENCH2:2;           /**< \brief [5:4] Enable BWD channel 2 (rw) */
    __IO Ifx_UReg_32Bit ENCH3:2;           /**< \brief [7:6] Enable BWD channel 3 (rw) */
    __IO Ifx_UReg_32Bit ENCH4:2;           /**< \brief [9:8] Enable BWD channel 4 (rw) */
    __IO Ifx_UReg_32Bit ENCH5:2;           /**< \brief [11:10] Enable BWD channel 5 (rw) */
    __IO Ifx_UReg_32Bit ENCH6:2;           /**< \brief [13:12] Enable BWD channel 6 (rw) */
    __IO Ifx_UReg_32Bit ENCH7:2;           /**< \brief [15:14] Enable BWD channel 7 (rw) */
    __IO Ifx_UReg_32Bit ENCH8:2;           /**< \brief [17:16] Enable BWD channel 8 (rw) */
    __IO Ifx_UReg_32Bit ENCH9:2;           /**< \brief [19:18] Enable BWD channel 9 (rw) */
    __IO Ifx_UReg_32Bit ENCH10:2;          /**< \brief [21:20] Enable BWD channel 10 (rw) */
    __IO Ifx_UReg_32Bit ENCH11:2;          /**< \brief [23:22] Enable BWD channel 11 (rw) */
    __IO Ifx_UReg_32Bit ENCH12:2;          /**< \brief [25:24] Enable BWD channel 12 (rw) */
    __IO Ifx_UReg_32Bit ENCH13:2;          /**< \brief [27:26] Enable BWD channel 13 (rw) */
    __IO Ifx_UReg_32Bit ENCH14:2;          /**< \brief [29:28] Enable BWD channel 14 (rw) */
    __IO Ifx_UReg_32Bit ENCH15:2;          /**< \brief [31:30] Enable BWD channel 15 (rw) */
} Ifx_ADC_TMADC_BWDCFG_Bits;

/** \brief TMADC configuration register, channel 0 */
typedef struct _Ifx_ADC_TMADC_CH_CFG_Bits
{
    __IO Ifx_UReg_32Bit HWTR0MS:6;         /**< \brief [5:0] Hardware trigger 0 multiplexer select (rw) */
    __IO Ifx_UReg_32Bit HWTR1MS:6;         /**< \brief [11:6] Hardware trigger 1 multiplexer select (rw) */
    __IO Ifx_UReg_32Bit HWTR0M:2;          /**< \brief [13:12] Hardware trigger 0 mode (rw) */
    __IO Ifx_UReg_32Bit HWTR1M:2;          /**< \brief [15:14] Hardware trigger 1 mode (rw) */
    __IO Ifx_UReg_32Bit RSEL:4;            /**< \brief [19:16] Result and timestamp register select (rw) */
    __IO Ifx_UReg_32Bit ATREN:1;           /**< \brief [20:20] Auto-trigger enable (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [21:21] Enable (rw) */
    __IO Ifx_UReg_32Bit EMUXEN:1;          /**< \brief [22:22] EMUX enable (rw) */
    __IO Ifx_UReg_32Bit TSEN:1;            /**< \brief [23:23] Time-stamp enable (rw) */
    __IO Ifx_UReg_32Bit HWTRDLYEN:1;       /**< \brief [24:24] Trigger delay enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_ADC_TMADC_CH_CFG_Bits;

/** \brief TMADC status register, channel 0 */
typedef struct _Ifx_ADC_TMADC_CH_STAT_Bits
{
    __I  Ifx_UReg_32Bit TRENR:6;           /**< \brief [5:0] Trigger error number (rh) */
    __I  Ifx_UReg_32Bit HWTRE:1;           /**< \brief [6:6] Hardware trigger error (rh) */
    __I  Ifx_UReg_32Bit SWTRE:1;           /**< \brief [7:7] Software trigger error (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_TMADC_CH_STAT_Bits;

/** \brief TMADC sampling time control register, channel 0 */
typedef struct _Ifx_ADC_TMADC_CH_STC_Bits
{
    __IO Ifx_UReg_32Bit ST:16;             /**< \brief [15:0] Sampling time (rw) */
    __IO Ifx_UReg_32Bit TRD:16;            /**< \brief [31:16] Trigger delay (rw) */
} Ifx_ADC_TMADC_CH_STC_Bits;

/** \brief TMADC connection matrix configuration register */
typedef struct _Ifx_ADC_TMADC_CMATCFG_Bits
{
    __IO Ifx_UReg_32Bit CHCSEL:16;         /**< \brief [15:0] Channel core select (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_ADC_TMADC_CMATCFG_Bits;

/** \brief TMADC converter self-diagnostics register core-0 */
typedef struct _Ifx_ADC_TMADC_CSD_Bits
{
    __IO Ifx_UReg_32Bit CHSEL:5;           /**< \brief [4:0] CSD channel select (valid only for channels connected to Core-0) (rw) */
    __IO Ifx_UReg_32Bit SEL:2;             /**< \brief [6:5] Select (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [7:7] Enable (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_ADC_TMADC_CSD_Bits;

/** \brief TMADC EMUX configuration register */
typedef struct _Ifx_ADC_TMADC_EMUXCFG_Bits
{
    __IO Ifx_UReg_32Bit CHCNT:4;           /**< \brief [3:0] External multiplexer channel count (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit CS:1;              /**< \brief [8:8] External multiplexer coding scheme (rw) */
    __IO Ifx_UReg_32Bit CISEL0:1;          /**< \brief [9:9] External multiplxer control interface 0 select (rw) */
    __IO Ifx_UReg_32Bit CISEL1:1;          /**< \brief [10:10] External multiplxer control interface 1 select (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_ADC_TMADC_EMUXCFG_Bits;

/** \brief TMADC error event flag register */
typedef struct _Ifx_ADC_TMADC_ERRF_Bits
{
    __I  Ifx_UReg_32Bit ERREV:18;          /**< \brief [17:0] Error event (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_ERRF_Bits;

/** \brief TMADC error event flag clear register */
typedef struct _Ifx_ADC_TMADC_ERRFCLR_Bits
{
    __O  Ifx_UReg_32Bit ERREVCLR:18;       /**< \brief [17:0] Error event clear (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_ERRFCLR_Bits;

/** \brief TMADC configuration register, monitor channel 0 */
typedef struct _Ifx_ADC_TMADC_MCH_CFG_Bits
{
    __IO Ifx_UReg_32Bit SEL:2;             /**< \brief [1:0] Monitor multiplexer input selection (rw) */
    __IO Ifx_UReg_32Bit ATREN:1;           /**< \brief [2:2] Auto-trigger enable (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [3:3] Enable (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit ST:16;             /**< \brief [31:16] Monitor channel sampling time (rw) */
} Ifx_ADC_TMADC_MCH_CFG_Bits;

/** \brief TMADC module configuration register */
typedef struct _Ifx_ADC_TMADC_MODCFG_Bits
{
    __O  Ifx_UReg_32Bit SUCAL:1;           /**< \brief [0:0] Start-Up Calibration (w) */
    __IO Ifx_UReg_32Bit RUN:1;             /**< \brief [1:1] Run (rwh) */
    __IO Ifx_UReg_32Bit BND0UPD:1;         /**< \brief [2:2] Boundary values update, boundary register 0 (rw) */
    __IO Ifx_UReg_32Bit BND1UPD:1;         /**< \brief [3:3] Boundary values update, boundary register 1 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [8:4] \internal Reserved */
    __IO Ifx_UReg_32Bit TSCRUN:1;          /**< \brief [9:9] Time-stamp counter run control (rw) */
    __IO Ifx_UReg_32Bit OSSEL:2;           /**< \brief [11:10] Output supervision signal select (rwh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_ADC_TMADC_MODCFG_Bits;

/** \brief TMADC module status register */
typedef struct _Ifx_ADC_TMADC_MODSTAT_Bits
{
    __I  Ifx_UReg_32Bit DIS:1;             /**< \brief [0:0] Disable (rh) */
    __I  Ifx_UReg_32Bit RUN:1;             /**< \brief [1:1] Run (rh) */
    __I  Ifx_UReg_32Bit CALPH:2;           /**< \brief [3:2] Calibration phase Indication (rh) */
    __I  Ifx_UReg_32Bit PONPH:2;           /**< \brief [5:4] Power-on phase Indication (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ADC_TMADC_MODSTAT_Bits;

/** \brief TMADC monitor channel 0  result register */
typedef struct _Ifx_ADC_TMADC_MRES_Bits
{
    __I  Ifx_UReg_32Bit RESULT:16;         /**< \brief [15:0] Separated register to store monitor chnnel results (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [29:16] \internal Reserved */
    __I  Ifx_UReg_32Bit DR:1;              /**< \brief [30:30] Diagnostic result (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_ADC_TMADC_MRES_Bits;

/** \brief TMADC configuration register, monitor channel 0  result register */
typedef struct _Ifx_ADC_TMADC_MRSLT_CFG_Bits
{
    __IO Ifx_UReg_32Bit BNDSEL:2;          /**< \brief [1:0] Boundary select (rw) */
    __IO Ifx_UReg_32Bit BNDMODE:1;         /**< \brief [2:2] Boundary mode (rw) */
    __IO Ifx_UReg_32Bit BNDSELR:1;         /**< \brief [3:3] Boundary register select (rw) */
    __IO Ifx_UReg_32Bit WFR:1;             /**< \brief [4:4] Wait for read (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_ADC_TMADC_MRSLT_CFG_Bits;

/** \brief TMADC result event flag register */
typedef struct _Ifx_ADC_TMADC_RESF_Bits
{
    __I  Ifx_UReg_32Bit RESEV:18;          /**< \brief [17:0] Result event (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_RESF_Bits;

/** \brief TMADC result event flag clear register */
typedef struct _Ifx_ADC_TMADC_RESFCLR_Bits
{
    __O  Ifx_UReg_32Bit RESEVCLR:18;       /**< \brief [17:0] Result event clear (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_RESFCLR_Bits;

/** \brief TMADC result event flag set register */
typedef struct _Ifx_ADC_TMADC_RESFSET_Bits
{
    __O  Ifx_UReg_32Bit RESEVSET:18;       /**< \brief [17:0] Result event set (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_RESFSET_Bits;

/** \brief TMADC configuration register, result register 0 */
typedef struct _Ifx_ADC_TMADC_RSLT_CFG_Bits
{
    __IO Ifx_UReg_32Bit BNDSEL:2;          /**< \brief [1:0] Boundary select (rw) */
    __IO Ifx_UReg_32Bit BNDMODE:1;         /**< \brief [2:2] Boundary mode (rw) */
    __IO Ifx_UReg_32Bit BNDSELR:1;         /**< \brief [3:3] Boundary register select (rw) */
    __IO Ifx_UReg_32Bit WFR:1;             /**< \brief [4:4] Wait for read (rw) */
    __IO Ifx_UReg_32Bit HYSTM:1;           /**< \brief [5:5] Hysteresis mode (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_ADC_TMADC_RSLT_CFG_Bits;

/** \brief TMADC service request configuration register 0 */
typedef struct _Ifx_ADC_TMADC_SR_CFG_Bits
{
    __IO Ifx_UReg_32Bit EVEN:18;           /**< \brief [17:0] Event enable (rw) */
    __IO Ifx_UReg_32Bit EVSEL:2;           /**< \brief [19:18] Event selection (rw) */
    __IO Ifx_UReg_32Bit EVOP:2;            /**< \brief [21:20] Event operation (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_ADC_TMADC_SR_CFG_Bits;

/** \brief TMADC software trigger configuration register */
typedef struct _Ifx_ADC_TMADC_SWTRCFG_Bits
{
    __O  Ifx_UReg_32Bit SCHSEL:18;         /**< \brief [17:0] Software trigger channel select (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_ADC_TMADC_SWTRCFG_Bits;

/** \brief TMADC supervision module register */
typedef struct _Ifx_ADC_TMSMOD_Bits
{
    __IO Ifx_UReg_32Bit SEL:3;             /**< \brief [2:0] Select (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_ADC_TMSMOD_Bits;

/** \brief  */
typedef struct _Ifx_ADC_TS_Bits
{
    __I  Ifx_UReg_32Bit TIMESTAMP:16;      /**< \brief [15:0] The most recent captured timestamp value (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [27:16] \internal Reserved */
    __I  Ifx_UReg_32Bit EMUXCH:4;          /**< \brief [31:28] EMUX channel number (rh) */
} Ifx_ADC_TS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_adc_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_ACCEN_WRB_FPI;

/** \brief CDSP boudary flag event register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_BNDCF_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_CDSP_BNDCF;

/** \brief CDSP boundary flag event clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_BNDCFCL_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_BNDCFCL;

/** \brief CDSP debug address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_ADDR_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_ADDR;

/** \brief CDSP debug command register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_CMD_Bits B;            /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_CMD;

/** \brief CDSP debug data register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_DATA_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_DATA;

/** \brief CDSP debug reset register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_RESET_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_RESET;

/** \brief CDSP debug status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DB_STATUS_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DB_STATUS;

/** \brief CDSP boundary mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BNDCFG_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BNDCFG;

/** \brief CDSP boundary trigger configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BNDTRCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BNDTRCFG;

/** \brief CDSP boundary select register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BOUNDSEL_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BOUNDSEL;

/** \brief CDSP boundary status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_BOUNDST_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_BOUNDST;

/** \brief CDSP channel error clear register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_CHERRCL_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_CHERRCL;

/** \brief CDSP configuration of CDSP  0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_DSPCFG_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_DSPCFG;

/** \brief CDSP status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_DSPST_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_DSPST;

/** \brief CDSP input from DSADC, TMADC, EXMOD or CARMAG   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_INPUTMON_Bits B;      /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_INPUTMON;

/** \brief CDSP intermediate integration value   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_INTIVAL_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_INTIVAL;

/** \brief CDSP result register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_RES_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_RES;

/** \brief CDSP service request configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_SRCFG_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_SRCFG;

/** \brief CDSP service request trigger configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_SRTRCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_SRTRCFG;

/** \brief CDSP software configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_SWCFG_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_SWCFG;

/** \brief CDSP software trigger configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_SWTRCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_SWTRCFG;

/** \brief CDSP time-stamp counter 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_TSCNT_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_TSCNT;

/** \brief CDSP time-stamp register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_TSTMP_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_TSTMP;

/** \brief CDSP time stamp trigger configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_DSP_TSTRCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_CDSP_DSP_TSTRCFG;

/** \brief CDSP global halt control register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBHCD_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBHCD;

/** \brief CDSP global halt status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBHSTD_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBHSTD;

/** \brief CDSP global run control register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBRCD_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBRCD;

/** \brief CDSP global reset control   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBRD_Bits B;            /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBRD;

/** \brief CDSP global run status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GLOBRSD_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GLOBRSD;

/** \brief CDSP input from general purpose register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_GP_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_CDSP_GP;

/** \brief OCDS control and status register 0 for CDSP0-8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_OCSCDSPA_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_CDSP_OCSCDSPA;

/** \brief CDSP event flag register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_RESEV_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_CDSP_RESEV;

/** \brief CDSP result event flag clear 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_RESEVCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_CDSP_RESEVCLR;

/** \brief CDSP sleep status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_SLPST_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_CDSP_SLPST;

/** \brief CDSP wake up error event clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_WUERRCL_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_WUERRCL;

/** \brief CDSP wake up error flag register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CDSP_WUERREV_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_CDSP_WUERREV;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_ADC_CLC;

/** \brief Clock enable for CDSP   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLKEN_CDSP_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_CLKEN_CDSP;

/** \brief Clock enable for TMADC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_CLKEN_TMADC_Bits B;            /**< \brief Bitfield access */
} Ifx_ADC_CLKEN_TMADC;

/** \brief ADC to eGTM boundary flag select register, cluster 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ETBFSEL_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_ETBFSEL;

/** \brief ADC global alarm configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLALCFG_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_GLALCFG;

/** \brief ADC global alarm set register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLALSET_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_GLALSET;

/** \brief ADC global service request configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLSRCFG_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_GLSRCFG;

/** \brief ADC global service request set register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_GLSRSET_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_GLSRSET;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_ADC_ID;

/** \brief OCDS control and status register for TMADC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_OCSTM_Bits B;                  /**< \brief Bitfield access */
} Ifx_ADC_OCSTM;

/** \brief ADC pull down diagnostics configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_PDDCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_ADC_PDDCFG;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_ADC_PROT;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RES_Bits B;                    /**< \brief Bitfield access */
} Ifx_ADC_RES;

/** \brief Resource allocation register for CDSP   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_CDSPA_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_CDSPA;

/** \brief Resource allocation register for Global Rsources   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_GLOB_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_GLOB;

/** \brief Resource allocation register for TMADC Resources   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RESALLOC_TMADC_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_RESALLOC_TMADC;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_ADC_RST_STAT;

/** \brief Supply level selection for ADC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_SUPLLEV_Bits B;                /**< \brief Bitfield access */
} Ifx_ADC_SUPLLEV;

/** \brief TMADC boundary flag configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BFL_CFG_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BFL_CFG;

/** \brief TMADC boundary flag status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BFL_STAT_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BFL_STAT;

/** \brief TMADC boundary event flag register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BNDF_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BNDF;

/** \brief TMADC boundary event flag clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BNDFCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BNDFCLR;

/** \brief TMADC boundary  select register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BND_SEL_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BND_SEL;

/** \brief TMADC boundary status regsiter   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BND_STAT_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BND_STAT;

/** \brief TMADC boundary trigger configuration register, boundary register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BND_TRGCFG_Bits B;       /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BND_TRGCFG;

/** \brief TMADC broken wire detection control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_BWDCFG_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_TMADC_BWDCFG;

/** \brief TMADC configuration register, channel 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CH_CFG_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CH_CFG;

/** \brief TMADC status register, channel 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CH_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CH_STAT;

/** \brief TMADC sampling time control register, channel 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CH_STC_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CH_STC;

/** \brief TMADC connection matrix configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CMATCFG_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CMATCFG;

/** \brief TMADC converter self-diagnostics register core-0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_CSD_Bits B;              /**< \brief Bitfield access */
} Ifx_ADC_TMADC_CSD;

/** \brief TMADC EMUX configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_EMUXCFG_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_EMUXCFG;

/** \brief TMADC error event flag register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_ERRF_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_TMADC_ERRF;

/** \brief TMADC error event flag clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_ERRFCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_ERRFCLR;

/** \brief TMADC configuration register, monitor channel 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MCH_CFG_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MCH_CFG;

/** \brief TMADC module configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MODCFG_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MODCFG;

/** \brief TMADC module status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MODSTAT_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MODSTAT;

/** \brief TMADC monitor channel 0  result register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MRES_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MRES;

/** \brief TMADC configuration register, monitor channel 0  result register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_MRSLT_CFG_Bits B;        /**< \brief Bitfield access */
} Ifx_ADC_TMADC_MRSLT_CFG;

/** \brief TMADC result event flag register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RESF_Bits B;             /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RESF;

/** \brief TMADC result event flag clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RESFCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RESFCLR;

/** \brief TMADC result event flag set register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RESFSET_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RESFSET;

/** \brief TMADC configuration register, result register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_RSLT_CFG_Bits B;         /**< \brief Bitfield access */
} Ifx_ADC_TMADC_RSLT_CFG;

/** \brief TMADC service request configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_SR_CFG_Bits B;           /**< \brief Bitfield access */
} Ifx_ADC_TMADC_SR_CFG;

/** \brief TMADC software trigger configuration register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMADC_SWTRCFG_Bits B;          /**< \brief Bitfield access */
} Ifx_ADC_TMADC_SWTRCFG;

/** \brief TMADC supervision module register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TMSMOD_Bits B;                 /**< \brief Bitfield access */
} Ifx_ADC_TMSMOD;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_ADC_TS_Bits B;                     /**< \brief Bitfield access */
} Ifx_ADC_TS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_RESALLOC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RESALLOC object */
typedef volatile struct _Ifx_ADC_RESALLOC
{
       __IO Ifx_ADC_RESALLOC_GLOB               GLOB;                   /**< \brief 0, Resource allocation register for Global Rsources*/
       __IO Ifx_ADC_RESALLOC_TMADC              TMADC;                  /**< \brief 4, Resource allocation register for TMADC Resources*/
       __I  Ifx_UReg_8Bit                       reserved_8[20];         /**< \brief 8, \internal Reserved */
       __IO Ifx_ADC_RESALLOC_CDSPA              CDSPA;                  /**< \brief 1C, Resource allocation register for CDSP*/
} Ifx_ADC_RESALLOC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_ADC_ACCEN
{
       __IO Ifx_ADC_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_ADC_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_ADC_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_ADC_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_ADC_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_ADC_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_ADC_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_ADC_RST
{
       __IO Ifx_ADC_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_ADC_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_ADC_RST_STAT                    STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_ADC_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CLKEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CLKEN object */
typedef volatile struct _Ifx_ADC_CLKEN
{
       __IO Ifx_ADC_CLKEN_TMADC                 TMADC;                  /**< \brief 0, Clock enable for TMADC*/
       __I  Ifx_UReg_8Bit                       reserved_4[8];          /**< \brief 4, \internal Reserved */
       __IO Ifx_ADC_CLKEN_CDSP                  CDSP;                   /**< \brief C, Clock enable for CDSP*/
} Ifx_ADC_CLKEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_ADC_TMADC_CH
{
       __IO Ifx_ADC_TMADC_CH_STC                STC;                    /**< \brief 0, TMADC sampling time control register, channel 0*/
       __IO Ifx_ADC_TMADC_CH_CFG                CFG;                    /**< \brief 4, TMADC configuration register, channel 0*/
       __I  Ifx_ADC_TMADC_CH_STAT               STAT;                   /**< \brief 8, TMADC status register, channel 0*/
} Ifx_ADC_TMADC_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_MCH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief MCH object */
typedef volatile struct _Ifx_ADC_TMADC_MCH
{
       __IO Ifx_ADC_TMADC_MCH_CFG               CFG;                    /**< \brief 0, TMADC configuration register, monitor channel 0*/
} Ifx_ADC_TMADC_MCH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_BND_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief BND object */
typedef volatile struct _Ifx_ADC_TMADC_BND
{
       __IO Ifx_ADC_TMADC_BND_SEL               SEL;                    /**< \brief 0, TMADC boundary  select register 0*/
       __I  Ifx_ADC_TMADC_BND_STAT              STAT;                   /**< \brief 4, TMADC boundary status regsiter*/
       __IO Ifx_ADC_TMADC_BND_TRGCFG            TRGCFG;                 /**< \brief 8, TMADC boundary trigger configuration register, boundary register 0*/
} Ifx_ADC_TMADC_BND;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_BFL_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief BFL object */
typedef volatile struct _Ifx_ADC_TMADC_BFL
{
       __IO Ifx_ADC_TMADC_BFL_CFG               CFG;                    /**< \brief 0, TMADC boundary flag configuration register 0*/
       __I  Ifx_ADC_TMADC_BFL_STAT              STAT;                   /**< \brief 4, TMADC boundary flag status register 0*/
} Ifx_ADC_TMADC_BFL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_RSLT_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief RSLT object */
typedef volatile struct _Ifx_ADC_TMADC_RSLT
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_ADC_TMADC_RSLT_CFG              CFG;                    /**< \brief 4, TMADC configuration register, result register 0*/
} Ifx_ADC_TMADC_RSLT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_MRSLT_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MRSLT object */
typedef volatile struct _Ifx_ADC_TMADC_MRSLT
{
       __IO Ifx_ADC_TMADC_MRSLT_CFG             CFG;                    /**< \brief 0, TMADC configuration register, monitor channel 0  result register*/
} Ifx_ADC_TMADC_MRSLT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_SR_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SR object */
typedef volatile struct _Ifx_ADC_TMADC_SR
{
       __IO Ifx_ADC_TMADC_SR_CFG                CFG;                    /**< \brief 0, TMADC service request configuration register 0*/
} Ifx_ADC_TMADC_SR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW0_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW0 object */
typedef volatile struct _Ifx_ADC_TMADC_AW0
{
       __I  Ifx_ADC_TS                          TS[16];                 /**< \brief 0, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES[16];                /**< \brief 40, Result register 0*/
} Ifx_ADC_TMADC_AW0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW1_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW1 object */
typedef volatile struct _Ifx_ADC_TMADC_AW1
{
       __I  Ifx_ADC_TS                          TS0;                    /**< \brief 0, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES0;                   /**< \brief 4, Result register 0*/
       __I  Ifx_ADC_TS                          TS1;                    /**< \brief 8, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES1;                   /**< \brief C, Result register 0*/
       __I  Ifx_ADC_TS                          TS2;                    /**< \brief 10, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES2;                   /**< \brief 14, Result register 0*/
       __I  Ifx_ADC_TS                          TS3;                    /**< \brief 18, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES3;                   /**< \brief 1C, Result register 0*/
       __I  Ifx_ADC_TS                          TS4;                    /**< \brief 20, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES4;                   /**< \brief 24, Result register 0*/
       __I  Ifx_ADC_TS                          TS5;                    /**< \brief 28, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES5;                   /**< \brief 2C, Result register 0*/
       __I  Ifx_ADC_TS                          TS6;                    /**< \brief 30, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES6;                   /**< \brief 34, Result register 0*/
       __I  Ifx_ADC_TS                          TS7;                    /**< \brief 38, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES7;                   /**< \brief 3C, Result register 0*/
       __I  Ifx_ADC_TS                          TS8;                    /**< \brief 40, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES8;                   /**< \brief 44, Result register 0*/
       __I  Ifx_ADC_TS                          TS9;                    /**< \brief 48, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES9;                   /**< \brief 4C, Result register 0*/
       __I  Ifx_ADC_TS                          TS10;                   /**< \brief 50, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES10;                  /**< \brief 54, Result register 0*/
       __I  Ifx_ADC_TS                          TS11;                   /**< \brief 58, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES11;                  /**< \brief 5C, Result register 0*/
       __I  Ifx_ADC_TS                          TS12;                   /**< \brief 60, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES12;                  /**< \brief 64, Result register 0*/
       __I  Ifx_ADC_TS                          TS13;                   /**< \brief 68, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES13;                  /**< \brief 6C, Result register 0*/
       __I  Ifx_ADC_TS                          TS14;                   /**< \brief 70, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES14;                  /**< \brief 74, Result register 0*/
       __I  Ifx_ADC_TS                          TS15;                   /**< \brief 78, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES15;                  /**< \brief 7C, Result register 0*/
} Ifx_ADC_TMADC_AW1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW2_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW2 object */
typedef volatile struct _Ifx_ADC_TMADC_AW2
{
       __I  Ifx_ADC_TS                          TS0;                    /**< \brief 0, Time-stamp register 0*/
       __I  Ifx_ADC_RES                         RES0;                   /**< \brief 4, Result register 0*/
       __I  Ifx_ADC_RES                         RES1;                   /**< \brief 8, Result register 0*/
       __I  Ifx_ADC_RES                         RES2;                   /**< \brief C, Result register 0*/
       __I  Ifx_ADC_RES                         RES3;                   /**< \brief 10, Result register 0*/
       __I  Ifx_ADC_RES                         RES4;                   /**< \brief 14, Result register 0*/
       __I  Ifx_ADC_RES                         RES5;                   /**< \brief 18, Result register 0*/
       __I  Ifx_ADC_RES                         RES6;                   /**< \brief 1C, Result register 0*/
       __I  Ifx_UReg_8Bit                       reserved_20[32];        /**< \brief 20, \internal Reserved */
       __I  Ifx_ADC_TS                          TS7;                    /**< \brief 40, Time-stamp register 7*/
       __I  Ifx_ADC_RES                         RES7;                   /**< \brief 44, Result register 7*/
       __I  Ifx_ADC_RES                         RES8;                   /**< \brief 48, Result register 7*/
       __I  Ifx_ADC_RES                         RES9;                   /**< \brief 4C, Result register 7*/
       __I  Ifx_ADC_RES                         RES10;                  /**< \brief 50, Result register 7*/
       __I  Ifx_ADC_RES                         RES11;                  /**< \brief 54, Result register 7*/
       __I  Ifx_ADC_RES                         RES12;                  /**< \brief 58, Result register 7*/
       __I  Ifx_ADC_RES                         RES13;                  /**< \brief 5C, Result register 7*/
       __I  Ifx_ADC_TS                          TS14;                   /**< \brief 60, Time-stamp register 14*/
       __I  Ifx_ADC_RES                         RES14;                  /**< \brief 64, Result register 14*/
       __I  Ifx_ADC_RES                         RES15;                  /**< \brief 68, Result register 14*/
} Ifx_ADC_TMADC_AW2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_AW3_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief AW3 object */
typedef volatile struct _Ifx_ADC_TMADC_AW3
{
       __I  Ifx_ADC_RES                         RES0;                   /**< \brief 0, Result register 0*/
       __I  Ifx_ADC_RES                         RES1;                   /**< \brief 4, Result register 0*/
       __I  Ifx_ADC_RES                         RES2;                   /**< \brief 8, Result register 0*/
       __I  Ifx_ADC_RES                         RES3;                   /**< \brief C, Result register 0*/
       __I  Ifx_ADC_RES                         RES4;                   /**< \brief 10, Result register 0*/
} Ifx_ADC_TMADC_AW3;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_TMADC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TMADC object */
typedef volatile struct _Ifx_ADC_TMADC
{
       __IO Ifx_ADC_TMADC_MODCFG                MODCFG;                 /**< \brief 0, TMADC module configuration register*/
       __IO Ifx_ADC_TMADC_EMUXCFG               EMUXCFG;                /**< \brief 4, TMADC EMUX configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __O  Ifx_ADC_TMADC_SWTRCFG               SWTRCFG;                /**< \brief C, TMADC software trigger configuration register*/
       __IO Ifx_ADC_TMADC_CMATCFG               CMATCFG;                /**< \brief 10, TMADC connection matrix configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_ADC_TMADC_CH                    CH[16];                 /**< \brief 18, */
       __IO Ifx_ADC_TMADC_MCH                   MCH[2];                 /**< \brief D8, */
       __IO Ifx_ADC_TMADC_BND                   BND[2];                 /**< \brief E0, */
       __IO Ifx_ADC_TMADC_BFL                   BFL[2];                 /**< \brief F8, */
       __IO Ifx_ADC_TMADC_RSLT                  RSLT[16];               /**< \brief 108, */
       __IO Ifx_ADC_TMADC_MRSLT                 MRSLT[2];               /**< \brief 188, Monitor channel result register confguration*/
       __I  Ifx_ADC_TMADC_ERRF                  ERRF;                   /**< \brief 190, TMADC error event flag register*/
       __I  Ifx_ADC_TMADC_RESF                  RESF;                   /**< \brief 194, TMADC result event flag register*/
       __I  Ifx_ADC_TMADC_BNDF                  BNDF;                   /**< \brief 198, TMADC boundary event flag register*/
       __I  Ifx_UReg_8Bit                       reserved_19C[4];        /**< \brief 19C, \internal Reserved */
       __O  Ifx_ADC_TMADC_RESFSET               RESFSET;                /**< \brief 1A0, TMADC result event flag set register*/
       __O  Ifx_ADC_TMADC_ERRFCLR               ERRFCLR;                /**< \brief 1A4, TMADC error event flag clear register*/
       __O  Ifx_ADC_TMADC_RESFCLR               RESFCLR;                /**< \brief 1A8, TMADC result event flag clear register*/
       __O  Ifx_ADC_TMADC_BNDFCLR               BNDFCLR;                /**< \brief 1AC, TMADC boundary event flag clear register*/
       __IO Ifx_ADC_TMADC_SR                    SR[7];                  /**< \brief 1B0, */
       __I  Ifx_ADC_TMADC_MRES                  MRES[2];                /**< \brief 1CC, TMADC monitor channel 0  result register*/
       __I  Ifx_ADC_TMADC_MODSTAT               MODSTAT;                /**< \brief 1D4, TMADC module status register*/
       __IO Ifx_ADC_TMADC_BWDCFG                BWDCFG;                 /**< \brief 1D8, TMADC broken wire detection control register*/
       __IO Ifx_ADC_TMADC_CSD                   CSD[2];                 /**< \brief 1DC, TMADC converter self-diagnostics register core-0*/
       __I  Ifx_UReg_8Bit                       reserved_1E4[28];       /**< \brief 1E4, \internal Reserved */
       __IO Ifx_ADC_TMADC_AW0                   AW0;                    /**< \brief 200, */
       __IO Ifx_ADC_TMADC_AW1                   AW1;                    /**< \brief 280, */
       __IO Ifx_ADC_TMADC_AW2                   AW2;                    /**< \brief 300, */
       __IO Ifx_ADC_TMADC_AW3                   AW3;                    /**< \brief 36C, */
       __I  Ifx_UReg_8Bit                       reserved_380[1152];     /**< \brief 380, \internal Reserved */
} Ifx_ADC_TMADC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CDSP_DB_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DB object */
typedef volatile struct _Ifx_ADC_CDSP_DB
{
       __I  Ifx_ADC_CDSP_DB_STATUS              STATUS;                 /**< \brief 0, CDSP debug status register*/
       __IO Ifx_ADC_CDSP_DB_CMD                 CMD;                    /**< \brief 4, CDSP debug command register*/
       __IO Ifx_ADC_CDSP_DB_ADDR                ADDR;                   /**< \brief 8, CDSP debug address register*/
       __IO Ifx_ADC_CDSP_DB_DATA                DATA;                   /**< \brief C, CDSP debug data register*/
       __O  Ifx_ADC_CDSP_DB_RESET               RESET;                  /**< \brief 10, CDSP debug reset register*/
       __I  Ifx_UReg_8Bit                       reserved_14[12];        /**< \brief 14, \internal Reserved */
} Ifx_ADC_CDSP_DB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CDSP_DSP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DSP object */
typedef volatile struct _Ifx_ADC_CDSP_DSP
{
       Ifx_Strict_32Bit                           ICCM[768];              /**< \brief 0, Instruction closely coupled memory*/
       __I  Ifx_UReg_8Bit                       reserved_C00[1024];     /**< \brief C00, \internal Reserved */
       Ifx_Strict_32Bit                           DCCM[768];              /**< \brief 1000, Data closely coupled memory*/
       __IO Ifx_ADC_CDSP_DSP_DSPCFG             DSPCFG;                 /**< \brief 1C00, CDSP configuration of CDSP  0*/
       __IO Ifx_ADC_CDSP_DSP_BNDTRCFG           BNDTRCFG;               /**< \brief 1C04, CDSP boundary trigger configuration register 0*/
       __IO Ifx_ADC_CDSP_DSP_BNDCFG             BNDCFG;                 /**< \brief 1C08, CDSP boundary mode configuration register*/
       __I  Ifx_ADC_CDSP_DSP_BOUNDST            BOUNDST;                /**< \brief 1C0C, CDSP boundary status register 0*/
       __IO Ifx_ADC_CDSP_DSP_BOUNDSEL           BOUNDSEL;               /**< \brief 1C10, CDSP boundary select register 0*/
       __IO Ifx_ADC_CDSP_DSP_TSTRCFG            TSTRCFG;                /**< \brief 1C14, CDSP time stamp trigger configuration register 0*/
       __I  Ifx_ADC_CDSP_DSP_TSTMP              TSTMP;                  /**< \brief 1C18, CDSP time-stamp register 0*/
       __I  Ifx_ADC_CDSP_DSP_TSCNT              TSCNT;                  /**< \brief 1C1C, CDSP time-stamp counter 0*/
       __IO Ifx_ADC_CDSP_DSP_SRTRCFG            SRTRCFG;                /**< \brief 1C20, CDSP service request trigger configuration register*/
       __IO Ifx_ADC_CDSP_DSP_SRCFG              SRCFG;                  /**< \brief 1C24, CDSP service request configuration register*/
       __IO Ifx_ADC_CDSP_DSP_SWCFG              SWCFG;                  /**< \brief 1C28, CDSP software configuration register 0*/
       __I  Ifx_ADC_CDSP_DSP_INTIVAL            INTIVAL;                /**< \brief 1C2C, CDSP intermediate integration value*/
       __IO Ifx_ADC_CDSP_DSP_SWTRCFG            SWTRCFG;                /**< \brief 1C30, CDSP software trigger configuration register 0*/
       __O  Ifx_ADC_CDSP_DSP_CHERRCL            CHERRCL;                /**< \brief 1C34, CDSP channel error clear register 0*/
       __I  Ifx_ADC_CDSP_DSP_DSPST              DSPST;                  /**< \brief 1C38, CDSP status register*/
       __I  Ifx_ADC_CDSP_DSP_INPUTMON           INPUTMON;               /**< \brief 1C3C, CDSP input from DSADC, TMADC, EXMOD or CARMAG*/
       __I  Ifx_ADC_CDSP_DSP_RES                RES[3];                 /**< \brief 1C40, CDSP result register 0*/
       __I  Ifx_UReg_8Bit                       reserved_1C4C[948];     /**< \brief 1C4C, \internal Reserved */
} Ifx_ADC_CDSP_DSP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Adc_CDSP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CDSP object */
typedef volatile struct _Ifx_ADC_CDSP
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __O  Ifx_ADC_CDSP_GLOBRD                 GLOBRD;                 /**< \brief 4, CDSP global reset control*/
       __IO Ifx_ADC_CDSP_BNDCF                  BNDCF;                  /**< \brief 8, CDSP boudary flag event register*/
       __O  Ifx_ADC_CDSP_BNDCFCL                BNDCFCL;                /**< \brief C, CDSP boundary flag event clear*/
       __I  Ifx_ADC_CDSP_SLPST                  SLPST;                  /**< \brief 10, CDSP sleep status register*/
       __IO Ifx_ADC_CDSP_RESEV                  RESEV[3];               /**< \brief 14, CDSP event flag register 0*/
       __O  Ifx_ADC_CDSP_RESEVCLR               RESEVCLR[3];            /**< \brief 20, CDSP result event flag clear 0*/
       __I  Ifx_UReg_8Bit                       reserved_2C[148];       /**< \brief 2C, \internal Reserved */
       __IO Ifx_ADC_CDSP_GP                     GP[4];                  /**< \brief C0, CDSP input from general purpose register 0*/
       __IO Ifx_ADC_CDSP_WUERREV                WUERREV;                /**< \brief D0, CDSP wake up error flag register*/
       __O  Ifx_ADC_CDSP_WUERRCL                WUERRCL;                /**< \brief D4, CDSP wake up error event clear register*/
       __O  Ifx_ADC_CDSP_GLOBRCD                GLOBRCD;                /**< \brief D8, CDSP global run control register*/
       __O  Ifx_ADC_CDSP_GLOBHCD                GLOBHCD;                /**< \brief DC, CDSP global halt control register*/
       __I  Ifx_ADC_CDSP_GLOBRSD                GLOBRSD;                /**< \brief E0, CDSP global run status register*/
       __I  Ifx_ADC_CDSP_GLOBHSTD               GLOBHSTD;               /**< \brief E4, CDSP global halt status register*/
       __IO Ifx_ADC_CDSP_OCSCDSPA               OCSCDSPA;               /**< \brief E8, OCDS control and status register 0 for CDSP0-8*/
       __I  Ifx_UReg_8Bit                       reserved_EC[788];       /**< \brief EC, \internal Reserved */
       __IO Ifx_ADC_CDSP_DB                     DB[2];                  /**< \brief 400, */
       __I  Ifx_UReg_8Bit                       reserved_440[960];      /**< \brief 440, \internal Reserved */
       __IO Ifx_ADC_CDSP_DSP                    DSP[2];                 /**< \brief 800, */
} Ifx_ADC_CDSP;

/******************************************************************************/
/** \addtogroup IfxSfr_Adc_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief ADC object */
typedef volatile struct _Ifx_ADC
{
       __IO Ifx_ADC_CLC                         CLC;                    /**< \brief 0, Clock Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_ADC_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_ADC_PROT                        PROTSE;                 /**< \brief C, PROT Register Safe Endinit*/
       __IO Ifx_ADC_RESALLOC                    RESALLOC;               /**< \brief 10, */
       __I  Ifx_UReg_8Bit                       reserved_30[80];        /**< \brief 30, \internal Reserved */
       __IO Ifx_ADC_PROT                        PROTE[16];              /**< \brief 80, PROT Register Endinit*/
       __IO Ifx_ADC_ACCEN                       ACCEN[16];              /**< \brief C0, */
       __IO Ifx_ADC_RST                         RST[16];                /**< \brief 2C0, */
       __I  Ifx_UReg_8Bit                       reserved_380[1152];     /**< \brief 380, \internal Reserved */
       __IO Ifx_ADC_GLSRCFG                     GLSRCFG[4];             /**< \brief 800, ADC global service request configuration register*/
       __IO Ifx_ADC_GLALCFG                     GLALCFG[8];             /**< \brief 810, ADC global alarm configuration register*/
       __O  Ifx_ADC_GLALSET                     GLALSET;                /**< \brief 830, ADC global alarm set register*/
       __O  Ifx_ADC_GLSRSET                     GLSRSET;                /**< \brief 834, ADC global service request set register*/
       __IO Ifx_ADC_ETBFSEL                     ETBFSEL[3];             /**< \brief 838, ADC to eGTM boundary flag select register, cluster 0*/
       __I  Ifx_UReg_8Bit                       reserved_844[72];       /**< \brief 844, \internal Reserved */
       __IO Ifx_ADC_PDDCFG                      PDDCFG;                 /**< \brief 88C, ADC pull down diagnostics configuration register*/
       __IO Ifx_ADC_CLKEN                       CLKEN;                  /**< \brief 890, Clock enable for ADC resources*/
       __IO Ifx_ADC_SUPLLEV                     SUPLLEV;                /**< \brief 8A0, Supply level selection for ADC*/
       __IO Ifx_ADC_TMSMOD                      TMSMOD;                 /**< \brief 8A4, TMADC supervision module register*/
       __IO Ifx_ADC_OCSTM                       OCSTM;                  /**< \brief 8A8, OCDS control and status register for TMADC*/
       __I  Ifx_UReg_8Bit                       reserved_8AC[1876];     /**< \brief 8AC, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_1000[4096];    /**< \brief 1000, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_2000[122880];    /**< \brief 2000, \internal Reserved */
       __IO Ifx_ADC_TMADC                       TMADC[4];               /**< \brief 20000, */
       __I  Ifx_UReg_8Bit                       reserved_22000[645120];    /**< \brief 22000, \internal Reserved */
       __IO Ifx_ADC_CDSP                        CDSP;                   /**< \brief BF800, */
       __I  Ifx_UReg_8Bit                       reserved_C4000[131072];    /**< \brief C4000, \internal Reserved */
} Ifx_ADC;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXADC_REGDEF_H */
