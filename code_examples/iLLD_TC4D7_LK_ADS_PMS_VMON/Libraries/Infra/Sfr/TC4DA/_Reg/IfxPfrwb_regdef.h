/**
 * \file IfxPfrwb_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_NVM_PFRWB/V0.2.2.1.2
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Pfrwb_Registers Pfrwb Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Pfrwb_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Pfrwb_Registers
 * 
 * \defgroup IfxSfr_Pfrwb_Registers_union Register unions
 * \ingroup IfxSfr_Pfrwb_Registers
 * 
 * \defgroup IfxSfr_Pfrwb_Registers_struct Memory map
 * \ingroup IfxSfr_Pfrwb_Registers
 */
#ifndef IFXPFRWB_REGDEF_H
#define IFXPFRWB_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Pfrwb_Registers_Bitfields
 * \{  */
/** \brief Double bit error address buffer x */
typedef struct _Ifx_PFRWB_UR_DBABX_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:16;         /**< \brief [20:5] Address (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [26:21] \internal Reserved */
    __I  Ifx_Strict_32Bit ECF:1;           /**< \brief [27:27] Erase Counter Flag (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [30:28] \internal Reserved */
    __I  Ifx_Strict_32Bit VLD:1;           /**< \brief [31:31] Valid (rh) */
} Ifx_PFRWB_UR_DBABX_Bits;

/** \brief ECC read register */
typedef struct _Ifx_PFRWB_UR_ECCR_Bits
{
    __I  Ifx_Strict_32Bit RCODE:22;        /**< \brief [21:0] Error Correction Code from the last read. (rh) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_PFRWB_UR_ECCR_Bits;

/** \brief ECC status register */
typedef struct _Ifx_PFRWB_UR_ECCS_Bits
{
    __I  Ifx_Strict_32Bit SBER:1;          /**< \brief [0:0] Single Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit DBER:1;          /**< \brief [1:1] Double Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __I  Ifx_Strict_32Bit UCER:1;          /**< \brief [3:3] Uncorrectable ECC Error (rh) */
    __I  Ifx_Strict_32Bit ALL0:1;          /**< \brief [4:4] All 0 bit error (rh) */
    __I  Ifx_Strict_32Bit ALL1:1;          /**< \brief [5:5] All 1 bit error (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __I  Ifx_Strict_32Bit ANER:1;          /**< \brief [8:8] Any ECC error (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __I  Ifx_Strict_32Bit ASBER:1;         /**< \brief [16:16] Accumulated Single Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit ADBER:1;         /**< \brief [17:17] Accumulated Double Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [18:18] \internal Reserved */
    __I  Ifx_Strict_32Bit AUCER:1;         /**< \brief [19:19] Accumulated Uncorrectable ECC Error (rh) */
    __I  Ifx_Strict_32Bit AALL0:1;         /**< \brief [20:20] Acumulated all 0 bit error (rh) */
    __I  Ifx_Strict_32Bit AALL1:1;         /**< \brief [21:21] Accumulated all 1 bit error (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [23:22] \internal Reserved */
    __I  Ifx_Strict_32Bit AANER:1;         /**< \brief [24:24] Accumulated Any ECC error (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_PFRWB_UR_ECCS_Bits;

/** \brief PFRWB FLASH configuration register 2 */
typedef struct _Ifx_PFRWB_UR_FLASHCON2_Bits
{
    __IO Ifx_Strict_32Bit MARSEL:1;        /**< \brief [0:0] Margin Read Selection (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit HMAR:1;          /**< \brief [2:2] Hard Margin Selection (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [7:3] \internal Reserved */
    __IO Ifx_Strict_32Bit ECCCORDIS:1;     /**< \brief [8:8] ECC correction disable (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [9:9] \internal Reserved */
    __IO Ifx_Strict_32Bit MASKUECC:1;      /**< \brief [10:10] Mask PFLASH ECC uncorrectable errors (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [11:11] \internal Reserved */
    __IO Ifx_Strict_32Bit TDISUDATA:1;     /**< \brief [12:12] Trap disable and uncorrected data (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __IO Ifx_Strict_32Bit RECDIS:1;        /**< \brief [16:16] Address Buffer Record Disable (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [23:17] \internal Reserved */
    __O  Ifx_Strict_32Bit ECCSCLR:1;       /**< \brief [24:24] Clear ECCS status register (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [25:25] \internal Reserved */
    __O  Ifx_Strict_32Bit SBABCLR:1;       /**< \brief [26:26] Clear SBAB record registers (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [27:27] \internal Reserved */
    __O  Ifx_Strict_32Bit DBABCLR:1;       /**< \brief [28:28] Clear DBAB record registers (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __O  Ifx_Strict_32Bit UBABCLR:1;       /**< \brief [30:30] Clear UBAB record registers (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_PFRWB_UR_FLASHCON2_Bits;

/** \brief PFRWB FLASH configuration register 3 */
typedef struct _Ifx_PFRWB_UR_FLASHCON3_Bits
{
    __IO Ifx_Strict_32Bit ECCERRINJ:1;     /**< \brief [0:0] ECC Error Injection (rw) */
    __IO Ifx_Strict_32Bit EDCERRINJ:1;     /**< \brief [1:1] EDC Error Injection (rw) */
    __IO Ifx_Strict_32Bit SBABERRINJ:1;    /**< \brief [2:2] SBAB Error Injection (rw) */
    __IO Ifx_Strict_32Bit DBABERRINJ:1;    /**< \brief [3:3] DBAB Error Injection (rw) */
    __IO Ifx_Strict_32Bit UBABERRINJ:1;    /**< \brief [4:4] UBAB Error Injection (rw) */
    __IO Ifx_Strict_32Bit SBERERRINJ:1;    /**< \brief [5:5] ECC Single Bit error error injection (rw) */
    __IO Ifx_Strict_32Bit DBERERRINJ:1;    /**< \brief [6:6] ECC Double Bit error error injection (rw) */
    __IO Ifx_Strict_32Bit MISRERRRINJ:1;    /**< \brief [7:7] MISR error injection (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_PFRWB_UR_FLASHCON3_Bits;

/** \brief Single bit error address buffer x */
typedef struct _Ifx_PFRWB_UR_SBABX_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:16;         /**< \brief [20:5] Address (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [26:21] \internal Reserved */
    __I  Ifx_Strict_32Bit ECF:1;           /**< \brief [27:27] Erase Counter Flag (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [30:28] \internal Reserved */
    __I  Ifx_Strict_32Bit VLD:1;           /**< \brief [31:31] Valid (rh) */
} Ifx_PFRWB_UR_SBABX_Bits;

/** \brief Uncorrectable error address buffer x */
typedef struct _Ifx_PFRWB_UR_UBABX_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:16;         /**< \brief [20:5] Address (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [26:21] \internal Reserved */
    __I  Ifx_Strict_32Bit ECF:1;           /**< \brief [27:27] Erase Counter Flag (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [30:28] \internal Reserved */
    __I  Ifx_Strict_32Bit VLD:1;           /**< \brief [31:31] Valid (rh) */
} Ifx_PFRWB_UR_UBABX_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_pfrwb_Registers_union
 * \{   */
/** \brief Double bit error address buffer x   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_DBABX_Bits B;             /**< \brief Bitfield access */
} Ifx_PFRWB_UR_DBABX;

/** \brief ECC read register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_ECCR_Bits B;              /**< \brief Bitfield access */
} Ifx_PFRWB_UR_ECCR;

/** \brief ECC status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_ECCS_Bits B;              /**< \brief Bitfield access */
} Ifx_PFRWB_UR_ECCS;

/** \brief PFRWB FLASH configuration register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_FLASHCON2_Bits B;         /**< \brief Bitfield access */
} Ifx_PFRWB_UR_FLASHCON2;

/** \brief PFRWB FLASH configuration register 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_FLASHCON3_Bits B;         /**< \brief Bitfield access */
} Ifx_PFRWB_UR_FLASHCON3;

/** \brief Single bit error address buffer x   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_SBABX_Bits B;             /**< \brief Bitfield access */
} Ifx_PFRWB_UR_SBABX;

/** \brief Uncorrectable error address buffer x   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PFRWB_UR_UBABX_Bits B;             /**< \brief Bitfield access */
} Ifx_PFRWB_UR_UBABX;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pfrwb_UR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief UR object */
typedef volatile struct _Ifx_PFRWB_UR
{
       __IO Ifx_PFRWB_UR_FLASHCON2              FLASHCON2;              /**< \brief 0, PFRWB FLASH configuration register 2*/
       __IO Ifx_PFRWB_UR_FLASHCON3              FLASHCON3;              /**< \brief 4, PFRWB FLASH configuration register 3*/
       __I  Ifx_UReg_8Bit                       reserved_8[8184];       /**< \brief 8, \internal Reserved */
       __I  Ifx_PFRWB_UR_ECCR                   ECCR;                   /**< \brief 2000, ECC read register*/
       __I  Ifx_PFRWB_UR_ECCS                   ECCS;                   /**< \brief 2004, ECC status register*/
       __I  Ifx_UReg_8Bit                       reserved_2008[120];     /**< \brief 2008, \internal Reserved */
       __I  Ifx_PFRWB_UR_SBABX                  SBABX[17];              /**< \brief 2080, Single bit error address buffer x*/
       __I  Ifx_UReg_8Bit                       reserved_20C4[60];      /**< \brief 20C4, \internal Reserved */
       __I  Ifx_PFRWB_UR_DBABX                  DBABX[2];               /**< \brief 2100, Double bit error address buffer x*/
       __I  Ifx_UReg_8Bit                       reserved_2108[120];     /**< \brief 2108, \internal Reserved */
       __I  Ifx_PFRWB_UR_UBABX                  UBABX[1];               /**< \brief 2180, Uncorrectable error address buffer x*/
       __I  Ifx_UReg_8Bit                       reserved_2184[12];      /**< \brief 2184, \internal Reserved */
} Ifx_PFRWB_UR;

/******************************************************************************/
/** \addtogroup IfxSfr_Pfrwb_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PFRWB object */
typedef volatile struct _Ifx_PFRWB
{
       __IO Ifx_PFRWB_UR                        UR;                     /**< \brief 0, MISR Seed for PFRWB bank*/
       __I  Ifx_UReg_8Bit                       reserved_2190[24176];    /**< \brief 2190, \internal Reserved */
} Ifx_PFRWB;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPFRWB_REGDEF_H */
