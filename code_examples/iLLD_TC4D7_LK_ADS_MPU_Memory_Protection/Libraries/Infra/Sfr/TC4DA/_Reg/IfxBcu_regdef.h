/**
 * \file IfxBcu_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_FPI/V13.1.1.0.3
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Bcu_Registers Bcu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Bcu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Bcu_Registers
 * 
 * \defgroup IfxSfr_Bcu_Registers_union Register unions
 * \ingroup IfxSfr_Bcu_Registers
 * 
 * \defgroup IfxSfr_Bcu_Registers_struct Memory map
 * \ingroup IfxSfr_Bcu_Registers
 */
#ifndef IFXBCU_REGDEF_H
#define IFXBCU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Bcu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_BCU_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_BCU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_BCU_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_BCU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_BCU_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_BCU_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_BCU_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_BCU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_BCU_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_BCU_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_BCU_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_BCU_ACCEN_WRB_FPI_Bits;

/** \brief BCU EDC alarm clear register 0 */
typedef struct _Ifx_BCU_ALCLR_Bits
{
    __O  Ifx_UReg_32Bit CLR00:1;           /**< \brief [0:0] Clear alarm 00 (w) */
    __O  Ifx_UReg_32Bit CLR01:1;           /**< \brief [1:1] Clear alarm 01 (w) */
    __O  Ifx_UReg_32Bit CLR02:1;           /**< \brief [2:2] Clear alarm 02 (w) */
    __O  Ifx_UReg_32Bit CLR03:1;           /**< \brief [3:3] Clear alarm 03 (w) */
    __O  Ifx_UReg_32Bit CLR04:1;           /**< \brief [4:4] Clear alarm 04 (w) */
    __O  Ifx_UReg_32Bit CLR05:1;           /**< \brief [5:5] Clear alarm 05 (w) */
    __O  Ifx_UReg_32Bit CLR06:1;           /**< \brief [6:6] Clear alarm 06 (w) */
    __O  Ifx_UReg_32Bit CLR07:1;           /**< \brief [7:7] Clear alarm 07 (w) */
    __O  Ifx_UReg_32Bit CLR08:1;           /**< \brief [8:8] Clear alarm 08 (w) */
    __O  Ifx_UReg_32Bit CLR09:1;           /**< \brief [9:9] Clear alarm 09 (w) */
    __O  Ifx_UReg_32Bit CLR10:1;           /**< \brief [10:10] Clear alarm 10 (w) */
    __O  Ifx_UReg_32Bit CLR11:1;           /**< \brief [11:11] Clear alarm 11 (w) */
    __O  Ifx_UReg_32Bit CLR12:1;           /**< \brief [12:12] Clear alarm 12 (w) */
    __O  Ifx_UReg_32Bit CLR13:1;           /**< \brief [13:13] Clear alarm 13 (w) */
    __O  Ifx_UReg_32Bit CLR14:1;           /**< \brief [14:14] Clear alarm 14 (w) */
    __O  Ifx_UReg_32Bit CLR15:1;           /**< \brief [15:15] Clear alarm 15 (w) */
    __O  Ifx_UReg_32Bit CLR16:1;           /**< \brief [16:16] Clear alarm 16 (w) */
    __O  Ifx_UReg_32Bit CLR17:1;           /**< \brief [17:17] Clear alarm 17 (w) */
    __O  Ifx_UReg_32Bit CLR18:1;           /**< \brief [18:18] Clear alarm 18 (w) */
    __O  Ifx_UReg_32Bit CLR19:1;           /**< \brief [19:19] Clear alarm 19 (w) */
    __O  Ifx_UReg_32Bit CLR20:1;           /**< \brief [20:20] Clear alarm 20 (w) */
    __O  Ifx_UReg_32Bit CLR21:1;           /**< \brief [21:21] Clear alarm 21 (w) */
    __O  Ifx_UReg_32Bit CLR22:1;           /**< \brief [22:22] Clear alarm 22 (w) */
    __O  Ifx_UReg_32Bit CLR23:1;           /**< \brief [23:23] Clear alarm 23 (w) */
    __O  Ifx_UReg_32Bit CLR24:1;           /**< \brief [24:24] Clear alarm 24 (w) */
    __O  Ifx_UReg_32Bit CLR25:1;           /**< \brief [25:25] Clear alarm 25 (w) */
    __O  Ifx_UReg_32Bit CLR26:1;           /**< \brief [26:26] Clear alarm 26 (w) */
    __O  Ifx_UReg_32Bit CLR27:1;           /**< \brief [27:27] Clear alarm 27 (w) */
    __O  Ifx_UReg_32Bit CLR28:1;           /**< \brief [28:28] Clear alarm 28 (w) */
    __O  Ifx_UReg_32Bit CLR29:1;           /**< \brief [29:29] Clear alarm 29 (w) */
    __O  Ifx_UReg_32Bit CLR30:1;           /**< \brief [30:30] Clear alarm 30 (w) */
    __O  Ifx_UReg_32Bit CLR31:1;           /**< \brief [31:31] Clear alarm 31 (w) */
} Ifx_BCU_ALCLR_Bits;

/** \brief BCU EDC alarm control register */
typedef struct _Ifx_BCU_ALCTRL_Bits
{
    __I  Ifx_UReg_32Bit ALOV:1;            /**< \brief [0:0] Alarm overflow (rh) */
    __O  Ifx_UReg_32Bit ALOVCLR:1;         /**< \brief [1:1] Alarm overflow clear (w) */
    __I  Ifx_UReg_32Bit PALOV:1;           /**< \brief [2:2] Parallel alarm overflow (rh) */
    __O  Ifx_UReg_32Bit PALOVCLR:1;        /**< \brief [3:3] Parallel alarm overflow clear (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_BCU_ALCTRL_Bits;

/** \brief BCU EDC alarm status register 0. */
typedef struct _Ifx_BCU_ALSTAT_Bits
{
    __I  Ifx_UReg_32Bit AL00:1;            /**< \brief [0:0] Alarm 00 (rh) */
    __I  Ifx_UReg_32Bit AL01:1;            /**< \brief [1:1] Alarm 01 (rh) */
    __I  Ifx_UReg_32Bit AL02:1;            /**< \brief [2:2] Alarm 02 (rh) */
    __I  Ifx_UReg_32Bit AL03:1;            /**< \brief [3:3] Alarm 03 (rh) */
    __I  Ifx_UReg_32Bit AL04:1;            /**< \brief [4:4] Alarm 04 (rh) */
    __I  Ifx_UReg_32Bit AL05:1;            /**< \brief [5:5] Alarm 05 (rh) */
    __I  Ifx_UReg_32Bit AL06:1;            /**< \brief [6:6] Alarm 06 (rh) */
    __I  Ifx_UReg_32Bit AL07:1;            /**< \brief [7:7] Alarm 07 (rh) */
    __I  Ifx_UReg_32Bit AL08:1;            /**< \brief [8:8] Alarm 08 (rh) */
    __I  Ifx_UReg_32Bit AL09:1;            /**< \brief [9:9] Alarm 09 (rh) */
    __I  Ifx_UReg_32Bit AL10:1;            /**< \brief [10:10] Alarm 10 (rh) */
    __I  Ifx_UReg_32Bit AL11:1;            /**< \brief [11:11] Alarm 11 (rh) */
    __I  Ifx_UReg_32Bit AL12:1;            /**< \brief [12:12] Alarm 12 (rh) */
    __I  Ifx_UReg_32Bit AL13:1;            /**< \brief [13:13] Alarm 13 (rh) */
    __I  Ifx_UReg_32Bit AL14:1;            /**< \brief [14:14] Alarm 14 (rh) */
    __I  Ifx_UReg_32Bit AL15:1;            /**< \brief [15:15] Alarm 15 (rh) */
    __I  Ifx_UReg_32Bit AL16:1;            /**< \brief [16:16] Alarm 16 (rh) */
    __I  Ifx_UReg_32Bit AL17:1;            /**< \brief [17:17] Alarm 17 (rh) */
    __I  Ifx_UReg_32Bit AL18:1;            /**< \brief [18:18] Alarm 18 (rh) */
    __I  Ifx_UReg_32Bit AL19:1;            /**< \brief [19:19] Alarm 19 (rh) */
    __I  Ifx_UReg_32Bit AL20:1;            /**< \brief [20:20] Alarm 20 (rh) */
    __I  Ifx_UReg_32Bit AL21:1;            /**< \brief [21:21] Alarm 21 (rh) */
    __I  Ifx_UReg_32Bit AL22:1;            /**< \brief [22:22] Alarm 22 (rh) */
    __I  Ifx_UReg_32Bit AL23:1;            /**< \brief [23:23] Alarm 23 (rh) */
    __I  Ifx_UReg_32Bit AL24:1;            /**< \brief [24:24] Alarm 24 (rh) */
    __I  Ifx_UReg_32Bit AL25:1;            /**< \brief [25:25] Alarm 25 (rh) */
    __I  Ifx_UReg_32Bit AL26:1;            /**< \brief [26:26] Alarm 26 (rh) */
    __I  Ifx_UReg_32Bit AL27:1;            /**< \brief [27:27] Alarm 27 (rh) */
    __I  Ifx_UReg_32Bit AL28:1;            /**< \brief [28:28] Alarm 28 (rh) */
    __I  Ifx_UReg_32Bit AL29:1;            /**< \brief [29:29] Alarm 29 (rh) */
    __I  Ifx_UReg_32Bit AL30:1;            /**< \brief [30:30] Alarm 30 (rh) */
    __I  Ifx_UReg_32Bit AL31:1;            /**< \brief [31:31] Alarm 31 (rh) */
} Ifx_BCU_ALSTAT_Bits;

/** \brief BCU control register */
typedef struct _Ifx_BCU_CON_Bits
{
    __IO Ifx_UReg_32Bit TOUT:16;           /**< \brief [15:0] BCU timeout value (rw) */
    __IO Ifx_UReg_32Bit DBG:1;             /**< \brief [16:16] BCU Debug Trace Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [19:17] \internal Reserved */
    __IO Ifx_UReg_32Bit SPC:12;            /**< \brief [31:20] Starvation period control (rw) */
} Ifx_BCU_CON_Bits;

/** \brief CSAV status register */
typedef struct _Ifx_BCU_CSAVSTAT_Bits
{
    __I  Ifx_UReg_32Bit CSAV:2;            /**< \brief [1:0] Status of the CSAV signals (r) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_BCU_CSAVSTAT_Bits;

/** \brief BCU error address capture register */
typedef struct _Ifx_BCU_EADD_Bits
{
    __IO Ifx_UReg_32Bit FPIADR:32;         /**< \brief [31:0] Captured FPI  address - FPIADR (rwh) */
} Ifx_BCU_EADD_Bits;

/** \brief BCU error control capture register */
typedef struct _Ifx_BCU_ECON_Bits
{
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [2:0] FPI virtual machine information (rwh) */
    __IO Ifx_UReg_32Bit VM_VALID:1;        /**< \brief [3:3] FPI virtual machine information valid signal (rwh) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [6:4] FPI Protection Set Information (rwh) */
    __IO Ifx_UReg_32Bit PRS_VALID:1;       /**< \brief [7:7] FPI protection set information valid signal (rwh) */
    __IO Ifx_UReg_32Bit CS_VALID:1;        /**< \brief [8:8] FPI CS valid signal (rwh) */
    __IO Ifx_UReg_32Bit ERRCNT:5;          /**< \brief [13:9] FPI error counter (rwh) */
    __IO Ifx_UReg_32Bit TOUT:1;            /**< \brief [14:14] State of FPI timeout signal (rwh) */
    __IO Ifx_UReg_32Bit RDY:1;             /**< \brief [15:15] State of FPI ready signal (rwh) */
    __IO Ifx_UReg_32Bit ABT:1;             /**< \brief [16:16] State of FPI abort signal (rwh) */
    __IO Ifx_UReg_32Bit ACK:2;             /**< \brief [18:17] State of FPI acknowledge signals (rwh) */
    __IO Ifx_UReg_32Bit SVM:1;             /**< \brief [19:19] State of FPI supervisor mode signal (rwh) */
    __IO Ifx_UReg_32Bit WRN:1;             /**< \brief [20:20] State of FPI  write signal (rwh) */
    __IO Ifx_UReg_32Bit RDN:1;             /**< \brief [21:21] State of FPI  read signal (rwh) */
    __IO Ifx_UReg_32Bit TAG:6;             /**< \brief [27:22] FPI master agent function TAG-ID (rwh) */
    __IO Ifx_UReg_32Bit OPC:4;             /**< \brief [31:28] FPI operation code signals (rwh) */
} Ifx_BCU_ECON_Bits;

/** \brief BCU error data capture register */
typedef struct _Ifx_BCU_EDAT_Bits
{
    __IO Ifx_UReg_32Bit FPIDAT:32;         /**< \brief [31:0] Captured FPI  Data - FPIDAT (rwh) */
} Ifx_BCU_EDAT_Bits;

/** \brief FPI error generation control register */
typedef struct _Ifx_BCU_FEGEN_Bits
{
    __IO Ifx_UReg_32Bit SEDM:3;            /**< \brief [2:0] SEDM (slave encoder) (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit MEDM:3;            /**< \brief [10:8] MEDM (master encoder) type of error (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit EN:3;              /**< \brief [18:16] Enable signal type of error (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit BCU:2;             /**< \brief [25:24] BCU type of error (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_BCU_FEGEN_Bits;

/** \brief Module identification register */
typedef struct _Ifx_BCU_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number - MOD_NUM (r) */
} Ifx_BCU_ID_Bits;

/** \brief OCDS control and status register */
typedef struct _Ifx_BCU_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger set for OTGB0/1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 bus select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB write protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_BCU_OCS_Bits;

/** \brief Master agent priority register high */
typedef struct _Ifx_BCU_PRIOH_Bits
{
    __IO Ifx_UReg_32Bit MASTER8:4;         /**< \brief [3:0] Master 8 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER9:4;         /**< \brief [7:4] Master 9 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER10:4;        /**< \brief [11:8] Master 10 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER11:4;        /**< \brief [15:12] Master 11 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER12:4;        /**< \brief [19:16] Master 12 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER13:4;        /**< \brief [23:20] Master 13 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER14:4;        /**< \brief [27:24] Master 14 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER15:4;        /**< \brief [31:28] Master 15 Priority (rw) */
} Ifx_BCU_PRIOH_Bits;

/** \brief Master agent priority register low */
typedef struct _Ifx_BCU_PRIOL_Bits
{
    __IO Ifx_UReg_32Bit MASTER0:4;         /**< \brief [3:0] Master 0 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER1:4;         /**< \brief [7:4] Master 1 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER2:4;         /**< \brief [11:8] Master 2 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER3:4;         /**< \brief [15:12] Master 3 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER4:4;         /**< \brief [19:16] Master 4 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER5:4;         /**< \brief [23:20] Master 5 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER6:4;         /**< \brief [27:24] Master 6 Priority (rw) */
    __IO Ifx_UReg_32Bit MASTER7:4;         /**< \brief [31:28] Master 7 Priority (rw) */
} Ifx_BCU_PRIOL_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_BCU_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_BCU_PROT_Bits;

/** \brief BCU performance event select */
typedef struct _Ifx_BCU_PSELECT_Bits
{
    __IO Ifx_UReg_32Bit PSEL:4;            /**< \brief [3:0] TS16_BCU_performance_events[15] selector (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PMAR:4;            /**< \brief [11:8] Parallel master agent requests (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_BCU_PSELECT_Bits;

/** \brief ARP 0 cycle count capture register */
typedef struct _Ifx_BCU_QOSARP_CCC_Bits
{
    __IO Ifx_UReg_32Bit CAPTURE:16;        /**< \brief [15:0] ARP x captured cycle count (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_BCU_QOSARP_CCC_Bits;

/** \brief ARP 0 current counter value register */
typedef struct _Ifx_BCU_QOSARP_CCV_Bits
{
    __I  Ifx_UReg_32Bit COUNTER:20;        /**< \brief [19:0] ARP x cycle count (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_BCU_QOSARP_CCV_Bits;

/** \brief ARP 0 control register */
typedef struct _Ifx_BCU_QOSARP_CTRL_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] ARPx enable (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [29:1] \internal Reserved */
    __O  Ifx_UReg_32Bit CLR:1;             /**< \brief [30:30] ARPx status clear (w) */
    __I  Ifx_UReg_32Bit STAT:1;            /**< \brief [31:31] ARPx status (rh) */
} Ifx_BCU_QOSARP_CTRL_Bits;

/** \brief ARP 0 TAG-ID assignment register A */
typedef struct _Ifx_BCU_QOSARP_TAGIDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
} Ifx_BCU_QOSARP_TAGIDA_Bits;

/** \brief ARP 0 TAG-ID assignment register B */
typedef struct _Ifx_BCU_QOSARP_TAGIDB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Bit controls the assignment of TAG-ID q to ARP 0 (rw) */
} Ifx_BCU_QOSARP_TAGIDB_Bits;

/** \brief ARP 0 threshold register */
typedef struct _Ifx_BCU_QOSARP_THR_Bits
{
    __IO Ifx_UReg_32Bit THV:16;            /**< \brief [15:0] ARP x threshold value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_BCU_QOSARP_THR_Bits;

/** \brief ARP 0 VM assignment register */
typedef struct _Ifx_BCU_QOSARP_VM_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Bit controls the assignment of VM-ID q to ARP 0 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_BCU_QOSARP_VM_Bits;

/** \brief QoS time interval control register */
typedef struct _Ifx_BCU_QOSICTRL_Bits
{
    __IO Ifx_UReg_32Bit QOSINT:16;         /**< \brief [15:0] QoS time interval (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [30:16] \internal Reserved */
    __IO Ifx_UReg_32Bit QOSEN:1;           /**< \brief [31:31] QoS enable (rw) */
} Ifx_BCU_QOSICTRL_Bits;

/** \brief QoS time interval counter status */
typedef struct _Ifx_BCU_QOSISTAT_Bits
{
    __I  Ifx_UReg_32Bit QOSICNT:20;        /**< \brief [19:0] QoS time interval counter status (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_BCU_QOSISTAT_Bits;

/** \brief QoS master agent  0 control register */
typedef struct _Ifx_BCU_QOSM_CTRL_Bits
{
    __IO Ifx_UReg_32Bit MICC:15;           /**< \brief [14:0] Master agent interconnnect cycle count (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit MRD:11;            /**< \brief [26:16] Master agent request delay (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [29:27] \internal Reserved */
    __O  Ifx_UReg_32Bit MSBCLR:1;          /**< \brief [30:30] QoS master agent sticky bit clear (w) */
    __IO Ifx_UReg_32Bit MEN:1;             /**< \brief [31:31] Master agent enable (rw) */
} Ifx_BCU_QOSM_CTRL_Bits;

/** \brief QoS master agent 0 status register */
typedef struct _Ifx_BCU_QOSM_STAT_Bits
{
    __I  Ifx_UReg_32Bit MCNT:19;           /**< \brief [18:0] Master agent cycle counter (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [29:19] \internal Reserved */
    __I  Ifx_UReg_32Bit MSB:1;             /**< \brief [30:30] QoS master agent sticky bit (rh) */
    __I  Ifx_UReg_32Bit MSTAT:1;           /**< \brief [31:31] Master agent status (rh) */
} Ifx_BCU_QOSM_STAT_Bits;

/** \brief Round-robin group control */
typedef struct _Ifx_BCU_RRCTRL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RR8:3;             /**< \brief [3:1] RR Group 8 Priority Round Share (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [16:4] \internal Reserved */
    __IO Ifx_UReg_32Bit RR4:3;             /**< \brief [19:17] RR Group 4  Priority Round Share (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_BCU_RRCTRL_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_bcu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_BCU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_BCU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_BCU_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_BCU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_BCU_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_BCU_ACCEN_WRB_FPI;

/** \brief BCU EDC alarm clear register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ALCLR_Bits B;                  /**< \brief Bitfield access */
} Ifx_BCU_ALCLR;

/** \brief BCU EDC alarm control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ALCTRL_Bits B;                 /**< \brief Bitfield access */
} Ifx_BCU_ALCTRL;

/** \brief BCU EDC alarm status register 0.   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ALSTAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_BCU_ALSTAT;

/** \brief BCU control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_CON_Bits B;                    /**< \brief Bitfield access */
} Ifx_BCU_CON;

/** \brief CSAV status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_CSAVSTAT_Bits B;               /**< \brief Bitfield access */
} Ifx_BCU_CSAVSTAT;

/** \brief BCU error address capture register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_EADD_Bits B;                   /**< \brief Bitfield access */
} Ifx_BCU_EADD;

/** \brief BCU error control capture register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ECON_Bits B;                   /**< \brief Bitfield access */
} Ifx_BCU_ECON;

/** \brief BCU error data capture register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_EDAT_Bits B;                   /**< \brief Bitfield access */
} Ifx_BCU_EDAT;

/** \brief FPI error generation control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_FEGEN_Bits B;                  /**< \brief Bitfield access */
} Ifx_BCU_FEGEN;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_BCU_ID;

/** \brief OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_BCU_OCS;

/** \brief Master agent priority register high   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_PRIOH_Bits B;                  /**< \brief Bitfield access */
} Ifx_BCU_PRIOH;

/** \brief Master agent priority register low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_PRIOL_Bits B;                  /**< \brief Bitfield access */
} Ifx_BCU_PRIOL;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_BCU_PROT;

/** \brief BCU performance event select   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_PSELECT_Bits B;                /**< \brief Bitfield access */
} Ifx_BCU_PSELECT;

/** \brief ARP 0 cycle count capture register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_CCC_Bits B;             /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_CCC;

/** \brief ARP 0 current counter value register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_CCV_Bits B;             /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_CCV;

/** \brief ARP 0 control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_CTRL_Bits B;            /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_CTRL;

/** \brief ARP 0 TAG-ID assignment register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_TAGIDA_Bits B;          /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_TAGIDA;

/** \brief ARP 0 TAG-ID assignment register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_TAGIDB_Bits B;          /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_TAGIDB;

/** \brief ARP 0 threshold register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_THR_Bits B;             /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_THR;

/** \brief ARP 0 VM assignment register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSARP_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_BCU_QOSARP_VM;

/** \brief QoS time interval control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSICTRL_Bits B;               /**< \brief Bitfield access */
} Ifx_BCU_QOSICTRL;

/** \brief QoS time interval counter status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSISTAT_Bits B;               /**< \brief Bitfield access */
} Ifx_BCU_QOSISTAT;

/** \brief QoS master agent  0 control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSM_CTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_BCU_QOSM_CTRL;

/** \brief QoS master agent 0 status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_QOSM_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_BCU_QOSM_STAT;

/** \brief Round-robin group control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_BCU_RRCTRL_Bits B;                 /**< \brief Bitfield access */
} Ifx_BCU_RRCTRL;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Bcu_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_BCU_ACCEN
{
       __IO Ifx_BCU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_BCU_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_BCU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_BCU_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_BCU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_BCU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
} Ifx_BCU_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Bcu_QOSM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief QOSM object */
typedef volatile struct _Ifx_BCU_QOSM
{
       __IO Ifx_BCU_QOSM_CTRL                   CTRL;                   /**< \brief 0, QoS master agent  0 control register*/
       __I  Ifx_BCU_QOSM_STAT                   STAT;                   /**< \brief 4, QoS master agent 0 status register*/
} Ifx_BCU_QOSM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Bcu_QOSARP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief QOSARP object */
typedef volatile struct _Ifx_BCU_QOSARP
{
       __IO Ifx_BCU_QOSARP_TAGIDA               TAGIDA;                 /**< \brief 0, ARP 0 TAG-ID assignment register A*/
       __IO Ifx_BCU_QOSARP_TAGIDB               TAGIDB;                 /**< \brief 4, ARP 0 TAG-ID assignment register B*/
       __IO Ifx_BCU_QOSARP_VM                   VM;                     /**< \brief 8, ARP 0 VM assignment register*/
       __IO Ifx_BCU_QOSARP_THR                  THR;                    /**< \brief C, ARP 0 threshold register*/
       __IO Ifx_BCU_QOSARP_CTRL                 CTRL;                   /**< \brief 10, ARP 0 control register*/
       __IO Ifx_BCU_QOSARP_CCC                  CCC;                    /**< \brief 14, ARP 0 cycle count capture register*/
       __I  Ifx_BCU_QOSARP_CCV                  CCV;                    /**< \brief 18, ARP 0 current counter value register*/
} Ifx_BCU_QOSARP;

/******************************************************************************/
/** \addtogroup IfxSfr_Bcu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief BCU object */
typedef volatile struct _Ifx_BCU
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_BCU_OCS                         OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_BCU_ID                          ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_BCU_PROT                        PROTE;                  /**< \brief C, PROT register endinit*/
       __IO Ifx_BCU_PROT                        PROTSE;                 /**< \brief 10, PROT register safe endinit (CS)*/
       __IO Ifx_BCU_ACCEN                       ACCEN;                  /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_2C[4];         /**< \brief 2C, \internal Reserved */
       __IO Ifx_BCU_RRCTRL                      RRCTRL;                 /**< \brief 30, Round-robin group control*/
       __IO Ifx_BCU_PRIOH                       PRIOH;                  /**< \brief 34, Arbiter priority register high*/
       __IO Ifx_BCU_PRIOL                       PRIOL;                  /**< \brief 38, Arbiter priority register low*/
       __IO Ifx_BCU_CON                         CON;                    /**< \brief 3C, BCU control register*/
       __IO Ifx_BCU_ECON                        ECON;                   /**< \brief 40, BCU error control capture register*/
       __IO Ifx_BCU_EADD                        EADD;                   /**< \brief 44, BCU error address capture register*/
       __IO Ifx_BCU_EDAT                        EDAT;                   /**< \brief 48, BCU error data capture register*/
       __I  Ifx_BCU_CSAVSTAT                    CSAVSTAT;               /**< \brief 4C, CSAV status register*/
       __I  Ifx_BCU_ALSTAT                      ALSTAT[5];              /**< \brief 50, BCU EDC alarm status register 0.*/
       __I  Ifx_UReg_8Bit                       reserved_64[12];        /**< \brief 64, \internal Reserved */
       __O  Ifx_BCU_ALCLR                       ALCLR[5];               /**< \brief 70, BCU EDC alarm clear register 0*/
       __I  Ifx_UReg_8Bit                       reserved_84[12];        /**< \brief 84, \internal Reserved */
       __IO Ifx_BCU_ALCTRL                      ALCTRL;                 /**< \brief 90, BCU EDC alarm control register*/
       __IO Ifx_BCU_FEGEN                       FEGEN;                  /**< \brief 94, FPI error generation control register*/
       __IO Ifx_BCU_PSELECT                     PSELECT;                /**< \brief 98, BCU performance event select*/
       __I  Ifx_UReg_8Bit                       reserved_9C[100];       /**< \brief 9C, \internal Reserved */
       __IO Ifx_BCU_QOSICTRL                    QOSICTRL;               /**< \brief 100, QoS time interval control register*/
       __I  Ifx_BCU_QOSISTAT                    QOSISTAT;               /**< \brief 104, QoS time interval counter status*/
       __I  Ifx_UReg_8Bit                       reserved_108[8];        /**< \brief 108, \internal Reserved */
       __IO Ifx_BCU_QOSM                        QOSM[16];               /**< \brief 110, QoS master agent 0 status register*/
       __IO Ifx_BCU_QOSARP                      QOSARP[8];              /**< \brief 190, ARP 0 current counter value register*/
       __I  Ifx_UReg_8Bit                       reserved_270[400];      /**< \brief 270, \internal Reserved */
} Ifx_BCU;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXBCU_REGDEF_H */
