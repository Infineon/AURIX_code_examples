/**
 * \file IfxPsi5s_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_PSI5S/V0.2.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Psi5s_Registers Psi5s Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Psi5s_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Psi5s_Registers
 * 
 * \defgroup IfxSfr_Psi5s_Registers_union Register unions
 * \ingroup IfxSfr_Psi5s_Registers
 * 
 * \defgroup IfxSfr_Psi5s_Registers_struct Memory map
 * \ingroup IfxSfr_Psi5s_Registers
 */
#ifndef IFXPSI5S_REGDEF_H
#define IFXPSI5S_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Psi5s_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_PSI5S_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_PSI5S_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_PSI5S_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_PSI5S_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PSI5S_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_PSI5S_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_PSI5S_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_PSI5S_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_PSI5S_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PSI5S_ACCEN_WRB_FPI_Bits;

/** \brief Base Address Register */
typedef struct _Ifx_PSI5S_BAR_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit BA:30;             /**< \brief [31:2] Base Address - BA (rw) */
} Ifx_PSI5S_BAR_Bits;

/** \brief Baud Rate Timer/Reload Register */
typedef struct _Ifx_PSI5S_BG_Bits
{
    __IO Ifx_UReg_32Bit BR_VALUE:13;       /**< \brief [12:0] Baud Rate Timer/Reload Register Value - BR_VALUE (rwh) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PSI5S_BG_Bits;

/** \brief CPU Direct Write Register */
typedef struct _Ifx_PSI5S_CDW_Bits
{
    __IO Ifx_UReg_32Bit SD0:1;             /**< \brief [0:0] SD0 - SD0 (rw) */
    __IO Ifx_UReg_32Bit SD1:1;             /**< \brief [1:1] SD1 - SD1 (rw) */
    __IO Ifx_UReg_32Bit SD2:1;             /**< \brief [2:2] SD2 - SD2 (rw) */
    __IO Ifx_UReg_32Bit SD3:1;             /**< \brief [3:3] SD3 - SD3 (rw) */
    __IO Ifx_UReg_32Bit SD4:1;             /**< \brief [4:4] SD4 - SD4 (rw) */
    __IO Ifx_UReg_32Bit SD5:1;             /**< \brief [5:5] SD5 - SD5 (rw) */
    __IO Ifx_UReg_32Bit SD6:1;             /**< \brief [6:6] SD6 - SD6 (rw) */
    __IO Ifx_UReg_32Bit SD7:1;             /**< \brief [7:7] SD7 - SD7 (rw) */
    __IO Ifx_UReg_32Bit TSI:1;             /**< \brief [8:8] Trigger Pulse Indicator - TSI (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_CDW_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_PSI5S_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_PSI5S_CLC_Bits;

/** \brief Control Register */
typedef struct _Ifx_PSI5S_CON_Bits
{
    __IO Ifx_UReg_32Bit M:3;               /**< \brief [2:0] Mode Selection - M (rw) */
    __IO Ifx_UReg_32Bit STP:1;             /**< \brief [3:3] Number of Stop Bit Selection - STP (rw) */
    __I  Ifx_UReg_32Bit REN:1;             /**< \brief [4:4] Receiver Enable Control - REN (rh) */
    __IO Ifx_UReg_32Bit PEN:1;             /**< \brief [5:5] Parity Check Enable (asynchronous mode only) - PEN (rw) */
    __IO Ifx_UReg_32Bit FEN:1;             /**< \brief [6:6] Framing Check Enable (asynchronous mode only) - FEN (rw) */
    __IO Ifx_UReg_32Bit OEN:1;             /**< \brief [7:7] Overrun Check Enable - OEN (rw) */
    __I  Ifx_UReg_32Bit PE:1;              /**< \brief [8:8] ASC Parity Error Flag - PE (rh) */
    __I  Ifx_UReg_32Bit FE:1;              /**< \brief [9:9] ASC Framing Error Flag - FE (rh) */
    __I  Ifx_UReg_32Bit OE:1;              /**< \brief [10:10] ASC Overrun Error Flag - OE (rh) */
    __IO Ifx_UReg_32Bit FDE:1;             /**< \brief [11:11] Fractional Divider Enable - FDE (rw) */
    __IO Ifx_UReg_32Bit ODD:1;             /**< \brief [12:12] Parity Selection - ODD (rw) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [13:13] Baud Rate Selection - BRS (rw) */
    __IO Ifx_UReg_32Bit LB:1;              /**< \brief [14:14] Loop-back Mode Enable - LB (rw) */
    __IO Ifx_UReg_32Bit R:1;               /**< \brief [15:15] Baud Rate Generator Run Control - R (rw) */
    __IO Ifx_UReg_32Bit MTX:3;             /**< \brief [18:16] Mode Selection TX direction - MTX (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [27:19] \internal Reserved */
    __IO Ifx_UReg_32Bit ODDTX:1;           /**< \brief [28:28] Parity Selection TX direction - ODDTX (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PSI5S_CON_Bits;

/** \brief Channel Trigger Value Register 0 */
typedef struct _Ifx_PSI5S_CTV_Bits
{
    __IO Ifx_UReg_32Bit CTV:16;            /**< \brief [15:0] Channel Trigger Value CTV - CTV (rw) */
    __IO Ifx_UReg_32Bit CTC:16;            /**< \brief [31:16] Channel Trigger Counter - CTC (rwh) */
} Ifx_PSI5S_CTV_Bits;

/** \brief Frame Counter Register */
typedef struct _Ifx_PSI5S_FCNT_Bits
{
    __I  Ifx_UReg_32Bit FC0:3;             /**< \brief [2:0] Frame Counter for Channel 0 - FC0 (rh) */
    __I  Ifx_UReg_32Bit FC1:3;             /**< \brief [5:3] Frame Counter for Channel 1 - FC1 (rh) */
    __I  Ifx_UReg_32Bit FC2:3;             /**< \brief [8:6] Frame Counter for Channel 2 - FC2 (rh) */
    __I  Ifx_UReg_32Bit FC3:3;             /**< \brief [11:9] Frame Counter for Channel 3 - FC3 (rh) */
    __I  Ifx_UReg_32Bit FC4:3;             /**< \brief [14:12] Frame Counter for Channel 4 - FC4 (rh) */
    __I  Ifx_UReg_32Bit FC5:3;             /**< \brief [17:15] Frame Counter for Channel 5 - FC5 (rh) */
    __I  Ifx_UReg_32Bit FC6:3;             /**< \brief [20:18] Frame Counter for Channel 6 - FC6 (rh) */
    __I  Ifx_UReg_32Bit FC7:3;             /**< \brief [23:21] Frame Counter for Channel 7 - FC7 (rh) */
    __O  Ifx_UReg_32Bit NFCLR0:1;          /**< \brief [24:24] Clear Number of Frame Counter for Channel 0 - NFCLR0 (w) */
    __O  Ifx_UReg_32Bit NFCLR1:1;          /**< \brief [25:25] Clear Number of Frame Counter for Channel 1 - NFCLR1 (w) */
    __O  Ifx_UReg_32Bit NFCLR2:1;          /**< \brief [26:26] Clear Number of Frame Counter for Channel 2 - NFCLR2 (w) */
    __O  Ifx_UReg_32Bit NFCLR3:1;          /**< \brief [27:27] Clear Number of Frame Counter for Channel 3 - NFCLR3 (w) */
    __O  Ifx_UReg_32Bit NFCLR4:1;          /**< \brief [28:28] Clear Number of Frame Counter for Channel 4 - NFCLR4 (w) */
    __O  Ifx_UReg_32Bit NFCLR5:1;          /**< \brief [29:29] Clear Number of Frame Counter for Channel 5 - NFCLR5 (w) */
    __O  Ifx_UReg_32Bit NFCLR6:1;          /**< \brief [30:30] Clear Number of Frame Counter for Channel 6 - NFCLR6 (w) */
    __O  Ifx_UReg_32Bit NFCLR7:1;          /**< \brief [31:31] Clear Number of Frame Counter for Channel 7 - NFCLR7 (w) */
} Ifx_PSI5S_FCNT_Bits;

/** \brief Fractional Divider for Output CLK Register */
typedef struct _Ifx_PSI5S_FDO_Bits
{
    __IO Ifx_UReg_32Bit STEP:11;           /**< \brief [10:0] Step Value - STEP (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [13:11] \internal Reserved */
    __IO Ifx_UReg_32Bit DM:2;              /**< \brief [15:14] Divider Mode - DM (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PSI5S_FDO_Bits;

/** \brief Fractional Divider Register */
typedef struct _Ifx_PSI5S_FDR_Bits
{
    __IO Ifx_UReg_32Bit STEP:10;           /**< \brief [9:0] Step Value - STEP (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [13:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DM:2;              /**< \brief [15:14] Divider Mode - DM (rw) */
    __I  Ifx_UReg_32Bit RESULT:10;         /**< \brief [25:16] Result Value - RESULT (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_PSI5S_FDR_Bits;

/** \brief Fractional Divider Register for Timestamp */
typedef struct _Ifx_PSI5S_FDRT_Bits
{
    __IO Ifx_UReg_32Bit STEP:10;           /**< \brief [9:0] Step Value - STEP (rw) */
    __IO Ifx_UReg_32Bit TRIGSEL:1;         /**< \brief [10:10] Trigger select (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [13:11] \internal Reserved */
    __IO Ifx_UReg_32Bit DM:2;              /**< \brief [15:14] Divider Mode - DM (rw) */
    __I  Ifx_UReg_32Bit RESULT:10;         /**< \brief [25:16] Result Value - RESULT (rh) */
    __IO Ifx_UReg_32Bit ECS:3;             /**< \brief [28:26] External Timestamp Clear Source Select - ECS (rw) */
    __IO Ifx_UReg_32Bit ECEA:1;            /**< \brief [29:29] External Timestamp Clear Enable A - ECEA (rw) */
    __IO Ifx_UReg_32Bit ECEB:1;            /**< \brief [30:30] External Timestamp Clear Enable B - ECEB (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_PSI5S_FDRT_Bits;

/** \brief Fractional Divider Register */
typedef struct _Ifx_PSI5S_FDV_Bits
{
    __IO Ifx_UReg_32Bit FD_VALUE:11;       /**< \brief [10:0] Fractional Divider Register Value - FD_VALUE (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PSI5S_FDV_Bits;

/** \brief Global Control Register */
typedef struct _Ifx_PSI5S_GCR_Bits
{
    __IO Ifx_UReg_32Bit CRCI:1;            /**< \brief [0:0] CRCI - CRCI (rw) */
    __IO Ifx_UReg_32Bit XCRCI:1;           /**< \brief [1:1] XCRCI - XCRCI (rw) */
    __IO Ifx_UReg_32Bit TEI:1;             /**< \brief [2:2] TEI - TEI (rw) */
    __IO Ifx_UReg_32Bit PE:1;              /**< \brief [3:3] PE - PE (rw) */
    __IO Ifx_UReg_32Bit FE:1;              /**< \brief [4:4] FE - FE (rw) */
    __IO Ifx_UReg_32Bit OE:1;              /**< \brief [5:5] OE - OE (rw) */
    __IO Ifx_UReg_32Bit RBI:1;             /**< \brief [6:6] RBI - RBI (rw) */
    __IO Ifx_UReg_32Bit HDI:1;             /**< \brief [7:7] HDI - HDI (rw) */
    __IO Ifx_UReg_32Bit ETC0:1;            /**< \brief [8:8] Enable Channel Trigger Counter CTV0.CTC - ETC0 (rw) */
    __IO Ifx_UReg_32Bit ETC1:1;            /**< \brief [9:9] Enable Channel Trigger Counter CTV1.CTC - ETC1 (rw) */
    __IO Ifx_UReg_32Bit ETC2:1;            /**< \brief [10:10] Enable Channel Trigger Counter CTV2.CTC - ETC2 (rw) */
    __IO Ifx_UReg_32Bit ETC3:1;            /**< \brief [11:11] Enable Channel Trigger Counter CTV3.CTC - ETC3 (rw) */
    __IO Ifx_UReg_32Bit ETC4:1;            /**< \brief [12:12] Enable Channel Trigger Counter CTV4.CTC - ETC4 (rw) */
    __IO Ifx_UReg_32Bit ETC5:1;            /**< \brief [13:13] Enable Channel Trigger Counter CTV5.CTC - ETC5 (rw) */
    __IO Ifx_UReg_32Bit ETC6:1;            /**< \brief [14:14] Enable Channel Trigger Counter CTV6.CTC - ETC6 (rw) */
    __IO Ifx_UReg_32Bit ETC7:1;            /**< \brief [15:15] Enable Channel Trigger Counter CTV7.CTC - ETC7 (rw) */
    __IO Ifx_UReg_32Bit CEN0:1;            /**< \brief [16:16] Enable Channel 0 - CEN0 (rw) */
    __IO Ifx_UReg_32Bit CEN1:1;            /**< \brief [17:17] Enable Channel 1 - CEN1 (rw) */
    __IO Ifx_UReg_32Bit CEN2:1;            /**< \brief [18:18] Enable Channel 2 - CEN2 (rw) */
    __IO Ifx_UReg_32Bit CEN3:1;            /**< \brief [19:19] Enable Channel 3 - CEN3 (rw) */
    __IO Ifx_UReg_32Bit CEN4:1;            /**< \brief [20:20] Enable Channel 4 - CEN4 (rw) */
    __IO Ifx_UReg_32Bit CEN5:1;            /**< \brief [21:21] Enable Channel 5 - CEN5 (rw) */
    __IO Ifx_UReg_32Bit CEN6:1;            /**< \brief [22:22] Enable Channel 6 - CEN6 (rw) */
    __IO Ifx_UReg_32Bit CEN7:1;            /**< \brief [23:23] Enable Channel 7 - CEN7 (rw) */
    __IO Ifx_UReg_32Bit IDT:4;             /**< \brief [27:24] Idle Time (GLOBAL VALUE FOR ALL CHANNELS) - IDT (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [30:28] \internal Reserved */
    __IO Ifx_UReg_32Bit ASC:1;             /**< \brief [31:31] ASC only Mode - ASC (rw) */
} Ifx_PSI5S_GCR_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_PSI5S_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_PSI5S_ID_Bits;

/** \brief Interrupt Node Pointer Register 0 */
typedef struct _Ifx_PSI5S_INP_Bits
{
    __IO Ifx_UReg_32Bit RSI:3;             /**< \brief [2:0] Interrupt Node Pointer for Interrupt RSI - RSI (rw) */
    __IO Ifx_UReg_32Bit RDI:3;             /**< \brief [5:3] Interrupt Node Pointer for Interrupt RDI - RDI (rw) */
    __IO Ifx_UReg_32Bit RBI:3;             /**< \brief [8:6] Interrupt Node Pointer for Interrupt RBI - RBI (rw) */
    __IO Ifx_UReg_32Bit TEI:3;             /**< \brief [11:9] Interrupt Node Pointer for Interrupt TEI - TEI (rw) */
    __IO Ifx_UReg_32Bit CHCI:3;            /**< \brief [14:12] Interrupt Node Pointer for Interrupt CHCI - CHCI (rw) */
    __IO Ifx_UReg_32Bit CRCI:3;            /**< \brief [17:15] Interrupt Node Pointer for Interrupt CRCI - CRCI (rw) */
    __IO Ifx_UReg_32Bit TPI:3;             /**< \brief [20:18] Interrupt Node Pointer for Interrupt TOI - TPI (rw) */
    __IO Ifx_UReg_32Bit TPOI:3;            /**< \brief [23:21] Interrupt Node Pointer for TPOI - TPOI (rw) */
    __IO Ifx_UReg_32Bit HDI:3;             /**< \brief [26:24] Interrupt Node Pointer for HDI - HDI (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_PSI5S_INP_Bits;

/** \brief Interrupt Node Pointer Register Global */
typedef struct _Ifx_PSI5S_INPG_Bits
{
    __IO Ifx_UReg_32Bit TIR:3;             /**< \brief [2:0] Interrupt Node Pointer for Interrupt TIR - TIR (rw) */
    __IO Ifx_UReg_32Bit RIR:3;             /**< \brief [5:3] Interrupt Node Pointer for Interrupt RIR - RIR (rw) */
    __IO Ifx_UReg_32Bit EIR:3;             /**< \brief [8:6] Interrupt Node Pointer for Interrupt EIR - EIR (rw) */
    __IO Ifx_UReg_32Bit TBIR:3;            /**< \brief [11:9] Interrupt Node Pointer for Interrupt TBIR - TBIR (rw) */
    __IO Ifx_UReg_32Bit XCRCI:3;           /**< \brief [14:12] Interrupt Node Pointer for Interrupt XCRCI - XCRCI (rw) */
    __IO Ifx_UReg_32Bit FOI:3;             /**< \brief [17:15] Interrupt Node Pointer for Interrupt FOI - FOI (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PSI5S_INPG_Bits;

/** \brief Interrupt Clear Register 0 */
typedef struct _Ifx_PSI5S_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Clear Interrupt Request Flag RSI - RSI (w) */
    __O  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Clear Interrupt Request Flag RDI - RDI (w) */
    __O  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Clear Interrupt Request Flag RBI - RBI (w) */
    __O  Ifx_UReg_32Bit TEI:1;             /**< \brief [3:3] Clear Interrupt Request Flag TEI - TEI (w) */
    __O  Ifx_UReg_32Bit CHCI:1;            /**< \brief [4:4] Clear Interrupt Request Flag CHCI - CHCI (w) */
    __O  Ifx_UReg_32Bit CRCI:1;            /**< \brief [5:5] Clear Interrupt Request Flag CRCI - CRCI (w) */
    __O  Ifx_UReg_32Bit TPI:1;             /**< \brief [6:6] Clear Interrupt Request Flag TPI - TPI (w) */
    __O  Ifx_UReg_32Bit TPOI:1;            /**< \brief [7:7] Clear Interrupt Request Flag TPOI - TPOI (w) */
    __O  Ifx_UReg_32Bit HDI:1;             /**< \brief [8:8] Clear Interrupt Request Flag HDI - HDI (w) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_INTCLR_Bits;

/** \brief Interrupt Clear Register Global */
typedef struct _Ifx_PSI5S_INTCLRG_Bits
{
    __O  Ifx_UReg_32Bit TIR:1;             /**< \brief [0:0] Clear Interrupt Request Flag TIR - TIR (w) */
    __O  Ifx_UReg_32Bit RIR:1;             /**< \brief [1:1] Clear Interrupt Request Flag RIR - RIR (w) */
    __O  Ifx_UReg_32Bit EIR:1;             /**< \brief [2:2] Clear Interrupt Request Flag EIR - EIR (w) */
    __O  Ifx_UReg_32Bit TBIR:1;            /**< \brief [3:3] Clear Interrupt Request Flag TBIR - TBIR (w) */
    __O  Ifx_UReg_32Bit XCRCI:1;           /**< \brief [4:4] Clear Interrupt Request Flag XCRCI - XCRCI (w) */
    __O  Ifx_UReg_32Bit FOI:1;             /**< \brief [5:5] Clear Interrupt Request Flag FOI - FOI (w) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PSI5S_INTCLRG_Bits;

/** \brief Interrupt Enable Register 0 */
typedef struct _Ifx_PSI5S_INTEN_Bits
{
    __IO Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Enable Interrupt Request RSI - RSI (rw) */
    __IO Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Enable Interrupt Request RDI - RDI (rw) */
    __IO Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Enable Interrupt Request RBI - RBI (rw) */
    __IO Ifx_UReg_32Bit TEI:1;             /**< \brief [3:3] Enable Interrupt Request TEI - TEI (rw) */
    __IO Ifx_UReg_32Bit CHCI:1;            /**< \brief [4:4] Enable Interrupt Request CHCI - CHCI (rw) */
    __IO Ifx_UReg_32Bit CRCI:1;            /**< \brief [5:5] Enable Interrupt Request CRCI - CRCI (rw) */
    __IO Ifx_UReg_32Bit TPI:1;             /**< \brief [6:6] Enable Interrupt Request TPI - TPI (rw) */
    __IO Ifx_UReg_32Bit TPOI:1;            /**< \brief [7:7] Enable Interrupt Request TPOI - TPOI (rw) */
    __IO Ifx_UReg_32Bit HDI:1;             /**< \brief [8:8] Enable Interrupt Request HDI - HDI (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_INTEN_Bits;

/** \brief Interrupt Enable Register Global */
typedef struct _Ifx_PSI5S_INTENG_Bits
{
    __IO Ifx_UReg_32Bit TIR:1;             /**< \brief [0:0] Enable Interrupt Request TIR - TIR (rw) */
    __IO Ifx_UReg_32Bit RIR:1;             /**< \brief [1:1] Enable Interrupt Request RIR - RIR (rw) */
    __IO Ifx_UReg_32Bit EIR:1;             /**< \brief [2:2] Enable Interrupt Request EIR - EIR (rw) */
    __IO Ifx_UReg_32Bit TBIR:1;            /**< \brief [3:3] Enable Interrupt Request TBIR - TBIR (rw) */
    __IO Ifx_UReg_32Bit XCRCI:1;           /**< \brief [4:4] Enable Interrupt Request XCRCI - XCRCI (rw) */
    __IO Ifx_UReg_32Bit FOI:1;             /**< \brief [5:5] Enable Interrupt Request FOI - FOI (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PSI5S_INTENG_Bits;

/** \brief Interrupt Overview Register */
typedef struct _Ifx_PSI5S_INTOV_Bits
{
    __I  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Interrupt Pending on Node Pointer RSI - RSI (rh) */
    __I  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Interrupt Pending on Node Pointer RDI - RDI (rh) */
    __I  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Interrupt Pending on Node Pointer RBI - RBI (rh) */
    __I  Ifx_UReg_32Bit TEI:1;             /**< \brief [3:3] Interrupt Pending on Node Pointer TEI - TEI (rh) */
    __I  Ifx_UReg_32Bit CHCI:1;            /**< \brief [4:4] Interrupt Pending on Node Pointer CHCI - CHCI (rh) */
    __I  Ifx_UReg_32Bit CRCI:1;            /**< \brief [5:5] Interrupt Pending on Node Pointer CRCI - CRCI (rh) */
    __I  Ifx_UReg_32Bit TPI:1;             /**< \brief [6:6] Interrupt Pending on Node Pointer TPI - TPI (rh) */
    __I  Ifx_UReg_32Bit TPOI:1;            /**< \brief [7:7] Interrupt Pending on Node Pointer TPOI - TPOI (rh) */
    __I  Ifx_UReg_32Bit HDI:1;             /**< \brief [8:8] Interrupt Pending on Node Pointer HDI - HDI (rh) */
    __I  Ifx_UReg_32Bit TIR:1;             /**< \brief [9:9] Interrupt Pending on Node Pointer TIR - TIR (rh) */
    __I  Ifx_UReg_32Bit RIR:1;             /**< \brief [10:10] Interrupt Pending on Node Pointer RIR - RIR (rh) */
    __I  Ifx_UReg_32Bit EIR:1;             /**< \brief [11:11] Interrupt Pending on Node Pointer EIR - EIR (rh) */
    __I  Ifx_UReg_32Bit TBIR:1;            /**< \brief [12:12] Interrupt Pending on Node Pointer TBIR - TBIR (rh) */
    __I  Ifx_UReg_32Bit XCRCI:1;           /**< \brief [13:13] Interrupt Pending on Node Pointer XCRCI - XCRCI (rh) */
    __I  Ifx_UReg_32Bit FOI:1;             /**< \brief [14:14] Interrupt Pending on Node Pointer FOI - FOI (rh) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_PSI5S_INTOV_Bits;

/** \brief Interrupt Set Register 0 */
typedef struct _Ifx_PSI5S_INTSET_Bits
{
    __O  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Set Interrupt Request Flag RSI - RSI (w) */
    __O  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Set Interrupt Request Flag RDI - RDI (w) */
    __O  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Set Interrupt Request Flag RBI - RBI (w) */
    __O  Ifx_UReg_32Bit TEI:1;             /**< \brief [3:3] Set Interrupt Request Flag TEI - TEI (w) */
    __O  Ifx_UReg_32Bit CHCI:1;            /**< \brief [4:4] Set Interrupt Request Flag CHCI - CHCI (w) */
    __O  Ifx_UReg_32Bit CRCI:1;            /**< \brief [5:5] Set Interrupt Request Flag CRCI - CRCI (w) */
    __O  Ifx_UReg_32Bit TPI:1;             /**< \brief [6:6] Set Interrupt Request Flag TPI - TPI (w) */
    __O  Ifx_UReg_32Bit TPOI:1;            /**< \brief [7:7] Set Interrupt Request Flag TPOI - TPOI (w) */
    __O  Ifx_UReg_32Bit HDI:1;             /**< \brief [8:8] Set Interrupt Request Flag HDI - HDI (w) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_INTSET_Bits;

/** \brief Interrupt Set Register Global */
typedef struct _Ifx_PSI5S_INTSETG_Bits
{
    __O  Ifx_UReg_32Bit TIR:1;             /**< \brief [0:0] Set Interrupt Request Flag TIR - TIR (w) */
    __O  Ifx_UReg_32Bit RIR:1;             /**< \brief [1:1] Set Interrupt Request Flag RIR - RIR (w) */
    __O  Ifx_UReg_32Bit EIR:1;             /**< \brief [2:2] Set Interrupt Request Flag EIR - EIR (w) */
    __O  Ifx_UReg_32Bit TBIR:1;            /**< \brief [3:3] Set Interrupt Request Flag TBIR - TBIR (w) */
    __O  Ifx_UReg_32Bit XCRCI:1;           /**< \brief [4:4] Set Interrupt Request Flag XCRCI - XCRCI (w) */
    __O  Ifx_UReg_32Bit FOI:1;             /**< \brief [5:5] Set Interrupt Request Flag FOI - FOI (w) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PSI5S_INTSETG_Bits;

/** \brief Interrupt Status Register 0 */
typedef struct _Ifx_PSI5S_INTSTAT_Bits
{
    __I  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Receive Success Interrupt Request Flag - RSI (rh) */
    __I  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Receive Data Interrupt Request Flag - RDI (rh) */
    __I  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Receive Buffer Overflow Interrupt Request Flag - RBI (rh) */
    __I  Ifx_UReg_32Bit TEI:1;             /**< \brief [3:3] Timing Error Interrupt Request Flag - TEI (rh) */
    __I  Ifx_UReg_32Bit CHCI:1;            /**< \brief [4:4] Channel Completed Interrupt Request Flag - CHCI (rh) */
    __I  Ifx_UReg_32Bit CRCI:1;            /**< \brief [5:5] CRC Error Request Flag - CRCI (rh) */
    __I  Ifx_UReg_32Bit TPI:1;             /**< \brief [6:6] Transfer Preparation Interrupt Request Flag - TPI (rh) */
    __I  Ifx_UReg_32Bit TPOI:1;            /**< \brief [7:7] Transmit Preparation Overflow Interrupt Request Flag - TPOI (rh) */
    __I  Ifx_UReg_32Bit HDI:1;             /**< \brief [8:8] Header Error Signalled Flag - HDI (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_INTSTAT_Bits;

/** \brief Interrupt Status Register Global */
typedef struct _Ifx_PSI5S_INTSTATG_Bits
{
    __I  Ifx_UReg_32Bit TIR:1;             /**< \brief [0:0] Transmit Interrupt Request Flag - TIR (rh) */
    __I  Ifx_UReg_32Bit RIR:1;             /**< \brief [1:1] Receive Interrupt Request Flag - RIR (rh) */
    __I  Ifx_UReg_32Bit EIR:1;             /**< \brief [2:2] Error Interrupt Request Flag - EIR (rh) */
    __I  Ifx_UReg_32Bit TBIR:1;            /**< \brief [3:3] Transmit Buffer Interrupt Request Flag - TBIR (rh) */
    __I  Ifx_UReg_32Bit XCRCI:1;           /**< \brief [4:4] XCRC Error Request Flag - XCRCI (rh) */
    __I  Ifx_UReg_32Bit FOI:1;             /**< \brief [5:5] FIFO Error Request Flag - FOI (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PSI5S_INTSTATG_Bits;

/** \brief Input and Output Control Register */
typedef struct _Ifx_PSI5S_IOCR_Bits
{
    __IO Ifx_UReg_32Bit ALTI:2;            /**< \brief [1:0] Alternate Input Select - ALTI (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PSI5S_IOCR_Bits;

/** \brief Number of Frames Control Register */
typedef struct _Ifx_PSI5S_NFC_Bits
{
    __IO Ifx_UReg_32Bit NF0:3;             /**< \brief [2:0] Number of expected frames on Channel 0 - NF0 (rw) */
    __IO Ifx_UReg_32Bit NF1:3;             /**< \brief [5:3] Number of expected frames on Channel 1 - NF1 (rw) */
    __IO Ifx_UReg_32Bit NF2:3;             /**< \brief [8:6] Number of expected frames on Channel 2 - NF2 (rw) */
    __IO Ifx_UReg_32Bit NF3:3;             /**< \brief [11:9] Number of expected frames on Channel 3 - NF3 (rw) */
    __IO Ifx_UReg_32Bit NF4:3;             /**< \brief [14:12] Number of expected frames on Channel 4 - NF4 (rw) */
    __IO Ifx_UReg_32Bit NF5:3;             /**< \brief [17:15] Number of expected frames on Channel 5 - NF5 (rw) */
    __IO Ifx_UReg_32Bit NF6:3;             /**< \brief [20:18] Number of expected frames on Channel 6 - NF6 (rw) */
    __IO Ifx_UReg_32Bit NF7:3;             /**< \brief [23:21] Number of expected frames on Channel 7 - NF7 (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_NFC_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_PSI5S_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PSI5S_OCS_Bits;

/** \brief Pulse Generation Control Register 0 */
typedef struct _Ifx_PSI5S_PGC_Bits
{
    __IO Ifx_UReg_32Bit TXCMD:5;           /**< \brief [4:0] TX Command - TXCMD (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit ATXCMD:5;          /**< \brief [12:8] Alternate TX Command - ATXCMD (rw) */
    __IO Ifx_UReg_32Bit TRIGSEL:1;         /**< \brief [13:13] Trigger select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [14:14] \internal Reserved */
    __IO Ifx_UReg_32Bit TBS:1;             /**< \brief [15:15] Time Base Select - TBS (rw) */
    __IO Ifx_UReg_32Bit ETB:3;             /**< \brief [18:16] External Time Base Select - ETB (rw) */
    __IO Ifx_UReg_32Bit PTE:1;             /**< \brief [19:19] Periodic Trigger Enable - PTE (rw) */
    __IO Ifx_UReg_32Bit ETS:3;             /**< \brief [22:20] External Trigger Select - ETS (rw) */
    __IO Ifx_UReg_32Bit ETE:1;             /**< \brief [23:23] External Trigger Enable - ETE (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_PGC_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_PSI5S_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_PSI5S_PROT_Bits;

/** \brief Receive Buffer Register */
typedef struct _Ifx_PSI5S_RBUF_Bits
{
    __I  Ifx_UReg_32Bit RD_VALUE:9;        /**< \brief [8:0] Receive Data Register Value - RD_VALUE (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_RBUF_Bits;

/** \brief Receiver Control Register A0 */
typedef struct _Ifx_PSI5S_RCRA_Bits
{
    __IO Ifx_UReg_32Bit CRC0:1;            /**< \brief [0:0] CRC or Parity Selection 0 - CRC0 (rw) */
    __IO Ifx_UReg_32Bit CRC1:1;            /**< \brief [1:1] CRC or Parity Selection 1 - CRC1 (rw) */
    __IO Ifx_UReg_32Bit CRC2:1;            /**< \brief [2:2] CRC or Parity Selection 2 - CRC2 (rw) */
    __IO Ifx_UReg_32Bit CRC3:1;            /**< \brief [3:3] CRC or Parity Selection 3 - CRC3 (rw) */
    __IO Ifx_UReg_32Bit CRC4:1;            /**< \brief [4:4] CRC or Parity Selection 4 - CRC4 (rw) */
    __IO Ifx_UReg_32Bit CRC5:1;            /**< \brief [5:5] CRC or Parity Selection 5 - CRC5 (rw) */
    __IO Ifx_UReg_32Bit TSEN:1;            /**< \brief [6:6] Timestamp Enable - TSEN (rw) */
    __IO Ifx_UReg_32Bit TSP:1;             /**< \brief [7:7] Timestamp Select - TSP (rw) */
    __IO Ifx_UReg_32Bit TSTS:1;            /**< \brief [8:8] Timestamp Trigger Select - TSTS (rw) */
    __IO Ifx_UReg_32Bit FIDS:1;            /**< \brief [9:9] Frame ID Select - FIDS (rw) */
    __IO Ifx_UReg_32Bit WDMS:1;            /**< \brief [10:10] Watchdog Timer Mode Select - WDMS (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit UFC0:2;            /**< \brief [17:16] UART frame Count per Packet Frame in Slot 0 - UFC0 (rw) */
    __IO Ifx_UReg_32Bit UFC1:2;            /**< \brief [19:18] UART frame Count per Packet Frame in Slot 1 - UFC1 (rw) */
    __IO Ifx_UReg_32Bit UFC2:2;            /**< \brief [21:20] UART frame Count per Packet Frame in Slot 2 - UFC2 (rw) */
    __IO Ifx_UReg_32Bit UFC3:2;            /**< \brief [23:22] UART frame Count per Packet Frame in Slot 3 - UFC3 (rw) */
    __IO Ifx_UReg_32Bit UFC4:2;            /**< \brief [25:24] UART frame Count per Packet Frame in Slot 4 - UFC4 (rw) */
    __IO Ifx_UReg_32Bit UFC5:2;            /**< \brief [27:26] UART frame Count per Packet Frame in Slot 5 - UFC5 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PSI5S_RCRA_Bits;

/** \brief Receiver Control Register B0 */
typedef struct _Ifx_PSI5S_RCRB_Bits
{
    __IO Ifx_UReg_32Bit PDL0:5;            /**< \brief [4:0] Payload Data Length 0 - PDL0 (rw) */
    __IO Ifx_UReg_32Bit PDL1:5;            /**< \brief [9:5] Payload Data Length 1 - PDL1 (rw) */
    __IO Ifx_UReg_32Bit PDL2:5;            /**< \brief [14:10] Payload Data Length 2 - PDL2 (rw) */
    __IO Ifx_UReg_32Bit PDL3:5;            /**< \brief [19:15] Payload Data Length 3 - PDL3 (rw) */
    __IO Ifx_UReg_32Bit PDL4:5;            /**< \brief [24:20] Payload Data Length 4 - PDL4 (rw) */
    __IO Ifx_UReg_32Bit PDL5:5;            /**< \brief [29:25] Payload Data Length 5 - PDL5 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PSI5S_RCRB_Bits;

/** \brief Receive Data Register */
typedef struct _Ifx_PSI5S_RDR_Bits
{
    __I  Ifx_UReg_32Bit RD0:1;             /**< \brief [0:0] PSI5 Receive Data - RD0 (rh) */
    __I  Ifx_UReg_32Bit RD1:1;             /**< \brief [1:1] PSI5 Receive Data - RD1 (rh) */
    __I  Ifx_UReg_32Bit RD2:1;             /**< \brief [2:2] PSI5 Receive Data - RD2 (rh) */
    __I  Ifx_UReg_32Bit RD3:1;             /**< \brief [3:3] PSI5 Receive Data - RD3 (rh) */
    __I  Ifx_UReg_32Bit RD4:1;             /**< \brief [4:4] PSI5 Receive Data - RD4 (rh) */
    __I  Ifx_UReg_32Bit RD5:1;             /**< \brief [5:5] PSI5 Receive Data - RD5 (rh) */
    __I  Ifx_UReg_32Bit RD6:1;             /**< \brief [6:6] PSI5 Receive Data - RD6 (rh) */
    __I  Ifx_UReg_32Bit RD7:1;             /**< \brief [7:7] PSI5 Receive Data - RD7 (rh) */
    __I  Ifx_UReg_32Bit RD8:1;             /**< \brief [8:8] PSI5 Receive Data - RD8 (rh) */
    __I  Ifx_UReg_32Bit RD9:1;             /**< \brief [9:9] PSI5 Receive Data - RD9 (rh) */
    __I  Ifx_UReg_32Bit RD10:1;            /**< \brief [10:10] PSI5 Receive Data - RD10 (rh) */
    __I  Ifx_UReg_32Bit RD11:1;            /**< \brief [11:11] PSI5 Receive Data - RD11 (rh) */
    __I  Ifx_UReg_32Bit RD12:1;            /**< \brief [12:12] PSI5 Receive Data - RD12 (rh) */
    __I  Ifx_UReg_32Bit RD13:1;            /**< \brief [13:13] PSI5 Receive Data - RD13 (rh) */
    __I  Ifx_UReg_32Bit RD14:1;            /**< \brief [14:14] PSI5 Receive Data - RD14 (rh) */
    __I  Ifx_UReg_32Bit RD15:1;            /**< \brief [15:15] PSI5 Receive Data - RD15 (rh) */
    __I  Ifx_UReg_32Bit RD16:1;            /**< \brief [16:16] PSI5 Receive Data - RD16 (rh) */
    __I  Ifx_UReg_32Bit RD17:1;            /**< \brief [17:17] PSI5 Receive Data - RD17 (rh) */
    __I  Ifx_UReg_32Bit RD18:1;            /**< \brief [18:18] PSI5 Receive Data - RD18 (rh) */
    __I  Ifx_UReg_32Bit RD19:1;            /**< \brief [19:19] PSI5 Receive Data - RD19 (rh) */
    __I  Ifx_UReg_32Bit RD20:1;            /**< \brief [20:20] PSI5 Receive Data - RD20 (rh) */
    __I  Ifx_UReg_32Bit RD21:1;            /**< \brief [21:21] PSI5 Receive Data - RD21 (rh) */
    __I  Ifx_UReg_32Bit RD22:1;            /**< \brief [22:22] PSI5 Receive Data - RD22 (rh) */
    __I  Ifx_UReg_32Bit RD23:1;            /**< \brief [23:23] PSI5 Receive Data - RD23 (rh) */
    __I  Ifx_UReg_32Bit RD24:1;            /**< \brief [24:24] PSI5 Receive Data - RD24 (rh) */
    __I  Ifx_UReg_32Bit RD25:1;            /**< \brief [25:25] PSI5 Receive Data - RD25 (rh) */
    __I  Ifx_UReg_32Bit RD26:1;            /**< \brief [26:26] PSI5 Receive Data - RD26 (rh) */
    __I  Ifx_UReg_32Bit RD27:1;            /**< \brief [27:27] PSI5 Receive Data - RD27 (rh) */
    __I  Ifx_UReg_32Bit PFC:4;             /**< \brief [31:28] Packet Frame Count - PFC (rh) */
} Ifx_PSI5S_RDR_Bits;

/** \brief Receive Status Register */
typedef struct _Ifx_PSI5S_RDS_Bits
{
    __I  Ifx_UReg_32Bit XCRC0:1;           /**< \brief [0:0] XCRC - XCRC0 (rh) */
    __I  Ifx_UReg_32Bit XCRC1:1;           /**< \brief [1:1] XCRC - XCRC1 (rh) */
    __I  Ifx_UReg_32Bit XCRC2:1;           /**< \brief [2:2] XCRC - XCRC2 (rh) */
    __I  Ifx_UReg_32Bit XCRC3:1;           /**< \brief [3:3] XCRC - XCRC3 (rh) */
    __I  Ifx_UReg_32Bit XCRC4:1;           /**< \brief [4:4] XCRC - XCRC4 (rh) */
    __I  Ifx_UReg_32Bit XCRC5:1;           /**< \brief [5:5] XCRC - XCRC5 (rh) */
    __I  Ifx_UReg_32Bit XCRCI:1;           /**< \brief [6:6] XCRC Error Flag - XCRCI (rh) */
    __I  Ifx_UReg_32Bit CRC0:1;            /**< \brief [7:7] CRC - CRC0 (rh) */
    __I  Ifx_UReg_32Bit CRC1:1;            /**< \brief [8:8] CRC - CRC1 (rh) */
    __I  Ifx_UReg_32Bit CRC2:1;            /**< \brief [9:9] CRC - CRC2 (rh) */
    __I  Ifx_UReg_32Bit CRCI:1;            /**< \brief [10:10] CRC Error Flag - CRCI (rh) */
    __I  Ifx_UReg_32Bit ERR0:1;            /**< \brief [11:11] Error signalling Flag 0 - ERR0 (rh) */
    __I  Ifx_UReg_32Bit ERR1:1;            /**< \brief [12:12] Error signalling Flag 1 - ERR1 (rh) */
    __I  Ifx_UReg_32Bit HDI:1;             /**< \brief [13:13] Header Error Signalled Flag - HDI (rh) */
    __I  Ifx_UReg_32Bit PE:1;              /**< \brief [14:14] ASC Parity Error Flag - PE (rh) */
    __I  Ifx_UReg_32Bit FE:1;              /**< \brief [15:15] ASC Framing Error Flag - FE (rh) */
    __I  Ifx_UReg_32Bit OE:1;              /**< \brief [16:16] ASC Overrun Error Flag - OE (rh) */
    __I  Ifx_UReg_32Bit TEI:1;             /**< \brief [17:17] Time Error Flag - TEI (rh) */
    __I  Ifx_UReg_32Bit RBI:1;             /**< \brief [18:18] Receive Buffer Overflow Flag - RBI (rh) */
    __I  Ifx_UReg_32Bit FID:3;             /**< \brief [21:19] Frame ID (Frame Number) - FID (rh) */
    __I  Ifx_UReg_32Bit CID:3;             /**< \brief [24:22] Channel ID (Channel Number) - CID (rh) */
    __I  Ifx_UReg_32Bit AFC:3;             /**< \brief [27:25] Actual UART frame Count - AFC (rh) */
    __I  Ifx_UReg_32Bit PFC:4;             /**< \brief [31:28] Packet Frame Count - PFC (rh) */
} Ifx_PSI5S_RDS_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_PSI5S_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PSI5S_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_PSI5S_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_PSI5S_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_PSI5S_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PSI5S_RST_STAT_Bits;

/** \brief Send Control Register 0 */
typedef struct _Ifx_PSI5S_SCR_Bits
{
    __IO Ifx_UReg_32Bit PLL:5;             /**< \brief [4:0] Payload Length of Registers SDRx - PLL (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_32Bit EPS:2;             /**< \brief [7:6] Enhanced Protocol Selection - EPS (rw) */
    __IO Ifx_UReg_32Bit BSC:1;             /**< \brief [8:8] Bit Stuffing Control - BSC (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [13:9] \internal Reserved */
    __O  Ifx_UReg_32Bit FLUS:1;            /**< \brief [14:14] Flush SDRx - FLUS (w) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [21:15] \internal Reserved */
    __IO Ifx_UReg_32Bit CRC:1;             /**< \brief [22:22] CRC Generation Control - CRC (rw) */
    __IO Ifx_UReg_32Bit STA:1;             /**< \brief [23:23] Start Sequence Generation Control - STA (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [25:24] \internal Reserved */
    __I  Ifx_UReg_32Bit TPF:1;             /**< \brief [26:26] Transmit in Progress Flag - TPF (r) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_PSI5S_SCR_Bits;

/** \brief Send Data Register 0 */
typedef struct _Ifx_PSI5S_SDR_Bits
{
    __IO Ifx_UReg_32Bit SD0:1;             /**< \brief [0:0] SD0 - SD0 (rwh) */
    __IO Ifx_UReg_32Bit SD1:1;             /**< \brief [1:1] SD1 - SD1 (rwh) */
    __IO Ifx_UReg_32Bit SD2:1;             /**< \brief [2:2] SD2 - SD2 (rwh) */
    __IO Ifx_UReg_32Bit SD3:1;             /**< \brief [3:3] SD3 - SD3 (rwh) */
    __IO Ifx_UReg_32Bit SD4:1;             /**< \brief [4:4] SD4 - SD4 (rwh) */
    __IO Ifx_UReg_32Bit SD5:1;             /**< \brief [5:5] SD5 - SD5 (rwh) */
    __IO Ifx_UReg_32Bit SD6:1;             /**< \brief [6:6] SD6 - SD6 (rwh) */
    __IO Ifx_UReg_32Bit SD7:1;             /**< \brief [7:7] SD7 - SD7 (rwh) */
    __IO Ifx_UReg_32Bit SD8:1;             /**< \brief [8:8] SD8 - SD8 (rwh) */
    __IO Ifx_UReg_32Bit SD9:1;             /**< \brief [9:9] SD9 - SD9 (rwh) */
    __IO Ifx_UReg_32Bit SD10:1;            /**< \brief [10:10] SD10 - SD10 (rwh) */
    __IO Ifx_UReg_32Bit SD11:1;            /**< \brief [11:11] SD11 - SD11 (rwh) */
    __IO Ifx_UReg_32Bit SD12:1;            /**< \brief [12:12] SD12 - SD12 (rwh) */
    __IO Ifx_UReg_32Bit SD13:1;            /**< \brief [13:13] SD13 - SD13 (rwh) */
    __IO Ifx_UReg_32Bit SD14:1;            /**< \brief [14:14] SD14 - SD14 (rwh) */
    __IO Ifx_UReg_32Bit SD15:1;            /**< \brief [15:15] SD15 - SD15 (rwh) */
    __IO Ifx_UReg_32Bit SD16:1;            /**< \brief [16:16] SD16 - SD16 (rwh) */
    __IO Ifx_UReg_32Bit SD17:1;            /**< \brief [17:17] SD17 - SD17 (rwh) */
    __IO Ifx_UReg_32Bit SD18:1;            /**< \brief [18:18] SD18 - SD18 (rwh) */
    __IO Ifx_UReg_32Bit SD19:1;            /**< \brief [19:19] SD19 - SD19 (rwh) */
    __IO Ifx_UReg_32Bit SD20:1;            /**< \brief [20:20] SD20 - SD20 (rwh) */
    __IO Ifx_UReg_32Bit SD21:1;            /**< \brief [21:21] SD21 - SD21 (rwh) */
    __IO Ifx_UReg_32Bit SD22:1;            /**< \brief [22:22] SD22 - SD22 (rwh) */
    __IO Ifx_UReg_32Bit SD23:1;            /**< \brief [23:23] SD23 - SD23 (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_SDR_Bits;

/** \brief Target Address Register */
typedef struct _Ifx_PSI5S_TAR_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __I  Ifx_UReg_32Bit TA:30;             /**< \brief [31:2] Target Address - TA (rh) */
} Ifx_PSI5S_TAR_Bits;

/** \brief Transmit Buffer Register */
typedef struct _Ifx_PSI5S_TBUF_Bits
{
    __IO Ifx_UReg_32Bit TD_VALUE:9;        /**< \brief [8:0] Transmit Data Register Value - TD_VALUE (rwh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PSI5S_TBUF_Bits;

/** \brief Timestamp Count Register A */
typedef struct _Ifx_PSI5S_TSCNTA_Bits
{
    __I  Ifx_UReg_32Bit CTS:24;            /**< \brief [23:0] Current Timestamp for the Module - CTS (rh) */
    __IO Ifx_UReg_32Bit ETB:3;             /**< \brief [26:24] External Time Base Select - ETB (rw) */
    __IO Ifx_UReg_32Bit TBS:1;             /**< \brief [27:27] Time Base Select - TBS (rw) */
    __IO Ifx_UReg_32Bit TBEA:1;            /**< \brief [28:28] Time Base Enable TSCNTA - TBEA (rw) */
    __IO Ifx_UReg_32Bit TBEB:1;            /**< \brief [29:29] Time Base Enable TSCNTB - TBEB (rw) */
    __O  Ifx_UReg_32Bit CLRA:1;            /**< \brief [30:30] Clear Timestamp Counter A - CLRA (w) */
    __O  Ifx_UReg_32Bit CLRB:1;            /**< \brief [31:31] Clear Timestamp Counter B - CLRB (w) */
} Ifx_PSI5S_TSCNTA_Bits;

/** \brief Timestamp Count Register B */
typedef struct _Ifx_PSI5S_TSCNTB_Bits
{
    __I  Ifx_UReg_32Bit CTS:24;            /**< \brief [23:0] Current Timestamp for the Module - CTS (rh) */
    __IO Ifx_UReg_32Bit ETB:3;             /**< \brief [26:24] External Time Base Select - ETB (rw) */
    __IO Ifx_UReg_32Bit TBS:1;             /**< \brief [27:27] Time Base Select - TBS (rw) */
    __IO Ifx_UReg_32Bit TRIGSELA:1;        /**< \brief [28:28] Trigger select (rw) */
    __IO Ifx_UReg_32Bit TRIGSELB:1;        /**< \brief [29:29] Trigger select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PSI5S_TSCNTB_Bits;

/** \brief Timestamp Capture Register 0 */
typedef struct _Ifx_PSI5S_TSCR_Bits
{
    __I  Ifx_UReg_32Bit TS:24;             /**< \brief [23:0] Timestamp - TS (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_TSCR_Bits;

/** \brief Timestamp Mirror Register */
typedef struct _Ifx_PSI5S_TSM_Bits
{
    __I  Ifx_UReg_32Bit TS:24;             /**< \brief [23:0] Timestamp - TS (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __I  Ifx_UReg_32Bit PFC:4;             /**< \brief [31:28] Packet Frame Count - PFC (rh) */
} Ifx_PSI5S_TSM_Bits;

/** \brief Watchdog Timer Register 0 */
typedef struct _Ifx_PSI5S_WDT_Bits
{
    __IO Ifx_UReg_32Bit WDL:24;            /**< \brief [23:0] Watchdog Timer Limit - WDL (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PSI5S_WDT_Bits;

/** \brief Write Hardware Bits Control Register */
typedef struct _Ifx_PSI5S_WHBCON_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __O  Ifx_UReg_32Bit CLRREN:1;          /**< \brief [4:4] Clear Receiver Enable Bit - CLRREN (w) */
    __O  Ifx_UReg_32Bit SETREN:1;          /**< \brief [5:5] Set Receiver Enable Bit - SETREN (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __O  Ifx_UReg_32Bit CLRPE:1;           /**< \brief [8:8] Clear Parity Error Flag - CLRPE (w) */
    __O  Ifx_UReg_32Bit CLRFE:1;           /**< \brief [9:9] Clear Framing Error Flag - CLRFE (w) */
    __O  Ifx_UReg_32Bit CLROE:1;           /**< \brief [10:10] Clear Overrun Error Flag - CLROE (w) */
    __O  Ifx_UReg_32Bit SETPE:1;           /**< \brief [11:11] Set Parity Error Flag - SETPE (w) */
    __O  Ifx_UReg_32Bit SETFE:1;           /**< \brief [12:12] Set Framing Error Flag - SETFE (w) */
    __O  Ifx_UReg_32Bit SETOE:1;           /**< \brief [13:13] Set Overrun Error Flag - SETOE (w) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_PSI5S_WHBCON_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_psi5s_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ACCEN_PRS_Bits B;            /**< \brief Bitfield access */
} Ifx_PSI5S_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ACCEN_RDA_Bits B;            /**< \brief Bitfield access */
} Ifx_PSI5S_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ACCEN_RDB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_PSI5S_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ACCEN_VM_Bits B;             /**< \brief Bitfield access */
} Ifx_PSI5S_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ACCEN_WRA_Bits B;            /**< \brief Bitfield access */
} Ifx_PSI5S_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ACCEN_WRB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_PSI5S_ACCEN_WRB_FPI;

/** \brief Base Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_BAR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_BAR;

/** \brief Baud Rate Timer/Reload Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_BG_Bits B;                   /**< \brief Bitfield access */
} Ifx_PSI5S_BG;

/** \brief CPU Direct Write Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_CDW_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_CDW;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_CLC_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_CLC;

/** \brief Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_CON_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_CON;

/** \brief Channel Trigger Value Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_CTV_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_CTV;

/** \brief Frame Counter Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_FCNT_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_FCNT;

/** \brief Fractional Divider for Output CLK Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_FDO_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_FDO;

/** \brief Fractional Divider Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_FDR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_FDR;

/** \brief Fractional Divider Register for Timestamp   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_FDRT_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_FDRT;

/** \brief Fractional Divider Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_FDV_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_FDV;

/** \brief Global Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_GCR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_GCR;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_ID_Bits B;                   /**< \brief Bitfield access */
} Ifx_PSI5S_ID;

/** \brief Interrupt Node Pointer Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INP_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_INP;

/** \brief Interrupt Node Pointer Register Global   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INPG_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_INPG;

/** \brief Interrupt Clear Register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTCLR_Bits B;               /**< \brief Bitfield access */
} Ifx_PSI5S_INTCLR;

/** \brief Interrupt Clear Register Global   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTCLRG_Bits B;              /**< \brief Bitfield access */
} Ifx_PSI5S_INTCLRG;

/** \brief Interrupt Enable Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTEN_Bits B;                /**< \brief Bitfield access */
} Ifx_PSI5S_INTEN;

/** \brief Interrupt Enable Register Global   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTENG_Bits B;               /**< \brief Bitfield access */
} Ifx_PSI5S_INTENG;

/** \brief Interrupt Overview Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTOV_Bits B;                /**< \brief Bitfield access */
} Ifx_PSI5S_INTOV;

/** \brief Interrupt Set Register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTSET_Bits B;               /**< \brief Bitfield access */
} Ifx_PSI5S_INTSET;

/** \brief Interrupt Set Register Global   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTSETG_Bits B;              /**< \brief Bitfield access */
} Ifx_PSI5S_INTSETG;

/** \brief Interrupt Status Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_PSI5S_INTSTAT;

/** \brief Interrupt Status Register Global   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_INTSTATG_Bits B;             /**< \brief Bitfield access */
} Ifx_PSI5S_INTSTATG;

/** \brief Input and Output Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_IOCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_IOCR;

/** \brief Number of Frames Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_NFC_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_NFC;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_OCS_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_OCS;

/** \brief Pulse Generation Control Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_PGC_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_PGC;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_PROT_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_PROT;

/** \brief Receive Buffer Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RBUF_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_RBUF;

/** \brief Receiver Control Register A0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RCRA_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_RCRA;

/** \brief Receiver Control Register B0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RCRB_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_RCRB;

/** \brief Receive Data Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RDR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_RDR;

/** \brief Receive Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RDS_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_RDS;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RST_CTRLA_Bits B;            /**< \brief Bitfield access */
} Ifx_PSI5S_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RST_CTRLB_Bits B;            /**< \brief Bitfield access */
} Ifx_PSI5S_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_RST_STAT_Bits B;             /**< \brief Bitfield access */
} Ifx_PSI5S_RST_STAT;

/** \brief Send Control Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_SCR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_SCR;

/** \brief Send Data Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_SDR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_SDR;

/** \brief Target Address Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_TAR_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_TAR;

/** \brief Transmit Buffer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_TBUF_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_TBUF;

/** \brief Timestamp Count Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_TSCNTA_Bits B;               /**< \brief Bitfield access */
} Ifx_PSI5S_TSCNTA;

/** \brief Timestamp Count Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_TSCNTB_Bits B;               /**< \brief Bitfield access */
} Ifx_PSI5S_TSCNTB;

/** \brief Timestamp Capture Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_TSCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_PSI5S_TSCR;

/** \brief Timestamp Mirror Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_TSM_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_TSM;

/** \brief Watchdog Timer Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_WDT_Bits B;                  /**< \brief Bitfield access */
} Ifx_PSI5S_WDT;

/** \brief Write Hardware Bits Control Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PSI5S_WHBCON_Bits B;               /**< \brief Bitfield access */
} Ifx_PSI5S_WHBCON;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Psi5s_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_PSI5S_RST
{
       __IO Ifx_PSI5S_RST_CTRLA                 CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_PSI5S_RST_CTRLB                 CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_PSI5S_RST_STAT                  STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_PSI5S_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Psi5s_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PSI5S_ACCEN
{
       __IO Ifx_PSI5S_ACCEN_WRA                 WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PSI5S_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PSI5S_ACCEN_RDA                 RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PSI5S_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PSI5S_ACCEN_VM                  VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PSI5S_ACCEN_PRS                 PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_PSI5S_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Psi5s_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PSI5S object */
typedef volatile struct _Ifx_PSI5S
{
       __IO Ifx_PSI5S_CLC                       CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_PSI5S_OCS                       OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_PSI5S_ID                        ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_PSI5S_RST                       RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_PSI5S_PROT                      PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_PSI5S_PROT                      PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_PSI5S_ACCEN                     ACCEN;                  /**< \brief 40, */
       __IO Ifx_PSI5S_FDR                       FDR;                    /**< \brief 60, Fractional Divider Register*/
       __IO Ifx_PSI5S_FDRT                      FDRT;                   /**< \brief 64, Fractional Divider Register for Timestamp*/
       __IO Ifx_PSI5S_TSCNTA                    TSCNTA;                 /**< \brief 68, Timestamp Count Register A*/
       __IO Ifx_PSI5S_TSCNTB                    TSCNTB;                 /**< \brief 6C, Timestamp Count Register B*/
       __IO Ifx_PSI5S_GCR                       GCR;                    /**< \brief 70, Global Control Register*/
       __IO Ifx_PSI5S_NFC                       NFC;                    /**< \brief 74, Number of Frames Control Register*/
       __IO Ifx_PSI5S_FCNT                      FCNT;                   /**< \brief 78, Frame Counter Register*/
       __IO Ifx_PSI5S_IOCR                      IOCR;                   /**< \brief 7C, Input and Output Control Register*/
       __IO Ifx_PSI5S_RCRA                      RCRA[8];                /**< \brief 80, Receiver Control Register A0*/
       __IO Ifx_PSI5S_RCRB                      RCRB[8];                /**< \brief A0, Receiver Control Register B0*/
       __IO Ifx_PSI5S_WDT                       WDT[8];                 /**< \brief C0, Watchdog Timer Register 0*/
       __I  Ifx_PSI5S_TSCR                      TSCR[8];                /**< \brief E0, Timestamp Capture Register 0*/
       __I  Ifx_PSI5S_RDS                       RDS;                    /**< \brief 100, Receive Status Register*/
       __I  Ifx_PSI5S_RDR                       RDR;                    /**< \brief 104, Receive Data Register*/
       __I  Ifx_PSI5S_TSM                       TSM;                    /**< \brief 108, Timestamp Mirror Register*/
       __I  Ifx_PSI5S_TAR                       TAR;                    /**< \brief 10C, Target Address Register*/
       __IO Ifx_PSI5S_BAR                       BAR;                    /**< \brief 110, Base Address Register*/
       __IO Ifx_PSI5S_PGC                       PGC[8];                 /**< \brief 114, Pulse Generation Control Register 0*/
       __IO Ifx_PSI5S_CTV                       CTV[8];                 /**< \brief 134, Channel Trigger Value Register 0*/
       __IO Ifx_PSI5S_SCR                       SCR[8];                 /**< \brief 154, Send Control Register 0*/
       __IO Ifx_PSI5S_SDR                       SDR[8];                 /**< \brief 174, Send Data Register 0*/
       __IO Ifx_PSI5S_CDW                       CDW;                    /**< \brief 194, CPU Direct Write Register*/
       __IO Ifx_PSI5S_CON                       CON;                    /**< \brief 198, Control Register*/
       __IO Ifx_PSI5S_BG                        BG;                     /**< \brief 19C, Baud Rate Timer/Reload Register*/
       __IO Ifx_PSI5S_FDV                       FDV;                    /**< \brief 1A0, Fractional Divider Register*/
       __IO Ifx_PSI5S_FDO                       FDO;                    /**< \brief 1A4, Fractional Divider for Output CLK Register*/
       __IO Ifx_PSI5S_TBUF                      TBUF;                   /**< \brief 1A8, Transmit Buffer Register*/
       __I  Ifx_PSI5S_RBUF                      RBUF;                   /**< \brief 1AC, Receive Buffer Register*/
       __O  Ifx_PSI5S_WHBCON                    WHBCON;                 /**< \brief 1B0, Write Hardware Bits Control Register*/
       __I  Ifx_PSI5S_INTSTAT                   INTSTAT[8];             /**< \brief 1B4, Interrupt Status Register 0*/
       __O  Ifx_PSI5S_INTSET                    INTSET[8];              /**< \brief 1D4, Interrupt Set Register 0*/
       __O  Ifx_PSI5S_INTCLR                    INTCLR[8];              /**< \brief 1F4, Interrupt Clear Register 0*/
       __IO Ifx_PSI5S_INTEN                     INTEN[8];               /**< \brief 214, Interrupt Enable Register 0*/
       __IO Ifx_PSI5S_INP                       INP[8];                 /**< \brief 234, Interrupt Node Pointer Register 0*/
       __I  Ifx_PSI5S_INTOV                     INTOV;                  /**< \brief 254, Interrupt Overview Register*/
       __I  Ifx_PSI5S_INTSTATG                  INTSTATG;               /**< \brief 258, Interrupt Status Register Global*/
       __O  Ifx_PSI5S_INTSETG                   INTSETG;                /**< \brief 25C, Interrupt Set Register Global*/
       __O  Ifx_PSI5S_INTCLRG                   INTCLRG;                /**< \brief 260, Interrupt Clear Register Global*/
       __IO Ifx_PSI5S_INTENG                    INTENG;                 /**< \brief 264, Interrupt Enable Register Global*/
       __IO Ifx_PSI5S_INPG                      INPG;                   /**< \brief 268, Interrupt Node Pointer Register Global*/
       __I  Ifx_UReg_8Bit                       reserved_26C[3476];     /**< \brief 26C, \internal Reserved */
} Ifx_PSI5S;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPSI5S_REGDEF_H */
