/**********************************************************************************************************************
 * \file Slk_DAcq_Global.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SAFETYLITEKIT_DIGITAL_ACQUISITION_ACTUATION_SLK_DA_GLOBAL_H_
#define SAFETYLITEKIT_DIGITAL_ACQUISITION_ACTUATION_SLK_DA_GLOBAL_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxGtm_PinMap.h"
#include "IfxCcu6_TPwm.h"
#include "IfxGtm_Tom_Pwm.h"
#include "IfxGtm_Tim_In.h"
#include "IfxSmu_cfg.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/* Address offset between two TOM channels */
#define TOM_CHANNEL_OFFSET          ((uint32)(&GTM_TOM0_CH1_CTRL)-(uint32)(&GTM_TOM0_CH0_CTRL))
/* Address offset between CTRL (first TOM register) and CM0 register */
#define TOM_CM0_REG_OFFSET          ((uint32)(&GTM_TOM0_CH0_CM0 )-(uint32)(&GTM_TOM0_CH0_CTRL))
/* Address offset between CTRL (first TOM register) and CM1 register */
#define TOM_CM1_REG_OFFSET          ((uint32)(&GTM_TOM0_CH0_CM1 )-(uint32)(&GTM_TOM0_CH0_CTRL))


#define TICK_TOLERANCE              (uint8)1        /* The measured clock signal or PWM signal is out of the tolerance
                                                       range +/-1 timer ticks */
#define TIM_REDUNDANCY_MAX_DIFF     (uint8)5        /* Tolerance for TIM redundancy */

#define TOM_PWM_PERIOD              ((uint32)5000)  /* PWM period ticks for the TOM Fpwm = Ffxclk0/period */
#define TOM_DUTY_CYCLE              ((uint32)50)    /* PWM Duty Cycle for the TOM [percent] */

#define NUM_OF_LAM_EVENTS           1                       /* Number of LAM events that triggers the System Event */
#define IOM_DUTY_THRESHOLD          0.000005                /* Duty Cycle threshold of 1us */

#define CLOCK_DIVIDER               1

#define DACQ_MISSION_MONITOR_SIG    2

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    float32 pwmFrequency[DACQ_MISSION_MONITOR_SIG];
    float32 pwmDutyCylce[DACQ_MISSION_MONITOR_SIG];
    boolean doneFlag[DACQ_MISSION_MONITOR_SIG];
} DigitalAcqActStatusDatatype;

typedef enum
{
    noDigitalAcquisition = 0,
    initializeDAcqFuc0,
    initializeDAcqFuc1,
    initializeDAcqFuc2,
    initializeDAcqFuc3,
    initializeDAcqFuc4,
    initializeDActFuc0,
    initializeDActFuc1,
    initializeDActFuc2,
    initializeDActFuc3
} SlkDigitalAcqActFucSelection;
/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void alarmCheckGTMIOM (IfxGtm_Tom_Pwm_Driver *tomReferenceCh, Ifx_CCU6 *ccu61Reference);
void resetDAconfiguration(void);
void slkTomPwmConfigReadBack(const IfxGtm_Tom_Pwm_Config *config, IfxSmu_Alarm alarm);
void slkTimInConfigReadback(const IfxGtm_Tim_In_Config *config, IfxSmu_Alarm alarm);
void comparePwmFrequency(float32 missionPwmFreq, float32 monitorPwmFreq);
void comparePwmDutyCycle(float32 missionPwmDutyCycle, float32 monitorPwmDutyCycle);

#endif /* SAFETYLITEKIT_DIGITAL_ACQUISITION_ACTUATION_SLK_DA_GLOBAL_H_ */
