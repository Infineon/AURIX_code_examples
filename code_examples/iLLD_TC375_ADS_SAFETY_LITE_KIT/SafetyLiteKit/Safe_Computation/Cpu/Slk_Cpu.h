/**********************************************************************************************************************
 * \file Slk_Cpu.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SAFETYLITEKIT_SAFE_COMPUTATION_CPU_SLK_CPU_H_
#define SAFETYLITEKIT_SAFE_COMPUTATION_CPU_SLK_CPU_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "SafetyLiteKit/OneEye/Slk_OneEye_SMU.h"
#include "Ifx_Types.h"
#include "IfxPort.h"
#include "Ifx_reg.h"
#include "IfxDam_reg.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SLK_CPU2_ACCESS_PROTECTION_CONFIG_VALUE     0xFFFF00FF /* Block access to GETH DMAx */
#define SLK_CPU2_SPR_ADDR_L_CONFIG_VALUE            0x50000000
#define SLK_CPU2_SPR_ADDR_H_CONFIG_VALUE            0x5001BFE0

#define SLK_CPU2_DLMU_ADDR_L_CONFIG_VALUE           0x90020000
#define SLK_CPU2_DLMU_ADDR_H_CONFIG_VALUE           0x9002FFE0

#define SLK_CPU2_DAMRAM_L_CONFIG_VALUE              0x90400000
#define SLK_CPU2_DAMRAM_H_CONFIG_VALUE              0x90407FE0

#define SLK_CPU2_GETH_L_CONFIG_VALUE                0xF001D000
#define SLK_CPU2_GETH_H_CONFIG_VALUE                0xF001F0E0

#define SLK_CPXE_ENABLE_RANGE_CONFIG_VALUE          0x001

#define SLK_CPU2_FLIP_AN_EDITABLE_BIT               0xF   /* This variable is used to flip a bit within the editable part
                                                           * of the register */
#define SLK_FLIP_THE_SYSCON_REGISTER_TO_ENDINIT     0x4
#define SLK_CPU2_BTV_CONFIG_VALUE                   0x80300100
#define SLK_CPU2_BIV_CONFIG_VALUE                   0x805FE000
#define SLK_CPU2_ISP_CONFIG_VALUE                   0x50015B00

#define SLK_CPU2_PMA0_CONFIG_VALUE                  0x300
#define SLK_CPU2_PMA1_CONFIG_VALUE                  0x300
#define SLK_CPU2_PMA2_CONFIG_VALUE                  0xC000

#define SLK_CPU2_PCON0_CONFIG_VALUE                 0x0
#define SLK_CPU2_DCON0_CONFIG_VALUE                 0x0
#define SLK_CPU2_SEGEN_CONFIG_VALUE                 0x0
#define SLK_CPU2_SMACON_CONFIG_VALUE                0x0
#define SLK_CPU2_COMPAT_CONFIG_VALUE                0xFFFFFFEF
#define SLK_CPU2_SYSCON_CONFIG_VALUE                0x0
#define SLK_CPU2_TPS_EXTIM_ENTRY_LVAL_CONFIG_VALUE  0x0
#define SLK_CPU2_TPS_EXTIM_EXIT_LVAL_CONFIG_VALUE   0x0

#define CPU2_PSPR_BASE_ADDR                         0xC0000000   /* CPU2 PSPR (local access) */
#define CPU2_DLMU_BASE_ADDR                         0x90020000   /* CPU2 DLMU */

#define SLK_PATTERN_A                               0xAAAAAAAA
#define SLK_PATTERN_5                               0x55555555

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef enum
{
    defaultTest = 0,
    SbstFullTest,
    SbstSlicesTest
} SbstTestSlection;

typedef struct
{
    boolean SBST_ERROR;
    SbstTestSlection sbstTestSelection;
} SbstStatus;

typedef enum
{
    noneSelected = 0,
    apCheck,
    mpuInitCheck,
    codeMpuCheck,
    dataMpuCheck,
    sfrTest
} CpuTestSelection;

typedef struct
{
    boolean AP_CHECK_FLAG;
    boolean MPU_INIT_FLAG;
    boolean CODE_MPU_FLAG;
    boolean DATA_MPU_FLAG;
    boolean SFR_FLAG;
    CpuTestSelection selectCpuTest;
    SbstStatus sbstStatus;
} CpuStatusFlag;

IFX_EXTERN CpuStatusFlag g_CpuStatus;

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
boolean slkReadbackCpuRegister(uint32 reg, uint32 configValue);
void slkCpuAccessProtection(void);
void slkCpuBusMpuInitCheck(void);
void slkCpuCodeMpuCheck(void);
void slkCpuDataMpuCheck(void);
void slkCpuSfrTest(void);
boolean nonLSCpuInternalBusTest(uint32 * csa_area, uint32 pattern);
void initSBST(void);
void runSBST(void);
void runCpuSafeComputation(void);

/* Function to set the given Protection Set as active.
 * This function needs to be declared as inline because the Program Status Word (PSW) is one of the registers
 * automatically saved to the Context Save Area (CSA) when a function is called.
 * If this function was not declared as inline, the Upper Context (16 registers including the PSW) would be
 * automatically saved to the CSA and re-loaded when the function return, thus losing the change in the PSW.
 */
IFX_INLINE void set_active_protection_set(uint8 protectionSet)
{
    Ifx_CPU_PSW PSWRegisterValue;
    PSWRegisterValue.U = __mfcr(CPU_PSW);               /* Get the Program Status Word (PSW) register value         */
    PSWRegisterValue.B.PRS = protectionSet;             /* Set the PRS bitfield to enable the Protection Set        */
    __mtcr(CPU_PSW, PSWRegisterValue.U);                /* Set the Program Status Word (PSW) register               */
}

#endif /* SAFETYLITEKIT_SAFE_COMPUTATION_CPU_SLK_CPU_H_ */
