/**********************************************************************************************************************
 * \file Slk_TrapHandler.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/


/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Cpu/Std/Ifx_Types.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#include "Ifx_Cfg.h"
#include "IfxCpu_Trap.h"
#include "IfxSmu_reg.h"
#include "IfxCpu_cfg.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#ifndef SAFETYLITEKIT_SAFE_COMPUTATION_CPU_SLK_TRAPHANDLER_H
#define SAFETYLITEKIT_SAFE_COMPUTATION_CPU_SLK_TRAPHANDLER_H 1

/*define a hook for internal protection error traps*/
#define IFX_CFG_CPU_TRAP_IPE_HOOK(trapWatch)    ((void)internalProtectionHook(trapWatch))

/*define a hook for instruction error traps*/
#define IFX_CFG_CPU_TRAP_IE_HOOK(trapWatch)     ((void)instructionErrorsHook(trapWatch))

/*define a hook for bus error traps*/
#define IFX_CFG_CPU_TRAP_BE_HOOK(trapWatch)     ((void)busHook(trapWatch))

/*define a hook for non-maskable interrupt traps*/
#define IFX_CFG_CPU_TRAP_NMI_HOOK(trapWatch)    ((void)nonMaskableInterruptHook(trapWatch))

/*define how many context save areas can be dumped*/
#define CSA_CAPTURE_LIMIT   (20u)

/*define how many stacks can be dumped for upper context dumps*/
#define STACK_CAPTURE_LIMIT (10u)

/*define how many words should be captured from each stack*/
#define STACK_CAPTURE_SIZE  (8u)

#define CSA_UPPER_CONTEXT   (1)
#define CSA_LOWER_CONTEXT   (0)

#define IFX_CFG_CPU_TRAP_ASSERT_HOOK(trapWatch)     ((void)assertHook(trapWatch))
/*********************************************************************************************************************/
/*-------------------------------------------------Type Definitions--------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct {
     Ifx_CPU_PCXI CSA_PCXI;
     Ifx_CPU_PSW CSA_PSW;
     Ifx_CPU_A CSA_A10;
     Ifx_CPU_A CSA_A11;
     Ifx_CPU_D CSA_D8;
     Ifx_CPU_D CSA_D9;
     Ifx_CPU_D CSA_D10;
     Ifx_CPU_D CSA_D11;
     Ifx_CPU_A CSA_A12;
     Ifx_CPU_A CSA_A13;
     Ifx_CPU_A CSA_A14;
     Ifx_CPU_A CSA_A15;
     Ifx_CPU_D CSA_D12;
     Ifx_CPU_D CSA_D13;
     Ifx_CPU_D CSA_D14;
     Ifx_CPU_D CSA_D15;
}Ifx_CSA_Upper;

typedef struct {
     Ifx_CPU_PCXI CSA_PCXI;
     Ifx_CPU_A CSA_A11;
     Ifx_CPU_A CSA_A2;
     Ifx_CPU_A CSA_A3;
     Ifx_CPU_D CSA_D0;
     Ifx_CPU_D CSA_D1;
     Ifx_CPU_D CSA_D2;
     Ifx_CPU_D CSA_D3;
     Ifx_CPU_A CSA_A4;
     Ifx_CPU_A CSA_A5;
     Ifx_CPU_A CSA_A6;
     Ifx_CPU_A CSA_A7;
     Ifx_CPU_D CSA_D4;
     Ifx_CPU_D CSA_D5;
     Ifx_CPU_D CSA_D6;
     Ifx_CPU_D CSA_D7;
}Ifx_CSA_Lower;

typedef union {
    Ifx_CSA_Upper UPPER;
    Ifx_CSA_Lower LOWER;
} Ifx_CSA;

/*********************************************************************************************************************/
/*-----------------------------------------------Function Prototypes-------------------------------------------------*/
/*********************************************************************************************************************/
void csaCapture(void);
void piearPietrCapture(void);
void diearDietrCapture(void);
void datrDeaddCapture(void);
void agCapture(void);

void internalProtectionHook(IfxCpu_Trap trapInfo);
void instructionErrorsHook(IfxCpu_Trap trapInfo);
void busHook(IfxCpu_Trap trapInfo);
void assertHook(IfxCpu_Trap trapInfo);
void nonMaskableInterruptHook(IfxCpu_Trap trapInfo);

#endif /*SAFETYLITEKIT_SAFE_COMPUTATION_CPU_SLK_TRAPHANDLER_H*/
