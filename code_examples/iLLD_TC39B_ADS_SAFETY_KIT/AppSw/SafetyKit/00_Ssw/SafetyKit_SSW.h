/**********************************************************************************************************************
 * \file SafetyKit_SSW.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SAFETYKIT_SSW_H_
#define SAFETYKIT_SSW_H_ 1
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "SafetyKit_Cfg.h"
#include "Ifx_Types.h"
#include "IfxCpu.h"

#include "IfxPms_reg.h"
#include "IfxScuRcu.h"
#include "IfxScu_reg.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SSW_STATUS_DATA_ADDRESS (*(volatile SswStatusXramType*)PMS_XRAM)

#define SAFETKIT_LBIST_MAX_RUNS     (3)
#define SAFETKIT_FW_CHECK_MAX_RUNS  (2)

#define LAST_IFXSCURCU_RESETTYPE_ENUM IfxScuRcu_ResetType_undefined /* Validate this parameter in case of iLLD update*/

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/
/* Reset type with modification for SafetyKit */
typedef enum
{
    safetyKitResetTypeColdpoweron = IfxScuRcu_ResetType_coldpoweron,          /* Cold Power On Reset */
    safetyKitResetTypeSystem      = IfxScuRcu_ResetType_system,               /* system Reset */
    safetyKitResetTypeApplication = IfxScuRcu_ResetType_application,          /* application reset */
    safetyKitResetTypeWarmpoweron = IfxScuRcu_ResetType_warmpoweron,          /* Warm Power On Reset */
    safetyKitResetTypeDebug       = IfxScuRcu_ResetType_debug,                /* debug reset */
    safetyKitResetTypeUndefined   = IfxScuRcu_ResetType_undefined,            /* Undefined Reset */
    safetyKitResetTypeLbist       = LAST_IFXSCURCU_RESETTYPE_ENUM + 10        /* LBIST Reset, adding 10 to be
                                                                                 sure enum value is not assigned. */
} SafetyKitResetType;

typedef enum
{
    notEvaluated = 0,
    failed,
    passed
} SswSMStatusType;
/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    boolean             cpuSafeState;       /* CPU Safe state ( 1- Safe, 0 - Non-Safe) */
    SafetyKitResetType  resetType;          /* Reset Type */
    IfxScuRcu_Trigger   resetTrigger;       /* reset Trigger */
    uint16              resetReason;        /* Reset Reason */
} SafetyKitResetCode;

typedef struct
{
    uint8               lbistAppSwReq;      /* Amount of LBIST requests (by application software) */
    uint8               lbistRuns;          /* Amount of LBIST executions */
    uint8               mcuFwcheckRuns;     /* Amount of MCU_FW_CHECK executions*/
    Ifx_SCU_RSTSTAT     RSTSTAT;            /* RSTSTAT register copy */
} SswStatusXramType;

typedef struct
{
    SswSMStatusType    lbistStatus;
    SswSMStatusType    monbistStatus;
    SswSMStatusType    mcuFwcheckStatus;
    SswSMStatusType    mcuStartupStatus;
    SswSMStatusType    aliveAlarmTestStatus;
    SswSMStatusType    regMonitorTestStatus;
    SswSMStatusType    mbistStatus;
} SswStatusType;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN volatile SswStatusXramType *g_sswStatusXram;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void runSafeAppSwStartup(void);
void safetyKitTriggerColdPorst(void);
void safetyKitTriggerWarmPorst(void);
void safetyKitTriggerSwReset(SafetyKitResetType resetType);
void safetyKitGotoStandby(void);

#endif /* SAFETYKIT_SSW_H_ */
