/**********************************************************************************************************************
 * \file SafetyKit_Main.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SAFETYKIT_MAIN_H_
#define SAFETYKIT_MAIN_H_ 1
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "Ifx_Console.h"

#include "SafetyKit_Cfg.h"
#include "AppKit_Main.h"
#include "SafetyKit_SSW.h"
#include "SMU.h"
#include "SafetyKit_DieTemp.h"
#include "SafetyKit_VoltMon.h"
#include "SafetyKit_InternalWatchdogs.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/
typedef enum
{
    noAnalogAcquisitionMode         = 0,
    initAAcqFuc0Mode           = 1,
    runAAcqFuc0Mode            = 2,
    initAAcqFuc1Mode           = 3,
    runAAcqFuc1Mode            = 4,
    initAAcqFuc2Mode           = 5,
    runAAcqFuc2Mode            = 6,
    initAAcqFuc3Mode           = 7,
    runAAcqFuc3Mode            = 8,
    initAAcqFuc4BrokenWRMode   = 9,
    runAAcqFuc4BrokenWRMode    = 10
} SafetyKitAnalogAcquisitionMode;

typedef enum
{
    noDigitalAcquisitionOrActuation    = 0,
    initializeDAcqFuc0,
    runDAcqFuc0,
    initializeDAcqFuc1,
    runDAcqFuc1,
    initializeDAcqFuc2,
    runDAcqFuc2,
    initializeDActFuc0,
    runDActFuc0,
    initializeDActFuc1,
    runDActFuc1,
    initializeDActFuc2,
    runDActFuc2,
    initializeDActFuc3,
    runDActFuc3
} SafetyKitDigitalAcqActMode;

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    float32 timeDifference;
    float32 timeMaximumThreshold;
    float32 timeMinimumThreshold;
} SafetyKitClockPlausibility;

typedef struct
{
    float32 angle[2];
    float32 angleCover[2];
    float32 angleMaximumThreshold;
    float32 angleMinimumThreshold;
} SafetyKitSentAngle;

typedef struct
{
    boolean             goToStandbyMode;
    boolean             triggerStmAlarm;
    boolean             triggerSwReset;
    SafetyKitResetType swResetResetType;
    boolean             stopCpuWatchdogService;
    boolean             stopSafetyWatchdogService;
    boolean             triggerSmuAlarm;
    uint8               triggerSmuAlarmGroup;
    uint8               triggerSmuAlarmNumber;
} SafetyKitRunTaskType;

typedef struct
{
    boolean                             safetyKitInitDone;
    SafetyKitResetCode                  resetCode;
    boolean                             wakeupFromStandby;
    SswStatusType                       sswStatus;
    boolean                             unlockConfig;
    SmuStatusType                       regMonitorTestAllFB;
    SmuExecutionStatusType              smuStatus;
    SmuAlarmPendingType                 smuAlarmPending;
    SafetyKitRunTaskType                safetyKitRunTask;
    DieTempStatusType                   dieTempStatus;
    VoltStatusType                      voltStatus;
    SafetyKitAnalogAcquisitionMode     analogAcquisitionMode;
    SafetyKitDigitalAcqActMode         digitalAcqActMode;
    SafetyKitClockPlausibility         qspiEofandSofTimeDifference;
    SafetyKitSentAngle                 sentRedundancy;
} SafetyKitStatusType;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN SafetyKitStatusType g_SafetyKitStatus;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initSafetyKit(void);
void runSafetyKitStmIsr(App_Cpu *lcl_AppCpu, IfxCpu_ResourceCpu cpuIndex);
void runSafetyKitEndlessLoopCpu0(void);
void runSafetyKitEndlessLoopCpu1(void);

#endif /* SAFETYKIT_MAIN_H_ */
