/**********************************************************************************************************************
 * \file SafetyKit_DA_global.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SAFETYKIT_DA_GLOBAL_H_
#define SAFETYKIT_DA_GLOBAL_H_ 1
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "SafetyKit_Main.h"
#include "SafetyKit_Cfg.h"

#include "IfxGtm_PinMap.h"
#include "IfxCcu6_TPwm.h"
#include "IfxGtm_Tom_Pwm.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define EXT_CLK0_FREQ               ((float32)10000) /* [Hz] */
#define EXT_CLK_MULTIPLIER          (2) /* Multiply frequency by two as there is a divider by two in hardware */

/* Address offset between two TOM channels */
#define TOM_CHANNEL_OFFSET          ((uint32)(&GTM_TOM0_CH1_CTRL)-(uint32)(&GTM_TOM0_CH0_CTRL))
/* Address offset between CTRL (first TOM register) and CM0 register */
#define TOM_CM0_REG_OFFSET          ((uint32)(&GTM_TOM0_CH0_CM0 )-(uint32)(&GTM_TOM0_CH0_CTRL))
/* Address offset between CTRL (first TOM register) and CM1 register */
#define TOM_CM1_REG_OFFSET          ((uint32)(&GTM_TOM0_CH0_CM1 )-(uint32)(&GTM_TOM0_CH0_CTRL))
/* Address offset between CTRL (first TOM register) and SR0 register */
#define TOM_SR0_REG_OFFSET          ((uint32)(&GTM_TOM0_CH0_SR0 )-(uint32)(&GTM_TOM0_CH0_CTRL))
/* Address offset between CTRL (first TOM register) and SR1 register */
#define TOM_SR1_REG_OFFSET          ((uint32)(&GTM_TOM0_CH0_SR1 )-(uint32)(&GTM_TOM0_CH0_CTRL))


#define TICK_TOLERANCE              (uint8)1        /* The measured clock signal or PWM signal is out of the tolerance
                                                       range +/-1 timer ticks */
#define TIM_REDUNDANCY_MAX_DIFF     (uint8)5        /* Tolerance for TIM redundancy */

#define TOM_PWM_PERIOD              ((uint32)5000)  /* PWM period ticks for the TOM */
#define TOM_DUTY_CYCLE              ((uint32)50)    /* PWM Duty Cycle for the TOM [percent] */

#define ATOM_CCU6_PWM_PERIOD        ((uint32)5000)  /* PWM period ticks for the ATOM and CCU6 */
#define ATOM_CCU6_DUTY_CYCLE        ((uint32)50)    /* PWM Duty Cycle for the ATOM and CCU6 [percent] */

#define NUM_OF_LAM_EVENTS           1                       /* Number of LAM events that triggers the System Event */
#define IOM_DUTY_THRESHOLD          0.000001                /* Duty Cycle threshold of 1us */

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef struct
{
    boolean timMissionMeasDoneFlag;
    boolean timMonitorMeasDoneFlag;
    uint32  timMissionPeriodTick;
    uint32  timMonitorPeriodTick;
    uint32  timMissionpulseLengthTick;
    uint32  timMonitorpulseLengthTick;
    boolean timMissionMeasDoneFlagDacqFuc2;
    boolean ccu6MonitorMeasDoneFlag;
    float32 timMissionMeasPwmFreqHzDacqFuc2;      /* Calculated frequency of the measured PWM signal       */
    float32 timMissionMeasPwmDutyCycleDacqFuc2;   /* Calculated duty cycle of the measured PWM signal      */
    float32 ccu6MonitorMeasPwmFreqHz;             /* Calculated frequency of the measured PWM signal       */
    float32 ccu6MonitorMeasPwmDutyCycle;          /* Calculated duty cycle of the measured PWM signal      */
    float32 ccu6MissionMeasPwmFreqHz;             /* Calculated frequency of the measured PWM signal       */

    boolean gpt12MonitorMeasDoneFlagDacqFuc3;
    boolean ccu6MissionMeasDoneFlag;
    float32 ccu6MissionMeasPwmDutyCycle;          /* Calculated duty cycle of the measured PWM signal      */
    float32 gpt12MonitorMeasPwmFreqHz;
} DigitalAcqActStatusDatatype;
/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initEclkMonitoring(void);
void alarmCheckGTMIOM (IfxGtm_Tom_Pwm_Driver *tomReferenceCh, Ifx_CCU6 *ccu61Reference);
void resetDAconfiguration(void);

#endif /* SAFETYKIT_DA_GLOBAL_H_ */
