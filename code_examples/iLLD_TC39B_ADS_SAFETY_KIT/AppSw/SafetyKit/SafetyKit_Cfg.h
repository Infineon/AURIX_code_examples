/**********************************************************************************************************************
 * \file SafetyKit_Cfg.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SAFETYKIT_CFG_H_
#define SAFETYKIT_CFG_H_ 1
/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxCpu.h"
#include "Configuration.h"
#include "ConfigurationIsr.h"
#include "Cpu/Irq/IfxCpu_Irq.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SAFETYKIT_CFG_SSW_ENABLE_LBIST_BOOT             1
#define SAFETYKIT_CFG_SSW_ENABLE_LBIST_APPSW            1
#define SAFETYKIT_CFG_SSW_ENABLE_MONBIST                1
#define SAFETYKIT_CFG_SSW_ENABLE_MCU_FW_CHECK           1
#define SAFETYKIT_CFG_SSW_ENABLE_MCU_STARTUP            1
#define SAFETYKIT_CFG_SSW_ENABLE_ALIVE_ALARM_TEST       1
#define SAFETYKIT_CFG_SSW_ENABLE_REG_MONITOR_TEST       1
#define SAFETYKIT_CFG_SSW_ENABLE_MBIST                  1
#define SAFETYKIT_CFG_INIT_CPU_WDT                      1 /* Configure if the CPU Watchdogs should be initialized and
                                                                                              serviced by every CPU */
#define SAFETYKIT_CFG_INIT_SAFETY_WDT                   1 /* Configure if the Safety Watchdog should be initialized
                                                                           and serviced by CPU_WHICH_RUN_SAFETY_WDT */
#define SAFETYKIT_CFG_STM_MODULE_WHICH_GETS_DISABLED    1 /* Configure the STM Module which gets disabled first to
                                                                                          trigger STM monitor alarm */

#define MAX_DIE_TEMP_DIFF   9.0 /* [Â°C] difference in the redundant die temperature as specified in safety manual */
#define SMU_ALARM_WHICH_TRIGGERS_NMI   IfxSmu_Alarm_SCU_Watchdog_TimeOut

/*********************************************************************************************************************/
/*-----------------------------------------Pin and channel definition macros-----------------------------------------*/
/*********************************************************************************************************************/
#define STARTUP_FINISHED_LED    LED0_PORT  /* Pin configuration for the LED used for successful SafetyKit initial    */
#ifndef LIFEHOLD_LED
/* we set our Lifehold to LED1 */
#define LIFEHOLD_LED            LED1_PORT  /* Pin configuration for the LED used to visualize, the system is alive */
#endif
#define SMU_ALARM_DETECTED_LED  LED2_PORT  /* Pin configuration for the LED used to visualize an SMU alarm */
#define EMERGENCY_STOP_LED_PIN  LED3_PORT  /* Pin configuration for the LED used to visualize active Emergency Stop */

#define ISR_MONITOR_LED_D8                 IfxPort_P33_10  /* LED D8 pin on evaluation board*/
#define LED_D9_PORT                        &MODULE_P00, 11 /* LED D9 pin on evaluation board */

#define STALL_CPU_PIN                      &IfxScu_REQ2B_P02_1_IN /* Pin configuration for the Stall CPu button (S3) */
#define INJECT_SBE_ERROR_PFLASH            IfxPort_P33_6   /* Pin configuration for to inject Pflash Update error    */
#define INJECT_DBE_ERROR_PFLASH            IfxPort_P23_3   /* Pin configuration for to inject Pflash Update error    */
#define INJECT_MBE_ERROR_PFLASH            IfxPort_P23_0


#define PORT_LOOPBACK_MISSION              IfxPort_P33_5 /* CCF is avoided on the selected port pins */
#define PORT_LOOPBACK_MONITOR              IfxPort_P00_4 /* CCF is avoided on the selected port pins */

#define PORT_REDUNDANCY_MISSION            IfxPort_P02_3 /* CCF is avoided on the selected port pins */
#define PORT_REDUNDANCY_MONITOR            IfxPort_P23_2 /* CCF is avoided on the selected port pins */

#define ADDITIONAL_BUTTON1                 IfxPort_P00_1
#define ADDITIONAL_BUTTON2                 IfxPort_P21_5

/* Macros for Analog Acquisition Functional Use Cases */
#define RV1_NTC_EVADC_PIN                  IfxEvadc_G0CH3_AN3_IN       /* EVADC input pin */
#define RV2_NTC_EVADC_PIN                  IfxEvadc_G9CH10_P00_2_IN    /* EVADC input pin */
#define VAREF_EVADC_PIN                    IfxEvadc_G0CH0_AN0_IN       /* EVADC input pin */

#define RV1_NTC_EDSADC_CH0N_PIN            IfxEdsadc_DS0NA_AN3_IN      /* EDSADC input pin */
#define RV2_NTC_EDSADC_CH5P_PIN            IfxEdsadc_DS5PA_P00_2_IN    /* EDSADC input pin */
#define VAREF_EDSADC_CH3P_PIN              IfxEdsadc_DS3PA_AN0_IN      /* EDSADC input pin */

#define UV_SIMULATION_ENCODER_CNT_INPUT    IfxGpt120_T2INA_P00_7_IN /* Count input signal (macro is not used) */
#define UV_SIMULATION_ENCODER_DIR_INPUT    IfxGpt120_T2EUDA_P00_8_IN /* Direction input signal (macro is not used) */

#define UV_SIMULATION_PWM_OUT1             IfxGtm_ATOM1_0_TOUT0_P02_0_OUT /* ATOM Ch and pin used for UV simulation */
#define UV_SIMULATION_PWM_OUT2             IfxGtm_ATOM1_2_TOUT33_P33_11_OUT/* ATOM Ch and pin used for UV simulation */
#define UV_SIMULATION_ATOM_ADC_TRIGGER     IfxGtm_ATOM1_6N_TOUT116_P02_9_OUT /* ATOM Ch and pin used for UV simulation,
                                                                    Note: parameters of function call IfxGtm_Trig_toEVadc
                                                                       need to be adapted if this macro gets modified */
#define UV_SIMULATION_CLOCK_SOURCE         IfxGtm_Cmu_Clk_0 /* Used clock for ATOM channels in UV simulation */

#define UV_SIM_SIG1_EVADC_PIN              IfxEvadc_G2CH3_P40_12_IN    /* EVADC input pin i.e. AN19 */
#define UV_SIM_SIG2_EVADC_PIN              IfxEvadc_G11CH9_P40_12_IN   /* EVADC input pin i.e. AN19 */

#define BROKEN_WIRE_POTI_EVADC_PIN         IfxEvadc_G3CH1_P40_1_IN     /* EVADC input pin */
#define BROKEN_WIRE_POTI_EDSADC_CH2N_PIN   IfxEdsadc_DS2NB_P40_1_IN    /* EDSADC input pin */

/* Macros for Digital Acquisition and Digital Actuation Functional Use Cases */
#define DA_TIM_CLOCK_SOURCE           IfxGtm_Cmu_Clk_0
#define DA_TOM_CLOCK_SOURCE           IfxGtm_Tom_Ch_ClkSrc_cmuFxclk0

#define GTM_TIM_MISSION               IfxGtm_TIM3_0_P02_8_IN
#define GTM_TIM_MONITOR               IfxGtm_TIM2_0_P33_12_IN
#define GTM_TIM_MISSION_FUC2          IfxGtm_TIM2_0_P33_12_IN

#define GTM_TOM_SAFE_PIN              IfxGtm_TOM0_4_TOUT9_P00_0_OUT
#define GTM_TOM_REF_PIN               IfxGtm_TOM1_10_TOUT2_P02_2_OUT

#define IOM_MONITOR_INPUT             IfxIom_MonInput_p33_1
#define IOM_MONITOR_PIN               IfxPort_P33_1 /* Port pin for IOM monitor channel input */

#define IOM_GTM_REFERENCE_INPUT       IfxIom_RefInput_gtmTout2

#define GTM_ATOM_SAFE_PIN             IfxGtm_ATOM0_0_TOUT9_P00_0_OUT
#define CCU6_REF_PIN                  IfxCcu61_CC61_P00_3_OUT

#define CCU6_OUTPUT_MISSION_PIN       IfxCcu60_COUT63_P00_0_OUT
#define CCU6_INPUT_MONITOR_PIN        IfxCcu61_CC62INC_P00_9_IN
#define CCU6_INPUT_MISSION_PIN        IfxCcu61_CC62INC_P00_9_IN

#define IOM_CCU6_REFERENCE_INPUT      IfxIom_RefInput_ccu61Cc61

#define GTM_TIM_ECKL_INPUT            IfxGtm_TIM2_5_P15_2_IN
#define GTM_ECLK_OUTPUT_PIN           IfxPort_P23_1

/* Angle Sensor 1 define */
#define SENT_CH4B_PIN_IN              IfxSent_SENT4B_P00_5_IN
#define SPC_CH4_PIN_OUT               IfxSent_SPC4_P00_5_OUT
#define SPC_PULSE_CH4B_TRIGGER_INPUT  IfxGtm_TOM2_6N_TOUT86_P14_6_OUT

/* Angle Sensor 2 defines */
#define SENT_CH9B_PIN_IN              IfxSent_SENT9B_P00_10_IN
#define SPC_CH9_PIN_OUT               IfxSent_SPC9_P00_10_OUT
#define SPC_PULSE_CH9B_TRIGGER_INPUT  IfxGtm_TOM0_6_TOUT59_P20_0_OUT

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------ISR Service providers-------------------------------------------------*/
/*********************************************************************************************************************/
/* Overview about Safety Demo tasks and their assigned CPU cores: */
#define CPU_WHICH_RUN_PMS_TASKS               0  /* CPU for PMS voltage measurements and the undervoltage simulation */
#define CPU_WHICH_RUN_DMA_TRANSACTION         0  /* CPU which initializes the DMA module and channel for a data move */
#define CPU_WHICH_RUN_CLK_PLAUS_SM           0
#define ISR_PROVIDER_ISR_MONITOR              0
#define CPU_WHICH_RUNS_ANALOG_ACQUISITION     0 /* CPU for Analog Acquisition FUCs and which services all interrupts.*/

/* The CPU which services the EVADC RV1 and RV2 NTC channel interrupt used in Analog Acquisition FUC0 */
#define ISR_PROVIDER_EVADC_RV1_NTC_AA_FUC0            CPU_WHICH_RUNS_ANALOG_ACQUISITION
#define ISR_PROVIDER_EVADC_RV2_NTC_AA_FUC0            CPU_WHICH_RUNS_ANALOG_ACQUISITION

/* The CPU which services the EVADC RV1 NTC channel interrupt used in Analog Acquisition FUC2 */
#define ISR_PROVIDER_EVADC_RV1_NTC_AA_FUC2            CPU_WHICH_RUNS_ANALOG_ACQUISITION

/* The CPU which services the undervoltage simulation signal 1/2 interrupt for Analog Acquisition FUC3 */
#define ISR_PROVIDER_EVADC_UV_SIM_SIG1_AA_FUC3        CPU_WHICH_RUNS_ANALOG_ACQUISITION
#define ISR_PROVIDER_EVADC_UV_SIM_SIG2_AA_FUC3        CPU_WHICH_RUNS_ANALOG_ACQUISITION

/* The CPU which services the EVADC Broken wire channel interrupt used in Analog Acquisition FUC4 */
#define ISR_PROVIDER_EVADC_BRK_WR_CH_AA_FUC4          CPU_WHICH_RUNS_ANALOG_ACQUISITION

/* The CPU which services the EVADC Broken wire signal out of area interrupt for Analog Acquisition FUC4 */
#define ISR_PROVIDER_EVADC_BRK_WR_BOUNDARY_AA_FUC4    CPU_WHICH_RUNS_ANALOG_ACQUISITION

/* Define the CPU which runs all Digital Acquisition and Digital Actuation FUCs and which services all interrupts. */
#define CPU_WHICH_RUNS_DIGITAL_ACQ_ACT                  1

/* The CPU which services the TIM ECKL monitoring interrupt used in all Digital Acquisition and Digital Actuation */
#define ISR_PROVIDER_GTM_TIM_ECLK_MON                   CPU_WHICH_RUNS_DIGITAL_ACQ_ACT
#define ISR_PROVIDER_GTM_TIM_MISSION_DACQ_FUC0          CPU_WHICH_RUNS_DIGITAL_ACQ_ACT
#define ISR_PROVIDER_GTM_TIM_MONITOR_DACQ_FUC0          CPU_WHICH_RUNS_DIGITAL_ACQ_ACT
#define ISR_PROVIDER_GTM_TIM_MISSION_DACQ_FUC1          CPU_WHICH_RUNS_DIGITAL_ACQ_ACT
#define ISR_PROVIDER_CCU6_MONITOR_DACQ_FUC1             CPU_WHICH_RUNS_DIGITAL_ACQ_ACT

#define ISR_PROVIDER_GTM_TIM_MISSION_DACT_FUC2          CPU_WHICH_RUNS_DIGITAL_ACQ_ACT
#define ISR_PROVIDER_GPT12_MONITOR_QACQ_FUC2_DACT_FUC3  CPU_WHICH_RUNS_DIGITAL_ACQ_ACT
#define ISR_PROVIDER_CCU6_MISSION_DACT_FUC3             CPU_WHICH_RUNS_DIGITAL_ACQ_ACT

/* The CPU which service the DTS Service Request where functions/variables are located.  */
#define CPU_WHICH_RUN_DTS                               1

/* The CPU which service the Pflash SM  */
#define CPU_WHICH_RUN_PFLASH_SM                         1

/* The CPU which service the QSPI safe communication  */
#define CPU_WHICH_RUN_MASTER_QSPI_SAFE_COMM             2
#define CPU_WHICH_RUN_SLAVE_QSPI_SAFE_COMM              3

/* The CPU which takes care about Port loopback and port redundancy */
#define CPU_WHICH_RUN_PORT_SM_TASKS                    3

/* The CPU which service the SENT redundancy  */
#define CPU_WHICH_RUN_SENT_SPC_TASKS                    3

/* Must be different than CPU_WHICH_SERVICE_TFT and CPU_WHICH_RUN_SMU_ISRx (x = 1-3) */
#if CPU_WHICH_SERVICE_TFT > 0
/* Define the CPU which service the safety watchdog where functions/variables are located.  */
#define CPU_WHICH_RUN_SAFETY_WDT                        (CPU_WHICH_SERVICE_TFT - 2)
#else
/* Define the CPU which service the safety watchdog where functions/variables are located.  */
#define CPU_WHICH_RUN_SAFETY_WDT                        (CPU_WHICH_SERVICE_TFT + 2)
#endif

/* ACS_SHELL for serial communication (terminal output) is running on CPU4 define in Configuration.h of AppKit*/

/* Must be the same as CPU_WHICH_RUN_SMU to continue TLF servicing while stalling the CPUs via the STALL_CPU button */
/* CPU_WHICH_SERVICE_TFT runs on CPU5 define in Configuration.h by AppKit */
/* The CPU which service the SMU Service Request 0 where functions/variables are located.  */
#define CPU_WHICH_RUN_SMU                               CPU_WHICH_SERVICE_TFT

/* Define the CPU which service the TLF35584 and where functions/variables are located.  */
#define CPU_WHICH_RUN_TLF                               CPU_WHICH_RUN_SMU

/* Define the CPU which service the LIFEHOLD_LED */
#define CPU_WHICH_RUN_LIFEHOLD_LED                      5

/*********************************************************************************************************************/
/*--------------------------------------------------ISR Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#ifndef ISR_ASSIGN
/* Build the ISR configuration object
 * param no interrupt priority
 * param cpu assign CPU number
 */
#define ISR_ASSIGN(no, cpu)  ((no << 8) + cpu)
#endif /* ISR_ASSIGN */

#ifndef ISR_PRIORITY
/* Extract the priority out of the ISR object */
#define ISR_PRIORITY(no_cpu) (no_cpu >> 8)
#endif /* ISR_PRIORITY */

#ifndef ISR_PROVIDER
/* Extract the service provider  out of the ISR object */
#define ISR_PROVIDER(no_cpu) (no_cpu % 8)
#endif /* ISR_PROVIDER */

/* Macro to get type of service of coreId */
#define IRQ_GET_TOS(coreId) (coreId ? (IfxSrc_Tos)(coreId+1) : (IfxSrc_Tos)(coreId))
/* IfxCpu_Irq_getTos() is also available */

/* Interrupt priority configuration for CPU.
 * The interrupt priority range is [1,255]
 */
#define ISR_PROVIDER_ERU_IN2                      1   /* ERU_IN2 interrupt provider */
/* Priorities 1 - 4 reserved for AppKit */
#define ISR_PRORITY_SMU_ISR_0                     5
#define ISR_PRORITY_SMU_ISR_1                     6
#define ISR_PRORITY_SMU_ISR_2                     7

#define ISR_PRIORITY_DMARP0ISR                    16
#define ISR_PRIORITY_DMACH0ISR                    17

/* Priority for the Analog Acquisition (AA) example */
#define ISR_PRIORITY_EVADC_RV1_NTC_AA_FUC0      18 /* EVADC RV1 NTC channel interrupt for AA FUC0 */
#define ISR_PRIORITY_EVADC_RV2_NTC_AA_FUC0      19 /* EVADC RV2 NTC channel interrupt for AA FUC0 */
#define ISR_PRIORITY_EVADC_RV1_NTC_AA_FUC2      20 /* EVADC RV1 NTC channel interrupt for AA FUC2 */
#define ISR_PRIORITY_EVADC_UV_SIM_SIG1_AA_FUC3  21 /* EVADC UV signal1 channel interrupt for AA FUC0 */
#define ISR_PRIORITY_EVADC_UV_SIM_SIG2_AA_FUC3  22 /* EVADC UV signal2 channel interrupt for AA FUC0 */
#define ISR_PRIO_EVADC_BRK_WR_CH_AA_FUC4        23 /* EVADC Broken wire channel interrupt for AA FUC1 */
#define ISR_PRIO_EVADC_BRK_WR_BOUNDARY_AA_FUC4  24 /* EVADC Broken wire signal out of area interrupt for FUC1 */

/*Priorities for the Digital Acquisition(Dacq) and Digital Actuation(Dact) examples*/
#define ISR_PRIORITY_GTM_TIM_ECLK_MON_DA         25 /* TIM ECKL monitoring used in all Dacq and Dact examples */
#define ISR_PRIORITY_GTM_TIM_MISSION_DACQ_FUC0   26 /* TIM mission channel interrupt used in Dacq FUC0 */
#define ISR_PRIORITY_GTM_TIM_MONITOR_DACQ_FUC0   27 /* TIM monitor channel interrupt used in Dacq FUC0 */
#define ISR_PRIORITY_GTM_TIM_MISSION_DACQ_FUC1   28 /* TIM mission channel interrupt used in all Dacq FUC1 */
#define ISR_PRIORITY_CCU6_MONITIR_RE_DACQ_FUC1   39 /* RE: RISING_EDGE */
#define ISR_PRIORITY_CCU6_MONITIR_PM_DACQ_FUC1   30 /* PM: Period Match */

#define ISR_PRIORITY_GTM_TIM_MISSION_DACT_FUC2         31 /* TIM mission channel interrupt used in all Dact FUC2  */
#define ISR_PRIORITY_GPT12_T4_INT_QACQ_FUC2_DACT_FUC3  32  /* Define the GPT12 Timer 2 interrupt priority */
#define ISR_PRIORITY_GPT12_T3_INT_QACQ_FUC2_DACT_FUC3  33  /* Define the GPT12 Timer 2 interrupt priority */
#define ISR_PRIORITY_CCU6_MISSION_DACT_FUC3            34

#define ISR_PRIORITY_CCU6_MONITOR_RE_DACQ_FUC3    35  /* RE: RISING_EDGE */
#define ISR_PRIORITY_CCU6_MONITOR_PM_DACQ_FUC3    36  /*PM: Period Match */
#define ISR_PRIORITY_ATOM_ISR_MONITOR             37  /* Isr monitor priority number */
#define ISR_PRIORITY_SENT_CHANNEL4                38  /* sent channel 4 sensor 1*/
#define ISR_PRIORITY_SENT_CHANNEL9                39  /* sent channel 9 sensor 2 */

/* Priority 40,41,42 used for ASCLIN Shell */
#define ISR_PRIORITY_QSPI5_TX_DMA_CH2_CLK_PlAUS   43  /* DMA channel2 interrupt priority for clock plausibility  */
#define ISR_PRIORITY_QSPI5_RX_DMA_CH3_CLK_PlAUS   44  /* DMA channel3 interrupt priority */
#define ISR_PRIORITY_QSPI5_ER_CLK_PlAUS           45  /* QSPI3 error interrupt priority */
#define ISR_PRIORITY_QSPI5_PT_CLK_PlAUS           46  /* QSPI Phase Transition interrupt priority */

#define ISR_PRIORITY_FCE_ER                       48  /* FCE Interrupt priority */
/* Priorities 50 - 80 reserved for AppKit */

#define ISR_PRIORITY_TLF_QSPI_ER                  81  /* Priority for the TLF error interrupt. */
#define ISR_PRIORITY_TLF_QSPI_TX                  86  /* Priority for the TLF transmit interrupt. */
#define ISR_PRIORITY_TLF_QSPI_RX                  91  /* Priority for the TLF receive interrupt. */

/* Priorities used in QSPI Safe communication */
#define ISR_PRIORITY_MASTER_TX_QSPI_SAFE          92
#define ISR_PRIORITY_MASTER_RX_QSPI_SAFE          93
#define ISR_PRIORITY_MASTER_ER_QSPI_SAFE          94
#define ISR_PRIORITY_SLAVE_TX_QSPI_SAFE           95
#define ISR_PRIORITY_SLAVE_RX_QSPI_SAFE           96
#define ISR_PRIORITY_SLAVE_ER_QSPI_SAFE           97

#define ISR_PRIORITY_DTS                          230 /* Priority for DTS interrupt */

#define ISR_PRIORITY_ERU_IN2                      240 /* Define the ERU_IN2 interrupt priority. */

#define ISR_PRIORITY_STALL_CPU                    254 /* Define the INT_SRB0 interrupt priority. */

/* Priority 255 reserved for AppKit */

#endif /* SAFETYKIT_CFG_H_ */
