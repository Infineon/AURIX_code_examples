/**********************************************************************************************************************
 * \file TLF35584.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef TLF35584_H_
#define TLF35584_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
/* Additional includes for SafetyKit */
#include "IfxTLF35584_regdef.h"
#include "IfxStm.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define DUMMY_DATA                  0       /* Dummy data used to read the content of the TLF35584 registers */
#define CLEAR_STATUS_FLAGS          0x3F    /* Mask used to clear system status flags given in SYSSF register */

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/
/* TLF35584 SPI commands */
typedef enum
{
    SpiCommand_read  = 0,                   /* Read operation SPI command */
    SpiCommand_write = 1                    /* Write operation SPI command */
} spiCommandType;

/* TLF35584 register address space */
typedef enum
{
    ProtcfgRegAddr      = 0x03,             /* Protection register */
    Syspcfg1RegAddr     = 0x05,             /* Protected System configuration request 1 */
    Wdcfg0RegAddr       = 0x06,             /* Protected Watchdog configuration request 0 */
    Rsyspcfg1RegAddr    = 0x0C,             /* System configuration 1 status */
    Rwdcfg0RegAddr      = 0x0D,             /* Watchdog configuration 0 status */
    DevctrlRegAddr      = 0x15,             /* Device control request */
    DevctrlnRegAddr     = 0x16,             /* Device control inverted request */
    WwdscmdRegAddr      = 0x17,             /* Window watchdog service command */
    SyssfRegAddr        = 0x1D,             /* System status flags */
    SpisfRegAddr        = 0x1F,             /* SPI status flags */
    DevstatRegAddr      = 0x27,             /* Device status */

    /* Additional registers used in SafetyKit: */
    Devcfg0RegAddr      = DEVCFG0,          /* Device configuration 0 */
    Wwdcfg0RegAddr      = WWDCFG0,          /* Protected Window watchdog configuration 0 */
    Wktimcfg0RegAddr    = WKTIMCFG0,        /* Wake timer configuration 0 */
    Wktimcfg1RegAddr    = WKTIMCFG1,        /* Wake timer configuration 1 */
    Wwdcfg1RegAddr      = WWDCFG1,          /* Protected Window watchdog configuration 1 */
    WwdstatRegAddr      = WWDSTAT,          /* Window watchdog status */
    Wdcfg1RegAddr       = WDCFG1,           /* Protected Watchdog configuration request 1 */
    FwdcfgRegAddr       = FWDCFG,           /* Protected Functional watchdog configuration request */
    Fwdstat0RegAddr     = FWDSTAT0,         /* Functional watchdog status 0 */
    Fwdstat1RegAddr     = FWDSTAT1,         /* Functional watchdog status 1 */
    FwdrspRegAddr       = FWDRSP,           /* Functional watchdog response command */
    FwdrspsyncRegAddr   = FWDRSPSYNC,       /* Functional watchdog response command with   synchronization */
} Tlf35584RegAddr;

/* Protection key */
typedef enum
{
    UnlockKey1  = 0xAB,                     /* Key 1 to unlock protected registers */
    UnlockKey2  = 0xEF,                     /* Key 2 to unlock protected registers */
    UnlockKey3  = 0x56,                     /* Key 3 to unlock protected registers */
    UnlockKey4  = 0x12,                     /* Key 4 to unlock protected registers */
    LockKey1    = 0xDF,                     /* Key 1 to lock protected registers */
    LockKey2    = 0x34,                     /* Key 2 to lock protected registers */
    LockKey3    = 0xBE,                     /* Key 3 to lock protected registers */
    LockKey4    = 0xCA,                     /* Key 4 to lock protected registers */
} keyType;

/* Request ERR pin monitor recovery time */
typedef enum
{
    ErrPinMonitorRecoveryTime_1ms   = 0,    /* 1ms */
    ErrPinMonitorRecoveryTime_2_5ms = 1,    /* 2.5ms */
    ErrPinMonitorRecoveryTime_5ms   = 2,    /* 5ms */
    ErrPinMonitorRecoveryTime_10ms  = 3     /* 10ms */
} errrecType;

/* Request ERR pin monitor recovery enable */
typedef enum
{
    ErrPinMonitorRecovery_disabled = 0,     /* Disabled */
    ErrPinMonitorRecovery_enabled  = 1      /* Enabled */
} errrecenType;

/* Request ERR pin monitor enable */
typedef enum
{
    ErrPinMonitor_disabled = 0,             /* Disabled */
    ErrPinMonitor_enabled  = 1              /* Enabled */
} errentype;

/* Request ERR pin monitor functionality enable while the system is in SLEEP */
typedef enum
{
    ErrPinMonitorInSleep_disabled = 0,      /* ERR pin monitor is disabled in SLEEP */
    ErrPinMonitorInSleep_enabled  = 1       /* ERR pin monitor can be active in SLEEP depending on ERREN bit value */
} errslpenType;

/* Request safe state 2 delay */
typedef enum
{
    SafeState2Delay_noDelay = 0,            /* No delay */
    SafeState2Delay_10ms    = 1,            /* 10ms */
    SafeState2Delay_50ms    = 2,            /* 50ms */
    SafeState2Delay_100ms   = 3,            /* 100ms */
    SafeState2Delay_250ms   = 4             /* 250ms */
} ss2delType;

/* Request watchdog cycle time */
typedef enum
{
    WatchdogCycleTime_0_1ms = 0,            /* 0.1ms tick period */
    WatchdogCycleTime_1ms   = 1             /* 1ms tick period */
} wdcycType;

/* Request window watchdog trigger selection */
typedef enum
{
    WindowWatchdogTriggerSelection_external   = 0,      /* External WDI input used as a WWD trigger */
    WindowWatchdogTriggerSelection_spiCommand = 1       /* WWD is triggered by SPI write to WWDSCMD register */
} wwdtselType;

/* Request functional watchdog enable */
typedef enum
{
    FunctionalWatchdog_disabled = 0,        /* Disabled */
    FunctionalWatchdog_enabled  = 1         /* Enabled */
} fwdenType;

/* Request window watchdog enable */
typedef enum
{
    WindowWatchdog_disabled = 0,            /* Disabled */
    WindowWatchdog_enabled  = 1             /* Enabled */
} wwdenType;

/* Request for device state transition
 * Cleared to 0b000 by the HW after the request is processed. After writing a new state
 * value a user should not change the value before it's cleared by HW.
 */
typedef enum
{
    DeviceStateTransition_none     = 0,     /* NONE */
    DeviceStateTransition_init     = 1,     /* INIT */
    DeviceStateTransition_normal   = 2,     /* NORMAL */
    DeviceStateTransition_sleep    = 3,     /* SLEEP */
    DeviceStateTransition_standby  = 4,     /* STANDBY */
    DeviceStateTransition_wake     = 5,     /* WAKE */
    DeviceStateTransition_reserved = 6,     /* RESERVED */
} statereqType;

/* Request voltage reference QVR enable */
typedef enum
{
    VoltageReferenceQVR_disabled = 0,       /* QVR will be disabled after valid request */
    VoltageReferenceQVR_enabled  = 1        /* QVR will be enabled after valid request */
} vrefenType;

/* Request communication LDO QCO enable */
typedef enum
{
    CommunicationLdoQCO_disabled = 0,       /* QCO will be disabled after valid request */
    CommunicationLdoQCO_enabled  = 1        /* QCO will be enabled after valid request */
} comenType;

/* Request tracker1 QT1 enable */
typedef enum
{
    Tracker1QT_disabled = 0,                /* QT1 will be disabled after valid request */
    Tracker1QT_enabled  = 1                 /* QT1 will be enabled after valid request */
} trk1enType;

/* Request tracker2 QT2 enable */
typedef enum
{
    Tracker2QT_disabled = 0,                /* QT2 will be disabled after valid request */
    Tracker2QT_enabled  = 1                 /* QT2 will be enabled after valid request */
} trk2enType;

/* State transition request failure flag
 * Requested state transition via DEVCTRL & DEVCTRLN could not be performed because of wrong protocol
 */
typedef enum
{
    StateTransitionRequest_noError = 0,         /* Write 0 - no action */
    StateTransitionRequest_errorDetected = 1    /* Event detected, write 1 to clear the flag */
} no_opType;

/* Transition to low power failed flag
 * Transition to low power failed either due to the QUC current monitor,
 * WAK high level or a rising edge on ENA during TRDEL time
 */
typedef enum
{
    TransitionToLowPower_noError = 0,           /* Write 0 - no action */
    TransitionToLowPower_errorDetected = 1      /* Event detected, write 1 to clear the flag */
} trfailType;

/* MCU error miss status flag
 * Set only when SYSPCFG1.ERRRECEN='1'
 */
typedef enum
{
    McuErrorMiss_noError = 0,                   /* Write 0 - no action */
    McuErrorMiss_errorDetected = 1              /* Event detected, write 1 to clear the flag */
} errmissType;

/* Functional watchdog error interrupt flag */
typedef enum
{
    FunctionalWatchdog_noError = 0,             /* Write 0 - no action */
    FunctionalWatchdog_errorDetected = 1        /* Event detected, write 1 to clear the flag */
} fwdeType;

/* Window watchdog error interrupt flag */
typedef enum
{
    WindowWatchdog_noError = 0,                 /* Write 0 - no action */
    WindowWatchdog_errorDetected = 1            /* Event detected, write 1 to clear the flag */
} wwdeType;

/* Protected configuration double bit error flag
 * Double bit error occurred on protected configuration register.
 * Status registers shall be read in order to determine which configuration has changed.
 */
typedef enum
{
    ProtectedConfigurationDoubleBit_noError = 0,        /* Write 0 - no action */
    ProtectedConfigurationDoubleBit_errorDetected = 1   /* Event detected, write 1 to clear the flag */
} cfgeType;

/* SPI frame parity error flag
 * Number of detected SPI clock cycles different than 16.
 */
typedef enum
{
    SpiFrameParity_noError       = 0,           /* Write 0 - no action */
    SpiFrameParity_errorDetected = 1            /* Event detected, write 1 to clear the flag */
} pareType;

/* SPI frame parity error flag
 * Number of detected SPI clock cycles different than 16.
 */
typedef enum
{
    SpiFrameLengthInvalid_noError       = 0,    /* Write 0 - no action */
    SpiFrameLengthInvalid_errorDetected = 1     /* Event detected, write 1 to clear the flag */
} leneType;

/* SPI address invalid flag */
typedef enum
{
    SpiAddressInvalid_noError       = 0,        /* Write 0 - no action */
    SpiAddressInvalid_errorDetected = 1         /* Event detected, write 1 to clear the flag */
} addreType;

/* SPI frame duration error flag
 * SCS low for more than 2ms.
 */
typedef enum
{
    SpiFrameDuration_noError       = 0,         /* Write 0 - no action */
    SpiFrameDuration_errorDetected = 1          /* Event detected, write 1 to clear the flag */
} dureType;

/* LOCK or UNLOCK procedure error flag */
typedef enum
{
    LockOrUnlockProcedure_noError       = 0,    /* Write 0 - no action */
    LockOrUnlockProcedure_errorDetected = 1     /* Event detected, write 1 to clear the flag */
} lockType;

/* Device state */
typedef enum
{
    DeviceState_none     = 0,                   /* NONE */
    DeviceState_init     = 1,                   /* INIT */
    DeviceState_normal   = 2,                   /* NORMAL */
    DeviceState_sleep    = 3,                   /* SLEEP */
    DeviceState_standby  = 4,                   /* STANDBY */
    DeviceState_wake     = 5,                   /* WAKE */
    DeviceState_reserved = 6,                   /* RESERVED */
} stateStatusType;

/* Reference voltage enable status */
typedef enum
{
    ReferenceVoltage_disabled = 0,              /* Voltage is disabled */
    ReferenceVoltage_enabled  = 1               /* Voltage is enabled */
} vrefenStatusType;

/* Standby LDO enable status */
typedef enum
{
    StandbyLdoVoltage_disabled = 0,             /* Voltage is disabled */
    StandbyLdoVoltage_enabled  = 1              /* Voltage is enabled */
} stbyenStatusType;

/* Communication LDO enable status */
typedef enum
{
    CommunicationLdoVoltage_disabled = 0,       /* Voltage is disabled */
    CommunicationLdoVoltage_enabled  = 1        /* Voltage is enabled */
} comenStatusType;

/* Tracker1 voltage enable status */
typedef enum
{
    Tracker1Voltage_disabled = 0,               /* Voltage is disabled */
    Tracker1Voltage_enabled  = 1                /* Voltage is enabled */
} trk1enStatusType;

/* Tracker2 voltage enable status */
typedef enum
{
    Tracker2Voltage_disabled = 0,               /* Voltage is disabled */
    Tracker2Voltage_enabled  = 1                /* Voltage is enabled */
} trk2enStatusType;

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
/* Protected System configuration request 1 bitfields*/
typedef struct
{
    errrecType      ERRREC:2;           /* Request ERR pin monitor recovery time */
    errrecenType    ERRRECEN:1;         /* Request ERR pin monitor recovery enable */
    errentype       ERREN:1;            /* Request ERR pin monitor enable */
    errslpenType    ERRSLPEN:1;         /* Request ERR pin monitor functionality enable while the system is in SLEEP */
    ss2delType      SS2DEL:2;           /* Request safe state 2 delay */
} Tlf35584Syspcfg1Bits;

/* Protected Watchdog configuration request 0 bitfields*/
typedef struct
{
    wdcycType       WDCYC:1;            /* Request watchdog cycle time */
    wwdtselType     WWDTSEL:1;          /* Request window watchdog trigger selection */
    fwdenType       FWDEN:1;            /* Request functional watchdog enable */
    wwdenType       WWDEN:1;            /* Request window watchdog enable */
    uint8           WWDETHR:4;          /* Request window watchdog error threshold */
} Tlf35584Wdcfg0Bits;

/* Device control request bitfields*/
typedef struct
{
    statereqType    STATEREQ:3;         /* Request for device state transition */
    vrefenType      VREFEN:1;           /* Request voltage reference QVR enable */
    uint8           reserved:1;         /* unused bit */
    comenType       COMEN:1;            /* Request communication ldo QCO enable */
    trk1enType      TRK1EN:1;           /* Request tracker1 QT1 enable */
    trk2enType      TRK2EN:1;           /* Request tracker2 QT2 enable */
} Tlf35584DevctrlBits;

/* Window watchdog service command bitfields*/
typedef struct
{
    uint8           TRIG:1;             /* Window watchdog SPI trigger command */
    uint8           reserved:6;         /* unused bits */
    uint8           TRIG_STATUS:1;      /* Last SPI trigger received */
} Tlf35584WwdscmdBits;

/* System status flags bitfields*/
typedef struct
{
    cfgeType        CFGE:1;             /* Protected configuration double bit error flag */
    wwdeType        WWDE:1;             /* Window watchdog error interrupt flag */
    fwdeType        FWDE:1;             /* Functional watchdog error interrupt flag */
    errmissType     ERRMISS:1;          /* MCU error miss status flag */
    trfailType      TRFAIL:1;           /* Transition to low power failed flag */
    no_opType       NO_OP:1;            /* State transition request failure flag */
    uint8           reserved:2;         /* unused bits */
} Tlf35584SyssfBits;

/* SPI status flags bitfields*/
typedef struct
{
    pareType        PARE:1;             /* SPI frame parity error flag */
    leneType        LENE:1;             /* SPI frame length invalid flag */
    addreType       ADDRE:1;            /* SPI address invalid flag */
    dureType        DURE:1;             /* SPI frame duration error flag */
    lockType        LOCK:1;             /* LOCK or UNLOCK procedure error flag */
    uint8           reserved:3;         /* unused bits */
} Tlf35584SpisfBits;

/* Device status bitfields */
typedef struct
{
    stateStatusType     STATE:3;        /* Device status */
    vrefenStatusType    VREFEN:1;       /* Reference voltage enable status */
    stbyenStatusType    STBYEN:1;       /* Standby LDO enable status */
    comenStatusType     COMEN:1;        /* Communication LDO enable status */
    trk1enStatusType    TRK1EN:1;       /* Tracker1 voltage enable status */
    trk2enStatusType    TRK2EN:1;       /* Tracker2 voltage enable status */
} Tlf35584DevstatBits;

/* Protection register bitfields*/
typedef struct
{
    keyType           KEY:8;            /* Protection key */
} Tlf35584ProtcfgBits;

/* Protection register */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584ProtcfgBits B;              /* Bitfield access */
} Tlf35584Protcfg;

/* Protected System configuration request 1 */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584Syspcfg1Bits B;             /* Bitfield access */
} Tlf35584Syspcfg1;

/* Protected Watchdog configuration request 0 */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584Wdcfg0Bits B;               /* Bitfield access */
} Tlf35584Wdcfg0;

/* Device control request */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584DevctrlBits B;              /* Bitfield access */
} Tlf35584Devctrl;

typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584WwdscmdBits B;              /* Bitfield access */
} Tlf35584Wwdscmd;

/* System status flags */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584SyssfBits B;                /* Bitfield access */
} Tlf35584Syssf;

/* SPI status flags */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584SpisfBits B;                /* Bitfield access */
} Tlf35584Spisf;

/* Device status */
typedef union
{
    uint8 U;                            /* Unsigned access */
    sint8 I;                            /* Signed access */
    Tlf35584DevstatBits B;              /* Bitfield access */
} Tlf35584Devstat;

/* TLF35584 register structure */
typedef volatile struct
{
    Tlf35584Protcfg      PROTCFG;       /* 0x03, Protection register */
    Tlf35584Syspcfg1     SYSPCFG1;      /* 0x05, Protected System configuration request 1 */
    Tlf35584Wdcfg0       WDCFG0;        /* 0x06, Protected Watchdog configuration request 0 */
    Tlf35584Syspcfg1     RSYSPCFG1;     /* 0x0C, System configuration 1 status */
    Tlf35584Wdcfg0       RWDCFG0;       /* 0x0D, Watchdog configuration 0 status */
    Tlf35584Devctrl      DEVCTRL;       /* 0x15, Device control request */
    Tlf35584Devctrl      DEVCTRLN;      /* 0x16, Device control inverted request */
    Tlf35584Wwdscmd      WWDSCMD;       /* 0x17, Window watchdog service command */
    Tlf35584Syssf        SYSSF;         /* 0x1D, System status flags */
    Tlf35584Spisf        SPISF;         /* 0x1F, SPI status flags */
    Tlf35584Devstat      DEVSTAT;       /* 0x27, Device status */

    /* Additional registers used in SafetyKit: */
    Ifx_TLF35584_DEVCFG0    DEVCFG0;    /* 0x00, Device configuration 0 */
    Ifx_TLF35584_WWDCFG0    WWDCFG0;    /* 0x09, Window Watchdog configuration 0 */
    Ifx_TLF35584_WKTIMCFG0  WKTIMCFG0;  /* 0x12, Wake timer configuration 0 */
    Ifx_TLF35584_WKTIMCFG1  WKTIMCFG1;  /* 0x13, Wake timer configuration 1 */
    Ifx_TLF35584_WWDCFG1    WWDCFG1;    /* 0x0A, Window Watchdog configuration 1 */
    Ifx_TLF35584_WWDSTAT    WWDSTAT;    /* 0x29, Window watchdog status */
    Ifx_TLF35584_WDCFG1     WDCFG1;     /* 0x07, Protected Watchdog configuration request 1 */
    Ifx_TLF35584_FWDCFG     FWDCFG;     /* 0x08, Protected Functional watchdog configuration request */
    Ifx_TLF35584_FWDSTAT0   FWDSTAT0;   /* 0x2A, Functional watchdog status 0 */
    Ifx_TLF35584_FWDSTAT1   FWDSTAT1;   /* 0x2B, Functional watchdog status 1 */
    Ifx_TLF35584_FWDRSP     FWDRSP;     /* 0x18, Functional watchdog response command */
    Ifx_TLF35584_FWDRSPSYNC FWDRSPSYNC; /* 0x19, Functional watchdog response command with synchronization */
} Tlf35584;

typedef struct
{
    uint32                  data:8;     /* Data part of the SPI frame structure */
    Tlf35584RegAddr         addr:6;     /* Address part of the SPI frame structure */
    spiCommandType          cmd:1;      /* Command part of the SPI frame structure */
    uint32                  reserved:1; /* Parity part is automatically generated by the HW */
} Tlf35584SpiFrameTypeBits;

typedef union
{
    uint16 U;                           /* Unsigned access */
    sint16 I;                           /* Signed access */
    Tlf35584SpiFrameTypeBits B;         /* Bitfield access */
} Tlf35584SpiFrameType;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN Tlf35584 g_tlfDevice;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initQSPI(void);
void initTLF35584(Tlf35584 *tlfDevice);
uint8 getSystemStatusFlagsTLF35584(Tlf35584 *tlfDevice);
void clearSystemStatusFlagsTLF35584(Tlf35584 *tlfDevice);
void setStateTransitionTLF35584(Tlf35584 *tlfDevice, statereqType requestedStateTransition);
stateStatusType getCurrentStateTLF35584(Tlf35584 *tlfDevice);

#endif /* TLF35584_H_ */
