/**********************************************************************************************************************
 * \file IfxRadar_cfg.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef IFXRADAR_CFG_H_
#define IFXRADAR_CFG_H_

/*
 ******************************************************************************
 * Standard include files
 ******************************************************************************
 */
#include "IfxCpu_Intrinsics.h"
#include "IfxSpu.h"

/*
 ******************************************************************************
 * Project include files
 ******************************************************************************
 */


/*
 ******************************************************************************
 * Macro defines
 ******************************************************************************
 */
#define RADAR_NUM_SAMPLES          (256)
#define RADAR_NUM_RX               (4)
#define RADAR_NUM_RAMPS            (64)
#define RADAR_NUM_ADC_BITS         (10)

#define NUM_CONFIG_SLOTS           (4)

#define RADAR_FFT1_LEN             (RADAR_NUM_SAMPLES)
#define RADAR_FFT2_LEN             (RADAR_NUM_RAMPS)
#define RADAR_FFT3_LEN             (RADAR_NUM_RX)

#define RADAR_NUM_RANGE_GATES      (RADAR_NUM_SAMPLES/2)
#define RADAR_NUM_DOPPLER_BINS     (RADAR_FFT2_LEN)


#define IFX_OFFSETOF(T, member)    ((unsigned int)&(((T *)0)->member))

/*
 ******************************************************************************
 * Types
 ******************************************************************************
 */

typedef union
{
    sint16            adc_raw[RADAR_NUM_RAMPS][RADAR_NUM_RX][RADAR_NUM_SAMPLES];
    csint16           rMap[RADAR_NUM_RAMPS][RADAR_NUM_RX][RADAR_NUM_RANGE_GATES];
}FirstFft;


typedef struct
{
    FirstFft       rangeMap; /* first filled with raw data during init, then overwritten with range FFT data*/
    csint16        rdMap[RADAR_NUM_RANGE_GATES][RADAR_NUM_RX][RADAR_NUM_DOPPLER_BINS]; /*range doppler map */
    uint32         nci[RADAR_NUM_RANGE_GATES][RADAR_NUM_DOPPLER_BINS]; /* NCI of Range-Doppler-Map */
    uint32         lclMaxVMap[RADAR_NUM_RANGE_GATES][RADAR_NUM_DOPPLER_BINS/32]; /* local max bitmap in doppler dimension */
    uint32         lclMaxRMap[RADAR_NUM_DOPPLER_BINS][RADAR_NUM_RANGE_GATES/32]; /* local max bitmap in range dimension*/
} SPU_Emem_Map_t;

typedef struct
{
    IfxSpu_ConfigSlot     slots[NUM_CONFIG_SLOTS];
    uint16                rWndw[RADAR_NUM_SAMPLES];
    uint16                dWndw[RADAR_NUM_DOPPLER_BINS];
} SPU_Cmem0_Map_t;


typedef struct
{
    Ifx_SPU                    *spu0;
    SPU_Cmem0_Map_t            *cmem0;
    SPU_Emem_Map_t             *emem;
    uint32                     spuOk;
} Radar;

/*
 ******************************************************************************
 * External variables
 ******************************************************************************
 */
IFX_EXTERN Radar g_rdr;
IFX_EXTERN const sint16 adc_data[RADAR_NUM_SAMPLES * RADAR_NUM_RAMPS][RADAR_NUM_RX];
IFX_EXTERN const uint16 rWnd_Hann[RADAR_NUM_SAMPLES];
IFX_EXTERN const uint16 dWnd_Hann[RADAR_NUM_RAMPS];


#endif /* IFXRADAR_CFG_H_ */
