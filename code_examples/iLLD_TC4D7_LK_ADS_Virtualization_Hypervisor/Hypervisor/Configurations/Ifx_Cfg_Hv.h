/**********************************************************************************************************************
 * \file Ifx_Cfg_Hv.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef IFX_CFG_HV_H_
#define IFX_CFG_HV_H_

#include "Ifx_Cfg.h"
#include "Ifx_Cfg_Mpu.h"
#include "IfxHv_Intrinsics.h"


#ifndef IFX_CFG_HV_PSW_DEFAULT
#define IFX_CFG_HV_PSW_DEFAULT     (0x00000980u)
#endif

extern const VmMpuRangeType HvMpuConfig;
extern const VmMpuRangeType Hv_Vm1MpuConfig;
extern const VmMpuRangeType Hv_Vm2MpuConfig;
extern const VmMpuRangeType Hv_Vm3MpuConfig;
extern const VmMpuRangeType Hv_Vm4MpuConfig;
extern const VmMpuRangeType Hv_Vm5MpuConfig;
extern const VmMpuRangeType Hv_Vm6MpuConfig;
extern const VmMpuRangeType Hv_Vm7MpuConfig;

/** Comparator Configuration Structure
 */
typedef struct
{
    float32                     timeInSec;                 /**<  time for next comparison from current timer count. */
    uint8                       compareOffset;             /**<  Comparator start bit position  defined in STMx.CMCON.B.MSTART0(x = 0,1,2). */
    uint8                       compareSize;               /**<  Size of compare value to compare with timer defined in STMx.CMCON.B.MSIZE0(x = 0,1,2). */
    uint8                       triggerPriority;           /**<  Interrupt priority. Range = 0 .. 255. 0 = interrupt is disabled. */
    uint8                       typeOfService;             /**<  Type of service. */
    uint8                       comparator;                /**<  Comparator Id defined in STMx.ISCR.B.CMP0IRR(x = 0, 1, 2). */
    uint8                       comparatorInterrupt;       /**<  Comparator Interrupt request source defined in SRx (x =0, 1). */
    uint8                       comparison;                /**<  Compare with Relative or Absolute timer */
    uint8                       vmId;                      /**<  Virtual Machine number */
} IfxHv_StmCompareConfig;


/** Interrupt threshold Config
 */
typedef struct
{
    uint8                       vm1ThresholdVal;         /**<  VM1 Threshold Value */
    uint8                       vm2ThresholdVal;         /**<  VM1 Threshold Value */
    uint8                       vm3ThresholdVal;         /**<  VM1 Threshold Value */
    uint8                       vm4ThresholdVal;         /**<  VM1 Threshold Value */
    uint8                       vm5ThresholdVal;         /**<  VM1 Threshold Value */
    uint8                       vm6ThresholdVal;         /**<  VM1 Threshold Value */
    uint8                       vm7ThresholdVal;         /**<  VM1 Threshold Value */
} IfxHv_VmThresholdConfig;

#endif /*  IFX_CFG_VM1_H_ */
