/**
 * \file IfxFsi_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_NVM_FSI/V0.2.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Fsi_Registers Fsi Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Fsi_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Fsi_Registers
 * 
 * \defgroup IfxSfr_Fsi_Registers_union Register unions
 * \ingroup IfxSfr_Fsi_Registers
 * 
 * \defgroup IfxSfr_Fsi_Registers_struct Memory map
 * \ingroup IfxSfr_Fsi_Registers
 */
#ifndef IFXFSI_REGDEF_H
#define IFXFSI_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Fsi_Registers_Bitfields
 * \{  */
/** \brief Communication register 0 */
typedef struct _Ifx_FSI_COMM0_Bits
{
    __IO Ifx_UReg_8Bit COMM0:8;            /**< \brief [7:0] Communication register 0 (rwh) */
} Ifx_FSI_COMM0_Bits;

/** \brief Communication register 1 */
typedef struct _Ifx_FSI_COMM1_Bits
{
    __IO Ifx_UReg_8Bit COMM1:8;            /**< \brief [7:0] Communication register 1 (rwh) */
} Ifx_FSI_COMM1_Bits;

/** \brief Communication register 2 */
typedef struct _Ifx_FSI_COMM2_Bits
{
    __IO Ifx_UReg_8Bit COMM2:8;            /**< \brief [7:0] Communication register 2 (rwh) */
} Ifx_FSI_COMM2_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_fsi_Registers_union
 * \{   */
/** \brief Communication register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_FSI_COMM0_Bits B;                  /**< \brief Bitfield access */
} Ifx_FSI_COMM0;

/** \brief Communication register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_FSI_COMM1_Bits B;                  /**< \brief Bitfield access */
} Ifx_FSI_COMM1;

/** \brief Communication register 2   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_FSI_COMM2_Bits B;                  /**< \brief Bitfield access */
} Ifx_FSI_COMM2;

/** \}  */

/******************************************************************************/
/** \addtogroup IfxSfr_Fsi_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief FSI object */
typedef volatile struct _Ifx_FSI
{
       __IO Ifx_FSI_COMM0                       COMM0;                  /**< \brief 0, Communication register 0*/
       __IO Ifx_FSI_COMM1                       COMM1;                  /**< \brief 1, Communication register 1*/
       __IO Ifx_FSI_COMM2                       COMM2;                  /**< \brief 2, Communication register 2*/
       __I  Ifx_UReg_8Bit                       reserved_3[253];        /**< \brief 3, \internal Reserved */
} Ifx_FSI;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXFSI_REGDEF_H */
