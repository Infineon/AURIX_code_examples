/**
 * \file IfxTrif_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_TRIF/V0.2.1.1.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Trif_Registers Trif Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Trif_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Trif_Registers
 * 
 * \defgroup IfxSfr_Trif_Registers_union Register unions
 * \ingroup IfxSfr_Trif_Registers
 * 
 * \defgroup IfxSfr_Trif_Registers_struct Memory map
 * \ingroup IfxSfr_Trif_Registers
 */
#ifndef IFXTRIF_REGDEF_H
#define IFXTRIF_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Trif_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_TRIF_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_TRIF_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_TRIF_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_TRIF_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_TRIF_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_TRIF_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_TRIF_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_TRIF_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_TRIF_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_TRIF_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_TRIF_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_TRIF_ACCEN_WRB_FPI_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_TRIF_CLC_Bits
{
    __IO Ifx_Strict_32Bit DISR:1;          /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_Strict_32Bit DISS:1;          /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __IO Ifx_Strict_32Bit EDIS:1;          /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_TRIF_CLC_Bits;

/** \brief Control register */
typedef struct _Ifx_TRIF_CTRL_Bits
{
    __IO Ifx_Strict_32Bit OPMODE:4;        /**< \brief [3:0] Operation mode select (rwh) */
    __O  Ifx_Strict_32Bit OPMODE_P:1;      /**< \brief [4:4] Operation mode select protection (w) */
    __IO Ifx_Strict_32Bit TRCSTART:1;      /**< \brief [5:5] Trace Start (rw) */
    __O  Ifx_Strict_32Bit TRCSTART_P:1;    /**< \brief [6:6] Trace Start protection (w) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [14:7] \internal Reserved */
    __IO Ifx_Strict_32Bit TRCSUSP:1;       /**< \brief [15:15] Suspend asserted by TRACE (rw) */
    __IO Ifx_Strict_32Bit SGBTTS:1;        /**< \brief [16:16] Training start (rw) */
    __IO Ifx_Strict_32Bit SGBTTXA:1;       /**< \brief [17:17] RX Initialized (rwh) */
    __IO Ifx_Strict_32Bit SGBTTPV:1;       /**< \brief [18:18] Trace Port Verified (rwh) */
    __O  Ifx_Strict_32Bit SGBTTS_P:1;      /**< \brief [19:19] Training Start protection (w) */
    __IO Ifx_Strict_32Bit SGBTRSTN:1;      /**< \brief [20:20] Reset SGBT (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_TRIF_CTRL_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_TRIF_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_TRIF_ID_Bits;

/** \brief Interrupt enable register */
typedef struct _Ifx_TRIF_IRE_Bits
{
    __IO Ifx_Strict_32Bit OVERRUN:1;       /**< \brief [0:0] Overrun interrupt enable (rw) */
    __IO Ifx_Strict_32Bit WM:1;            /**< \brief [1:1] Watermark interrupt enable (rw) */
    __IO Ifx_Strict_32Bit TMETMR:1;        /**< \brief [2:2] TME timer interrupt enable (rw) */
    __IO Ifx_Strict_32Bit SGBTPLK:1;       /**< \brief [3:3] SGBT PHY TX PLL loss of lock interrupt enable (rw) */
    __IO Ifx_Strict_32Bit MCDS0:1;         /**< \brief [4:4] MCDS interrupt enable (rw) */
    __IO Ifx_Strict_32Bit MCDS1:1;         /**< \brief [5:5] MCDS interrupt enable (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_TRIF_IRE_Bits;

/** \brief Interrupt Status register */
typedef struct _Ifx_TRIF_ISR_Bits
{
    __IO Ifx_Strict_32Bit OVERRUN:1;       /**< \brief [0:0] Overrun interrupt (rw1ch) */
    __IO Ifx_Strict_32Bit WM:1;            /**< \brief [1:1] Watermark interrupt (rw1ch) */
    __IO Ifx_Strict_32Bit TMETMR:1;        /**< \brief [2:2] TME timer interrupt (rw1ch) */
    __IO Ifx_Strict_32Bit SGBTPLK:1;       /**< \brief [3:3] SGBT PHY TX PLL loss of lock interrupt status (rw1ch) */
    __IO Ifx_Strict_32Bit MCDS0:1;         /**< \brief [4:4] Interrupt asserted by MCDS (rw1ch) */
    __IO Ifx_Strict_32Bit MCDS1:1;         /**< \brief [5:5] Interrupt asserted by MCDS (rw1ch) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_TRIF_ISR_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_TRIF_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_TRIF_PROT_Bits;

/** \brief Trace line qualifier 0 to 7 */
typedef struct _Ifx_TRIF_Q0TO7L_Bits
{
    __I  Ifx_Strict_32Bit TLQ0:4;          /**< \brief [3:0] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ1:4;          /**< \brief [7:4] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ2:4;          /**< \brief [11:8] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ3:4;          /**< \brief [15:12] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ4:4;          /**< \brief [19:16] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ5:4;          /**< \brief [23:20] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ6:4;          /**< \brief [27:24] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ7:4;          /**< \brief [31:28] Trace line qualifier nibble (rh) */
} Ifx_TRIF_Q0TO7L_Bits;

/** \brief Trace line qualifier 16 to 23 */
typedef struct _Ifx_TRIF_Q16TO23L_Bits
{
    __I  Ifx_Strict_32Bit TLQ16:4;         /**< \brief [3:0] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ17:4;         /**< \brief [7:4] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ18:4;         /**< \brief [11:8] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ19:4;         /**< \brief [15:12] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ20:4;         /**< \brief [19:16] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ21:4;         /**< \brief [23:20] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ22:4;         /**< \brief [27:24] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ23:4;         /**< \brief [31:28] Trace line qualifier nibble (rh) */
} Ifx_TRIF_Q16TO23L_Bits;

/** \brief Trace line qualifier 24 to 31 */
typedef struct _Ifx_TRIF_Q24TO31L_Bits
{
    __I  Ifx_Strict_32Bit TLQ24:4;         /**< \brief [3:0] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ25:4;         /**< \brief [7:4] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ26:4;         /**< \brief [11:8] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ27:4;         /**< \brief [15:12] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ28:4;         /**< \brief [19:16] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ29:4;         /**< \brief [23:20] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ30:4;         /**< \brief [27:24] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ31:4;         /**< \brief [31:28] Trace line qualifier nibble (rh) */
} Ifx_TRIF_Q24TO31L_Bits;

/** \brief Trace line qualifier 8 to 15 */
typedef struct _Ifx_TRIF_Q8TO15L_Bits
{
    __I  Ifx_Strict_32Bit TLQ8:4;          /**< \brief [3:0] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ9:4;          /**< \brief [7:4] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ10:4;         /**< \brief [11:8] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ11:4;         /**< \brief [15:12] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ12:4;         /**< \brief [19:16] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ13:4;         /**< \brief [23:20] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ14:4;         /**< \brief [27:24] Trace line qualifier nibble (rh) */
    __I  Ifx_Strict_32Bit TLQ15:4;         /**< \brief [31:28] Trace line qualifier nibble (rh) */
} Ifx_TRIF_Q8TO15L_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_TRIF_RST_CTRLA_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit GRSTEN0:1;       /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN1:1;       /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN2:1;       /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN3:1;       /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_TRIF_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_TRIF_RST_CTRLB_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __O  Ifx_Strict_32Bit STATCLR:1;       /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_TRIF_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_TRIF_RST_STAT_Bits
{
    __I  Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __I  Ifx_Strict_32Bit GRST0:1;         /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_Strict_32Bit GRST1:1;         /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_Strict_32Bit GRST2:1;         /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_Strict_32Bit GRST3:1;         /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_TRIF_RST_STAT_Bits;

/** \brief SGBT Auto Channel UP */
typedef struct _Ifx_TRIF_SGBTTACU_Bits
{
    __IO Ifx_Strict_32Bit ACIC:31;         /**< \brief [30:0] Automatic Channel Initialization Counter (rw) */
    __IO Ifx_Strict_32Bit ACIEN:1;         /**< \brief [31:31] Automatic Channel Initialization enable (rw) */
} Ifx_TRIF_SGBTTACU_Bits;

/** \brief TBUF and TME Status information */
typedef struct _Ifx_TRIF_TBTMESR_Bits
{
    __I  Ifx_Strict_32Bit TLA:16;          /**< \brief [15:0] Total tlines available (rh) */
    __I  Ifx_Strict_32Bit MWR:9;           /**< \brief [24:16] MTSC words read (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [26:25] \internal Reserved */
    __I  Ifx_Strict_32Bit TMEBUSY:1;       /**< \brief [27:27] TME transfer status (rh) */
    __I  Ifx_Strict_32Bit OVERRUN0:1;      /**< \brief [28:28] TBUF overrun (rh) */
    __I  Ifx_Strict_32Bit OVERRUN1:1;      /**< \brief [29:29] TBUF overrun (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_TRIF_TBTMESR_Bits;

/** \brief TBUF0 FIFO fill level */
typedef struct _Ifx_TRIF_TBUF0FLV_Bits
{
    __I  Ifx_Strict_32Bit CURLVL:11;       /**< \brief [10:0] Current TBUF Fill Level - CURLVL (rh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit MAXLVL:11;       /**< \brief [26:16] Maximum TBUF FIFO Fill Level - MAXLVL (rw0ch) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_TRIF_TBUF0FLV_Bits;

/** \brief TBUF1 FIFO fill level */
typedef struct _Ifx_TRIF_TBUF1FLV_Bits
{
    __I  Ifx_Strict_32Bit CURLVL:11;       /**< \brief [10:0] Current TBUF Fill Level - CURLVL (rh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit MAXLVL:11;       /**< \brief [26:16] Maximum TBUF FIFO Fill Level - MAXLVL (rw0ch) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [31:27] \internal Reserved */
} Ifx_TRIF_TBUF1FLV_Bits;

/** \brief TLA watermark level control */
typedef struct _Ifx_TRIF_TBWMCTRL_Bits
{
    __IO Ifx_Strict_32Bit WMLVL:16;        /**< \brief [15:0] Watermark level (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_TRIF_TBWMCTRL_Bits;

/** \brief TFIF read register */
typedef struct _Ifx_TRIF_TFIFREAD_Bits
{
    __I  Ifx_Strict_32Bit TFIFREAD:32;     /**< \brief [31:0] TFIF read data (rh) */
} Ifx_TRIF_TFIFREAD_Bits;

/** \brief TME destination base address */
typedef struct _Ifx_TRIF_TMEBASE_Bits
{
    __I  Ifx_Strict_32Bit :3;              /**< \brief [2:0] \internal Reserved */
    __IO Ifx_Strict_32Bit BASE:29;         /**< \brief [31:3] TME destination base address (rw) */
} Ifx_TRIF_TMEBASE_Bits;

/** \brief TME control */
typedef struct _Ifx_TRIF_TMECTRL_Bits
{
    __IO Ifx_Strict_32Bit OFFSET:16;       /**< \brief [15:0] TME offset address (rw) */
    __IO Ifx_Strict_32Bit SIZE:14;         /**< \brief [29:16] Size of Destination memory (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_TRIF_TMECTRL_Bits;

/** \brief TME destination address */
typedef struct _Ifx_TRIF_TMEDEST_Bits
{
    __IO Ifx_Strict_32Bit DEST:32;         /**< \brief [31:0] TME destination address (rw0ch) */
} Ifx_TRIF_TMEDEST_Bits;

/** \brief TME pre-trigger area size */
typedef struct _Ifx_TRIF_TMEPRE_Bits
{
    __IO Ifx_Strict_32Bit PRE:14;          /**< \brief [13:0] TME pre-trigger area size (rw) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_TRIF_TMEPRE_Bits;

/** \brief TME timer value */
typedef struct _Ifx_TRIF_TMETMR_Bits
{
    __IO Ifx_Strict_32Bit TMR:12;          /**< \brief [11:0] TME timer value (rwh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_TRIF_TMETMR_Bits;

/** \brief Status register */
typedef struct _Ifx_TRIF_TSR_Bits
{
    __I  Ifx_Strict_32Bit TRCON0:1;        /**< \brief [0:0] Trace in progress (rh) */
    __I  Ifx_Strict_32Bit TRCON1:1;        /**< \brief [1:1] Trace in progress (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit LASTMTSC:1;      /**< \brief [4:4] Last MTSC transfered (rw1ch) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit TMETGERR:1;      /**< \brief [8:8] TME Trigger error (rw1ch) */
    __IO Ifx_Strict_32Bit TMESRIERR:1;     /**< \brief [9:9] TME SRI transfer error (rw1ch) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [15:10] \internal Reserved */
    __I  Ifx_Strict_32Bit SGBTPLK:1;       /**< \brief [16:16] SGBT PHY TX PLL lock status (rh) */
    __I  Ifx_Strict_32Bit SGBTLNUP:1;      /**< \brief [17:17] SGBT TX lane up (rh) */
    __I  Ifx_Strict_32Bit SGBTCHUP:1;      /**< \brief [18:18] SGBT channel up (rh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [23:19] \internal Reserved */
    __I  Ifx_Strict_32Bit ARR:1;           /**< \brief [24:24] Application Reset request (rh) */
    __I  Ifx_Strict_32Bit APPRES:1;        /**< \brief [25:25] Application Reset (rh) */
    __I  Ifx_Strict_32Bit CLKSELS:2;       /**< \brief [27:26] Status selection for system clock source (rh) */
    __I  Ifx_Strict_32Bit TRCSTATE:2;      /**< \brief [29:28] Trace start state machine (rh) */
    __I  Ifx_Strict_32Bit APPTYPE:1;       /**< \brief [30:30] Application type (rh) */
    __I  Ifx_Strict_32Bit DEVTYPE:1;       /**< \brief [31:31] Device type (rh) */
} Ifx_TRIF_TSR_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_trif_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_TRIF_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_TRIF_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ACCEN_RDB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_TRIF_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_TRIF_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ACCEN_WRB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_TRIF_ACCEN_WRB_FPI;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_TRIF_CLC;

/** \brief Control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_CTRL_Bits B;                  /**< \brief Bitfield access */
} Ifx_TRIF_CTRL;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_TRIF_ID;

/** \brief Interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_IRE_Bits B;                   /**< \brief Bitfield access */
} Ifx_TRIF_IRE;

/** \brief Interrupt Status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_ISR_Bits B;                   /**< \brief Bitfield access */
} Ifx_TRIF_ISR;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_TRIF_PROT;

/** \brief Trace line qualifier 0 to 7   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_Q0TO7L_Bits B;                /**< \brief Bitfield access */
} Ifx_TRIF_Q0TO7L;

/** \brief Trace line qualifier 16 to 23   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_Q16TO23L_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_Q16TO23L;

/** \brief Trace line qualifier 24 to 31   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_Q24TO31L_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_Q24TO31L;

/** \brief Trace line qualifier 8 to 15   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_Q8TO15L_Bits B;               /**< \brief Bitfield access */
} Ifx_TRIF_Q8TO15L;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_TRIF_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_TRIF_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_RST_STAT;

/** \brief SGBT Auto Channel UP   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_SGBTTACU_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_SGBTTACU;

/** \brief TBUF and TME Status information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TBTMESR_Bits B;               /**< \brief Bitfield access */
} Ifx_TRIF_TBTMESR;

/** \brief TBUF0 FIFO fill level   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TBUF0FLV_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_TBUF0FLV;

/** \brief TBUF1 FIFO fill level   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TBUF1FLV_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_TBUF1FLV;

/** \brief TLA watermark level control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TBWMCTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_TBWMCTRL;

/** \brief TFIF read register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TFIFREAD_Bits B;              /**< \brief Bitfield access */
} Ifx_TRIF_TFIFREAD;

/** \brief TME destination base address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TMEBASE_Bits B;               /**< \brief Bitfield access */
} Ifx_TRIF_TMEBASE;

/** \brief TME control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TMECTRL_Bits B;               /**< \brief Bitfield access */
} Ifx_TRIF_TMECTRL;

/** \brief TME destination address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TMEDEST_Bits B;               /**< \brief Bitfield access */
} Ifx_TRIF_TMEDEST;

/** \brief TME pre-trigger area size   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TMEPRE_Bits B;                /**< \brief Bitfield access */
} Ifx_TRIF_TMEPRE;

/** \brief TME timer value   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TMETMR_Bits B;                /**< \brief Bitfield access */
} Ifx_TRIF_TMETMR;

/** \brief Status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_TRIF_TSR_Bits B;                   /**< \brief Bitfield access */
} Ifx_TRIF_TSR;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Trif_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_TRIF_ACCEN
{
       __IO Ifx_TRIF_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_TRIF_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_TRIF_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_TRIF_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_TRIF_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_TRIF_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_TRIF_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Trif_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_TRIF_RST
{
       __IO Ifx_TRIF_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_TRIF_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_TRIF_RST_STAT                   STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_TRIF_RST;

/******************************************************************************/
/** \addtogroup IfxSfr_Trif_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief TRIF object */
typedef volatile struct _Ifx_TRIF
{
       __I  Ifx_TRIF_TFIFREAD                   TFIFREAD[1024];         /**< \brief 0, MIRROR, TFIF read register*/
       __IO Ifx_TRIF_CLC                        CLC;                    /**< \brief 1000, Clock Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_1004[4];       /**< \brief 1004, \internal Reserved */
       __I  Ifx_TRIF_ID                         ID;                     /**< \brief 1008, Module Identification Register*/
       __I  Ifx_UReg_8Bit                       reserved_100C[4];       /**< \brief 100C, \internal Reserved */
       __IO Ifx_TRIF_CTRL                       CTRL;                   /**< \brief 1010, Control register*/
       __IO Ifx_TRIF_TSR                        TSR;                    /**< \brief 1014, Status register*/
       __IO Ifx_TRIF_ISR                        ISR;                    /**< \brief 1018, Interrupt Status register*/
       __IO Ifx_TRIF_IRE                        IRE;                    /**< \brief 101C, Interrupt enable register*/
       __IO Ifx_TRIF_TBUF0FLV                   TBUF0FLV;               /**< \brief 1020, TBUF0 FIFO fill level*/
       __IO Ifx_TRIF_TBUF1FLV                   TBUF1FLV;               /**< \brief 1024, TBUF1 FIFO fill level*/
       __I  Ifx_UReg_8Bit                       reserved_1028[8];       /**< \brief 1028, \internal Reserved */
       __I  Ifx_TRIF_TBTMESR                    TBTMESR;                /**< \brief 1030, TBUF and TME Status information*/
       __IO Ifx_TRIF_TBWMCTRL                   TBWMCTRL;               /**< \brief 1034, TLA watermark level control*/
       __I  Ifx_UReg_8Bit                       reserved_1038[8];       /**< \brief 1038, \internal Reserved */
       __IO Ifx_TRIF_TMECTRL                    TMECTRL;                /**< \brief 1040, TME control*/
       __IO Ifx_TRIF_TMEBASE                    TMEBASE;                /**< \brief 1044, TME destination base address*/
       __IO Ifx_TRIF_TMEPRE                     TMEPRE;                 /**< \brief 1048, TME pre-trigger area size*/
       __IO Ifx_TRIF_TMETMR                     TMETMR;                 /**< \brief 104C, TME timer value*/
       __IO Ifx_TRIF_TMEDEST                    TMEDEST;                /**< \brief 1050, TME destination address*/
       __I  Ifx_UReg_8Bit                       reserved_1054[12];      /**< \brief 1054, \internal Reserved */
       __I  Ifx_TRIF_Q0TO7L                     Q0TO7L;                 /**< \brief 1060, Trace line qualifier 0 to 7*/
       __I  Ifx_TRIF_Q8TO15L                    Q8TO15L;                /**< \brief 1064, Trace line qualifier 8 to 15*/
       __I  Ifx_TRIF_Q16TO23L                   Q16TO23L;               /**< \brief 1068, Trace line qualifier 16 to 23*/
       __I  Ifx_TRIF_Q24TO31L                   Q24TO31L;               /**< \brief 106C, Trace line qualifier 24 to 31*/
       __IO Ifx_TRIF_SGBTTACU                   SGBTTACU;               /**< \brief 1070, SGBT Auto Channel UP*/
       __I  Ifx_UReg_8Bit                       reserved_1074[76];      /**< \brief 1074, \internal Reserved */
       __IO Ifx_TRIF_ACCEN                      ACCEN;                  /**< \brief 10C0, */
       __IO Ifx_TRIF_PROT                       PROTSE;                 /**< \brief 10E0, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_10E4[12];      /**< \brief 10E4, \internal Reserved */
       __IO Ifx_TRIF_RST                        RST;                    /**< \brief 10F0, Reset Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_10FC[3843];    /**< \brief 10FC, \internal Reserved */
} Ifx_TRIF;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXTRIF_REGDEF_H */
