/**
 * \file IfxGeth_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_GETH/V13.1.1.1.11
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Geth_Registers Geth Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Geth_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Geth_Registers
 * 
 * \defgroup IfxSfr_Geth_Registers_union Register unions
 * \ingroup IfxSfr_Geth_Registers
 * 
 * \defgroup IfxSfr_Geth_Registers_struct Memory map
 * \ingroup IfxSfr_Geth_Registers
 */
#ifndef IFXGETH_REGDEF_H
#define IFXGETH_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Geth_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_GETH_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_GETH_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_GETH_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_GETH_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_GETH_ACCEN_RDB_SRI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_GETH_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_GETH_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_GETH_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_GETH_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_GETH_ACCEN_WRB_SRI_Bits;

/** \brief AXI Slave DPP Error Address Status */
typedef struct _Ifx_GETH_BRIDGE_AXI_SLAVE_DPP_ERROR_ADDRESS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ASPEAS:16;         /**< \brief [15:0] AXI Slave data path Parity Error Address Status This field holds the CSR address for which parity error is detected on the CSR write data (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_BRIDGE_AXI_SLAVE_DPP_ERROR_ADDRESS_STATUS_Bits;

/** \brief CSR SW Control */
typedef struct _Ifx_GETH_BRIDGE_CSR_SW_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RCWE:1;            /**< \brief [0:0] Register Clear on Write 1 Enable  - When this bit is set, the access mode of some Subsystem status register fields changes to Clear on Write 1 (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit SEEN:1;            /**< \brief [8:8] Slave Error Response Enable  - When this bit is set, the MAC responds with Slave Error for accesses to reserved registers in CSR space (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_GETH_BRIDGE_CSR_SW_CONTROL_Bits;

/** \brief Debug Control */
typedef struct _Ifx_GETH_BRIDGE_DEBUG_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit EIEE:1;            /**< \brief [16:16] ECC Inject Error Enable for Descriptor Cache memories When set, enables the ECC error injection feature (rw) */
    __IO Ifx_UReg_32Bit EIAEE:1;           /**< \brief [17:17] ECC Inject Address Error Enable for Descriptor Cache memories When set, enables the ECC Address error injection feature (rw) */
    __IO Ifx_UReg_32Bit EIEC:1;            /**< \brief [18:18] ECC Inject Error Control for Descriptor Cache memories When EIEE bit of this register is set, following errors are inserted based on the value encoded in this field (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_GETH_BRIDGE_DEBUG_CONTROL_Bits;

/** \brief DMA Port Selection */
typedef struct _Ifx_GETH_BRIDGE_DMA_PORT_SELECTION_Bits
{
    __IO Ifx_UReg_32Bit DMAPORTSEL:8;      /**< \brief [7:0] DMA Channel Port Selection (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_BRIDGE_DMA_PORT_SELECTION_Bits;

/** \brief DPP Control */
typedef struct _Ifx_GETH_BRIDGE_DPP_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit DDPP:1;            /**< \brief [0:0] Disable Data path Parity Protection for Ethernet Bridge When set to 0, enables the parity protection for XGMAC datapath by generating and checking the parity on XGMAC datapath (rw) */
    __IO Ifx_UReg_32Bit OPE:1;             /**< \brief [1:1] Odd Parity Enable for Ethernet Bridge When set to 1, enables odd parity protection on all the external interfaces (rw) */
    __IO Ifx_UReg_32Bit ESPI:1;            /**< \brief [2:2] Enable Parity on Slave Interface port When set to 1, enables the parity check for the slave interface ports and disables the internal parity generation for the input slave data port (axi/apb/mci slave port) (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit IPEAT:1;           /**< \brief [4:4] Insert Parity Error in Application Transmit Interface Parity checker When set to 1, parity/data bit of first valid input parity/data of the Interface data parity checker is flipped (rw) */
    __IO Ifx_UReg_32Bit IPEDC:1;           /**< \brief [5:5] Insert Parity Error in Descriptor Cache data path Parity checker When set to 1, parity/data bit of first valid input parity/data of the Descriptor Cache parity checker (or at PC-desc) is flipped (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit IPEAR:1;           /**< \brief [12:12] Insert Parity error in Insert Parity Error in Application Receive interface data path Parity Checker When set to 1, parity/data bit of first valid input parity/data of Application Receive Interface Parity Checker (PC-a) at AXI Master interface is flipped (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [14:13] \internal Reserved */
    __IO Ifx_UReg_32Bit IPECW:1;           /**< \brief [15:15] Insert Parity Error in CSR Write data path Parity Checker When set to 1, parity/data bit of first valid input parity/data of the CSR write data interface is flipped (rw) */
    __IO Ifx_UReg_32Bit IPEASR:1;          /**< \brief [16:16] Insert Parity Error in AXI Slave Read data path Parity Checker When set to 1, parity/data bit of first valid input parity/data of the AXI Slave read data interface is flipped (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_BRIDGE_DPP_CONTROL_Bits;

/** \brief DPP ECC EIC */
typedef struct _Ifx_GETH_BRIDGE_DPP_ECC_ERROR_INJECTION_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit BLEI:8;            /**< \brief [7:0] Bit Location of error injection This field indicates the bit location of DPP/ECC error injection, determination of error in Parity/ECC bits or Data (being protected) depends on the Error Injection Mode (EIM field) (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit EIM:1;             /**< \brief [16:16] Error Injection Mode When it set to 0, indicate error injection on data; When it set to 1, indicate error injection on ECC/Parity bits (need to check the address error injection mode is disabled) (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_BRIDGE_DPP_ECC_ERROR_INJECTION_CONTROL_Bits;

/** \brief DPP FSM Interrupt Status */
typedef struct _Ifx_GETH_BRIDGE_DPP_FSM_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ATPES:1;           /**< \brief [0:0] Application Transmit Interface Parity Checker Error Status (rw) */
    __IO Ifx_UReg_32Bit DPES:1;            /**< \brief [1:1] Descriptor Cache write data path Parity Checker Error Status This field, when set, indicates that a parity error is detected at the Descriptor Cache parity checker (or at PC-desc) (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ARPES:1;           /**< \brief [8:8] Application Receive interface data path Parity Error Status This field, when set, indicates that a parity error is detected at parity checker at AXI Master Interface (PC-a) (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [10:9] \internal Reserved */
    __IO Ifx_UReg_32Bit CWPES:1;           /**< \brief [11:11] CSR Write data path Parity Checker Error Status This field, when set, indicates that parity error is detected at the CSR write data interface on mci_wdata_i (or at PC8 checker) (rw) */
    __IO Ifx_UReg_32Bit ASRPES:1;          /**< \brief [12:12] AXI Slave Read data path Parity Checker Error Status This field, when set, indicates that parity error is detected at the AXI Slave read data interface on "rdata_s_o" or at PC9 checker (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit ATES:1;            /**< \brief [16:16] APP FSM Timeout Error Status This field, when set, indicates that one of the APP FSM timeout has occurred (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [20:17] \internal Reserved */
    __IO Ifx_UReg_32Bit MSTTES:1;          /**< \brief [21:21] Master Read/Write Timeout Error Status This field, when set, indicates that an Application/CSR timeout has occurred on the master (AXI) interface (rw) */
    __IO Ifx_UReg_32Bit SLVTES:1;          /**< \brief [22:22] Slave Read/Write Timeout Error Status This field, when set, indicates that an Application/CSR timeout has occurred on the AXI slave interface (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [24:23] \internal Reserved */
    __IO Ifx_UReg_32Bit FSMPES:1;          /**< \brief [25:25] FSM State Parity Error Status Indicates that parity error is detected in one of the FSM State registers (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [28:26] \internal Reserved */
    __IO Ifx_UReg_32Bit FWDPES:1;          /**< \brief [29:29] Ethernet Bridge Forward FSM State Parity Error Status Indicates that parity error is detected in one of the Ethernet Bridge Forward FSM State registers (rw) */
    __IO Ifx_UReg_32Bit FWDTES:1;          /**< \brief [30:30] Ethernet Bridge Forward FSM Timeout Error Status This field, when set, indicates that an FSM timeout has occurred on the Ethernet Bridge Forwarding Path (rw) */
    __IO Ifx_UReg_32Bit BRCPI:1;           /**< \brief [31:31] Ethernet Bridge Control Register Parity Check Error This field, when set, indicates a parity check error for Ethernet Bridge and EDMA CSR registers (rw) */
} Ifx_GETH_BRIDGE_DPP_FSM_INTERRUPT_STATUS_Bits;

/** \brief ECC Control */
typedef struct _Ifx_GETH_BRIDGE_ECC_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :5;                /**< \brief [4:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DESCED:1;          /**< \brief [5:5] DCACHE memory ECC Checker Disable When set to 1, disables the ECC Checker for DCACHE memory in DMA (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit EEAO:1;            /**< \brief [8:8] Descriptor Cache ECC Error Address Status Override When set, the following error address fields hold the last valid address where the error is detected (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_GETH_BRIDGE_ECC_CONTROL_Bits;

/** \brief ECC Err Addr Status */
typedef struct _Ifx_GETH_BRIDGE_ECC_ERROR_ADDRESS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ECEAS:16;          /**< \brief [15:0] DCACHE Memory ECC Correctable Error Address Status Based on the EMS field of ECC_Err_Sts_Rctl register, this field holds the Descriptor Memory&#8217;s address locations for which a correctable error is detected (r) */
    __I  Ifx_UReg_32Bit EUEAS:16;          /**< \brief [31:16] DCACHE Memory ECC Uncorrectable Error Address Status (r) */
} Ifx_GETH_BRIDGE_ECC_ERROR_ADDRESS_STATUS_Bits;

/** \brief ECC Err Cntr Status */
typedef struct _Ifx_GETH_BRIDGE_ECC_ERROR_COUNT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ECECS:8;           /**< \brief [7:0] "DCACHE Memory ECC Correctable Error Counter Status Based on the EMS field of ECC_Err_Sts_Rctl register, this field holds the Descriptor Cache memory's correctable error count value" (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit EUECS:4;           /**< \brief [19:16] "DCACHE Memory ECC Uncorrectable Error Counter Status Based on the EMS field of ECC_Err_Sts_Rctl register, this field holds the Descriptor Cache memory's uncorrectable error count value" (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_BRIDGE_ECC_ERROR_COUNT_STATUS_Bits;

/** \brief ECC Err Sts RCtl */
typedef struct _Ifx_GETH_BRIDGE_ECC_ERROR_STATUS_CAPTURE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit EESRE:1;           /**< \brief [0:0] "ECC Error Status Read Enable When this bit is set, based on the EMS field of this register, the Descriptor Cache memory's error status values is captured as follows:  - The correctable and uncorrectable error count values are captured in the ECC_Err_Cntr_Status register" (rw) */
    __IO Ifx_UReg_32Bit EMS:3;             /**< \brief [3:1] "ECC Memory Selection When EESRE bit of this register is set, this field indicates which memory's error status value to be read" (rw) */
    __IO Ifx_UReg_32Bit CCES:1;            /**< \brief [4:4] "Clear Correctable Error Status When this bit is set along with EESRE bit of this register, based on the EMS field of this register, the Descriptor Cache memory's correctable error address and correctable error count values are cleared upon reading" (rw) */
    __IO Ifx_UReg_32Bit CUES:1;            /**< \brief [5:5] "Clear Uncorrectable Error Status When this bit is set along with EESRE bit of this register, based on the EMS field of this register, the Descriptor Cache memory's uncorrectable error address and uncorrectable error count values are cleared upon reading" (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_BRIDGE_ECC_ERROR_STATUS_CAPTURE_CONTROL_Bits;

/** \brief Forward Control */
typedef struct _Ifx_GETH_BRIDGE_FORWARD_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit MAX_PKT_LENGTH:16;    /**< \brief [15:0] Maximum Packet Length for the Port to Port Forwarding Traffic (rw) */
    __IO Ifx_UReg_32Bit FW_DIS_EIN:1;      /**< \brief [16:16] Disable ATI Error Injection in the Forwarding Port for all Rx Packet Error types in the ingress port               Values:               - 0(ENABLE): ATI Error Injection Enabled               - 1(DISABLE):  ATI Error Injection Disabled (rw) */
    __IO Ifx_UReg_32Bit PYLD_CHKERR_FWEI:1;    /**< \brief [17:17] Enable ATI Error Injection for the port forwarded packets which are received with IP Payload Checksum Error Status in the ingress port Values:  - 0(DISABLE): ATI Error Injection Disabled for Rx packets with Payload Checksum Error  - 1(ENABLE):  ATI Error Injection Enabled for Rx packets with Payload Checksum Error (rw) */
    __IO Ifx_UReg_32Bit IP_HDRERR_FWEI:1;    /**< \brief [18:18] Enable ATI Error Injection for the port forwarded packets which are received with IP Header Error Status in the ingress port Values:  - 0(DISABLE): ATI Error Injection Disabled for Rx packets with IP Header Error  - 1(ENABLE):  ATI Error Injection Enabled for Rx packets with IP Header Error (rw) */
    __IO Ifx_UReg_32Bit GIANT_PKT_FWEI:1;    /**< \brief [19:19] Enable ATI Error Injection for the port forwarded packets which are received with Giant Packet Status in the ingress port (rw) */
    __IO Ifx_UReg_32Bit P2P_RUNT_PKT_FWEI:1;    /**< \brief [20:20] Enable ATI Error Injection for the port forwarded packets which are received with Good Runt Packet Status in the ingress port (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [21:21] \internal Reserved */
    __IO Ifx_UReg_32Bit PBL:8;             /**< \brief [29:22] Transmit Programmable Burst Length (rw) */
    __IO Ifx_UReg_32Bit PORT_SEL:1;        /**< \brief [30:30] Set to 0x1 to enable Port 1 in one-port mode Set to 0x0 to enable Port 0 in one-port mode (rw) */
    __IO Ifx_UReg_32Bit Q_CH_MAPPING_EN:1;    /**< \brief [31:31] Set to 0x1 to enable TxQ/RxC mapping in two-port mode (rw) */
} Ifx_GETH_BRIDGE_FORWARD_CONTROL_Bits;

/** \brief FSM ACT Timer */
typedef struct _Ifx_GETH_BRIDGE_FSM_ACT_TIMER_Bits
{
    __IO Ifx_UReg_32Bit TMR:10;            /**< \brief [9:0] CSR Clocks for 1us Tic This field indicates the number of CSR clocks required to generate 1us tic (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit NTMRMD:4;          /**< \brief [19:16] Normal Mode Timeout Value This field provides the value to be used for normal mode FSM and other interface time outs (rw) */
    __IO Ifx_UReg_32Bit LTMRMD:4;          /**< \brief [23:20] Large Mode Timeout Value This field provides the mode value to be used for large mode FSM and other interface time outs (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit CTMR:3;            /**< \brief [30:28] CSR Parity Check Interval Value This register is used for setting timer value for generating timer tic for CSR parity check (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_BRIDGE_FSM_ACT_TIMER_Bits;

/** \brief FSM Control */
typedef struct _Ifx_GETH_BRIDGE_FSM_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TMOUTEN:1;         /**< \brief [0:0] This field, when set, indicates that the FSM timeout feature is enabled (rw) */
    __IO Ifx_UReg_32Bit PRTYEN:1;          /**< \brief [1:1] This field, when set, indicates that the FSM parity feature is enabled (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [10:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ATEIN:1;           /**< \brief [11:11] APP FSM Timeout Error Injection This field, when set, indicates that Error Injection for APP FSM timeout is enabled (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [18:12] \internal Reserved */
    __IO Ifx_UReg_32Bit APEIN:1;           /**< \brief [19:19] APP FSM Parity Error Injection This field, when set, indicates that Error Injection for APP FSM Parity is enabled (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [26:20] \internal Reserved */
    __IO Ifx_UReg_32Bit ALGRNML:1;         /**< \brief [27:27] APP Large/Normal Mode Select This field, when set, indicates that large mode tic generation is used for APP domain; otherwise, normal mode tic generation is used (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_BRIDGE_FSM_CONTROL_Bits;

/** \brief Interrupt Status */
typedef struct _Ifx_GETH_BRIDGE_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit PORT_0_MACIS:1;    /**< \brief [0:0] Port 0 MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_0_MTLIS:1;    /**< \brief [1:1] Port 0 MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_1_MACIS:1;    /**< \brief [2:2] Port 1 MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_1_MTLIS:1;    /**< \brief [3:3] Port 1 MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit DMAIS:1;           /**< \brief [16:16] DMA Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_BRIDGE_INTERRUPT_STATUS_Bits;

/** \brief PMT Control */
typedef struct _Ifx_GETH_BRIDGE_PMT_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit PWRDWN_PORT0:1;    /**< \brief [0:0] Port-0 Power Down Enable When software sets this bit, both switchable and always-on logic of Port-0 is placed in the Power OFF state (rw) */
    __IO Ifx_UReg_32Bit PWRDWN_PORT1:1;    /**< \brief [1:1] Port 1 Power Down Enable When software sets this bit, both switchable and always-on logic of Port 1 is placed in the Power OFF state (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit PMT_ENABLE_ETHBR:1;    /**< \brief [8:8] PMT Enable for Ethernet Bridge switchable Power Domain (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_GETH_BRIDGE_PMT_CONTROL_Bits;

/** \brief Port 0 Control */
typedef struct _Ifx_GETH_BRIDGE_PORT_0_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit FWD_EN:8;          /**< \brief [7:0] Indicate whether any of the TxQ[7:0] is a forwarding path (rw) */
    __IO Ifx_UReg_32Bit RXC_EN:8;          /**< \brief [15:8] Enable any of the RxC[7:0] (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ_EN:8;          /**< \brief [31:24] Enable any of the TxQ[7:0] (rw) */
} Ifx_GETH_BRIDGE_PORT_0_CONTROL_Bits;

/** \brief Port 1 Control */
typedef struct _Ifx_GETH_BRIDGE_PORT_1_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit FWD_EN:8;          /**< \brief [7:0] Indicate whether any of the TxQ[7:0] is a forwarding path (rw) */
    __IO Ifx_UReg_32Bit RXC_EN:8;          /**< \brief [15:8] Enable any of the RxC[7:0] (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ_EN:8;          /**< \brief [31:24] Enable any of the TxQ[7:0] (rw) */
} Ifx_GETH_BRIDGE_PORT_1_CONTROL_Bits;

/** \brief Port Flush and Loopback Control */
typedef struct _Ifx_GETH_BRIDGE_PORT_FLUSH_AND_LOOPBACK_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_FLUSH_PORT0:8;    /**< \brief [7:0] To flush the Rx Queue corresponding to the selected RxC in Port 0 when the RxC is mapped to forwarding path (rw) */
    __IO Ifx_UReg_32Bit RXQ_FLUSH_PORT1:8;    /**< \brief [15:8] To flush the Rx Queue corresponding to the selected RxC in Port 1 when the RxC is mapped to forwarding path (rw) */
    __IO Ifx_UReg_32Bit PORT_LPBK_EN:2;    /**< \brief [17:16] To enable same-port loopback mode for port 1 (bit[17]) and port 0 (bit[16]) (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [23:18] \internal Reserved */
    __IO Ifx_UReg_32Bit PTP_PORT_NUM:1;    /**< \brief [24:24] Specifies the Port number for the PTP Timestamp Selection from Port 0/ Port 1 (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_BRIDGE_PORT_FLUSH_AND_LOOPBACK_CONTROL_Bits;

/** \brief RXC Map Port 0 */
typedef struct _Ifx_GETH_BRIDGE_RXC_MAP_PORT_0_Bits
{
    __IO Ifx_UReg_32Bit RXC0:4;            /**< \brief [3:0] RxC0 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC1:4;            /**< \brief [7:4] RxC1 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC2:4;            /**< \brief [11:8] RxC2 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC3:4;            /**< \brief [15:12] RxC3 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC4:4;            /**< \brief [19:16] RxC4 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC5:4;            /**< \brief [23:20] RxC5 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC6:4;            /**< \brief [27:24] RxC6 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC7:4;            /**< \brief [31:28] RxC7 connection mappings to Rx EDMA Channel of Host port (rw) */
} Ifx_GETH_BRIDGE_RXC_MAP_PORT_0_Bits;

/** \brief RXC Map Port 1 */
typedef struct _Ifx_GETH_BRIDGE_RXC_MAP_PORT_1_Bits
{
    __IO Ifx_UReg_32Bit RXC0:4;            /**< \brief [3:0] RxC0 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC1:4;            /**< \brief [7:4] RxC1 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC2:4;            /**< \brief [11:8] RxC2 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC3:4;            /**< \brief [15:12] RxC3 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC4:4;            /**< \brief [19:16] RxC4 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC5:4;            /**< \brief [23:20] RxC5 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC6:4;            /**< \brief [27:24] RxC6 connection mappings to Rx EDMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC7:4;            /**< \brief [31:28] RxC7 connection mappings to Rx EDMA Channel of Host port (rw) */
} Ifx_GETH_BRIDGE_RXC_MAP_PORT_1_Bits;

/** \brief Safety Interrupt Status */
typedef struct _Ifx_GETH_BRIDGE_SAFETY_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit DCIS:1;            /**< \brief [1:1] DMA Safety Correctable Error Interrupt Status This bit indicates an interrupt event in the DMA safety feature (r) */
    __I  Ifx_UReg_32Bit DUIS:1;            /**< \brief [2:2] DMA Safety Unrecoverable Error Interrupt Status This bit indicates an uncorrectable error interrupt event in DMA Safety  feature (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit PORT_0_MSCIS:1;    /**< \brief [4:4] Port 0 MTL Safety Correctable error Interrupt Status This bit indicates a correctable error interrupt event in Port 0 MTL (r) */
    __I  Ifx_UReg_32Bit PORT_0_MSUIS:1;    /**< \brief [5:5] Port 0 MTL Safety Unrecoverable error Interrupt Status This bit indicates an uncorrectable error interrupt event in Port 0 MTL (r) */
    __I  Ifx_UReg_32Bit PORT_0_MCSIS:1;    /**< \brief [6:6] Port 0 MAC Safety Unrecoverable Interrupt Status Indicates an unrecoverable Safety related Interrupt is set in the Port 0 MAC module (r) */
    __I  Ifx_UReg_32Bit PORT_1_MSCIS:1;    /**< \brief [7:7] Port 1 MTL Safety Correctable error Interrupt Status This bit indicates a correctable error interrupt event in Port 1 MTL (r) */
    __I  Ifx_UReg_32Bit PORT_1_MSUIS:1;    /**< \brief [8:8] Port 1 MTL Safety Unrecoverable error Interrupt Status This bit indicates an uncorrectable error interrupt event in Port 1 MTL (r) */
    __I  Ifx_UReg_32Bit PORT_1_MCSIS:1;    /**< \brief [9:9] Port 1 MAC Safety Unrecoverable Interrupt Status Indicates an unrecoverable Safety related Interrupt is set in the Port 1 MAC module (r) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_GETH_BRIDGE_SAFETY_INTERRUPT_STATUS_Bits;

/** \brief SCSR Control */
typedef struct _Ifx_GETH_BRIDGE_SCSR_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit CPEN:1;            /**< \brief [0:0] Ethernet Bridge/EDMA CSR Parity Enable This field, when set, indicates that CSR parity checking is enabled (rw) */
    __IO Ifx_UReg_32Bit CEIN:1;            /**< \brief [1:1] Ethernet Bridge /EDMA CSR Error Injection Enable This field, when set, indicates that CSR error injection is enabled for the protected Ethernet Bridge and EDMA registers (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_BRIDGE_SCSR_CONTROL_Bits;

/** \brief SCSR Parity Err Count */
typedef struct _Ifx_GETH_BRIDGE_SCSR_PARITY_ERR_COUNT_Bits
{
    __I  Ifx_UReg_32Bit ECCL:10;           /**< \brief [9:0] Count of parity errors in current safety loop This field indicates the Count of parity errors in the current loop of all safety register parity check (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __I  Ifx_UReg_32Bit ECLL:10;           /**< \brief [25:16] Count of parity errors in the previous safety loop This field indicates the Count of parity errors in previous loop of all safety register parity check (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_GETH_BRIDGE_SCSR_PARITY_ERR_COUNT_Bits;

/** \brief SCSR Parity Status */
typedef struct _Ifx_GETH_BRIDGE_SCSR_PARITY_STATUS_Bits
{
    __I  Ifx_UReg_32Bit CADD:16;           /**< \brief [15:0] CSR Address with error This field indicates the offset address of the last register in which parity mismatch occurred (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_BRIDGE_SCSR_PARITY_STATUS_Bits;

/** \brief TXQ Map Port 0 */
typedef struct _Ifx_GETH_BRIDGE_TXQ_MAP_PORT_0_Bits
{
    __IO Ifx_UReg_32Bit TXQ0:4;            /**< \brief [3:0] TxQ0 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ1:4;            /**< \brief [7:4] TxQ1 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ2:4;            /**< \brief [11:8] TxQ2 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ3:4;            /**< \brief [15:12] TxQ3 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ4:4;            /**< \brief [19:16] TxQ4 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ5:4;            /**< \brief [23:20] TxQ5 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ6:4;            /**< \brief [27:24] TxQ6 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ7:4;            /**< \brief [31:28] TxQ7 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
} Ifx_GETH_BRIDGE_TXQ_MAP_PORT_0_Bits;

/** \brief TXQ Map Port 1 */
typedef struct _Ifx_GETH_BRIDGE_TXQ_MAP_PORT_1_Bits
{
    __IO Ifx_UReg_32Bit TXQ0:4;            /**< \brief [3:0] TxQ0 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ1:4;            /**< \brief [7:4] TxQ1 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ2:4;            /**< \brief [11:8] TxQ2 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ3:4;            /**< \brief [15:12] TxQ3 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ4:4;            /**< \brief [19:16] TxQ4 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ5:4;            /**< \brief [23:20] TxQ5 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ6:4;            /**< \brief [27:24] TxQ6 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ7:4;            /**< \brief [31:28] TxQ7 connection mappings to either Tx EDMA channel of the Host port or Rx EDMA Channels of the other Ethernet line ports (rw) */
} Ifx_GETH_BRIDGE_TXQ_MAP_PORT_1_Bits;

/** \brief Clock control register */
typedef struct _Ifx_GETH_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module disable request bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module disable status bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_CLC_Bits;

/** \brief DMA AM Sfty Ctrl */
typedef struct _Ifx_GETH_DMA_AM_SFTY_CTRL_Bits
{
    __IO Ifx_UReg_32Bit AMSD:1;            /**< \brief [0:0] AXI Master Safety Disable  - 1: Disables the safety features for all the channels of AXI Master Interface (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit CESM:1;            /**< \brief [2:2] Clear Error Status for AXI Master Interface Safety  - 1: AXI Master Interface Safety ECC uncorrectable and correctable error counters are cleared upon reading by application (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_CTRL_Bits;

/** \brief DMA AM Sfty DPP Intr Sts */
typedef struct _Ifx_GETH_DMA_AM_SFTY_DPP_INTR_STS_Bits
{
    __IO Ifx_UReg_32Bit BVPES:1;           /**< \brief [0:0] AXI Master Write Response Channel Valid Parity Error Status  - 1: Indicates that a parity error is detected at the AXI Master Write Response channel valid signal (rw) */
    __IO Ifx_UReg_32Bit BCPES:1;           /**< \brief [1:1] AXI Master Write Response channel Control Parity Error Status  - 1: Indicates that a parity error is detected at the AXI Master Write Response channel control signals (rw) */
    __IO Ifx_UReg_32Bit RVPES:1;           /**< \brief [2:2] AXI Master Read Data channel Valid Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Master Read Data channel valid signal (rw) */
    __IO Ifx_UReg_32Bit RCPES:1;           /**< \brief [3:3] AXI Master Read Data channel Control Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Master Read Data channel control signals (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit WRPES:1;           /**< \brief [5:5] AXI Master Write Data channel Ready Parity Error Status  - 1: Indicates that a parity error is detected on AXI Master W channel Ready signal (rw) */
    __IO Ifx_UReg_32Bit AWRPES:1;          /**< \brief [6:6] AXI Master Write Address channel Ready Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Master AW channel Ready signal (rw) */
    __IO Ifx_UReg_32Bit ARRPES:1;          /**< \brief [7:7] AXI Master Read Address channel Ready Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Master Read Address channel Ready signal (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_DPP_INTR_STS_Bits;

/** \brief DMA AM Sfty ECC Intr Sts */
typedef struct _Ifx_GETH_DMA_AM_SFTY_ECC_INTR_STS_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RDCES:1;           /**< \brief [2:2] AXI Master Read Data channel data Correctable Error Status  - 1: Indicates that a correctable error is detected at AXI Master Read Data channel data (rw) */
    __IO Ifx_UReg_32Bit RDUES:1;           /**< \brief [3:3] AXI Master Read Data channel data Uncorrectable Error Status  - 1: Indicates that an uncorrectable error is detected at AXI Master Read Data channel data (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_ECC_INTR_STS_Bits;

/** \brief DMA AM Sfty Intr En */
typedef struct _Ifx_GETH_DMA_AM_SFTY_INTR_EN_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RDCEIE:1;          /**< \brief [2:2] AXI Master Read Data channel Data Correctable Error Interrupt Enable  - 1: DWC_xgmac generates an interrupt when a correctable error is detected in the AXI Master Read Data channel data and RDCES bit of DMA_AM_Sfty_ECC_Intr_Sts register is set (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_INTR_EN_Bits;

/** \brief DMA AM Sfty RDC Dbg Ctrl */
typedef struct _Ifx_GETH_DMA_AM_SFTY_RDC_DBG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit RID:6;             /**< \brief [5:0] AXI Master Read Data channel RID Control Signal (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit RRESP:2;           /**< \brief [13:12] AXI Master Read Data channel RRESP Control Signal (rw) */
    __IO Ifx_UReg_32Bit RLAST:1;           /**< \brief [14:14] AXI Master Read Data channel RLAST Control Signal (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_RDC_DBG_CTRL_Bits;

/** \brief DMA AM Sfty RDC Dbg Data */
typedef struct _Ifx_GETH_DMA_AM_SFTY_RDC_DBG_DATA_Bits
{
    __IO Ifx_UReg_32Bit RD:32;             /**< \brief [31:0] AXI Master Read Data channel Debug Data (rw) */
} Ifx_GETH_DMA_AM_SFTY_RDC_DBG_DATA_Bits;

/** \brief DMA AM Sfty RDC ECC Err Cntr Sts */
typedef struct _Ifx_GETH_DMA_AM_SFTY_RDC_ECC_ERR_CNTR_STS_Bits
{
    __IO Ifx_UReg_32Bit RECECS:8;          /**< \brief [7:0] AXI Master Read Data channel ECC Correctable Error Counter (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit REUECS:8;          /**< \brief [23:16] AXI Master Read Data channel ECC Uncorrectable Error Counter (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_RDC_ECC_ERR_CNTR_STS_Bits;

/** \brief DMA AM Sfty WRC Dbg Ctrl */
typedef struct _Ifx_GETH_DMA_AM_SFTY_WRC_DBG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit BID:6;             /**< \brief [5:0] AXI Master Response Channel BID Control Signal (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit BRESP:2;           /**< \brief [13:12] AXI Master Response Channel BRESP Control Signal (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_DMA_AM_SFTY_WRC_DBG_CTRL_Bits;

/** \brief DMA AS Sfty Ctrl */
typedef struct _Ifx_GETH_DMA_AS_SFTY_CTRL_Bits
{
    __IO Ifx_UReg_32Bit ASSD:1;            /**< \brief [0:0] AXI Slave Safety Disable  - 1: Disables the safety features for all the channels of AXI Slave Interface (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit CESS:1;            /**< \brief [2:2] Clear Error Status for AXI Slave Interface Safety  - 1: AXI Slave Interface Safety ECC uncorrectable and correctable error counters are cleared upon reading by application (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_CTRL_Bits;

/** \brief DMA AS Sfty DPP Intr Sts */
typedef struct _Ifx_GETH_DMA_AS_SFTY_DPP_INTR_STS_Bits
{
    __IO Ifx_UReg_32Bit BRPES:1;           /**< \brief [0:0] AXI Slave Write Response channel Ready Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Slave Write Response channel ready signal (rw) */
    __IO Ifx_UReg_32Bit RRPES:1;           /**< \brief [1:1] AXI Slave Read Data channel Ready Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Slave Read Data channel ready signal (rw) */
    __IO Ifx_UReg_32Bit WVPES:1;           /**< \brief [2:2] AXI Slave Write Data channel Valid Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Slave Write Data channel valid signal (rw) */
    __IO Ifx_UReg_32Bit WCPES:1;           /**< \brief [3:3] AXI Slave Write Data channel Control Parity Error Status  - 1: Indicates that a parity error is detected on the AXI Slave Write Data channel control signal (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit AWVPES:1;          /**< \brief [5:5] AXI Slave Write Address channel Valid Parity Error Status (rw) */
    __IO Ifx_UReg_32Bit AWCPES:1;          /**< \brief [6:6] AXI Slave Write Address channel Control Parity Error Status (rw) */
    __IO Ifx_UReg_32Bit AWAPES:1;          /**< \brief [7:7] AXI Slave Write Address channel Address Parity Error Status (rw) */
    __IO Ifx_UReg_32Bit ARVPES:1;          /**< \brief [8:8] AXI Slave Read Address channel Valid Parity Error Status (rw) */
    __IO Ifx_UReg_32Bit ARCPES:1;          /**< \brief [9:9] AXI Slave Read Address channel Control Parity Error Status (rw) */
    __IO Ifx_UReg_32Bit ARAPES:1;          /**< \brief [10:10] AXI Slave Read Address channel Address Parity Error Status (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_DPP_INTR_STS_Bits;

/** \brief DMA AS Sfty ECC Intr Sts */
typedef struct _Ifx_GETH_DMA_AS_SFTY_ECC_INTR_STS_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit WDCES:1;           /**< \brief [2:2] AXI Slave Write Data channel Data Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit WDUES:1;           /**< \brief [3:3] AXI Slave Write Data channel Data Uncorrectable Error Status  - 1: Indicates that an uncorrectable error is detected at AXI Slave Write Data channel data (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_ECC_INTR_STS_Bits;

/** \brief DMA AS Sfty Intr En */
typedef struct _Ifx_GETH_DMA_AS_SFTY_INTR_EN_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit WDCEIE:1;          /**< \brief [2:2] AXI Slave Write Data channel Data Correctable Error Interrupt Enable  - 1: DWC_xgmac generates an interrupt when a correctable error is detected in the AXI Slave Write Data channel data and WDCES bit of DMA_AS_Sfty_ECC_Intr_Sts register is set (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_INTR_EN_Bits;

/** \brief DMA AS Sfty RAC Dbg Addr */
typedef struct _Ifx_GETH_DMA_AS_SFTY_RAC_DBG_ADDR_Bits
{
    __IO Ifx_UReg_32Bit ADDR:32;           /**< \brief [31:0] AXI Slave Read Address Channel Address (rw) */
} Ifx_GETH_DMA_AS_SFTY_RAC_DBG_ADDR_Bits;

/** \brief DMA AS Sfty RAC Dbg Ctrl */
typedef struct _Ifx_GETH_DMA_AS_SFTY_RAC_DBG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit ARID:8;            /**< \brief [7:0] AXI Slave Address Read Address channel ARID Control Signal (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit ARLEN:8;           /**< \brief [23:16] AXI Slave Address Read Address channel ARLEN Control Signal (rw) */
    __IO Ifx_UReg_32Bit ARSIZE:3;          /**< \brief [26:24] AXI Slave Address Read Address channel ARSIZE Control Signal (rw) */
    __IO Ifx_UReg_32Bit ARBURST:2;         /**< \brief [28:27] AXI Slave Address Read Address channel ARBURST Control Signal (rw) */
    __IO Ifx_UReg_32Bit ARLOCK:2;          /**< \brief [30:29] AXI Slave Address Read Address channel ARLOCK Control Signal (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_RAC_DBG_CTRL_Bits;

/** \brief DMA AS Sfty WAC Dbg Addr */
typedef struct _Ifx_GETH_DMA_AS_SFTY_WAC_DBG_ADDR_Bits
{
    __IO Ifx_UReg_32Bit ADDR:32;           /**< \brief [31:0] AXI Slave Address Write Address channel address (rw) */
} Ifx_GETH_DMA_AS_SFTY_WAC_DBG_ADDR_Bits;

/** \brief DMA AS Sfty WAC Dbg Ctrl */
typedef struct _Ifx_GETH_DMA_AS_SFTY_WAC_DBG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit AWID:8;            /**< \brief [7:0] AXI Slave Address Write Address channel AWID Control Signal (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit AWLEN:8;           /**< \brief [23:16] AXI Slave Address Write Address channel AWLEN Control Signal (rw) */
    __IO Ifx_UReg_32Bit AWSIZE:3;          /**< \brief [26:24] AXI Slave Address Write Address channel AWSIZE Control Signal (rw) */
    __IO Ifx_UReg_32Bit AWBURST:2;         /**< \brief [28:27] AXI Slave Address Write Address channel AWBURST Control Signal (rw) */
    __IO Ifx_UReg_32Bit AWLOCK:2;          /**< \brief [30:29] AXI Slave Address Write Address channel AWLOCK Control Signal (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_WAC_DBG_CTRL_Bits;

/** \brief DMA AS Sfty WDC Dbg Ctrl */
typedef struct _Ifx_GETH_DMA_AS_SFTY_WDC_DBG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit WID:8;             /**< \brief [7:0] AXI Slave Write Data channel WID Control Signal (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WSTRB:4;           /**< \brief [19:16] AXI Slave Write Data channel WSTRB Control Signal (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_WDC_DBG_CTRL_Bits;

/** \brief DMA AS Sfty WDC Dbg Data */
typedef struct _Ifx_GETH_DMA_AS_SFTY_WDC_DBG_DATA_Bits
{
    __IO Ifx_UReg_32Bit WD:32;             /**< \brief [31:0] AXI Slave Write Data Channel Debug Data (rw) */
} Ifx_GETH_DMA_AS_SFTY_WDC_DBG_DATA_Bits;

/** \brief DMA AS Sfty WDC ECC Err Cntr Sts */
typedef struct _Ifx_GETH_DMA_AS_SFTY_WDC_ECC_ERR_CNTR_STS_Bits
{
    __IO Ifx_UReg_32Bit WECECS:8;          /**< \brief [7:0] AXI Slave Write Data channel ECC Correctable Error Counter (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WEUECS:8;          /**< \brief [23:16] AXI Slave Write Data channel ECC Uncorrectable Error Counter (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_DMA_AS_SFTY_WDC_ECC_ERR_CNTR_STS_Bits;

/** \brief AXI LPI Entry Interval */
typedef struct _Ifx_GETH_DMA_AXI_LPI_ENTRY_INTERVAL_Bits
{
    __IO Ifx_UReg_32Bit LPIEI:4;           /**< \brief [3:0] LPI Entry Interval (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_DMA_AXI_LPI_ENTRY_INTERVAL_Bits;

/** \brief AXI Rx AW ACE Control */
typedef struct _Ifx_GETH_DMA_AXI_RX_AW_ACE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RDWC:4;            /**< \brief [3:0] Receive DMA Write Descriptor Cache Control (rw) */
    __IO Ifx_UReg_32Bit RDWD:2;            /**< \brief [5:4] Receive DMA Write Descriptor Domain Control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit RPC:4;             /**< \brief [11:8] Receive DMA Payload Cache Control (rw) */
    __IO Ifx_UReg_32Bit RPD:2;             /**< \brief [13:12] Receive DMA Payload Domain Control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit RHC:4;             /**< \brief [19:16] Receive DMA Header Cache Control (rw) */
    __IO Ifx_UReg_32Bit RHD:2;             /**< \brief [21:20] Receive DMA Header Domain Control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit RDC:4;             /**< \brief [27:24] Receive DMA Buffer Cache Control (rw) */
    __IO Ifx_UReg_32Bit RDD:2;             /**< \brief [29:28] Receive DMA Buffer Domain Control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_DMA_AXI_RX_AW_ACE_CONTROL_Bits;

/** \brief AXI TxRx AWAR ACE Control */
typedef struct _Ifx_GETH_DMA_AXI_TXRX_AWAR_ACE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TDWC:4;            /**< \brief [3:0] Transmit DMA Write Descriptor Cache control (rw) */
    __IO Ifx_UReg_32Bit TDWD:2;            /**< \brief [5:4] Transmit DMA Write Descriptor Domain control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit RDRC:4;            /**< \brief [11:8] Receive DMA Read Descriptor Cache control (rw) */
    __IO Ifx_UReg_32Bit RDRD:2;            /**< \brief [13:12] Receive DMA Read Descriptor Domain control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit RDP:3;             /**< \brief [18:16] DMA Read Protection control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit WRP:3;             /**< \brief [22:20] DMA Write Protection control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_DMA_AXI_TXRX_AWAR_ACE_CONTROL_Bits;

/** \brief AXI Tx AR ACE Control */
typedef struct _Ifx_GETH_DMA_AXI_TX_AR_ACE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TDRC:4;            /**< \brief [3:0] Transmit DMA Read Descriptor Cache Control (rw) */
    __IO Ifx_UReg_32Bit TDRD:2;            /**< \brief [5:4] Transmit DMA Read Descriptor Domain Control (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TEC:4;             /**< \brief [11:8] Transmit DMA Extended Packet Buffer (rw) */
    __IO Ifx_UReg_32Bit TED:2;             /**< \brief [13:12] Transmit DMA Extended Packet Buffer (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit THC:4;             /**< \brief [19:16] Transmit DMA First Packet Buffer (rw) */
    __IO Ifx_UReg_32Bit THD:2;             /**< \brief [21:20] Transmit DMA First Packet Buffer (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_GETH_DMA_AXI_TX_AR_ACE_CONTROL_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH0_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH0_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH1_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH1_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH2_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH2_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH3_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH3_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH4_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH4_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH5_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH5_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH6_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH6_TXEXTCFG_Bits;

/** \brief DMA Channel TxExtCfg */
typedef struct _Ifx_GETH_DMA_CH7_TXEXTCFG_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH7_TXEXTCFG_Bits;

/** \brief DMA Channel Control */
typedef struct _Ifx_GETH_DMA_CH_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit PBLX8:1;           /**< \brief [16:16] 8xPBL mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit DSL:3;             /**< \brief [20:18] Descriptor Skip Length (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SPH:1;             /**< \brief [24:24] Header-Payload Split (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_DMA_CH_CONTROL_Bits;

/** \brief DMA Channel Current App RxBuffer L */
typedef struct _Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_L_Bits
{
    __I  Ifx_UReg_32Bit CURRBUFAPTR:32;    /**< \brief [31:0] Application Receive Buffer Address Pointer (r) */
} Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_L_Bits;

/** \brief DMA Channel Current App RxDesc L */
typedef struct _Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_L_Bits
{
    __I  Ifx_UReg_32Bit CURRDESAPTR:32;    /**< \brief [31:0] Application Receive Descriptor Address Pointer (r) */
} Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_L_Bits;

/** \brief DMA Channel Current App TxBuffer L */
typedef struct _Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_L_Bits
{
    __I  Ifx_UReg_32Bit CURTBUFAPTR:32;    /**< \brief [31:0] Application Transmit Buffer Address Pointer (r) */
} Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_L_Bits;

/** \brief DMA Channel Current App TxDesc L */
typedef struct _Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_L_Bits
{
    __I  Ifx_UReg_32Bit CURTDESAPTR:32;    /**< \brief [31:0] Application Transmit Descriptor Address Pointer (r) */
} Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_L_Bits;

/** \brief DMA Channel Debug Status */
typedef struct _Ifx_GETH_DMA_CH_DEBUG_STATUS_Bits
{
    __I  Ifx_UReg_32Bit TDFS:3;            /**< \brief [2:0] TxDMA Descriptor Fetch FSM State (r) */
    __I  Ifx_UReg_32Bit TDXS:3;            /**< \brief [5:3] TxDMA Data Transfer FSM State (r) */
    __I  Ifx_UReg_32Bit TDRS:2;            /**< \brief [7:6] TxDMA Data Request FSM State (r) */
    __I  Ifx_UReg_32Bit TDTS:4;            /**< \brief [11:8] TxDMA Data Transfer Control Module FSM State (r) */
    __I  Ifx_UReg_32Bit TDWS:3;            /**< \brief [14:12] TxDMA Descriptor Write FSM state (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit RDFS:3;            /**< \brief [18:16] RxDMA Descriptor Fetch FSM State (r) */
    __I  Ifx_UReg_32Bit RDTS:9;            /**< \brief [27:19] RxDMA Data Transfer FSM State (r) */
    __I  Ifx_UReg_32Bit RDWS:3;            /**< \brief [30:28] RxDMA Descriptor Write FSM state (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_DMA_CH_DEBUG_STATUS_Bits;

/** \brief DMA Channel Desc Mem Cache Fill Level */
typedef struct _Ifx_GETH_DMA_CH_DESC_MEM_CACHE_FILL_LEVEL_Bits
{
    __I  Ifx_UReg_32Bit TX_FILL_LVL:7;     /**< \brief [6:0] TxDMA Descriptor Cache Fill Level (r) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [15:7] \internal Reserved */
    __I  Ifx_UReg_32Bit RX_FILL_LVL:7;     /**< \brief [22:16] RxDMA Descriptor Cache Fill Level (r) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_DMA_CH_DESC_MEM_CACHE_FILL_LEVEL_Bits;

/** \brief DMA CH Ind Ctrl */
typedef struct _Ifx_GETH_DMA_CH_IND_CTRL_Bits
{
    __IO Ifx_UReg_32Bit OB:1;              /**< \brief [0:0] Operation Busy (rw) */
    __IO Ifx_UReg_32Bit CT:1;              /**< \brief [1:1] Command Type (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit AUTO:2;            /**< \brief [5:4] Auto Increment  - 00: No auto increment  - 01: Auto increment MSEL only  - 10: Auto increment AOFF only  - 11: No auto increment (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit AOFF:4;            /**< \brief [11:8] Address Offset This field selects the offset address of per DMA Channel registers specified by MSEL field (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit MSEL:4;            /**< \brief [19:16] Mode Select (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_DMA_CH_IND_CTRL_Bits;

/** \brief DMA CH Ind Data */
typedef struct _Ifx_GETH_DMA_CH_IND_DATA_Bits
{
    __IO Ifx_UReg_32Bit WT:7;              /**< \brief [6:0] Weights (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_CH_IND_DATA_Bits;

/** \brief DMA Channel Interrupt Enable */
typedef struct _Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TIE:1;             /**< \brief [0:0] Transmit Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXSE:1;            /**< \brief [1:1] Transmit Stopped Enable (rw) */
    __IO Ifx_UReg_32Bit TBUE:1;            /**< \brief [2:2] Transmit Buffer Unavailable Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [5:3] \internal Reserved */
    __IO Ifx_UReg_32Bit RIE:1;             /**< \brief [6:6] Receive Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RBUE:1;            /**< \brief [7:7] Receive Buffer Unavailable Enable (rw) */
    __IO Ifx_UReg_32Bit RSE:1;             /**< \brief [8:8] Receive Stopped Enable (rw) */
    __IO Ifx_UReg_32Bit DDEE:1;            /**< \brief [9:9] Descriptor Definition Error Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit FBEE:1;            /**< \brief [12:12] Fatal Bus Error Enable (rw) */
    __IO Ifx_UReg_32Bit CDEE:1;            /**< \brief [13:13] Context Descriptor Error Enable (rw) */
    __IO Ifx_UReg_32Bit AIE:1;             /**< \brief [14:14] Abnormal Interrupt Summary Enable (rw) */
    __IO Ifx_UReg_32Bit NIE:1;             /**< \brief [15:15] Normal Interrupt Summary Enable (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits;

/** \brief DMA Channel Miss Packet Cnt */
typedef struct _Ifx_GETH_DMA_CH_MISS_PACKET_CNT_Bits
{
    __I  Ifx_UReg_32Bit MFC:11;            /**< \brief [10:0] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit MFCO:1;            /**< \brief [15:15] Overflow status of MFC Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_DMA_CH_MISS_PACKET_CNT_Bits;

/** \brief DMA Channel RxDesc List LAddress */
typedef struct _Ifx_GETH_DMA_CH_RXDESC_LIST_LADDRESS_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RDESLA:29;         /**< \brief [31:3] Start of Receive List (rw) */
} Ifx_GETH_DMA_CH_RXDESC_LIST_LADDRESS_Bits;

/** \brief DMA Channel RxDesc Tail LPointer */
typedef struct _Ifx_GETH_DMA_CH_RXDESC_TAIL_LPOINTER_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RDT:29;            /**< \brief [31:3] Receive Descriptor Tail Pointer (rw) */
} Ifx_GETH_DMA_CH_RXDESC_TAIL_LPOINTER_Bits;

/** \brief DMA Channel Rx Control */
typedef struct _Ifx_GETH_DMA_CH_RX_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit SR:1;              /**< \brief [0:0] Start or Stop Receive (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit RBSZ:11;           /**< \brief [14:4] Receive Buffer size (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit RXPBL:6;           /**< \brief [21:16] Receive Programmable Burst Length (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit RQOS:4;            /**< \brief [27:24] Receive QOS (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [30:28] \internal Reserved */
    __IO Ifx_UReg_32Bit RPF:1;             /**< \brief [31:31] Rx DMA Packet Flush (rw) */
} Ifx_GETH_DMA_CH_RX_CONTROL_Bits;

/** \brief DMA Channel Rx Control2 */
typedef struct _Ifx_GETH_DMA_CH_RX_CONTROL2_Bits
{
    __IO Ifx_UReg_32Bit RDRL:16;           /**< \brief [15:0] Receive Descriptor Ring Length (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [16:16] \internal Reserved */
    __IO Ifx_UReg_32Bit ARBS:7;            /**< \brief [23:17] Alternate Receive Buffer Size (rw) */
    __IO Ifx_UReg_32Bit OWRQ:1;            /**< \brief [24:24] Write Outstanding Requests (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_DMA_CH_RX_CONTROL2_Bits;

/** \brief DMA Channel Rx Data Xfer Ring Offset */
typedef struct _Ifx_GETH_DMA_CH_RX_DATA_XFER_RING_OFFSET_Bits
{
    __I  Ifx_UReg_32Bit DESC_OFFSET:16;    /**< \brief [15:0] RxDMA Channel Data Transfer Ring Offset (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_DMA_CH_RX_DATA_XFER_RING_OFFSET_Bits;

/** \brief DMA Channel Rx Desc Write Ring Offset */
typedef struct _Ifx_GETH_DMA_CH_RX_DESC_WRITE_RING_OFFSET_Bits
{
    __I  Ifx_UReg_32Bit DESC_OFFSET:16;    /**< \brief [15:0] RxDMA Channel Descriptor Write Ring Offset (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_DMA_CH_RX_DESC_WRITE_RING_OFFSET_Bits;

/** \brief DMA Channel Rx Interrupt Watchdog Timer */
typedef struct _Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits
{
    __IO Ifx_UReg_32Bit RWT:8;             /**< \brief [7:0] Receive Interrupt Watchdog Timer Count (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [11:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RWTU:2;            /**< \brief [13:12] Receive Interrupt Watchdog Timer Count Units (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit RBCT:10;           /**< \brief [25:16] Receive Byte Count Threshold (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [30:26] \internal Reserved */
    __IO Ifx_UReg_32Bit PSEL:1;            /**< \brief [31:31] Packet Count Interrupt Select (rw) */
} Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits;

/** \brief DMA Channel Slot Function Control Status */
typedef struct _Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ESC:1;             /**< \brief [0:0] Enable Slot Comparison (rw) */
    __IO Ifx_UReg_32Bit ASC:1;             /**< \brief [1:1] Advance Slot Check (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __I  Ifx_UReg_32Bit RSN:4;             /**< \brief [19:16] Reference Slot Number (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits;

/** \brief DMA Channel Status */
typedef struct _Ifx_GETH_DMA_CH_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TI:1;              /**< \brief [0:0] Transmit Interrupt (rw) */
    __IO Ifx_UReg_32Bit TPS:1;             /**< \brief [1:1] Transmit Process Stopped (rw) */
    __IO Ifx_UReg_32Bit TBU:1;             /**< \brief [2:2] Transmit Buffer Unavailable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [5:3] \internal Reserved */
    __IO Ifx_UReg_32Bit RI:1;              /**< \brief [6:6] Receive Interrupt (rw) */
    __IO Ifx_UReg_32Bit RBU:1;             /**< \brief [7:7] Receive Buffer Unavailable (rw) */
    __IO Ifx_UReg_32Bit RPS:1;             /**< \brief [8:8] Receive Process Stopped (rw) */
    __IO Ifx_UReg_32Bit DDE:1;             /**< \brief [9:9] Descriptor Definition Error (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit FBE:1;             /**< \brief [12:12] Fatal Bus Error (rw) */
    __IO Ifx_UReg_32Bit CDE:1;             /**< \brief [13:13] Context Descriptor Error (rw) */
    __IO Ifx_UReg_32Bit AIS:1;             /**< \brief [14:14] Abnormal Interrupt Summary (rw) */
    __IO Ifx_UReg_32Bit NIS:1;             /**< \brief [15:15] Normal Interrupt Summary (rw) */
    __IO Ifx_UReg_32Bit TEB:3;             /**< \brief [18:16] Tx DMA Bus Error (rw) */
    __IO Ifx_UReg_32Bit REB:3;             /**< \brief [21:19] Rx DMA Bus Error (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_GETH_DMA_CH_STATUS_Bits;

/** \brief DMA Channel TxDesc List LAddress */
typedef struct _Ifx_GETH_DMA_CH_TXDESC_LIST_LADDRESS_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TDESLA:29;         /**< \brief [31:3] Start of Transmit List (rw) */
} Ifx_GETH_DMA_CH_TXDESC_LIST_LADDRESS_Bits;

/** \brief DMA Channel TxDesc Tail LPointer */
typedef struct _Ifx_GETH_DMA_CH_TXDESC_TAIL_LPOINTER_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TDT:29;            /**< \brief [31:3] Transmit Descriptor Tail Pointer (rw) */
} Ifx_GETH_DMA_CH_TXDESC_TAIL_LPOINTER_Bits;

/** \brief DMA Channel Tx Control */
typedef struct _Ifx_GETH_DMA_CH_TX_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit ST:1;              /**< \brief [0:0] Start or Stop Transmission Command (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [15:1] \internal Reserved */
    __IO Ifx_UReg_32Bit TXPBL:6;           /**< \brief [21:16] Transmit Programmable Burst Length (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit TQOS:4;            /**< \brief [27:24] Transmit QOS (rw) */
    __IO Ifx_UReg_32Bit EDSE:1;            /**< \brief [28:28] Enhanced Descriptor Enable (rw) */
    __IO Ifx_UReg_32Bit TFSEL:2;           /**< \brief [30:29] TBS Fetch Time Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_DMA_CH_TX_CONTROL_Bits;

/** \brief DMA Channel Tx Control2 */
typedef struct _Ifx_GETH_DMA_CH_TX_CONTROL2_Bits
{
    __IO Ifx_UReg_32Bit TDRL:16;           /**< \brief [15:0] Transmit Descriptor Ring Length (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __IO Ifx_UReg_32Bit ORRQ:1;            /**< \brief [24:24] Read Outstanding Requests (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_DMA_CH_TX_CONTROL2_Bits;

/** \brief DMA Channel Tx Data Xfer Ring Offset */
typedef struct _Ifx_GETH_DMA_CH_TX_DATA_XFER_RING_OFFSET_Bits
{
    __I  Ifx_UReg_32Bit DESC_OFFSET:16;    /**< \brief [15:0] TxDMA channel Data Transfer ring Offset (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_DMA_CH_TX_DATA_XFER_RING_OFFSET_Bits;

/** \brief DMA Channel Tx Desc Write Ring Offset */
typedef struct _Ifx_GETH_DMA_CH_TX_DESC_WRITE_RING_OFFSET_Bits
{
    __I  Ifx_UReg_32Bit DESC_OFFSET:16;    /**< \brief [15:0] TxDMA Channel Descriptor Write Ring Offset (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_DMA_CH_TX_DESC_WRITE_RING_OFFSET_Bits;

/** \brief DMA Debug Status0 */
typedef struct _Ifx_GETH_DMA_DEBUG_STATUS0_Bits
{
    __I  Ifx_UReg_32Bit AXWHSTS:1;         /**< \brief [0:0] AXI Master Write Channel Status (r) */
    __I  Ifx_UReg_32Bit AXRHSTS:1;         /**< \brief [1:1] AXI Master Read Channel Status (r) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_DMA_DEBUG_STATUS0_Bits;

/** \brief DMA Debug Status1 */
typedef struct _Ifx_GETH_DMA_DEBUG_STATUS1_Bits
{
    __I  Ifx_UReg_32Bit TDAS:8;            /**< \brief [7:0] Transmit DMA Active Status (r) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_DMA_DEBUG_STATUS1_Bits;

/** \brief DMA Debug Status3 */
typedef struct _Ifx_GETH_DMA_DEBUG_STATUS3_Bits
{
    __I  Ifx_UReg_32Bit RDAS:8;            /**< \brief [7:0] Receive DMA Active Status (r) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_DMA_DEBUG_STATUS3_Bits;

/** \brief DMA DPP Control */
typedef struct _Ifx_GETH_DMA_DPP_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit IPETD:8;           /**< \brief [7:0] Insert Parity Error in DMA TD parity checker  - 1: Parity/data bit of the first valid input parity/data of DMA Read Tx descriptor parity checker (or at PC1#td) is flipped (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit IPERD:8;           /**< \brief [23:16] Insert Parity Error in DMA RD parity checker  - 1: Parity/data bit of the first valid input parity/data of DMA Read Rx descriptor parity checker (or at PC1#rd) is flipped (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_DMA_DPP_CONTROL_Bits;

/** \brief DMA DPP Interrupt Status */
typedef struct _Ifx_GETH_DMA_DPP_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TDPES:8;           /**< \brief [7:0] Read Tx Descriptor Parity checker Error Status  - 1: Indicates that a parity error is detected at the DMA Read Tx descriptor per channel parity checker (or at PC2#td) is flipped (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RDPES:8;           /**< \brief [23:16] Read Rx Descriptor Parity checker Error Status  - 1: Indicates that a parity error is detected at the DMA Read Rx descriptor per channel parity checker (or at PC2#rd) is flipped (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_DMA_DPP_INTERRUPT_STATUS_Bits;

/** \brief DMA ECC Interrupt enable */
typedef struct _Ifx_GETH_DMA_ECC_INTERRUPT_ENABLE_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DCEIE:1;           /**< \brief [1:1] DCACHE memory Correctable Error Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_DMA_ECC_INTERRUPT_ENABLE_Bits;

/** \brief DMA ECC Interrupt Status */
typedef struct _Ifx_GETH_DMA_ECC_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DCES:1;            /**< \brief [4:4] DMA DCACHE memory Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit DAMS:1;            /**< \brief [5:5] DMA DCACHE memory Address Mismatch Status  - 1: Indicates that the address mismatch is found for address bus of DMA DCACHE memory (rw) */
    __IO Ifx_UReg_32Bit DUES:1;            /**< \brief [6:6] DMA DCACHE memory Uncorrectable Error Status  - 1: Indicates that an uncorrectable error is detected at DMA DCACHE memory interface (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_DMA_ECC_INTERRUPT_STATUS_Bits;

/** \brief DMA Interrupt Status */
typedef struct _Ifx_GETH_DMA_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit DC0IS:1;           /**< \brief [0:0] DMA Channel 0 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC1IS:1;           /**< \brief [1:1] DMA Channel 1 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC2IS:1;           /**< \brief [2:2] DMA Channel 2 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC3IS:1;           /**< \brief [3:3] DMA Channel 3 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC4IS:1;           /**< \brief [4:4] DMA Channel 4 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC5IS:1;           /**< \brief [5:5] DMA Channel 5 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC6IS:1;           /**< \brief [6:6] DMA Channel 6 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC7IS:1;           /**< \brief [7:7] DMA Channel 7 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC15TC8IS:8;       /**< \brief [15:8] DMA Channel 15 Interrupt Status to DMA Channel 8 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MTLIS:1;           /**< \brief [16:16] MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MACIS:1;           /**< \brief [17:17] MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_GETH_DMA_INTERRUPT_STATUS_Bits;

/** \brief DMA Mode */
typedef struct _Ifx_GETH_DMA_MODE_Bits
{
    __IO Ifx_UReg_32Bit SWR:1;             /**< \brief [0:0] Software Reset (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit TDRP:1;            /**< \brief [4:4] Tx Descriptor Read Priority (rw) */
    __IO Ifx_UReg_32Bit TMRP:1;            /**< \brief [5:5] Reserved (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit DSPW:1;            /**< \brief [8:8] Descriptor Posted Write (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __IO Ifx_UReg_32Bit INTM:2;            /**< \brief [13:12] Interrupt Mode (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_DMA_MODE_Bits;

/** \brief DMA Rx EDMA Control */
typedef struct _Ifx_GETH_DMA_RX_EDMA_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RDPS:2;            /**< \brief [1:0] Rx Descriptor Pre-Fetch Threshold Size (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [29:2] \internal Reserved */
    __IO Ifx_UReg_32Bit REDM:2;            /**< \brief [31:30] Rx DMA Mode (rw) */
} Ifx_GETH_DMA_RX_EDMA_CONTROL_Bits;

/** \brief DMA Safety Interrupt Status */
typedef struct _Ifx_GETH_DMA_SAFETY_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit DECIS:1;           /**< \brief [0:0] DMA ECC Correctable error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DEUIS:1;           /**< \brief [1:1] DMA ECC Uncorrectable error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit AMCIS:1;           /**< \brief [2:2] AXI Master interface Safety Correctable error Interrupt Status This bit indicates an interrupt event in the AXI safety feature (r) */
    __I  Ifx_UReg_32Bit AMUIS:1;           /**< \brief [3:3] AXI Master interface Safety Uncorrectable error Interrupt Status This bit indicates an interrupt event in the AXI safety feature (r) */
    __I  Ifx_UReg_32Bit ASCIS:1;           /**< \brief [4:4] AXI Slave interface Safety Correctable error Interrupt Status Indicates an interrupt event in the AXI safety feature (r) */
    __I  Ifx_UReg_32Bit ASUIS:1;           /**< \brief [5:5] AXI Slave interface Safety Uncorrectable error Interrupt Status Indicates an interrupt event in the AXI safety feature (r) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [27:6] \internal Reserved */
    __I  Ifx_UReg_32Bit MSCIS:1;           /**< \brief [28:28] MTL Safety Correctable error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MSUIS:1;           /**< \brief [29:29] MTL Safety Unrecoverable error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __I  Ifx_UReg_32Bit MCSIS:1;           /**< \brief [31:31] MAC Safety Unrecoverable Interrupt Status (r) */
} Ifx_GETH_DMA_SAFETY_INTERRUPT_STATUS_Bits;

/** \brief DMA Sfty Dbg EIC */
typedef struct _Ifx_GETH_DMA_SFTY_DBG_EIC_Bits
{
    __IO Ifx_UReg_32Bit AMIE:1;            /**< \brief [0:0] AXI Master Insert Error (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit ASIE:1;            /**< \brief [2:2] AXI Slave Insert Error   - 1: Parity/ECC/data bit at the input of selected AXI Slave channel is flipped (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit NBEI:1;            /**< \brief [4:4] Number of Bit Error Injection in ECC for AXI Interface (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_32Bit EIM:1;             /**< \brief [6:6] Debug Error Injection Mode  - 0: Indicates debug error injected on data  - 1: Indicates debug error injected on ECC/Parity Check-bits (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit ECC_SEL:2;         /**< \brief [9:8] ECC Select This field selects the ECC to insert error (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit BLEI:8;            /**< \brief [23:16] Bit Location of error injection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_DMA_SFTY_DBG_EIC_Bits;

/** \brief DMA Sfty Ind Ctrl */
typedef struct _Ifx_GETH_DMA_SFTY_IND_CTRL_Bits
{
    __IO Ifx_UReg_32Bit OB:1;              /**< \brief [0:0] Operation Busy  - 1: Indicates the initiation of access to DMA Safety indirect register space (rw) */
    __IO Ifx_UReg_32Bit CT:1;              /**< \brief [1:1] Command Type  - 0: Indicates a read operation (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit AUTO:2;            /**< \brief [5:4] Auto Increment (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit AOFF:4;            /**< \brief [11:8] Address Offset (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit MSEL:4;            /**< \brief [19:16] Mode Select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __IO Ifx_UReg_32Bit DAPS:2;            /**< \brief [23:22] Data or Address Part Select (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_DMA_SFTY_IND_CTRL_Bits;

/** \brief DMA Sfty Ind Data */
typedef struct _Ifx_GETH_DMA_SFTY_IND_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Read or Write Data (rw) */
} Ifx_GETH_DMA_SFTY_IND_DATA_Bits;

/** \brief DMA SysBus Mode */
typedef struct _Ifx_GETH_DMA_SYSBUS_MODE_Bits
{
    __IO Ifx_UReg_32Bit UBL:1;             /**< \brief [0:0] AXI Undefined Burst Length (rw) */
    __IO Ifx_UReg_32Bit BLEN4:1;           /**< \brief [1:1] AXI Burst Length 4 (rw) */
    __IO Ifx_UReg_32Bit BLEN8:1;           /**< \brief [2:2] AXI Burst Length 8 (rw) */
    __IO Ifx_UReg_32Bit BLEN16:1;          /**< \brief [3:3] AXI Burst Length 16 (rw) */
    __IO Ifx_UReg_32Bit BLEN32:1;          /**< \brief [4:4] AXI Burst Length 32 (rw) */
    __IO Ifx_UReg_32Bit BLEN64:1;          /**< \brief [5:5] AXI Burst Length 64 (rw) */
    __IO Ifx_UReg_32Bit BLEN128:1;         /**< \brief [6:6] AXI Burst Length 128 (rw) */
    __IO Ifx_UReg_32Bit BLEN256:1;         /**< \brief [7:7] AXI Burst Length 256 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [9:8] \internal Reserved */
    __IO Ifx_UReg_32Bit AALE:1;            /**< \brief [10:10] Automatic AXI LPI enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit AAL:1;             /**< \brief [12:12] Address-Aligned Beats (rw) */
    __IO Ifx_UReg_32Bit ONEKBBE:1;         /**< \brief [13:13] 1 KB Boundary Crossing Enable for the AXI Master (rw) */
    __IO Ifx_UReg_32Bit LPI_XIT_PKT:1;     /**< \brief [14:14] Unlock on Magic Packet or Remote Wake-Up Packet (rw) */
    __IO Ifx_UReg_32Bit EN_LPI:1;          /**< \brief [15:15] Enable Low Power Interface (LPI) (rw) */
    __IO Ifx_UReg_32Bit RD_OSR_LMT:5;      /**< \brief [20:16] AXI Maximum Read Outstanding Request Limit (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit WR_OSR_LMT:5;      /**< \brief [28:24] AXI Maximum Write Outstanding Request Limit (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_DMA_SYSBUS_MODE_Bits;

/** \brief DMA TBS CTRL0 */
typedef struct _Ifx_GETH_DMA_TBS_CTRL0_Bits
{
    __IO Ifx_UReg_32Bit FTOV:1;            /**< \brief [0:0] Fetch Time Offset 0 Valid (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit FGOS:3;            /**< \brief [6:4] Fetch GSN Offset 0 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit FTOS:24;           /**< \brief [31:8] Fetch Time Offset 0  - The value in units of 256 ns must be deducted from the Launch time to compute the Fetch Time (rw) */
} Ifx_GETH_DMA_TBS_CTRL0_Bits;

/** \brief DMA TBS CTRL1 */
typedef struct _Ifx_GETH_DMA_TBS_CTRL1_Bits
{
    __IO Ifx_UReg_32Bit FTOV:1;            /**< \brief [0:0] Fetch Time Offset 1 Valid (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit FGOS:3;            /**< \brief [6:4] Fetch GSN Offset 1 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit FTOS:24;           /**< \brief [31:8] Fetch Time Offset 1  - The value in units of 256 ns, that must be deducted from the Launch time to compute the Fetch Time (rw) */
} Ifx_GETH_DMA_TBS_CTRL1_Bits;

/** \brief DMA TBS CTRL2 */
typedef struct _Ifx_GETH_DMA_TBS_CTRL2_Bits
{
    __IO Ifx_UReg_32Bit FTOV:1;            /**< \brief [0:0] Fetch Time Offset 2 Valid (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit FGOS:3;            /**< \brief [6:4] Fetch GSN Offset 2 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit FTOS:24;           /**< \brief [31:8] Fetch Time Offset 2 (rw) */
} Ifx_GETH_DMA_TBS_CTRL2_Bits;

/** \brief DMA TBS CTRL3 */
typedef struct _Ifx_GETH_DMA_TBS_CTRL3_Bits
{
    __IO Ifx_UReg_32Bit FTOV:1;            /**< \brief [0:0] Fetch Time Offset 3 Valid (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit FGOS:3;            /**< \brief [6:4] Fetch GSN Offset 3 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit FTOS:24;           /**< \brief [31:8] Fetch Time Offset 3 (rw) */
} Ifx_GETH_DMA_TBS_CTRL3_Bits;

/** \brief DMA Tx EDMA Control */
typedef struct _Ifx_GETH_DMA_TX_EDMA_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TDPS:2;            /**< \brief [1:0] Tx Descriptor Pre-fetch threshold Size (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [29:2] \internal Reserved */
    __IO Ifx_UReg_32Bit TEDM:2;            /**< \brief [31:30] Tx DMA Mode (rw) */
} Ifx_GETH_DMA_TX_EDMA_CONTROL_Bits;

/** \brief Module identification register */
typedef struct _Ifx_GETH_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number - MOD_NUM (r) */
} Ifx_GETH_ID_Bits;

/** \brief Clock control register for MAC */
typedef struct _Ifx_GETH_MACEN_Bits
{
    __IO Ifx_UReg_32Bit MAC0:1;            /**< \brief [0:0] Used for enabling and disabling MAC0 (rw) */
    __IO Ifx_UReg_32Bit MAC1:1;            /**< \brief [1:1] Used for enabling and disabling MAC1 (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_MACEN_Bits;

/** \brief MAC Address0 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS0_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address0[47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [30:19] \internal Reserved */
    __I  Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (r) */
} Ifx_GETH_PORT_CORE_MACADDRESS0_HIGH_Bits;

/** \brief MAC Address0 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS0_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address0 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS0_LOW_Bits;

/** \brief MAC Address10 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS10_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address10 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS10_HIGH_Bits;

/** \brief MAC Address10 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS10_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address10 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS10_LOW_Bits;

/** \brief MAC Address11 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS11_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address11 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS11_HIGH_Bits;

/** \brief MAC Address11 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS11_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address11 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS11_LOW_Bits;

/** \brief MAC Address12 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS12_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address12 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS12_HIGH_Bits;

/** \brief MAC Address12 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS12_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address12 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS12_LOW_Bits;

/** \brief MAC Address13 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS13_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address13 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS13_HIGH_Bits;

/** \brief MAC Address13 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS13_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address13 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS13_LOW_Bits;

/** \brief MAC Address14 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS14_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address14 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS14_HIGH_Bits;

/** \brief MAC Address14 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS14_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address14 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS14_LOW_Bits;

/** \brief MAC Address15 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS15_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address15 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS15_HIGH_Bits;

/** \brief MAC Address15 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS15_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address15 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS15_LOW_Bits;

/** \brief MAC Address16 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS16_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address16 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS16_HIGH_Bits;

/** \brief MAC Address16 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS16_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address16 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS16_LOW_Bits;

/** \brief MAC Address17 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS17_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address17 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS17_HIGH_Bits;

/** \brief MAC Address17 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS17_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address17 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS17_LOW_Bits;

/** \brief MAC Address18 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS18_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address18 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS18_HIGH_Bits;

/** \brief MAC Address18 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS18_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address18 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS18_LOW_Bits;

/** \brief MAC Address19 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS19_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address19 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS19_HIGH_Bits;

/** \brief MAC Address19 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS19_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address19 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS19_LOW_Bits;

/** \brief MAC Address1 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS1_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address1 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS1_HIGH_Bits;

/** \brief MAC Address1 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS1_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address1 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS1_LOW_Bits;

/** \brief MAC Address20 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS20_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address20 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS20_HIGH_Bits;

/** \brief MAC Address20 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS20_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address20 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS20_LOW_Bits;

/** \brief MAC Address21 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS21_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address21 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS21_HIGH_Bits;

/** \brief MAC Address21 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS21_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address21 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS21_LOW_Bits;

/** \brief MAC Address22 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS22_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address22 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS22_HIGH_Bits;

/** \brief MAC Address22 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS22_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address22 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS22_LOW_Bits;

/** \brief MAC Address23 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS23_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address23 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS23_HIGH_Bits;

/** \brief MAC Address23 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS23_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address23 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS23_LOW_Bits;

/** \brief MAC Address24 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS24_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address24 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS24_HIGH_Bits;

/** \brief MAC Address24 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS24_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address24 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS24_LOW_Bits;

/** \brief MAC Address25 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS25_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address25 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS25_HIGH_Bits;

/** \brief MAC Address25 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS25_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address25 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS25_LOW_Bits;

/** \brief MAC Address26 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS26_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address26 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS26_HIGH_Bits;

/** \brief MAC Address26 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS26_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address26 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS26_LOW_Bits;

/** \brief MAC Address27 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS27_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address27 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS27_HIGH_Bits;

/** \brief MAC Address27 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS27_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address27 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS27_LOW_Bits;

/** \brief MAC Address28 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS28_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address28 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS28_HIGH_Bits;

/** \brief MAC Address28 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS28_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address28 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS28_LOW_Bits;

/** \brief MAC Address29 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS29_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address29 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS29_HIGH_Bits;

/** \brief MAC Address29 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS29_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address29 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS29_LOW_Bits;

/** \brief MAC Address2 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS2_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address2 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS2_HIGH_Bits;

/** \brief MAC Address2 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS2_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address2 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS2_LOW_Bits;

/** \brief MAC Address30 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS30_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address30 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS30_HIGH_Bits;

/** \brief MAC Address30 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS30_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address30 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS30_LOW_Bits;

/** \brief MAC Address31 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS31_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address31 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS31_HIGH_Bits;

/** \brief MAC Address31 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS31_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address31 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS31_LOW_Bits;

/** \brief MAC Address3 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS3_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address3 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS3_HIGH_Bits;

/** \brief MAC Address3 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS3_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address3 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS3_LOW_Bits;

/** \brief MAC Address4 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS4_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address4 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS4_HIGH_Bits;

/** \brief MAC Address4 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS4_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address4 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS4_LOW_Bits;

/** \brief MAC Address5 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS5_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address5 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS5_HIGH_Bits;

/** \brief MAC Address5 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS5_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address5 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS5_LOW_Bits;

/** \brief MAC Address6 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS6_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address6 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS6_HIGH_Bits;

/** \brief MAC Address6 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS6_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address6 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS6_LOW_Bits;

/** \brief MAC Address7 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS7_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address7 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS7_HIGH_Bits;

/** \brief MAC Address7 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS7_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address7 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS7_LOW_Bits;

/** \brief MAC Address8 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS8_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address8 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS8_HIGH_Bits;

/** \brief MAC Address8 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS8_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address8 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS8_LOW_Bits;

/** \brief MAC Address9 High */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS9_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address9 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:3;             /**< \brief [18:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS9_HIGH_Bits;

/** \brief MAC Address9 Low */
typedef struct _Ifx_GETH_PORT_CORE_MACADDRESS9_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address9 [31:0] (rw) */
} Ifx_GETH_PORT_CORE_MACADDRESS9_LOW_Bits;

/** \brief MAC 1US Tic Counter */
typedef struct _Ifx_GETH_PORT_CORE_MAC_1US_TIC_COUNTER_Bits
{
    __IO Ifx_UReg_32Bit TIC_1US_CNTR:12;    /**< \brief [11:0] 1US TIC Counter (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_1US_TIC_COUNTER_Bits;

/** \brief MAC AXI SLV DPE Addr Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_AXI_SLV_DPE_ADDR_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ASPEAS:14;         /**< \brief [13:0] AXI Slave data path Parity Error Address Status (r) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_AXI_SLV_DPE_ADDR_STATUS_Bits;

/** \brief MAC CSR SW Ctrl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_CSR_SW_CTRL_Bits
{
    __IO Ifx_UReg_32Bit RCWE:1;            /**< \brief [0:0] Register Clear on Write 1 Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit SEEN:1;            /**< \brief [8:8] Slave Error Response Enable  - When this bit is set, the MAC responds with Slave Error for accesses to reserved registers in CSR space (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_CSR_SW_CTRL_Bits;

/** \brief MAC DChSel IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG0_Bits;

/** \brief MAC DChSel IndReg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG1_Bits;

/** \brief MAC DChSel IndReg10 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG10_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG10_Bits;

/** \brief MAC DChSel IndReg11 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG11_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG11_Bits;

/** \brief MAC DChSel IndReg12 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG12_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG12_Bits;

/** \brief MAC DChSel IndReg13 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG13_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG13_Bits;

/** \brief MAC DChSel IndReg14 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG14_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG14_Bits;

/** \brief MAC DChSel IndReg15 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG15_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG15_Bits;

/** \brief MAC DChSel IndReg16 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG16_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG16_Bits;

/** \brief MAC DChSel IndReg17 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG17_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG17_Bits;

/** \brief MAC DChSel IndReg18 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG18_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG18_Bits;

/** \brief MAC DChSel IndReg19 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG19_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG19_Bits;

/** \brief MAC DChSel IndReg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG2_Bits;

/** \brief MAC DChSel IndReg20 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG20_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG20_Bits;

/** \brief MAC DChSel IndReg21 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG21_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG21_Bits;

/** \brief MAC DChSel IndReg22 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG22_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG22_Bits;

/** \brief MAC DChSel IndReg23 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG23_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG23_Bits;

/** \brief MAC DChSel IndReg24 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG24_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG24_Bits;

/** \brief MAC DChSel IndReg25 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG25_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG25_Bits;

/** \brief MAC DChSel IndReg26 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG26_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG26_Bits;

/** \brief MAC DChSel IndReg27 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG27_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG27_Bits;

/** \brief MAC DChSel IndReg28 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG28_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG28_Bits;

/** \brief MAC DChSel IndReg29 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG29_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG29_Bits;

/** \brief MAC DChSel IndReg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG3_Bits;

/** \brief MAC DChSel IndReg30 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG30_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG30_Bits;

/** \brief MAC DChSel IndReg31 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG31_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG31_Bits;

/** \brief MAC DChSel IndReg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG4_Bits;

/** \brief MAC DChSel IndReg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG5_Bits;

/** \brief MAC DChSel IndReg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG6_Bits;

/** \brief MAC DChSel IndReg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG7_Bits;

/** \brief MAC DChSel IndReg8 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG8_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG8_Bits;

/** \brief MAC DChSel IndReg9 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG9_Bits
{
    __IO Ifx_UReg_32Bit XDCS:8;            /**< \brief [7:0] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG9_Bits;

/** \brief MAC Debug */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RPESTS:1;          /**< \brief [0:0] MAC, GMII, or XGMII Receive Protocol Engine Status (r) */
    __I  Ifx_UReg_32Bit RFCFCSTS:2;        /**< \brief [2:1] MAC Receive Packet Controller FIFO Status (r) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [15:3] \internal Reserved */
    __I  Ifx_UReg_32Bit TPESTS:1;          /**< \brief [16:16] MAC GMII or XGMII Transmit Protocol Engine Status (r) */
    __I  Ifx_UReg_32Bit TFCSTS:2;          /**< \brief [18:17] MAC Transmit Packet Controller Status (r) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DEBUG_Bits;

/** \brief MAC DPCSel IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG0_Bits;

/** \brief MAC DPCSel IndReg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG1_Bits;

/** \brief MAC DPCSel IndReg10 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG10_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG10_Bits;

/** \brief MAC DPCSel IndReg11 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG11_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG11_Bits;

/** \brief MAC DPCSel IndReg12 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG12_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG12_Bits;

/** \brief MAC DPCSel IndReg13 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG13_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG13_Bits;

/** \brief MAC DPCSel IndReg14 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG14_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG14_Bits;

/** \brief MAC DPCSel IndReg15 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG15_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG15_Bits;

/** \brief MAC DPCSel IndReg16 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG16_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG16_Bits;

/** \brief MAC DPCSel IndReg17 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG17_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG17_Bits;

/** \brief MAC DPCSel IndReg18 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG18_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG18_Bits;

/** \brief MAC DPCSel IndReg19 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG19_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG19_Bits;

/** \brief MAC DPCSel IndReg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG2_Bits;

/** \brief MAC DPCSel IndReg20 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG20_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG20_Bits;

/** \brief MAC DPCSel IndReg21 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG21_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG21_Bits;

/** \brief MAC DPCSel IndReg22 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG22_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG22_Bits;

/** \brief MAC DPCSel IndReg23 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG23_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG23_Bits;

/** \brief MAC DPCSel IndReg24 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG24_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG24_Bits;

/** \brief MAC DPCSel IndReg25 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG25_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG25_Bits;

/** \brief MAC DPCSel IndReg26 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG26_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG26_Bits;

/** \brief MAC DPCSel IndReg27 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG27_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG27_Bits;

/** \brief MAC DPCSel IndReg28 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG28_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG28_Bits;

/** \brief MAC DPCSel IndReg29 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG29_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG29_Bits;

/** \brief MAC DPCSel IndReg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG3_Bits;

/** \brief MAC DPCSel IndReg30 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG30_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG30_Bits;

/** \brief MAC DPCSel IndReg31 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG31_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG31_Bits;

/** \brief MAC DPCSel IndReg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG4_Bits;

/** \brief MAC DPCSel IndReg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG5_Bits;

/** \brief MAC DPCSel IndReg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG6_Bits;

/** \brief MAC DPCSel IndReg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG7_Bits;

/** \brief MAC DPCSel IndReg8 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG8_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG8_Bits;

/** \brief MAC DPCSel IndReg9 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG9_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG9_Bits;

/** \brief MAC DPP FSM Interrupt Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_DPP_FSM_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DPES:1;            /**< \brief [1:1] Descriptor Cache write data path Parity checker Error Status (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit MTPES:1;           /**< \brief [4:4] MTL data path Parity checker Error Status (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_32Bit MTBUPES:1;         /**< \brief [6:6] MAC TBU data path Parity checker Error Status (rw) */
    __IO Ifx_UReg_32Bit MTFCPES:1;         /**< \brief [7:7] MAC TFC data path Parity checker Error Status (rw) */
    __IO Ifx_UReg_32Bit ARPES:1;           /**< \brief [8:8] Application Receive interface data path Parity Error Status (rw) */
    __IO Ifx_UReg_32Bit MRWCPES:1;         /**< \brief [9:9] MTL RWC data path Parity checker Error Status (rw) */
    __IO Ifx_UReg_32Bit MRRCPES:1;         /**< \brief [10:10] MTL RRC data path Parity checker Error Status (rw) */
    __IO Ifx_UReg_32Bit CWPES:1;           /**< \brief [11:11] CSR Write data path Parity checker Error Status (rw) */
    __IO Ifx_UReg_32Bit ASRPES:1;          /**< \brief [12:12] AXI Slave Read data path Parity checker Error Status (rw) */
    __IO Ifx_UReg_32Bit TTES:1;            /**< \brief [13:13] Tx FSM Timeout Error Status (rw) */
    __IO Ifx_UReg_32Bit RTES:1;            /**< \brief [14:14] Rx FSM Timeout Error Status (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit ATES:1;            /**< \brief [16:16] APP FSM Timeout Error Status (rw) */
    __IO Ifx_UReg_32Bit PTES:1;            /**< \brief [17:17] PTP FSM Timeout Error Status (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [20:18] \internal Reserved */
    __IO Ifx_UReg_32Bit MSTTES:1;          /**< \brief [21:21] Master Read/Write Timeout Error Status (rw) */
    __IO Ifx_UReg_32Bit SLVTES:1;          /**< \brief [22:22] Slave Read/Write Timeout Error Status (rw) */
    __IO Ifx_UReg_32Bit ATITES:1;          /**< \brief [23:23] ATI Interface Timeout Error Status (rw) */
    __IO Ifx_UReg_32Bit ARITES:1;          /**< \brief [24:24] ARI Interface Timeout Error Status (rw) */
    __IO Ifx_UReg_32Bit FSMPES:1;          /**< \brief [25:25] FSM State Parity Error Status (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [30:26] \internal Reserved */
    __IO Ifx_UReg_32Bit CPI:1;             /**< \brief [31:31] Control Register Parity Check Error (rw) */
} Ifx_GETH_PORT_CORE_MAC_DPP_FSM_INTERRUPT_STATUS_Bits;

/** \brief MAC Extended Configuration */
typedef struct _Ifx_GETH_PORT_CORE_MAC_EXTENDED_CONFIGURATION_Bits
{
    __IO Ifx_UReg_32Bit EIPG:7;            /**< \brief [6:0] Extended Inter-Packet Gap (rw) */
    __IO Ifx_UReg_32Bit DDS:1;             /**< \brief [7:7] DA Duplication Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [8:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TPRE:1;            /**< \brief [9:9] Truncated Preamble Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [16:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DC:1;              /**< \brief [17:17] Deferral Check (rw) */
    __IO Ifx_UReg_32Bit BL:2;              /**< \brief [19:18] Back-Off Limit (rw) */
    __IO Ifx_UReg_32Bit DR:1;              /**< \brief [20:20] Disable Retry (rw) */
    __IO Ifx_UReg_32Bit DCRS:1;            /**< \brief [21:21] Disable Carrier Sense During Transmission (rw) */
    __IO Ifx_UReg_32Bit DO:1;              /**< \brief [22:22] Disable Receive Own (rw) */
    __IO Ifx_UReg_32Bit ECRSFD:1;          /**< \brief [23:23] Enable Carrier Sense before Transmission in Full-Duplex mode (rw) */
    __IO Ifx_UReg_32Bit HD:1;              /**< \brief [24:24] Half-Duplex Mode (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_EXTENDED_CONFIGURATION_Bits;

/** \brief MAC Ext Cfg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_EXT_CFG1_Bits
{
    __IO Ifx_UReg_32Bit SPLOFST:7;         /**< \brief [6:0] Split Offset (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit SPLM:2;            /**< \brief [9:8] Split Mode (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit SAVO:7;            /**< \brief [22:16] Split AV Offset (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit SAVE:1;            /**< \brief [24:24] Split AV Enable  - When this bit is set to 1, and the received packet is an AV Type packet, the header is split at SAVO bytes from the beginning of Length/Type field of the packet, for L2 Split (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_EXT_CFG1_Bits;

/** \brief MAC Flex Hdr Cfg */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_CFG_Bits
{
    __IO Ifx_UReg_32Bit FHRX:1;            /**< \brief [0:0] Flexible Header Enable for Rx path (rw) */
    __IO Ifx_UReg_32Bit FHTX:1;            /**< \brief [1:1] Flexible Header Enable for Tx path (rw) */
    __IO Ifx_UReg_32Bit EFLL:1;            /**< \brief [2:2] Insert Flexible Header for Pause frames  - When this bit is set along with FHTX, static flexible header of the programmed length is inserted in the MAC-generated pause frames at the programmed position  - When this bit is set along with FHRX, in Rx path, pause frame must have FH programmed in the SFH (static flexible header) field (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit FHSP:5;            /**< \brief [12:8] Flexible Header Start Position (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [23:13] \internal Reserved */
    __IO Ifx_UReg_32Bit FHL:3;             /**< \brief [26:24] Flexible Header Length (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_CFG_Bits;

/** \brief MAC Flex Hdr High */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_HIGH_Bits
{
    __IO Ifx_UReg_32Bit SFHU:32;           /**< \brief [31:0] Static Flexible Header - Upper (rw) */
} Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_HIGH_Bits;

/** \brief MAC Flex Hdr Low */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_LOW_Bits
{
    __IO Ifx_UReg_32Bit SFHL:32;           /**< \brief [31:0] Static Flexible Header - Lower (rw) */
} Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_LOW_Bits;

/** \brief MAC FPCSel IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_FPCSEL_INDREG0_Bits;

/** \brief MAC FPE CTRL STS */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FPE_CTRL_STS_Bits
{
    __IO Ifx_UReg_32Bit EFPE:1;            /**< \brief [0:0] Enable Tx Frame Preemption (rw) */
    __IO Ifx_UReg_32Bit SVER:1;            /**< \brief [1:1] Send Verify mPacket (rw) */
    __IO Ifx_UReg_32Bit SRSP:1;            /**< \brief [2:2] Send Respond mPacket (rw) */
    __IO Ifx_UReg_32Bit ARV:1;             /**< \brief [3:3] Autogenerate Respond mPacket on receiving Verify mPacket (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit RVER:1;            /**< \brief [16:16] Received Verify Frame (r) */
    __I  Ifx_UReg_32Bit RRSP:1;            /**< \brief [17:17] Received Respond Frame (r) */
    __I  Ifx_UReg_32Bit TVER:1;            /**< \brief [18:18] Transmitted Verify Frame (r) */
    __I  Ifx_UReg_32Bit TRSP:1;            /**< \brief [19:19] Transmitted Respond Frame (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_FPE_CTRL_STS_Bits;

/** \brief MAC FSM ACT Timer */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FSM_ACT_TIMER_Bits
{
    __IO Ifx_UReg_32Bit TMR:10;            /**< \brief [9:0] CSR Clocks for 1us Tic (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit NTMRMD:4;          /**< \brief [19:16] Normal Mode Timeout Value (rw) */
    __IO Ifx_UReg_32Bit LTMRMD:4;          /**< \brief [23:20] Large Mode Timeout Value (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit CTMR:3;            /**< \brief [30:28] CSR Parity Or Rx Parser Instruction Table ECC Check Interval Value (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_FSM_ACT_TIMER_Bits;

/** \brief MAC FSM Control */
typedef struct _Ifx_GETH_PORT_CORE_MAC_FSM_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TMOUTEN:1;         /**< \brief [0:0] FSM Timeout Checking Enable (rw) */
    __IO Ifx_UReg_32Bit PRTYEN:1;          /**< \brief [1:1] FSM Parity Checking Enable (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit TTEIN:1;           /**< \brief [8:8] Tx FSM Timeout Error Injection (rw) */
    __IO Ifx_UReg_32Bit RTEIN:1;           /**< \brief [9:9] Rx FSM Timeout Error Injection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [10:10] \internal Reserved */
    __IO Ifx_UReg_32Bit ATEIN:1;           /**< \brief [11:11] APP FSM Timeout Error Injection (rw) */
    __IO Ifx_UReg_32Bit PTEIN:1;           /**< \brief [12:12] PTP FSM Timeout Error Injection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit TPEIN:1;           /**< \brief [16:16] Tx FSM Parity Error Injection (rw) */
    __IO Ifx_UReg_32Bit RPEIN:1;           /**< \brief [17:17] Rx FSM Parity Error Injection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit APEIN:1;           /**< \brief [19:19] APP FSM Parity Error Injection (rw) */
    __IO Ifx_UReg_32Bit PPEIN:1;           /**< \brief [20:20] PTP FSM Parity Error Injection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit TLGRNML:1;         /**< \brief [24:24] Tx Large/Normal Mode Select (rw) */
    __IO Ifx_UReg_32Bit RLGRNML:1;         /**< \brief [25:25] Rx Large/Normal Mode Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [26:26] \internal Reserved */
    __IO Ifx_UReg_32Bit ALGRNML:1;         /**< \brief [27:27] APP Large/Normal Mode Select (rw) */
    __IO Ifx_UReg_32Bit PLGRNML:1;         /**< \brief [28:28] PTP Large/Normal Mode Select (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_FSM_CONTROL_Bits;

/** \brief MAC HW Feature0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_HW_FEATURE0_Bits
{
    __I  Ifx_UReg_32Bit RGMIISEL:1;        /**< \brief [0:0] RGMII Support (r) */
    __I  Ifx_UReg_32Bit GMIISEL:1;         /**< \brief [1:1] 1000/100/10 Mbps Support (r) */
    __I  Ifx_UReg_32Bit RMIISEL:1;         /**< \brief [2:2] RMII Support (r) */
    __I  Ifx_UReg_32Bit HDSEL:1;           /**< \brief [3:3] Half-duplex Support (r) */
    __I  Ifx_UReg_32Bit VLHASH:1;          /**< \brief [4:4] VLAN Hash Filter Selected (r) */
    __I  Ifx_UReg_32Bit SMASEL:1;          /**< \brief [5:5] SMA (MDIO) Interface (r) */
    __I  Ifx_UReg_32Bit RWKSEL:1;          /**< \brief [6:6] PMT Remote Wake-up Packet Enable (r) */
    __I  Ifx_UReg_32Bit MGKSEL:1;          /**< \brief [7:7] PMT Magic Packet Enable (r) */
    __I  Ifx_UReg_32Bit MMCSEL:1;          /**< \brief [8:8] RMON Module Enable (r) */
    __I  Ifx_UReg_32Bit ARPOFFSEL:1;       /**< \brief [9:9] ARP Offload Enabled (r) */
    __I  Ifx_UReg_32Bit RAVSEL:1;          /**< \brief [10:10] Rx Side Only AV Feature Enable (r) */
    __I  Ifx_UReg_32Bit AVSEL:1;           /**< \brief [11:11] AV Feature Enabled (r) */
    __I  Ifx_UReg_32Bit TSSEL:1;           /**< \brief [12:12] IEEE 1588-2008 Timestamp Enabled (r) */
    __I  Ifx_UReg_32Bit EEESEL:1;          /**< \brief [13:13] Energy Efficient Ethernet Enabled (r) */
    __I  Ifx_UReg_32Bit TXCOESEL:1;        /**< \brief [14:14] Transmit Checksum Offload Enabled (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit RXCOESEL:1;        /**< \brief [16:16] Receive Checksum Offload Enabled (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __I  Ifx_UReg_32Bit ADDMACADRSEL:5;    /**< \brief [22:18] MAC Addresses 1-31 Selected (r) */
    __I  Ifx_UReg_32Bit PHYSEL:2;          /**< \brief [24:23] RGMII Interface Select (r) */
    __I  Ifx_UReg_32Bit TSSTSSEL:2;        /**< \brief [26:25] Timestamp System Time Source (r) */
    __I  Ifx_UReg_32Bit SAVLANINS:1;       /**< \brief [27:27] Source Address or VLAN Insertion Enable (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [28:28] \internal Reserved */
    __I  Ifx_UReg_32Bit VXN:1;             /**< \brief [29:29] Reserved (r) */
    __I  Ifx_UReg_32Bit EDIFFC:1;          /**< \brief [30:30] Different Descriptor Cache (r) */
    __I  Ifx_UReg_32Bit EDMA:1;            /**< \brief [31:31] Enhanced DMA (r) */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE0_Bits;

/** \brief MAC HW Feature1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_HW_FEATURE1_Bits
{
    __I  Ifx_UReg_32Bit RXFIFOSIZE:5;      /**< \brief [4:0] MTL Receive FIFO Size (r) */
    __I  Ifx_UReg_32Bit PFCEN:1;           /**< \brief [5:5] Reserved (r) */
    __I  Ifx_UReg_32Bit TXFIFOSIZE:5;      /**< \brief [10:6] MTL Transmit FIFO Size (r) */
    __I  Ifx_UReg_32Bit OSTEN:1;           /**< \brief [11:11] One-Step Timestamping Enable (r) */
    __I  Ifx_UReg_32Bit PTOEN:1;           /**< \brief [12:12] Reserved (r) */
    __I  Ifx_UReg_32Bit ADVTHWORD:1;       /**< \brief [13:13] IEEE 1588 High Word Register Enable (r) */
    __I  Ifx_UReg_32Bit ADDR64:2;          /**< \brief [15:14] Address Width (r) */
    __I  Ifx_UReg_32Bit DCBEN:1;           /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit SPHEN:1;           /**< \brief [17:17] Header-Payload Split Feature Enable (r) */
    __I  Ifx_UReg_32Bit TSOEN:1;           /**< \brief [18:18] Reserved (r) */
    __I  Ifx_UReg_32Bit DBGMEMA:1;         /**< \brief [19:19] Debug Memory Interface Enabled (r) */
    __I  Ifx_UReg_32Bit RSSEN:1;           /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit NUMTC:3;           /**< \brief [23:21] Number of Traffic Classes (r) */
    __I  Ifx_UReg_32Bit HASHTBLSZ:3;       /**< \brief [26:24] Hash Table Size (r) */
    __I  Ifx_UReg_32Bit L3L4FNUM:4;        /**< \brief [30:27] Total number of L3 or L4 Filters (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE1_Bits;

/** \brief MAC HW Feature2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_HW_FEATURE2_Bits
{
    __I  Ifx_UReg_32Bit RXQCNT:4;          /**< \brief [3:0] Number of MTL Receive Queues (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [5:4] \internal Reserved */
    __I  Ifx_UReg_32Bit TXQCNT:4;          /**< \brief [9:6] Number of MTL Transmit Queues (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __I  Ifx_UReg_32Bit RXCHCNT:4;         /**< \brief [15:12] Number of DMA Receive Channels (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TXCHCNT:4;         /**< \brief [21:18] Number of DMA Transmit Channels (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __I  Ifx_UReg_32Bit PPSOUTNUM:3;       /**< \brief [26:24] Number of PPS Outputs (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __I  Ifx_UReg_32Bit AUXSNAPNUM:3;      /**< \brief [30:28] Reserved (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE2_Bits;

/** \brief MAC HW Feature3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_HW_FEATURE3_Bits
{
    __I  Ifx_UReg_32Bit NRVF:3;            /**< \brief [2:0] Enabled number of Extended VLAN Tag Filters or External VLAN tag lookup size (r) */
    __I  Ifx_UReg_32Bit FRPSEL:1;          /**< \brief [3:3] Supported Flexible Receive Parser (r) */
    __I  Ifx_UReg_32Bit CBTISEL:1;         /**< \brief [4:4] Queue/Channel based VLAN tag insertion on Tx Enable (r) */
    __I  Ifx_UReg_32Bit FRPPIPE:3;         /**< \brief [7:5] Supported Parallel Instruction Processor Engines (PIPEs) (r) */
    __I  Ifx_UReg_32Bit POUOST:1;          /**< \brief [8:8] One Step for PTP over UDP/IP Feature Enable (r) */
    __I  Ifx_UReg_32Bit FRPPB:2;           /**< \brief [10:9] Supported Flexible Receive Parser Parsable Bytes (r) */
    __I  Ifx_UReg_32Bit FRPES:2;           /**< \brief [12:11] Supported Flexible Receive Parser Instructions (r) */
    __I  Ifx_UReg_32Bit DVLAN:1;           /**< \brief [13:13] Double VLAN Processing Enabled (r) */
    __I  Ifx_UReg_32Bit ASP:2;             /**< \brief [15:14] Automotive Safety Package (r) */
    __I  Ifx_UReg_32Bit TTSFD:3;           /**< \brief [18:16] Tx Timestamp FIFO Depth (r) */
    __I  Ifx_UReg_32Bit ESTSEL:1;          /**< \brief [19:19] Enhancements to Scheduling Traffic Enable (r) */
    __I  Ifx_UReg_32Bit GCLDEP:3;          /**< \brief [22:20] Depth of the Gate Control List (r) */
    __I  Ifx_UReg_32Bit GCLWID:2;          /**< \brief [24:23] Width of the Time Interval field in the Gate Control List (r) */
    __I  Ifx_UReg_32Bit SGFSEL:1;          /**< \brief [25:25] Per-Stream Filtering Select (r) */
    __I  Ifx_UReg_32Bit FPESEL:1;          /**< \brief [26:26] Frame Preemption Enable (r) */
    __I  Ifx_UReg_32Bit TBSSEL:1;          /**< \brief [27:27] Time Based Scheduling Enable (r) */
    __I  Ifx_UReg_32Bit TBS_CH:4;          /**< \brief [31:28] The number of DMA channels enabled for TBS (starting from the highest Tx Channel, in descending order) (r) */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE3_Bits;

/** \brief MAC HW Feature4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_HW_FEATURE4_Bits
{
    __I  Ifx_UReg_32Bit PCSEL:2;           /**< \brief [1:0] Policing Counters (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __I  Ifx_UReg_32Bit EASP:1;            /**< \brief [4:4] Extended Automotive Safety Package (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __I  Ifx_UReg_32Bit DSTS:1;            /**< \brief [8:8] Additional Free Running Timestamping Source (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE4_Bits;

/** \brief MAC Indir Access Ctrl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL_Bits
{
    __IO Ifx_UReg_32Bit OB:1;              /**< \brief [0:0] Operation Busy (rw) */
    __IO Ifx_UReg_32Bit COM:1;             /**< \brief [1:1] Command type (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [4:2] \internal Reserved */
    __IO Ifx_UReg_32Bit AUTO:1;            /**< \brief [5:5] Auto increment  -  When Auto increment is set, AOFF is incremented by 1 and care must be taken by software not to cause a wrap condition (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit AOFF:8;            /**< \brief [15:8] Address Offset (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [25:16] \internal Reserved */
    __IO Ifx_UReg_32Bit MSEL:4;            /**< \brief [29:26] Mode Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __IO Ifx_UReg_32Bit SNPS_R:1;          /**< \brief [31:31] Synopsys Reserved (rw) */
} Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL_Bits;

/** \brief MAC Indir Access Data */
typedef struct _Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] This field contains data to read/write for Indirect address access associated with MAC_Indir_Access_Ctrl register (rw) */
} Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_DATA_Bits;

/** \brief MAC Inner VLAN Incl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_INNER_VLAN_INCL_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLC:2;             /**< \brief [17:16] VLAN Tag Control in Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLP:1;             /**< \brief [18:18] VLAN Priority Control (rw) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __IO Ifx_UReg_32Bit VLTI:1;            /**< \brief [20:20] VLAN Tag Input (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_INNER_VLAN_INCL_Bits;

/** \brief MAC Interrupt Enable */
typedef struct _Ifx_GETH_PORT_CORE_MAC_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit LSIE:1;            /**< \brief [0:0] Link Status Change Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PMTIE:1;           /**< \brief [4:4] PMT Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit LPIIE:1;           /**< \brief [5:5] LPI Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TSIE:1;            /**< \brief [12:12] Timestamp Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXESIE:1;          /**< \brief [13:13] Transmit Error Status Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXESIE:1;          /**< \brief [14:14] Receive Error Status Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit FPEIE:1;           /**< \brief [15:15] Frame Preemption Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_INTERRUPT_ENABLE_Bits;

/** \brief MAC Interrupt Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit LSI:1;             /**< \brief [0:0] Link Status change Interrupt (r) */
    __I  Ifx_UReg_32Bit SMI:1;             /**< \brief [1:1] SMA Interrupt (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __I  Ifx_UReg_32Bit PMTIS:1;           /**< \brief [4:4] PMT Interrupt Status (r) */
    __I  Ifx_UReg_32Bit LPIIS:1;           /**< \brief [5:5] LPI Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [8:6] \internal Reserved */
    __I  Ifx_UReg_32Bit MMCRXIS:1;         /**< \brief [9:9] MMC Receive Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MMCTXIS:1;         /**< \brief [10:10] MMC Transmit Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MMCRXIPIS:1;       /**< \brief [11:11] MMC Receive Checksum Offload Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TSIS:1;            /**< \brief [12:12] Timestamp Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXESIS:1;          /**< \brief [13:13] Transmit Error Status Interrupt (r) */
    __I  Ifx_UReg_32Bit RXESIS:1;          /**< \brief [14:14] Receive Error Status Interrupt (r) */
    __I  Ifx_UReg_32Bit GPIIS:1;           /**< \brief [15:15] GPI Interrupt Status (r) */
    __I  Ifx_UReg_32Bit FPEIS:1;           /**< \brief [16:16] Frame Preemption Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MFTIS:1;           /**< \brief [17:17] MMC FPE Transmit Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MFRIS:1;           /**< \brief [18:18] MMC FPE Receive Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [22:19] \internal Reserved */
    __I  Ifx_UReg_32Bit PCIS:1;            /**< \brief [23:23] Policing Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit LS:4;              /**< \brief [27:24] Link Status (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_INTERRUPT_STATUS_Bits;

/** \brief MAC L3 L4 Address Control */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_ADDRESS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit XB:1;              /**< \brief [0:0] Transfer Busy (rw) */
    __IO Ifx_UReg_32Bit TT:1;              /**< \brief [1:1] Transfer Type (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit IDDR:7;            /**< \brief [14:8] L3_L4 Filter Address (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_ADDRESS_CONTROL_Bits;

/** \brief MAC L3 L4 Control0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL0_Bits
{
    __IO Ifx_UReg_32Bit L3PEN0:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM0:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM0:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM0:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM0:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM0:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM0:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN0:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM0:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM0:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM0:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM0:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL0_Bits;

/** \brief MAC L3 L4 Control1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL1_Bits
{
    __IO Ifx_UReg_32Bit L3PEN1:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM1:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM1:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM1:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM1:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM1:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM1:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN1:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM1:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM1:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM1:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM1:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL1_Bits;

/** \brief MAC L3 L4 Control2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL2_Bits
{
    __IO Ifx_UReg_32Bit L3PEN2:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM2:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM2:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM2:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM2:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM2:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM2:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN2:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM2:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM2:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM2:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM2:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL2_Bits;

/** \brief MAC L3 L4 Control3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL3_Bits
{
    __IO Ifx_UReg_32Bit L3PEN3:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM3:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM3:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM3:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM3:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM3:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM3:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN3:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM3:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM3:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM3:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM3:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL3_Bits;

/** \brief MAC L3 L4 Control4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL4_Bits
{
    __IO Ifx_UReg_32Bit L3PEN4:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM4:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM4:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM4:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM4:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM4:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM4:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN4:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM4:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM4:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM4:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM4:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL4_Bits;

/** \brief MAC L3 L4 Control5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL5_Bits
{
    __IO Ifx_UReg_32Bit L3PEN5:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM5:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM5:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM5:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM5:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM5:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM5:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN5:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM5:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM5:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM5:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM5:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL5_Bits;

/** \brief MAC L3 L4 Control6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL6_Bits
{
    __IO Ifx_UReg_32Bit L3PEN6:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM6:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM6:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM6:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM6:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM6:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM6:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN6:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM6:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM6:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM6:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM6:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL6_Bits;

/** \brief MAC L3 L4 Control7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL7_Bits
{
    __IO Ifx_UReg_32Bit L3PEN7:1;          /**< \brief [0:0] Layer 3 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit L3SAM7:1;          /**< \brief [2:2] Layer 3 IP SA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3SAIM7:1;         /**< \brief [3:3] Layer 3 IP SA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAM7:1;          /**< \brief [4:4] Layer 3 IP DA Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3DAIM7:1;         /**< \brief [5:5] Layer 3 IP DA Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L3HSBM7:5;         /**< \brief [10:6] Layer 3 IP SA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L3HDBM7:5;         /**< \brief [15:11] Layer 3 IP DA Higher Bits Match (rw) */
    __IO Ifx_UReg_32Bit L4PEN7:1;          /**< \brief [16:16] Layer 4 Protocol Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __IO Ifx_UReg_32Bit L4SPM7:1;          /**< \brief [18:18] Layer 4 Source Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4SPIM7:1;         /**< \brief [19:19] Layer 4 Source Port Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPM7:1;          /**< \brief [20:20] Layer 4 Destination Port Match Enable (rw) */
    __IO Ifx_UReg_32Bit L4DPIM7:1;         /**< \brief [21:21] Layer 4 Destination Port Inverse Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHN:3;           /**< \brief [26:24] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit DMCHEN:1;          /**< \brief [31:31] DMA Channel Select Enable (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL7_Bits;

/** \brief MAC L3 L4 Data */
typedef struct _Ifx_GETH_PORT_CORE_MAC_L3_L4_DATA_Bits
{
    __IO Ifx_UReg_32Bit IDATA:32;          /**< \brief [31:0] Indirect Data (rw) */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_DATA_Bits;

/** \brief MAC Layer3 Addr0 Reg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG0_Bits
{
    __IO Ifx_UReg_32Bit L3A00:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG0_Bits;

/** \brief MAC Layer3 Addr0 Reg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG1_Bits
{
    __IO Ifx_UReg_32Bit L3A01:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG1_Bits;

/** \brief MAC Layer3 Addr0 Reg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG2_Bits
{
    __IO Ifx_UReg_32Bit L3A02:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG2_Bits;

/** \brief MAC Layer3 Addr0 Reg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG3_Bits
{
    __IO Ifx_UReg_32Bit L3A03:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG3_Bits;

/** \brief MAC Layer3 Addr0 Reg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG4_Bits
{
    __IO Ifx_UReg_32Bit L3A04:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG4_Bits;

/** \brief MAC Layer3 Addr0 Reg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG5_Bits
{
    __IO Ifx_UReg_32Bit L3A05:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG5_Bits;

/** \brief MAC Layer3 Addr0 Reg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG6_Bits
{
    __IO Ifx_UReg_32Bit L3A06:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG6_Bits;

/** \brief MAC Layer3 Addr0 Reg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG7_Bits
{
    __IO Ifx_UReg_32Bit L3A07:32;          /**< \brief [31:0] Layer 3 Address 0 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG7_Bits;

/** \brief MAC Layer3 Addr1 Reg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG0_Bits
{
    __IO Ifx_UReg_32Bit L3A10:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG0_Bits;

/** \brief MAC Layer3 Addr1 Reg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG1_Bits
{
    __IO Ifx_UReg_32Bit L3A11:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG1_Bits;

/** \brief MAC Layer3 Addr1 Reg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG2_Bits
{
    __IO Ifx_UReg_32Bit L3A12:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG2_Bits;

/** \brief MAC Layer3 Addr1 Reg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG3_Bits
{
    __IO Ifx_UReg_32Bit L3A13:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG3_Bits;

/** \brief MAC Layer3 Addr1 Reg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG4_Bits
{
    __IO Ifx_UReg_32Bit L3A14:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG4_Bits;

/** \brief MAC Layer3 Addr1 Reg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG5_Bits
{
    __IO Ifx_UReg_32Bit L3A15:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG5_Bits;

/** \brief MAC Layer3 Addr1 Reg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG6_Bits
{
    __IO Ifx_UReg_32Bit L3A16:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG6_Bits;

/** \brief MAC Layer3 Addr1 Reg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG7_Bits
{
    __IO Ifx_UReg_32Bit L3A17:32;          /**< \brief [31:0] Layer 3 Address 1 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG7_Bits;

/** \brief MAC Layer3 Addr2 Reg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG0_Bits
{
    __IO Ifx_UReg_32Bit L3A20:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG0_Bits;

/** \brief MAC Layer3 Addr2 Reg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG1_Bits
{
    __IO Ifx_UReg_32Bit L3A21:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG1_Bits;

/** \brief MAC Layer3 Addr2 Reg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG2_Bits
{
    __IO Ifx_UReg_32Bit L3A22:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG2_Bits;

/** \brief MAC Layer3 Addr2 Reg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG3_Bits
{
    __IO Ifx_UReg_32Bit L3A23:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG3_Bits;

/** \brief MAC Layer3 Addr2 Reg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG4_Bits
{
    __IO Ifx_UReg_32Bit L3A24:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG4_Bits;

/** \brief MAC Layer3 Addr2 Reg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG5_Bits
{
    __IO Ifx_UReg_32Bit L3A25:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG5_Bits;

/** \brief MAC Layer3 Addr2 Reg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG6_Bits
{
    __IO Ifx_UReg_32Bit L3A26:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG6_Bits;

/** \brief MAC Layer3 Addr2 Reg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG7_Bits
{
    __IO Ifx_UReg_32Bit L3A27:32;          /**< \brief [31:0] Layer 3 Address 2 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG7_Bits;

/** \brief MAC Layer3 Addr3 Reg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG0_Bits
{
    __IO Ifx_UReg_32Bit L3A30:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG0_Bits;

/** \brief MAC Layer3 Addr3 Reg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG1_Bits
{
    __IO Ifx_UReg_32Bit L3A31:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG1_Bits;

/** \brief MAC Layer3 Addr3 Reg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG2_Bits
{
    __IO Ifx_UReg_32Bit L3A32:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG2_Bits;

/** \brief MAC Layer3 Addr3 Reg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG3_Bits
{
    __IO Ifx_UReg_32Bit L3A33:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG3_Bits;

/** \brief MAC Layer3 Addr3 Reg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG4_Bits
{
    __IO Ifx_UReg_32Bit L3A34:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG4_Bits;

/** \brief MAC Layer3 Addr3 Reg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG5_Bits
{
    __IO Ifx_UReg_32Bit L3A35:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG5_Bits;

/** \brief MAC Layer3 Addr3 Reg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG6_Bits
{
    __IO Ifx_UReg_32Bit L3A36:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG6_Bits;

/** \brief MAC Layer3 Addr3 Reg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG7_Bits
{
    __IO Ifx_UReg_32Bit L3A37:32;          /**< \brief [31:0] Layer 3 Address 3 Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG7_Bits;

/** \brief MAC Layer4 Address0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS0_Bits
{
    __IO Ifx_UReg_32Bit L4SP0:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP0:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS0_Bits;

/** \brief MAC Layer4 Address1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS1_Bits
{
    __IO Ifx_UReg_32Bit L4SP1:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP1:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS1_Bits;

/** \brief MAC Layer4 Address2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS2_Bits
{
    __IO Ifx_UReg_32Bit L4SP2:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP2:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS2_Bits;

/** \brief MAC Layer4 Address3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS3_Bits
{
    __IO Ifx_UReg_32Bit L4SP3:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP3:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS3_Bits;

/** \brief MAC Layer4 Address4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS4_Bits
{
    __IO Ifx_UReg_32Bit L4SP4:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP4:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS4_Bits;

/** \brief MAC Layer4 Address5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS5_Bits
{
    __IO Ifx_UReg_32Bit L4SP5:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP5:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS5_Bits;

/** \brief MAC Layer4 Address6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS6_Bits
{
    __IO Ifx_UReg_32Bit L4SP6:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP6:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS6_Bits;

/** \brief MAC Layer4 Address7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS7_Bits
{
    __IO Ifx_UReg_32Bit L4SP7:16;          /**< \brief [15:0] Layer 4 Source Port Number Field (rw) */
    __IO Ifx_UReg_32Bit L4DP7:16;          /**< \brief [31:16] Layer 4 Destination Port Number Field (rw) */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS7_Bits;

/** \brief MAC LPCSel IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG0_Bits;

/** \brief MAC LPCSel IndReg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG1_Bits;

/** \brief MAC LPCSel IndReg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG2_Bits;

/** \brief MAC LPCSel IndReg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG3_Bits;

/** \brief MAC LPCSel IndReg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG4_Bits;

/** \brief MAC LPCSel IndReg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG5_Bits;

/** \brief MAC LPCSel IndReg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG6_Bits;

/** \brief MAC LPCSel IndReg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG7_Bits;

/** \brief MAC LPI Auto Entry Timer */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPI_AUTO_ENTRY_TIMER_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit LPIET:17;          /**< \brief [19:3] LPI Entry Timer (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPI_AUTO_ENTRY_TIMER_Bits;

/** \brief MAC LPI Control Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPI_CONTROL_STATUS_Bits
{
    __I  Ifx_UReg_32Bit TLPIEN:1;          /**< \brief [0:0] Transmit LPI Entry (r) */
    __I  Ifx_UReg_32Bit TLPIEX:1;          /**< \brief [1:1] Transmit LPI Exit (r) */
    __I  Ifx_UReg_32Bit RLPIEN:1;          /**< \brief [2:2] Receive LPI Entry (r) */
    __I  Ifx_UReg_32Bit RLPIEX:1;          /**< \brief [3:3] Receive LPI Exit (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __I  Ifx_UReg_32Bit TLPIST:1;          /**< \brief [8:8] Transmit LPI State (r) */
    __I  Ifx_UReg_32Bit RLPIST:1;          /**< \brief [9:9] Receive LPI State (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit LPITXEN:1;         /**< \brief [16:16] LPI Transmit Enable (rw) */
    __IO Ifx_UReg_32Bit PLS:1;             /**< \brief [17:17] PHY Link Status (rw) */
    __IO Ifx_UReg_32Bit PLSDIS:1;          /**< \brief [18:18] PHY Link Status Disable (rw) */
    __IO Ifx_UReg_32Bit LPITXA:1;          /**< \brief [19:19] LPI Tx Automate (rw) */
    __IO Ifx_UReg_32Bit LPIATE:1;          /**< \brief [20:20] LPI Auto Timer Enable (rw) */
    __IO Ifx_UReg_32Bit LPITCSE:1;         /**< \brief [21:21] LPI Tx Clock Stop Enable (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPI_CONTROL_STATUS_Bits;

/** \brief MAC LPI Timers Control */
typedef struct _Ifx_GETH_PORT_CORE_MAC_LPI_TIMERS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TWT:16;            /**< \brief [15:0] LPI TW TIMER (rw) */
    __IO Ifx_UReg_32Bit LST:10;            /**< \brief [25:16] LPI LS TIMER (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_LPI_TIMERS_CONTROL_Bits;

/** \brief MAC Packet Filter */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PACKET_FILTER_Bits
{
    __IO Ifx_UReg_32Bit PR:1;              /**< \brief [0:0] Promiscuous Mode (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [2:1] \internal Reserved */
    __IO Ifx_UReg_32Bit DAIF:1;            /**< \brief [3:3] DA Inverse Filtering (rw) */
    __IO Ifx_UReg_32Bit PM:1;              /**< \brief [4:4] Pass All Multicast (rw) */
    __IO Ifx_UReg_32Bit DBF:1;             /**< \brief [5:5] Disable Broadcast Packets (rw) */
    __IO Ifx_UReg_32Bit PCF:2;             /**< \brief [7:6] Pass Control Packets (rw) */
    __IO Ifx_UReg_32Bit SAIF:1;            /**< \brief [8:8] SA Inverse Filtering (rw) */
    __IO Ifx_UReg_32Bit SAF:1;             /**< \brief [9:9] Source Address Filter Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [10:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DHLFRS:2;          /**< \brief [12:11] L3/L4 Filter Number in Receive Status (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit VTFE:1;            /**< \brief [16:16] VLAN Tag Filter Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [19:17] \internal Reserved */
    __IO Ifx_UReg_32Bit IPFE:1;            /**< \brief [20:20] Layer 3 and Layer 4 Filter Enable (rw) */
    __IO Ifx_UReg_32Bit DNTU:1;            /**< \brief [21:21] Drop Non-TCP/UDP over IP Packets (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [30:22] \internal Reserved */
    __IO Ifx_UReg_32Bit RA:1;              /**< \brief [31:31] Receive All (rw) */
} Ifx_GETH_PORT_CORE_MAC_PACKET_FILTER_Bits;

/** \brief MAC PCCtrl IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG0_Bits;

/** \brief MAC PCCtrl IndReg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG1_Bits;

/** \brief MAC PCCtrl IndReg10 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG10_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG10_Bits;

/** \brief MAC PCCtrl IndReg11 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG11_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG11_Bits;

/** \brief MAC PCCtrl IndReg12 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG12_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG12_Bits;

/** \brief MAC PCCtrl IndReg13 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG13_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG13_Bits;

/** \brief MAC PCCtrl IndReg14 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG14_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG14_Bits;

/** \brief MAC PCCtrl IndReg15 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG15_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG15_Bits;

/** \brief MAC PCCtrl IndReg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG2_Bits;

/** \brief MAC PCCtrl IndReg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG3_Bits;

/** \brief MAC PCCtrl IndReg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG4_Bits;

/** \brief MAC PCCtrl IndReg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG5_Bits;

/** \brief MAC PCCtrl IndReg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG6_Bits;

/** \brief MAC PCCtrl IndReg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG7_Bits;

/** \brief MAC PCCtrl IndReg8 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG8_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG8_Bits;

/** \brief MAC PCCtrl IndReg9 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG9_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Policing Counter (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG9_Bits;

/** \brief MAC PCntr IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG0_Bits;

/** \brief MAC PCntr IndReg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG1_Bits;

/** \brief MAC PCntr IndReg10 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG10_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG10_Bits;

/** \brief MAC PCntr IndReg11 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG11_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG11_Bits;

/** \brief MAC PCntr IndReg12 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG12_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG12_Bits;

/** \brief MAC PCntr IndReg13 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG13_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG13_Bits;

/** \brief MAC PCntr IndReg14 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG14_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG14_Bits;

/** \brief MAC PCntr IndReg15 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG15_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG15_Bits;

/** \brief MAC PCntr IndReg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG2_Bits;

/** \brief MAC PCntr IndReg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG3_Bits;

/** \brief MAC PCntr IndReg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG4_Bits;

/** \brief MAC PCntr IndReg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG5_Bits;

/** \brief MAC PCntr IndReg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG6_Bits;

/** \brief MAC PCntr IndReg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG7_Bits;

/** \brief MAC PCntr IndReg8 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG8_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG8_Bits;

/** \brief MAC PCntr IndReg9 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG9_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG9_Bits;

/** \brief MAC PCStatus DA IndReg */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG_Bits
{
    __IO Ifx_UReg_32Bit FEPS:32;           /**< \brief [31:0] Filter Event Pass Status (rw) */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG_Bits;

/** \brief MAC PCStatus Filter Event IndReg */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG_Bits
{
    __IO Ifx_UReg_32Bit FFAIL:1;           /**< \brief [0:0] Filter Fail (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG_Bits;

/** \brief MAC PCStatus L3L4 IndReg */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCSTATUS_L3L4_INDREG_Bits
{
    __IO Ifx_UReg_32Bit FEPS:8;            /**< \brief [7:0] Filter Event Pass Status (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_L3L4_INDREG_Bits;

/** \brief MAC PCStatus VLAN IndReg */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG_Bits
{
    __IO Ifx_UReg_32Bit FEPS:8;            /**< \brief [7:0] Filter Event Pass Status (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG_Bits;

/** \brief MAC PCTH Intr Enable */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit PCTIE:16;          /**< \brief [15:0] Policing Counter Threshold Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_ENABLE_Bits;

/** \brief MAC PCTH Intr Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_STATUS_Bits
{
    __IO Ifx_UReg_32Bit PCTIS:16;          /**< \brief [15:0] Policing Counter Threshold Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_STATUS_Bits;

/** \brief MAC PCTW Intr Enable */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TWIE:4;            /**< \brief [3:0] Time window Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_ENABLE_Bits;

/** \brief MAC PCTW Intr Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TWIS:4;            /**< \brief [3:0] Time window Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_STATUS_Bits;

/** \brief MAC PMT Control Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PMT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit PWRDWN:1;          /**< \brief [0:0] Power Down (rw) */
    __IO Ifx_UReg_32Bit MGKPKTEN:1;        /**< \brief [1:1] Magic Packet Enable (rw) */
    __IO Ifx_UReg_32Bit RWKPKTEN:1;        /**< \brief [2:2] Remote Wake-Up Packet Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [4:3] \internal Reserved */
    __I  Ifx_UReg_32Bit MGKPRCVD:1;        /**< \brief [5:5] Magic Packet Received (r) */
    __I  Ifx_UReg_32Bit RWKPRCVD:1;        /**< \brief [6:6] Remote Wake-Up Packet Received (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [8:7] \internal Reserved */
    __IO Ifx_UReg_32Bit GLBLUCAST:1;       /**< \brief [9:9] Global Unicast (rw) */
    __IO Ifx_UReg_32Bit RWKPFE:1;          /**< \brief [10:10] Remote Wake-up Packet Forwarding Enable (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [23:11] \internal Reserved */
    __I  Ifx_UReg_32Bit RWKPTR:5;          /**< \brief [28:24] Remote Wake-up FIFO Pointer (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [30:29] \internal Reserved */
    __IO Ifx_UReg_32Bit RWKFILTRST:1;      /**< \brief [31:31] Remote Wake-Up Packet Filter Register Pointer Reset (rw) */
} Ifx_GETH_PORT_CORE_MAC_PMT_CONTROL_STATUS_Bits;

/** \brief MAC PPS0 Interval */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS0_INTERVAL_Bits
{
    __IO Ifx_UReg_32Bit PPSINT0:32;        /**< \brief [31:0] PPS0 Output Signal Interval (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS0_INTERVAL_Bits;

/** \brief MAC PPS0 Target Time Nanoseconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits
{
    __IO Ifx_UReg_32Bit TTSL0:31;          /**< \brief [30:0] Target Time Low for PPS0 Register (rw) */
    __IO Ifx_UReg_32Bit TRGTBUSY0:1;       /**< \brief [31:31] PPS0 Target Time Register Busy (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits;

/** \brief MAC PPS0 Target Time Seconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS_Bits
{
    __IO Ifx_UReg_32Bit TSTRH0:32;         /**< \brief [31:0] PPS0 Target Time Seconds Register (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS_Bits;

/** \brief MAC PPS0 Width */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS0_WIDTH_Bits
{
    __IO Ifx_UReg_32Bit PPSWIDTH0:32;      /**< \brief [31:0] PPS0 Output Signal Width (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS0_WIDTH_Bits;

/** \brief MAC PPS1 Interval */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS1_INTERVAL_Bits
{
    __IO Ifx_UReg_32Bit PPSINT1:32;        /**< \brief [31:0] PPS1 Output Signal Interval (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS1_INTERVAL_Bits;

/** \brief MAC PPS1 Target Time Nanoseconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_NANOSECONDS_Bits
{
    __IO Ifx_UReg_32Bit TTSL1:31;          /**< \brief [30:0] Target Time Low for PPS1 Register (rw) */
    __IO Ifx_UReg_32Bit TRGTBUSY1:1;       /**< \brief [31:31] PPS1 Target Time Register Busy (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_NANOSECONDS_Bits;

/** \brief MAC PPS1 Target Time Seconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_SECONDS_Bits
{
    __IO Ifx_UReg_32Bit TSTRH1:32;         /**< \brief [31:0] PPS1 Target Time Seconds (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_SECONDS_Bits;

/** \brief MAC PPS1 Width */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS1_WIDTH_Bits
{
    __IO Ifx_UReg_32Bit PPSWIDTH1:32;      /**< \brief [31:0] PPS1 Output Signal Width (rw) */
} Ifx_GETH_PORT_CORE_MAC_PPS1_WIDTH_Bits;

/** \brief MAC PPS Control */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit PPSCTRL0_PPSCMD0:4;    /**< \brief [3:0] PPSCMD0: Flexible PPS Output (ptp_pps_o[0]) Control (rw) */
    __IO Ifx_UReg_32Bit PPSEN0:1;          /**< \brief [4:4] Flexible PPS Output Mode Enable (rw) */
    __IO Ifx_UReg_32Bit TRGTMODSEL0:2;     /**< \brief [6:5] Target Time Register Mode for PPS0 Output (rw) */
    __IO Ifx_UReg_32Bit MCGREN0:1;         /**< \brief [7:7] MCGR Mode Enable for PPS0 Output (rw) */
    __IO Ifx_UReg_32Bit PPSCMD1:4;         /**< \brief [11:8] Flexible PPS1 Output Control (rw) */
    __IO Ifx_UReg_32Bit PPSEN1:1;          /**< \brief [12:12]  (rw) */
    __IO Ifx_UReg_32Bit TRGTMODSEL1:2;     /**< \brief [14:13] Target Time Register Mode for PPS1 Output (rw) */
    __IO Ifx_UReg_32Bit MCGREN1:1;         /**< \brief [15:15] MCGR Mode Enable for PPS1 Output (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PPS_CONTROL_Bits;

/** \brief MAC PPS Extnd Ctrl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PPS_EXTND_CTRL_Bits
{
    __IO Ifx_UReg_32Bit TIMESEL:1;         /**< \brief [0:0]  (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_PPS_EXTND_CTRL_Bits;

/** \brief MAC Presn Time ns */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_NS_Bits
{
    __I  Ifx_UReg_32Bit MPTN:32;           /**< \brief [31:0] MAC 1722 Presentation Time in ns (r) */
} Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_NS_Bits;

/** \brief MAC Presn Time Updt */
typedef struct _Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_UPDT_Bits
{
    __IO Ifx_UReg_32Bit MPTU:32;           /**< \brief [31:0] MAC 1722 Presentation Time Update (rw) */
} Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_UPDT_Bits;

/** \brief MAC Q0 Tx Flow Ctrl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL_Bits
{
    __IO Ifx_UReg_32Bit FCB:1;             /**< \brief [0:0] Flow Control Busy or Backpressure Activate (rw) */
    __IO Ifx_UReg_32Bit TFE:1;             /**< \brief [1:1] Transmit Flow Control Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit PLT:3;             /**< \brief [6:4] Pause Low Threshold (rw) */
    __IO Ifx_UReg_32Bit DZPQ:1;            /**< \brief [7:7] Disable Zero-Quanta Pause (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit PT:16;             /**< \brief [31:16] Pause Time (rw) */
} Ifx_GETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL_Bits;

/** \brief MAC RWK Packet Filter */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RWK_PACKET_FILTER_Bits
{
    __IO Ifx_UReg_32Bit WKUPFRMFTR:32;     /**< \brief [31:0] Wake-up Packet Filter (rw) */
} Ifx_GETH_PORT_CORE_MAC_RWK_PACKET_FILTER_Bits;

/** \brief MAC RxQ Ctrl0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL0_Bits
{
    __IO Ifx_UReg_32Bit RXQ0EN:2;          /**< \brief [1:0] Receive Queue 0 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ1EN:2;          /**< \brief [3:2] Receive Queue 1 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ2EN:2;          /**< \brief [5:4] Receive Queue 2 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ3EN:2;          /**< \brief [7:6] Receive Queue 3 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ4EN:2;          /**< \brief [9:8] Receive Queue 4 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ5EN:2;          /**< \brief [11:10] Receive Queue 5 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ6EN:2;          /**< \brief [13:12] Receive Queue 6 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ7EN:2;          /**< \brief [15:14] Receive Queue 7 Enable (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL0_Bits;

/** \brief MAC RxQ Ctrl1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL1_Bits
{
    __IO Ifx_UReg_32Bit UPQ:4;             /**< \brief [3:0] Untagged Packet Queue (rw) */
    __IO Ifx_UReg_32Bit RQ:4;              /**< \brief [7:4] Frame Preemption Residue Queue (rw) */
    __IO Ifx_UReg_32Bit MCBCQ:4;           /**< \brief [11:8] Multicast or Broadcast Queue (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [14:12] \internal Reserved */
    __IO Ifx_UReg_32Bit MCBCQEN:1;         /**< \brief [15:15] Multicast or Broadcast Queue Enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [19:16] \internal Reserved */
    __IO Ifx_UReg_32Bit OMCBCQ:1;          /**< \brief [20:20] Programmable control for Over-riding MCBCQ Priority (rw) */
    __IO Ifx_UReg_32Bit TPQC:2;            /**< \brief [22:21] Tagged PTP over Ethernet Packets Queuing Control (rw) */
    __IO Ifx_UReg_32Bit TACPQE:1;          /**< \brief [23:23] Tagged AV Control Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit PTPQ:4;            /**< \brief [27:24] PTP Packets Queue (rw) */
    __IO Ifx_UReg_32Bit AVCPQ:4;           /**< \brief [31:28] AV Control Packets Queue (rw) */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL1_Bits;

/** \brief MAC RxQ Ctrl2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL2_Bits
{
    __IO Ifx_UReg_32Bit PSRQ0:8;           /**< \brief [7:0] Priorities Selected in the Receive Queue 0 (rw) */
    __IO Ifx_UReg_32Bit PSRQ1:8;           /**< \brief [15:8] Priorities Selected in the Receive Queue 1 (rw) */
    __IO Ifx_UReg_32Bit PSRQ2:8;           /**< \brief [23:16] Priorities Selected in the Receive Queue 2 (rw) */
    __IO Ifx_UReg_32Bit PSRQ3:8;           /**< \brief [31:24] Priorities Selected in the Receive Queue 3 (rw) */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL2_Bits;

/** \brief MAC RxQ Ctrl3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL3_Bits
{
    __IO Ifx_UReg_32Bit PSRQ4:8;           /**< \brief [7:0] Priorities Selected in the Receive Queue 4 (rw) */
    __IO Ifx_UReg_32Bit PSRQ5:8;           /**< \brief [15:8] Priorities Selected in the Receive Queue 5 (rw) */
    __IO Ifx_UReg_32Bit PSRQ6:8;           /**< \brief [23:16] Priorities Selected in the Receive Queue 6 (rw) */
    __IO Ifx_UReg_32Bit PSRQ7:8;           /**< \brief [31:24] Priorities Selected in the Receive Queue 7 (rw) */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL3_Bits;

/** \brief MAC RxQ Ctrl4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL4_Bits
{
    __IO Ifx_UReg_32Bit UFFQE:1;           /**< \brief [0:0] Unicast Filter Fail Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit UFFQ:3;            /**< \brief [3:1] Unicast Address Filter Fail Packets Queue (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit MFFQE:1;           /**< \brief [8:8] Multicast Filter Fail Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit MFFQ:3;            /**< \brief [11:9] Multicast Address Filter Fail Packets Queue (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit VFFQE:1;           /**< \brief [16:16] VLAN Tag Filter Fail Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit VFFQ:3;            /**< \brief [19:17] VLAN Tag Filter Fail Packets Queue (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit PMCBCQ:3;          /**< \brief [26:24] Preemption Multicast/Broadcast Queue (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit UDC:1;             /**< \brief [31:31] Unicast Packet Duplication Control (rw) */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL4_Bits;

/** \brief MAC RxQ Ctrl5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL5_Bits
{
    __IO Ifx_UReg_32Bit PRQSO:4;           /**< \brief [3:0] Priority Receive Queue Start Offset (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL5_Bits;

/** \brief MAC Rx Configuration */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RX_CONFIGURATION_Bits
{
    __IO Ifx_UReg_32Bit RE:1;              /**< \brief [0:0] Receiver Enable (rw) */
    __IO Ifx_UReg_32Bit ACS:1;             /**< \brief [1:1] Automatic Pad or CRC Stripping (rw) */
    __IO Ifx_UReg_32Bit CST:1;             /**< \brief [2:2] CRC stripping for Type packets (rw) */
    __IO Ifx_UReg_32Bit DCRCC:1;           /**< \brief [3:3] Disable CRC Checking for Received Packets (rw) */
    __IO Ifx_UReg_32Bit SPEN:1;            /**< \brief [4:4] Slow Protocol Detection Enable (rw) */
    __IO Ifx_UReg_32Bit USP:1;             /**< \brief [5:5] Unicast Slow Protocol Packet Detect (rw) */
    __IO Ifx_UReg_32Bit GPSLCE:1;          /**< \brief [6:6] Giant Packet Size Limit Control Enable (rw) */
    __IO Ifx_UReg_32Bit WD:1;              /**< \brief [7:7] Watchdog Disable (rw) */
    __IO Ifx_UReg_32Bit JE:1;              /**< \brief [8:8] Jumbo Packet Enable (rw) */
    __IO Ifx_UReg_32Bit IPC:1;             /**< \brief [9:9] Checksum Offload (rw) */
    __IO Ifx_UReg_32Bit LM:1;              /**< \brief [10:10] Loopback Mode (rw) */
    __IO Ifx_UReg_32Bit S2KP:1;            /**< \brief [11:11] IEEE 802.3as Support for 2K Packets (rw) */
    __IO Ifx_UReg_32Bit HDSMS:3;           /**< \brief [14:12] Maximum Size for Splitting the Header Data (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit GPSL:14;           /**< \brief [29:16] Giant Packet Size Limit (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_RX_CONFIGURATION_Bits;

/** \brief MAC Rx Domain Time Incr */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RXSNS:8;           /**< \brief [15:8] Receive Domain Time Increment Value in Sub-Nanoseconds (rw) */
    __IO Ifx_UReg_32Bit RXNS:16;           /**< \brief [31:16] Receive Domain Time Increment Value in Nanoseconds (rw) */
} Ifx_GETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR_Bits;

/** \brief MAC Rx Eth Type Match */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RX_ETH_TYPE_MATCH_Bits
{
    __IO Ifx_UReg_32Bit ET:16;             /**< \brief [15:0] Ethernet Type (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_RX_ETH_TYPE_MATCH_Bits;

/** \brief MAC Rx Flow Ctrl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RX_FLOW_CTRL_Bits
{
    __IO Ifx_UReg_32Bit RFE:1;             /**< \brief [0:0] Receive Flow Control Enable (rw) */
    __IO Ifx_UReg_32Bit UP:1;              /**< \brief [1:1] Unicast Pause Packet Detect (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_RX_FLOW_CTRL_Bits;

/** \brief MAC Rx Tx Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_RX_TX_STATUS_Bits
{
    __I  Ifx_UReg_32Bit TJT:1;             /**< \brief [0:0] Transmit Jabber Timeout (r) */
    __I  Ifx_UReg_32Bit NCARR:1;           /**< \brief [1:1] No Carrier (r) */
    __I  Ifx_UReg_32Bit LCARR:1;           /**< \brief [2:2] Loss of Carrier (r) */
    __I  Ifx_UReg_32Bit EXDEF:1;           /**< \brief [3:3] Excessive Deferral (r) */
    __I  Ifx_UReg_32Bit LCOL:1;            /**< \brief [4:4] Late Collision (r) */
    __I  Ifx_UReg_32Bit EXCOL:1;           /**< \brief [5:5] Excessive Collisions (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit RWT:1;             /**< \brief [8:8] Receive Watchdog Timeout (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __I  Ifx_UReg_32Bit IHE:1;             /**< \brief [12:12] IP Header Error (r) */
    __I  Ifx_UReg_32Bit PCE:1;             /**< \brief [13:13] Payload Checksum Error (r) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_RX_TX_STATUS_Bits;

/** \brief MAC SCSR Control */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SCSR_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit CPEN:1;            /**< \brief [0:0] CSR Parity Enable (rw) */
    __IO Ifx_UReg_32Bit CEIN:1;            /**< \brief [1:1] CSR Error Injection (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_SCSR_CONTROL_Bits;

/** \brief MAC SCSR Parity Err Count */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_ERR_COUNT_Bits
{
    __I  Ifx_UReg_32Bit ECCL:10;           /**< \brief [9:0] Count of parity errors in current safety loop (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __I  Ifx_UReg_32Bit ECLL:10;           /**< \brief [25:16] Count of parity errors in the previous safety loop (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_ERR_COUNT_Bits;

/** \brief MAC SCSR Parity Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_STATUS_Bits
{
    __I  Ifx_UReg_32Bit CADD:14;           /**< \brief [13:0] CSR Address with error (r) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_STATUS_Bits;

/** \brief MAC Sub Second Increment */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SNSINC:8;          /**< \brief [15:8] Sub-nanosecond Increment Value (rw) */
    __IO Ifx_UReg_32Bit SSINC:8;           /**< \brief [23:16] Sub-second Increment Value (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT_Bits;

/** \brief MAC System Time Higher Word Seconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits
{
    __IO Ifx_UReg_32Bit TSHWR:16;          /**< \brief [15:0] Timestamp Higher Word Register (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits;

/** \brief MAC System Time Nanoseconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_Bits
{
    __I  Ifx_UReg_32Bit TSSS:31;           /**< \brief [30:0] Timestamp Sub Seconds (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_Bits;

/** \brief MAC System Time Nanoseconds Update */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits
{
    __IO Ifx_UReg_32Bit TSSS:31;           /**< \brief [30:0] Timestamp Sub Seconds (rw) */
    __IO Ifx_UReg_32Bit ADDSUB:1;          /**< \brief [31:31] Add or Subtract Time (rw) */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits;

/** \brief MAC System Time Seconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_Bits
{
    __I  Ifx_UReg_32Bit TSS:32;            /**< \brief [31:0] Timestamp Second (r) */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_Bits;

/** \brief MAC System Time Seconds Update */
typedef struct _Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits
{
    __IO Ifx_UReg_32Bit TSS:32;            /**< \brief [31:0] Timestamp Second (rw) */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits;

/** \brief MAC Timestamp Addend */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_ADDEND_Bits
{
    __IO Ifx_UReg_32Bit TSAR:32;           /**< \brief [31:0] Timestamp Addend Register (rw) */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_ADDEND_Bits;

/** \brief MAC Timestamp Control */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSENA:1;           /**< \brief [0:0] Enable Timestamp (rw) */
    __IO Ifx_UReg_32Bit TSCFUPDT:1;        /**< \brief [1:1] Fine or Coarse Timestamp Update (rw) */
    __IO Ifx_UReg_32Bit TSINIT:1;          /**< \brief [2:2] Initialize Timestamp (rw) */
    __IO Ifx_UReg_32Bit TSUPDT:1;          /**< \brief [3:3] Update Timestamp (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit TSADDREG:1;        /**< \brief [5:5] Update Addend Register (rw) */
    __IO Ifx_UReg_32Bit PTGE:1;            /**< \brief [6:6] Presentation Time Generation Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit TSENALL:1;         /**< \brief [8:8] Enable Timestamp for All Packets (rw) */
    __IO Ifx_UReg_32Bit TSCTRLSSR:1;       /**< \brief [9:9] Timestamp Digital or Binary Rollover Control (rw) */
    __IO Ifx_UReg_32Bit TSVER2ENA:1;       /**< \brief [10:10] Enable PTP Packet Processing for Version 2 Format (rw) */
    __IO Ifx_UReg_32Bit TSIPENA:1;         /**< \brief [11:11] Enable Processing of PTP over Ethernet Packets (rw) */
    __IO Ifx_UReg_32Bit TSIPV6ENA:1;       /**< \brief [12:12] Enable Processing of PTP Packets Sent over IPv6-UDP (rw) */
    __IO Ifx_UReg_32Bit TSIPV4ENA:1;       /**< \brief [13:13] Enable Processing of PTP Packets Sent over IPv4-UDP (rw) */
    __IO Ifx_UReg_32Bit TSEVNTENA:1;       /**< \brief [14:14] Enable Timestamp Snapshot for Event Messages (rw) */
    __IO Ifx_UReg_32Bit TSMSTRENA:1;       /**< \brief [15:15] Enable Snapshot for Messages Relevant to Master (rw) */
    __IO Ifx_UReg_32Bit SNAPTYPSEL:2;      /**< \brief [17:16] Select PTP packets for Taking Snapshots (rw) */
    __IO Ifx_UReg_32Bit TSENMACADDR:1;     /**< \brief [18:18] Enable MAC Address for PTP Packet Filtering (rw) */
    __IO Ifx_UReg_32Bit CSC:1;             /**< \brief [19:19] Enable checksum correction during OST for PTP over UDP/IPv4 packets (rw) */
    __IO Ifx_UReg_32Bit ESTI:1;            /**< \brief [20:20] External System Time Input (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit TXTSSTSM:1;        /**< \brief [24:24] Transmit Timestamp Status Mode (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [27:25] \internal Reserved */
    __IO Ifx_UReg_32Bit AV8021ASMEN:1;     /**< \brief [28:28] AV IEEE 802.1AS Mode Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_CONTROL_Bits;

/** \brief MAC Timestamp Egress Asym Corr */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits
{
    __IO Ifx_UReg_32Bit OSTEAC:32;         /**< \brief [31:0] One-Step Timestamp Egress Asymmetry Correction (rw) */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits;

/** \brief MAC Timestamp Egress Corr Nanosecond */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits
{
    __IO Ifx_UReg_32Bit TSEC:32;           /**< \brief [31:0] Timestamp Egress Correction (rw) */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits;

/** \brief MAC Timestamp Egress Corr Subnanosecond */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSECOND_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TSECSNS:8;         /**< \brief [15:8] Timestamp Egress Correction, sub-nanoseconds (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSECOND_Bits;

/** \brief MAC Timestamp Ingress Asym Corr */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits
{
    __IO Ifx_UReg_32Bit OSTIAC:32;         /**< \brief [31:0] One-Step Timestamp Ingress Asymmetry Correction (rw) */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits;

/** \brief MAC Timestamp Ingress Corr Nanosecond */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits
{
    __IO Ifx_UReg_32Bit TSIC:32;           /**< \brief [31:0] Timestamp Ingress Correction (rw) */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits;

/** \brief MAC Timestamp Ingress Corr Subnanosecond */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSECOND_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TSICSNS:8;         /**< \brief [15:8] Timestamp Ingress Correction, sub-nanoseconds (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSECOND_Bits;

/** \brief MAC Timestamp Status */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_STATUS_Bits
{
    __I  Ifx_UReg_32Bit TSSOVF:1;          /**< \brief [0:0] Timestamp Seconds Overflow (r) */
    __I  Ifx_UReg_32Bit TSTARGT0:1;        /**< \brief [1:1] Timestamp Target Time Reached (r) */
    __I  Ifx_UReg_32Bit AUXTSTRIG:1;       /**< \brief [2:2] Reserved (r) */
    __I  Ifx_UReg_32Bit TSTRGTERR0:1;      /**< \brief [3:3] Timestamp Target Time Error (r) */
    __I  Ifx_UReg_32Bit TSTARGT1:1;        /**< \brief [4:4] Timestamp Target Time Reached for Target Time PPS1 (r) */
    __I  Ifx_UReg_32Bit TSTRGTERR1:1;      /**< \brief [5:5] Timestamp Target Time Error (r) */
    __I  Ifx_UReg_32Bit TSTARGT2:1;        /**< \brief [6:6] Timestamp Target Time Reached for Target Time PPS2 (r) */
    __I  Ifx_UReg_32Bit TSTRGTERR2:1;      /**< \brief [7:7] Timestamp Target Time Error (r) */
    __I  Ifx_UReg_32Bit TSTARGT3:1;        /**< \brief [8:8] Timestamp Target Time Reached for Target Time PPS3 (r) */
    __I  Ifx_UReg_32Bit TSTRGTERR3:1;      /**< \brief [9:9] Timestamp Target Time Error (r) */
    __I  Ifx_UReg_32Bit TTSNS:5;           /**< \brief [14:10] Number of Tx Timestamp Snapshots (r) */
    __I  Ifx_UReg_32Bit TXTSC:1;           /**< \brief [15:15] Tx Timestamp Captured (r) */
    __I  Ifx_UReg_32Bit ATSSTN:4;          /**< \brief [19:16] Reserved (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __I  Ifx_UReg_32Bit ATSSTM:1;          /**< \brief [24:24] Reserved (r) */
    __I  Ifx_UReg_32Bit ATSNS:5;           /**< \brief [29:25] Reserved (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_STATUS_Bits;

/** \brief MAC Tx Configuration */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TX_CONFIGURATION_Bits
{
    __IO Ifx_UReg_32Bit TE:1;              /**< \brief [0:0] Transmitter Enable (rw) */
    __IO Ifx_UReg_32Bit DDIC:1;            /**< \brief [1:1] Disable DIC Algorithm (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ISM:1;             /**< \brief [3:3] IFG Stretch Mode (rw) */
    __IO Ifx_UReg_32Bit ISR:4;             /**< \brief [7:4] IFG Stretch Ratio (rw) */
    __IO Ifx_UReg_32Bit IPG:3;             /**< \brief [10:8] Inter-Packet Gap (rw) */
    __IO Ifx_UReg_32Bit IFP:1;             /**< \brief [11:11] IPG Control (rw) */
    __IO Ifx_UReg_32Bit TC:1;              /**< \brief [12:12] Transmit Configuration in RGMII (rw) */
    __IO Ifx_UReg_32Bit LUD:1;             /**< \brief [13:13] Link Up or Down (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit JD:1;              /**< \brief [16:16] Jabber Disable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [19:17] \internal Reserved */
    __IO Ifx_UReg_32Bit SARC:3;            /**< \brief [22:20] Source Address Insertion or Replacement Control (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [28:23] \internal Reserved */
    __IO Ifx_UReg_32Bit SS:3;              /**< \brief [31:29] Speed Selection (rw) */
} Ifx_GETH_PORT_CORE_MAC_TX_CONFIGURATION_Bits;

/** \brief MAC Tx Domain Time Incr */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TXSNS:8;           /**< \brief [15:8] Transmit Domain Time Increment Value in Sub-Nanoseconds (rw) */
    __IO Ifx_UReg_32Bit TXNS:16;           /**< \brief [31:16] Transmit Domain Time Increment Value in Nanoseconds (rw) */
} Ifx_GETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR_Bits;

/** \brief MAC Tx Timestamp Status Nanoseconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits
{
    __I  Ifx_UReg_32Bit TXTSSLO:31;        /**< \brief [30:0] Transmit Timestamp Status Low (r) */
    __I  Ifx_UReg_32Bit TXTSSMIS:1;        /**< \brief [31:31] Transmit Timestamp Status Missed (r) */
} Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits;

/** \brief MAC Tx Timestamp Status PktID */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_PKTID_Bits
{
    __I  Ifx_UReg_32Bit PKTID:10;          /**< \brief [9:0] Packet ID (r) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_PKTID_Bits;

/** \brief MAC Tx Timestamp Status Seconds */
typedef struct _Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits
{
    __I  Ifx_UReg_32Bit TXTSSTSHI:32;      /**< \brief [31:0] Transmit Timestamp Status High (r) */
} Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits;

/** \brief MAC Version */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VERSION_Bits
{
    __I  Ifx_UReg_32Bit SNPSVER:8;         /**< \brief [7:0] Synopsys-defined Version (r) */
    __I  Ifx_UReg_32Bit DEVID:8;           /**< \brief [15:8] Indicates the Device family (r) */
    __I  Ifx_UReg_32Bit USERVER:8;         /**< \brief [23:16] User-defined Version (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VERSION_Bits;

/** \brief MAC VLAN Hash Table */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_HASH_TABLE_Bits
{
    __IO Ifx_UReg_32Bit VLHT:16;           /**< \brief [15:0] VLAN Hash Table (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_HASH_TABLE_Bits;

/** \brief MAC VLAN Incl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLC:2;             /**< \brief [17:16] VLAN Tag Control in Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLP:1;             /**< \brief [18:18] VLAN Priority Control (rw) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __IO Ifx_UReg_32Bit VLTI:1;            /**< \brief [20:20] VLAN Tag Input (rw) */
    __IO Ifx_UReg_32Bit CBTI:1;            /**< \brief [21:21] Channel Based Tag Insertion (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:3;            /**< \brief [26:24] Address (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [29:27] \internal Reserved */
    __IO Ifx_UReg_32Bit RDWR:1;            /**< \brief [30:30] Read Write Control (rw) */
    __I  Ifx_UReg_32Bit BUSY:1;            /**< \brief [31:31] BUSY (r) */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL_Bits;

/** \brief MAC VLAN Incl0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL0_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL0_Bits;

/** \brief MAC VLAN Incl1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL1_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL1_Bits;

/** \brief MAC VLAN Incl2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL2_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL2_Bits;

/** \brief MAC VLAN Incl3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL3_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL3_Bits;

/** \brief MAC VLAN Incl4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL4_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL4_Bits;

/** \brief MAC VLAN Incl5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL5_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL5_Bits;

/** \brief MAC VLAN Incl6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL6_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL6_Bits;

/** \brief MAC VLAN Incl7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_INCL7_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C-VLAN or S-VLAN (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL7_Bits;

/** \brief MAC VLAN Tag Ctrl */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit OB:1;              /**< \brief [0:0] Operation Busy (rw) */
    __IO Ifx_UReg_32Bit CT:1;              /**< \brief [1:1] Command Type (rw) */
    __IO Ifx_UReg_32Bit OFS:5;             /**< \brief [6:2] Offset (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [15:7] \internal Reserved */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [16:16] Enable 12-Bit VLAN Tag Comparison for VLAN hash filtering (rw) */
    __IO Ifx_UReg_32Bit VTIM:1;            /**< \brief [17:17] VLAN Tag Inverse Match/Result Enable (rw) */
    __IO Ifx_UReg_32Bit ESVL:1;            /**< \brief [18:18] Enable S-VLAN (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match for VLAN hash filtering (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [20:20] Disable VLAN Type Check for VLAN hash filtering (rw) */
    __IO Ifx_UReg_32Bit EVLS:2;            /**< \brief [22:21] Enable VLAN Tag Stripping on Receive (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit EVLRXS:1;          /**< \brief [24:24] Enable VLAN Tag in Rx status (rw) */
    __IO Ifx_UReg_32Bit VTHM:1;            /**< \brief [25:25] VLAN Tag Hash Table Match Enable (rw) */
    __IO Ifx_UReg_32Bit EDVLP:1;           /**< \brief [26:26] Enable Double VLAN Processing (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [27:27] Enable Inner VLAN Tag for VLAN hash filtering (rw) */
    __IO Ifx_UReg_32Bit EIVLS:2;           /**< \brief [29:28] Enable Inner VLAN Tag Stripping on Receive (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __IO Ifx_UReg_32Bit EIVLRXS:1;         /**< \brief [31:31] Enable Inner VLAN Tag in Rx Status (rw) */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_CTRL_Bits;

/** \brief MAC VLAN Tag Data */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_DATA_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] Refer VID field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] Refer VEN field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Refer ETV field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Refer DOVLTC field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Refer ERSVLM field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Refer ERIVLT field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] Refer DMACHEN field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] Refer DMACHN field of MAC_VLAN_Tag_Filter(#i) indirect register (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_DATA_Bits;

/** \brief MAC VLAN Tag Filter0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER0_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER0_Bits;

/** \brief MAC VLAN Tag Filter1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER1_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER1_Bits;

/** \brief MAC VLAN Tag Filter2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER2_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER2_Bits;

/** \brief MAC VLAN Tag Filter3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER3_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER3_Bits;

/** \brief MAC VLAN Tag Filter4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER4_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER4_Bits;

/** \brief MAC VLAN Tag Filter5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER5_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER5_Bits;

/** \brief MAC VLAN Tag Filter6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER6_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER6_Bits;

/** \brief MAC VLAN Tag Filter7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER7_Bits
{
    __IO Ifx_UReg_32Bit VID:16;            /**< \brief [15:0] VLAN Tag ID (rw) */
    __IO Ifx_UReg_32Bit VEN:1;             /**< \brief [16:16] VLAN Tag Enable (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [17:17] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [18:18] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S-VLAN Match (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [20:20] Enable Inner VLAN Tag (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit DMACHEN:1;         /**< \brief [24:24] DMA Channel Number Enable (rw) */
    __IO Ifx_UReg_32Bit DMACHN:3;          /**< \brief [27:25] DMA Channel Number (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER7_Bits;

/** \brief MAC VPCSel IndReg0 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG0_Bits;

/** \brief MAC VPCSel IndReg1 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG1_Bits;

/** \brief MAC VPCSel IndReg2 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG2_Bits;

/** \brief MAC VPCSel IndReg3 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG3_Bits;

/** \brief MAC VPCSel IndReg4 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG4_Bits;

/** \brief MAC VPCSel IndReg5 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG5_Bits;

/** \brief MAC VPCSel IndReg6 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG6_Bits;

/** \brief MAC VPCSel IndReg7 */
typedef struct _Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG7_Bits;

/** \brief MAC WD JB Timeout */
typedef struct _Ifx_GETH_PORT_CORE_MAC_WD_JB_TIMEOUT_Bits
{
    __IO Ifx_UReg_32Bit WTO:4;             /**< \brief [3:0] Watchdog Timeout (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PWE:1;             /**< \brief [8:8] Programmable Watchdog Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit JTO:4;             /**< \brief [19:16] Jabber Timeout (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit PJE:1;             /**< \brief [24:24] Programmable Jabber Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_GETH_PORT_CORE_MAC_WD_JB_TIMEOUT_Bits;

/** \brief MDIO Clause 22 Port */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_CLAUSE_22_PORT_Bits
{
    __IO Ifx_UReg_32Bit PTR0CL22:1;        /**< \brief [0:0] Port0CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR1CL22:1;        /**< \brief [1:1] Port1CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR2CL22:1;        /**< \brief [2:2] Port2CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR3CL22:1;        /**< \brief [3:3] Port3CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR4CL22:1;        /**< \brief [4:4] Port4CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR5CL22:1;        /**< \brief [5:5] Port5CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR6CL22:1;        /**< \brief [6:6] Port6CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR7CL22:1;        /**< \brief [7:7] Port7CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR8CL22:1;        /**< \brief [8:8] Port8CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR9CL22:1;        /**< \brief [9:9] Port9CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR10CL22:1;       /**< \brief [10:10] Port10CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR11CL22:1;       /**< \brief [11:11] Port11CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR12CL22:1;       /**< \brief [12:12] Port12CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR13CL22:1;       /**< \brief [13:13] Port13CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR14CL22:1;       /**< \brief [14:14] Port14CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR15CL22:1;       /**< \brief [15:15] Port15CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR16CL22:1;       /**< \brief [16:16] Port16CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR17CL22:1;       /**< \brief [17:17] Port17CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR18CL22:1;       /**< \brief [18:18] Port18CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR19CL22:1;       /**< \brief [19:19] Port19CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR20CL22:1;       /**< \brief [20:20] Port20CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR21CL22:1;       /**< \brief [21:21] Port21CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR22CL22:1;       /**< \brief [22:22] Port22CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR23CL22:1;       /**< \brief [23:23] Port23CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR24CL22:1;       /**< \brief [24:24] Port24CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR25CL22:1;       /**< \brief [25:25] Port25CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR26CL22:1;       /**< \brief [26:26] Port26CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR27CL22:1;       /**< \brief [27:27] Port27CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR28CL22:1;       /**< \brief [28:28] Port28CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR29CL22:1;       /**< \brief [29:29] Port29CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR30CL22:1;       /**< \brief [30:30] Port30CL22 Enable (rw) */
    __IO Ifx_UReg_32Bit PTR31CL22:1;       /**< \brief [31:31] Port31CL22 Enable (rw) */
} Ifx_GETH_PORT_CORE_MDIO_CLAUSE_22_PORT_Bits;

/** \brief MDIO Continuous Scan Port Enable */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_SCAN_PORT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit PORT0SCE:1;        /**< \brief [0:0] Port 0 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT1SCE:1;        /**< \brief [1:1] Port 1 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT2SCE:1;        /**< \brief [2:2] Port 2 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT3SCE:1;        /**< \brief [3:3] Port 3 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT4SCE:1;        /**< \brief [4:4] Port 4 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT5SCE:1;        /**< \brief [5:5] Port 5 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT6SCE:1;        /**< \brief [6:6] Port 6 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT7SCE:1;        /**< \brief [7:7] Port 7 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT8SCE:1;        /**< \brief [8:8] Port 8 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT9SCE:1;        /**< \brief [9:9] Port 9 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT10SCE:1;       /**< \brief [10:10] Port 10 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT11SCE:1;       /**< \brief [11:11] Port 11 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT12SCE:1;       /**< \brief [12:12] Port 12 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT13SCE:1;       /**< \brief [13:13] Port 13 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT14SCE:1;       /**< \brief [14:14] Port 14 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT15SCE:1;       /**< \brief [15:15] Port 15 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT16SCE:1;       /**< \brief [16:16] Port 16 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT17SCE:1;       /**< \brief [17:17] Port 17 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT18SCE:1;       /**< \brief [18:18] Port 18 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT19SCE:1;       /**< \brief [19:19] Port 19 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT20SCE:1;       /**< \brief [20:20] Port 20 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT21SCE:1;       /**< \brief [21:21] Port 21 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT22SCE:1;       /**< \brief [22:22] Port 22 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT23SCE:1;       /**< \brief [23:23] Port 23 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT24SCE:1;       /**< \brief [24:24] Port 24 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT25SCE:1;       /**< \brief [25:25] Port 25 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT26SCE:1;       /**< \brief [26:26] Port 26 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT27SCE:1;       /**< \brief [27:27] Port 27 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT28SCE:1;       /**< \brief [28:28] Port 28 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT29SCE:1;       /**< \brief [29:29] Port 29 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT30SCE:1;       /**< \brief [30:30] Port 30 Continuous Scan Enable (rw) */
    __IO Ifx_UReg_32Bit PORT31SCE:1;       /**< \brief [31:31] Port 31 Continuous Scan Enable (rw) */
} Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_SCAN_PORT_ENABLE_Bits;

/** \brief MDIO Continuous Write Address */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_ADDRESS_Bits
{
    __IO Ifx_UReg_32Bit CREGADDR:16;       /**< \brief [15:0] Continuous Register Address (rw) */
    __IO Ifx_UReg_32Bit CADDR:5;           /**< \brief [20:16] Continuous Port or Device Address (rw) */
    __IO Ifx_UReg_32Bit CPRT:1;            /**< \brief [21:21] Continuous Port or Device Address Select (rw) */
    __IO Ifx_UReg_32Bit CBUSY:1;           /**< \brief [22:22] Continuous Write Busy (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_ADDRESS_Bits;

/** \brief MDIO Continuous Write Data */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_DATA_Bits
{
    __IO Ifx_UReg_32Bit CDATA:16;          /**< \brief [15:0] Continuous Write Data (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_DATA_Bits;

/** \brief MDIO Interrupt Enable */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit PTRNX4P0CONIE:1;    /**< \brief [0:0] Connect/Disconnect Event Interrupt (Port Nx4 Plus0) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P1CONIE:1;    /**< \brief [1:1] Connect/Disconnect Event Interrupt (Port Nx4 Plus1) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P2CONIE:1;    /**< \brief [2:2] Connect/Disconnect Event Interrupt (Port Nx4 Plus2) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P3CONIE:1;    /**< \brief [3:3] Connect/Disconnect Event Interrupt (Port Nx4 Plus3) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P0LSIE:1;    /**< \brief [4:4] Link Status Change Interrupt (Port Nx4 Plus0) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P1LSIE:1;    /**< \brief [5:5] Link Status Change Interrupt (Port Nx4 Plus1) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P2LSIE:1;    /**< \brief [6:6] Link Status Change Interrupt (Port Nx4 Plus2) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P3LSIE:1;    /**< \brief [7:7] Link Status Change Interrupt (Port Nx4 Plus3) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P0ALIE:1;    /**< \brief [8:8] Device Present Status Change Interrupt (Port Nx4 Plus0) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P1ALIE:1;    /**< \brief [9:9] Device Present Status Change Interrupt (Port Nx4 Plus1) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P2ALIE:1;    /**< \brief [10:10] Device Present Status Change Interrupt (Port Nx4 Plus2) Enable (rw) */
    __IO Ifx_UReg_32Bit PTRNX4P3ALIE:1;    /**< \brief [11:11] Device Present Status Change Interrupt (Port Nx4 Plus3) Enable (rw) */
    __IO Ifx_UReg_32Bit SNGLCOMPIE:1;      /**< \brief [12:12] Single Command Completion Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit CWCOMPIE:1;        /**< \brief [13:13] Continuous Write Completion Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_ENABLE_Bits;

/** \brief MDIO Interrupt Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit PORTNX4P0CONINT:1;    /**< \brief [0:0] Connect/Disconnect Event Interrupt (Port Nx4 Plus0) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P1CONINT:1;    /**< \brief [1:1] Connect/Disconnect Event Interrupt (Port Nx4 Plus1) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P2CONINT:1;    /**< \brief [2:2] Connect/Disconnect Event Interrupt (Port Nx4 Plus2) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P3CONINT:1;    /**< \brief [3:3] Connect/Disconnect Event Interrupt (Port Nx4 Plus3) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P0LSINT:1;    /**< \brief [4:4] Link Status Change Interrupt (Port Nx4 Plus0) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P1LSINT:1;    /**< \brief [5:5] Link Status Change Interrupt (Port Nx4 Plus1) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P2LSINT:1;    /**< \brief [6:6] Link Status Change Interrupt (Port Nx4 Plus2) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P3LSINT:1;    /**< \brief [7:7] Link Status Change Interrupt (Port Nx4 Plus3) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P0ALINT:1;    /**< \brief [8:8] Device Present Status Change Interrupt (Port Nx4 Plus0) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P1ALINT:1;    /**< \brief [9:9] Device Present Status Change Interrupt (Port Nx4 Plus1) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P2ALINT:1;    /**< \brief [10:10] Device Present Status Change Interrupt (Port Nx4 Plus2) (r) */
    __I  Ifx_UReg_32Bit PORTNX4P3ALINT:1;    /**< \brief [11:11] Device Present Status Change Interrupt (Port Nx4 Plus3) (r) */
    __I  Ifx_UReg_32Bit SNGLCOMPINT:1;     /**< \brief [12:12] Single Command Completion Interrupt (r) */
    __I  Ifx_UReg_32Bit CWCOMPINT:1;       /**< \brief [13:13] Continuous Write Completion Interrupt (r) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_STATUS_Bits;

/** \brief MDIO PortNx4P0 Alive Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_ALIVE_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P0PMDPMALS:1;    /**< \brief [1:1] Alive Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P0WISLS:1;      /**< \brief [2:2] Alive Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0PCSLS:1;      /**< \brief [3:3] Alive Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0PHYXSLS:1;    /**< \brief [4:4] Alive Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0DTEXSLS:1;    /**< \brief [5:5] Alive Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0TCLS:1;       /**< \brief [6:6] Alive Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P0VSD1LS:1;     /**< \brief [30:30] Alive Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P0VSD2LS:1;     /**< \brief [31:31] Alive Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_ALIVE_STATUS_Bits;

/** \brief MDIO PortNx4P0 Device In Use */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_DEVICE_IN_USE_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P0PMDPMA:1;     /**< \brief [1:1] PMA Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P0WIS:1;        /**< \brief [2:2] WIS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P0PCS:1;        /**< \brief [3:3] PCS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P0PHYXS:1;      /**< \brief [4:4] PHYXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P0DTEXS:1;      /**< \brief [5:5] DTEXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P0TC:1;         /**< \brief [6:6] TC Device is in Use (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P0VSD1:1;       /**< \brief [30:30] VSD1 Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P0VSD2:1;       /**< \brief [31:31] VSD2 Device is in Use (rw) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_DEVICE_IN_USE_Bits;

/** \brief MDIO PortNx4P0 Link Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_LINK_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P0PMDPMALS:1;    /**< \brief [1:1] Link Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P0WISLS:1;      /**< \brief [2:2] Link Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0PCSLS:1;      /**< \brief [3:3] Link Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0PHYXSLS:1;    /**< \brief [4:4] Link Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0DTEXSLS:1;    /**< \brief [5:5] Link Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P0TCLS:1;       /**< \brief [6:6] Link Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P0VSD1LS:1;     /**< \brief [30:30] Link Status of VCD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P0VSD2LS:1;     /**< \brief [31:31] Link Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_LINK_STATUS_Bits;

/** \brief MDIO PortNx4P1 Alive Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_ALIVE_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P1PMDPMALS:1;    /**< \brief [1:1] Alive Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P1WISLS:1;      /**< \brief [2:2] Alive Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1PCSLS:1;      /**< \brief [3:3] Alive Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1PHYXSLS:1;    /**< \brief [4:4] Alive Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1DTEXSLS:1;    /**< \brief [5:5] Alive Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1TCLS:1;       /**< \brief [6:6] Alive Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P1VSD1LS:1;     /**< \brief [30:30] Alive Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P1VSD2LS:1;     /**< \brief [31:31] Alive Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_ALIVE_STATUS_Bits;

/** \brief MDIO PortNx4P1 Device In Use */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_DEVICE_IN_USE_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P1PMDPMA:1;     /**< \brief [1:1] PMA Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P1WIS:1;        /**< \brief [2:2] WIS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P1PCS:1;        /**< \brief [3:3] PCS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P1PHYXS:1;      /**< \brief [4:4] PHYXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P1DTEXS:1;      /**< \brief [5:5] DTEXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P1TC:1;         /**< \brief [6:6] TC Device is in Use (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P1VSD1:1;       /**< \brief [30:30] VSD1 Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P1VSD2:1;       /**< \brief [31:31] VSD2 Device is in Use (rw) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_DEVICE_IN_USE_Bits;

/** \brief MDIO PortNx4P1 Link Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_LINK_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P1PMDPMALS:1;    /**< \brief [1:1] Link Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P1WISLS:1;      /**< \brief [2:2] Link Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1PCSLS:1;      /**< \brief [3:3] Link Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1PHYXSLS:1;    /**< \brief [4:4] Link Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1DTEXSLS:1;    /**< \brief [5:5] Link Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P1TCLS:1;       /**< \brief [6:6] Link Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P1VSD1LS:1;     /**< \brief [30:30] Link Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P1VSD2LS:1;     /**< \brief [31:31] Link Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_LINK_STATUS_Bits;

/** \brief MDIO PortNx4P2 Alive Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_ALIVE_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P2PMDPMALS:1;    /**< \brief [1:1] Alive Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P2WISLS:1;      /**< \brief [2:2] Alive Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2PCSLS:1;      /**< \brief [3:3] Alive Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2PHYXSLS:1;    /**< \brief [4:4] Alive Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2DTEXSLS:1;    /**< \brief [5:5] Alive Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2TCLS:1;       /**< \brief [6:6] Alive Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P2VSD1LS:1;     /**< \brief [30:30] Alive Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P2VSD2LS:1;     /**< \brief [31:31] Alive Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_ALIVE_STATUS_Bits;

/** \brief MDIO PortNx4P2 Device In Use */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_DEVICE_IN_USE_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P2PMDPMA:1;     /**< \brief [1:1] PMA Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P2WIS:1;        /**< \brief [2:2] WIS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P2PCS:1;        /**< \brief [3:3] PCS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P2PHYXS:1;      /**< \brief [4:4] PHYXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P2DTEXS:1;      /**< \brief [5:5] DTEXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P2TC:1;         /**< \brief [6:6] TC Device is in Use (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P2VSD1:1;       /**< \brief [30:30] VSD1 Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P2VSD2:1;       /**< \brief [31:31] VSD2 Device is in Use (rw) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_DEVICE_IN_USE_Bits;

/** \brief MDIO PortNx4P2 Link Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_LINK_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P2PMDPMALS:1;    /**< \brief [1:1] Link Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P2WISLS:1;      /**< \brief [2:2] Link Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2PCSLS:1;      /**< \brief [3:3] Link Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2PHYXSLS:1;    /**< \brief [4:4] Link Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2DTEXSLS:1;    /**< \brief [5:5] Link Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P2TCLS:1;       /**< \brief [6:6] Link Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P2VSD1LS:1;     /**< \brief [30:30] Link Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P2VSD2LS:1;     /**< \brief [31:31] Link Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_LINK_STATUS_Bits;

/** \brief MDIO PortNx4P3 Alive Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_ALIVE_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P3PMDPMALS:1;    /**< \brief [1:1] Alive Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P3WISLS:1;      /**< \brief [2:2] Alive Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3PCSLS:1;      /**< \brief [3:3] Alive Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3PHYXSLS:1;    /**< \brief [4:4] Alive Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3DTEXSLS:1;    /**< \brief [5:5] Alive Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3TCLS:1;       /**< \brief [6:6] Alive Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P3VSD1LS:1;     /**< \brief [30:30] Alive Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P3VSD2LS:1;     /**< \brief [31:31] Alive Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_ALIVE_STATUS_Bits;

/** \brief MDIO PortNx4P3 Device In Use */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_DEVICE_IN_USE_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P3PMDPMA:1;     /**< \brief [1:1] PMA Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P3WIS:1;        /**< \brief [2:2] WIS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P3PCS:1;        /**< \brief [3:3] PCS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P3PHYXS:1;      /**< \brief [4:4] PHYXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P3DTEXS:1;      /**< \brief [5:5] DTEXS Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P3TC:1;         /**< \brief [6:6] TC Device is in Use (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __IO Ifx_UReg_32Bit NX4P3VSD1:1;       /**< \brief [30:30] VSD1 Device is in Use (rw) */
    __IO Ifx_UReg_32Bit NX4P3VSD2:1;       /**< \brief [31:31] VSD2 Device is in Use (rw) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_DEVICE_IN_USE_Bits;

/** \brief MDIO PortNx4P3 Link Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_LINK_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P3PMDPMALS:1;    /**< \brief [1:1] Link Status of PMA Device (r) */
    __I  Ifx_UReg_32Bit NX4P3WISLS:1;      /**< \brief [2:2] Link Status of WIS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3PCSLS:1;      /**< \brief [3:3] Link Status of PCS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3PHYXSLS:1;    /**< \brief [4:4] Link Status of PHYXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3DTEXSLS:1;    /**< \brief [5:5] Link Status of DTEXS Device (r) */
    __I  Ifx_UReg_32Bit NX4P3TCLS:1;       /**< \brief [6:6] Link Status of TC Device (r) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [29:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NX4P3VSD1LS:1;     /**< \brief [30:30] Link Status of VSD1 Device (r) */
    __I  Ifx_UReg_32Bit NX4P3VSD2LS:1;     /**< \brief [31:31] Link Status of VSD2 Device (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_LINK_STATUS_Bits;

/** \brief MDIO Port Connect Disconnect Status */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORT_CONNECT_DISCONNECT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit PORT0CON:1;        /**< \brief [0:0] Port 0 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT1CON:1;        /**< \brief [1:1] Port 1 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT2CON:1;        /**< \brief [2:2] Port 2 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT3CON:1;        /**< \brief [3:3] Port 3 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT4CON:1;        /**< \brief [4:4] Port 4 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT5CON:1;        /**< \brief [5:5] Port 5 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT6CON:1;        /**< \brief [6:6] Port 6 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT7CON:1;        /**< \brief [7:7] Port 7 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT8CON:1;        /**< \brief [8:8] Port 8 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT9CON:1;        /**< \brief [9:9] Port 9 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT10CON:1;       /**< \brief [10:10] Port 10 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT11CON:1;       /**< \brief [11:11] Port 11 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT12CON:1;       /**< \brief [12:12] Port 12 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT13CON:1;       /**< \brief [13:13] Port 13 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT14CON:1;       /**< \brief [14:14] Port 14 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT15CON:1;       /**< \brief [15:15] Port 15 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT16CON:1;       /**< \brief [16:16] Port 16 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT17CON:1;       /**< \brief [17:17] Port 17 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT18CON:1;       /**< \brief [18:18] Port 18 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT19CON:1;       /**< \brief [19:19] Port 19 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT20CON:1;       /**< \brief [20:20] Port 20 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT21CON:1;       /**< \brief [21:21] Port 21 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT22CON:1;       /**< \brief [22:22] Port 22 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT23CON:1;       /**< \brief [23:23] Port 23 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT24CON:1;       /**< \brief [24:24] Port 24 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT25CON:1;       /**< \brief [25:25] Port 25 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT26CON:1;       /**< \brief [26:26] Port 26 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT27CON:1;       /**< \brief [27:27] Port 27 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT28CON:1;       /**< \brief [28:28] Port 28 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT29CON:1;       /**< \brief [29:29] Port 29 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT30CON:1;       /**< \brief [30:30] Port 30 Connect/Disconnect (r) */
    __I  Ifx_UReg_32Bit PORT31CON:1;       /**< \brief [31:31] Port 31 Connect/Disconnect (r) */
} Ifx_GETH_PORT_CORE_MDIO_PORT_CONNECT_DISCONNECT_STATUS_Bits;

/** \brief MDIO Port Nx4 Indirect Control */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_PORT_NX4_INDIRECT_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [2:0] Port Range Select (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_CORE_MDIO_PORT_NX4_INDIRECT_CONTROL_Bits;

/** \brief MDIO Single Command Address */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_ADDRESS_Bits
{
    __IO Ifx_UReg_32Bit RA:16;             /**< \brief [15:0] Register Address (rw) */
    __IO Ifx_UReg_32Bit PA:5;              /**< \brief [20:16] Port Address (rw) */
    __IO Ifx_UReg_32Bit DA:5;              /**< \brief [25:21] Device Address (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_ADDRESS_Bits;

/** \brief MDIO Single Command Control Data */
typedef struct _Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_CONTROL_DATA_Bits
{
    __IO Ifx_UReg_32Bit SDATA:16;          /**< \brief [15:0] Single Write Data (rw) */
    __IO Ifx_UReg_32Bit CMD:2;             /**< \brief [17:16] Control Command (rw) */
    __IO Ifx_UReg_32Bit SAADR:1;           /**< \brief [18:18] Skip Address Frame (rw) */
    __IO Ifx_UReg_32Bit CR:3;              /**< \brief [21:19] Application Clock Range (rw) */
    __IO Ifx_UReg_32Bit SBUSY:1;           /**< \brief [22:22] Busy (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [29:23] \internal Reserved */
    __IO Ifx_UReg_32Bit PSE:1;             /**< \brief [30:30] Preamble Suppression Enable (rw) */
    __IO Ifx_UReg_32Bit CRS:1;             /**< \brief [31:31] Clock Range Select (rw) */
} Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_CONTROL_DATA_Bits;

/** \brief MMC Control */
typedef struct _Ifx_GETH_PORT_CORE_MMC_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit CNTRST:1;          /**< \brief [0:0] Counters Reset (rw) */
    __IO Ifx_UReg_32Bit CNTSTOPRO:1;       /**< \brief [1:1] Counter Stop Rollover (rw) */
    __IO Ifx_UReg_32Bit RSTONRD:1;         /**< \brief [2:2] Reset on Read (rw) */
    __IO Ifx_UReg_32Bit MCF:1;             /**< \brief [3:3] MMC Counter Freeze (rw) */
    __IO Ifx_UReg_32Bit MCT:2;             /**< \brief [5:4] MMC Counter Threshold (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [6:6] \internal Reserved */
    __IO Ifx_UReg_32Bit CNTPRST:1;         /**< \brief [7:7] Counters Preset (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_CONTROL_Bits;

/** \brief MMC FPE Rx Interrupt */
typedef struct _Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit PAECIS:1;          /**< \brief [0:0] MMC Rx Packet Assembly Error Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PSECIS:1;          /**< \brief [1:1] MMC Rx Packet SMD Error Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PAOCIS:1;          /**< \brief [2:2] MMC Rx Packet Assembly OK Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit FCIS:1;            /**< \brief [3:3] MMC Rx FPE Fragment Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_Bits;

/** \brief MMC FPE Rx Interrupt Mask */
typedef struct _Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_MASK_Bits
{
    __IO Ifx_UReg_32Bit PAECIM:1;          /**< \brief [0:0] MMC Rx Packet Assembly Error Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit PSECIM:1;          /**< \brief [1:1] MMC Rx Packet SMD Error Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit PAOCIM:1;          /**< \brief [2:2] MMC Rx Packet Assembly OK Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit FCIM:1;            /**< \brief [3:3] MMC Rx FPE Fragment Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_MASK_Bits;

/** \brief MMC FPE Tx Interrupt */
typedef struct _Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit FCIS:1;            /**< \brief [0:0] MMC Tx FPE Fragment Counter Interrupt status (r) */
    __I  Ifx_UReg_32Bit HRCIS:1;           /**< \brief [1:1] MMC Tx Hold Request Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit GOCIS:1;           /**< \brief [2:2] MMC Tx Gate/Window Overrun Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_Bits;

/** \brief MMC FPE Tx Interrupt Mask */
typedef struct _Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_MASK_Bits
{
    __IO Ifx_UReg_32Bit FCIM:1;            /**< \brief [0:0] MMC Transmit Fragment Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit HRCIM:1;           /**< \brief [1:1] MMC Transmit Hold Request Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit GOCIM:1;           /**< \brief [2:2] MMC Transmit Gate/Window Overrun Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_MASK_Bits;

/** \brief MMC IPC Rx Interrupt */
typedef struct _Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4GPIS:1;      /**< \brief [0:0] MMC Receive IPv4 Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4HERPIS:1;    /**< \brief [1:1] MMC Receive IPv4 Header Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4NOPAYPIS:1;    /**< \brief [2:2] MMC Receive IPv4 No Payload Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4FRAGPIS:1;    /**< \brief [3:3] MMC Receive IPv4 Fragmented Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4UDSBLPIS:1;    /**< \brief [4:4] MMC Receive IPv4 UDP Checksum Disabled Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6GPIS:1;      /**< \brief [5:5] MMC Receive IPV6 Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6HERPIS:1;    /**< \brief [6:6] MMC Receive IPv6 Header Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6NOPAYPIS:1;    /**< \brief [7:7] MMC Receive IPv6 No Payload Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPGPIS:1;       /**< \brief [8:8] MC Receive UDP Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPERPIS:1;      /**< \brief [9:9] MMC Receive UDP Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPGPIS:1;       /**< \brief [10:10] MMC Receive TCP Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPERPIS:1;      /**< \brief [11:11] MMC Receive TCP Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPGPIS:1;      /**< \brief [12:12] MMC Receive ICMP Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPERPIS:1;     /**< \brief [13:13] MMC Receive ICMP Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit RXIPV4GOIS:1;      /**< \brief [16:16] MMC Receive IPv4 Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4HEROIS:1;    /**< \brief [17:17] MMC Receive IPv4 Header Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4NOPAYOIS:1;    /**< \brief [18:18] MMC Receive IPv4 No Payload Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4FRAGOIS:1;    /**< \brief [19:19] MMC Receive IPv4 Fragmented Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4UDSBLOIS:1;    /**< \brief [20:20] MMC Receive IPv4 UDP Checksum Disabled Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6GOIS:1;      /**< \brief [21:21] MMC Receive IPv6 Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6HEROIS:1;    /**< \brief [22:22] MMC Receive IPv6 Header Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6NOPAYOIS:1;    /**< \brief [23:23] MMC Receive IPv6 No Payload Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPGOIS:1;       /**< \brief [24:24] MMC Receive UDP Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPEROIS:1;      /**< \brief [25:25] MMC Receive UDP Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPGOIS:1;       /**< \brief [26:26] MMC Receive TCP Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPEROIS:1;      /**< \brief [27:27] MMC Receive TCP Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPGOIS:1;      /**< \brief [28:28] MMC Receive ICMP Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPEROIS:1;     /**< \brief [29:29] MMC Receive ICMP Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_Bits;

/** \brief MMC IPC Rx Interrupt Mask */
typedef struct _Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK_Bits
{
    __IO Ifx_UReg_32Bit RXIPV4GPIM:1;      /**< \brief [0:0] MMC Receive IPv4 Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4HERPIM:1;    /**< \brief [1:1] MMC Receive IPv4 Header Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4NOPAYPIM:1;    /**< \brief [2:2] MMC Receive IPv4 No Payload Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4FRAGPIM:1;    /**< \brief [3:3] MMC Receive IPv4 Fragmented Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4UDSBLPIM:1;    /**< \brief [4:4] MMC Receive IPv4 UDP Checksum Disabled Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6GPIM:1;      /**< \brief [5:5] MMC Receive IPv6 Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6HERPIM:1;    /**< \brief [6:6] MMC Receive IPv6 Header Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6NOPAYPIM:1;    /**< \brief [7:7] MMC Receive IPv6 No Payload Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPGPIM:1;       /**< \brief [8:8] MMC Receive UDP Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPERPIM:1;      /**< \brief [9:9] MMC Receive UDP Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPGPIM:1;       /**< \brief [10:10] MMC Receive TCP Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPERPIM:1;      /**< \brief [11:11] MMC Receive TCP Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPGPIM:1;      /**< \brief [12:12] MMC Receive ICMP Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPERPIM:1;     /**< \brief [13:13] MMC Receive ICMP Error Packet Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit RXIPV4GOIM:1;      /**< \brief [16:16] MMC Receive IPv4 Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4HEROIM:1;    /**< \brief [17:17] MMC Receive IPv4 Header Error Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4NOPAYOIM:1;    /**< \brief [18:18] MMC Receive IPv4 No Payload Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4FRAGOIM:1;    /**< \brief [19:19] MMC Receive IPv4 Fragmented Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4UDSBLOIM:1;    /**< \brief [20:20] MMC Receive IPv4 UDP Checksum Disabled Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6GOIM:1;      /**< \brief [21:21] MMC Receive IPv6 Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6HEROIM:1;    /**< \brief [22:22] MMC Receive IPv6 Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6NOPAYOIM:1;    /**< \brief [23:23] MMC Receive IPv6 Header Error Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPGOIM:1;       /**< \brief [24:24] MMC Receive IPv6 No Payload Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPEROIM:1;      /**< \brief [25:25] MMC Receive UDP Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPGOIM:1;       /**< \brief [26:26] MMC Receive TCP Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPEROIM:1;      /**< \brief [27:27] MMC Receive TCP Error Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPGOIM:1;      /**< \brief [28:28] MMC Receive ICMP Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPEROIM:1;     /**< \brief [29:29] MMC Receive ICMP Error Octet Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK_Bits;

/** \brief MMC Receive Interrupt Enable */
typedef struct _Ifx_GETH_PORT_CORE_MMC_RECEIVE_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit RXGBPKTIE:1;       /**< \brief [0:0] Rx Good Bad Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXGBOCTIE:1;       /**< \brief [1:1] Rx Good Bad Octet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXGOCTIE:1;        /**< \brief [2:2] Rx Good Octet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXBCGPIE:1;        /**< \brief [3:3] Rx Good Broadcast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXMCGPIE:1;        /**< \brief [4:4] Rx Good Multicast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXCRCERPIE:1;      /**< \brief [5:5] Rx CRC Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXRUNTPIE:1;       /**< \brief [6:6] Rx Runt Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXJABERPIE:1;      /**< \brief [7:7] Rx Jabber Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXUSIZEGPIE:1;     /**< \brief [8:8] Rx Good Undersize Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXOSIZEGPIE:1;     /**< \brief [9:9] Rx Good Oversize Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RX64OCTGBPIE:1;    /**< \brief [10:10] Rx Good Bad 64 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RX65T127OCTGBPIE:1;    /**< \brief [11:11] Rx Good Bad 65-to-127 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RX128T255OCTGBPIE:1;    /**< \brief [12:12] Rx Good Bad 128-to-255 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RX256T511OCTGBPIE:1;    /**< \brief [13:13] Rx Good Bad 256-to-511 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RX512T1023OCTGBPIE:1;    /**< \brief [14:14] Rx Good Bad 512-to-1023 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RX1024TMAXOCTGBPIE:1;    /**< \brief [15:15] Rx Good Bad 1024-to-Max Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXUCGPIE:1;        /**< \brief [16:16] Rx Good Unicast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXLENERPIE:1;      /**< \brief [17:17] Rx Length Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXORANGEPIE:1;     /**< \brief [18:18] Rx Out-of-Range Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXPAUSPIE:1;       /**< \brief [19:19] Rx Pause Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXFOVPIE:1;        /**< \brief [20:20] Rx Queue Overflow Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXVLANGBPIE:1;     /**< \brief [21:21] Rx Good Bad VLAN Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXWDOGPIE:1;       /**< \brief [22:22] Rx Watchdog Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXDISPCGBIE:1;     /**< \brief [23:23] Rx Discard Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXDISOCGBIE:1;     /**< \brief [24:24] Rx Discard Octet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXLPIUSCIE:1;      /**< \brief [25:25] Rx LPI microsecond Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXLPITRCIE:1;      /**< \brief [26:26] Rx LPI Transition Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXALEPIE:1;        /**< \brief [27:27] Rx Alignment Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit SGPPIE:1;          /**< \brief [28:28] SGF Pass Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit SGFPIE:1;          /**< \brief [29:29] SGF Fail Packet Counter Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_RECEIVE_INTERRUPT_ENABLE_Bits;

/** \brief MMC Rx FPE Fragment Cntr */
typedef struct _Ifx_GETH_PORT_CORE_MMC_RX_FPE_FRAGMENT_CNTR_Bits
{
    __I  Ifx_UReg_32Bit FFC:32;            /**< \brief [31:0] Rx FPE Fragment Counter (r) */
} Ifx_GETH_PORT_CORE_MMC_RX_FPE_FRAGMENT_CNTR_Bits;

/** \brief MMC Rx Interrupt */
typedef struct _Ifx_GETH_PORT_CORE_MMC_RX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit RXGBPKTIS:1;       /**< \brief [0:0] Rx Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXGBOCTIS:1;       /**< \brief [1:1] Rx Good Bad Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXGOCTIS:1;        /**< \brief [2:2] Rx Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXBCGPIS:1;        /**< \brief [3:3] Rx Good Broadcast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXMCGPIS:1;        /**< \brief [4:4] Rx Good Multicast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXCRCERPIS:1;      /**< \brief [5:5] Rx CRC Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXRUNTPIS:1;       /**< \brief [6:6] Rx Runt Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXJABERPIS:1;      /**< \brief [7:7] Rx Jabber Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUSIZEGPIS:1;     /**< \brief [8:8] Rx Good Undersize Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXOSIZEGPIS:1;     /**< \brief [9:9] Rx Good Oversize Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX64OCTGBPIS:1;    /**< \brief [10:10] Rx Good Bad 64 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX65T127OCTGBPIS:1;    /**< \brief [11:11] Rx Good Bad 65-to-127 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX128T255OCTGBPIS:1;    /**< \brief [12:12] Rx Good Bad 128-to-255 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX256T511OCTGBPIS:1;    /**< \brief [13:13] Rx Good Bad 256-to-511 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX512T1023OCTGBPIS:1;    /**< \brief [14:14] Rx Good Bad 512-to-1023 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX1024TMAXOCTGBPIS:1;    /**< \brief [15:15] Rx Good Bad 1024-to-Max Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUCGPIS:1;        /**< \brief [16:16] Rx Good Unicast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXLENERPIS:1;      /**< \brief [17:17] Rx Length Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXORANGEPIS:1;     /**< \brief [18:18] Rx Out-of-Range Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXPAUSPIS:1;       /**< \brief [19:19] Rx Pause Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXFOVPIS:1;        /**< \brief [20:20] Rx Queue Overflow Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXVLANGBPIS:1;     /**< \brief [21:21] Rx Good Bad VLAN Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXWDOGPIS:1;       /**< \brief [22:22] Rx Watchdog Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXDISPCGBIS:1;     /**< \brief [23:23] Rx Good Bad Discarded Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXDISOCGBIS:1;     /**< \brief [24:24] Rx Good Bad Discarded Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXLPIUSCIS:1;      /**< \brief [25:25] Rx LPI microsecond Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXLPITRCIS:1;      /**< \brief [26:26] Rx LPI Transition Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXALEPIS:1;        /**< \brief [27:27] Rx Alignment Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit SGPPIS:1;          /**< \brief [28:28] SGF Pass Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit SGFPIS:1;          /**< \brief [29:29] SGF Fail Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __I  Ifx_UReg_32Bit RXPRMMCIS:1;       /**< \brief [31:31] Rx Priority MMC Counter Interrupt Status (r) */
} Ifx_GETH_PORT_CORE_MMC_RX_INTERRUPT_Bits;

/** \brief MMC Rx Packet Assembly Err Cntr */
typedef struct _Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_Bits
{
    __I  Ifx_UReg_32Bit PAEC:32;           /**< \brief [31:0] Rx Packet Assembly Error Counter (r) */
} Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_Bits;

/** \brief MMC Rx Packet Assembly OK Cntr */
typedef struct _Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_Bits
{
    __I  Ifx_UReg_32Bit PAOC:32;           /**< \brief [31:0] Rx Packet Assembly OK Counter (r) */
} Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_Bits;

/** \brief MMC Rx Packet SMD Err Cntr */
typedef struct _Ifx_GETH_PORT_CORE_MMC_RX_PACKET_SMD_ERR_CNTR_Bits
{
    __I  Ifx_UReg_32Bit PSEC:32;           /**< \brief [31:0] Rx Packet SMD Error Counter (r) */
} Ifx_GETH_PORT_CORE_MMC_RX_PACKET_SMD_ERR_CNTR_Bits;

/** \brief MMC Transmit Interrupt Enable */
typedef struct _Ifx_GETH_PORT_CORE_MMC_TRANSMIT_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXGBOCTIE:1;       /**< \brief [0:0] Tx Good Bad Octet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXGBPKTIE:1;       /**< \brief [1:1] Tx Good Bad Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXBCGPIE:1;        /**< \brief [2:2] Tx Good Broadcast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXMCGPIE:1;        /**< \brief [3:3] Tx Good Multicast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TX64OCTGBPIE:1;    /**< \brief [4:4] Tx Good Bad 64 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TX65T127OCTGBPIE:1;    /**< \brief [5:5] Tx Good Bad 65-to-127 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TX128T255OCTGBPIE:1;    /**< \brief [6:6] Tx Good Bad 128-to-255 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TX256T511OCTGBPIE:1;    /**< \brief [7:7] Tx Good Bad 256-to-511 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TX512T1023OCTGBPIE:1;    /**< \brief [8:8] Tx Good Bad 512-to-1023 Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TX1024TMAXOCTGBPIE:1;    /**< \brief [9:9] Tx Good Bad 1024-to-Max Octet Size Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXUCGBPIE:1;       /**< \brief [10:10] Tx Good Bad Unicast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXMCGBPIE:1;       /**< \brief [11:11] Tx Good Bad Multicast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXBCGBPIE:1;       /**< \brief [12:12] Tx Good Bad Broadcast Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXUFLOWERPIE:1;    /**< \brief [13:13] Tx Underflow Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXGOCTIE:1;        /**< \brief [14:14] Tx Good Octet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXGPKTIE:1;        /**< \brief [15:15] Tx Good Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXPAUSPIE:1;       /**< \brief [16:16] Tx Pause Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXVLANGPIE:1;      /**< \brief [17:17] Tx Good VLAN Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXLPIUSCIE:1;      /**< \brief [18:18] Tx LPI microsecond Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXLPITRCIE:1;      /**< \brief [19:19] Tx LPI Transition Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXSCOLGPIE:1;      /**< \brief [20:20] MMC Transmit Single Collision Good Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXMCOLGPIE:1;      /**< \brief [21:21] MMC Transmit Multiple Collision Good Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXDEFPIE:1;        /**< \brief [22:22] MMC Transmit Deferred Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXLATCOLPIE:1;     /**< \brief [23:23] MMC Transmit Late Collision Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXEXCOLPIE:1;      /**< \brief [24:24] MMC Transmit Excessive Collision Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXCARERPIE:1;      /**< \brief [25:25] MMC Transmit Carrier Error Packet Counter Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXEXDEFPIE:1;      /**< \brief [26:26] MMC Transmit Excessive Deferral Packet Counter Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_GETH_PORT_CORE_MMC_TRANSMIT_INTERRUPT_ENABLE_Bits;

/** \brief MMC Tx FPE Fragment Cntr */
typedef struct _Ifx_GETH_PORT_CORE_MMC_TX_FPE_FRAGMENT_CNTR_Bits
{
    __I  Ifx_UReg_32Bit TXFFC:32;          /**< \brief [31:0] Tx FPE Fragment counter (r) */
} Ifx_GETH_PORT_CORE_MMC_TX_FPE_FRAGMENT_CNTR_Bits;

/** \brief MMC Tx Gate Orun Cntr High */
typedef struct _Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_HIGH_Bits
{
    __I  Ifx_UReg_32Bit TXGOCH:32;         /**< \brief [31:0] Tx Gate/Window Overrun Counter High (r) */
} Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_HIGH_Bits;

/** \brief MMC Tx Gate Orun Cntr Low */
typedef struct _Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXGOCL:32;         /**< \brief [31:0] Tx Gate/Window Overrun Counter Low (r) */
} Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_LOW_Bits;

/** \brief MMC Tx Hold Req Cntr */
typedef struct _Ifx_GETH_PORT_CORE_MMC_TX_HOLD_REQ_CNTR_Bits
{
    __I  Ifx_UReg_32Bit TXHRC:32;          /**< \brief [31:0] Tx Hold Request Counter (r) */
} Ifx_GETH_PORT_CORE_MMC_TX_HOLD_REQ_CNTR_Bits;

/** \brief MMC Tx Interrupt */
typedef struct _Ifx_GETH_PORT_CORE_MMC_TX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit TXGBOCTIS:1;       /**< \brief [0:0] Tx Good Bad Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXGBPKTIS:1;       /**< \brief [1:1] Tx Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXBCGPIS:1;        /**< \brief [2:2] Tx Good Broadcast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXMCGPIS:1;        /**< \brief [3:3] Tx Good Multicast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX64OCTGBPIS:1;    /**< \brief [4:4] Tx Good Bad 64 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX65T127OCTGBPIS:1;    /**< \brief [5:5] Tx Good Bad 65-to-127 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX128T255OCTGBPIS:1;    /**< \brief [6:6] Tx Good Bad 128-to-255 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX256T511OCTGBPIS:1;    /**< \brief [7:7] Tx Good Bad 256-to-511 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX512T1023OCTGBPIS:1;    /**< \brief [8:8] Tx Good Bad 512-to-1023 Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX1024TMAXOCTGBPIS:1;    /**< \brief [9:9] Tx Good Bad 1024-to-Max Octet Size Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXUCGBPIS:1;       /**< \brief [10:10] Tx Good Bad Unicast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXMCGBPIS:1;       /**< \brief [11:11] Tx Good Bad Multicast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXBCGBPIS:1;       /**< \brief [12:12] Tx Good Bad Broadcast Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXUFLOWERPIS:1;    /**< \brief [13:13] Tx Underflow Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXGOCTIS:1;        /**< \brief [14:14] Tx Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXGPKTIS:1;        /**< \brief [15:15] Tx Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXPAUSPIS:1;       /**< \brief [16:16] Tx Pause Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXVLANGPIS:1;      /**< \brief [17:17] Tx Good VLAN Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXLPIUSCIS:1;      /**< \brief [18:18] Tx LPI microsecond Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXLPITRCIS:1;      /**< \brief [19:19] Tx LPI Transition Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXSCOLGPIS:1;      /**< \brief [20:20] MMC Transmit Single Collision Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXMCOLGPIS:1;      /**< \brief [21:21] MMC Transmit Multiple Collision Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXDEFPIS:1;        /**< \brief [22:22] MMC Transmit Deferred Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXLATCOLPIS:1;     /**< \brief [23:23] MMC Transmit Late Collision Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXEXCOLPIS:1;      /**< \brief [24:24] MMC Transmit Excessive Collision Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXCARERPIS:1;      /**< \brief [25:25] MMC Transmit Carrier Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXEXDEFPIS:1;      /**< \brief [26:26] MMC Transmit Excessive Deferral Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit TXPRMMCIS:1;       /**< \brief [31:31] Tx Priority MMC Counter Interrupt Status (r) */
} Ifx_GETH_PORT_CORE_MMC_TX_INTERRUPT_Bits;

/** \brief RWK Filter0 1 CRC */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER0_1_CRC_Bits
{
    __IO Ifx_UReg_32Bit FILTER0_CRC:16;    /**< \brief [15:0] CRC0 This filter CRC-16 contains the CRC_16 value of the pattern (rw) */
    __IO Ifx_UReg_32Bit FILTER1_CRC:16;    /**< \brief [31:16] CRC1 This filter CRC-16 contains the CRC_16 value of the pattern (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_1_CRC_Bits;

/** \brief RWK Filter0 3 Command */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER0_3_COMMAND_Bits
{
    __IO Ifx_UReg_32Bit FILTER0_COMMAND:4;    /**< \brief [3:0] Command 0 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit FILTER1_COMMAND:4;    /**< \brief [11:8] Command1 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit FILTER2_COMMAND:4;    /**< \brief [19:16] Command2 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit FILTER3_COMMAND:4;    /**< \brief [27:24] Command3 The 4-bit filter command controls the filter operation (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_3_COMMAND_Bits;

/** \brief RWK Filter0 3 Offset */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER0_3_OFFSET_Bits
{
    __IO Ifx_UReg_32Bit FILTER0_OFFSET:8;    /**< \brief [7:0] Offset0 (rw) */
    __IO Ifx_UReg_32Bit FILTER1_OFFSET:8;    /**< \brief [15:8] Offset1 This filter offset defines the offset (within the packet) from which the filter examines the packets (rw) */
    __IO Ifx_UReg_32Bit FILTER2_OFFSET:8;    /**< \brief [23:16] Offset2 This filter offset defines the offset (within the packet) from which the filter examines the packets (rw) */
    __IO Ifx_UReg_32Bit FILTER3_OFFSET:8;    /**< \brief [31:24] Offset3  This filter offset defines the offset (within the packet) from which the filter examines the packets (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_3_OFFSET_Bits;

/** \brief RWK Filter0 Byte Mask */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER0_BYTE_MASK_Bits
{
    __IO Ifx_UReg_32Bit FILTER0_BYTE_MASK:32;    /**< \brief [31:0] Byte Mask (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_BYTE_MASK_Bits;

/** \brief RWK Filter1 Byte Mask */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER1_BYTE_MASK_Bits
{
    __IO Ifx_UReg_32Bit FILTER1_BYTE_MASK:32;    /**< \brief [31:0] Byte Mask (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER1_BYTE_MASK_Bits;

/** \brief RWK Filter2 3 CRC */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER2_3_CRC_Bits
{
    __IO Ifx_UReg_32Bit FILTER2_CRC:16;    /**< \brief [15:0] CRC0 This filter CRC-16 contains the CRC_16 value of the pattern (rw) */
    __IO Ifx_UReg_32Bit FILTER3_CRC:16;    /**< \brief [31:16] CRC1 This filter CRC-16 contains the CRC_16 value of the pattern (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER2_3_CRC_Bits;

/** \brief RWK Filter2 Byte Mask */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER2_BYTE_MASK_Bits
{
    __IO Ifx_UReg_32Bit FILTER2_BYTE_MASK:32;    /**< \brief [31:0] Byte Mask (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER2_BYTE_MASK_Bits;

/** \brief RWK Filter3 Byte Mask */
typedef struct _Ifx_GETH_PORT_CORE_RWK_FILTER3_BYTE_MASK_Bits
{
    __IO Ifx_UReg_32Bit FILTER3_BYTE_MASK:32;    /**< \brief [31:0] Byte Mask (rw) */
} Ifx_GETH_PORT_CORE_RWK_FILTER3_BYTE_MASK_Bits;

/** \brief RxICMP Error Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXICMP_ERROR_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXICMPERROCTLO:32;    /**< \brief [31:0] RxICMP Error Octets (r) */
} Ifx_GETH_PORT_CORE_RXICMP_ERROR_OCTETS_LOW_Bits;

/** \brief RxICMP Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXICMP_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXICMPERRPKTLO:32;    /**< \brief [31:0] RxICMP Error Packets (r) */
} Ifx_GETH_PORT_CORE_RXICMP_ERROR_PACKETS_LOW_Bits;

/** \brief RxICMP Good Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXICMP_GOOD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXICMPGDOCTLO:32;    /**< \brief [31:0] RxICMP Good Octets (r) */
} Ifx_GETH_PORT_CORE_RXICMP_GOOD_OCTETS_LOW_Bits;

/** \brief RxICMP Good Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXICMP_GOOD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXICMPGDPKTLO:32;    /**< \brief [31:0] RxICMP Good Packets (r) */
} Ifx_GETH_PORT_CORE_RXICMP_GOOD_PACKETS_LOW_Bits;

/** \brief RxIPv4 Fragmented Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4FRAGOCTLO:32;    /**< \brief [31:0] RxIPv4 Fragmented Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_LOW_Bits;

/** \brief RxIPv4 Fragmented Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4FRAGPKTLO:32;    /**< \brief [31:0] RxIPv4 Fragmented Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_LOW_Bits;

/** \brief RxIPv4 Good Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_GOOD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4GDOCTLO:32;    /**< \brief [31:0] RxIPv4 Good Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_GOOD_OCTETS_LOW_Bits;

/** \brief RxIPv4 Good Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_GOOD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4GDPKTLO:32;    /**< \brief [31:0] RxIPv4 Good Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_GOOD_PACKETS_LOW_Bits;

/** \brief RxIPv4 Header Error Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4HDRERROCTLO:32;    /**< \brief [31:0] RxIPv4 Header Error Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_LOW_Bits;

/** \brief RxIPv4 Header Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4HDRERRPKTLO:32;    /**< \brief [31:0] RxIPv4 Header Error Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_LOW_Bits;

/** \brief RxIPv4 No Payload Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4NOPAYOCTLO:32;    /**< \brief [31:0] RxIPv4 Payload Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_LOW_Bits;

/** \brief RxIPv4 No Payload Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4NOPAYPKTLO:32;    /**< \brief [31:0] RxIPv4 Payload Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_LOW_Bits;

/** \brief RxIPv4 UDP Checksum Disabled Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4UDSBLPKTLO:32;    /**< \brief [31:0] RxIPv4 UDP Checksum Disabled Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_LOW_Bits;

/** \brief RxIPv4 UDP Checksum Disable Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4UDSBLOCTLO:32;    /**< \brief [31:0] RxIPv4 UDP Checksum Disable Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_LOW_Bits;

/** \brief RxIPv6 Good Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV6_GOOD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6GDOCTLO:32;    /**< \brief [31:0] RxIPv6 Good Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV6_GOOD_OCTETS_LOW_Bits;

/** \brief RxIPv6 Good Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV6_GOOD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6GDPKTLO:32;    /**< \brief [31:0] RxIPv6 Good Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV6_GOOD_PACKETS_LOW_Bits;

/** \brief RxIPv6 Header Error Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6HDRERROCTLO:32;    /**< \brief [31:0] RxIPv6 Header Error Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_LOW_Bits;

/** \brief RxIPv6 Header Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6HDRERRPKTLO:32;    /**< \brief [31:0] RxIPv6 Header Error Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_LOW_Bits;

/** \brief RxIPv6 No Payload Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6NOPAYOCTLO:32;    /**< \brief [31:0] RxIPv6 Payload Octets (r) */
} Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_LOW_Bits;

/** \brief RxIPv6 No Payload Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6NOPAYPKTLO:32;    /**< \brief [31:0] RxIPv6 Payload Packets (r) */
} Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_LOW_Bits;

/** \brief RxTCP Error Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXTCP_ERROR_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXTCPERROCTLO:32;    /**< \brief [31:0] RxTCP Error Octets (r) */
} Ifx_GETH_PORT_CORE_RXTCP_ERROR_OCTETS_LOW_Bits;

/** \brief RxTCP Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXTCP_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXTCPERRPKTLO:32;    /**< \brief [31:0] RxTCP Error Packets (r) */
} Ifx_GETH_PORT_CORE_RXTCP_ERROR_PACKETS_LOW_Bits;

/** \brief RxTCP Good Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXTCP_GOOD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXTCPGDOCTLO:32;    /**< \brief [31:0] RxTCP Good Octets (r) */
} Ifx_GETH_PORT_CORE_RXTCP_GOOD_OCTETS_LOW_Bits;

/** \brief RxTCP Good Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXTCP_GOOD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXTCPGDPKTLO:32;    /**< \brief [31:0] RxTCP Good Packets (r) */
} Ifx_GETH_PORT_CORE_RXTCP_GOOD_PACKETS_LOW_Bits;

/** \brief RxUDP Error Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXUDP_ERROR_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXUDPERROCTLO:32;    /**< \brief [31:0] RxUDP Error Octets (r) */
} Ifx_GETH_PORT_CORE_RXUDP_ERROR_OCTETS_LOW_Bits;

/** \brief RxUDP Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXUDP_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXUDPERRPKTLO:32;    /**< \brief [31:0] RxUDP Error Packets (r) */
} Ifx_GETH_PORT_CORE_RXUDP_ERROR_PACKETS_LOW_Bits;

/** \brief RxUDP Good Octets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXUDP_GOOD_OCTETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXUDPGDOCTLO:32;    /**< \brief [31:0] RxUDP Good Octets (r) */
} Ifx_GETH_PORT_CORE_RXUDP_GOOD_OCTETS_LOW_Bits;

/** \brief RxUDP Good Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RXUDP_GOOD_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXUDPGDPKTLO:32;    /**< \brief [31:0] RxUDP Good Packets (r) */
} Ifx_GETH_PORT_CORE_RXUDP_GOOD_PACKETS_LOW_Bits;

/** \brief Rx 1024ToMaxOctets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RX1024_MAXOCTGBLO:32;    /**< \brief [31:0] Rx Good Bad 1024-tomaxsize Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx 128To255Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RX128_255OCTGBLO:32;    /**< \brief [31:0] Rx Good Bad 128-to-255 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx 256To511Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RX256_511OCTGBLO:32;    /**< \brief [31:0] Rx Good Bad 256-to-511 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx 512To1023Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RX512_1023OCTGBLO:32;    /**< \brief [31:0] Rx Good Bad 512-to-1023 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx 64Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RX64OCTGBLO:32;    /**< \brief [31:0] Rx Good Bad 64 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx 65To127Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RX65_127OCTGBLO:32;    /**< \brief [31:0] Rx Good Bad 65-to-127 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx Alignment Error Packets */
typedef struct _Ifx_GETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXALIGNERR:32;     /**< \brief [31:0] Rx Alignment Error Packet Count (r) */
} Ifx_GETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS_Bits;

/** \brief Rx Broadcast Packets Good Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXBCASTGLO:32;     /**< \brief [31:0] Rx Good Broadcast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_LOW_Bits;

/** \brief Rx CRC Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_CRC_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXCRCERLO:32;      /**< \brief [31:0] Rx CRC Error Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_CRC_ERROR_PACKETS_LOW_Bits;

/** \brief Rx Discard Octets Good Bad High */
typedef struct _Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_HIGH_Bits
{
    __I  Ifx_UReg_32Bit RXDOCNTGBHI:32;    /**< \brief [31:0] Rx Good Bad Discard Octet Count High (r) */
} Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_HIGH_Bits;

/** \brief Rx Discard Octets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXDOCNTGBLO:32;    /**< \brief [31:0] Rx Good Bad Discard Octet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_LOW_Bits;

/** \brief Rx Discard Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_DISCARD_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXDPCNTGBLO:32;    /**< \brief [31:0] Rx Good Bad Discard Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_DISCARD_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx FIFOOverflow Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_FIFOOVERFLOW_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXFOVFLO:32;       /**< \brief [31:0] Rx FIFO Overflow Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_FIFOOVERFLOW_PACKETS_LOW_Bits;

/** \brief Rx Jabber Error Packets */
typedef struct _Ifx_GETH_PORT_CORE_RX_JABBER_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXJABERER:32;      /**< \brief [31:0] Rx Jabber Error Packet Count (r) */
} Ifx_GETH_PORT_CORE_RX_JABBER_ERROR_PACKETS_Bits;

/** \brief Rx Length Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXLENERRLO:32;     /**< \brief [31:0] Rx Length Error Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_LOW_Bits;

/** \brief Rx LPI Tran Cntr */
typedef struct _Ifx_GETH_PORT_CORE_RX_LPI_TRAN_CNTR_Bits
{
    __I  Ifx_UReg_32Bit RXLPITRC:32;       /**< \brief [31:0] Rx LPI Transition Count (r) */
} Ifx_GETH_PORT_CORE_RX_LPI_TRAN_CNTR_Bits;

/** \brief Rx LPI USEC Cntr */
typedef struct _Ifx_GETH_PORT_CORE_RX_LPI_USEC_CNTR_Bits
{
    __I  Ifx_UReg_32Bit RXLPIUSC:32;       /**< \brief [31:0] Rx LPI microsecond Count (r) */
} Ifx_GETH_PORT_CORE_RX_LPI_USEC_CNTR_Bits;

/** \brief Rx Multicast Packets Good Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXMCASTGLO:32;     /**< \brief [31:0] Rx Good Multicast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_LOW_Bits;

/** \brief Rx Octet Count Good Bad High */
typedef struct _Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_HIGH_Bits
{
    __I  Ifx_UReg_32Bit RXOCTGBHI:32;      /**< \brief [31:0] Rx Good Bad Octet Count High (r) */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_HIGH_Bits;

/** \brief Rx Octet Count Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXOCTGBLO:32;      /**< \brief [31:0] Rx Good Bad Octet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_LOW_Bits;

/** \brief Rx Octet Count Good High */
typedef struct _Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_HIGH_Bits
{
    __I  Ifx_UReg_32Bit RXOCTGHI:32;       /**< \brief [31:0] Rx Good Octet Count High (r) */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_HIGH_Bits;

/** \brief Rx Octet Count Good Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXOCTGLO:32;       /**< \brief [31:0] Rx Good Octet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_LOW_Bits;

/** \brief Rx OutofRange Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_OUTOFRANGE_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXORANGELO:32;     /**< \brief [31:0] Rx Out of Range Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_OUTOFRANGE_PACKETS_LOW_Bits;

/** \brief Rx Oversize Packets Good */
typedef struct _Ifx_GETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXOSIZEG:32;       /**< \brief [31:0] Rx Good Oversize Packet Count (r) */
} Ifx_GETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD_Bits;

/** \brief Rx Packet Count Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_PACKET_COUNT_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXPKTGBLO:32;      /**< \brief [31:0] Rx Good Bad Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_PACKET_COUNT_GOOD_BAD_LOW_Bits;

/** \brief Rx Pause Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_PAUSE_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXPAUSELO:32;      /**< \brief [31:0] Rx Pause Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_PAUSE_PACKETS_LOW_Bits;

/** \brief Rx Runt Error Packets */
typedef struct _Ifx_GETH_PORT_CORE_RX_RUNT_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXRUNTER:32;       /**< \brief [31:0] Rx Runt Error Packet Count (r) */
} Ifx_GETH_PORT_CORE_RX_RUNT_ERROR_PACKETS_Bits;

/** \brief Rx Undersize Packets Good */
typedef struct _Ifx_GETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXUSIZEG:32;       /**< \brief [31:0] Rx Good Undersize Packet Count (r) */
} Ifx_GETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD_Bits;

/** \brief Rx Unicast Packets Good Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXUCASTGLO:32;     /**< \brief [31:0] Rx Good Unicast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_LOW_Bits;

/** \brief Rx VLAN Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit RXVLANGBLO:32;     /**< \brief [31:0] Rx Good Bad VLAN Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Rx Watchdog Error Packets */
typedef struct _Ifx_GETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXWDOGERR:32;      /**< \brief [31:0] Rx Watchdog Error Packet Count (r) */
} Ifx_GETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS_Bits;

/** \brief SGF Fail PktCnt */
typedef struct _Ifx_GETH_PORT_CORE_SGF_FAIL_PKTCNT_Bits
{
    __I  Ifx_UReg_32Bit SGFP:32;           /**< \brief [31:0] Stream-Gate Filter Failed Packets Count (r) */
} Ifx_GETH_PORT_CORE_SGF_FAIL_PKTCNT_Bits;

/** \brief SGF Pass PktCnt */
typedef struct _Ifx_GETH_PORT_CORE_SGF_PASS_PKTCNT_Bits
{
    __I  Ifx_UReg_32Bit SGPP:32;           /**< \brief [31:0] Stream-Gate Filter Pass Packets Count (r) */
} Ifx_GETH_PORT_CORE_SGF_PASS_PKTCNT_Bits;

/** \brief SNPS SCS REG1 */
typedef struct _Ifx_GETH_PORT_CORE_SNPS_SCS_REG1_Bits
{
    __IO Ifx_UReg_32Bit MAC_SCS1:32;       /**< \brief [31:0] Synopsys Reserved (rw) */
} Ifx_GETH_PORT_CORE_SNPS_SCS_REG1_Bits;

/** \brief Tx 1024ToMaxOctets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TX1024_MAXOCTGBLO:32;    /**< \brief [31:0] Tx Good Bad 1024-tomaxsize Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx 128To255Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TX128_255OCTGBLO:32;    /**< \brief [31:0] Tx Good Bad 128-to-255 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx 256To511Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TX256_511OCTGBLO:32;    /**< \brief [31:0] Tx Good Bad 256-to-511 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx 512To1023Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TX512_1023OCTGBLO:32;    /**< \brief [31:0] Tx Good Bad 512-to-1023 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx 64Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TX64OCTGBLO:32;    /**< \brief [31:0] Tx Good Bad 64 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx 65To127Octets Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TX65_127OCTGBLO:32;    /**< \brief [31:0] Tx Good Bad 65-to-127 Octet Size Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx Broadcast Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXBCASTGBLO:32;    /**< \brief [31:0] Tx Good Bad Broadcast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx Broadcast Packets Good Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXBCASTGLO:32;     /**< \brief [31:0] Tx Good Broadcast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_LOW_Bits;

/** \brief Tx Carrier Error Packets */
typedef struct _Ifx_GETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXCARR:32;         /**< \brief [31:0] Tx Carrier Error Packets (r) */
} Ifx_GETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS_Bits;

/** \brief Tx Deferred Packets */
typedef struct _Ifx_GETH_PORT_CORE_TX_DEFERRED_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXDEFRD:32;        /**< \brief [31:0] Tx Deferred Packets (r) */
} Ifx_GETH_PORT_CORE_TX_DEFERRED_PACKETS_Bits;

/** \brief Tx Excessive Collision Packets */
typedef struct _Ifx_GETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXEXSCOL:32;       /**< \brief [31:0] Tx Excessive Collision Packets (r) */
} Ifx_GETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS_Bits;

/** \brief Tx Excessive Deferral Error */
typedef struct _Ifx_GETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR_Bits
{
    __I  Ifx_UReg_32Bit TXEXSDEF:32;       /**< \brief [31:0] Tx Excessive Deferral Error (r) */
} Ifx_GETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR_Bits;

/** \brief Tx Late Collision Packets */
typedef struct _Ifx_GETH_PORT_CORE_TX_LATE_COLLISION_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXLATECOL:32;      /**< \brief [31:0] Tx Late Collision Packets (r) */
} Ifx_GETH_PORT_CORE_TX_LATE_COLLISION_PACKETS_Bits;

/** \brief Tx LPI Tran Cntr */
typedef struct _Ifx_GETH_PORT_CORE_TX_LPI_TRAN_CNTR_Bits
{
    __I  Ifx_UReg_32Bit TXLPITRC:32;       /**< \brief [31:0] Tx LPI Transition Count (r) */
} Ifx_GETH_PORT_CORE_TX_LPI_TRAN_CNTR_Bits;

/** \brief Tx LPI USEC Cntr */
typedef struct _Ifx_GETH_PORT_CORE_TX_LPI_USEC_CNTR_Bits
{
    __I  Ifx_UReg_32Bit TXLPIUSC:32;       /**< \brief [31:0] Tx LPI microsecond Count (r) */
} Ifx_GETH_PORT_CORE_TX_LPI_USEC_CNTR_Bits;

/** \brief Tx Multicast Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXMCASTGBLO:32;    /**< \brief [31:0] Tx Good Bad Multicast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx Multicast Packets Good Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXMCASTGLO:32;     /**< \brief [31:0] Tx Good Multicast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_LOW_Bits;

/** \brief Tx Multiple Collision Good Packets */
typedef struct _Ifx_GETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXMULTCOLG:32;     /**< \brief [31:0] Tx Multiple Collision Good Packets (r) */
} Ifx_GETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits;

/** \brief Tx Octet Count Good Bad High */
typedef struct _Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_HIGH_Bits
{
    __I  Ifx_UReg_32Bit TXOCTGBHI:32;      /**< \brief [31:0] Tx Good Bad Octet Count High (r) */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_HIGH_Bits;

/** \brief Tx Octet Count Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXOCTGBLO:32;      /**< \brief [31:0] Tx Good Bad Octet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_LOW_Bits;

/** \brief Tx Octet Count Good High */
typedef struct _Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_HIGH_Bits
{
    __I  Ifx_UReg_32Bit TXOCTGHI:32;       /**< \brief [31:0] Tx Good Octet Count High (r) */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_HIGH_Bits;

/** \brief Tx Octet Count Good Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXOCTGLO:32;       /**< \brief [31:0] Tx Good Octet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_LOW_Bits;

/** \brief Tx Packet Count Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXPKTGBLO:32;      /**< \brief [31:0] Tx Good Bad Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_LOW_Bits;

/** \brief Tx Packet Count Good Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXPKTGLO:32;       /**< \brief [31:0] Tx Good Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_LOW_Bits;

/** \brief Tx Pause Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_PAUSE_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXPAUSEGLO:32;     /**< \brief [31:0] Tx Pause Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_PAUSE_PACKETS_LOW_Bits;

/** \brief Tx Single Collision Good Packets */
typedef struct _Ifx_GETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXSNGLCOLG:32;     /**< \brief [31:0] Tx Single Collision Good Packets (r) */
} Ifx_GETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits;

/** \brief Tx Underflow Error Packets Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXUNDRFLWLO:32;    /**< \brief [31:0] Tx Underflow Error Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_LOW_Bits;

/** \brief Tx Unicast Packets Good Bad Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXUCASTGBLO:32;    /**< \brief [31:0] Tx Good Bad Unicast Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_LOW_Bits;

/** \brief Tx VLAN Packets Good Low */
typedef struct _Ifx_GETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_LOW_Bits
{
    __I  Ifx_UReg_32Bit TXVLANGLO:32;      /**< \brief [31:0] Tx Good VLAN Packet Count Low (r) */
} Ifx_GETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_LOW_Bits;

/** \brief MTL Debug Control */
typedef struct _Ifx_GETH_PORT_MTL_DEBUG_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit FDBGEN:1;          /**< \brief [0:0] FIFO Debug Access Enable (rw) */
    __IO Ifx_UReg_32Bit DBGMOD:1;          /**< \brief [1:1] Debug Mode Access to FIFO (rw) */
    __IO Ifx_UReg_32Bit BYTEEN:2;          /**< \brief [3:2] Write Data Byte Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PKTSTATE:2;        /**< \brief [6:5] Write Control Type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RSTALL:1;          /**< \brief [8:8] Reset All Pointers (rw) */
    __IO Ifx_UReg_32Bit RSTSEL:1;          /**< \brief [9:9] Reset Pointers of Selected FIFO (rw) */
    __IO Ifx_UReg_32Bit FIFORDEN:1;        /**< \brief [10:10] FIFO Read Enable (rw) */
    __IO Ifx_UReg_32Bit FIFOWREN:1;        /**< \brief [11:11] FIFO Write Enable (rw) */
    __IO Ifx_UReg_32Bit FIFOSEL:2;         /**< \brief [13:12] FIFO Selected for Access (rw) */
    __IO Ifx_UReg_32Bit PKTIE:1;           /**< \brief [14:14] Receive Packet Available Interrupt Status Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit EIEE:1;            /**< \brief [16:16] ECC Inject Error Enable (rw) */
    __IO Ifx_UReg_32Bit EIAEE:1;           /**< \brief [17:17] ECC Inject Address Error Enable (rw) */
    __IO Ifx_UReg_32Bit EIEC:1;            /**< \brief [18:18] ECC Inject Error Control (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_GETH_PORT_MTL_DEBUG_CONTROL_Bits;

/** \brief MTL Debug Status */
typedef struct _Ifx_GETH_PORT_MTL_DEBUG_STATUS_Bits
{
    __I  Ifx_UReg_32Bit FIFOBUSY:1;        /**< \brief [0:0] FIFO Busy (r) */
    __I  Ifx_UReg_32Bit PKTSTATE:2;        /**< \brief [2:1] Read Control Type (r) */
    __I  Ifx_UReg_32Bit BYTEEN:2;          /**< \brief [4:3] Read Data Byte Enable (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit PKTI:1;            /**< \brief [8:8] Receive Packet Available Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __I  Ifx_UReg_32Bit LOCR:16;           /**< \brief [31:16] Remaining Locations in the FIFO (r) */
} Ifx_GETH_PORT_MTL_DEBUG_STATUS_Bits;

/** \brief MTL DPP Control */
typedef struct _Ifx_GETH_PORT_MTL_DPP_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit DDPP:1;            /**< \brief [0:0] Disable Data path Parity Protection (rw) */
    __IO Ifx_UReg_32Bit OPE:1;             /**< \brief [1:1] Odd Parity Enable  - 1: Enables odd parity protection on all the external interfaces (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [4:2] \internal Reserved */
    __IO Ifx_UReg_32Bit IPEDC:1;           /**< \brief [5:5] Insert Parity Error in Descriptor Cache data path Parity checker (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit IPEMTD:1;          /**< \brief [8:8] Insert Parity Error in MTL data path Parity checker (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __IO Ifx_UReg_32Bit IPEMTBU:1;         /**< \brief [10:10] Insert Parity error in MAC TBU data path Parity checker (rw) */
    __IO Ifx_UReg_32Bit IPEMTFC:1;         /**< \brief [11:11] Insert Parity error in MAC TFC data path Parity checker (rw) */
    __IO Ifx_UReg_32Bit IPEAR:1;           /**< \brief [12:12] Insert Parity error in Insert Parity Error in Application Receive interface data path Parity Checker (rw) */
    __IO Ifx_UReg_32Bit IPEMRWC:1;         /**< \brief [13:13] Insert Parity error in MTL RWC data path Parity Checker (rw) */
    __IO Ifx_UReg_32Bit IPEMRRC:1;         /**< \brief [14:14] Insert Parity Error in MTL RRC data path Parity Checker (rw) */
    __IO Ifx_UReg_32Bit IPECW:1;           /**< \brief [15:15] Insert Parity Error in CSR Write data path Parity Checker (rw) */
    __IO Ifx_UReg_32Bit IPEASR:1;          /**< \brief [16:16] Insert Parity Error in AXI Slave Read data path Parity Checker (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_DPP_CONTROL_Bits;

/** \brief MTL DPP ECC EIC */
typedef struct _Ifx_GETH_PORT_MTL_DPP_ECC_EIC_Bits
{
    __IO Ifx_UReg_32Bit BLEI:8;            /**< \brief [7:0] Bit Location of error injection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit EIM:1;             /**< \brief [16:16] Error Injection Mode  - 0: Indicates error injection on data  - 1: Indicates error injection on ECC/Parity bits (Check that the address error injection mode is disabled) (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_DPP_ECC_EIC_Bits;

/** \brief MTL ECC Control */
typedef struct _Ifx_GETH_PORT_MTL_ECC_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit MTXED:1;           /**< \brief [0:0] MTL Tx FIFO ECC Checker Disable  - 1: Disables the ECC Checker for MTL Tx FIFO memory (rw) */
    __IO Ifx_UReg_32Bit MRXED:1;           /**< \brief [1:1] MTL Rx FIFO ECC Checker Disable  - 1: Disables the ECC Checker for MTL Rx FIFO memory (rw) */
    __IO Ifx_UReg_32Bit MGCLED:1;          /**< \brief [2:2] MTL GCL ECC Checker Disable  - 1: Disables the ECC Checker for GCL memory (rw) */
    __IO Ifx_UReg_32Bit MRXPED:1;          /**< \brief [3:3] MTL Rx Parser ECC Checker Disable  - 1: Disables the ECC Checker for Rx Parser memory (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit DESCED:1;          /**< \brief [5:5] DCACHE memory ECC Checker Disable  - 1: Disables the ECC Checker for DCACHE memory in DMA (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit MEEAO:1;           /**< \brief [8:8] MAC/MTL ECC Error Address Status Override (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_GETH_PORT_MTL_ECC_CONTROL_Bits;

/** \brief MTL ECC Err Addr Status */
typedef struct _Ifx_GETH_PORT_MTL_ECC_ERR_ADDR_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ECEAS:16;          /**< \brief [15:0] MAC/MTL ECC Correctable Error Address Status (r) */
    __I  Ifx_UReg_32Bit EUEAS:16;          /**< \brief [31:16] MAC/MTL ECC Uncorrectable Error Address Status (r) */
} Ifx_GETH_PORT_MTL_ECC_ERR_ADDR_STATUS_Bits;

/** \brief MTL ECC Err Cntr Status */
typedef struct _Ifx_GETH_PORT_MTL_ECC_ERR_CNTR_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ECECS:8;           /**< \brief [7:0] MAC/MTL ECC Correctable Error Counter Status (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit EUECS:4;           /**< \brief [19:16] MAC/MTL ECC Uncorrectable Error Counter Status (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_MTL_ECC_ERR_CNTR_STATUS_Bits;

/** \brief MTL ECC Err Sts Rctl */
typedef struct _Ifx_GETH_PORT_MTL_ECC_ERR_STS_RCTL_Bits
{
    __IO Ifx_UReg_32Bit EESRE:1;           /**< \brief [0:0] MAC/MTL ECC Error Status Read Enable (rw) */
    __IO Ifx_UReg_32Bit EMS:3;             /**< \brief [3:1] MAC/MTL ECC Memory Selection (rw) */
    __IO Ifx_UReg_32Bit CCES:1;            /**< \brief [4:4] Clear Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit CUES:1;            /**< \brief [5:5] Clear Uncorrectable Error Status (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_ECC_ERR_STS_RCTL_Bits;

/** \brief MTL ECC Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_ECC_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXCEIE:1;          /**< \brief [0:0] Tx memory Correctable Error Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit RXCEIE:1;          /**< \brief [4:4] Rx memory Correctable Error Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit GCEIE:1;           /**< \brief [8:8] GCL memory Correctable Error Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __IO Ifx_UReg_32Bit RPCEIE:1;          /**< \brief [12:12] Rx Parser memory Correctable Error Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_GETH_PORT_MTL_ECC_INTERRUPT_ENABLE_Bits;

/** \brief MTL ECC Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_ECC_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXCES:1;           /**< \brief [0:0] MTL Tx memory Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit TXAMS:1;           /**< \brief [1:1] MTL Tx memory Address Mismatch Status (rw) */
    __IO Ifx_UReg_32Bit TXUES:1;           /**< \brief [2:2] MTL Tx memory Uncorrectable Error Status (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit RXCES:1;           /**< \brief [4:4] MTL Rx memory Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit RXAMS:1;           /**< \brief [5:5] MTL Rx memory Address Mismatch Status (rw) */
    __IO Ifx_UReg_32Bit RXUES:1;           /**< \brief [6:6] MTL Rx memory Uncorrectable Error Status (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit GCES:1;            /**< \brief [8:8] MTL EST GCL memory Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit GAMS:1;            /**< \brief [9:9] MTL EST GCL memory Address Mismatch Status (rw) */
    __IO Ifx_UReg_32Bit GUES:1;            /**< \brief [10:10] MTL EST GCL memory Uncorrectable Error Status (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit RPCES:1;           /**< \brief [12:12] MTL Rx Parser memory Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit RPAMS:1;           /**< \brief [13:13] MTL Rx Parser memory Address Mismatch Status (rw) */
    __IO Ifx_UReg_32Bit RPUES:1;           /**< \brief [14:14] Rx Parser memory Uncorrectable Error Status  - 1: Indicates that an uncorrectable error is detected at Rx Parser memory interface (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SCES:1;            /**< \brief [16:16] MTL SGF GCL memory Correctable Error Status (rw) */
    __IO Ifx_UReg_32Bit SAMS:1;            /**< \brief [17:17] MTL SGF GCL memory Address Mismatch Status (rw) */
    __IO Ifx_UReg_32Bit SUES:1;            /**< \brief [18:18] MTL SGF GCL memory Uncorrectable Error Status (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_GETH_PORT_MTL_ECC_INTERRUPT_STATUS_Bits;

/** \brief MTL EST Control */
typedef struct _Ifx_GETH_PORT_MTL_EST_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit EEST:1;            /**< \brief [0:0] Enable EST (rw) */
    __IO Ifx_UReg_32Bit SSWL:1;            /**< \brief [1:1] Switch to software owned list (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit QHLBF:1;           /**< \brief [3:3] Quick Assertion of HLBF Error (rw) */
    __IO Ifx_UReg_32Bit DDBF:1;            /**< \brief [4:4] Do not Drop frames due to HLBF error (rw) */
    __IO Ifx_UReg_32Bit DFBS:1;            /**< \brief [5:5] Drop Frames causing Scheduling Error (rw) */
    __IO Ifx_UReg_32Bit LCSE:2;            /**< \brief [7:6] Loop Count to report Scheduling Error (rw) */
    __IO Ifx_UReg_32Bit TILS:3;            /**< \brief [10:8] Time Interval Left Shift Amount (rw) */
    __IO Ifx_UReg_32Bit CTOV:12;           /**< \brief [22:11] Current Time Offset Value (rw) */
    __IO Ifx_UReg_32Bit PTOV:9;            /**< \brief [31:23] PTP Time Offset Value (rw) */
} Ifx_GETH_PORT_MTL_EST_CONTROL_Bits;

/** \brief MTL EST Frm Size Capture */
typedef struct _Ifx_GETH_PORT_MTL_EST_FRM_SIZE_CAPTURE_Bits
{
    __I  Ifx_UReg_32Bit HBFS:15;           /**< \brief [14:0] Frame Size of HLBF (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit HBFQ:3;            /**< \brief [18:16] Transmit Queue Number of HLBF (r) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_GETH_PORT_MTL_EST_FRM_SIZE_CAPTURE_Bits;

/** \brief MTL EST Frm Size Error */
typedef struct _Ifx_GETH_PORT_MTL_EST_FRM_SIZE_ERROR_Bits
{
    __IO Ifx_UReg_32Bit FETN:8;            /**< \brief [7:0] Frame Size Error TC Number (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_MTL_EST_FRM_SIZE_ERROR_Bits;

/** \brief MTL EST Intr Enable */
typedef struct _Ifx_GETH_PORT_MTL_EST_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit IECC:1;            /**< \brief [0:0] Interrupt Enable for Switch List (rw) */
    __IO Ifx_UReg_32Bit IEBE:1;            /**< \brief [1:1] Interrupt Enable for BTR Error (rw) */
    __IO Ifx_UReg_32Bit IEHF:1;            /**< \brief [2:2] Interrupt Enable for HLBF (rw) */
    __IO Ifx_UReg_32Bit IEHS:1;            /**< \brief [3:3] Interrupt Enable for HLBS (rw) */
    __IO Ifx_UReg_32Bit CGCE:1;            /**< \brief [4:4] Interrupt Enable for CGCE (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_GETH_PORT_MTL_EST_INTR_ENABLE_Bits;

/** \brief MTL EST Overhead */
typedef struct _Ifx_GETH_PORT_MTL_EST_OVERHEAD_Bits
{
    __IO Ifx_UReg_32Bit OVHD:8;            /**< \brief [7:0] Overhead Bytes Value (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit ABYT:5;            /**< \brief [20:16] Bytes transmitted in 1 application clock (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_EST_OVERHEAD_Bits;

/** \brief MTL EST Sch Error */
typedef struct _Ifx_GETH_PORT_MTL_EST_SCH_ERROR_Bits
{
    __IO Ifx_UReg_32Bit SETN:8;            /**< \brief [7:0] Schedule Error TC Number (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_MTL_EST_SCH_ERROR_Bits;

/** \brief MTL EST Status */
typedef struct _Ifx_GETH_PORT_MTL_EST_STATUS_Bits
{
    __IO Ifx_UReg_32Bit SWLC:1;            /**< \brief [0:0] Switch to Software Owned List Complete (rw) */
    __IO Ifx_UReg_32Bit BTRE:1;            /**< \brief [1:1] BTR Error (rw) */
    __I  Ifx_UReg_32Bit HLBF:1;            /**< \brief [2:2] Head-Of-Line Blocking due to Frame Size (r) */
    __I  Ifx_UReg_32Bit HLBS:1;            /**< \brief [3:3] Head-Of-Line Blocking due to Scheduling (r) */
    __IO Ifx_UReg_32Bit CGCE:1;            /**< \brief [4:4] Constant Gate Control Error (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [6:5] \internal Reserved */
    __I  Ifx_UReg_32Bit SWOL:1;            /**< \brief [7:7] Software Owned List (r) */
    __I  Ifx_UReg_32Bit BTRL:8;            /**< \brief [15:8] BTR Loop Count (r) */
    __I  Ifx_UReg_32Bit CGSN:4;            /**< \brief [19:16] Current GCL Slot Number (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_MTL_EST_STATUS_Bits;

/** \brief MTL FIFO Debug Data */
typedef struct _Ifx_GETH_PORT_MTL_FIFO_DEBUG_DATA_Bits
{
    __IO Ifx_UReg_32Bit FDBGDATA:32;       /**< \brief [31:0] FIFO Debug Data (rw) */
} Ifx_GETH_PORT_MTL_FIFO_DEBUG_DATA_Bits;

/** \brief MTL FPE Advance */
typedef struct _Ifx_GETH_PORT_MTL_FPE_ADVANCE_Bits
{
    __IO Ifx_UReg_32Bit HADV:16;           /**< \brief [15:0] Hold Advance (rw) */
    __IO Ifx_UReg_32Bit RADV:16;           /**< \brief [31:16] Release Advance (rw) */
} Ifx_GETH_PORT_MTL_FPE_ADVANCE_Bits;

/** \brief MTL FPE CTRL STS */
typedef struct _Ifx_GETH_PORT_MTL_FPE_CTRL_STS_Bits
{
    __IO Ifx_UReg_32Bit AFSZ:2;            /**< \brief [1:0] Additional Fragment Size (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [6:2] \internal Reserved */
    __IO Ifx_UReg_32Bit LBHT:1;            /**< \brief [7:7] Level Based Hold Transition (rw) */
    __IO Ifx_UReg_32Bit PEC:8;             /**< \brief [15:8] Preemption Classification (rw) */
    __IO Ifx_UReg_32Bit PHRSC:1;           /**< \brief [16:16] Preemption MAC Hold/Release Sideband Control Select  - 1: Indicates that Set-Hold-and-Release-MAC operation is controlled by Sideband Signal sbd_pmac_hold_i (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [27:17] \internal Reserved */
    __I  Ifx_UReg_32Bit HRS:1;             /**< \brief [28:28] Hold/Release Status  - 1: Indicates a Set-and-Hold-MAC operation was executed and the pMAC is in Hold State (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_FPE_CTRL_STS_Bits;

/** \brief MTL GCL Control */
typedef struct _Ifx_GETH_PORT_MTL_GCL_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit SRWO:1;            /**< \brief [0:0] Start Read/Write Op  - When this field is set, indicates that a Read/Write operation has started and is in progress (rw) */
    __IO Ifx_UReg_32Bit R1W0:1;            /**< \brief [1:1] Read 1, Write 0:  - When set to 1: Read Operation   - When set to 0: Write Operation (rw) */
    __IO Ifx_UReg_32Bit GCRR:1;            /**< \brief [2:2] Gate Control Related Registers (rw) */
    __IO Ifx_UReg_32Bit GCLS:1;            /**< \brief [3:3] Gate Control/Address Select (rw) */
    __IO Ifx_UReg_32Bit DBGM:1;            /**< \brief [4:4] Debug Mode (rw) */
    __IO Ifx_UReg_32Bit DBGB:1;            /**< \brief [5:5] Debug Mode Bank Select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:8;            /**< \brief [15:8] Gate Control List Address: (GCLA when GCRR is 0) (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [20:16] \internal Reserved */
    __IO Ifx_UReg_32Bit GCLEIEE:1;         /**< \brief [21:21] GCL ECC Inject Error Enable (rw) */
    __IO Ifx_UReg_32Bit GCLEIAEE:1;        /**< \brief [22:22] GCL ECC Inject Address Error (rw) */
    __IO Ifx_UReg_32Bit GCLEIEC:1;         /**< \brief [23:23] ECC Inject Error Control for GCL Memory (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_PORT_MTL_GCL_CONTROL_Bits;

/** \brief MTL GCL Data */
typedef struct _Ifx_GETH_PORT_MTL_GCL_DATA_Bits
{
    __IO Ifx_UReg_32Bit GCD:32;            /**< \brief [31:0] Gate Control Data (rw) */
} Ifx_GETH_PORT_MTL_GCL_DATA_Bits;

/** \brief MTL Indirect Acc Control Status */
typedef struct _Ifx_GETH_PORT_MTL_INDIRECT_ACC_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ADDR:10;           /**< \brief [9:0] Indirect Access Write/Read Address (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit WRRDN:1;           /**< \brief [16:16] Read Write Control (rw) */
    __IO Ifx_UReg_32Bit CRWSEL:1;          /**< \brief [17:17] Continuous Read/Write Mode Select (rw) */
    __IO Ifx_UReg_32Bit CRWEN:1;           /**< \brief [18:18] Continuous Read/Write Mode Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit RXPEIEE:1;         /**< \brief [20:20] ECC Inject Error Enable (rw) */
    __IO Ifx_UReg_32Bit RXPEIEC:2;         /**< \brief [22:21] ECC Inject Error Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit ACCSEL:2;          /**< \brief [25:24] Indirect Access Selection (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [30:26] \internal Reserved */
    __IO Ifx_UReg_32Bit STARTBUSY:1;       /**< \brief [31:31] Indirect Access Busy (rw) */
} Ifx_GETH_PORT_MTL_INDIRECT_ACC_CONTROL_STATUS_Bits;

/** \brief MTL Indirect Acc Data */
typedef struct _Ifx_GETH_PORT_MTL_INDIRECT_ACC_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Indirect Access Write/Read Data (rw) */
} Ifx_GETH_PORT_MTL_INDIRECT_ACC_DATA_Bits;

/** \brief MTL Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit Q0IS:1;            /**< \brief [0:0] Traffic Class/Queue 0 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q1IS:1;            /**< \brief [1:1] Traffic Class/Queue 1 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q2IS:1;            /**< \brief [2:2] Traffic Class/Queue 2 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q3IS:1;            /**< \brief [3:3] Traffic Class/Queue 3 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q4IS:1;            /**< \brief [4:4] Traffic Class/Queue 4 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q5IS:1;            /**< \brief [5:5] Traffic Class/Queue 5 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q6IS:1;            /**< \brief [6:6] Traffic Class/Queue 6 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit Q7IS:1;            /**< \brief [7:7] Traffic Class/Queue 7 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit MACIS:1;           /**< \brief [16:16] MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DBGIS:1;           /**< \brief [17:17] Debug Interrupt Status (r) */
    __I  Ifx_UReg_32Bit ESTIS:1;           /**< \brief [18:18] EST (TAS- IEEE 802.1Qbv) Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TINS:1;            /**< \brief [19:19] TBS Interrupt Status (r) */
    __I  Ifx_UReg_32Bit SGFIS:1;           /**< \brief [20:20] SGF Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [22:21] \internal Reserved */
    __I  Ifx_UReg_32Bit MTLPIS:1;          /**< \brief [23:23] MTL Rx-Parser Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_GETH_PORT_MTL_INTERRUPT_STATUS_Bits;

/** \brief MTL FRP ACNTR0 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR0_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR0_Bits;

/** \brief MTL FRP ACNTR1 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR1_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR1_Bits;

/** \brief MTL FRP ACNTR2 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR2_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR2_Bits;

/** \brief MTL FRP ACNTR3 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR3_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR3_Bits;

/** \brief MTL FRP ACNTR4 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR4_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR4_Bits;

/** \brief MTL FRP ACNTR5 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR5_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR5_Bits;

/** \brief MTL FRP ACNTR6 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR6_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR6_Bits;

/** \brief MTL FRP ACNTR7 */
typedef struct _Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR7_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx-Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx-Parser Accept Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR7_Bits;

/** \brief MTL Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_OPERATION_MODE_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RAA:1;             /**< \brief [2:2] Receive Arbitration Algorithm (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [4:3] \internal Reserved */
    __IO Ifx_UReg_32Bit ETSALG:2;          /**< \brief [6:5] ETS Algorithm (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [14:7] \internal Reserved */
    __IO Ifx_UReg_32Bit FRPE:1;            /**< \brief [15:15] Flexible Receive Parser Enable (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_OPERATION_MODE_Bits;

/** \brief MTL RXP Bypass Cnt */
typedef struct _Ifx_GETH_PORT_MTL_RXP_BYPASS_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPBC:31;          /**< \brief [30:0] Rx-Parser Bypass Counter (r) */
    __I  Ifx_UReg_32Bit RXPBCOF:1;         /**< \brief [31:31] Rx-Parser Bypass Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_RXP_BYPASS_CNT_Bits;

/** \brief MTL RXP Control Status */
typedef struct _Ifx_GETH_PORT_MTL_RXP_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit NVE:8;             /**< \brief [7:0] Number Valid Entries in the Instruction table (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [10:8] \internal Reserved */
    __IO Ifx_UReg_32Bit OKI_DME:1;         /**< \brief [11:11] "Instruction's OK Index Dual Meaning Enable" (rw) */
    __IO Ifx_UReg_32Bit FPE_RCH:3;         /**< \brief [14:12] Frame Preemption Residue Receive DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit NPE:8;             /**< \brief [23:16] Number of Parsable Entries in the Instruction Table (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __I  Ifx_UReg_32Bit PIPE:3;            /**< \brief [30:28] Number of Parallel Instruction Processor Engines (r) */
    __I  Ifx_UReg_32Bit RXPI:1;            /**< \brief [31:31] Rx Parser is Active (r) */
} Ifx_GETH_PORT_MTL_RXP_CONTROL_STATUS_Bits;

/** \brief MTL RXP Drop Cnt */
typedef struct _Ifx_GETH_PORT_MTL_RXP_DROP_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPDC:31;          /**< \brief [30:0] Rx Parser Packet Drop Count (r) */
    __I  Ifx_UReg_32Bit RXPDCOVF:1;        /**< \brief [31:31] Rx Parser Packet Drop Counter Overflow (r) */
} Ifx_GETH_PORT_MTL_RXP_DROP_CNT_Bits;

/** \brief MTL RXP Error Cnt */
typedef struct _Ifx_GETH_PORT_MTL_RXP_ERROR_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPEC:31;          /**< \brief [30:0] Rx Parser Error count (r) */
    __I  Ifx_UReg_32Bit RXPECOVF:1;        /**< \brief [31:31] Rx Parser Error Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_RXP_ERROR_CNT_Bits;

/** \brief MTL RXP Interrupt Control Status */
typedef struct _Ifx_GETH_PORT_MTL_RXP_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit NVEOVIS:1;         /**< \brief [0:0] Number of Valid Entries Overflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit NPEOVIS:1;         /**< \brief [1:1] Number of Parsable Entries Overflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit FOOVIS:1;          /**< \brief [2:2] Frame Offset Overflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit PDRFIS:1;          /**< \brief [3:3] Packet Dropped due to RF Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit NVEOVIE:1;         /**< \brief [16:16] Number of Valid Entries Overflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit NPEOVIE:1;         /**< \brief [17:17] Number of Parsable Entries Overflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit FOOVIE:1;          /**< \brief [18:18] Frame Offset Overflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit PDRFIE:1;          /**< \brief [19:19] Packet Drop due to RF Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_GETH_PORT_MTL_RXP_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL RxQ DMA Map0 */
typedef struct _Ifx_GETH_PORT_MTL_RXQ_DMA_MAP0_Bits
{
    __IO Ifx_UReg_32Bit Q0MDMACH:3;        /**< \brief [2:0] Receive Queue 0 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [6:3] \internal Reserved */
    __IO Ifx_UReg_32Bit Q0DDMACH:1;        /**< \brief [7:7] Receive Queue 0 Enabled for Dynamic DMA Channel Selection (rw) */
    __IO Ifx_UReg_32Bit Q1MDMACH:3;        /**< \brief [10:8] Receive Queue 1 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __IO Ifx_UReg_32Bit Q1DDMACH:1;        /**< \brief [15:15] Receive Queue 1 Enabled for Dynamic DMA Channel Selection (rw) */
    __IO Ifx_UReg_32Bit Q2MDMACH:3;        /**< \brief [18:16] Receive Queue 2 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [22:19] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2DDMACH:1;        /**< \brief [23:23] Receive Queue 2 Enabled for Dynamic MA Channel Selection (rw) */
    __IO Ifx_UReg_32Bit Q3MDMACH:3;        /**< \brief [26:24] Receive Queue 3 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit Q3DDMACH:1;        /**< \brief [31:31] Receive Queue 3 Enabled for Dynamic DMA Channel Selection (rw) */
} Ifx_GETH_PORT_MTL_RXQ_DMA_MAP0_Bits;

/** \brief MTL RxQ DMA Map1 */
typedef struct _Ifx_GETH_PORT_MTL_RXQ_DMA_MAP1_Bits
{
    __IO Ifx_UReg_32Bit Q4MDMACH:3;        /**< \brief [2:0] Receive Queue 4 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [6:3] \internal Reserved */
    __IO Ifx_UReg_32Bit Q4DDMACH:1;        /**< \brief [7:7] Receive Queue 4 Enabled for Dynamic DMA Channel Selection (rw) */
    __IO Ifx_UReg_32Bit Q5MDMACH:3;        /**< \brief [10:8] Receive Queue 5 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __IO Ifx_UReg_32Bit Q5DDMACH:1;        /**< \brief [15:15] Receive Queue 5 Enabled for Dynamic DMA Channel Selection (rw) */
    __IO Ifx_UReg_32Bit Q6MDMACH:3;        /**< \brief [18:16] Receive Queue 6 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [22:19] \internal Reserved */
    __IO Ifx_UReg_32Bit Q6DDMACH:1;        /**< \brief [23:23] Receive Queue 6 Enabled for Dynamic MA Channel Selection (rw) */
    __IO Ifx_UReg_32Bit Q7MDMACH:3;        /**< \brief [26:24] Receive Queue 7 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit Q7DDMACH:1;        /**< \brief [31:31] Receive Queue 7 Enabled for Dynamic DMA Channel Selection (rw) */
} Ifx_GETH_PORT_MTL_RXQ_DMA_MAP1_Bits;

/** \brief MTL Safety Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_SAFETY_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit MECIS:1;           /**< \brief [0:0] MAC/MTL ECC Correctable error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MEUIS:1;           /**< \brief [1:1] MAC/MTL ECC Uncorrectable error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [30:2] \internal Reserved */
    __I  Ifx_UReg_32Bit MCSIS:1;           /**< \brief [31:31] MAC Safety Unrecoverable Interrupt Status (r) */
} Ifx_GETH_PORT_MTL_SAFETY_INTERRUPT_STATUS_Bits;

/** \brief MTL SGF Control */
typedef struct _Ifx_GETH_PORT_MTL_SGF_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit ESGF:1;            /**< \brief [0:0] Enable Stream-Gate Filtering  - 0: Indicates that the gate control list processing is halted and all gates are assumed to be in Open state (rw) */
    __IO Ifx_UReg_32Bit SSWL:1;            /**< \brief [1:1] Switch to software owned list  - 1: Indicates that the software has programmed the list that it currently owns (SWOL) and the DWC_xgmac must switch to the new list based on the new BTR (rw) */
    __IO Ifx_UReg_32Bit SCTOV:1;           /**< \brief [2:2] Sign bit of SGF CTOV (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit TILS:3;            /**< \brief [10:8] Time Interval Left Shift Amount (rw) */
    __IO Ifx_UReg_32Bit CTOV:12;           /**< \brief [22:11] Current Time Offset Value (rw) */
    __IO Ifx_UReg_32Bit PTOV:9;            /**< \brief [31:23] PTP Time Offset Value (rw) */
} Ifx_GETH_PORT_MTL_SGF_CONTROL_Bits;

/** \brief MTL SGF Extended Control */
typedef struct _Ifx_GETH_PORT_MTL_SGF_EXTENDED_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit FFPFF:1;           /**< \brief [0:0] Forward Frame due to SGF filter failed  - 1: Flexible Receive Parser forwards the frame to the residual DMA Channel if stream-gate filter fails (rw) */
    __IO Ifx_UReg_32Bit ESPF:1;            /**< \brief [1:1] Enable Stream-Gate filtering of Preemption Frames   - 1: Stream-Gate filtering is enabled for preemption frames (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_GETH_PORT_MTL_SGF_EXTENDED_CONTROL_Bits;

/** \brief MTL SGF Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_SGF_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit IECC:1;            /**< \brief [0:0] Interrupt Enable for Switch List  - 1: Generates interrupt when the configuration change is successful and DWC_xgmac has switched to the new list (rw) */
    __IO Ifx_UReg_32Bit IEBE:1;            /**< \brief [1:1] Interrupt Enable for BTR Error  - 1: Generates interrupt when the BTR Error occurs (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CGCE:1;            /**< \brief [4:4] Interrupt Enable for CGCE  - 1: Generates interrupt when the Constant Gate Control Error occurs (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_GETH_PORT_MTL_SGF_INTR_ENABLE_Bits;

/** \brief MTL SGF Status */
typedef struct _Ifx_GETH_PORT_MTL_SGF_STATUS_Bits
{
    __IO Ifx_UReg_32Bit SWLC:1;            /**< \brief [0:0] Switch to Software Owned List Complete (rw) */
    __IO Ifx_UReg_32Bit BTRE:1;            /**< \brief [1:1] BTR Error (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CGCE:1;            /**< \brief [4:4] Constant Gate Control Error (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [6:5] \internal Reserved */
    __I  Ifx_UReg_32Bit SWOL:1;            /**< \brief [7:7] Software Owned List (r) */
    __I  Ifx_UReg_32Bit BTRL:8;            /**< \brief [15:8] BTR Loop Count (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_SGF_STATUS_Bits;

/** \brief MTL TBS CTRL */
typedef struct _Ifx_GETH_PORT_MTL_TBS_CTRL_Bits
{
    __IO Ifx_UReg_32Bit ESTM:1;            /**< \brief [0:0] EST offset Mode (rw) */
    __IO Ifx_UReg_32Bit LEOV:1;            /**< \brief [1:1] Launch Expiry Offset Valid (rw) */
    __IO Ifx_UReg_32Bit TIEN:1;            /**< \brief [2:2] TBS Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit LEGOS:3;           /**< \brief [6:4] Launch Expiry GSN Offset (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit LEOS:24;           /**< \brief [31:8] Launch Expiry Offset (rw) */
} Ifx_GETH_PORT_MTL_TBS_CTRL_Bits;

/** \brief MTL TBS STATS */
typedef struct _Ifx_GETH_PORT_MTL_TBS_STATS_Bits
{
    __IO Ifx_UReg_32Bit EDQN:8;            /**< \brief [7:0] Expiry drop Queue number (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_GETH_PORT_MTL_TBS_STATS_Bits;

/** \brief MTL Q0 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q0 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ0 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_RXQ0_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_CONTROL_Bits;

/** \brief MTL RxQ0 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_RXQ0_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_DEBUG_Bits;

/** \brief MTL RxQ0 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_RXQ0_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_FLOW_CONTROL_Bits;

/** \brief MTL RxQ0 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_RXQ0_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ0 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_RXQ0_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_OPERATION_MODE_Bits;

/** \brief MTL TC0 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_TC0_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_TC0_ETS_CONTROL_Bits;

/** \brief MTL TC0 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_TC0_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_TC0_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ0 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_TXQ0_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_TXQ0_DEBUG_Bits;

/** \brief MTL TxQ0 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_TXQ0_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_TXQ0_OPERATION_MODE_Bits;

/** \brief MTL TxQ0 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ0_TXQ0_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ0_TXQ0_UNDERFLOW_Bits;

/** \brief MTL Q1 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q1 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ1 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_RXQ1_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_CONTROL_Bits;

/** \brief MTL RxQ1 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_RXQ1_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_DEBUG_Bits;

/** \brief MTL RxQ1 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_RXQ1_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_FLOW_CONTROL_Bits;

/** \brief MTL RxQ1 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_RXQ1_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ1 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_RXQ1_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_OPERATION_MODE_Bits;

/** \brief MTL TC1 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_TC1_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_TC1_ETS_CONTROL_Bits;

/** \brief MTL TC1 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_TC1_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_TC1_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ1 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_TXQ1_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_TXQ1_DEBUG_Bits;

/** \brief MTL TxQ1 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_TXQ1_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_TXQ1_OPERATION_MODE_Bits;

/** \brief MTL TxQ1 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ1_TXQ1_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ1_TXQ1_UNDERFLOW_Bits;

/** \brief MTL Q2 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q2 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ2 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_RXQ2_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_CONTROL_Bits;

/** \brief MTL RxQ2 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_RXQ2_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_DEBUG_Bits;

/** \brief MTL RxQ2 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_RXQ2_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_FLOW_CONTROL_Bits;

/** \brief MTL RxQ2 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_RXQ2_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ2 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_RXQ2_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_OPERATION_MODE_Bits;

/** \brief MTL TC2 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_TC2_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_TC2_ETS_CONTROL_Bits;

/** \brief MTL TC2 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_TC2_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_TC2_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ2 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_TXQ2_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_TXQ2_DEBUG_Bits;

/** \brief MTL TxQ2 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_TXQ2_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_TXQ2_OPERATION_MODE_Bits;

/** \brief MTL TxQ2 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ2_TXQ2_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ2_TXQ2_UNDERFLOW_Bits;

/** \brief MTL Q3 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q3 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ3 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_RXQ3_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_CONTROL_Bits;

/** \brief MTL RxQ3 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_RXQ3_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_DEBUG_Bits;

/** \brief MTL RxQ3 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_RXQ3_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_FLOW_CONTROL_Bits;

/** \brief MTL RxQ3 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_RXQ3_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ3 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_RXQ3_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_OPERATION_MODE_Bits;

/** \brief MTL TC3 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_TC3_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_TC3_ETS_CONTROL_Bits;

/** \brief MTL TC3 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_TC3_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_TC3_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ3 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_TXQ3_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_TXQ3_DEBUG_Bits;

/** \brief MTL TxQ3 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_TXQ3_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_TXQ3_OPERATION_MODE_Bits;

/** \brief MTL TxQ3 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ3_TXQ3_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ3_TXQ3_UNDERFLOW_Bits;

/** \brief MTL Q4 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q4 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ4 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_RXQ4_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_CONTROL_Bits;

/** \brief MTL RxQ4 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_RXQ4_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_DEBUG_Bits;

/** \brief MTL RxQ4 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_RXQ4_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_FLOW_CONTROL_Bits;

/** \brief MTL RxQ4 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_RXQ4_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ4 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_RXQ4_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_OPERATION_MODE_Bits;

/** \brief MTL TC4 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_TC4_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_TC4_ETS_CONTROL_Bits;

/** \brief MTL TC4 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_TC4_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_TC4_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ4 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_TXQ4_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_TXQ4_DEBUG_Bits;

/** \brief MTL TxQ4 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_TXQ4_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_TXQ4_OPERATION_MODE_Bits;

/** \brief MTL TxQ4 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ4_TXQ4_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ4_TXQ4_UNDERFLOW_Bits;

/** \brief MTL Q5 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q5 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ5 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_RXQ5_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_CONTROL_Bits;

/** \brief MTL RxQ5 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_RXQ5_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_DEBUG_Bits;

/** \brief MTL RxQ5 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_RXQ5_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_FLOW_CONTROL_Bits;

/** \brief MTL RxQ5 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_RXQ5_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ5 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_RXQ5_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_OPERATION_MODE_Bits;

/** \brief MTL TC5 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TC5_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_ETS_CONTROL_Bits;

/** \brief MTL TC5 HiCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TC5_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_HICREDIT_Bits;

/** \brief MTL TC5 LoCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TC5_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_LOCREDIT_Bits;

/** \brief MTL TC5 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TC5_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_QUANTUM_WEIGHT_Bits;

/** \brief MTL TC5 SendSlopeCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TC5_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:16;            /**< \brief [15:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ5 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TXQ5_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TXQ5_DEBUG_Bits;

/** \brief MTL TxQ5 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TXQ5_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TXQ5_OPERATION_MODE_Bits;

/** \brief MTL TxQ5 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ5_TXQ5_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ5_TXQ5_UNDERFLOW_Bits;

/** \brief MTL Q6 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q6 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ6 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_RXQ6_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_CONTROL_Bits;

/** \brief MTL RxQ6 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_RXQ6_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_DEBUG_Bits;

/** \brief MTL RxQ6 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_RXQ6_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_FLOW_CONTROL_Bits;

/** \brief MTL RxQ6 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_RXQ6_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ6 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_RXQ6_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_OPERATION_MODE_Bits;

/** \brief MTL TC6 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TC6_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_ETS_CONTROL_Bits;

/** \brief MTL TC6 HiCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TC6_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_HICREDIT_Bits;

/** \brief MTL TC6 LoCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TC6_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_LOCREDIT_Bits;

/** \brief MTL TC6 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TC6_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_QUANTUM_WEIGHT_Bits;

/** \brief MTL TC6 SendSlopeCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TC6_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:16;            /**< \brief [15:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ6 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TXQ6_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TXQ6_DEBUG_Bits;

/** \brief MTL TxQ6 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TXQ6_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TXQ6_OPERATION_MODE_Bits;

/** \brief MTL TxQ6 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ6_TXQ6_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ6_TXQ6_UNDERFLOW_Bits;

/** \brief MTL Q7 Interrupt Enable */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [0:0] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [16:16] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_ENABLE_Bits;

/** \brief MTL Q7 Interrupt Status */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_STATUS_Bits;

/** \brief MTL RxQ7 Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_RXQ7_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_PKT_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration Control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_CONTROL_Bits;

/** \brief MTL RxQ7 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_RXQ7_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_DEBUG_Bits;

/** \brief MTL RxQ7 Flow Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_RXQ7_FLOW_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RFA:6;             /**< \brief [6:1] Threshold for activating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [16:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RFD:6;             /**< \brief [22:17] Threshold for deactivating Flow Control (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_FLOW_CONTROL_Bits;

/** \brief MTL RxQ7 Missed Pkt Overflow Cnt */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_RXQ7_MISSED_PKT_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [15:15] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [31:31] Missed Packet Counter Overflow Bit (r) */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_MISSED_PKT_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ7 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_RXQ7_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit FUF:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEF:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RQS:7;             /**< \brief [22:16] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_OPERATION_MODE_Bits;

/** \brief MTL TC7 ETS Control */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TC7_ETS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSA:2;             /**< \brief [1:0] Transmission Selection Algorithm (rw) */
    __I  Ifx_UReg_32Bit CBSEN:1;           /**< \brief [2:2] Credit Based Shaper Enable (r) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_ETS_CONTROL_Bits;

/** \brief MTL TC7 HiCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TC7_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_HICREDIT_Bits;

/** \brief MTL TC7 LoCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TC7_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_LOCREDIT_Bits;

/** \brief MTL TC7 Quantum Weight */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TC7_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit QW:21;             /**< \brief [20:0] idleSlopeCredit, Quantum or Weights (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_QUANTUM_WEIGHT_Bits;

/** \brief MTL TC7 SendSlopeCredit */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TC7_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:16;            /**< \brief [15:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ7 Debug */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TXQ7_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TCPAUSED:1;        /**< \brief [0:0] Traffic Class in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TRCPSTS:1;         /**< \brief [5:5] MTL TRC Pending Status (r) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TXQ7_DEBUG_Bits;

/** \brief MTL TxQ7 Operation Mode */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TXQ7_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit Q2TCMAP:3;         /**< \brief [10:8] Queue to Traffic Class Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit TQS:7;             /**< \brief [22:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TXQ7_OPERATION_MODE_Bits;

/** \brief MTL TxQ7 Underflow */
typedef struct _Ifx_GETH_PORT_MTL_TCQ7_TXQ7_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFPKTCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [15:15] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_GETH_PORT_MTL_TCQ7_TXQ7_UNDERFLOW_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_GETH_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_GETH_PROT_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_GETH_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for global module reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for global module reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for global module reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for global module reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_GETH_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel reset status clear - STATCLR (w) */
} Ifx_GETH_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_GETH_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_GETH_RST_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_geth_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_GETH_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_GETH_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ACCEN_RDB_SRI_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_ACCEN_RDB_SRI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_GETH_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_GETH_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ACCEN_WRB_SRI_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_ACCEN_WRB_SRI;

/** \brief AXI Slave DPP Error Address Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_AXI_SLAVE_DPP_ERROR_ADDRESS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_AXI_SLAVE_DPP_ERROR_ADDRESS_STATUS;

/** \brief CSR SW Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_CSR_SW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_CSR_SW_CONTROL;

/** \brief Debug Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_DEBUG_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_DEBUG_CONTROL;

/** \brief DMA Port Selection   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_DMA_PORT_SELECTION_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_DMA_PORT_SELECTION;

/** \brief DPP Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_DPP_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_DPP_CONTROL;

/** \brief DPP ECC EIC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_DPP_ECC_ERROR_INJECTION_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_DPP_ECC_ERROR_INJECTION_CONTROL;

/** \brief DPP FSM Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_DPP_FSM_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_DPP_FSM_INTERRUPT_STATUS;

/** \brief ECC Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_ECC_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_ECC_CONTROL;

/** \brief ECC Err Addr Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_ECC_ERROR_ADDRESS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_ECC_ERROR_ADDRESS_STATUS;

/** \brief ECC Err Cntr Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_ECC_ERROR_COUNT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_ECC_ERROR_COUNT_STATUS;

/** \brief ECC Err Sts RCtl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_ECC_ERROR_STATUS_CAPTURE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_ECC_ERROR_STATUS_CAPTURE_CONTROL;

/** \brief Forward Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_FORWARD_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_FORWARD_CONTROL;

/** \brief FSM ACT Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_FSM_ACT_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_FSM_ACT_TIMER;

/** \brief FSM Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_FSM_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_FSM_CONTROL;

/** \brief Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_INTERRUPT_STATUS;

/** \brief PMT Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_PMT_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_PMT_CONTROL;

/** \brief Port 0 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_PORT_0_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_PORT_0_CONTROL;

/** \brief Port 1 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_PORT_1_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_PORT_1_CONTROL;

/** \brief Port Flush and Loopback Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_PORT_FLUSH_AND_LOOPBACK_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_PORT_FLUSH_AND_LOOPBACK_CONTROL;

/** \brief RXC Map Port 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_RXC_MAP_PORT_0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_RXC_MAP_PORT_0;

/** \brief RXC Map Port 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_RXC_MAP_PORT_1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_RXC_MAP_PORT_1;

/** \brief Safety Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_SAFETY_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_SAFETY_INTERRUPT_STATUS;

/** \brief SCSR Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_SCSR_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_SCSR_CONTROL;

/** \brief SCSR Parity Err Count   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_SCSR_PARITY_ERR_COUNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_SCSR_PARITY_ERR_COUNT;

/** \brief SCSR Parity Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_SCSR_PARITY_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_SCSR_PARITY_STATUS;

/** \brief TXQ Map Port 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_TXQ_MAP_PORT_0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_TXQ_MAP_PORT_0;

/** \brief TXQ Map Port 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_BRIDGE_TXQ_MAP_PORT_1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_BRIDGE_TXQ_MAP_PORT_1;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_GETH_CLC;

/** \brief DMA AM Sfty Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_CTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_CTRL;

/** \brief DMA AM Sfty DPP Intr Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_DPP_INTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_DPP_INTR_STS;

/** \brief DMA AM Sfty ECC Intr Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_ECC_INTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_ECC_INTR_STS;

/** \brief DMA AM Sfty Intr En   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_INTR_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_INTR_EN;

/** \brief DMA AM Sfty RDC Dbg Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_RDC_DBG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_RDC_DBG_CTRL;

/** \brief DMA AM Sfty RDC Dbg Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_RDC_DBG_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_RDC_DBG_DATA;

/** \brief DMA AM Sfty RDC ECC Err Cntr Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_RDC_ECC_ERR_CNTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_RDC_ECC_ERR_CNTR_STS;

/** \brief DMA AM Sfty WRC Dbg Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AM_SFTY_WRC_DBG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AM_SFTY_WRC_DBG_CTRL;

/** \brief DMA AS Sfty Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_CTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_CTRL;

/** \brief DMA AS Sfty DPP Intr Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_DPP_INTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_DPP_INTR_STS;

/** \brief DMA AS Sfty ECC Intr Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_ECC_INTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_ECC_INTR_STS;

/** \brief DMA AS Sfty Intr En   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_INTR_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_INTR_EN;

/** \brief DMA AS Sfty RAC Dbg Addr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_RAC_DBG_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_RAC_DBG_ADDR;

/** \brief DMA AS Sfty RAC Dbg Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_RAC_DBG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_RAC_DBG_CTRL;

/** \brief DMA AS Sfty WAC Dbg Addr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_WAC_DBG_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_WAC_DBG_ADDR;

/** \brief DMA AS Sfty WAC Dbg Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_WAC_DBG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_WAC_DBG_CTRL;

/** \brief DMA AS Sfty WDC Dbg Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_WDC_DBG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_WDC_DBG_CTRL;

/** \brief DMA AS Sfty WDC Dbg Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_WDC_DBG_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_WDC_DBG_DATA;

/** \brief DMA AS Sfty WDC ECC Err Cntr Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AS_SFTY_WDC_ECC_ERR_CNTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AS_SFTY_WDC_ECC_ERR_CNTR_STS;

/** \brief AXI LPI Entry Interval   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AXI_LPI_ENTRY_INTERVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AXI_LPI_ENTRY_INTERVAL;

/** \brief AXI Rx AW ACE Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AXI_RX_AW_ACE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AXI_RX_AW_ACE_CONTROL;

/** \brief AXI TxRx AWAR ACE Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AXI_TXRX_AWAR_ACE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AXI_TXRX_AWAR_ACE_CONTROL;

/** \brief AXI Tx AR ACE Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_AXI_TX_AR_ACE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_AXI_TX_AR_ACE_CONTROL;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH0_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH0_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH1_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH1_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH2_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH2_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH3_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH3_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH4_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH4_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH5_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH5_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH6_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH6_TXEXTCFG;

/** \brief DMA Channel TxExtCfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH7_TXEXTCFG_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH7_TXEXTCFG;

/** \brief DMA Channel Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_CONTROL_Bits B;        /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_CONTROL;

/** \brief DMA Channel Current App RxBuffer L   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_L_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_L;

/** \brief DMA Channel Current App RxDesc L   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_L_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_L;

/** \brief DMA Channel Current App TxBuffer L   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_L_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_L;

/** \brief DMA Channel Current App TxDesc L   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_L_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_L;

/** \brief DMA Channel Debug Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_DEBUG_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_DEBUG_STATUS;

/** \brief DMA Channel Desc Mem Cache Fill Level   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_DESC_MEM_CACHE_FILL_LEVEL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_DESC_MEM_CACHE_FILL_LEVEL;

/** \brief DMA CH Ind Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_IND_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_IND_CTRL;

/** \brief DMA CH Ind Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_IND_DATA_Bits B;       /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_IND_DATA;

/** \brief DMA Channel Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_INTERRUPT_ENABLE;

/** \brief DMA Channel Miss Packet Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_MISS_PACKET_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_MISS_PACKET_CNT;

/** \brief DMA Channel RxDesc List LAddress   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RXDESC_LIST_LADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RXDESC_LIST_LADDRESS;

/** \brief DMA Channel RxDesc Tail LPointer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RXDESC_TAIL_LPOINTER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RXDESC_TAIL_LPOINTER;

/** \brief DMA Channel Rx Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RX_CONTROL_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RX_CONTROL;

/** \brief DMA Channel Rx Control2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RX_CONTROL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RX_CONTROL2;

/** \brief DMA Channel Rx Data Xfer Ring Offset   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RX_DATA_XFER_RING_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RX_DATA_XFER_RING_OFFSET;

/** \brief DMA Channel Rx Desc Write Ring Offset   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RX_DESC_WRITE_RING_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RX_DESC_WRITE_RING_OFFSET;

/** \brief DMA Channel Rx Interrupt Watchdog Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER;

/** \brief DMA Channel Slot Function Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS;

/** \brief DMA Channel Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_STATUS_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_STATUS;

/** \brief DMA Channel TxDesc List LAddress   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_TXDESC_LIST_LADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_TXDESC_LIST_LADDRESS;

/** \brief DMA Channel TxDesc Tail LPointer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_TXDESC_TAIL_LPOINTER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_TXDESC_TAIL_LPOINTER;

/** \brief DMA Channel Tx Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_TX_CONTROL_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_TX_CONTROL;

/** \brief DMA Channel Tx Control2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_TX_CONTROL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_TX_CONTROL2;

/** \brief DMA Channel Tx Data Xfer Ring Offset   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_TX_DATA_XFER_RING_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_TX_DATA_XFER_RING_OFFSET;

/** \brief DMA Channel Tx Desc Write Ring Offset   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_CH_TX_DESC_WRITE_RING_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_CH_TX_DESC_WRITE_RING_OFFSET;

/** \brief DMA Debug Status0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_DEBUG_STATUS0_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_DEBUG_STATUS0;

/** \brief DMA Debug Status1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_DEBUG_STATUS1_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_DEBUG_STATUS1;

/** \brief DMA Debug Status3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_DEBUG_STATUS3_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_DEBUG_STATUS3;

/** \brief DMA DPP Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_DPP_CONTROL_Bits B;       /**< \brief Bitfield access */
} Ifx_GETH_DMA_DPP_CONTROL;

/** \brief DMA DPP Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_DPP_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_DPP_INTERRUPT_STATUS;

/** \brief DMA ECC Interrupt enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_ECC_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_ECC_INTERRUPT_ENABLE;

/** \brief DMA ECC Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_ECC_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_ECC_INTERRUPT_STATUS;

/** \brief DMA Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_INTERRUPT_STATUS;

/** \brief DMA Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_MODE_Bits B;              /**< \brief Bitfield access */
} Ifx_GETH_DMA_MODE;

/** \brief DMA Rx EDMA Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_RX_EDMA_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_RX_EDMA_CONTROL;

/** \brief DMA Safety Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_SAFETY_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_SAFETY_INTERRUPT_STATUS;

/** \brief DMA Sfty Dbg EIC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_SFTY_DBG_EIC_Bits B;      /**< \brief Bitfield access */
} Ifx_GETH_DMA_SFTY_DBG_EIC;

/** \brief DMA Sfty Ind Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_SFTY_IND_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_SFTY_IND_CTRL;

/** \brief DMA Sfty Ind Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_SFTY_IND_DATA_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_DMA_SFTY_IND_DATA;

/** \brief DMA SysBus Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_SYSBUS_MODE_Bits B;       /**< \brief Bitfield access */
} Ifx_GETH_DMA_SYSBUS_MODE;

/** \brief DMA TBS CTRL0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_TBS_CTRL0_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_DMA_TBS_CTRL0;

/** \brief DMA TBS CTRL1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_TBS_CTRL1_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_DMA_TBS_CTRL1;

/** \brief DMA TBS CTRL2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_TBS_CTRL2_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_DMA_TBS_CTRL2;

/** \brief DMA TBS CTRL3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_TBS_CTRL3_Bits B;         /**< \brief Bitfield access */
} Ifx_GETH_DMA_TBS_CTRL3;

/** \brief DMA Tx EDMA Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_DMA_TX_EDMA_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_DMA_TX_EDMA_CONTROL;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_GETH_ID;

/** \brief Clock control register for MAC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_MACEN_Bits B;                 /**< \brief Bitfield access */
} Ifx_GETH_MACEN;

/** \brief MAC Address0 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS0_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS0_HIGH;

/** \brief MAC Address0 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS0_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS0_LOW;

/** \brief MAC Address10 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS10_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS10_HIGH;

/** \brief MAC Address10 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS10_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS10_LOW;

/** \brief MAC Address11 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS11_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS11_HIGH;

/** \brief MAC Address11 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS11_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS11_LOW;

/** \brief MAC Address12 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS12_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS12_HIGH;

/** \brief MAC Address12 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS12_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS12_LOW;

/** \brief MAC Address13 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS13_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS13_HIGH;

/** \brief MAC Address13 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS13_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS13_LOW;

/** \brief MAC Address14 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS14_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS14_HIGH;

/** \brief MAC Address14 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS14_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS14_LOW;

/** \brief MAC Address15 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS15_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS15_HIGH;

/** \brief MAC Address15 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS15_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS15_LOW;

/** \brief MAC Address16 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS16_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS16_HIGH;

/** \brief MAC Address16 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS16_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS16_LOW;

/** \brief MAC Address17 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS17_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS17_HIGH;

/** \brief MAC Address17 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS17_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS17_LOW;

/** \brief MAC Address18 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS18_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS18_HIGH;

/** \brief MAC Address18 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS18_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS18_LOW;

/** \brief MAC Address19 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS19_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS19_HIGH;

/** \brief MAC Address19 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS19_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS19_LOW;

/** \brief MAC Address1 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS1_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS1_HIGH;

/** \brief MAC Address1 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS1_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS1_LOW;

/** \brief MAC Address20 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS20_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS20_HIGH;

/** \brief MAC Address20 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS20_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS20_LOW;

/** \brief MAC Address21 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS21_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS21_HIGH;

/** \brief MAC Address21 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS21_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS21_LOW;

/** \brief MAC Address22 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS22_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS22_HIGH;

/** \brief MAC Address22 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS22_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS22_LOW;

/** \brief MAC Address23 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS23_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS23_HIGH;

/** \brief MAC Address23 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS23_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS23_LOW;

/** \brief MAC Address24 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS24_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS24_HIGH;

/** \brief MAC Address24 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS24_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS24_LOW;

/** \brief MAC Address25 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS25_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS25_HIGH;

/** \brief MAC Address25 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS25_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS25_LOW;

/** \brief MAC Address26 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS26_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS26_HIGH;

/** \brief MAC Address26 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS26_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS26_LOW;

/** \brief MAC Address27 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS27_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS27_HIGH;

/** \brief MAC Address27 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS27_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS27_LOW;

/** \brief MAC Address28 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS28_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS28_HIGH;

/** \brief MAC Address28 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS28_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS28_LOW;

/** \brief MAC Address29 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS29_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS29_HIGH;

/** \brief MAC Address29 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS29_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS29_LOW;

/** \brief MAC Address2 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS2_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS2_HIGH;

/** \brief MAC Address2 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS2_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS2_LOW;

/** \brief MAC Address30 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS30_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS30_HIGH;

/** \brief MAC Address30 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS30_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS30_LOW;

/** \brief MAC Address31 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS31_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS31_HIGH;

/** \brief MAC Address31 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS31_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS31_LOW;

/** \brief MAC Address3 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS3_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS3_HIGH;

/** \brief MAC Address3 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS3_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS3_LOW;

/** \brief MAC Address4 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS4_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS4_HIGH;

/** \brief MAC Address4 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS4_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS4_LOW;

/** \brief MAC Address5 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS5_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS5_HIGH;

/** \brief MAC Address5 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS5_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS5_LOW;

/** \brief MAC Address6 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS6_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS6_HIGH;

/** \brief MAC Address6 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS6_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS6_LOW;

/** \brief MAC Address7 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS7_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS7_HIGH;

/** \brief MAC Address7 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS7_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS7_LOW;

/** \brief MAC Address8 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS8_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS8_HIGH;

/** \brief MAC Address8 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS8_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS8_LOW;

/** \brief MAC Address9 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS9_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS9_HIGH;

/** \brief MAC Address9 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MACADDRESS9_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MACADDRESS9_LOW;

/** \brief MAC 1US Tic Counter   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_1US_TIC_COUNTER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_1US_TIC_COUNTER;

/** \brief MAC AXI SLV DPE Addr Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_AXI_SLV_DPE_ADDR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_AXI_SLV_DPE_ADDR_STATUS;

/** \brief MAC CSR SW Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_CSR_SW_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_CSR_SW_CTRL;

/** \brief MAC DChSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG0;

/** \brief MAC DChSel IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG1;

/** \brief MAC DChSel IndReg10   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG10_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG10;

/** \brief MAC DChSel IndReg11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG11_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG11;

/** \brief MAC DChSel IndReg12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG12_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG12;

/** \brief MAC DChSel IndReg13   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG13_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG13;

/** \brief MAC DChSel IndReg14   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG14_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG14;

/** \brief MAC DChSel IndReg15   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG15_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG15;

/** \brief MAC DChSel IndReg16   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG16_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG16;

/** \brief MAC DChSel IndReg17   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG17_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG17;

/** \brief MAC DChSel IndReg18   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG18_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG18;

/** \brief MAC DChSel IndReg19   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG19_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG19;

/** \brief MAC DChSel IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG2;

/** \brief MAC DChSel IndReg20   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG20_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG20;

/** \brief MAC DChSel IndReg21   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG21_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG21;

/** \brief MAC DChSel IndReg22   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG22_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG22;

/** \brief MAC DChSel IndReg23   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG23_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG23;

/** \brief MAC DChSel IndReg24   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG24_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG24;

/** \brief MAC DChSel IndReg25   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG25_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG25;

/** \brief MAC DChSel IndReg26   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG26_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG26;

/** \brief MAC DChSel IndReg27   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG27_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG27;

/** \brief MAC DChSel IndReg28   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG28_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG28;

/** \brief MAC DChSel IndReg29   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG29_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG29;

/** \brief MAC DChSel IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG3;

/** \brief MAC DChSel IndReg30   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG30_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG30;

/** \brief MAC DChSel IndReg31   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG31_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG31;

/** \brief MAC DChSel IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG4;

/** \brief MAC DChSel IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG5;

/** \brief MAC DChSel IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG6;

/** \brief MAC DChSel IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG7;

/** \brief MAC DChSel IndReg8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG8_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG8;

/** \brief MAC DChSel IndReg9   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG9_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG9;

/** \brief MAC Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DEBUG;

/** \brief MAC DPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG0;

/** \brief MAC DPCSel IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG1;

/** \brief MAC DPCSel IndReg10   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG10_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG10;

/** \brief MAC DPCSel IndReg11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG11_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG11;

/** \brief MAC DPCSel IndReg12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG12_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG12;

/** \brief MAC DPCSel IndReg13   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG13_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG13;

/** \brief MAC DPCSel IndReg14   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG14_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG14;

/** \brief MAC DPCSel IndReg15   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG15_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG15;

/** \brief MAC DPCSel IndReg16   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG16_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG16;

/** \brief MAC DPCSel IndReg17   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG17_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG17;

/** \brief MAC DPCSel IndReg18   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG18_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG18;

/** \brief MAC DPCSel IndReg19   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG19_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG19;

/** \brief MAC DPCSel IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG2;

/** \brief MAC DPCSel IndReg20   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG20_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG20;

/** \brief MAC DPCSel IndReg21   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG21_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG21;

/** \brief MAC DPCSel IndReg22   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG22_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG22;

/** \brief MAC DPCSel IndReg23   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG23_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG23;

/** \brief MAC DPCSel IndReg24   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG24_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG24;

/** \brief MAC DPCSel IndReg25   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG25_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG25;

/** \brief MAC DPCSel IndReg26   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG26_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG26;

/** \brief MAC DPCSel IndReg27   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG27_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG27;

/** \brief MAC DPCSel IndReg28   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG28_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG28;

/** \brief MAC DPCSel IndReg29   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG29_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG29;

/** \brief MAC DPCSel IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG3;

/** \brief MAC DPCSel IndReg30   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG30_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG30;

/** \brief MAC DPCSel IndReg31   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG31_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG31;

/** \brief MAC DPCSel IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG4;

/** \brief MAC DPCSel IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG5;

/** \brief MAC DPCSel IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG6;

/** \brief MAC DPCSel IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG7;

/** \brief MAC DPCSel IndReg8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG8_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG8;

/** \brief MAC DPCSel IndReg9   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG9_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG9;

/** \brief MAC DPP FSM Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_DPP_FSM_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_DPP_FSM_INTERRUPT_STATUS;

/** \brief MAC Extended Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_EXTENDED_CONFIGURATION_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_EXTENDED_CONFIGURATION;

/** \brief MAC Ext Cfg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_EXT_CFG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_EXT_CFG1;

/** \brief MAC Flex Hdr Cfg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_CFG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_CFG;

/** \brief MAC Flex Hdr High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_HIGH;

/** \brief MAC Flex Hdr Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_LOW;

/** \brief MAC FPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FPCSEL_INDREG0;

/** \brief MAC FPE CTRL STS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FPE_CTRL_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FPE_CTRL_STS;

/** \brief MAC FSM ACT Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FSM_ACT_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FSM_ACT_TIMER;

/** \brief MAC FSM Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_FSM_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_FSM_CONTROL;

/** \brief MAC HW Feature0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_HW_FEATURE0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE0;

/** \brief MAC HW Feature1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_HW_FEATURE1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE1;

/** \brief MAC HW Feature2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_HW_FEATURE2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE2;

/** \brief MAC HW Feature3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_HW_FEATURE3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE3;

/** \brief MAC HW Feature4   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_HW_FEATURE4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_HW_FEATURE4;

/** \brief MAC Indir Access Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL;

/** \brief MAC Indir Access Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_DATA;

/** \brief MAC Inner VLAN Incl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_INNER_VLAN_INCL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_INNER_VLAN_INCL;

/** \brief MAC Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_INTERRUPT_ENABLE;

/** \brief MAC Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_INTERRUPT_STATUS;

/** \brief MAC L3 L4 Address Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_ADDRESS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_ADDRESS_CONTROL;

/** \brief MAC L3 L4 Control0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL0;

/** \brief MAC L3 L4 Control1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL1;

/** \brief MAC L3 L4 Control2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL2;

/** \brief MAC L3 L4 Control3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL3;

/** \brief MAC L3 L4 Control4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL4;

/** \brief MAC L3 L4 Control5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL5;

/** \brief MAC L3 L4 Control6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL6;

/** \brief MAC L3 L4 Control7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL7;

/** \brief MAC L3 L4 Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_L3_L4_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_L3_L4_DATA;

/** \brief MAC Layer3 Addr0 Reg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG0;

/** \brief MAC Layer3 Addr0 Reg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG1;

/** \brief MAC Layer3 Addr0 Reg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG2;

/** \brief MAC Layer3 Addr0 Reg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG3;

/** \brief MAC Layer3 Addr0 Reg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG4;

/** \brief MAC Layer3 Addr0 Reg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG5;

/** \brief MAC Layer3 Addr0 Reg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG6;

/** \brief MAC Layer3 Addr0 Reg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG7;

/** \brief MAC Layer3 Addr1 Reg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG0;

/** \brief MAC Layer3 Addr1 Reg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG1;

/** \brief MAC Layer3 Addr1 Reg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG2;

/** \brief MAC Layer3 Addr1 Reg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG3;

/** \brief MAC Layer3 Addr1 Reg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG4;

/** \brief MAC Layer3 Addr1 Reg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG5;

/** \brief MAC Layer3 Addr1 Reg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG6;

/** \brief MAC Layer3 Addr1 Reg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG7;

/** \brief MAC Layer3 Addr2 Reg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG0;

/** \brief MAC Layer3 Addr2 Reg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG1;

/** \brief MAC Layer3 Addr2 Reg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG2;

/** \brief MAC Layer3 Addr2 Reg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG3;

/** \brief MAC Layer3 Addr2 Reg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG4;

/** \brief MAC Layer3 Addr2 Reg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG5;

/** \brief MAC Layer3 Addr2 Reg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG6;

/** \brief MAC Layer3 Addr2 Reg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG7;

/** \brief MAC Layer3 Addr3 Reg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG0;

/** \brief MAC Layer3 Addr3 Reg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG1;

/** \brief MAC Layer3 Addr3 Reg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG2;

/** \brief MAC Layer3 Addr3 Reg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG3;

/** \brief MAC Layer3 Addr3 Reg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG4;

/** \brief MAC Layer3 Addr3 Reg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG5;

/** \brief MAC Layer3 Addr3 Reg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG6;

/** \brief MAC Layer3 Addr3 Reg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG7;

/** \brief MAC Layer4 Address0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS0;

/** \brief MAC Layer4 Address1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS1;

/** \brief MAC Layer4 Address2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS2;

/** \brief MAC Layer4 Address3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS3;

/** \brief MAC Layer4 Address4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS4;

/** \brief MAC Layer4 Address5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS5;

/** \brief MAC Layer4 Address6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS6;

/** \brief MAC Layer4 Address7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS7;

/** \brief MAC LPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG0;

/** \brief MAC LPCSel IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG1;

/** \brief MAC LPCSel IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG2;

/** \brief MAC LPCSel IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG3;

/** \brief MAC LPCSel IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG4;

/** \brief MAC LPCSel IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG5;

/** \brief MAC LPCSel IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG6;

/** \brief MAC LPCSel IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG7;

/** \brief MAC LPI Auto Entry Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPI_AUTO_ENTRY_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPI_AUTO_ENTRY_TIMER;

/** \brief MAC LPI Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPI_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPI_CONTROL_STATUS;

/** \brief MAC LPI Timers Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_LPI_TIMERS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_LPI_TIMERS_CONTROL;

/** \brief MAC Packet Filter   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PACKET_FILTER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PACKET_FILTER;

/** \brief MAC PCCtrl IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG0;

/** \brief MAC PCCtrl IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG1;

/** \brief MAC PCCtrl IndReg10   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG10_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG10;

/** \brief MAC PCCtrl IndReg11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG11_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG11;

/** \brief MAC PCCtrl IndReg12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG12_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG12;

/** \brief MAC PCCtrl IndReg13   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG13_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG13;

/** \brief MAC PCCtrl IndReg14   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG14_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG14;

/** \brief MAC PCCtrl IndReg15   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG15_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG15;

/** \brief MAC PCCtrl IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG2;

/** \brief MAC PCCtrl IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG3;

/** \brief MAC PCCtrl IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG4;

/** \brief MAC PCCtrl IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG5;

/** \brief MAC PCCtrl IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG6;

/** \brief MAC PCCtrl IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG7;

/** \brief MAC PCCtrl IndReg8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG8_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG8;

/** \brief MAC PCCtrl IndReg9   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG9_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG9;

/** \brief MAC PCntr IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG0;

/** \brief MAC PCntr IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG1;

/** \brief MAC PCntr IndReg10   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG10_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG10;

/** \brief MAC PCntr IndReg11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG11_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG11;

/** \brief MAC PCntr IndReg12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG12_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG12;

/** \brief MAC PCntr IndReg13   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG13_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG13;

/** \brief MAC PCntr IndReg14   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG14_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG14;

/** \brief MAC PCntr IndReg15   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG15_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG15;

/** \brief MAC PCntr IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG2;

/** \brief MAC PCntr IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG3;

/** \brief MAC PCntr IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG4;

/** \brief MAC PCntr IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG5;

/** \brief MAC PCntr IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG6;

/** \brief MAC PCntr IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG7;

/** \brief MAC PCntr IndReg8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG8_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG8;

/** \brief MAC PCntr IndReg9   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG9_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG9;

/** \brief MAC PCStatus DA IndReg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG;

/** \brief MAC PCStatus Filter Event IndReg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG;

/** \brief MAC PCStatus L3L4 IndReg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCSTATUS_L3L4_INDREG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_L3L4_INDREG;

/** \brief MAC PCStatus VLAN IndReg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG;

/** \brief MAC PCTH Intr Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_ENABLE;

/** \brief MAC PCTH Intr Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_STATUS;

/** \brief MAC PCTW Intr Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_ENABLE;

/** \brief MAC PCTW Intr Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_STATUS;

/** \brief MAC PMT Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PMT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PMT_CONTROL_STATUS;

/** \brief MAC PPS0 Interval   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS0_INTERVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS0_INTERVAL;

/** \brief MAC PPS0 Target Time Nanoseconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS;

/** \brief MAC PPS0 Target Time Seconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS;

/** \brief MAC PPS0 Width   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS0_WIDTH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS0_WIDTH;

/** \brief MAC PPS1 Interval   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS1_INTERVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS1_INTERVAL;

/** \brief MAC PPS1 Target Time Nanoseconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_NANOSECONDS;

/** \brief MAC PPS1 Target Time Seconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_SECONDS;

/** \brief MAC PPS1 Width   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS1_WIDTH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS1_WIDTH;

/** \brief MAC PPS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS_CONTROL;

/** \brief MAC PPS Extnd Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PPS_EXTND_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PPS_EXTND_CTRL;

/** \brief MAC Presn Time ns   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_NS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_NS;

/** \brief MAC Presn Time Updt   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_UPDT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_UPDT;

/** \brief MAC Q0 Tx Flow Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL;

/** \brief MAC RWK Packet Filter   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RWK_PACKET_FILTER_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RWK_PACKET_FILTER;

/** \brief MAC RxQ Ctrl0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL0;

/** \brief MAC RxQ Ctrl1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL1;

/** \brief MAC RxQ Ctrl2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL2;

/** \brief MAC RxQ Ctrl3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL3;

/** \brief MAC RxQ Ctrl4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL4;

/** \brief MAC RxQ Ctrl5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL5;

/** \brief MAC Rx Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RX_CONFIGURATION_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RX_CONFIGURATION;

/** \brief MAC Rx Domain Time Incr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR;

/** \brief MAC Rx Eth Type Match   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RX_ETH_TYPE_MATCH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RX_ETH_TYPE_MATCH;

/** \brief MAC Rx Flow Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RX_FLOW_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RX_FLOW_CTRL;

/** \brief MAC Rx Tx Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_RX_TX_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_RX_TX_STATUS;

/** \brief MAC SCSR Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SCSR_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SCSR_CONTROL;

/** \brief MAC SCSR Parity Err Count   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_ERR_COUNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_ERR_COUNT;

/** \brief MAC SCSR Parity Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_STATUS;

/** \brief MAC Sub Second Increment   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT;

/** \brief MAC System Time Higher Word Seconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;

/** \brief MAC System Time Nanoseconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS;

/** \brief MAC System Time Nanoseconds Update   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;

/** \brief MAC System Time Seconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS;

/** \brief MAC System Time Seconds Update   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE;

/** \brief MAC Timestamp Addend   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_ADDEND_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_ADDEND;

/** \brief MAC Timestamp Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_CONTROL;

/** \brief MAC Timestamp Egress Asym Corr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR;

/** \brief MAC Timestamp Egress Corr Nanosecond   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;

/** \brief MAC Timestamp Egress Corr Subnanosecond   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSECOND_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSECOND;

/** \brief MAC Timestamp Ingress Asym Corr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR;

/** \brief MAC Timestamp Ingress Corr Nanosecond   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;

/** \brief MAC Timestamp Ingress Corr Subnanosecond   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSECOND_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSECOND;

/** \brief MAC Timestamp Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_STATUS;

/** \brief MAC Tx Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TX_CONFIGURATION_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TX_CONFIGURATION;

/** \brief MAC Tx Domain Time Incr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR;

/** \brief MAC Tx Timestamp Status Nanoseconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;

/** \brief MAC Tx Timestamp Status PktID   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_PKTID_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_PKTID;

/** \brief MAC Tx Timestamp Status Seconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS;

/** \brief MAC Version   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VERSION_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VERSION;

/** \brief MAC VLAN Hash Table   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_HASH_TABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_HASH_TABLE;

/** \brief MAC VLAN Incl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL;

/** \brief MAC VLAN Incl0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL0;

/** \brief MAC VLAN Incl1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL1;

/** \brief MAC VLAN Incl2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL2;

/** \brief MAC VLAN Incl3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL3;

/** \brief MAC VLAN Incl4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL4;

/** \brief MAC VLAN Incl5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL5;

/** \brief MAC VLAN Incl6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL6;

/** \brief MAC VLAN Incl7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_INCL7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_INCL7;

/** \brief MAC VLAN Tag Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_CTRL;

/** \brief MAC VLAN Tag Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_DATA;

/** \brief MAC VLAN Tag Filter0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER0;

/** \brief MAC VLAN Tag Filter1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER1;

/** \brief MAC VLAN Tag Filter2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER2;

/** \brief MAC VLAN Tag Filter3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER3;

/** \brief MAC VLAN Tag Filter4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER4;

/** \brief MAC VLAN Tag Filter5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER5;

/** \brief MAC VLAN Tag Filter6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER6;

/** \brief MAC VLAN Tag Filter7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER7;

/** \brief MAC VPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG0;

/** \brief MAC VPCSel IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG1;

/** \brief MAC VPCSel IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG2;

/** \brief MAC VPCSel IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG3;

/** \brief MAC VPCSel IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG4;

/** \brief MAC VPCSel IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG5;

/** \brief MAC VPCSel IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG6;

/** \brief MAC VPCSel IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG7;

/** \brief MAC WD JB Timeout   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MAC_WD_JB_TIMEOUT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MAC_WD_JB_TIMEOUT;

/** \brief MDIO Clause 22 Port   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_CLAUSE_22_PORT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_CLAUSE_22_PORT;

/** \brief MDIO Continuous Scan Port Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_SCAN_PORT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_SCAN_PORT_ENABLE;

/** \brief MDIO Continuous Write Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_ADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_ADDRESS;

/** \brief MDIO Continuous Write Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_DATA;

/** \brief MDIO Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_ENABLE;

/** \brief MDIO Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_STATUS;

/** \brief MDIO PortNx4P0 Alive Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_ALIVE_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_ALIVE_STATUS;

/** \brief MDIO PortNx4P0 Device In Use   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_DEVICE_IN_USE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_DEVICE_IN_USE;

/** \brief MDIO PortNx4P0 Link Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_LINK_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_LINK_STATUS;

/** \brief MDIO PortNx4P1 Alive Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_ALIVE_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_ALIVE_STATUS;

/** \brief MDIO PortNx4P1 Device In Use   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_DEVICE_IN_USE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_DEVICE_IN_USE;

/** \brief MDIO PortNx4P1 Link Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_LINK_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_LINK_STATUS;

/** \brief MDIO PortNx4P2 Alive Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_ALIVE_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_ALIVE_STATUS;

/** \brief MDIO PortNx4P2 Device In Use   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_DEVICE_IN_USE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_DEVICE_IN_USE;

/** \brief MDIO PortNx4P2 Link Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_LINK_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_LINK_STATUS;

/** \brief MDIO PortNx4P3 Alive Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_ALIVE_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_ALIVE_STATUS;

/** \brief MDIO PortNx4P3 Device In Use   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_DEVICE_IN_USE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_DEVICE_IN_USE;

/** \brief MDIO PortNx4P3 Link Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_LINK_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_LINK_STATUS;

/** \brief MDIO Port Connect Disconnect Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORT_CONNECT_DISCONNECT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORT_CONNECT_DISCONNECT_STATUS;

/** \brief MDIO Port Nx4 Indirect Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_PORT_NX4_INDIRECT_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_PORT_NX4_INDIRECT_CONTROL;

/** \brief MDIO Single Command Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_ADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_ADDRESS;

/** \brief MDIO Single Command Control Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_CONTROL_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_CONTROL_DATA;

/** \brief MMC Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_CONTROL;

/** \brief MMC FPE Rx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT;

/** \brief MMC FPE Rx Interrupt Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_MASK;

/** \brief MMC FPE Tx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT;

/** \brief MMC FPE Tx Interrupt Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_MASK;

/** \brief MMC IPC Rx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT;

/** \brief MMC IPC Rx Interrupt Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK;

/** \brief MMC Receive Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_RECEIVE_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_RECEIVE_INTERRUPT_ENABLE;

/** \brief MMC Rx FPE Fragment Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_RX_FPE_FRAGMENT_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_RX_FPE_FRAGMENT_CNTR;

/** \brief MMC Rx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_RX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_RX_INTERRUPT;

/** \brief MMC Rx Packet Assembly Err Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR;

/** \brief MMC Rx Packet Assembly OK Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_OK_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_OK_CNTR;

/** \brief MMC Rx Packet SMD Err Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_RX_PACKET_SMD_ERR_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_RX_PACKET_SMD_ERR_CNTR;

/** \brief MMC Transmit Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_TRANSMIT_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_TRANSMIT_INTERRUPT_ENABLE;

/** \brief MMC Tx FPE Fragment Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_TX_FPE_FRAGMENT_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_TX_FPE_FRAGMENT_CNTR;

/** \brief MMC Tx Gate Orun Cntr High   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_HIGH;

/** \brief MMC Tx Gate Orun Cntr Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_LOW;

/** \brief MMC Tx Hold Req Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_TX_HOLD_REQ_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_TX_HOLD_REQ_CNTR;

/** \brief MMC Tx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_MMC_TX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_MMC_TX_INTERRUPT;

/** \brief RWK Filter0 1 CRC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER0_1_CRC_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_1_CRC;

/** \brief RWK Filter0 3 Command   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER0_3_COMMAND_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_3_COMMAND;

/** \brief RWK Filter0 3 Offset   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER0_3_OFFSET_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_3_OFFSET;

/** \brief RWK Filter0 Byte Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER0_BYTE_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER0_BYTE_MASK;

/** \brief RWK Filter1 Byte Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER1_BYTE_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER1_BYTE_MASK;

/** \brief RWK Filter2 3 CRC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER2_3_CRC_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER2_3_CRC;

/** \brief RWK Filter2 Byte Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER2_BYTE_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER2_BYTE_MASK;

/** \brief RWK Filter3 Byte Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RWK_FILTER3_BYTE_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RWK_FILTER3_BYTE_MASK;

/** \brief RxICMP Error Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXICMP_ERROR_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXICMP_ERROR_OCTETS_LOW;

/** \brief RxICMP Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXICMP_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXICMP_ERROR_PACKETS_LOW;

/** \brief RxICMP Good Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXICMP_GOOD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXICMP_GOOD_OCTETS_LOW;

/** \brief RxICMP Good Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXICMP_GOOD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXICMP_GOOD_PACKETS_LOW;

/** \brief RxIPv4 Fragmented Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_LOW;

/** \brief RxIPv4 Fragmented Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_LOW;

/** \brief RxIPv4 Good Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_GOOD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_GOOD_OCTETS_LOW;

/** \brief RxIPv4 Good Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_GOOD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_GOOD_PACKETS_LOW;

/** \brief RxIPv4 Header Error Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_LOW;

/** \brief RxIPv4 Header Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_LOW;

/** \brief RxIPv4 No Payload Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_LOW;

/** \brief RxIPv4 No Payload Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_LOW;

/** \brief RxIPv4 UDP Checksum Disabled Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_LOW;

/** \brief RxIPv4 UDP Checksum Disable Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_LOW;

/** \brief RxIPv6 Good Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV6_GOOD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV6_GOOD_OCTETS_LOW;

/** \brief RxIPv6 Good Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV6_GOOD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV6_GOOD_PACKETS_LOW;

/** \brief RxIPv6 Header Error Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_LOW;

/** \brief RxIPv6 Header Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_LOW;

/** \brief RxIPv6 No Payload Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_LOW;

/** \brief RxIPv6 No Payload Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_LOW;

/** \brief RxTCP Error Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXTCP_ERROR_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXTCP_ERROR_OCTETS_LOW;

/** \brief RxTCP Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXTCP_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXTCP_ERROR_PACKETS_LOW;

/** \brief RxTCP Good Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXTCP_GOOD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXTCP_GOOD_OCTETS_LOW;

/** \brief RxTCP Good Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXTCP_GOOD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXTCP_GOOD_PACKETS_LOW;

/** \brief RxUDP Error Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXUDP_ERROR_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXUDP_ERROR_OCTETS_LOW;

/** \brief RxUDP Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXUDP_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXUDP_ERROR_PACKETS_LOW;

/** \brief RxUDP Good Octets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXUDP_GOOD_OCTETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXUDP_GOOD_OCTETS_LOW;

/** \brief RxUDP Good Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RXUDP_GOOD_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RXUDP_GOOD_PACKETS_LOW;

/** \brief Rx 1024ToMaxOctets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Rx 128To255Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Rx 256To511Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Rx 512To1023Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Rx 64Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Rx 65To127Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Rx Alignment Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS;

/** \brief Rx Broadcast Packets Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_LOW;

/** \brief Rx CRC Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_CRC_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_CRC_ERROR_PACKETS_LOW;

/** \brief Rx Discard Octets Good Bad High   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_HIGH;

/** \brief Rx Discard Octets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_LOW;

/** \brief Rx Discard Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_DISCARD_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_DISCARD_PACKETS_GOOD_BAD_LOW;

/** \brief Rx FIFOOverflow Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_FIFOOVERFLOW_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_FIFOOVERFLOW_PACKETS_LOW;

/** \brief Rx Jabber Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_JABBER_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_JABBER_ERROR_PACKETS;

/** \brief Rx Length Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_LOW;

/** \brief Rx LPI Tran Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_LPI_TRAN_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_LPI_TRAN_CNTR;

/** \brief Rx LPI USEC Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_LPI_USEC_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_LPI_USEC_CNTR;

/** \brief Rx Multicast Packets Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_LOW;

/** \brief Rx Octet Count Good Bad High   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_HIGH;

/** \brief Rx Octet Count Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_LOW;

/** \brief Rx Octet Count Good High   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_HIGH;

/** \brief Rx Octet Count Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_LOW;

/** \brief Rx OutofRange Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_OUTOFRANGE_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_OUTOFRANGE_PACKETS_LOW;

/** \brief Rx Oversize Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD;

/** \brief Rx Packet Count Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_PACKET_COUNT_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_PACKET_COUNT_GOOD_BAD_LOW;

/** \brief Rx Pause Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_PAUSE_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_PAUSE_PACKETS_LOW;

/** \brief Rx Runt Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_RUNT_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_RUNT_ERROR_PACKETS;

/** \brief Rx Undersize Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD;

/** \brief Rx Unicast Packets Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_LOW;

/** \brief Rx VLAN Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_LOW;

/** \brief Rx Watchdog Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS;

/** \brief SGF Fail PktCnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_SGF_FAIL_PKTCNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_SGF_FAIL_PKTCNT;

/** \brief SGF Pass PktCnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_SGF_PASS_PKTCNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_SGF_PASS_PKTCNT;

/** \brief SNPS SCS REG1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_SNPS_SCS_REG1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_SNPS_SCS_REG1;

/** \brief Tx 1024ToMaxOctets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Tx 128To255Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Tx 256To511Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Tx 512To1023Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Tx 64Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Tx 65To127Octets Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW;

/** \brief Tx Broadcast Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_LOW;

/** \brief Tx Broadcast Packets Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_LOW;

/** \brief Tx Carrier Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS;

/** \brief Tx Deferred Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_DEFERRED_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_DEFERRED_PACKETS;

/** \brief Tx Excessive Collision Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS;

/** \brief Tx Excessive Deferral Error   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR;

/** \brief Tx Late Collision Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_LATE_COLLISION_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_LATE_COLLISION_PACKETS;

/** \brief Tx LPI Tran Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_LPI_TRAN_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_LPI_TRAN_CNTR;

/** \brief Tx LPI USEC Cntr   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_LPI_USEC_CNTR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_LPI_USEC_CNTR;

/** \brief Tx Multicast Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_LOW;

/** \brief Tx Multicast Packets Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_LOW;

/** \brief Tx Multiple Collision Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS;

/** \brief Tx Octet Count Good Bad High   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_HIGH;

/** \brief Tx Octet Count Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_LOW;

/** \brief Tx Octet Count Good High   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_HIGH;

/** \brief Tx Octet Count Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_LOW;

/** \brief Tx Packet Count Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_LOW;

/** \brief Tx Packet Count Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_LOW;

/** \brief Tx Pause Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_PAUSE_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_PAUSE_PACKETS_LOW;

/** \brief Tx Single Collision Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS;

/** \brief Tx Underflow Error Packets Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_LOW;

/** \brief Tx Unicast Packets Good Bad Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_LOW;

/** \brief Tx VLAN Packets Good Low   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_LOW;

/** \brief MTL Debug Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_DEBUG_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_DEBUG_CONTROL;

/** \brief MTL Debug Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_DEBUG_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_DEBUG_STATUS;

/** \brief MTL DPP Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_DPP_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_DPP_CONTROL;

/** \brief MTL DPP ECC EIC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_DPP_ECC_EIC_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_DPP_ECC_EIC;

/** \brief MTL ECC Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_ECC_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_ECC_CONTROL;

/** \brief MTL ECC Err Addr Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_ECC_ERR_ADDR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_ECC_ERR_ADDR_STATUS;

/** \brief MTL ECC Err Cntr Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_ECC_ERR_CNTR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_ECC_ERR_CNTR_STATUS;

/** \brief MTL ECC Err Sts Rctl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_ECC_ERR_STS_RCTL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_ECC_ERR_STS_RCTL;

/** \brief MTL ECC Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_ECC_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_ECC_INTERRUPT_ENABLE;

/** \brief MTL ECC Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_ECC_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_ECC_INTERRUPT_STATUS;

/** \brief MTL EST Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_CONTROL;

/** \brief MTL EST Frm Size Capture   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_FRM_SIZE_CAPTURE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_FRM_SIZE_CAPTURE;

/** \brief MTL EST Frm Size Error   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_FRM_SIZE_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_FRM_SIZE_ERROR;

/** \brief MTL EST Intr Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_INTR_ENABLE;

/** \brief MTL EST Overhead   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_OVERHEAD_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_OVERHEAD;

/** \brief MTL EST Sch Error   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_SCH_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_SCH_ERROR;

/** \brief MTL EST Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_EST_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_EST_STATUS;

/** \brief MTL FIFO Debug Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_FIFO_DEBUG_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_FIFO_DEBUG_DATA;

/** \brief MTL FPE Advance   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_FPE_ADVANCE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_FPE_ADVANCE;

/** \brief MTL FPE CTRL STS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_FPE_CTRL_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_FPE_CTRL_STS;

/** \brief MTL GCL Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_GCL_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_GCL_CONTROL;

/** \brief MTL GCL Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_GCL_DATA_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_GCL_DATA;

/** \brief MTL Indirect Acc Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_INDIRECT_ACC_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_INDIRECT_ACC_CONTROL_STATUS;

/** \brief MTL Indirect Acc Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_INDIRECT_ACC_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_INDIRECT_ACC_DATA;

/** \brief MTL Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_INTERRUPT_STATUS;

/** \brief MTL FRP ACNTR0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR0;

/** \brief MTL FRP ACNTR1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR1;

/** \brief MTL FRP ACNTR2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR2_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR2;

/** \brief MTL FRP ACNTR3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR3_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR3;

/** \brief MTL FRP ACNTR4   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR4_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR4;

/** \brief MTL FRP ACNTR5   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR5_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR5;

/** \brief MTL FRP ACNTR6   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR6_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR6;

/** \brief MTL FRP ACNTR7   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR7_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR7;

/** \brief MTL Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_OPERATION_MODE;

/** \brief MTL RXP Bypass Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXP_BYPASS_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXP_BYPASS_CNT;

/** \brief MTL RXP Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXP_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXP_CONTROL_STATUS;

/** \brief MTL RXP Drop Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXP_DROP_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXP_DROP_CNT;

/** \brief MTL RXP Error Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXP_ERROR_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXP_ERROR_CNT;

/** \brief MTL RXP Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXP_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXP_INTERRUPT_CONTROL_STATUS;

/** \brief MTL RxQ DMA Map0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXQ_DMA_MAP0_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXQ_DMA_MAP0;

/** \brief MTL RxQ DMA Map1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_RXQ_DMA_MAP1_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_RXQ_DMA_MAP1;

/** \brief MTL Safety Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_SAFETY_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_SAFETY_INTERRUPT_STATUS;

/** \brief MTL SGF Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_SGF_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_SGF_CONTROL;

/** \brief MTL SGF Extended Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_SGF_EXTENDED_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_SGF_EXTENDED_CONTROL;

/** \brief MTL SGF Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_SGF_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_SGF_INTR_ENABLE;

/** \brief MTL SGF Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_SGF_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_SGF_STATUS;

/** \brief MTL TBS CTRL   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TBS_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TBS_CTRL;

/** \brief MTL TBS STATS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TBS_STATS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TBS_STATS;

/** \brief MTL Q0 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_ENABLE;

/** \brief MTL Q0 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_STATUS;

/** \brief MTL RxQ0 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_RXQ0_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_CONTROL;

/** \brief MTL RxQ0 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_RXQ0_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_DEBUG;

/** \brief MTL RxQ0 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_RXQ0_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_FLOW_CONTROL;

/** \brief MTL RxQ0 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_RXQ0_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ0 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_RXQ0_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_RXQ0_OPERATION_MODE;

/** \brief MTL TC0 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_TC0_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_TC0_ETS_CONTROL;

/** \brief MTL TC0 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_TC0_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_TC0_QUANTUM_WEIGHT;

/** \brief MTL TxQ0 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_TXQ0_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_TXQ0_DEBUG;

/** \brief MTL TxQ0 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_TXQ0_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_TXQ0_OPERATION_MODE;

/** \brief MTL TxQ0 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ0_TXQ0_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ0_TXQ0_UNDERFLOW;

/** \brief MTL Q1 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_ENABLE;

/** \brief MTL Q1 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_STATUS;

/** \brief MTL RxQ1 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_RXQ1_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_CONTROL;

/** \brief MTL RxQ1 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_RXQ1_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_DEBUG;

/** \brief MTL RxQ1 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_RXQ1_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_FLOW_CONTROL;

/** \brief MTL RxQ1 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_RXQ1_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ1 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_RXQ1_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_RXQ1_OPERATION_MODE;

/** \brief MTL TC1 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_TC1_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_TC1_ETS_CONTROL;

/** \brief MTL TC1 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_TC1_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_TC1_QUANTUM_WEIGHT;

/** \brief MTL TxQ1 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_TXQ1_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_TXQ1_DEBUG;

/** \brief MTL TxQ1 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_TXQ1_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_TXQ1_OPERATION_MODE;

/** \brief MTL TxQ1 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ1_TXQ1_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ1_TXQ1_UNDERFLOW;

/** \brief MTL Q2 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_ENABLE;

/** \brief MTL Q2 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_STATUS;

/** \brief MTL RxQ2 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_RXQ2_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_CONTROL;

/** \brief MTL RxQ2 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_RXQ2_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_DEBUG;

/** \brief MTL RxQ2 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_RXQ2_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_FLOW_CONTROL;

/** \brief MTL RxQ2 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_RXQ2_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ2 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_RXQ2_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_RXQ2_OPERATION_MODE;

/** \brief MTL TC2 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_TC2_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_TC2_ETS_CONTROL;

/** \brief MTL TC2 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_TC2_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_TC2_QUANTUM_WEIGHT;

/** \brief MTL TxQ2 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_TXQ2_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_TXQ2_DEBUG;

/** \brief MTL TxQ2 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_TXQ2_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_TXQ2_OPERATION_MODE;

/** \brief MTL TxQ2 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ2_TXQ2_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ2_TXQ2_UNDERFLOW;

/** \brief MTL Q3 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_ENABLE;

/** \brief MTL Q3 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_STATUS;

/** \brief MTL RxQ3 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_RXQ3_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_CONTROL;

/** \brief MTL RxQ3 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_RXQ3_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_DEBUG;

/** \brief MTL RxQ3 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_RXQ3_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_FLOW_CONTROL;

/** \brief MTL RxQ3 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_RXQ3_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ3 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_RXQ3_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_RXQ3_OPERATION_MODE;

/** \brief MTL TC3 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_TC3_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_TC3_ETS_CONTROL;

/** \brief MTL TC3 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_TC3_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_TC3_QUANTUM_WEIGHT;

/** \brief MTL TxQ3 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_TXQ3_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_TXQ3_DEBUG;

/** \brief MTL TxQ3 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_TXQ3_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_TXQ3_OPERATION_MODE;

/** \brief MTL TxQ3 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ3_TXQ3_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ3_TXQ3_UNDERFLOW;

/** \brief MTL Q4 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_ENABLE;

/** \brief MTL Q4 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_STATUS;

/** \brief MTL RxQ4 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_RXQ4_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_CONTROL;

/** \brief MTL RxQ4 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_RXQ4_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_DEBUG;

/** \brief MTL RxQ4 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_RXQ4_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_FLOW_CONTROL;

/** \brief MTL RxQ4 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_RXQ4_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ4 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_RXQ4_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_RXQ4_OPERATION_MODE;

/** \brief MTL TC4 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_TC4_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_TC4_ETS_CONTROL;

/** \brief MTL TC4 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_TC4_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_TC4_QUANTUM_WEIGHT;

/** \brief MTL TxQ4 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_TXQ4_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_TXQ4_DEBUG;

/** \brief MTL TxQ4 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_TXQ4_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_TXQ4_OPERATION_MODE;

/** \brief MTL TxQ4 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ4_TXQ4_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ4_TXQ4_UNDERFLOW;

/** \brief MTL Q5 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_ENABLE;

/** \brief MTL Q5 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_STATUS;

/** \brief MTL RxQ5 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_RXQ5_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_CONTROL;

/** \brief MTL RxQ5 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_RXQ5_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_DEBUG;

/** \brief MTL RxQ5 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_RXQ5_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_FLOW_CONTROL;

/** \brief MTL RxQ5 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_RXQ5_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ5 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_RXQ5_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_RXQ5_OPERATION_MODE;

/** \brief MTL TC5 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TC5_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_ETS_CONTROL;

/** \brief MTL TC5 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TC5_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_HICREDIT;

/** \brief MTL TC5 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TC5_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_LOCREDIT;

/** \brief MTL TC5 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TC5_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_QUANTUM_WEIGHT;

/** \brief MTL TC5 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TC5_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TC5_SENDSLOPECREDIT;

/** \brief MTL TxQ5 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TXQ5_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TXQ5_DEBUG;

/** \brief MTL TxQ5 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TXQ5_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TXQ5_OPERATION_MODE;

/** \brief MTL TxQ5 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ5_TXQ5_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ5_TXQ5_UNDERFLOW;

/** \brief MTL Q6 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_ENABLE;

/** \brief MTL Q6 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_STATUS;

/** \brief MTL RxQ6 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_RXQ6_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_CONTROL;

/** \brief MTL RxQ6 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_RXQ6_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_DEBUG;

/** \brief MTL RxQ6 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_RXQ6_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_FLOW_CONTROL;

/** \brief MTL RxQ6 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_RXQ6_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ6 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_RXQ6_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_RXQ6_OPERATION_MODE;

/** \brief MTL TC6 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TC6_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_ETS_CONTROL;

/** \brief MTL TC6 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TC6_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_HICREDIT;

/** \brief MTL TC6 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TC6_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_LOCREDIT;

/** \brief MTL TC6 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TC6_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_QUANTUM_WEIGHT;

/** \brief MTL TC6 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TC6_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TC6_SENDSLOPECREDIT;

/** \brief MTL TxQ6 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TXQ6_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TXQ6_DEBUG;

/** \brief MTL TxQ6 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TXQ6_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TXQ6_OPERATION_MODE;

/** \brief MTL TxQ6 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ6_TXQ6_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ6_TXQ6_UNDERFLOW;

/** \brief MTL Q7 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_ENABLE;

/** \brief MTL Q7 Interrupt Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_STATUS;

/** \brief MTL RxQ7 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_RXQ7_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_CONTROL;

/** \brief MTL RxQ7 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_RXQ7_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_DEBUG;

/** \brief MTL RxQ7 Flow Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_RXQ7_FLOW_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_FLOW_CONTROL;

/** \brief MTL RxQ7 Missed Pkt Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_RXQ7_MISSED_PKT_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_MISSED_PKT_OVERFLOW_CNT;

/** \brief MTL RxQ7 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_RXQ7_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_RXQ7_OPERATION_MODE;

/** \brief MTL TC7 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TC7_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_ETS_CONTROL;

/** \brief MTL TC7 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TC7_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_HICREDIT;

/** \brief MTL TC7 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TC7_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_LOCREDIT;

/** \brief MTL TC7 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TC7_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_QUANTUM_WEIGHT;

/** \brief MTL TC7 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TC7_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TC7_SENDSLOPECREDIT;

/** \brief MTL TxQ7 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TXQ7_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TXQ7_DEBUG;

/** \brief MTL TxQ7 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TXQ7_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TXQ7_OPERATION_MODE;

/** \brief MTL TxQ7 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PORT_MTL_TCQ7_TXQ7_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_GETH_PORT_MTL_TCQ7_TXQ7_UNDERFLOW;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_GETH_PROT;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_GETH_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_GETH_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_GETH_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_GETH_RST_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_GETH_RST
{
       __IO Ifx_GETH_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_GETH_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_GETH_RST_STAT                   STAT;                   /**< \brief 8, Reset status register*/
} Ifx_GETH_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_ACCENGLOBAL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENGLOBAL object */
typedef volatile struct _Ifx_GETH_ACCENGLOBAL
{
       __IO Ifx_GETH_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_GETH_ACCEN_WRB_SRI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_GETH_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_GETH_ACCEN_RDB_SRI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_GETH_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_GETH_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GETH_ACCENGLOBAL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_ACCENMAC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENMAC object */
typedef volatile struct _Ifx_GETH_ACCENMAC
{
       __IO Ifx_GETH_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_GETH_ACCEN_WRB_SRI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_GETH_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_GETH_ACCEN_RDB_SRI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_GETH_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_GETH_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GETH_ACCENMAC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_ACCENCH_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENCH object */
typedef volatile struct _Ifx_GETH_ACCENCH
{
       __IO Ifx_GETH_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_GETH_ACCEN_WRB_SRI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_GETH_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_GETH_ACCEN_RDB_SRI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_GETH_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_GETH_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_GETH_ACCENCH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MDIO_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MDIO object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MDIO
{
       __IO Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_ADDRESS SINGLE_COMMAND_ADDRESS;    /**< \brief 0, MDIO Single Command Address*/
       __IO Ifx_GETH_PORT_CORE_MDIO_SINGLE_COMMAND_CONTROL_DATA SINGLE_COMMAND_CONTROL_DATA;    /**< \brief 4, MDIO Single Command Control Data*/
       __IO Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_ADDRESS CONTINUOUS_WRITE_ADDRESS;    /**< \brief 8, MDIO Continuous Write Address*/
       __IO Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_WRITE_DATA CONTINUOUS_WRITE_DATA;    /**< \brief C, MDIO Continuous Write Data*/
       __IO Ifx_GETH_PORT_CORE_MDIO_CONTINUOUS_SCAN_PORT_ENABLE CONTINUOUS_SCAN_PORT_ENABLE;    /**< \brief 10, MDIO Continuous Scan Port Enable*/
       __I  Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_STATUS INTERRUPT_STATUS;       /**< \brief 14, MDIO Interrupt Status*/
       __IO Ifx_GETH_PORT_CORE_MDIO_INTERRUPT_ENABLE INTERRUPT_ENABLE;       /**< \brief 18, MDIO Interrupt Enable*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORT_CONNECT_DISCONNECT_STATUS PORT_CONNECT_DISCONNECT_STATUS;    /**< \brief 1C, MDIO Port Connect Disconnect Status*/
       __IO Ifx_GETH_PORT_CORE_MDIO_CLAUSE_22_PORT CLAUSE_22_PORT;         /**< \brief 20, MDIO Clause 22 Port*/
       __IO Ifx_GETH_PORT_CORE_MDIO_PORT_NX4_INDIRECT_CONTROL PORT_NX4_INDIRECT_CONTROL;    /**< \brief 24, MDIO Port Nx4 Indirect Control*/
       __I  Ifx_UReg_8Bit                       reserved_28[8];         /**< \brief 28, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_DEVICE_IN_USE PORTNX4P0_DEVICE_IN_USE;    /**< \brief 30, MDIO PortNx4P0 Device In Use*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_LINK_STATUS PORTNX4P0_LINK_STATUS;    /**< \brief 34, MDIO PortNx4P0 Link Status*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P0_ALIVE_STATUS PORTNX4P0_ALIVE_STATUS;    /**< \brief 38, MDIO PortNx4P0 Alive Status*/
       __I  Ifx_UReg_8Bit                       reserved_3C[4];         /**< \brief 3C, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_DEVICE_IN_USE PORTNX4P1_DEVICE_IN_USE;    /**< \brief 40, MDIO PortNx4P1 Device In Use*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_LINK_STATUS PORTNX4P1_LINK_STATUS;    /**< \brief 44, MDIO PortNx4P1 Link Status*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P1_ALIVE_STATUS PORTNX4P1_ALIVE_STATUS;    /**< \brief 48, MDIO PortNx4P1 Alive Status*/
       __I  Ifx_UReg_8Bit                       reserved_4C[4];         /**< \brief 4C, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_DEVICE_IN_USE PORTNX4P2_DEVICE_IN_USE;    /**< \brief 50, MDIO PortNx4P2 Device In Use*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_LINK_STATUS PORTNX4P2_LINK_STATUS;    /**< \brief 54, MDIO PortNx4P2 Link Status*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P2_ALIVE_STATUS PORTNX4P2_ALIVE_STATUS;    /**< \brief 58, MDIO PortNx4P2 Alive Status*/
       __I  Ifx_UReg_8Bit                       reserved_5C[4];         /**< \brief 5C, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_DEVICE_IN_USE PORTNX4P3_DEVICE_IN_USE;    /**< \brief 60, MDIO PortNx4P3 Device In Use*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_LINK_STATUS PORTNX4P3_LINK_STATUS;    /**< \brief 64, MDIO PortNx4P3 Link Status*/
       __I  Ifx_GETH_PORT_CORE_MDIO_PORTNX4P3_ALIVE_STATUS PORTNX4P3_ALIVE_STATUS;    /**< \brief 68, MDIO PortNx4P3 Alive Status*/
} Ifx_GETH_PORT_CORE_MDIO;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS0_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS0 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS0
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS0_HIGH HIGH;                   /**< \brief 0, MAC Address0 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS0_LOW  LOW;                    /**< \brief 4, MAC Address0 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS1_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS1 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS1
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS1_HIGH HIGH;                   /**< \brief 0, MAC Address1 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS1_LOW  LOW;                    /**< \brief 4, MAC Address1 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS2_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS2 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS2
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS2_HIGH HIGH;                   /**< \brief 0, MAC Address2 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS2_LOW  LOW;                    /**< \brief 4, MAC Address2 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS3_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS3 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS3
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS3_HIGH HIGH;                   /**< \brief 0, MAC Address3 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS3_LOW  LOW;                    /**< \brief 4, MAC Address3 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS3;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS4_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS4 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS4
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS4_HIGH HIGH;                   /**< \brief 0, MAC Address4 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS4_LOW  LOW;                    /**< \brief 4, MAC Address4 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS4;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS5_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS5 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS5
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS5_HIGH HIGH;                   /**< \brief 0, MAC Address5 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS5_LOW  LOW;                    /**< \brief 4, MAC Address5 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS5;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS6_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS6 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS6
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS6_HIGH HIGH;                   /**< \brief 0, MAC Address6 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS6_LOW  LOW;                    /**< \brief 4, MAC Address6 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS6;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS7_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS7 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS7
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS7_HIGH HIGH;                   /**< \brief 0, MAC Address7 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS7_LOW  LOW;                    /**< \brief 4, MAC Address7 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS7;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS8_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS8 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS8
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS8_HIGH HIGH;                   /**< \brief 0, MAC Address8 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS8_LOW  LOW;                    /**< \brief 4, MAC Address8 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS8;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS9_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS9 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS9
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS9_HIGH HIGH;                   /**< \brief 0, MAC Address9 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS9_LOW  LOW;                    /**< \brief 4, MAC Address9 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS9;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS10_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS10 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS10
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS10_HIGH HIGH;                   /**< \brief 0, MAC Address10 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS10_LOW LOW;                    /**< \brief 4, MAC Address10 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS10;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS11_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS11 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS11
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS11_HIGH HIGH;                   /**< \brief 0, MAC Address11 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS11_LOW LOW;                    /**< \brief 4, MAC Address11 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS11;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS12_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS12 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS12
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS12_HIGH HIGH;                   /**< \brief 0, MAC Address12 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS12_LOW LOW;                    /**< \brief 4, MAC Address12 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS12;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS13_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS13 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS13
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS13_HIGH HIGH;                   /**< \brief 0, MAC Address13 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS13_LOW LOW;                    /**< \brief 4, MAC Address13 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS13;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS14_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS14 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS14
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS14_HIGH HIGH;                   /**< \brief 0, MAC Address14 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS14_LOW LOW;                    /**< \brief 4, MAC Address14 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS14;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS15_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS15 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS15
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS15_HIGH HIGH;                   /**< \brief 0, MAC Address15 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS15_LOW LOW;                    /**< \brief 4, MAC Address15 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS15;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS16_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS16 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS16
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS16_HIGH HIGH;                   /**< \brief 0, MAC Address16 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS16_LOW LOW;                    /**< \brief 4, MAC Address16 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS16;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS17_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS17 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS17
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS17_HIGH HIGH;                   /**< \brief 0, MAC Address17 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS17_LOW LOW;                    /**< \brief 4, MAC Address17 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS17;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS18_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS18 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS18
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS18_HIGH HIGH;                   /**< \brief 0, MAC Address18 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS18_LOW LOW;                    /**< \brief 4, MAC Address18 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS18;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS19_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS19 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS19
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS19_HIGH HIGH;                   /**< \brief 0, MAC Address19 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS19_LOW LOW;                    /**< \brief 4, MAC Address19 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS19;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS20_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS20 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS20
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS20_HIGH HIGH;                   /**< \brief 0, MAC Address20 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS20_LOW LOW;                    /**< \brief 4, MAC Address20 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS20;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS21_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS21 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS21
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS21_HIGH HIGH;                   /**< \brief 0, MAC Address21 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS21_LOW LOW;                    /**< \brief 4, MAC Address21 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS21;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS22_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS22 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS22
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS22_HIGH HIGH;                   /**< \brief 0, MAC Address22 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS22_LOW LOW;                    /**< \brief 4, MAC Address22 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS22;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS23_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS23 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS23
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS23_HIGH HIGH;                   /**< \brief 0, MAC Address23 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS23_LOW LOW;                    /**< \brief 4, MAC Address23 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS23;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS24_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS24 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS24
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS24_HIGH HIGH;                   /**< \brief 0, MAC Address24 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS24_LOW LOW;                    /**< \brief 4, MAC Address24 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS24;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS25_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS25 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS25
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS25_HIGH HIGH;                   /**< \brief 0, MAC Address25 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS25_LOW LOW;                    /**< \brief 4, MAC Address25 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS25;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS26_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS26 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS26
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS26_HIGH HIGH;                   /**< \brief 0, MAC Address26 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS26_LOW LOW;                    /**< \brief 4, MAC Address26 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS26;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS27_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS27 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS27
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS27_HIGH HIGH;                   /**< \brief 0, MAC Address27 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS27_LOW LOW;                    /**< \brief 4, MAC Address27 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS27;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS28_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS28 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS28
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS28_HIGH HIGH;                   /**< \brief 0, MAC Address28 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS28_LOW LOW;                    /**< \brief 4, MAC Address28 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS28;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS29_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS29 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS29
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS29_HIGH HIGH;                   /**< \brief 0, MAC Address29 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS29_LOW LOW;                    /**< \brief 4, MAC Address29 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS29;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS30_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS30 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS30
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS30_HIGH HIGH;                   /**< \brief 0, MAC Address30 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS30_LOW LOW;                    /**< \brief 4, MAC Address30 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS30;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_MACADDRESS31_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MACADDRESS31 object */
typedef volatile struct _Ifx_GETH_PORT_CORE_MACADDRESS31
{
       __IO Ifx_GETH_PORT_CORE_MACADDRESS31_HIGH HIGH;                   /**< \brief 0, MAC Address31 High*/
       __IO Ifx_GETH_PORT_CORE_MACADDRESS31_LOW LOW;                    /**< \brief 4, MAC Address31 Low*/
} Ifx_GETH_PORT_CORE_MACADDRESS31;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_CORE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CORE object */
typedef volatile struct _Ifx_GETH_PORT_CORE
{
       __IO Ifx_GETH_PORT_CORE_MAC_TX_CONFIGURATION MAC_TX_CONFIGURATION;    /**< \brief 0, MAC Tx Configuration*/
       __IO Ifx_GETH_PORT_CORE_MAC_RX_CONFIGURATION MAC_RX_CONFIGURATION;    /**< \brief 4, MAC Rx Configuration*/
       __IO Ifx_GETH_PORT_CORE_MAC_PACKET_FILTER MAC_PACKET_FILTER;      /**< \brief 8, MAC Packet Filter*/
       __IO Ifx_GETH_PORT_CORE_MAC_WD_JB_TIMEOUT MAC_WD_JB_TIMEOUT;      /**< \brief C, MAC WD JB Timeout*/
       __I  Ifx_UReg_8Bit                       reserved_10[64];        /**< \brief 10, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_CTRL MAC_VLAN_TAG_CTRL;      /**< \brief 50, MAC VLAN Tag Ctrl*/
       union
       {
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_DATA MAC_VLAN_TAG_DATA;      /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER0 MAC_VLAN_TAG_FILTER0;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER1 MAC_VLAN_TAG_FILTER1;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER2 MAC_VLAN_TAG_FILTER2;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER3 MAC_VLAN_TAG_FILTER3;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER4 MAC_VLAN_TAG_FILTER4;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER5 MAC_VLAN_TAG_FILTER5;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER6 MAC_VLAN_TAG_FILTER6;    /**< \brief 54, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_FILTER7 MAC_VLAN_TAG_FILTER7;    /**< \brief 54, */
       };
       __IO Ifx_GETH_PORT_CORE_MAC_VLAN_HASH_TABLE MAC_VLAN_HASH_TABLE;    /**< \brief 58, MAC VLAN Hash Table*/
       __I  Ifx_UReg_8Bit                       reserved_5C[4];         /**< \brief 5C, \internal Reserved */
       union
       {
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL    MAC_VLAN_INCL;          /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL0   MAC_VLAN_INCL0;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL1   MAC_VLAN_INCL1;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL2   MAC_VLAN_INCL2;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL3   MAC_VLAN_INCL3;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL4   MAC_VLAN_INCL4;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL5   MAC_VLAN_INCL5;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL6   MAC_VLAN_INCL6;         /**< \brief 60, */
            __IO Ifx_GETH_PORT_CORE_MAC_VLAN_INCL7   MAC_VLAN_INCL7;         /**< \brief 60, */
       };
       __IO Ifx_GETH_PORT_CORE_MAC_INNER_VLAN_INCL MAC_INNER_VLAN_INCL;    /**< \brief 64, MAC Inner VLAN Incl*/
       __I  Ifx_UReg_8Bit                       reserved_68[4];         /**< \brief 68, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_RX_ETH_TYPE_MATCH MAC_RX_ETH_TYPE_MATCH;    /**< \brief 6C, MAC Rx Eth Type Match*/
       __IO Ifx_GETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL MAC_Q0_TX_FLOW_CTRL;    /**< \brief 70, MAC Q0 Tx Flow Ctrl*/
       __I  Ifx_UReg_8Bit                       reserved_74[28];        /**< \brief 74, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_RX_FLOW_CTRL MAC_RX_FLOW_CTRL;       /**< \brief 90, MAC Rx Flow Ctrl*/
       __IO Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL4    MAC_RXQ_CTRL4;          /**< \brief 94, MAC RxQ Ctrl4*/
       __IO Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL5    MAC_RXQ_CTRL5;          /**< \brief 98, MAC RxQ Ctrl5*/
       __I  Ifx_UReg_8Bit                       reserved_9C[4];         /**< \brief 9C, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL0    MAC_RXQ_CTRL0;          /**< \brief A0, MAC RxQ Ctrl0*/
       __IO Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL1    MAC_RXQ_CTRL1;          /**< \brief A4, MAC RxQ Ctrl1*/
       __IO Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL2    MAC_RXQ_CTRL2;          /**< \brief A8, MAC RxQ Ctrl2*/
       __IO Ifx_GETH_PORT_CORE_MAC_RXQ_CTRL3    MAC_RXQ_CTRL3;          /**< \brief AC, MAC RxQ Ctrl3*/
       __I  Ifx_GETH_PORT_CORE_MAC_INTERRUPT_STATUS MAC_INTERRUPT_STATUS;    /**< \brief B0, MAC Interrupt Status*/
       __IO Ifx_GETH_PORT_CORE_MAC_INTERRUPT_ENABLE MAC_INTERRUPT_ENABLE;    /**< \brief B4, MAC Interrupt Enable*/
       __I  Ifx_GETH_PORT_CORE_MAC_RX_TX_STATUS MAC_RX_TX_STATUS;       /**< \brief B8, MAC Rx Tx Status*/
       __I  Ifx_UReg_8Bit                       reserved_BC[4];         /**< \brief BC, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_PMT_CONTROL_STATUS MAC_PMT_CONTROL_STATUS;    /**< \brief C0, MAC PMT Control Status*/
       union
       {
            __IO Ifx_GETH_PORT_CORE_MAC_RWK_PACKET_FILTER MAC_RWK_PACKET_FILTER;    /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER0_1_CRC RWK_FILTER0_1_CRC;      /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER0_3_COMMAND RWK_FILTER0_3_COMMAND;    /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER0_3_OFFSET RWK_FILTER0_3_OFFSET;    /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER0_BYTE_MASK RWK_FILTER0_BYTE_MASK;    /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER1_BYTE_MASK RWK_FILTER1_BYTE_MASK;    /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER2_3_CRC RWK_FILTER2_3_CRC;      /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER2_BYTE_MASK RWK_FILTER2_BYTE_MASK;    /**< \brief C4, */
            __IO Ifx_GETH_PORT_CORE_RWK_FILTER3_BYTE_MASK RWK_FILTER3_BYTE_MASK;    /**< \brief C4, */
       };
       __I  Ifx_UReg_8Bit                       reserved_C8[8];         /**< \brief C8, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_LPI_CONTROL_STATUS MAC_LPI_CONTROL_STATUS;    /**< \brief D0, MAC LPI Control Status*/
       __IO Ifx_GETH_PORT_CORE_MAC_LPI_TIMERS_CONTROL MAC_LPI_TIMERS_CONTROL;    /**< \brief D4, MAC LPI Timers Control*/
       __IO Ifx_GETH_PORT_CORE_MAC_LPI_AUTO_ENTRY_TIMER MAC_LPI_AUTO_ENTRY_TIMER;    /**< \brief D8, MAC LPI Auto Entry Timer*/
       __IO Ifx_GETH_PORT_CORE_MAC_1US_TIC_COUNTER MAC_1US_TIC_COUNTER;    /**< \brief DC, MAC 1US Tic Counter*/
       __I  Ifx_UReg_8Bit                       reserved_E0[48];        /**< \brief E0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_MAC_VERSION      MAC_VERSION;            /**< \brief 110, MAC Version*/
       __I  Ifx_GETH_PORT_CORE_MAC_DEBUG        MAC_DEBUG;              /**< \brief 114, MAC Debug*/
       __I  Ifx_UReg_8Bit                       reserved_118[4];        /**< \brief 118, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_MAC_HW_FEATURE0  MAC_HW_FEATURE0;        /**< \brief 11C, MAC HW Feature0*/
       __I  Ifx_GETH_PORT_CORE_MAC_HW_FEATURE1  MAC_HW_FEATURE1;        /**< \brief 120, MAC HW Feature1*/
       __I  Ifx_GETH_PORT_CORE_MAC_HW_FEATURE2  MAC_HW_FEATURE2;        /**< \brief 124, MAC HW Feature2*/
       __I  Ifx_GETH_PORT_CORE_MAC_HW_FEATURE3  MAC_HW_FEATURE3;        /**< \brief 128, MAC HW Feature3*/
       __I  Ifx_GETH_PORT_CORE_MAC_HW_FEATURE4  MAC_HW_FEATURE4;        /**< \brief 12C, MAC HW Feature4*/
       __I  Ifx_UReg_8Bit                       reserved_130[16];       /**< \brief 130, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_EXTENDED_CONFIGURATION MAC_EXTENDED_CONFIGURATION;    /**< \brief 140, MAC Extended Configuration*/
       __IO Ifx_GETH_PORT_CORE_MAC_EXT_CFG1     MAC_EXT_CFG1;           /**< \brief 144, MAC Ext Cfg1*/
       __I  Ifx_UReg_8Bit                       reserved_148[8];        /**< \brief 148, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_DPP_FSM_INTERRUPT_STATUS MAC_DPP_FSM_INTERRUPT_STATUS;    /**< \brief 150, MAC DPP FSM Interrupt Status*/
       __I  Ifx_GETH_PORT_CORE_MAC_AXI_SLV_DPE_ADDR_STATUS MAC_AXI_SLV_DPE_ADDR_STATUS;    /**< \brief 154, MAC AXI SLV DPE Addr Status*/
       __IO Ifx_GETH_PORT_CORE_MAC_FSM_CONTROL  MAC_FSM_CONTROL;        /**< \brief 158, MAC FSM Control*/
       __IO Ifx_GETH_PORT_CORE_MAC_FSM_ACT_TIMER MAC_FSM_ACT_TIMER;      /**< \brief 15C, MAC FSM ACT Timer*/
       __IO Ifx_GETH_PORT_CORE_SNPS_SCS_REG1    SNPS_SCS_REG1;          /**< \brief 160, SNPS SCS REG1*/
       __IO Ifx_GETH_PORT_CORE_MAC_SCSR_CONTROL MAC_SCSR_CONTROL;       /**< \brief 164, MAC SCSR Control*/
       __I  Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_STATUS MAC_SCSR_PARITY_STATUS;    /**< \brief 168, MAC SCSR Parity Status*/
       __I  Ifx_GETH_PORT_CORE_MAC_SCSR_PARITY_ERR_COUNT MAC_SCSR_PARITY_ERR_COUNT;    /**< \brief 16C, MAC SCSR Parity Err Count*/
       __I  Ifx_UReg_8Bit                       reserved_170[36];       /**< \brief 170, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_CFG MAC_FLEX_HDR_CFG;       /**< \brief 194, MAC Flex Hdr Cfg*/
       __IO Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_LOW MAC_FLEX_HDR_LOW;       /**< \brief 198, MAC Flex Hdr Low*/
       __IO Ifx_GETH_PORT_CORE_MAC_FLEX_HDR_HIGH MAC_FLEX_HDR_HIGH;      /**< \brief 19C, MAC Flex Hdr High*/
       __I  Ifx_UReg_8Bit                       reserved_1A0[96];       /**< \brief 1A0, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MDIO             MDIO;                   /**< \brief 200, */
       __I  Ifx_UReg_8Bit                       reserved_26C[20];       /**< \brief 26C, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_FPE_CTRL_STS MAC_FPE_CTRL_STS;       /**< \brief 280, MAC FPE CTRL STS*/
       __I  Ifx_UReg_8Bit                       reserved_284[12];       /**< \brief 284, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_CSR_SW_CTRL  MAC_CSR_SW_CTRL;        /**< \brief 290, MAC CSR SW Ctrl*/
       __I  Ifx_UReg_8Bit                       reserved_294[108];      /**< \brief 294, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS0      MACADDRESS0;            /**< \brief 300, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS1      MACADDRESS1;            /**< \brief 308, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS2      MACADDRESS2;            /**< \brief 310, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS3      MACADDRESS3;            /**< \brief 318, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS4      MACADDRESS4;            /**< \brief 320, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS5      MACADDRESS5;            /**< \brief 328, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS6      MACADDRESS6;            /**< \brief 330, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS7      MACADDRESS7;            /**< \brief 338, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS8      MACADDRESS8;            /**< \brief 340, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS9      MACADDRESS9;            /**< \brief 348, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS10     MACADDRESS10;           /**< \brief 350, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS11     MACADDRESS11;           /**< \brief 358, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS12     MACADDRESS12;           /**< \brief 360, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS13     MACADDRESS13;           /**< \brief 368, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS14     MACADDRESS14;           /**< \brief 370, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS15     MACADDRESS15;           /**< \brief 378, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS16     MACADDRESS16;           /**< \brief 380, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS17     MACADDRESS17;           /**< \brief 388, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS18     MACADDRESS18;           /**< \brief 390, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS19     MACADDRESS19;           /**< \brief 398, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS20     MACADDRESS20;           /**< \brief 3A0, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS21     MACADDRESS21;           /**< \brief 3A8, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS22     MACADDRESS22;           /**< \brief 3B0, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS23     MACADDRESS23;           /**< \brief 3B8, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS24     MACADDRESS24;           /**< \brief 3C0, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS25     MACADDRESS25;           /**< \brief 3C8, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS26     MACADDRESS26;           /**< \brief 3D0, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS27     MACADDRESS27;           /**< \brief 3D8, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS28     MACADDRESS28;           /**< \brief 3E0, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS29     MACADDRESS29;           /**< \brief 3E8, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS30     MACADDRESS30;           /**< \brief 3F0, */
       __IO Ifx_GETH_PORT_CORE_MACADDRESS31     MACADDRESS31;           /**< \brief 3F8, */
       __I  Ifx_UReg_8Bit                       reserved_400[768];      /**< \brief 400, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL MAC_INDIR_ACCESS_CTRL;    /**< \brief 700, MAC Indir Access Ctrl*/
       union
       {
            __IO Ifx_GETH_PORT_CORE_MAC_INDIR_ACCESS_DATA MAC_INDIR_ACCESS_DATA;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG0 MAC_DCHSEL_INDREG0;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG1 MAC_DCHSEL_INDREG1;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG10 MAC_DCHSEL_INDREG10;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG11 MAC_DCHSEL_INDREG11;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG12 MAC_DCHSEL_INDREG12;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG13 MAC_DCHSEL_INDREG13;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG14 MAC_DCHSEL_INDREG14;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG15 MAC_DCHSEL_INDREG15;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG16 MAC_DCHSEL_INDREG16;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG17 MAC_DCHSEL_INDREG17;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG18 MAC_DCHSEL_INDREG18;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG19 MAC_DCHSEL_INDREG19;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG2 MAC_DCHSEL_INDREG2;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG20 MAC_DCHSEL_INDREG20;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG21 MAC_DCHSEL_INDREG21;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG22 MAC_DCHSEL_INDREG22;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG23 MAC_DCHSEL_INDREG23;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG24 MAC_DCHSEL_INDREG24;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG25 MAC_DCHSEL_INDREG25;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG26 MAC_DCHSEL_INDREG26;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG27 MAC_DCHSEL_INDREG27;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG28 MAC_DCHSEL_INDREG28;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG29 MAC_DCHSEL_INDREG29;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG3 MAC_DCHSEL_INDREG3;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG30 MAC_DCHSEL_INDREG30;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG31 MAC_DCHSEL_INDREG31;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG4 MAC_DCHSEL_INDREG4;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG5 MAC_DCHSEL_INDREG5;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG6 MAC_DCHSEL_INDREG6;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG7 MAC_DCHSEL_INDREG7;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG8 MAC_DCHSEL_INDREG8;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DCHSEL_INDREG9 MAC_DCHSEL_INDREG9;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG0 MAC_DPCSEL_INDREG0;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG1 MAC_DPCSEL_INDREG1;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG10 MAC_DPCSEL_INDREG10;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG11 MAC_DPCSEL_INDREG11;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG12 MAC_DPCSEL_INDREG12;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG13 MAC_DPCSEL_INDREG13;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG14 MAC_DPCSEL_INDREG14;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG15 MAC_DPCSEL_INDREG15;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG16 MAC_DPCSEL_INDREG16;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG17 MAC_DPCSEL_INDREG17;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG18 MAC_DPCSEL_INDREG18;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG19 MAC_DPCSEL_INDREG19;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG2 MAC_DPCSEL_INDREG2;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG20 MAC_DPCSEL_INDREG20;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG21 MAC_DPCSEL_INDREG21;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG22 MAC_DPCSEL_INDREG22;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG23 MAC_DPCSEL_INDREG23;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG24 MAC_DPCSEL_INDREG24;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG25 MAC_DPCSEL_INDREG25;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG26 MAC_DPCSEL_INDREG26;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG27 MAC_DPCSEL_INDREG27;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG28 MAC_DPCSEL_INDREG28;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG29 MAC_DPCSEL_INDREG29;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG3 MAC_DPCSEL_INDREG3;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG30 MAC_DPCSEL_INDREG30;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG31 MAC_DPCSEL_INDREG31;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG4 MAC_DPCSEL_INDREG4;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG5 MAC_DPCSEL_INDREG5;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG6 MAC_DPCSEL_INDREG6;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG7 MAC_DPCSEL_INDREG7;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG8 MAC_DPCSEL_INDREG8;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_DPCSEL_INDREG9 MAC_DPCSEL_INDREG9;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_FPCSEL_INDREG0 MAC_FPCSEL_INDREG0;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG0 MAC_LPCSEL_INDREG0;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG1 MAC_LPCSEL_INDREG1;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG2 MAC_LPCSEL_INDREG2;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG3 MAC_LPCSEL_INDREG3;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG4 MAC_LPCSEL_INDREG4;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG5 MAC_LPCSEL_INDREG5;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG6 MAC_LPCSEL_INDREG6;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_LPCSEL_INDREG7 MAC_LPCSEL_INDREG7;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG0 MAC_PCCTRL_INDREG0;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG1 MAC_PCCTRL_INDREG1;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG10 MAC_PCCTRL_INDREG10;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG11 MAC_PCCTRL_INDREG11;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG12 MAC_PCCTRL_INDREG12;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG13 MAC_PCCTRL_INDREG13;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG14 MAC_PCCTRL_INDREG14;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG15 MAC_PCCTRL_INDREG15;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG2 MAC_PCCTRL_INDREG2;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG3 MAC_PCCTRL_INDREG3;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG4 MAC_PCCTRL_INDREG4;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG5 MAC_PCCTRL_INDREG5;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG6 MAC_PCCTRL_INDREG6;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG7 MAC_PCCTRL_INDREG7;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG8 MAC_PCCTRL_INDREG8;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCCTRL_INDREG9 MAC_PCCTRL_INDREG9;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG MAC_PCSTATUS_DA_INDREG;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG MAC_PCSTATUS_FILTER_EVENT_INDREG;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCSTATUS_L3L4_INDREG MAC_PCSTATUS_L3L4_INDREG;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG MAC_PCSTATUS_VLAN_INDREG;    /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG0 MAC_PCNTR_INDREG0;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG1 MAC_PCNTR_INDREG1;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG10 MAC_PCNTR_INDREG10;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG11 MAC_PCNTR_INDREG11;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG12 MAC_PCNTR_INDREG12;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG13 MAC_PCNTR_INDREG13;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG14 MAC_PCNTR_INDREG14;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG15 MAC_PCNTR_INDREG15;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG2 MAC_PCNTR_INDREG2;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG3 MAC_PCNTR_INDREG3;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG4 MAC_PCNTR_INDREG4;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG5 MAC_PCNTR_INDREG5;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG6 MAC_PCNTR_INDREG6;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG7 MAC_PCNTR_INDREG7;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG8 MAC_PCNTR_INDREG8;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_PCNTR_INDREG9 MAC_PCNTR_INDREG9;      /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG0 MAC_VPCSEL_INDREG0;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG1 MAC_VPCSEL_INDREG1;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG2 MAC_VPCSEL_INDREG2;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG3 MAC_VPCSEL_INDREG3;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG4 MAC_VPCSEL_INDREG4;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG5 MAC_VPCSEL_INDREG5;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG6 MAC_VPCSEL_INDREG6;     /**< \brief 704, */
            __IO Ifx_GETH_PORT_CORE_MAC_VPCSEL_INDREG7 MAC_VPCSEL_INDREG7;     /**< \brief 704, */
       };
       __IO Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_ENABLE MAC_PCTH_INTR_ENABLE;    /**< \brief 708, MAC PCTH Intr Enable*/
       __IO Ifx_GETH_PORT_CORE_MAC_PCTH_INTR_STATUS MAC_PCTH_INTR_STATUS;    /**< \brief 70C, MAC PCTH Intr Status*/
       __I  Ifx_UReg_8Bit                       reserved_710[32];       /**< \brief 710, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_ENABLE MAC_PCTW_INTR_ENABLE;    /**< \brief 730, MAC PCTW Intr Enable*/
       __IO Ifx_GETH_PORT_CORE_MAC_PCTW_INTR_STATUS MAC_PCTW_INTR_STATUS;    /**< \brief 734, MAC PCTW Intr Status*/
       __I  Ifx_UReg_8Bit                       reserved_738[200];      /**< \brief 738, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MMC_CONTROL      MMC_CONTROL;            /**< \brief 800, MMC Control*/
       __I  Ifx_GETH_PORT_CORE_MMC_RX_INTERRUPT MMC_RX_INTERRUPT;       /**< \brief 804, MMC Rx Interrupt*/
       __I  Ifx_GETH_PORT_CORE_MMC_TX_INTERRUPT MMC_TX_INTERRUPT;       /**< \brief 808, MMC Tx Interrupt*/
       __IO Ifx_GETH_PORT_CORE_MMC_RECEIVE_INTERRUPT_ENABLE MMC_RECEIVE_INTERRUPT_ENABLE;    /**< \brief 80C, MMC Receive Interrupt Enable*/
       __IO Ifx_GETH_PORT_CORE_MMC_TRANSMIT_INTERRUPT_ENABLE MMC_TRANSMIT_INTERRUPT_ENABLE;    /**< \brief 810, MMC Transmit Interrupt Enable*/
       __I  Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_LOW TX_OCTET_COUNT_GOOD_BAD_LOW;    /**< \brief 814, Tx Octet Count Good Bad Low*/
       __I  Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_HIGH TX_OCTET_COUNT_GOOD_BAD_HIGH;    /**< \brief 818, Tx Octet Count Good Bad High*/
       __I  Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_LOW TX_PACKET_COUNT_GOOD_BAD_LOW;    /**< \brief 81C, Tx Packet Count Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_820[4];        /**< \brief 820, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_LOW TX_BROADCAST_PACKETS_GOOD_LOW;    /**< \brief 824, Tx Broadcast Packets Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_828[4];        /**< \brief 828, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_LOW TX_MULTICAST_PACKETS_GOOD_LOW;    /**< \brief 82C, Tx Multicast Packets Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_830[4];        /**< \brief 830, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_LOW TX_64OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 834, Tx 64Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_838[4];        /**< \brief 838, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW TX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 83C, Tx 65To127Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_840[4];        /**< \brief 840, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW TX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 844, Tx 128To255Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_848[4];        /**< \brief 848, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW TX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 84C, Tx 256To511Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_850[4];        /**< \brief 850, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW TX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 854, Tx 512To1023Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_858[4];        /**< \brief 858, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 85C, Tx 1024ToMaxOctets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_860[4];        /**< \brief 860, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_LOW TX_UNICAST_PACKETS_GOOD_BAD_LOW;    /**< \brief 864, Tx Unicast Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_868[4];        /**< \brief 868, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_LOW TX_MULTICAST_PACKETS_GOOD_BAD_LOW;    /**< \brief 86C, Tx Multicast Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_870[4];        /**< \brief 870, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_LOW TX_BROADCAST_PACKETS_GOOD_BAD_LOW;    /**< \brief 874, Tx Broadcast Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_878[4];        /**< \brief 878, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_LOW TX_UNDERFLOW_ERROR_PACKETS_LOW;    /**< \brief 87C, Tx Underflow Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_880[4];        /**< \brief 880, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_LOW TX_OCTET_COUNT_GOOD_LOW;    /**< \brief 884, Tx Octet Count Good Low*/
       __I  Ifx_GETH_PORT_CORE_TX_OCTET_COUNT_GOOD_HIGH TX_OCTET_COUNT_GOOD_HIGH;    /**< \brief 888, Tx Octet Count Good High*/
       __I  Ifx_GETH_PORT_CORE_TX_PACKET_COUNT_GOOD_LOW TX_PACKET_COUNT_GOOD_LOW;    /**< \brief 88C, Tx Packet Count Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_890[4];        /**< \brief 890, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_PAUSE_PACKETS_LOW TX_PAUSE_PACKETS_LOW;    /**< \brief 894, Tx Pause Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_898[4];        /**< \brief 898, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_LOW TX_VLAN_PACKETS_GOOD_LOW;    /**< \brief 89C, Tx VLAN Packets Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_8A0[4];        /**< \brief 8A0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_LPI_USEC_CNTR TX_LPI_USEC_CNTR;       /**< \brief 8A4, Tx LPI USEC Cntr*/
       __I  Ifx_GETH_PORT_CORE_TX_LPI_TRAN_CNTR TX_LPI_TRAN_CNTR;       /**< \brief 8A8, Tx LPI Tran Cntr*/
       __I  Ifx_UReg_8Bit                       reserved_8AC[84];       /**< \brief 8AC, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_PACKET_COUNT_GOOD_BAD_LOW RX_PACKET_COUNT_GOOD_BAD_LOW;    /**< \brief 900, Rx Packet Count Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_904[4];        /**< \brief 904, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_LOW RX_OCTET_COUNT_GOOD_BAD_LOW;    /**< \brief 908, Rx Octet Count Good Bad Low*/
       __I  Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_HIGH RX_OCTET_COUNT_GOOD_BAD_HIGH;    /**< \brief 90C, Rx Octet Count Good Bad High*/
       __I  Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_LOW RX_OCTET_COUNT_GOOD_LOW;    /**< \brief 910, Rx Octet Count Good Low*/
       __I  Ifx_GETH_PORT_CORE_RX_OCTET_COUNT_GOOD_HIGH RX_OCTET_COUNT_GOOD_HIGH;    /**< \brief 914, Rx Octet Count Good High*/
       __I  Ifx_GETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_LOW RX_BROADCAST_PACKETS_GOOD_LOW;    /**< \brief 918, Rx Broadcast Packets Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_91C[4];        /**< \brief 91C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_LOW RX_MULTICAST_PACKETS_GOOD_LOW;    /**< \brief 920, Rx Multicast Packets Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_924[4];        /**< \brief 924, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_CRC_ERROR_PACKETS_LOW RX_CRC_ERROR_PACKETS_LOW;    /**< \brief 928, Rx CRC Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_92C[4];        /**< \brief 92C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_RUNT_ERROR_PACKETS RX_RUNT_ERROR_PACKETS;    /**< \brief 930, Rx Runt Error Packets*/
       __I  Ifx_GETH_PORT_CORE_RX_JABBER_ERROR_PACKETS RX_JABBER_ERROR_PACKETS;    /**< \brief 934, Rx Jabber Error Packets*/
       __I  Ifx_GETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD RX_UNDERSIZE_PACKETS_GOOD;    /**< \brief 938, Rx Undersize Packets Good*/
       __I  Ifx_GETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD RX_OVERSIZE_PACKETS_GOOD;    /**< \brief 93C, Rx Oversize Packets Good*/
       __I  Ifx_GETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_LOW RX_64OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 940, Rx 64Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_944[4];        /**< \brief 944, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW RX_65TO127OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 948, Rx 65To127Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_94C[4];        /**< \brief 94C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW RX_128TO255OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 950, Rx 128To255Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_954[4];        /**< \brief 954, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW RX_256TO511OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 958, Rx 256To511Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_95C[4];        /**< \brief 95C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW RX_512TO1023OCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 960, Rx 512To1023Octets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_964[4];        /**< \brief 964, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_LOW;    /**< \brief 968, Rx 1024ToMaxOctets Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_96C[4];        /**< \brief 96C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_LOW RX_UNICAST_PACKETS_GOOD_LOW;    /**< \brief 970, Rx Unicast Packets Good Low*/
       __I  Ifx_UReg_8Bit                       reserved_974[4];        /**< \brief 974, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_LOW RX_LENGTH_ERROR_PACKETS_LOW;    /**< \brief 978, Rx Length Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_97C[4];        /**< \brief 97C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_OUTOFRANGE_PACKETS_LOW RX_OUTOFRANGE_PACKETS_LOW;    /**< \brief 980, Rx OutofRange Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_984[4];        /**< \brief 984, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_PAUSE_PACKETS_LOW RX_PAUSE_PACKETS_LOW;    /**< \brief 988, Rx Pause Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_98C[4];        /**< \brief 98C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_FIFOOVERFLOW_PACKETS_LOW RX_FIFOOVERFLOW_PACKETS_LOW;    /**< \brief 990, Rx FIFOOverflow Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_994[4];        /**< \brief 994, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_LOW RX_VLAN_PACKETS_GOOD_BAD_LOW;    /**< \brief 998, Rx VLAN Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_99C[4];        /**< \brief 99C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS RX_WATCHDOG_ERROR_PACKETS;    /**< \brief 9A0, Rx Watchdog Error Packets*/
       __I  Ifx_GETH_PORT_CORE_RX_LPI_USEC_CNTR RX_LPI_USEC_CNTR;       /**< \brief 9A4, Rx LPI USEC Cntr*/
       __I  Ifx_GETH_PORT_CORE_RX_LPI_TRAN_CNTR RX_LPI_TRAN_CNTR;       /**< \brief 9A8, Rx LPI Tran Cntr*/
       __I  Ifx_GETH_PORT_CORE_RX_DISCARD_PACKETS_GOOD_BAD_LOW RX_DISCARD_PACKETS_GOOD_BAD_LOW;    /**< \brief 9AC, Rx Discard Packets Good Bad Low*/
       __I  Ifx_UReg_8Bit                       reserved_9B0[4];        /**< \brief 9B0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_LOW RX_DISCARD_OCTETS_GOOD_BAD_LOW;    /**< \brief 9B4, Rx Discard Octets Good Bad Low*/
       __I  Ifx_GETH_PORT_CORE_RX_DISCARD_OCTETS_GOOD_BAD_HIGH RX_DISCARD_OCTETS_GOOD_BAD_HIGH;    /**< \brief 9B8, Rx Discard Octets Good Bad High*/
       __I  Ifx_GETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS RX_ALIGNMENT_ERROR_PACKETS;    /**< \brief 9BC, Rx Alignment Error Packets*/
       __I  Ifx_UReg_8Bit                       reserved_9C0[48];       /**< \brief 9C0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_SGF_PASS_PKTCNT  SGF_PASS_PKTCNT;        /**< \brief 9F0, SGF Pass PktCnt*/
       __I  Ifx_GETH_PORT_CORE_SGF_FAIL_PKTCNT  SGF_FAIL_PKTCNT;        /**< \brief 9F4, SGF Fail PktCnt*/
       __I  Ifx_UReg_8Bit                       reserved_9F8[8];        /**< \brief 9F8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT MMC_FPE_TX_INTERRUPT;    /**< \brief A00, MMC FPE Tx Interrupt*/
       __IO Ifx_GETH_PORT_CORE_MMC_FPE_TX_INTERRUPT_MASK MMC_FPE_TX_INTERRUPT_MASK;    /**< \brief A04, MMC FPE Tx Interrupt Mask*/
       __I  Ifx_GETH_PORT_CORE_MMC_TX_FPE_FRAGMENT_CNTR MMC_TX_FPE_FRAGMENT_CNTR;    /**< \brief A08, MMC Tx FPE Fragment Cntr*/
       __I  Ifx_GETH_PORT_CORE_MMC_TX_HOLD_REQ_CNTR MMC_TX_HOLD_REQ_CNTR;    /**< \brief A0C, MMC Tx Hold Req Cntr*/
       __I  Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_LOW MMC_TX_GATE_ORUN_CNTR_LOW;    /**< \brief A10, MMC Tx Gate Orun Cntr Low*/
       __I  Ifx_GETH_PORT_CORE_MMC_TX_GATE_ORUN_CNTR_HIGH MMC_TX_GATE_ORUN_CNTR_HIGH;    /**< \brief A14, MMC Tx Gate Orun Cntr High*/
       __I  Ifx_UReg_8Bit                       reserved_A18[8];        /**< \brief A18, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT MMC_FPE_RX_INTERRUPT;    /**< \brief A20, MMC FPE Rx Interrupt*/
       __IO Ifx_GETH_PORT_CORE_MMC_FPE_RX_INTERRUPT_MASK MMC_FPE_RX_INTERRUPT_MASK;    /**< \brief A24, MMC FPE Rx Interrupt Mask*/
       __I  Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_ERR_CNTR MMC_RX_PACKET_ASSEMBLY_ERR_CNTR;    /**< \brief A28, MMC Rx Packet Assembly Err Cntr*/
       __I  Ifx_GETH_PORT_CORE_MMC_RX_PACKET_SMD_ERR_CNTR MMC_RX_PACKET_SMD_ERR_CNTR;    /**< \brief A2C, MMC Rx Packet SMD Err Cntr*/
       __I  Ifx_GETH_PORT_CORE_MMC_RX_PACKET_ASSEMBLY_OK_CNTR MMC_RX_PACKET_ASSEMBLY_OK_CNTR;    /**< \brief A30, MMC Rx Packet Assembly OK Cntr*/
       __I  Ifx_GETH_PORT_CORE_MMC_RX_FPE_FRAGMENT_CNTR MMC_RX_FPE_FRAGMENT_CNTR;    /**< \brief A34, MMC Rx FPE Fragment Cntr*/
       __I  Ifx_UReg_8Bit                       reserved_A38[8];        /**< \brief A38, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS TX_SINGLE_COLLISION_GOOD_PACKETS;    /**< \brief A40, Tx Single Collision Good Packets*/
       __I  Ifx_GETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS TX_MULTIPLE_COLLISION_GOOD_PACKETS;    /**< \brief A44, Tx Multiple Collision Good Packets*/
       __I  Ifx_GETH_PORT_CORE_TX_DEFERRED_PACKETS TX_DEFERRED_PACKETS;    /**< \brief A48, Tx Deferred Packets*/
       __I  Ifx_GETH_PORT_CORE_TX_LATE_COLLISION_PACKETS TX_LATE_COLLISION_PACKETS;    /**< \brief A4C, Tx Late Collision Packets*/
       __I  Ifx_GETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS TX_EXCESSIVE_COLLISION_PACKETS;    /**< \brief A50, Tx Excessive Collision Packets*/
       __I  Ifx_GETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS TX_CARRIER_ERROR_PACKETS;    /**< \brief A54, Tx Carrier Error Packets*/
       __I  Ifx_GETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR TX_EXCESSIVE_DEFERRAL_ERROR;    /**< \brief A58, Tx Excessive Deferral Error*/
       __IO Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK MMC_IPC_RX_INTERRUPT_MASK;    /**< \brief A5C, MMC IPC Rx Interrupt Mask*/
       __I  Ifx_GETH_PORT_CORE_MMC_IPC_RX_INTERRUPT MMC_IPC_RX_INTERRUPT;    /**< \brief A60, MMC IPC Rx Interrupt*/
       __I  Ifx_GETH_PORT_CORE_RXIPV4_GOOD_PACKETS_LOW RXIPV4_GOOD_PACKETS_LOW;    /**< \brief A64, RxIPv4 Good Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A68[4];        /**< \brief A68, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_LOW RXIPV4_HEADER_ERROR_PACKETS_LOW;    /**< \brief A6C, RxIPv4 Header Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A70[4];        /**< \brief A70, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_LOW RXIPV4_NO_PAYLOAD_PACKETS_LOW;    /**< \brief A74, RxIPv4 No Payload Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A78[4];        /**< \brief A78, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_LOW RXIPV4_FRAGMENTED_PACKETS_LOW;    /**< \brief A7C, RxIPv4 Fragmented Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A80[4];        /**< \brief A80, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_LOW RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_LOW;    /**< \brief A84, RxIPv4 UDP Checksum Disabled Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A88[4];        /**< \brief A88, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV6_GOOD_PACKETS_LOW RXIPV6_GOOD_PACKETS_LOW;    /**< \brief A8C, RxIPv6 Good Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A90[4];        /**< \brief A90, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_LOW RXIPV6_HEADER_ERROR_PACKETS_LOW;    /**< \brief A94, RxIPv6 Header Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_A98[4];        /**< \brief A98, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_LOW RXIPV6_NO_PAYLOAD_PACKETS_LOW;    /**< \brief A9C, RxIPv6 No Payload Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AA0[4];        /**< \brief AA0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXUDP_GOOD_PACKETS_LOW RXUDP_GOOD_PACKETS_LOW;    /**< \brief AA4, RxUDP Good Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AA8[4];        /**< \brief AA8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXUDP_ERROR_PACKETS_LOW RXUDP_ERROR_PACKETS_LOW;    /**< \brief AAC, RxUDP Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AB0[4];        /**< \brief AB0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXTCP_GOOD_PACKETS_LOW RXTCP_GOOD_PACKETS_LOW;    /**< \brief AB4, RxTCP Good Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AB8[4];        /**< \brief AB8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXTCP_ERROR_PACKETS_LOW RXTCP_ERROR_PACKETS_LOW;    /**< \brief ABC, RxTCP Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AC0[4];        /**< \brief AC0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXICMP_GOOD_PACKETS_LOW RXICMP_GOOD_PACKETS_LOW;    /**< \brief AC4, RxICMP Good Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AC8[4];        /**< \brief AC8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXICMP_ERROR_PACKETS_LOW RXICMP_ERROR_PACKETS_LOW;    /**< \brief ACC, RxICMP Error Packets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AD0[4];        /**< \brief AD0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_GOOD_OCTETS_LOW RXIPV4_GOOD_OCTETS_LOW;    /**< \brief AD4, RxIPv4 Good Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AD8[4];        /**< \brief AD8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_LOW RXIPV4_HEADER_ERROR_OCTETS_LOW;    /**< \brief ADC, RxIPv4 Header Error Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AE0[4];        /**< \brief AE0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_LOW RXIPV4_NO_PAYLOAD_OCTETS_LOW;    /**< \brief AE4, RxIPv4 No Payload Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AE8[4];        /**< \brief AE8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_LOW RXIPV4_FRAGMENTED_OCTETS_LOW;    /**< \brief AEC, RxIPv4 Fragmented Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AF0[4];        /**< \brief AF0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_LOW RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_LOW;    /**< \brief AF4, RxIPv4 UDP Checksum Disable Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_AF8[4];        /**< \brief AF8, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV6_GOOD_OCTETS_LOW RXIPV6_GOOD_OCTETS_LOW;    /**< \brief AFC, RxIPv6 Good Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B00[4];        /**< \brief B00, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_LOW RXIPV6_HEADER_ERROR_OCTETS_LOW;    /**< \brief B04, RxIPv6 Header Error Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B08[4];        /**< \brief B08, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_LOW RXIPV6_NO_PAYLOAD_OCTETS_LOW;    /**< \brief B0C, RxIPv6 No Payload Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B10[4];        /**< \brief B10, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXUDP_GOOD_OCTETS_LOW RXUDP_GOOD_OCTETS_LOW;    /**< \brief B14, RxUDP Good Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B18[4];        /**< \brief B18, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXUDP_ERROR_OCTETS_LOW RXUDP_ERROR_OCTETS_LOW;    /**< \brief B1C, RxUDP Error Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B20[4];        /**< \brief B20, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXTCP_GOOD_OCTETS_LOW RXTCP_GOOD_OCTETS_LOW;    /**< \brief B24, RxTCP Good Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B28[4];        /**< \brief B28, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXTCP_ERROR_OCTETS_LOW RXTCP_ERROR_OCTETS_LOW;    /**< \brief B2C, RxTCP Error Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B30[4];        /**< \brief B30, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXICMP_GOOD_OCTETS_LOW RXICMP_GOOD_OCTETS_LOW;    /**< \brief B34, RxICMP Good Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B38[4];        /**< \brief B38, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_RXICMP_ERROR_OCTETS_LOW RXICMP_ERROR_OCTETS_LOW;    /**< \brief B3C, RxICMP Error Octets Low*/
       __I  Ifx_UReg_8Bit                       reserved_B40[192];      /**< \brief B40, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_ADDRESS_CONTROL MAC_L3_L4_ADDRESS_CONTROL;    /**< \brief C00, MAC L3 L4 Address Control*/
       union
       {
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_DATA   MAC_L3_L4_DATA;         /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL0 MAC_L3_L4_CONTROL0;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL1 MAC_L3_L4_CONTROL1;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL2 MAC_L3_L4_CONTROL2;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL3 MAC_L3_L4_CONTROL3;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL4 MAC_L3_L4_CONTROL4;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL5 MAC_L3_L4_CONTROL5;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL6 MAC_L3_L4_CONTROL6;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_L3_L4_CONTROL7 MAC_L3_L4_CONTROL7;     /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG0 MAC_LAYER3_ADDR0_REG0;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG1 MAC_LAYER3_ADDR0_REG1;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG2 MAC_LAYER3_ADDR0_REG2;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG3 MAC_LAYER3_ADDR0_REG3;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG4 MAC_LAYER3_ADDR0_REG4;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG5 MAC_LAYER3_ADDR0_REG5;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG6 MAC_LAYER3_ADDR0_REG6;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR0_REG7 MAC_LAYER3_ADDR0_REG7;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG0 MAC_LAYER3_ADDR1_REG0;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG1 MAC_LAYER3_ADDR1_REG1;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG2 MAC_LAYER3_ADDR1_REG2;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG3 MAC_LAYER3_ADDR1_REG3;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG4 MAC_LAYER3_ADDR1_REG4;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG5 MAC_LAYER3_ADDR1_REG5;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG6 MAC_LAYER3_ADDR1_REG6;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR1_REG7 MAC_LAYER3_ADDR1_REG7;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG0 MAC_LAYER3_ADDR2_REG0;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG1 MAC_LAYER3_ADDR2_REG1;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG2 MAC_LAYER3_ADDR2_REG2;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG3 MAC_LAYER3_ADDR2_REG3;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG4 MAC_LAYER3_ADDR2_REG4;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG5 MAC_LAYER3_ADDR2_REG5;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG6 MAC_LAYER3_ADDR2_REG6;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR2_REG7 MAC_LAYER3_ADDR2_REG7;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG0 MAC_LAYER3_ADDR3_REG0;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG1 MAC_LAYER3_ADDR3_REG1;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG2 MAC_LAYER3_ADDR3_REG2;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG3 MAC_LAYER3_ADDR3_REG3;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG4 MAC_LAYER3_ADDR3_REG4;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG5 MAC_LAYER3_ADDR3_REG5;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG6 MAC_LAYER3_ADDR3_REG6;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER3_ADDR3_REG7 MAC_LAYER3_ADDR3_REG7;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS0 MAC_LAYER4_ADDRESS0;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS1 MAC_LAYER4_ADDRESS1;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS2 MAC_LAYER4_ADDRESS2;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS3 MAC_LAYER4_ADDRESS3;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS4 MAC_LAYER4_ADDRESS4;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS5 MAC_LAYER4_ADDRESS5;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS6 MAC_LAYER4_ADDRESS6;    /**< \brief C04, */
            __IO Ifx_GETH_PORT_CORE_MAC_LAYER4_ADDRESS7 MAC_LAYER4_ADDRESS7;    /**< \brief C04, */
       };
       __I  Ifx_UReg_8Bit                       reserved_C08[248];      /**< \brief C08, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_CONTROL MAC_TIMESTAMP_CONTROL;    /**< \brief D00, MAC Timestamp Control*/
       __IO Ifx_GETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT MAC_SUB_SECOND_INCREMENT;    /**< \brief D04, MAC Sub Second Increment*/
       __I  Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS MAC_SYSTEM_TIME_SECONDS;    /**< \brief D08, MAC System Time Seconds*/
       __I  Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS MAC_SYSTEM_TIME_NANOSECONDS;    /**< \brief D0C, MAC System Time Nanoseconds*/
       __IO Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE MAC_SYSTEM_TIME_SECONDS_UPDATE;    /**< \brief D10, MAC System Time Seconds Update*/
       __IO Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;    /**< \brief D14, MAC System Time Nanoseconds Update*/
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_ADDEND MAC_TIMESTAMP_ADDEND;    /**< \brief D18, MAC Timestamp Addend*/
       __IO Ifx_GETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;    /**< \brief D1C, MAC System Time Higher Word Seconds*/
       __I  Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_STATUS MAC_TIMESTAMP_STATUS;    /**< \brief D20, MAC Timestamp Status*/
       __IO Ifx_GETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR MAC_RX_DOMAIN_TIME_INCR;    /**< \brief D24, MAC Rx Domain Time Incr*/
       __IO Ifx_GETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR MAC_TX_DOMAIN_TIME_INCR;    /**< \brief D28, MAC Tx Domain Time Incr*/
       __I  Ifx_UReg_8Bit                       reserved_D2C[4];        /**< \brief D2C, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;    /**< \brief D30, MAC Tx Timestamp Status Nanoseconds*/
       __I  Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS MAC_TX_TIMESTAMP_STATUS_SECONDS;    /**< \brief D34, MAC Tx Timestamp Status Seconds*/
       __I  Ifx_GETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_PKTID MAC_TX_TIMESTAMP_STATUS_PKTID;    /**< \brief D38, MAC Tx Timestamp Status PktID*/
       __I  Ifx_UReg_8Bit                       reserved_D3C[20];       /**< \brief D3C, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR MAC_TIMESTAMP_INGRESS_ASYM_CORR;    /**< \brief D50, MAC Timestamp Ingress Asym Corr*/
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR MAC_TIMESTAMP_EGRESS_ASYM_CORR;    /**< \brief D54, MAC Timestamp Egress Asym Corr*/
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;    /**< \brief D58, MAC Timestamp Ingress Corr Nanosecond*/
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSECOND MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSECOND;    /**< \brief D5C, MAC Timestamp Ingress Corr Subnanosecond*/
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;    /**< \brief D60, MAC Timestamp Egress Corr Nanosecond*/
       __IO Ifx_GETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSECOND MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSECOND;    /**< \brief D64, MAC Timestamp Egress Corr Subnanosecond*/
       __I  Ifx_UReg_8Bit                       reserved_D68[8];        /**< \brief D68, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_PPS_CONTROL  MAC_PPS_CONTROL;        /**< \brief D70, MAC PPS Control*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS_EXTND_CTRL MAC_PPS_EXTND_CTRL;     /**< \brief D74, MAC PPS Extnd Ctrl*/
       __I  Ifx_UReg_8Bit                       reserved_D78[8];        /**< \brief D78, \internal Reserved */
       __IO Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS MAC_PPS0_TARGET_TIME_SECONDS;    /**< \brief D80, MAC PPS0 Target Time Seconds*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS MAC_PPS0_TARGET_TIME_NANOSECONDS;    /**< \brief D84, MAC PPS0 Target Time Nanoseconds*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS0_INTERVAL MAC_PPS0_INTERVAL;      /**< \brief D88, MAC PPS0 Interval*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS0_WIDTH   MAC_PPS0_WIDTH;         /**< \brief D8C, MAC PPS0 Width*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_SECONDS MAC_PPS1_TARGET_TIME_SECONDS;    /**< \brief D90, MAC PPS1 Target Time Seconds*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS1_TARGET_TIME_NANOSECONDS MAC_PPS1_TARGET_TIME_NANOSECONDS;    /**< \brief D94, MAC PPS1 Target Time Nanoseconds*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS1_INTERVAL MAC_PPS1_INTERVAL;      /**< \brief D98, MAC PPS1 Interval*/
       __IO Ifx_GETH_PORT_CORE_MAC_PPS1_WIDTH   MAC_PPS1_WIDTH;         /**< \brief D9C, MAC PPS1 Width*/
       __I  Ifx_UReg_8Bit                       reserved_DA0[64];       /**< \brief DA0, \internal Reserved */
       __I  Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_NS MAC_PRESN_TIME_NS;      /**< \brief DE0, MAC Presn Time ns*/
       __IO Ifx_GETH_PORT_CORE_MAC_PRESN_TIME_UPDT MAC_PRESN_TIME_UPDT;    /**< \brief DE4, MAC Presn Time Updt*/
} Ifx_GETH_PORT_CORE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ0_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ0 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ0
{
       __IO Ifx_GETH_PORT_MTL_TCQ0_TXQ0_OPERATION_MODE TXQ0_OPERATION_MODE;    /**< \brief 0, MTL TxQ0 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ0_TXQ0_UNDERFLOW TXQ0_UNDERFLOW;         /**< \brief 4, MTL TxQ0 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ0_TXQ0_DEBUG   TXQ0_DEBUG;             /**< \brief 8, MTL TxQ0 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ0_TC0_ETS_CONTROL TC0_ETS_CONTROL;        /**< \brief 10, MTL TC0 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ0_TC0_QUANTUM_WEIGHT TC0_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC0 Quantum Weight*/
       __I  Ifx_UReg_8Bit                       reserved_1C[36];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ0_RXQ0_OPERATION_MODE RXQ0_OPERATION_MODE;    /**< \brief 40, MTL RxQ0 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ0_RXQ0_MISSED_PKT_OVERFLOW_CNT RXQ0_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ0 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ0_RXQ0_DEBUG   RXQ0_DEBUG;             /**< \brief 48, MTL RxQ0 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ0_RXQ0_CONTROL RXQ0_CONTROL;           /**< \brief 4C, MTL RxQ0 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ0_RXQ0_FLOW_CONTROL RXQ0_FLOW_CONTROL;      /**< \brief 50, MTL RxQ0 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_ENABLE Q0_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q0 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ0_Q0_INTERRUPT_STATUS Q0_INTERRUPT_STATUS;    /**< \brief 74, MTL Q0 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ1_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ1 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ1
{
       __IO Ifx_GETH_PORT_MTL_TCQ1_TXQ1_OPERATION_MODE TXQ1_OPERATION_MODE;    /**< \brief 0, MTL TxQ1 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ1_TXQ1_UNDERFLOW TXQ1_UNDERFLOW;         /**< \brief 4, MTL TxQ1 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ1_TXQ1_DEBUG   TXQ1_DEBUG;             /**< \brief 8, MTL TxQ1 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ1_TC1_ETS_CONTROL TC1_ETS_CONTROL;        /**< \brief 10, MTL TC1 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ1_TC1_QUANTUM_WEIGHT TC1_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC1 Quantum Weight*/
       __I  Ifx_UReg_8Bit                       reserved_1C[36];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ1_RXQ1_OPERATION_MODE RXQ1_OPERATION_MODE;    /**< \brief 40, MTL RxQ1 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ1_RXQ1_MISSED_PKT_OVERFLOW_CNT RXQ1_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ1 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ1_RXQ1_DEBUG   RXQ1_DEBUG;             /**< \brief 48, MTL RxQ1 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ1_RXQ1_CONTROL RXQ1_CONTROL;           /**< \brief 4C, MTL RxQ1 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ1_RXQ1_FLOW_CONTROL RXQ1_FLOW_CONTROL;      /**< \brief 50, MTL RxQ1 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_ENABLE Q1_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q1 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ1_Q1_INTERRUPT_STATUS Q1_INTERRUPT_STATUS;    /**< \brief 74, MTL Q1 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ2_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ2 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ2
{
       __IO Ifx_GETH_PORT_MTL_TCQ2_TXQ2_OPERATION_MODE TXQ2_OPERATION_MODE;    /**< \brief 0, MTL TxQ2 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ2_TXQ2_UNDERFLOW TXQ2_UNDERFLOW;         /**< \brief 4, MTL TxQ2 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ2_TXQ2_DEBUG   TXQ2_DEBUG;             /**< \brief 8, MTL TxQ2 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ2_TC2_ETS_CONTROL TC2_ETS_CONTROL;        /**< \brief 10, MTL TC2 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ2_TC2_QUANTUM_WEIGHT TC2_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC2 Quantum Weight*/
       __I  Ifx_UReg_8Bit                       reserved_1C[36];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ2_RXQ2_OPERATION_MODE RXQ2_OPERATION_MODE;    /**< \brief 40, MTL RxQ2 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ2_RXQ2_MISSED_PKT_OVERFLOW_CNT RXQ2_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ2 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ2_RXQ2_DEBUG   RXQ2_DEBUG;             /**< \brief 48, MTL RxQ2 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ2_RXQ2_CONTROL RXQ2_CONTROL;           /**< \brief 4C, MTL RxQ2 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ2_RXQ2_FLOW_CONTROL RXQ2_FLOW_CONTROL;      /**< \brief 50, MTL RxQ2 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_ENABLE Q2_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q2 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ2_Q2_INTERRUPT_STATUS Q2_INTERRUPT_STATUS;    /**< \brief 74, MTL Q2 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ3_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ3 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ3
{
       __IO Ifx_GETH_PORT_MTL_TCQ3_TXQ3_OPERATION_MODE TXQ3_OPERATION_MODE;    /**< \brief 0, MTL TxQ3 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ3_TXQ3_UNDERFLOW TXQ3_UNDERFLOW;         /**< \brief 4, MTL TxQ3 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ3_TXQ3_DEBUG   TXQ3_DEBUG;             /**< \brief 8, MTL TxQ3 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ3_TC3_ETS_CONTROL TC3_ETS_CONTROL;        /**< \brief 10, MTL TC3 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ3_TC3_QUANTUM_WEIGHT TC3_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC3 Quantum Weight*/
       __I  Ifx_UReg_8Bit                       reserved_1C[36];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ3_RXQ3_OPERATION_MODE RXQ3_OPERATION_MODE;    /**< \brief 40, MTL RxQ3 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ3_RXQ3_MISSED_PKT_OVERFLOW_CNT RXQ3_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ3 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ3_RXQ3_DEBUG   RXQ3_DEBUG;             /**< \brief 48, MTL RxQ3 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ3_RXQ3_CONTROL RXQ3_CONTROL;           /**< \brief 4C, MTL RxQ3 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ3_RXQ3_FLOW_CONTROL RXQ3_FLOW_CONTROL;      /**< \brief 50, MTL RxQ3 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_ENABLE Q3_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q3 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ3_Q3_INTERRUPT_STATUS Q3_INTERRUPT_STATUS;    /**< \brief 74, MTL Q3 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ3;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ4_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ4 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ4
{
       __IO Ifx_GETH_PORT_MTL_TCQ4_TXQ4_OPERATION_MODE TXQ4_OPERATION_MODE;    /**< \brief 0, MTL TxQ4 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ4_TXQ4_UNDERFLOW TXQ4_UNDERFLOW;         /**< \brief 4, MTL TxQ4 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ4_TXQ4_DEBUG   TXQ4_DEBUG;             /**< \brief 8, MTL TxQ4 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ4_TC4_ETS_CONTROL TC4_ETS_CONTROL;        /**< \brief 10, MTL TC4 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ4_TC4_QUANTUM_WEIGHT TC4_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC4 Quantum Weight*/
       __I  Ifx_UReg_8Bit                       reserved_1C[36];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ4_RXQ4_OPERATION_MODE RXQ4_OPERATION_MODE;    /**< \brief 40, MTL RxQ4 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ4_RXQ4_MISSED_PKT_OVERFLOW_CNT RXQ4_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ4 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ4_RXQ4_DEBUG   RXQ4_DEBUG;             /**< \brief 48, MTL RxQ4 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ4_RXQ4_CONTROL RXQ4_CONTROL;           /**< \brief 4C, MTL RxQ4 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ4_RXQ4_FLOW_CONTROL RXQ4_FLOW_CONTROL;      /**< \brief 50, MTL RxQ4 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_ENABLE Q4_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q4 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ4_Q4_INTERRUPT_STATUS Q4_INTERRUPT_STATUS;    /**< \brief 74, MTL Q4 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ4;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ5_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ5 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ5
{
       __IO Ifx_GETH_PORT_MTL_TCQ5_TXQ5_OPERATION_MODE TXQ5_OPERATION_MODE;    /**< \brief 0, MTL TxQ5 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ5_TXQ5_UNDERFLOW TXQ5_UNDERFLOW;         /**< \brief 4, MTL TxQ5 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ5_TXQ5_DEBUG   TXQ5_DEBUG;             /**< \brief 8, MTL TxQ5 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ5_TC5_ETS_CONTROL TC5_ETS_CONTROL;        /**< \brief 10, MTL TC5 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ5_TC5_QUANTUM_WEIGHT TC5_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC5 Quantum Weight*/
       __IO Ifx_GETH_PORT_MTL_TCQ5_TC5_SENDSLOPECREDIT TC5_SENDSLOPECREDIT;    /**< \brief 1C, MTL TC5 SendSlopeCredit*/
       __IO Ifx_GETH_PORT_MTL_TCQ5_TC5_HICREDIT TC5_HICREDIT;           /**< \brief 20, MTL TC5 HiCredit*/
       __IO Ifx_GETH_PORT_MTL_TCQ5_TC5_LOCREDIT TC5_LOCREDIT;           /**< \brief 24, MTL TC5 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ5_RXQ5_OPERATION_MODE RXQ5_OPERATION_MODE;    /**< \brief 40, MTL RxQ5 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ5_RXQ5_MISSED_PKT_OVERFLOW_CNT RXQ5_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ5 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ5_RXQ5_DEBUG   RXQ5_DEBUG;             /**< \brief 48, MTL RxQ5 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ5_RXQ5_CONTROL RXQ5_CONTROL;           /**< \brief 4C, MTL RxQ5 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ5_RXQ5_FLOW_CONTROL RXQ5_FLOW_CONTROL;      /**< \brief 50, MTL RxQ5 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_ENABLE Q5_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q5 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ5_Q5_INTERRUPT_STATUS Q5_INTERRUPT_STATUS;    /**< \brief 74, MTL Q5 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ5;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ6_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ6 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ6
{
       __IO Ifx_GETH_PORT_MTL_TCQ6_TXQ6_OPERATION_MODE TXQ6_OPERATION_MODE;    /**< \brief 0, MTL TxQ6 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ6_TXQ6_UNDERFLOW TXQ6_UNDERFLOW;         /**< \brief 4, MTL TxQ6 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ6_TXQ6_DEBUG   TXQ6_DEBUG;             /**< \brief 8, MTL TxQ6 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ6_TC6_ETS_CONTROL TC6_ETS_CONTROL;        /**< \brief 10, MTL TC6 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ6_TC6_QUANTUM_WEIGHT TC6_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC6 Quantum Weight*/
       __IO Ifx_GETH_PORT_MTL_TCQ6_TC6_SENDSLOPECREDIT TC6_SENDSLOPECREDIT;    /**< \brief 1C, MTL TC6 SendSlopeCredit*/
       __IO Ifx_GETH_PORT_MTL_TCQ6_TC6_HICREDIT TC6_HICREDIT;           /**< \brief 20, MTL TC6 HiCredit*/
       __IO Ifx_GETH_PORT_MTL_TCQ6_TC6_LOCREDIT TC6_LOCREDIT;           /**< \brief 24, MTL TC6 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ6_RXQ6_OPERATION_MODE RXQ6_OPERATION_MODE;    /**< \brief 40, MTL RxQ6 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ6_RXQ6_MISSED_PKT_OVERFLOW_CNT RXQ6_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ6 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ6_RXQ6_DEBUG   RXQ6_DEBUG;             /**< \brief 48, MTL RxQ6 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ6_RXQ6_CONTROL RXQ6_CONTROL;           /**< \brief 4C, MTL RxQ6 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ6_RXQ6_FLOW_CONTROL RXQ6_FLOW_CONTROL;      /**< \brief 50, MTL RxQ6 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_ENABLE Q6_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q6 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ6_Q6_INTERRUPT_STATUS Q6_INTERRUPT_STATUS;    /**< \brief 74, MTL Q6 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ6;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_TCQ7_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief TCQ7 object */
typedef volatile struct _Ifx_GETH_PORT_MTL_TCQ7
{
       __IO Ifx_GETH_PORT_MTL_TCQ7_TXQ7_OPERATION_MODE TXQ7_OPERATION_MODE;    /**< \brief 0, MTL TxQ7 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ7_TXQ7_UNDERFLOW TXQ7_UNDERFLOW;         /**< \brief 4, MTL TxQ7 Underflow*/
       __I  Ifx_GETH_PORT_MTL_TCQ7_TXQ7_DEBUG   TXQ7_DEBUG;             /**< \brief 8, MTL TxQ7 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ7_TC7_ETS_CONTROL TC7_ETS_CONTROL;        /**< \brief 10, MTL TC7 ETS Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ7_TC7_QUANTUM_WEIGHT TC7_QUANTUM_WEIGHT;     /**< \brief 18, MTL TC7 Quantum Weight*/
       __IO Ifx_GETH_PORT_MTL_TCQ7_TC7_SENDSLOPECREDIT TC7_SENDSLOPECREDIT;    /**< \brief 1C, MTL TC7 SendSlopeCredit*/
       __IO Ifx_GETH_PORT_MTL_TCQ7_TC7_HICREDIT TC7_HICREDIT;           /**< \brief 20, MTL TC7 HiCredit*/
       __IO Ifx_GETH_PORT_MTL_TCQ7_TC7_LOCREDIT TC7_LOCREDIT;           /**< \brief 24, MTL TC7 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ7_RXQ7_OPERATION_MODE RXQ7_OPERATION_MODE;    /**< \brief 40, MTL RxQ7 Operation Mode*/
       __I  Ifx_GETH_PORT_MTL_TCQ7_RXQ7_MISSED_PKT_OVERFLOW_CNT RXQ7_MISSED_PKT_OVERFLOW_CNT;    /**< \brief 44, MTL RxQ7 Missed Pkt Overflow Cnt*/
       __I  Ifx_GETH_PORT_MTL_TCQ7_RXQ7_DEBUG   RXQ7_DEBUG;             /**< \brief 48, MTL RxQ7 Debug*/
       __IO Ifx_GETH_PORT_MTL_TCQ7_RXQ7_CONTROL RXQ7_CONTROL;           /**< \brief 4C, MTL RxQ7 Control*/
       __IO Ifx_GETH_PORT_MTL_TCQ7_RXQ7_FLOW_CONTROL RXQ7_FLOW_CONTROL;      /**< \brief 50, MTL RxQ7 Flow Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[28];        /**< \brief 54, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_ENABLE Q7_INTERRUPT_ENABLE;    /**< \brief 70, MTL Q7 Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_TCQ7_Q7_INTERRUPT_STATUS Q7_INTERRUPT_STATUS;    /**< \brief 74, MTL Q7 Interrupt Status*/
} Ifx_GETH_PORT_MTL_TCQ7;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_MTL_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MTL object */
typedef volatile struct _Ifx_GETH_PORT_MTL
{
       __IO Ifx_GETH_PORT_MTL_OPERATION_MODE    OPERATION_MODE;         /**< \brief 0, MTL Operation Mode*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_DEBUG_CONTROL     DEBUG_CONTROL;          /**< \brief 8, MTL Debug Control*/
       __IO Ifx_GETH_PORT_MTL_DEBUG_STATUS      DEBUG_STATUS;           /**< \brief C, MTL Debug Status*/
       __IO Ifx_GETH_PORT_MTL_FIFO_DEBUG_DATA   FIFO_DEBUG_DATA;        /**< \brief 10, MTL FIFO Debug Data*/
       __I  Ifx_UReg_8Bit                       reserved_14[12];        /**< \brief 14, \internal Reserved */
       __I  Ifx_GETH_PORT_MTL_INTERRUPT_STATUS  INTERRUPT_STATUS;       /**< \brief 20, MTL Interrupt Status*/
       __I  Ifx_UReg_8Bit                       reserved_24[12];        /**< \brief 24, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_RXQ_DMA_MAP0      RXQ_DMA_MAP0;           /**< \brief 30, MTL RxQ DMA Map0*/
       __IO Ifx_GETH_PORT_MTL_RXQ_DMA_MAP1      RXQ_DMA_MAP1;           /**< \brief 34, MTL RxQ DMA Map1*/
       __I  Ifx_UReg_8Bit                       reserved_38[16];        /**< \brief 38, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TBS_CTRL          TBS_CTRL;               /**< \brief 48, MTL TBS CTRL*/
       __IO Ifx_GETH_PORT_MTL_TBS_STATS         TBS_STATS;              /**< \brief 4C, MTL TBS STATS*/
       __IO Ifx_GETH_PORT_MTL_EST_CONTROL       EST_CONTROL;            /**< \brief 50, MTL EST Control*/
       __IO Ifx_GETH_PORT_MTL_EST_OVERHEAD      EST_OVERHEAD;           /**< \brief 54, MTL EST Overhead*/
       __IO Ifx_GETH_PORT_MTL_EST_STATUS        EST_STATUS;             /**< \brief 58, MTL EST Status*/
       __I  Ifx_UReg_8Bit                       reserved_5C[4];         /**< \brief 5C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_EST_SCH_ERROR     EST_SCH_ERROR;          /**< \brief 60, MTL EST Sch Error*/
       __IO Ifx_GETH_PORT_MTL_EST_FRM_SIZE_ERROR EST_FRM_SIZE_ERROR;     /**< \brief 64, MTL EST Frm Size Error*/
       __I  Ifx_GETH_PORT_MTL_EST_FRM_SIZE_CAPTURE EST_FRM_SIZE_CAPTURE;    /**< \brief 68, MTL EST Frm Size Capture*/
       __I  Ifx_UReg_8Bit                       reserved_6C[4];         /**< \brief 6C, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_EST_INTR_ENABLE   EST_INTR_ENABLE;        /**< \brief 70, MTL EST Intr Enable*/
       __I  Ifx_UReg_8Bit                       reserved_74[12];        /**< \brief 74, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_GCL_CONTROL       GCL_CONTROL;            /**< \brief 80, MTL GCL Control*/
       __IO Ifx_GETH_PORT_MTL_GCL_DATA          GCL_DATA;               /**< \brief 84, MTL GCL Data*/
       __I  Ifx_UReg_8Bit                       reserved_88[8];         /**< \brief 88, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_FPE_CTRL_STS      FPE_CTRL_STS;           /**< \brief 90, MTL FPE CTRL STS*/
       __IO Ifx_GETH_PORT_MTL_FPE_ADVANCE       FPE_ADVANCE;            /**< \brief 94, MTL FPE Advance*/
       __I  Ifx_UReg_8Bit                       reserved_98[8];         /**< \brief 98, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_RXP_CONTROL_STATUS RXP_CONTROL_STATUS;     /**< \brief A0, MTL RXP Control Status*/
       __IO Ifx_GETH_PORT_MTL_RXP_INTERRUPT_CONTROL_STATUS RXP_INTERRUPT_CONTROL_STATUS;    /**< \brief A4, MTL RXP Interrupt Control Status*/
       __I  Ifx_UReg_8Bit                       reserved_A8[8];         /**< \brief A8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_INDIRECT_ACC_CONTROL_STATUS INDIRECT_ACC_CONTROL_STATUS;    /**< \brief B0, MTL Indirect Acc Control Status*/
       union
       {
            __IO Ifx_GETH_PORT_MTL_INDIRECT_ACC_DATA INDIRECT_ACC_DATA;      /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR0    MTL_FRP_ACNTR0;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR1    MTL_FRP_ACNTR1;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR2    MTL_FRP_ACNTR2;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR3    MTL_FRP_ACNTR3;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR4    MTL_FRP_ACNTR4;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR5    MTL_FRP_ACNTR5;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR6    MTL_FRP_ACNTR6;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_MTL_FRP_ACNTR7    MTL_FRP_ACNTR7;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_RXP_BYPASS_CNT    RXP_BYPASS_CNT;         /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_RXP_DROP_CNT      RXP_DROP_CNT;           /**< \brief B4, */
            __I  Ifx_GETH_PORT_MTL_RXP_ERROR_CNT     RXP_ERROR_CNT;          /**< \brief B4, */
       };
       __I  Ifx_UReg_8Bit                       reserved_B8[8];         /**< \brief B8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_ECC_CONTROL       ECC_CONTROL;            /**< \brief C0, MTL ECC Control*/
       __I  Ifx_GETH_PORT_MTL_SAFETY_INTERRUPT_STATUS SAFETY_INTERRUPT_STATUS;    /**< \brief C4, MTL Safety Interrupt Status*/
       __IO Ifx_GETH_PORT_MTL_ECC_INTERRUPT_ENABLE ECC_INTERRUPT_ENABLE;    /**< \brief C8, MTL ECC Interrupt Enable*/
       __IO Ifx_GETH_PORT_MTL_ECC_INTERRUPT_STATUS ECC_INTERRUPT_STATUS;    /**< \brief CC, MTL ECC Interrupt Status*/
       __IO Ifx_GETH_PORT_MTL_ECC_ERR_STS_RCTL  ECC_ERR_STS_RCTL;       /**< \brief D0, MTL ECC Err Sts Rctl*/
       __I  Ifx_GETH_PORT_MTL_ECC_ERR_ADDR_STATUS ECC_ERR_ADDR_STATUS;    /**< \brief D4, MTL ECC Err Addr Status*/
       __I  Ifx_GETH_PORT_MTL_ECC_ERR_CNTR_STATUS ECC_ERR_CNTR_STATUS;    /**< \brief D8, MTL ECC Err Cntr Status*/
       __I  Ifx_UReg_8Bit                       reserved_DC[4];         /**< \brief DC, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_DPP_CONTROL       DPP_CONTROL;            /**< \brief E0, MTL DPP Control*/
       __IO Ifx_GETH_PORT_MTL_DPP_ECC_EIC       DPP_ECC_EIC;            /**< \brief E4, MTL DPP ECC EIC*/
       __IO Ifx_GETH_PORT_MTL_SGF_CONTROL       SGF_CONTROL;            /**< \brief E8, MTL SGF Control*/
       __IO Ifx_GETH_PORT_MTL_SGF_EXTENDED_CONTROL SGF_EXTENDED_CONTROL;    /**< \brief EC, MTL SGF Extended Control*/
       __IO Ifx_GETH_PORT_MTL_SGF_STATUS        SGF_STATUS;             /**< \brief F0, MTL SGF Status*/
       __IO Ifx_GETH_PORT_MTL_SGF_INTR_ENABLE   SGF_INTR_ENABLE;        /**< \brief F4, MTL SGF Interrupt Enable*/
       __I  Ifx_UReg_8Bit                       reserved_F8[8];         /**< \brief F8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ0              TCQ0;                   /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_178[8];        /**< \brief 178, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ1              TCQ1;                   /**< \brief 180, */
       __I  Ifx_UReg_8Bit                       reserved_1F8[8];        /**< \brief 1F8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ2              TCQ2;                   /**< \brief 200, */
       __I  Ifx_UReg_8Bit                       reserved_278[8];        /**< \brief 278, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ3              TCQ3;                   /**< \brief 280, */
       __I  Ifx_UReg_8Bit                       reserved_2F8[8];        /**< \brief 2F8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ4              TCQ4;                   /**< \brief 300, */
       __I  Ifx_UReg_8Bit                       reserved_378[8];        /**< \brief 378, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ5              TCQ5;                   /**< \brief 380, */
       __I  Ifx_UReg_8Bit                       reserved_3F8[8];        /**< \brief 3F8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ6              TCQ6;                   /**< \brief 400, */
       __I  Ifx_UReg_8Bit                       reserved_478[8];        /**< \brief 478, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL_TCQ7              TCQ7;                   /**< \brief 480, */
} Ifx_GETH_PORT_MTL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_PORT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PORT object */
typedef volatile struct _Ifx_GETH_PORT
{
       __IO Ifx_GETH_PORT_CORE                  CORE;                   /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_DE8[536];      /**< \brief DE8, \internal Reserved */
       __IO Ifx_GETH_PORT_MTL                   MTL;                    /**< \brief 1000, */
       __I  Ifx_UReg_8Bit                       reserved_14F8[2824];    /**< \brief 14F8, \internal Reserved */
} Ifx_GETH_PORT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_BRIDGE_ECC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ECC object */
typedef volatile struct _Ifx_GETH_BRIDGE_ECC
{
       __IO Ifx_GETH_BRIDGE_ECC_CONTROL         CONTROL;                /**< \brief 0, ECC Control*/
       __I  Ifx_UReg_8Bit                       reserved_4[12];         /**< \brief 4, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_ECC_ERROR_STATUS_CAPTURE_CONTROL ERROR_STATUS_CAPTURE_CONTROL;    /**< \brief 10, ECC Err Sts RCtl*/
       __I  Ifx_GETH_BRIDGE_ECC_ERROR_ADDRESS_STATUS ERROR_ADDRESS_STATUS;    /**< \brief 14, ECC Err Addr Status*/
       __I  Ifx_GETH_BRIDGE_ECC_ERROR_COUNT_STATUS ERROR_COUNT_STATUS;     /**< \brief 18, ECC Err Cntr Status*/
} Ifx_GETH_BRIDGE_ECC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_BRIDGE_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief BRIDGE object */
typedef volatile struct _Ifx_GETH_BRIDGE
{
       __IO Ifx_GETH_BRIDGE_FORWARD_CONTROL     FORWARD_CONTROL;        /**< \brief 0, Forward Control*/
       __IO Ifx_GETH_BRIDGE_PORT_FLUSH_AND_LOOPBACK_CONTROL PORT_FLUSH_AND_LOOPBACK_CONTROL;    /**< \brief 4, Port Flush and Loopback Control*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_PORT_0_CONTROL      PORT_0_CONTROL;         /**< \brief C, Port 0 Control*/
       __IO Ifx_GETH_BRIDGE_TXQ_MAP_PORT_0      TXQ_MAP_PORT_0;         /**< \brief 10, TXQ Map Port 0*/
       __IO Ifx_GETH_BRIDGE_RXC_MAP_PORT_0      RXC_MAP_PORT_0;         /**< \brief 14, RXC Map Port 0*/
       __IO Ifx_GETH_BRIDGE_PORT_1_CONTROL      PORT_1_CONTROL;         /**< \brief 18, Port 1 Control*/
       __IO Ifx_GETH_BRIDGE_TXQ_MAP_PORT_1      TXQ_MAP_PORT_1;         /**< \brief 1C, TXQ Map Port 1*/
       __IO Ifx_GETH_BRIDGE_RXC_MAP_PORT_1      RXC_MAP_PORT_1;         /**< \brief 20, RXC Map Port 1*/
       __I  Ifx_UReg_8Bit                       reserved_24[220];       /**< \brief 24, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_CSR_SW_CONTROL      CSR_SW_CONTROL;         /**< \brief 100, CSR SW Control*/
       __I  Ifx_GETH_BRIDGE_INTERRUPT_STATUS    INTERRUPT_STATUS;       /**< \brief 104, Interrupt Status*/
       __I  Ifx_GETH_BRIDGE_SAFETY_INTERRUPT_STATUS SAFETY_INTERRUPT_STATUS;    /**< \brief 108, Safety Interrupt Status*/
       __I  Ifx_UReg_8Bit                       reserved_10C[4];        /**< \brief 10C, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_DMA_PORT_SELECTION  DMA_PORT_SELECTION;     /**< \brief 110, DMA Port Selection*/
       __IO Ifx_GETH_BRIDGE_PMT_CONTROL         PMT_CONTROL;            /**< \brief 114, PMT Control*/
       __I  Ifx_UReg_8Bit                       reserved_118[56];       /**< \brief 118, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_DPP_FSM_INTERRUPT_STATUS DPP_FSM_INTERRUPT_STATUS;    /**< \brief 150, DPP FSM Interrupt Status*/
       __I  Ifx_GETH_BRIDGE_AXI_SLAVE_DPP_ERROR_ADDRESS_STATUS AXI_SLAVE_DPP_ERROR_ADDRESS_STATUS;    /**< \brief 154, AXI Slave DPP Error Address Status*/
       __IO Ifx_GETH_BRIDGE_FSM_CONTROL         FSM_CONTROL;            /**< \brief 158, FSM Control*/
       __IO Ifx_GETH_BRIDGE_FSM_ACT_TIMER       FSM_ACT_TIMER;          /**< \brief 15C, FSM ACT Timer*/
       __I  Ifx_UReg_8Bit                       reserved_160[4];        /**< \brief 160, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_SCSR_CONTROL        SCSR_CONTROL;           /**< \brief 164, SCSR Control*/
       __I  Ifx_GETH_BRIDGE_SCSR_PARITY_STATUS  SCSR_PARITY_STATUS;     /**< \brief 168, SCSR Parity Status*/
       __I  Ifx_GETH_BRIDGE_SCSR_PARITY_ERR_COUNT SCSR_PARITY_ERR_COUNT;    /**< \brief 16C, SCSR Parity Err Count*/
       __I  Ifx_UReg_8Bit                       reserved_170[152];      /**< \brief 170, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_DEBUG_CONTROL       DEBUG_CONTROL;          /**< \brief 208, Debug Control*/
       __I  Ifx_UReg_8Bit                       reserved_20C[180];      /**< \brief 20C, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_ECC                 ECC;                    /**< \brief 2C0, */
       __I  Ifx_UReg_8Bit                       reserved_2DC[4];        /**< \brief 2DC, \internal Reserved */
       __IO Ifx_GETH_BRIDGE_DPP_CONTROL         DPP_CONTROL;            /**< \brief 2E0, DPP Control*/
       __IO Ifx_GETH_BRIDGE_DPP_ECC_ERROR_INJECTION_CONTROL DPP_ECC_ERROR_INJECTION_CONTROL;    /**< \brief 2E4, DPP ECC EIC*/
} Ifx_GETH_BRIDGE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_DMA_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_GETH_DMA_CH
{
       __IO Ifx_GETH_DMA_CH_CONTROL             CONTROL;                /**< \brief 0, DMA Channel Control*/
       __IO Ifx_GETH_DMA_CH_TX_CONTROL          TX_CONTROL;             /**< \brief 4, DMA Channel Tx Control*/
       __IO Ifx_GETH_DMA_CH_RX_CONTROL          RX_CONTROL;             /**< \brief 8, DMA Channel Rx Control*/
       __IO Ifx_GETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS SLOT_FUNCTION_CONTROL_STATUS;    /**< \brief C, DMA Channel Slot Function Control Status*/
       __I  Ifx_UReg_8Bit                       reserved_10[4];         /**< \brief 10, \internal Reserved */
       __IO Ifx_GETH_DMA_CH_TXDESC_LIST_LADDRESS TXDESC_LIST_LADDRESS;    /**< \brief 14, DMA Channel TxDesc List LAddress*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
       __IO Ifx_GETH_DMA_CH_RXDESC_LIST_LADDRESS RXDESC_LIST_LADDRESS;    /**< \brief 1C, DMA Channel RxDesc List LAddress*/
       __I  Ifx_UReg_8Bit                       reserved_20[4];         /**< \brief 20, \internal Reserved */
       __IO Ifx_GETH_DMA_CH_TXDESC_TAIL_LPOINTER TXDESC_TAIL_LPOINTER;    /**< \brief 24, DMA Channel TxDesc Tail LPointer*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __IO Ifx_GETH_DMA_CH_RXDESC_TAIL_LPOINTER RXDESC_TAIL_LPOINTER;    /**< \brief 2C, DMA Channel RxDesc Tail LPointer*/
       __IO Ifx_GETH_DMA_CH_TX_CONTROL2         TX_CONTROL2;            /**< \brief 30, DMA Channel Tx Control2*/
       __IO Ifx_GETH_DMA_CH_RX_CONTROL2         RX_CONTROL2;            /**< \brief 34, DMA Channel Rx Control2*/
       __IO Ifx_GETH_DMA_CH_INTERRUPT_ENABLE    INTERRUPT_ENABLE;       /**< \brief 38, DMA Channel Interrupt Enable*/
       __IO Ifx_GETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER RX_INTERRUPT_WATCHDOG_TIMER;    /**< \brief 3C, DMA Channel Rx Interrupt Watchdog Timer*/
       __I  Ifx_UReg_8Bit                       reserved_40[4];         /**< \brief 40, \internal Reserved */
       __I  Ifx_GETH_DMA_CH_CURRENT_APP_TXDESC_L CURRENT_APP_TXDESC_L;    /**< \brief 44, DMA Channel Current App TxDesc L*/
       __I  Ifx_UReg_8Bit                       reserved_48[4];         /**< \brief 48, \internal Reserved */
       __I  Ifx_GETH_DMA_CH_CURRENT_APP_RXDESC_L CURRENT_APP_RXDESC_L;    /**< \brief 4C, DMA Channel Current App RxDesc L*/
       __I  Ifx_UReg_8Bit                       reserved_50[4];         /**< \brief 50, \internal Reserved */
       __I  Ifx_GETH_DMA_CH_CURRENT_APP_TXBUFFER_L CURRENT_APP_TXBUFFER_L;    /**< \brief 54, DMA Channel Current App TxBuffer L*/
       __I  Ifx_UReg_8Bit                       reserved_58[4];         /**< \brief 58, \internal Reserved */
       __I  Ifx_GETH_DMA_CH_CURRENT_APP_RXBUFFER_L CURRENT_APP_RXBUFFER_L;    /**< \brief 5C, DMA Channel Current App RxBuffer L*/
       __IO Ifx_GETH_DMA_CH_STATUS              STATUS;                 /**< \brief 60, DMA Channel Status*/
       __I  Ifx_GETH_DMA_CH_DEBUG_STATUS        DEBUG_STATUS;           /**< \brief 64, DMA Channel Debug Status*/
       __I  Ifx_GETH_DMA_CH_DESC_MEM_CACHE_FILL_LEVEL DESC_MEM_CACHE_FILL_LEVEL;    /**< \brief 68, DMA Channel Desc Mem Cache Fill Level*/
       __I  Ifx_GETH_DMA_CH_MISS_PACKET_CNT     MISS_PACKET_CNT;        /**< \brief 6C, DMA Channel Miss Packet Cnt*/
       __I  Ifx_GETH_DMA_CH_TX_DATA_XFER_RING_OFFSET TX_DATA_XFER_RING_OFFSET;    /**< \brief 70, DMA Channel Tx Data Xfer Ring Offset*/
       __I  Ifx_GETH_DMA_CH_RX_DATA_XFER_RING_OFFSET RX_DATA_XFER_RING_OFFSET;    /**< \brief 74, DMA Channel Rx Data Xfer Ring Offset*/
       __I  Ifx_GETH_DMA_CH_TX_DESC_WRITE_RING_OFFSET TX_DESC_WRITE_RING_OFFSET;    /**< \brief 78, DMA Channel Tx Desc Write Ring Offset*/
       __I  Ifx_GETH_DMA_CH_RX_DESC_WRITE_RING_OFFSET RX_DESC_WRITE_RING_OFFSET;    /**< \brief 7C, DMA Channel Rx Desc Write Ring Offset*/
} Ifx_GETH_DMA_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Geth_DMA_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DMA object */
typedef volatile struct _Ifx_GETH_DMA
{
       __IO Ifx_GETH_DMA_MODE                   MODE;                   /**< \brief 0, DMA Mode*/
       __IO Ifx_GETH_DMA_SYSBUS_MODE            SYSBUS_MODE;            /**< \brief 4, DMA SysBus Mode*/
       __I  Ifx_GETH_DMA_INTERRUPT_STATUS       INTERRUPT_STATUS;       /**< \brief 8, DMA Interrupt Status*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_GETH_DMA_AXI_TX_AR_ACE_CONTROL  AXI_TX_AR_ACE_CONTROL;    /**< \brief 10, AXI Tx AR ACE Control*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_GETH_DMA_AXI_RX_AW_ACE_CONTROL  AXI_RX_AW_ACE_CONTROL;    /**< \brief 18, AXI Rx AW ACE Control*/
       __IO Ifx_GETH_DMA_AXI_TXRX_AWAR_ACE_CONTROL AXI_TXRX_AWAR_ACE_CONTROL;    /**< \brief 1C, AXI TxRx AWAR ACE Control*/
       __I  Ifx_GETH_DMA_DEBUG_STATUS0          DEBUG_STATUS0;          /**< \brief 20, DMA Debug Status0*/
       __I  Ifx_GETH_DMA_DEBUG_STATUS1          DEBUG_STATUS1;          /**< \brief 24, DMA Debug Status1*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __I  Ifx_GETH_DMA_DEBUG_STATUS3          DEBUG_STATUS3;          /**< \brief 2C, DMA Debug Status3*/
       __I  Ifx_UReg_8Bit                       reserved_30[16];        /**< \brief 30, \internal Reserved */
       __IO Ifx_GETH_DMA_TX_EDMA_CONTROL        TX_EDMA_CONTROL;        /**< \brief 40, DMA Tx EDMA Control*/
       __IO Ifx_GETH_DMA_RX_EDMA_CONTROL        RX_EDMA_CONTROL;        /**< \brief 44, DMA Rx EDMA Control*/
       __I  Ifx_UReg_8Bit                       reserved_48[8];         /**< \brief 48, \internal Reserved */
       __IO Ifx_GETH_DMA_AXI_LPI_ENTRY_INTERVAL AXI_LPI_ENTRY_INTERVAL;    /**< \brief 50, AXI LPI Entry Interval*/
       __IO Ifx_GETH_DMA_TBS_CTRL0              TBS_CTRL0;              /**< \brief 54, DMA TBS CTRL0*/
       __IO Ifx_GETH_DMA_TBS_CTRL1              TBS_CTRL1;              /**< \brief 58, DMA TBS CTRL1*/
       __IO Ifx_GETH_DMA_TBS_CTRL2              TBS_CTRL2;              /**< \brief 5C, DMA TBS CTRL2*/
       __IO Ifx_GETH_DMA_TBS_CTRL3              TBS_CTRL3;              /**< \brief 60, DMA TBS CTRL3*/
       __I  Ifx_GETH_DMA_SAFETY_INTERRUPT_STATUS SAFETY_INTERRUPT_STATUS;    /**< \brief 64, DMA Safety Interrupt Status*/
       __IO Ifx_GETH_DMA_ECC_INTERRUPT_ENABLE   ECC_INTERRUPT_ENABLE;    /**< \brief 68, DMA ECC Interrupt enable*/
       __IO Ifx_GETH_DMA_ECC_INTERRUPT_STATUS   ECC_INTERRUPT_STATUS;    /**< \brief 6C, DMA ECC Interrupt Status*/
       __IO Ifx_GETH_DMA_DPP_CONTROL            DPP_CONTROL;            /**< \brief 70, DMA DPP Control*/
       __IO Ifx_GETH_DMA_DPP_INTERRUPT_STATUS   DPP_INTERRUPT_STATUS;    /**< \brief 74, DMA DPP Interrupt Status*/
       __I  Ifx_UReg_8Bit                       reserved_78[8];         /**< \brief 78, \internal Reserved */
       __IO Ifx_GETH_DMA_CH_IND_CTRL            CH_IND_CTRL;            /**< \brief 80, DMA CH Ind Ctrl*/
       union
       {
            __IO Ifx_GETH_DMA_CH_IND_DATA            CH_IND_DATA;            /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH0_TXEXTCFG           CH0_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH1_TXEXTCFG           CH1_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH2_TXEXTCFG           CH2_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH3_TXEXTCFG           CH3_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH4_TXEXTCFG           CH4_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH5_TXEXTCFG           CH5_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH6_TXEXTCFG           CH6_TXEXTCFG;           /**< \brief 84, */
            __IO Ifx_GETH_DMA_CH7_TXEXTCFG           CH7_TXEXTCFG;           /**< \brief 84, */
       };
       __IO Ifx_GETH_DMA_SFTY_IND_CTRL          SFTY_IND_CTRL;          /**< \brief 88, DMA Sfty Ind Ctrl*/
       union
       {
            __IO Ifx_GETH_DMA_SFTY_IND_DATA          SFTY_IND_DATA;          /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_CTRL           AM_SFTY_CTRL;           /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_DPP_INTR_STS   AM_SFTY_DPP_INTR_STS;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_ECC_INTR_STS   AM_SFTY_ECC_INTR_STS;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_INTR_EN        AM_SFTY_INTR_EN;        /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_RDC_DBG_CTRL   AM_SFTY_RDC_DBG_CTRL;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_RDC_DBG_DATA   AM_SFTY_RDC_DBG_DATA;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_RDC_ECC_ERR_CNTR_STS AM_SFTY_RDC_ECC_ERR_CNTR_STS;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AM_SFTY_WRC_DBG_CTRL   AM_SFTY_WRC_DBG_CTRL;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_CTRL           AS_SFTY_CTRL;           /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_DPP_INTR_STS   AS_SFTY_DPP_INTR_STS;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_ECC_INTR_STS   AS_SFTY_ECC_INTR_STS;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_INTR_EN        AS_SFTY_INTR_EN;        /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_RAC_DBG_ADDR   AS_SFTY_RAC_DBG_ADDR;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_RAC_DBG_CTRL   AS_SFTY_RAC_DBG_CTRL;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_WAC_DBG_ADDR   AS_SFTY_WAC_DBG_ADDR;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_WAC_DBG_CTRL   AS_SFTY_WAC_DBG_CTRL;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_WDC_DBG_CTRL   AS_SFTY_WDC_DBG_CTRL;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_WDC_DBG_DATA   AS_SFTY_WDC_DBG_DATA;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_AS_SFTY_WDC_ECC_ERR_CNTR_STS AS_SFTY_WDC_ECC_ERR_CNTR_STS;    /**< \brief 8C, */
            __IO Ifx_GETH_DMA_SFTY_DBG_EIC           SFTY_DBG_EIC;           /**< \brief 8C, */
       };
       __I  Ifx_UReg_8Bit                       reserved_90[112];       /**< \brief 90, \internal Reserved */
       __IO Ifx_GETH_DMA_CH                     CH[8];                  /**< \brief 100, */
} Ifx_GETH_DMA;

/******************************************************************************/
/** \addtogroup IfxSfr_Geth_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief GETH object */
typedef volatile struct _Ifx_GETH
{
       __IO Ifx_GETH_CLC                        CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_GETH_ID                         ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_GETH_RST                        RST;                    /**< \brief C, */
       __IO Ifx_GETH_MACEN                      MACEN;                  /**< \brief 18, Clock control register for MAC*/
       __I  Ifx_UReg_8Bit                       reserved_1C[8];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_GETH_PROT                       PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_GETH_ACCENGLOBAL                ACCENGLOBAL;            /**< \brief 40, */
       __IO Ifx_GETH_ACCENMAC                   ACCENMAC[2];            /**< \brief 60, */
       __IO Ifx_GETH_ACCENCH                    ACCENCH[8];             /**< \brief A0, */
       __I  Ifx_UReg_8Bit                       reserved_1A0[65120];    /**< \brief 1A0, \internal Reserved */
       __IO Ifx_GETH_PORT                       PORT[2];                /**< \brief 10000, */
       __I  Ifx_UReg_8Bit                       reserved_14000[40960];    /**< \brief 14000, \internal Reserved */
       __IO Ifx_GETH_BRIDGE                     BRIDGE;                 /**< \brief 1E000, DPP ECC EIC*/
       __I  Ifx_UReg_8Bit                       reserved_1E2E8[3352];    /**< \brief 1E2E8, \internal Reserved */
       __IO Ifx_GETH_DMA                        DMA;                    /**< \brief 1F000, */
       __I  Ifx_UReg_8Bit                       reserved_1F500[2816];    /**< \brief 1F500, \internal Reserved */
       Ifx_UReg_64Bit                      MEMORY[8192];          /**< \brief 20000, */
} Ifx_GETH;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXGETH_REGDEF_H */
