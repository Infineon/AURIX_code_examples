/**
 * \file IfxLeth_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_LETH/V13.1.1.1.14
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Leth_Registers Leth Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Leth_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Leth_Registers
 * 
 * \defgroup IfxSfr_Leth_Registers_union Register unions
 * \ingroup IfxSfr_Leth_Registers
 * 
 * \defgroup IfxSfr_Leth_Registers_struct Memory map
 * \ingroup IfxSfr_Leth_Registers
 */
#ifndef IFXLETH_REGDEF_H
#define IFXLETH_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Leth_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_LETH_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_LETH_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_LETH_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_LETH_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_LETH_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_LETH_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_LETH_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_LETH_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_LETH_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_LETH_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_LETH_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_LETH_ACCEN_WRB_FPI_Bits;

/** \brief ETHBR CSR SW CTRL REG */
typedef struct _Ifx_LETH_BRIDGE_ETHBR_CSR_SW_CTRL_REG_Bits
{
    __IO Ifx_UReg_32Bit RESERVED_RCWE:1;    /**< \brief [0:0] Reserved (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit SEEN:1;            /**< \brief [8:8] Slave Error Response Enable (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_LETH_BRIDGE_ETHBR_CSR_SW_CTRL_REG_Bits;

/** \brief ETHBR FWD CTRL REG */
typedef struct _Ifx_LETH_BRIDGE_ETHBR_FWD_CTRL_REG_Bits
{
    __IO Ifx_UReg_32Bit MAX_PKT_LENGTH:16;    /**< \brief [15:0] Maximum Packet Length for the Port-to-Port Forwarding Traffic (rw) */
    __IO Ifx_UReg_32Bit FW_DIS_EIN:1;      /**< \brief [16:16] Disable ATI Error Injection in the Forwarding Port for all Rx Packet Error types in the ingress port (rw) */
    __IO Ifx_UReg_32Bit PYLD_CHKERR_FWEI:1;    /**< \brief [17:17] Enable ATI Error Injection for the port forwarded packets which are received with IP Payload Checksum Error Status in the ingress port (rw) */
    __IO Ifx_UReg_32Bit IP_HDRERR_FWEI:1;    /**< \brief [18:18] Enable ATI Error Injection for the port forwarded packets which are received with IP Header Error Status in the ingress port (rw) */
    __IO Ifx_UReg_32Bit GIANT_PKT_FWEI:1;    /**< \brief [19:19] Enable ATI Error Injection for the port forwarded packets which are received with Giant Packet Status in the ingress port (rw) */
    __IO Ifx_UReg_32Bit P2P_RUNT_PKT_FWEI:1;    /**< \brief [20:20] Enable ATI Error Injection for the port forwarded packets which are received with Good Runt Packet Status in the ingress port (rw) */
    __IO Ifx_UReg_32Bit PBL:8;             /**< \brief [28:21] Transmit Programmable Burst Length (rw) */
    __IO Ifx_UReg_32Bit PORT_SEL:2;        /**< \brief [30:29] Port Select (rw) */
    __IO Ifx_UReg_32Bit Q_CH_MAPPING_EN:1;    /**< \brief [31:31] Set to 0x1 to enable TxQ to RxC mapping in two-port/four-port configuration (rw) */
} Ifx_LETH_BRIDGE_ETHBR_FWD_CTRL_REG_Bits;

/** \brief ETHBR INTR STATUS REG */
typedef struct _Ifx_LETH_BRIDGE_ETHBR_INTR_STATUS_REG_Bits
{
    __I  Ifx_UReg_32Bit PORT_0_MACIS:1;    /**< \brief [0:0] Port 0 MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_0_MTLIS:1;    /**< \brief [1:1] Port 0 MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_1_MACIS:1;    /**< \brief [2:2] Port 1 MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_1_MTLIS:1;    /**< \brief [3:3] Port 1 MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_2_MACIS:1;    /**< \brief [4:4] Port 2 MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_2_MTLIS:1;    /**< \brief [5:5] Port 2 MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_3_MACIS:1;    /**< \brief [6:6] Port 3 MAC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit PORT_3_MTLIS:1;    /**< \brief [7:7] Port 3 MTL Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit DMAIS:1;           /**< \brief [16:16] DMA Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_LETH_BRIDGE_ETHBR_INTR_STATUS_REG_Bits;

/** \brief PORT CTRL REG */
typedef struct _Ifx_LETH_BRIDGE_PORT_CTRL_MAP_CTRL_REG_Bits
{
    __IO Ifx_UReg_32Bit FWD_EN:5;          /**< \brief [4:0] Indicates whether any of the TxQ[4:0] is a forwarding path (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit RXC_EN:8;          /**< \brief [15:8] Enable any of the RxC[7:0] (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ_EN:5;          /**< \brief [28:24] Enable any of the TxQ[4:0] (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_CTRL_REG_Bits;

/** \brief PORT FWD PORT MAP */
typedef struct _Ifx_LETH_BRIDGE_PORT_CTRL_MAP_FWD_PORT_MAP_Bits
{
    __IO Ifx_UReg_32Bit TXQ0_FWD_PORT_NUM:2;    /**< \brief [1:0] The port number of the RxC to which TxQ0 connection is mapped (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ1_FWD_PORT_NUM:2;    /**< \brief [5:4] The port number of the RxC to which TxQ1 connection is mapped (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ2_FWD_PORT_NUM:2;    /**< \brief [9:8] The port number of the RxC to which TxQ2 connection is mapped (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ3_FWD_PORT_NUM:2;    /**< \brief [13:12] The port number of the RxC to which TxQ3 connection is mapped (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit TXQ4_FWD_PORT_NUM:2;    /**< \brief [17:16] The port number of the RxC to which TxQ4 connection is mapped (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_FWD_PORT_MAP_Bits;

/** \brief PORT RXC MAP */
typedef struct _Ifx_LETH_BRIDGE_PORT_CTRL_MAP_RXC_MAP_Bits
{
    __IO Ifx_UReg_32Bit RXC0_MAP:4;        /**< \brief [3:0] RxC0 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC1_MAP:4;        /**< \brief [7:4] RxC1 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC2_MAP:4;        /**< \brief [11:8] RxC2 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC3_MAP:4;        /**< \brief [15:12] RxC3 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC4_MAP:4;        /**< \brief [19:16] RxC4 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC5_MAP:4;        /**< \brief [23:20] RxC5 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC6_MAP:4;        /**< \brief [27:24] RxC6 connection mappings to Rx DMA Channel of Host port (rw) */
    __IO Ifx_UReg_32Bit RXC7_MAP:4;        /**< \brief [31:28] RxC7 connection mappings to Rx DMA Channel of Host port (rw) */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_RXC_MAP_Bits;

/** \brief PORT TXQ MAP */
typedef struct _Ifx_LETH_BRIDGE_PORT_CTRL_MAP_TXQ_MAP_Bits
{
    __IO Ifx_UReg_32Bit TXQ0_MAP:4;        /**< \brief [3:0] TxQ0 connection mappings to either Tx DMA channel of the Host port or Rx DMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ1_MAP:4;        /**< \brief [7:4] TxQ1 connection mappings to either Tx DMA channel of the Host port or Rx DMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ2_MAP:4;        /**< \brief [11:8] TxQ2 connection mappings to either Tx DMA channel of the Host port or Rx DMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ3_MAP:4;        /**< \brief [15:12] TxQ3 connection mappings to either Tx DMA channel of the Host port or Rx DMA Channels of the other Ethernet line ports (rw) */
    __IO Ifx_UReg_32Bit TXQ4_MAP:4;        /**< \brief [19:16] TxQ4 connection mappings to either Tx DMA channel of the Host port or Rx DMA Channels of the other Ethernet line ports (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_TXQ_MAP_Bits;

/** \brief PORT LPBK CTRL REG */
typedef struct _Ifx_LETH_BRIDGE_PORT_LPBK_CTRL_REG_Bits
{
    __IO Ifx_UReg_32Bit PORT0_LPBK_EN:1;    /**< \brief [0:0] To enable same-port loopback mode for Port 0 (rw) */
    __IO Ifx_UReg_32Bit PORT1_LPBK_EN:1;    /**< \brief [1:1] To enable same-port loopback mode for Port 1 (rw) */
    __IO Ifx_UReg_32Bit PORT2_LPBK_EN:1;    /**< \brief [2:2] To enable same-port loopback mode for Port 2 (rw) */
    __IO Ifx_UReg_32Bit PORT3_LPBK_EN:1;    /**< \brief [3:3] To enable same-port loopback mode for Port 3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PTP_PORT_NUM:2;    /**< \brief [25:24] Specifies the Port number for the PTP Timestamp Selection from Port 0/ Port 1/ Port 2/ Port 3 (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_LETH_BRIDGE_PORT_LPBK_CTRL_REG_Bits;

/** \brief PORT RXC FLUSH CTRL REG */
typedef struct _Ifx_LETH_BRIDGE_PORT_RXC_FLUSH_CTRL_REG_Bits
{
    __IO Ifx_UReg_32Bit RXC_FLUSH_PORT0:8;    /**< \brief [7:0] To flush the Rx Queue corresponding to the selected RxC in Port 0 when the RxC is mapped to forwarding path (rw) */
    __IO Ifx_UReg_32Bit RXC_FLUSH_PORT1:8;    /**< \brief [15:8] To flush the Rx Queue corresponding to the selected RxC in Port 1 when the RxC is mapped to forwarding path (rw) */
    __IO Ifx_UReg_32Bit RXC_FLUSH_PORT2:8;    /**< \brief [23:16] To flush the Rx Queue corresponding to the selected RxC in Port 2 when the RxC is mapped to forwarding path (rw) */
    __IO Ifx_UReg_32Bit RXC_FLUSH_PORT3:8;    /**< \brief [31:24] To flush the Rx Queue corresponding to the selected RxC in Port 3 when the RxC is mapped to forwarding path (rw) */
} Ifx_LETH_BRIDGE_PORT_RXC_FLUSH_CTRL_REG_Bits;

/** \brief PORT RX WRR WEIGHTS */
typedef struct _Ifx_LETH_BRIDGE_PORT_RX_WRR_WEIGHTS_Bits
{
    __IO Ifx_UReg_32Bit RX_WRR_PORT0:7;    /**< \brief [6:0] Port 0 Rx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RX_WRR_PORT1:7;    /**< \brief [14:8] Port 1 Rx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit RX_WRR_PORT2:7;    /**< \brief [22:16] Port 2 Rx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit RX_WRR_PORT3:7;    /**< \brief [30:24] Port 3 Rx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_LETH_BRIDGE_PORT_RX_WRR_WEIGHTS_Bits;

/** \brief PORT TX WRR WEIGHTS */
typedef struct _Ifx_LETH_BRIDGE_PORT_TX_WRR_WEIGHTS_Bits
{
    __IO Ifx_UReg_32Bit TX_WRR_PORT0:7;    /**< \brief [6:0] Port 0 Tx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit TX_WRR_PORT1:7;    /**< \brief [14:8] Port 1 Tx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit TX_WRR_PORT2:7;    /**< \brief [22:16] Port 2 Tx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit TX_WRR_PORT3:7;    /**< \brief [30:24] Port 3 Tx WRR Weight (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_LETH_BRIDGE_PORT_TX_WRR_WEIGHTS_Bits;

/** \brief Clock control register */
typedef struct _Ifx_LETH_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module disable request bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module disable status bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_LETH_CLC_Bits;

/** \brief DMA Channel Rx/Tx 0 Master TAG ID, VM and PRS allocation */
typedef struct _Ifx_LETH_DMACH_TAGVMPRS_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine Enable (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set Enable (rw) */
    __IO Ifx_UReg_32Bit TAGOFF:1;          /**< \brief [24:24] Tag Offset (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_LETH_DMACH_TAGVMPRS_Bits;

/** \brief AXI4 Rx AW ACE Control */
typedef struct _Ifx_LETH_DMA_AXI4_RX_AW_ACE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RDWC:4;            /**< \brief [3:0] Receive DMA Write Descriptor Cache Control (rw) */
    __IO Ifx_UReg_32Bit RDWD:2;            /**< \brief [5:4] Receive DMA Write Descriptor Domain Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_UReg_32Bit RPC:4;             /**< \brief [11:8] Receive DMA Payload Cache Control (rw) */
    __IO Ifx_UReg_32Bit RPD:2;             /**< \brief [13:12] Receive DMA Payload Domain Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __IO Ifx_UReg_32Bit RHC:4;             /**< \brief [19:16] Receive DMA Header Cache Control (rw) */
    __IO Ifx_UReg_32Bit RHD:2;             /**< \brief [21:20] Receive DMA Header Domain Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_22:2;    /**< \brief [23:22] Reserved (r) */
    __IO Ifx_UReg_32Bit RDC:4;             /**< \brief [27:24] Receive DMA Buffer Cache Control (rw) */
    __IO Ifx_UReg_32Bit RDD:2;             /**< \brief [29:28] Receive DMA Buffer Domain Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_DMA_AXI4_RX_AW_ACE_CONTROL_Bits;

/** \brief AXI4 TxRx AWAR ACE Control */
typedef struct _Ifx_LETH_DMA_AXI4_TXRX_AWAR_ACE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TDWC:4;            /**< \brief [3:0] Transmit DMA Write Descriptor Cache control (rw) */
    __IO Ifx_UReg_32Bit TDWD:2;            /**< \brief [5:4] Transmit DMA Write Descriptor Domain control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_UReg_32Bit RDRC:4;            /**< \brief [11:8] Receive DMA Read Descriptor Cache control (rw) */
    __IO Ifx_UReg_32Bit RDRD:2;            /**< \brief [13:12] Receive DMA Read Descriptor Domain control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __IO Ifx_UReg_32Bit RDP:3;             /**< \brief [18:16] DMA Read Protection control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __IO Ifx_UReg_32Bit WRP:3;             /**< \brief [22:20] DMA Write Protection control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_23:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_LETH_DMA_AXI4_TXRX_AWAR_ACE_CONTROL_Bits;

/** \brief AXI4 Tx AR ACE Control */
typedef struct _Ifx_LETH_DMA_AXI4_TX_AR_ACE_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TDRC:4;            /**< \brief [3:0] Transmit DMA Read Descriptor Cache Control (rw) */
    __IO Ifx_UReg_32Bit TDRD:2;            /**< \brief [5:4] Transmit DMA Read Descriptor Domain Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_UReg_32Bit TEC:4;             /**< \brief [11:8] Transmit DMA Extended Packet Buffer (rw) */
    __IO Ifx_UReg_32Bit TED:2;             /**< \brief [13:12] Transmit DMA Extended Packet Buffer (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __IO Ifx_UReg_32Bit THC:4;             /**< \brief [19:16] Transmit DMA First Packet Buffer (rw) */
    __IO Ifx_UReg_32Bit THD:2;             /**< \brief [21:20] Transmit DMA First Packet Buffer (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_22:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_DMA_AXI4_TX_AR_ACE_CONTROL_Bits;

/** \brief AXI LPI Entry Interval */
typedef struct _Ifx_LETH_DMA_AXI_LPI_ENTRY_INTERVAL_Bits
{
    __IO Ifx_UReg_32Bit LPIEI:4;           /**< \brief [3:0] LPI Entry Interval (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_4:28;    /**< \brief [31:4] Reserved (r) */
} Ifx_LETH_DMA_AXI_LPI_ENTRY_INTERVAL_Bits;

/** \brief DMA CHy Control */
typedef struct _Ifx_LETH_DMA_CH_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_MSS:14;    /**< \brief [13:0] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __IO Ifx_UReg_32Bit PBLX8:1;           /**< \brief [16:16] 8xPBL mode (rw) */
    __I  Ifx_UReg_32Bit RESERVED_17:1;     /**< \brief [17:17] Reserved (r) */
    __IO Ifx_UReg_32Bit DSL:3;             /**< \brief [20:18] Descriptor Skip Length (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_21:3;    /**< \brief [23:21] Reserved (r) */
    __IO Ifx_UReg_32Bit SPH:1;             /**< \brief [24:24] Split Headers (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_DMA_CH_CONTROL_Bits;

/** \brief DMA CHy Current App RxBuffer */
typedef struct _Ifx_LETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits
{
    __I  Ifx_UReg_32Bit CURRBUFAPTR:32;    /**< \brief [31:0] Application Receive Buffer Address Pointer (r) */
} Ifx_LETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits;

/** \brief DMA CHy Current App RxDesc */
typedef struct _Ifx_LETH_DMA_CH_CURRENT_APP_RXDESC_Bits
{
    __I  Ifx_UReg_32Bit CURRDESAPTR:32;    /**< \brief [31:0] Application Receive Descriptor Address Pointer (r) */
} Ifx_LETH_DMA_CH_CURRENT_APP_RXDESC_Bits;

/** \brief DMA CHy Current App TxBuffer */
typedef struct _Ifx_LETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits
{
    __I  Ifx_UReg_32Bit CURTBUFAPTR:32;    /**< \brief [31:0] Application Transmit Buffer Address Pointer (r) */
} Ifx_LETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits;

/** \brief DMA CHy Current App TxDesc */
typedef struct _Ifx_LETH_DMA_CH_CURRENT_APP_TXDESC_Bits
{
    __I  Ifx_UReg_32Bit CURTDESAPTR:32;    /**< \brief [31:0] Application Transmit Descriptor Address Pointer (r) */
} Ifx_LETH_DMA_CH_CURRENT_APP_TXDESC_Bits;

/** \brief DMA CHy Interrupt Enable */
typedef struct _Ifx_LETH_DMA_CH_INTERRUPT_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TIE:1;             /**< \brief [0:0] Transmit Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXSE:1;            /**< \brief [1:1] Transmit Stopped Enable (rw) */
    __IO Ifx_UReg_32Bit TBUE:1;            /**< \brief [2:2] Transmit Buffer Unavailable Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_5_3:3;    /**< \brief [5:3] Reserved (r) */
    __IO Ifx_UReg_32Bit RIE:1;             /**< \brief [6:6] Receive Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RBUE:1;            /**< \brief [7:7] Receive Buffer Unavailable Enable (rw) */
    __IO Ifx_UReg_32Bit RSE:1;             /**< \brief [8:8] Receive Stopped Enable (rw) */
    __IO Ifx_UReg_32Bit RWTE:1;            /**< \brief [9:9] Receive Watchdog Timeout Enable (rw) */
    __IO Ifx_UReg_32Bit ETIE:1;            /**< \brief [10:10] Early Transmit Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ERIE:1;            /**< \brief [11:11] Early Receive Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit FBEE:1;            /**< \brief [12:12] Fatal Bus Error Enable (rw) */
    __IO Ifx_UReg_32Bit CDEE:1;            /**< \brief [13:13] Context Descriptor Error Enable (rw) */
    __IO Ifx_UReg_32Bit AIE:1;             /**< \brief [14:14] Abnormal Interrupt Summary Enable (rw) */
    __IO Ifx_UReg_32Bit NIE:1;             /**< \brief [15:15] Normal Interrupt Summary Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_DMA_CH_INTERRUPT_ENABLE_Bits;

/** \brief DMA CHy Miss Frame Cnt */
typedef struct _Ifx_LETH_DMA_CH_MISS_FRAME_CNT_Bits
{
    __I  Ifx_UReg_32Bit MFC:11;            /**< \brief [10:0] Dropped Packet Counters (r) */
    __I  Ifx_UReg_32Bit RESERVED_14_11:4;    /**< \brief [14:11] Reserved (r) */
    __I  Ifx_UReg_32Bit MFCO:1;            /**< \brief [15:15] Overflow status of the MFC Counter (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_DMA_CH_MISS_FRAME_CNT_Bits;

/** \brief DMA CHyRxDesc List Address */
typedef struct _Ifx_LETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_LSB:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit RDESLA:30;         /**< \brief [31:2] Start of Receive List (rw) */
} Ifx_LETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits;

/** \brief DMA CHy RxDesc Tail Pointer */
typedef struct _Ifx_LETH_DMA_CH_RXDESC_TAIL_POINTER_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_LSB:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit RDTP:30;           /**< \brief [31:2] Receive Descriptor Tail Pointer (rw) */
} Ifx_LETH_DMA_CH_RXDESC_TAIL_POINTER_Bits;

/** \brief DMA CHy RXP Accept Cnt */
typedef struct _Ifx_LETH_DMA_CH_RXP_ACCEPT_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPAC:31;          /**< \brief [30:0] Rx Parser Accept Counter (r) */
    __I  Ifx_UReg_32Bit RXPACOF:1;         /**< \brief [31:31] Rx Parser Accept Counter Overflow Bit (r) */
} Ifx_LETH_DMA_CH_RXP_ACCEPT_CNT_Bits;

/** \brief DMA CHy Rx Control */
typedef struct _Ifx_LETH_DMA_CH_RX_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit SR:1;              /**< \brief [0:0] Start or Stop Receive (rw) */
    __I  Ifx_UReg_32Bit RBSZ_X_0:2;        /**< \brief [2:1] Receive Buffer size Low (r) */
    __IO Ifx_UReg_32Bit RBSZ_13_Y:12;      /**< \brief [14:3] Receive Buffer size High (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __IO Ifx_UReg_32Bit RXPBL:6;           /**< \brief [21:16] Receive Programmable Burst Length (rw) */
    __I  Ifx_UReg_32Bit RESERVED_ERIC:1;    /**< \brief [22:22] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23:1;     /**< \brief [23:23] Reserved (r) */
    __IO Ifx_UReg_32Bit RQOS:4;            /**< \brief [27:24] Rx AXI4 QOS (rw) */
    __I  Ifx_UReg_32Bit RESERVED_30_28:3;    /**< \brief [30:28] Reserved (r) */
    __IO Ifx_UReg_32Bit RPF:1;             /**< \brief [31:31] Rx Packet Flush (rw) */
} Ifx_LETH_DMA_CH_RX_CONTROL_Bits;

/** \brief DMA CHy Rx Control2 */
typedef struct _Ifx_LETH_DMA_CH_RX_CONTROL2_Bits
{
    __IO Ifx_UReg_32Bit RDRL:10;           /**< \brief [9:0] Receive Descriptor Ring Length (rw) */
    __I  Ifx_UReg_32Bit RESERVED_X_10:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit ARBS:8;            /**< \brief [23:16] Alternate Receive Buffer Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_DMA_CH_RX_CONTROL2_Bits;

/** \brief DMA CHy Rx Interrupt Watchdog Timer */
typedef struct _Ifx_LETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits
{
    __IO Ifx_UReg_32Bit RWT:8;             /**< \brief [7:0] Receive Interrupt Watchdog Timer Count (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __IO Ifx_UReg_32Bit RWTU:2;            /**< \brief [17:16] Receive Interrupt Watchdog Timer Count Units (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_18:14;    /**< \brief [31:18] Reserved (r) */
} Ifx_LETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits;

/** \brief DMA CHy Slot Function Control Status */
typedef struct _Ifx_LETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ESC:1;             /**< \brief [0:0] Enable Slot Comparison (rw) */
    __IO Ifx_UReg_32Bit ASC:1;             /**< \brief [1:1] Advance Slot Check (rw) */
    __I  Ifx_UReg_32Bit RESERVED_3_2:2;    /**< \brief [3:2] Reserved (r) */
    __IO Ifx_UReg_32Bit SIV:12;            /**< \brief [15:4] Slot Interval Value (rw) */
    __I  Ifx_UReg_32Bit RSN:4;             /**< \brief [19:16] Reference Slot Number (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits;

/** \brief DMA CHy Status */
typedef struct _Ifx_LETH_DMA_CH_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TI:1;              /**< \brief [0:0] Transmit Interrupt (rw) */
    __IO Ifx_UReg_32Bit TPS:1;             /**< \brief [1:1] Transmit Process Stopped (rw) */
    __IO Ifx_UReg_32Bit TBU:1;             /**< \brief [2:2] Transmit Buffer Unavailable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_5_3:3;    /**< \brief [5:3] Reserved (r) */
    __IO Ifx_UReg_32Bit RI:1;              /**< \brief [6:6] Receive Interrupt (rw) */
    __IO Ifx_UReg_32Bit RBU:1;             /**< \brief [7:7] Receive Buffer Unavailable (rw) */
    __IO Ifx_UReg_32Bit RPS:1;             /**< \brief [8:8] Receive Process Stopped (rw) */
    __IO Ifx_UReg_32Bit RWT:1;             /**< \brief [9:9] Receive Watchdog Timeout (rw) */
    __IO Ifx_UReg_32Bit ETI:1;             /**< \brief [10:10] Early Transmit Interrupt (rw) */
    __IO Ifx_UReg_32Bit ERI:1;             /**< \brief [11:11] Early Receive Interrupt (rw) */
    __IO Ifx_UReg_32Bit FBE:1;             /**< \brief [12:12] Fatal Bus Error (rw) */
    __IO Ifx_UReg_32Bit CDE:1;             /**< \brief [13:13] Context Descriptor Error (rw) */
    __IO Ifx_UReg_32Bit AIS:1;             /**< \brief [14:14] Abnormal Interrupt Summary (rw) */
    __IO Ifx_UReg_32Bit NIS:1;             /**< \brief [15:15] Normal Interrupt Summary (rw) */
    __I  Ifx_UReg_32Bit TEB:3;             /**< \brief [18:16] Tx DMA Error Bits (r) */
    __I  Ifx_UReg_32Bit REB:3;             /**< \brief [21:19] Rx DMA Error Bits (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_22:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_DMA_CH_STATUS_Bits;

/** \brief DMA CHyTxDesc List Address */
typedef struct _Ifx_LETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_LSB:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit TDESLA:30;         /**< \brief [31:2] Start of Transmit List (rw) */
} Ifx_LETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits;

/** \brief DMA CHy TxDesc Ring Length */
typedef struct _Ifx_LETH_DMA_CH_TXDESC_RING_LENGTH_Bits
{
    __IO Ifx_UReg_32Bit TDRL:10;           /**< \brief [9:0] Transmit Descriptor Ring Length (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_10:22;    /**< \brief [31:10] Reserved (r) */
} Ifx_LETH_DMA_CH_TXDESC_RING_LENGTH_Bits;

/** \brief DMA CHy TxDesc Tail Pointer */
typedef struct _Ifx_LETH_DMA_CH_TXDESC_TAIL_POINTER_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_LSB:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit TDTP:30;           /**< \brief [31:2] Transmit Descriptor Tail Pointer (rw) */
} Ifx_LETH_DMA_CH_TXDESC_TAIL_POINTER_Bits;

/** \brief DMA CHy Tx Control */
typedef struct _Ifx_LETH_DMA_CH_TX_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit ST:1;              /**< \brief [0:0] Start or Stop Transmission Command (rw) */
    __IO Ifx_UReg_32Bit TCW:3;             /**< \brief [3:1] Transmit Channel Weight (rw) */
    __IO Ifx_UReg_32Bit OSF:1;             /**< \brief [4:4] Operate on Second Packet (rw) */
    __I  Ifx_UReg_32Bit RESERVED_11_5:7;    /**< \brief [11:5] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSE:1;    /**< \brief [12:12] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSE_MODE:2;    /**< \brief [14:13] Reserved (r) */
    __IO Ifx_UReg_32Bit IPBL:1;            /**< \brief [15:15] Ignore PBL Requirement (rw) */
    __IO Ifx_UReg_32Bit TXPBL:6;           /**< \brief [21:16] Transmit Programmable Burst Length (rw) */
    __I  Ifx_UReg_32Bit RESERVED_ETIC:1;    /**< \brief [22:22] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23:1;     /**< \brief [23:23] Reserved (r) */
    __IO Ifx_UReg_32Bit TQOS:4;            /**< \brief [27:24] Transmit QOS (rw) */
    __I  Ifx_UReg_32Bit RESERVED_EDSE:1;    /**< \brief [28:28] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TFSEL:2;    /**< \brief [30:29] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31:1;     /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_DMA_CH_TX_CONTROL_Bits;

/** \brief DMA Debug Status0 */
typedef struct _Ifx_LETH_DMA_DEBUG_STATUS0_Bits
{
    __I  Ifx_UReg_32Bit AXWHSTS:1;         /**< \brief [0:0] AXI Master Write Channel (r) */
    __I  Ifx_UReg_32Bit AXRHSTS:1;         /**< \brief [1:1] AXI Master Read Channel Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __I  Ifx_UReg_32Bit RPS0:4;            /**< \brief [11:8] DMA Channel 0 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS0:4;            /**< \brief [15:12] DMA Channel 0 Transmit Process State (r) */
    __I  Ifx_UReg_32Bit RPS1:4;            /**< \brief [19:16] DMA Channel 1 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS1:4;            /**< \brief [23:20] DMA Channel 1 Transmit Process State (r) */
    __I  Ifx_UReg_32Bit RPS2:4;            /**< \brief [27:24] DMA Channel 2 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS2:4;            /**< \brief [31:28] DMA Channel 2 Transmit Process State (r) */
} Ifx_LETH_DMA_DEBUG_STATUS0_Bits;

/** \brief DMA Debug Status1 */
typedef struct _Ifx_LETH_DMA_DEBUG_STATUS1_Bits
{
    __I  Ifx_UReg_32Bit RPS3:4;            /**< \brief [3:0] DMA Channel 3 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS3:4;            /**< \brief [7:4] DMA Channel 3 Transmit Process State (r) */
    __I  Ifx_UReg_32Bit RPS4:4;            /**< \brief [11:8] DMA Channel 4 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS4:4;            /**< \brief [15:12] DMA Channel 4 Transmit Process State (r) */
    __I  Ifx_UReg_32Bit RPS5:4;            /**< \brief [19:16] DMA Channel 5 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS5:4;            /**< \brief [23:20] DMA Channel 5 Transmit Process State (r) */
    __I  Ifx_UReg_32Bit RPS6:4;            /**< \brief [27:24] DMA Channel 6 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS6:4;            /**< \brief [31:28] DMA Channel 6 Transmit Process State (r) */
} Ifx_LETH_DMA_DEBUG_STATUS1_Bits;

/** \brief DMA Debug Status2 */
typedef struct _Ifx_LETH_DMA_DEBUG_STATUS2_Bits
{
    __I  Ifx_UReg_32Bit RPS7:4;            /**< \brief [3:0] DMA Channel 7 Receive Process State (r) */
    __I  Ifx_UReg_32Bit TPS7:4;            /**< \brief [7:4] DMA Channel 7 Transmit Process State (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_8:24;    /**< \brief [31:8] Reserved (r) */
} Ifx_LETH_DMA_DEBUG_STATUS2_Bits;

/** \brief DMA Interrupt Status */
typedef struct _Ifx_LETH_DMA_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit DC0IS:1;           /**< \brief [0:0] DMA Channel 0 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC1IS:1;           /**< \brief [1:1] DMA Channel 1 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC2IS:1;           /**< \brief [2:2] DMA Channel 2 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC3IS:1;           /**< \brief [3:3] DMA Channel 3 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC4IS:1;           /**< \brief [4:4] DMA Channel 4 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC5IS:1;           /**< \brief [5:5] DMA Channel 5 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC6IS:1;           /**< \brief [6:6] DMA Channel 6 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit DC7IS:1;           /**< \brief [7:7] DMA Channel 7 Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MTLIS:1;    /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MACIS:1;    /**< \brief [17:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_18:14;    /**< \brief [31:18] Reserved (r) */
} Ifx_LETH_DMA_INTERRUPT_STATUS_Bits;

/** \brief DMA Mode */
typedef struct _Ifx_LETH_DMA_MODE_Bits
{
    __IO Ifx_UReg_32Bit SWR:1;             /**< \brief [0:0] Software Reset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_DA:1;     /**< \brief [1:1] Reserved (r) */
    __IO Ifx_UReg_32Bit TAA:3;             /**< \brief [4:2] Transmit Arbitration Algorithm (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit DSPW:1;            /**< \brief [8:8] Descriptor Posted Write (rw) */
    __I  Ifx_UReg_32Bit RESERVED_ARBC:1;    /**< \brief [9:9] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_SCSW:1;    /**< \brief [10:10] Reserved (r) */
    __IO Ifx_UReg_32Bit TXPR:1;            /**< \brief [11:11] Transmit Priority (rw) */
    __I  Ifx_UReg_32Bit RESERVED_PR:3;     /**< \brief [14:12] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __IO Ifx_UReg_32Bit INTM:2;            /**< \brief [17:16] Interrupt Mode (rw) */
    __I  Ifx_UReg_32Bit RESERVED_18:1;     /**< \brief [18:18] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_DCHE:1;    /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TNDF:2;    /**< \brief [21:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RNDF:2;    /**< \brief [23:22] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_DMA_MODE_Bits;

/** \brief DMA SysBus Mode */
typedef struct _Ifx_LETH_DMA_SYSBUS_MODE_Bits
{
    __IO Ifx_UReg_32Bit FB:1;              /**< \brief [0:0] Fixed Burst Length (rw) */
    __IO Ifx_UReg_32Bit BLEN4:1;           /**< \brief [1:1] AXI Burst Length 4 (rw) */
    __IO Ifx_UReg_32Bit BLEN8:1;           /**< \brief [2:2] AXI Burst Length 8 (rw) */
    __IO Ifx_UReg_32Bit BLEN16:1;          /**< \brief [3:3] AXI Burst Length 16 (rw) */
    __IO Ifx_UReg_32Bit BLEN32:1;          /**< \brief [4:4] AXI Burst Length 32 (rw) */
    __IO Ifx_UReg_32Bit BLEN64:1;          /**< \brief [5:5] AXI Burst Length 64 (rw) */
    __IO Ifx_UReg_32Bit BLEN128:1;         /**< \brief [6:6] AXI Burst Length 128 (rw) */
    __IO Ifx_UReg_32Bit BLEN256:1;         /**< \brief [7:7] AXI Burst Length 256 (rw) */
    __I  Ifx_UReg_32Bit RESERVED_9_8:2;    /**< \brief [9:8] Reserved (r) */
    __IO Ifx_UReg_32Bit AALE:1;            /**< \brief [10:10] Automatic AXI LPI enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_EAME:1;    /**< \brief [11:11] Reserved (r) */
    __IO Ifx_UReg_32Bit AAL:1;             /**< \brief [12:12] Address-Aligned Beats (rw) */
    __IO Ifx_UReg_32Bit ONEKBBE:1;         /**< \brief [13:13] 1 KB Boundary Crossing Enable for the EQOS-AXI Master (rw) */
    __I  Ifx_UReg_32Bit RESERVED_MB:1;     /**< \brief [14:14] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RB:1;     /**< \brief [15:15] Reserved (r) */
    __IO Ifx_UReg_32Bit RD_OSR_LMT:4;      /**< \brief [19:16] AXI Maximum Read Outstanding Request Limit (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_Y:4;    /**< \brief [23:20] Reserved (r) */
    __IO Ifx_UReg_32Bit WR_OSR_LMT:4;      /**< \brief [27:24] AXI Maximum Write Outstanding Request Limit (rw) */
    __I  Ifx_UReg_32Bit RESERVED_29_Y:2;    /**< \brief [29:28] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_LPI_XIT_PKT:1;    /**< \brief [30:30] Reserved (r) */
    __IO Ifx_UReg_32Bit EN_LPI:1;          /**< \brief [31:31] Enable Low Power Interface (LPI) (rw) */
} Ifx_LETH_DMA_SYSBUS_MODE_Bits;

/** \brief Error handling control enable */
typedef struct _Ifx_LETH_ERR_CTRL_Bits
{
    __I  Ifx_UReg_32Bit S2FDAT:1;          /**< \brief [0:0] Error detected during the data phase in the S2F bridge. The interrupt can be triggered when the ERR_INTEN.S2FDEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit S2FADDR:1;         /**< \brief [1:1] Error detected during the address phase in the S2F bridge. The interrupt can be triggered when the ERR_INTEN.S2FAEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit A2SDAT:1;          /**< \brief [2:2] Error detected during the data phase in the A2S bridge. The interrupt can be triggered when the ALARM_INTEN.A2SDEN is sserted. (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit FPIMST:1;          /**< \brief [4:4] Error related to UBS issues in FPI master from S2F bridge: Address and read data EDCs. (rh) */
    __I  Ifx_UReg_32Bit FPISLV:1;          /**< \brief [5:5] Error signal generated by UBS due to issues such as: Address and write data EDCs. (rh) */
    __I  Ifx_UReg_32Bit WRERR:1;           /**< \brief [6:6] Write error on slave interface (rh) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_LETH_ERR_CTRL_Bits;

/** \brief Error handling interrupt/alarm clear */
typedef struct _Ifx_LETH_ERR_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit S2FDCLR:1;         /**< \brief [0:0] Clear the S2FDAT bit. (w) */
    __O  Ifx_UReg_32Bit S2FACLR:1;         /**< \brief [1:1] Clear the S2FADDR bit. (w) */
    __O  Ifx_UReg_32Bit A2SDCLR:1;         /**< \brief [2:2] Clear the A2SDAT bit. (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_32Bit FPIMCLR:1;         /**< \brief [4:4] Clear the FPIMST bit. (w) */
    __O  Ifx_UReg_32Bit FPISCLR:1;         /**< \brief [5:5] Clear the FPISCLR bit. (w) */
    __O  Ifx_UReg_32Bit WRERRCLR:1;        /**< \brief [6:6] Clear the WRERR bit. (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_LETH_ERR_INTCLR_Bits;

/** \brief Error handling interrupt/alarm enable */
typedef struct _Ifx_LETH_ERR_INTEN_Bits
{
    __IO Ifx_UReg_32Bit S2FDEN:1;          /**< \brief [0:0] Enable the S2FDAT bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit S2FAEN:1;          /**< \brief [1:1] Enable the S2FADDR bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit A2SDEN:1;          /**< \brief [2:2] Enable the A2SDAT bit to generate alarm. (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit FPIMEN:1;          /**< \brief [4:4] Enable the FPIMST bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit FPISEN:1;          /**< \brief [5:5] Enable the FPISLV bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit WRERREN:1;         /**< \brief [6:6] Enable the WRERR bit to generate alarm. (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_LETH_ERR_INTEN_Bits;

/** \brief Module identification register */
typedef struct _Ifx_LETH_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number - MOD_NUM (r) */
} Ifx_LETH_ID_Bits;

/** \brief Clock Control Register for Ports */
typedef struct _Ifx_LETH_PEN_Bits
{
    __IO Ifx_UReg_32Bit P0CLK:1;           /**< \brief [0:0] Used for enabling/disabling Port0 (rw) */
    __IO Ifx_UReg_32Bit P1CLK:1;           /**< \brief [1:1] Used for enabling/disabling Port1 (rw) */
    __IO Ifx_UReg_32Bit P2CLK:1;           /**< \brief [2:2] Used for enabling/disabling Port2 (rw) */
    __IO Ifx_UReg_32Bit P3CLK:1;           /**< \brief [3:3] Used for enabling/disabling Port3 (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit P0CLKS:1;          /**< \brief [16:16] Enable/disable Port 0 status bit (rh) */
    __I  Ifx_UReg_32Bit P1CLKS:1;          /**< \brief [17:17] Enable/disable Port 1 status bit (rh) */
    __I  Ifx_UReg_32Bit P2CLKS:1;          /**< \brief [18:18] Enable/disable Port 2 status bit (rh) */
    __I  Ifx_UReg_32Bit P3CLKS:1;          /**< \brief [19:19] Enable/disable Port 3 status bit (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_LETH_PEN_Bits;

/** \brief B10T1S Debug Mode */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_DEBUG_MODE_Bits
{
    __IO Ifx_UReg_32Bit PSB:1;             /**< \brief [0:0] PCS Scrambler Bypass (rw) */
    __IO Ifx_UReg_32Bit PDB:1;             /**< \brief [1:1] PCS De-Scrambler Bypass (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_2:30;    /**< \brief [31:2] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_DEBUG_MODE_Bits;

/** \brief B10T1S PCS Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PCS_CTRL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __IO Ifx_UReg_32Bit DM:1;              /**< \brief [8:8] Duplex Mode (rw) */
    __I  Ifx_UReg_32Bit RESERVED_13_9:5;    /**< \brief [13:9] Reserved (r) */
    __IO Ifx_UReg_32Bit LB:1;              /**< \brief [14:14] loop back mode (rw) */
    __IO Ifx_UReg_32Bit PCS_R:1;           /**< \brief [15:15] PCS reset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_CTRL_Bits;

/** \brief B10T1S PCS Diag 1 */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_1_Bits
{
    __I  Ifx_UReg_32Bit RJC:16;            /**< \brief [15:0] Remote jabber count.16-bit field counting the number of remote (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_1_Bits;

/** \brief B10T1S PCS Diag 2 */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_2_Bits
{
    __I  Ifx_UReg_32Bit CTC:16;            /**< \brief [15:0] CorruptedTxCnt (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_2_Bits;

/** \brief B10T1S PCS Jab Timer */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PCS_JAB_TIMER_Bits
{
    __IO Ifx_UReg_32Bit PJT:16;            /**< \brief [15:0] Indicates jabber timer limit (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_JAB_TIMER_Bits;

/** \brief B10T1S PCS Sts */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PCS_STS_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_6_0:7;    /**< \brief [6:0] Reserved (r) */
    __I  Ifx_UReg_32Bit FAULT:1;           /**< \brief [7:7] indicates that the 10BASE-T1S PCS has detected a fault condition on either the transmit or receive path (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_STS_Bits;

/** \brief B10T1S PLCA Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PLCA_CTRL_Bits
{
    __IO Ifx_UReg_32Bit MAX_BC:8;          /**< \brief [7:0] Maximum Additional Packets in Burst (rw) */
    __I  Ifx_UReg_32Bit RESERVED_12_8:5;    /**< \brief [12:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PHY_INTF:1;    /**< \brief [13:13] Reserved (r) */
    __IO Ifx_UReg_32Bit PLCA_EN:1;         /**< \brief [14:14] Enables PLCA functionality (rw) */
    __IO Ifx_UReg_32Bit PLCA_R:1;          /**< \brief [15:15] PLCA reset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_CTRL_Bits;

/** \brief B10T1S PLCA Node Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PLCA_NODE_CTRL_Bits
{
    __IO Ifx_UReg_32Bit PNC:8;             /**< \brief [7:0] Maximum number of PLCA nodes on the mixing segment receiving transmit opportunities before the node with local_nodeID = 0 generates a new BEACON (rw) */
    __IO Ifx_UReg_32Bit LNI:8;             /**< \brief [15:8] ID representing the PLCA transmit opportunity number assigned to the node (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_NODE_CTRL_Bits;

/** \brief B10T1S PLCA Sts */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PLCA_STS_Bits
{
    __I  Ifx_UReg_32Bit PS:1;              /**< \brief [0:0] PLCA Status.For PLCA burst mode to work properly this timer should be set greater than one IPG (r) */
    __I  Ifx_UReg_32Bit BCNBFTO:1;         /**< \brief [1:1] PLCA Beacon received before transmit opportunity (r) */
    __I  Ifx_UReg_32Bit UNEXPB:1;          /**< \brief [2:2] Unexpected beacon (r) */
    __I  Ifx_UReg_32Bit RXINTO:1;          /**< \brief [3:3] PLCA receive in assigned transmit opportunity (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_STS_Bits;

/** \brief B10T1S PLCA Timer */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PLCA_TIMER_Bits
{
    __IO Ifx_UReg_32Bit TOT:8;             /**< \brief [7:0] The transmit opportunity timer (rw) */
    __IO Ifx_UReg_32Bit BT:8;              /**< \brief [15:8] Burst Timer (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_TIMER_Bits;

/** \brief B10T1S PMA Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PMA_CTRL_Bits
{
    __IO Ifx_UReg_32Bit LB:1;              /**< \brief [0:0] Loopback (rw) */
    __IO Ifx_UReg_32Bit EBRTH:5;           /**< \brief [5:1] Elastic Buffer Reading Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_9_6:4;    /**< \brief [9:6] Reserved (r) */
    __IO Ifx_UReg_32Bit MM:1;              /**< \brief [10:10] Multidrop mode (rw) */
    __IO Ifx_UReg_32Bit LP:1;              /**< \brief [11:11] Low Power (rw) */
    __I  Ifx_UReg_32Bit RESERVED_13_12:2;    /**< \brief [13:12] Reserved (r) */
    __IO Ifx_UReg_32Bit TD:1;              /**< \brief [14:14] Transmit Disable (rw) */
    __IO Ifx_UReg_32Bit PMA_R:1;           /**< \brief [15:15] PMA Reset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_CTRL_Bits;

/** \brief B10T1S PMA Extnd Ability */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PMA_EXTND_ABILITY_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_2_0:3;    /**< \brief [2:0] Reserved (r) */
    __IO Ifx_UReg_32Bit T1SA:1;            /**< \brief [3:3] 10BASE-T1S Ability (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_EXTND_ABILITY_Bits;

/** \brief B10T1S PMA PMD Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PMA_PMD_CTRL_Bits
{
    __IO Ifx_UReg_32Bit TS:4;              /**< \brief [3:0] Type Selection (rw) */
    __I  Ifx_UReg_32Bit RESERVED_13_4:10;    /**< \brief [13:4] Reserved (r) */
    __IO Ifx_UReg_32Bit MSCV:1;            /**< \brief [14:14] Master-Slave Config Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_PMD_CTRL_Bits;

/** \brief B10T1S PMA Sts */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PMA_STS_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_0:1;      /**< \brief [0:0] Reserved (r) */
    __I  Ifx_UReg_32Bit RFD:1;             /**< \brief [1:1] Receive Fault Detection (r) */
    __I  Ifx_UReg_32Bit RESERVED_8_2:7;    /**< \brief [8:2] Reserved (r) */
    __I  Ifx_UReg_32Bit RFA:1;             /**< \brief [9:9] Receive Fault Ability (r) */
    __I  Ifx_UReg_32Bit MMA:1;             /**< \brief [10:10] Multidrop mode ability (r) */
    __I  Ifx_UReg_32Bit LPA:1;             /**< \brief [11:11] Low Power Ability (r) */
    __I  Ifx_UReg_32Bit RESERVED_12:1;     /**< \brief [12:12] Reserved (r) */
    __I  Ifx_UReg_32Bit LBA:1;             /**< \brief [13:13] Loopback Ability (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_STS_Bits;

/** \brief B10T1S PMA Tst Mode Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_B10T1S_PMA_TST_MODE_CTRL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_12_0:13;    /**< \brief [12:0] Reserved (r) */
    __IO Ifx_UReg_32Bit TMC:3;             /**< \brief [15:13] Test Mode Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_TST_MODE_CTRL_Bits;

/** \brief MAC 10BT1S Ctrl Sts */
typedef struct _Ifx_LETH_PORT_CORE_MAC_10BT1S_CTRL_STS_Bits
{
    __IO Ifx_UReg_32Bit RAT:1;             /**< \brief [0:0] Register Access Type (rw) */
    __IO Ifx_UReg_32Bit LPRC:1;            /**< \brief [1:1] Low Power (Sleep) Request Control (rw) */
    __IO Ifx_UReg_32Bit WKPT:3;            /**< \brief [4:2] Wakeup timer (rw) */
    __I  Ifx_UReg_32Bit RESERVED_5:1;      /**< \brief [5:5] Reserved (r) */
    __IO Ifx_UReg_32Bit RCF:2;             /**< \brief [7:6] Reset Command frequency (rw) */
    __IO Ifx_UReg_32Bit RWS:1;             /**< \brief [8:8] 10Base-T1S Remote Wake-up Status (rw) */
    __IO Ifx_UReg_32Bit LWS:1;             /**< \brief [9:9] 10Base-T1S XCVR Local Wake-up Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit TS:3;              /**< \brief [18:16] Transceiver State (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_19:13;    /**< \brief [31:19] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_10BT1S_CTRL_STS_Bits;

/** \brief MAC Address0 High */
typedef struct _Ifx_LETH_PORT_CORE_MAC_ADDRESS0_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address0[47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:8;             /**< \brief [23:16] DMA Channel Select (rw) */
    __I  Ifx_UReg_32Bit RESERVED_30_Y:7;    /**< \brief [30:24] Reserved (r) */
    __I  Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (r) */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS0_HIGH_Bits;

/** \brief MAC Address0 Low */
typedef struct _Ifx_LETH_PORT_CORE_MAC_ADDRESS0_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address0[31:0] (rw) */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS0_LOW_Bits;

/** \brief MAC Address1 High */
typedef struct _Ifx_LETH_PORT_CORE_MAC_ADDRESS1_HIGH_Bits
{
    __IO Ifx_UReg_32Bit ADDRHI:16;         /**< \brief [15:0] MAC Address1 [47:32] (rw) */
    __IO Ifx_UReg_32Bit DCS:8;             /**< \brief [23:16] DMA Channel Select (rw) */
    __IO Ifx_UReg_32Bit MBC:6;             /**< \brief [29:24] Mask Byte Control (rw) */
    __IO Ifx_UReg_32Bit SA:1;              /**< \brief [30:30] Source Address (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Address Enable (rw) */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS1_HIGH_Bits;

/** \brief MAC Address1 Low */
typedef struct _Ifx_LETH_PORT_CORE_MAC_ADDRESS1_LOW_Bits
{
    __IO Ifx_UReg_32Bit ADDRLO:32;         /**< \brief [31:0] MAC Address1 [31:0] (rw) */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS1_LOW_Bits;

/** \brief MAC Configuration */
typedef struct _Ifx_LETH_PORT_CORE_MAC_CONFIGURATION_Bits
{
    __IO Ifx_UReg_32Bit RE:1;              /**< \brief [0:0] Receiver Enable (rw) */
    __IO Ifx_UReg_32Bit TE:1;              /**< \brief [1:1] Transmitter Enable (rw) */
    __IO Ifx_UReg_32Bit PRELEN:2;          /**< \brief [3:2] Preamble Length for Transmit packets (rw) */
    __IO Ifx_UReg_32Bit DC:1;              /**< \brief [4:4] Deferral Check (rw) */
    __IO Ifx_UReg_32Bit BL:2;              /**< \brief [6:5] Back-Off Limit (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7:1;      /**< \brief [7:7] Reserved (r) */
    __IO Ifx_UReg_32Bit DR:1;              /**< \brief [8:8] Disable Retry (rw) */
    __IO Ifx_UReg_32Bit DCRS:1;            /**< \brief [9:9] Disable Carrier Sense During Transmission (rw) */
    __IO Ifx_UReg_32Bit DO:1;              /**< \brief [10:10] Disable Receive Own (rw) */
    __IO Ifx_UReg_32Bit ECRSFD:1;          /**< \brief [11:11] Enable Carrier Sense Before Transmission in Full-Duplex Mode (rw) */
    __IO Ifx_UReg_32Bit LM:1;              /**< \brief [12:12] Loopback Mode (rw) */
    __IO Ifx_UReg_32Bit DM:1;              /**< \brief [13:13] Duplex Mode (rw) */
    __IO Ifx_UReg_32Bit FES:1;             /**< \brief [14:14] Speed (rw) */
    __I  Ifx_UReg_32Bit PS:1;              /**< \brief [15:15] Port Select (r) */
    __IO Ifx_UReg_32Bit JE:1;              /**< \brief [16:16] Jumbo Packet Enable (rw) */
    __IO Ifx_UReg_32Bit JD:1;              /**< \brief [17:17] Jabber Disable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_BE:1;     /**< \brief [18:18] Reserved (r) */
    __IO Ifx_UReg_32Bit WD:1;              /**< \brief [19:19] Watchdog Disable (rw) */
    __IO Ifx_UReg_32Bit ACS:1;             /**< \brief [20:20] Automatic Pad or CRC Stripping (rw) */
    __IO Ifx_UReg_32Bit CST:1;             /**< \brief [21:21] CRC stripping for Type packets (rw) */
    __IO Ifx_UReg_32Bit S2KP:1;            /**< \brief [22:22] IEEE 802.3as Support for 2K Packets (rw) */
    __IO Ifx_UReg_32Bit GPSLCE:1;          /**< \brief [23:23] Giant Packet Size Limit Control Enable (rw) */
    __IO Ifx_UReg_32Bit IPG:3;             /**< \brief [26:24] Inter-Packet Gap (rw) */
    __IO Ifx_UReg_32Bit IPC:1;             /**< \brief [27:27] Checksum Offload (rw) */
    __IO Ifx_UReg_32Bit SARC:3;            /**< \brief [30:28] Source Address Insertion or Replacement Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_ARPEN:1;    /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_CONFIGURATION_Bits;

/** \brief MAC CSR SW Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_MAC_CSR_SW_CTRL_Bits
{
    __IO Ifx_UReg_32Bit RCWE:1;            /**< \brief [0:0] Register Clear on Write 1 Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_1:7;    /**< \brief [7:1] Reserved (r) */
    __IO Ifx_UReg_32Bit SEEN:1;            /**< \brief [8:8] Slave Error Response Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_9:23;    /**< \brief [31:9] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_CSR_SW_CTRL_Bits;

/** \brief MAC Debug */
typedef struct _Ifx_LETH_PORT_CORE_MAC_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RPESTS:1;          /**< \brief [0:0] MAC GMII or MII Receive Protocol Engine Status (r) */
    __I  Ifx_UReg_32Bit RFCFCSTS:2;        /**< \brief [2:1] MAC Receive Packet Controller FIFO Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_UReg_32Bit TPESTS:1;          /**< \brief [16:16] MAC GMII or MII Transmit Protocol Engine Status (r) */
    __I  Ifx_UReg_32Bit TFCSTS:2;          /**< \brief [18:17] MAC Transmit Packet Controller Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_19:13;    /**< \brief [31:19] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_DEBUG_Bits;

/** \brief MAC DPCSel IndReg0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_1:7;    /**< \brief [7:1] Reserved (r) */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG0_Bits;

/** \brief MAC DPCSel IndReg1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_1:7;    /**< \brief [7:1] Reserved (r) */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG1_Bits;

/** \brief MAC Ext Cfg1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_EXT_CFG1_Bits
{
    __IO Ifx_UReg_32Bit SPLOFST:7;         /**< \brief [6:0] Split Offset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7:1;      /**< \brief [7:7] Reserved (r) */
    __IO Ifx_UReg_32Bit SPLM:2;            /**< \brief [9:8] Split Mode (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit SAVO:7;            /**< \brief [22:16] Split AV Offset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23:1;     /**< \brief [23:23] Reserved (r) */
    __IO Ifx_UReg_32Bit SAVE:1;            /**< \brief [24:24] Split AV Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_EXT_CFG1_Bits;

/** \brief MAC Ext Configuration */
typedef struct _Ifx_LETH_PORT_CORE_MAC_EXT_CONFIGURATION_Bits
{
    __IO Ifx_UReg_32Bit GPSL:14;           /**< \brief [13:0] Giant Packet Size Limit (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __IO Ifx_UReg_32Bit DCRCC:1;           /**< \brief [16:16] Disable CRC Checking for Received Packets (rw) */
    __IO Ifx_UReg_32Bit SPEN:1;            /**< \brief [17:17] Slow Protocol Detection Enable (rw) */
    __IO Ifx_UReg_32Bit USP:1;             /**< \brief [18:18] Unicast Slow Protocol Packet Detect (rw) */
    __IO Ifx_UReg_32Bit PDC:1;             /**< \brief [19:19] Packet Duplication Control (rw) */
    __IO Ifx_UReg_32Bit HDSMS:3;           /**< \brief [22:20] Maximum Size for Splitting the Header Data (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23:1;     /**< \brief [23:23] Reserved (r) */
    __IO Ifx_UReg_32Bit EIPGEN:1;          /**< \brief [24:24] Extended Inter-Packet Gap Enable (rw) */
    __IO Ifx_UReg_32Bit EIPG:5;            /**< \brief [29:25] Extended Inter-Packet Gap (rw) */
    __I  Ifx_UReg_32Bit RESERVED_APDIM:1;    /**< \brief [30:30] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_FHE:1;    /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_EXT_CONFIGURATION_Bits;

/** \brief MAC FPCSel IndReg0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_FPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_1:7;    /**< \brief [7:1] Reserved (r) */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_FPCSEL_INDREG0_Bits;

/** \brief MAC HW Feature0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_HW_FEATURE0_Bits
{
    __I  Ifx_UReg_32Bit MIISEL:1;          /**< \brief [0:0] 10 or 100 Mbps Support (r) */
    __I  Ifx_UReg_32Bit GMIISEL:1;         /**< \brief [1:1] 1000 Mbps Support (r) */
    __I  Ifx_UReg_32Bit HDSEL:1;           /**< \brief [2:2] Half-duplex Support (r) */
    __I  Ifx_UReg_32Bit PCSSEL:1;          /**< \brief [3:3] PCS Registers (TBI, SGMII, or RTBI PHY interface) (r) */
    __I  Ifx_UReg_32Bit VLHASH:1;          /**< \brief [4:4] VLAN Hash Filter Selected (r) */
    __I  Ifx_UReg_32Bit SMASEL:1;          /**< \brief [5:5] SMA (MDIO) Interface (r) */
    __I  Ifx_UReg_32Bit RWKSEL:1;          /**< \brief [6:6] PMT Remote Wake-up Packet Enable (r) */
    __I  Ifx_UReg_32Bit MGKSEL:1;          /**< \brief [7:7] PMT Magic Packet Enable (r) */
    __I  Ifx_UReg_32Bit MMCSEL:1;          /**< \brief [8:8] RMON Module Enable (r) */
    __I  Ifx_UReg_32Bit ARPOFFSEL:1;       /**< \brief [9:9] ARP Offload Enabled (r) */
    __I  Ifx_UReg_32Bit RESERVED_11_10:2;    /**< \brief [11:10] Reserved (r) */
    __I  Ifx_UReg_32Bit TSSEL:1;           /**< \brief [12:12] IEEE 1588-2008 Timestamp Enabled (r) */
    __I  Ifx_UReg_32Bit EEESEL:1;          /**< \brief [13:13] Energy Efficient Ethernet Enabled (r) */
    __I  Ifx_UReg_32Bit TXCOESEL:1;        /**< \brief [14:14] Transmit Checksum Offload Enabled (r) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit RXCOESEL:1;        /**< \brief [16:16] Receive Checksum Offload Enabled (r) */
    __I  Ifx_UReg_32Bit RESERVED_17:1;     /**< \brief [17:17] Reserved (r) */
    __I  Ifx_UReg_32Bit ADDMACADRSEL:5;    /**< \brief [22:18] MAC Addresses 1-31 Selected (r) */
    __I  Ifx_UReg_32Bit MACADR32SEL:1;     /**< \brief [23:23] MAC Addresses 32-63 Selected (r) */
    __I  Ifx_UReg_32Bit MACADR64SEL:1;     /**< \brief [24:24] MAC Addresses 64-127 Selected (r) */
    __I  Ifx_UReg_32Bit TSSTSSEL:2;        /**< \brief [26:25] Timestamp System Time Source (r) */
    __I  Ifx_UReg_32Bit SAVLANINS:1;       /**< \brief [27:27] Source Address or VLAN Insertion Enable (r) */
    __I  Ifx_UReg_32Bit ACTPHYSEL:4;       /**< \brief [31:28] Active PHY Selected (r) */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE0_Bits;

/** \brief MAC HW Feature1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_HW_FEATURE1_Bits
{
    __I  Ifx_UReg_32Bit RXFIFOSIZE:5;      /**< \brief [4:0] MTL Receive FIFO Size (r) */
    __I  Ifx_UReg_32Bit SPRAM:1;           /**< \brief [5:5] Single Port RAM Enable (r) */
    __I  Ifx_UReg_32Bit TXFIFOSIZE:5;      /**< \brief [10:6] MTL Transmit FIFO Size (r) */
    __I  Ifx_UReg_32Bit OSTEN:1;           /**< \brief [11:11] One-Step Timestamping Enable (r) */
    __I  Ifx_UReg_32Bit PTOEN:1;           /**< \brief [12:12] PTP Offload Enable (r) */
    __I  Ifx_UReg_32Bit ADVTHWORD:1;       /**< \brief [13:13] IEEE 1588 High Word Register Enable (r) */
    __I  Ifx_UReg_32Bit ADDR64:2;          /**< \brief [15:14] Address Width (r) */
    __I  Ifx_UReg_32Bit DCBEN:1;           /**< \brief [16:16] DCB Feature Enable (r) */
    __I  Ifx_UReg_32Bit SPHEN:1;           /**< \brief [17:17] Split Header Feature Enable (r) */
    __I  Ifx_UReg_32Bit TSOEN:1;           /**< \brief [18:18] TCP Segmentation Offload Enable (r) */
    __I  Ifx_UReg_32Bit DBGMEMA:1;         /**< \brief [19:19] DMA Debug Registers Enable (r) */
    __I  Ifx_UReg_32Bit AVSEL:1;           /**< \brief [20:20] AV Feature Enable (r) */
    __I  Ifx_UReg_32Bit RAVSEL:1;          /**< \brief [21:21] Rx Side Only AV Feature Enable (r) */
    __I  Ifx_UReg_32Bit RESERVED_22:1;     /**< \brief [22:22] Reserved (r) */
    __I  Ifx_UReg_32Bit POUOST:1;          /**< \brief [23:23] One Step for PTP over UDP/IP Feature Enable (r) */
    __I  Ifx_UReg_32Bit HASHTBLSZ:2;       /**< \brief [25:24] Hash Table Size (r) */
    __I  Ifx_UReg_32Bit RESERVED_26:1;     /**< \brief [26:26] Reserved (r) */
    __I  Ifx_UReg_32Bit L3L4FNUM:4;        /**< \brief [30:27] Total number of L3 or L4 Filters (r) */
    __I  Ifx_UReg_32Bit RESERVED_31:1;     /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE1_Bits;

/** \brief MAC HW Feature2 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_HW_FEATURE2_Bits
{
    __I  Ifx_UReg_32Bit RXQCNT:4;          /**< \brief [3:0] Number of MTL Receive Queues (r) */
    __I  Ifx_UReg_32Bit RESERVED_5_4:2;    /**< \brief [5:4] Reserved (r) */
    __I  Ifx_UReg_32Bit TXQCNT:4;          /**< \brief [9:6] Number of MTL Transmit Queues (r) */
    __I  Ifx_UReg_32Bit RESERVED_11_10:2;    /**< \brief [11:10] Reserved (r) */
    __I  Ifx_UReg_32Bit RXCHCNT:4;         /**< \brief [15:12] Number of DMA Receive Channels (r) */
    __I  Ifx_UReg_32Bit RDCSZ:2;           /**< \brief [17:16] Rx DMA Descriptor Cache Size in terms of  16 bytes descriptors: (r) */
    __I  Ifx_UReg_32Bit TXCHCNT:4;         /**< \brief [21:18] Number of DMA Transmit Channels (r) */
    __I  Ifx_UReg_32Bit TDCSZ:2;           /**< \brief [23:22] Tx DMA Descriptor Cache Size in terms of  16 bytes descriptors: (r) */
    __I  Ifx_UReg_32Bit PPSOUTNUM:3;       /**< \brief [26:24] Number of PPS Outputs (r) */
    __I  Ifx_UReg_32Bit RESERVED_27:1;     /**< \brief [27:27] Reserved (r) */
    __I  Ifx_UReg_32Bit AUXSNAPNUM:3;      /**< \brief [30:28] Number of Auxiliary Snapshot Inputs (r) */
    __I  Ifx_UReg_32Bit RESERVED_31:1;     /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE2_Bits;

/** \brief MAC HW Feature3 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_HW_FEATURE3_Bits
{
    __I  Ifx_UReg_32Bit NRVF:3;            /**< \brief [2:0] Number of Extended VLAN Tag Filters Enabled (r) */
    __I  Ifx_UReg_32Bit RESERVED_3:1;      /**< \brief [3:3] Reserved (r) */
    __I  Ifx_UReg_32Bit CBTISEL:1;         /**< \brief [4:4] Queue/Channel based VLAN tag insertion on Tx Enable (r) */
    __I  Ifx_UReg_32Bit DVLAN:1;           /**< \brief [5:5] Double VLAN Tag Processing Selected (r) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:3;    /**< \brief [8:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PDUPSEL:1;         /**< \brief [9:9] Broadcast/Multicast Packet Duplication (r) */
    __I  Ifx_UReg_32Bit FRPSEL:1;          /**< \brief [10:10] Flexible Receive Parser Selected (r) */
    __I  Ifx_UReg_32Bit FRPBS:2;           /**< \brief [12:11] Flexible Receive Parser Buffer size (r) */
    __I  Ifx_UReg_32Bit FRPES:2;           /**< \brief [14:13] Flexible Receive Parser Table Entries size (r) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit ESTSEL:1;          /**< \brief [16:16] Enhancements to Scheduled Traffic Enable (r) */
    __I  Ifx_UReg_32Bit ESTDEP:3;          /**< \brief [19:17] Depth of the Gate Control List (r) */
    __I  Ifx_UReg_32Bit ESTWID:2;          /**< \brief [21:20] Width of the Time Interval field in the Gate Control List (r) */
    __I  Ifx_UReg_32Bit RESERVED_25_22:4;    /**< \brief [25:22] Reserved (r) */
    __I  Ifx_UReg_32Bit FPESEL:1;          /**< \brief [26:26] Frame Preemption Enable (r) */
    __I  Ifx_UReg_32Bit TBSSEL:1;          /**< \brief [27:27] Time Based Scheduling Enable (r) */
    __I  Ifx_UReg_32Bit ASP:2;             /**< \brief [29:28] Automotive Safety Package (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE3_Bits;

/** \brief MAC HW Feature4 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_HW_FEATURE4_Bits
{
    __I  Ifx_UReg_32Bit PCSEL:2;           /**< \brief [1:0] Policing Counters Selected (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_2:30;    /**< \brief [31:2] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE4_Bits;

/** \brief MAC Indir Access Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL_Bits
{
    __IO Ifx_UReg_32Bit OB:1;              /**< \brief [0:0] Operation Busy (rw) */
    __IO Ifx_UReg_32Bit COM:1;             /**< \brief [1:1] Command type (rw) */
    __I  Ifx_UReg_32Bit RESERVED_4_2:3;    /**< \brief [4:2] Reserved (r) */
    __IO Ifx_UReg_32Bit AUTO:1;            /**< \brief [5:5] Auto increment (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_UReg_32Bit AOFF:8;            /**< \brief [15:8] Address Offset (rw) */
    __IO Ifx_UReg_32Bit MSEL:4;            /**< \brief [19:16] Mode Select (rw) */
    __I  Ifx_UReg_32Bit RESERVED_30_20:11;    /**< \brief [30:20] Reserved (r) */
    __IO Ifx_UReg_32Bit SNPS_R:1;          /**< \brief [31:31] Reserved (rw) */
} Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL_Bits;

/** \brief MAC Indir Access Data */
typedef struct _Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] This field contains data to read/write for Indirect address access associated with MAC_Indir_Access_Ctrl register (rw) */
} Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_DATA_Bits;

/** \brief MAC Inner VLAN Incl */
typedef struct _Ifx_LETH_PORT_CORE_MAC_INNER_VLAN_INCL_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLC:2;             /**< \brief [17:16] VLAN Tag Control in Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLP:1;             /**< \brief [18:18] VLAN Priority Control (rw) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __IO Ifx_UReg_32Bit VLTI:1;            /**< \brief [20:20] VLAN Tag Input (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_INNER_VLAN_INCL_Bits;

/** \brief MAC Interrupt Enable */
typedef struct _Ifx_LETH_PORT_CORE_MAC_INTERRUPT_ENABLE_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_RGSMIIIE:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PCSLCHGIE:1;    /**< \brief [1:1] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PCSANCIE:1;    /**< \brief [2:2] Reserved (r) */
    __IO Ifx_UReg_32Bit PHYIE:1;           /**< \brief [3:3] PHY Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_PMTIE:1;    /**< \brief [4:4] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_LPIIE:1;    /**< \brief [5:5] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_11_6:6;    /**< \brief [11:6] Reserved (r) */
    __IO Ifx_UReg_32Bit TSIE:1;            /**< \brief [12:12] Timestamp Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit TXSTSIE:1;         /**< \brief [13:13] Transmit Status Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit RXSTSIE:1;         /**< \brief [14:14] Receive Status Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_16:1;     /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_FPEIE:1;    /**< \brief [17:17] Reserved (r) */
    __IO Ifx_UReg_32Bit MDIOIE:1;          /**< \brief [18:18] MDIO Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit B10T1SIE:1;        /**< \brief [19:19] 10Base-T1S Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_INTERRUPT_ENABLE_Bits;

/** \brief MAC Interrupt Status */
typedef struct _Ifx_LETH_PORT_CORE_MAC_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_RGSMIIIS:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PCSLCHGIS:1;    /**< \brief [1:1] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PCSANCIS:1;    /**< \brief [2:2] Reserved (r) */
    __I  Ifx_UReg_32Bit PHYIS:1;           /**< \brief [3:3] PHY Interrupt (r) */
    __I  Ifx_UReg_32Bit RESERVED_PMTIS:1;    /**< \brief [4:4] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_LPIIS:1;    /**< \brief [5:5] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __I  Ifx_UReg_32Bit MMCIS:1;           /**< \brief [8:8] MMC Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MMCRXIS:1;         /**< \brief [9:9] MMC Receive Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MMCTXIS:1;         /**< \brief [10:10] MMC Transmit Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MMCRXIPIS:1;       /**< \brief [11:11] MMC Receive Checksum Offload Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TSIS:1;            /**< \brief [12:12] Timestamp Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXSTSIS:1;         /**< \brief [13:13] Transmit Status Interrupt (r) */
    __I  Ifx_UReg_32Bit RXSTSIS:1;         /**< \brief [14:14] Receive Status Interrupt (r) */
    __I  Ifx_UReg_32Bit RESERVED_GPIIS:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_16:1;     /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_FPEIS:1;    /**< \brief [17:17] Reserved (r) */
    __I  Ifx_UReg_32Bit MDIOIS:1;          /**< \brief [18:18] MDIO Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_MFTIS:1;    /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MFRIS:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_22_21:2;    /**< \brief [22:21] Reserved (r) */
    __I  Ifx_UReg_32Bit PCIS:1;            /**< \brief [23:23] Policing Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit B10T1SIS:1;        /**< \brief [24:24] 10Base-T1S Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_INTERRUPT_STATUS_Bits;

/** \brief MAC MDIO Address */
typedef struct _Ifx_LETH_PORT_CORE_MAC_MDIO_ADDRESS_Bits
{
    __IO Ifx_UReg_32Bit GB:1;              /**< \brief [0:0] GMII Busy (rw) */
    __IO Ifx_UReg_32Bit C45E:1;            /**< \brief [1:1] Clause 45 PHY Enable (rw) */
    __IO Ifx_UReg_32Bit GOC_0:1;           /**< \brief [2:2] GMII Operation Command 0 (rw) */
    __IO Ifx_UReg_32Bit GOC_1:1;           /**< \brief [3:3] GMII Operation Command 1 (rw) */
    __IO Ifx_UReg_32Bit SKAP:1;            /**< \brief [4:4] Skip Address Packet (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit CR:4;              /**< \brief [11:8] CSR Clock Range (rw) */
    __IO Ifx_UReg_32Bit NTC:3;             /**< \brief [14:12] Number of Trailing Clocks (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __IO Ifx_UReg_32Bit RDA:5;             /**< \brief [20:16] Register or Device Address (rw) */
    __IO Ifx_UReg_32Bit PA:5;              /**< \brief [25:21] Physical Layer Address (rw) */
    __IO Ifx_UReg_32Bit BTB:1;             /**< \brief [26:26] Back-to-Back Transactions (rw) */
    __IO Ifx_UReg_32Bit PSE:1;             /**< \brief [27:27] Preamble Suppression Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_MDIO_ADDRESS_Bits;

/** \brief MAC MDIO Data */
typedef struct _Ifx_LETH_PORT_CORE_MAC_MDIO_DATA_Bits
{
    __IO Ifx_UReg_32Bit GD:16;             /**< \brief [15:0] GMII Data (rw) */
    __IO Ifx_UReg_32Bit RA:16;             /**< \brief [31:16] Register Address (rw) */
} Ifx_LETH_PORT_CORE_MAC_MDIO_DATA_Bits;

/** \brief MAC Packet Filter */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PACKET_FILTER_Bits
{
    __IO Ifx_UReg_32Bit PR:1;              /**< \brief [0:0] Promiscuous Mode (rw) */
    __I  Ifx_UReg_32Bit RESERVED_HUC:1;    /**< \brief [1:1] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_HMC:1;    /**< \brief [2:2] Reserved (r) */
    __IO Ifx_UReg_32Bit DAIF:1;            /**< \brief [3:3] DA Inverse Filtering (rw) */
    __IO Ifx_UReg_32Bit PM:1;              /**< \brief [4:4] Pass All Multicast (rw) */
    __IO Ifx_UReg_32Bit DBF:1;             /**< \brief [5:5] Disable Broadcast Packets (rw) */
    __IO Ifx_UReg_32Bit PCF:2;             /**< \brief [7:6] Pass Control Packets (rw) */
    __IO Ifx_UReg_32Bit SAIF:1;            /**< \brief [8:8] SA Inverse Filtering (rw) */
    __IO Ifx_UReg_32Bit SAF:1;             /**< \brief [9:9] Source Address Filter Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_HPF:1;    /**< \brief [10:10] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_11:5;    /**< \brief [15:11] Reserved (r) */
    __IO Ifx_UReg_32Bit VTFE:1;            /**< \brief [16:16] VLAN Tag Filter Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19_17:3;    /**< \brief [19:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_IPFE:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_DNTU:1;    /**< \brief [21:21] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_30_22:9;    /**< \brief [30:22] Reserved (r) */
    __IO Ifx_UReg_32Bit RA:1;              /**< \brief [31:31] Receive All (rw) */
} Ifx_LETH_PORT_CORE_MAC_PACKET_FILTER_Bits;

/** \brief MAC PCCtrl IndReg0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG0_Bits;

/** \brief MAC PCCtrl IndReg1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG1_Bits;

/** \brief MAC PCCtrl IndReg10 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG10_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG10_Bits;

/** \brief MAC PCCtrl IndReg11 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG11_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG11_Bits;

/** \brief MAC PCCtrl IndReg12 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG12_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG12_Bits;

/** \brief MAC PCCtrl IndReg13 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG13_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG13_Bits;

/** \brief MAC PCCtrl IndReg14 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG14_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG14_Bits;

/** \brief MAC PCCtrl IndReg15 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG15_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG15_Bits;

/** \brief MAC PCCtrl IndReg2 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG2_Bits;

/** \brief MAC PCCtrl IndReg3 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG3_Bits;

/** \brief MAC PCCtrl IndReg4 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG4_Bits;

/** \brief MAC PCCtrl IndReg5 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG5_Bits;

/** \brief MAC PCCtrl IndReg6 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG6_Bits;

/** \brief MAC PCCtrl IndReg7 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG7_Bits;

/** \brief MAC PCCtrl IndReg8 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG8_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG8_Bits;

/** \brief MAC PCCtrl IndReg9 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG9_Bits
{
    __IO Ifx_UReg_32Bit TRSLD:5;           /**< \brief [4:0] Threshold set for Counter (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit TWSEL:2;           /**< \brief [9:8] Time window Select (rw) */
    __IO Ifx_UReg_32Bit PCM:1;             /**< \brief [10:10] Policing Counter Mode (rw) */
    __IO Ifx_UReg_32Bit FRZ:1;             /**< \brief [11:11] Freeze Enable (rw) */
    __IO Ifx_UReg_32Bit FFAT:1;            /**< \brief [12:12] Forced Filter fail After Threshold (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_13:19;    /**< \brief [31:13] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG9_Bits;

/** \brief MAC PCntr IndReg0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG0_Bits;

/** \brief MAC PCntr IndReg1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG1_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG1_Bits;

/** \brief MAC PCntr IndReg10 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG10_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG10_Bits;

/** \brief MAC PCntr IndReg11 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG11_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG11_Bits;

/** \brief MAC PCntr IndReg12 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG12_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG12_Bits;

/** \brief MAC PCntr IndReg13 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG13_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG13_Bits;

/** \brief MAC PCntr IndReg14 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG14_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG14_Bits;

/** \brief MAC PCntr IndReg15 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG15_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG15_Bits;

/** \brief MAC PCntr IndReg2 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG2_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG2_Bits;

/** \brief MAC PCntr IndReg3 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG3_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG3_Bits;

/** \brief MAC PCntr IndReg4 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG4_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG4_Bits;

/** \brief MAC PCntr IndReg5 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG5_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG5_Bits;

/** \brief MAC PCntr IndReg6 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG6_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG6_Bits;

/** \brief MAC PCntr IndReg7 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG7_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG7_Bits;

/** \brief MAC PCntr IndReg8 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG8_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG8_Bits;

/** \brief MAC PCntr IndReg9 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG9_Bits
{
    __IO Ifx_UReg_32Bit PCNT:32;           /**< \brief [31:0] Policing Count Value (rw) */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG9_Bits;

/** \brief MAC PCStatus DA IndReg0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit FEPS:2;            /**< \brief [1:0] Filter Event Pass Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:30;    /**< \brief [31:2] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG0_Bits;

/** \brief MAC PCStatus Filter Event IndReg */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG_Bits
{
    __IO Ifx_UReg_32Bit FFAIL:1;           /**< \brief [0:0] Filter Fail (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_1:31;    /**< \brief [31:1] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG_Bits;

/** \brief MAC PCStatus VLAN IndReg */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG_Bits
{
    __IO Ifx_UReg_32Bit FEPS:1;            /**< \brief [0:0] Filter Event Pass Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:31;    /**< \brief [31:1] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG_Bits;

/** \brief MAC PCTH Intr Enable */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit PCTIE:16;          /**< \brief [15:0] Policing Counter Threshold Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_ENABLE_Bits;

/** \brief MAC PCTH Intr Status */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_STATUS_Bits
{
    __IO Ifx_UReg_32Bit PCTIS:16;          /**< \brief [15:0] Policing Counter Threshold Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_STATUS_Bits;

/** \brief MAC PCTW Intr Enable */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit TWIE:4;            /**< \brief [3:0] Time window Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_4:28;    /**< \brief [31:4] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_ENABLE_Bits;

/** \brief MAC PCTW Intr Status */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TWIS:4;            /**< \brief [3:0] Time window Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_4:28;    /**< \brief [31:4] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_STATUS_Bits;

/** \brief MAC PPS0 Interval */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PPS0_INTERVAL_Bits
{
    __IO Ifx_UReg_32Bit PPSINT0:32;        /**< \brief [31:0] PPS Output Signal Interval (rw) */
} Ifx_LETH_PORT_CORE_MAC_PPS0_INTERVAL_Bits;

/** \brief MAC PPS0 Target Time Nanoseconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits
{
    __IO Ifx_UReg_32Bit TTSL0:31;          /**< \brief [30:0] Target Time Low for PPS Register (rw) */
    __IO Ifx_UReg_32Bit TRGTBUSY0:1;       /**< \brief [31:31] PPS Target Time Register Busy (rw) */
} Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits;

/** \brief MAC PPS0 Target Time Seconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS_Bits
{
    __IO Ifx_UReg_32Bit TSTRH0:32;         /**< \brief [31:0] PPS Target Time Seconds Register (rw) */
} Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS_Bits;

/** \brief MAC PPS0 Width */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PPS0_WIDTH_Bits
{
    __IO Ifx_UReg_32Bit PPSWIDTH0:32;      /**< \brief [31:0] PPS Output Signal Width (rw) */
} Ifx_LETH_PORT_CORE_MAC_PPS0_WIDTH_Bits;

/** \brief MAC PPS Control */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PPS_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit PPSCTRL_PPSCMD:4;    /**< \brief [3:0] PPS Output Frequency Control (rw) */
    __IO Ifx_UReg_32Bit PPSEN0:1;          /**< \brief [4:4] Flexible PPS Output Mode Enable (rw) */
    __IO Ifx_UReg_32Bit TRGTMODSEL0:2;     /**< \brief [6:5] Target Time Register Mode for PPS0 Output (rw) */
    __IO Ifx_UReg_32Bit MCGREN0:1;         /**< \brief [7:7] MCGR Mode Enable for PPS0 Output (rw) */
    __I  Ifx_UReg_32Bit RESERVED_PPSCMD1:4;    /**< \brief [11:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_12:1;     /**< \brief [12:12] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TRGTMODSEL1:2;    /**< \brief [14:13] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MCGREN1:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PPSCMD2:4;    /**< \brief [19:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_20:1;     /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TRGTMODSEL2:2;    /**< \brief [22:21] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MCGREN2:1;    /**< \brief [23:23] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PPSCMD3:4;    /**< \brief [27:24] Reserved (r) */
    __IO Ifx_UReg_32Bit TIMESEL:1;         /**< \brief [28:28] Time Select (rw) */
    __I  Ifx_UReg_32Bit RESERVED_TRGTMODSEL3:2;    /**< \brief [30:29] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MCGREN3:1;    /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_PPS_CONTROL_Bits;

/** \brief MAC Presn Time ns */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_NS_Bits
{
    __I  Ifx_UReg_32Bit MPTN:32;           /**< \brief [31:0] MAC 1722 Presentation Time in ns (r) */
} Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_NS_Bits;

/** \brief MAC Presn Time Updt */
typedef struct _Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_UPDT_Bits
{
    __IO Ifx_UReg_32Bit MPTU:32;           /**< \brief [31:0] MAC 1722 Presentation Time Update (rw) */
} Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_UPDT_Bits;

/** \brief MAC Q0 Tx Flow Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL_Bits
{
    __IO Ifx_UReg_32Bit FCB_BPA:1;         /**< \brief [0:0] Flow Control Busy or Backpressure Activate (rw) */
    __IO Ifx_UReg_32Bit TFE:1;             /**< \brief [1:1] Transmit Flow Control Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_3_2:2;    /**< \brief [3:2] Reserved (r) */
    __IO Ifx_UReg_32Bit PLT:3;             /**< \brief [6:4] Pause Low Threshold (rw) */
    __IO Ifx_UReg_32Bit DZPQ:1;            /**< \brief [7:7] Disable Zero-Quanta Pause (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __IO Ifx_UReg_32Bit PT:16;             /**< \brief [31:16] Pause Time (rw) */
} Ifx_LETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL_Bits;

/** \brief MAC RxQ Ctrl0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL0_Bits
{
    __IO Ifx_UReg_32Bit RXQ0EN:2;          /**< \brief [1:0] Receive Queue 0 Enable (rw) */
    __IO Ifx_UReg_32Bit RXQ1EN:2;          /**< \brief [3:2] Receive Queue 1 Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_RXQ2EN:2;    /**< \brief [5:4] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXQ3EN:2;    /**< \brief [7:6] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXQ4EN:2;    /**< \brief [9:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXQ5EN:2;    /**< \brief [11:10] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXQ6EN:2;    /**< \brief [13:12] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXQ7EN:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL0_Bits;

/** \brief MAC RxQ Ctrl1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL1_Bits
{
    __IO Ifx_UReg_32Bit AVCPQ:3;           /**< \brief [2:0] AV Untagged Control Packets Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_3:1;      /**< \brief [3:3] Reserved (r) */
    __IO Ifx_UReg_32Bit PTPQ:3;            /**< \brief [6:4] PTP Packets Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7:1;      /**< \brief [7:7] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_DCBCPQ:3;    /**< \brief [10:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_11:1;     /**< \brief [11:11] Reserved (r) */
    __IO Ifx_UReg_32Bit UPQ:3;             /**< \brief [14:12] Untagged Packet Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __IO Ifx_UReg_32Bit MCBCQ:3;           /**< \brief [18:16] Multicast and Broadcast Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __IO Ifx_UReg_32Bit MCBCQEN:1;         /**< \brief [20:20] Multicast and Broadcast Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TACPQE:1;          /**< \brief [21:21] Tagged AV Control Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit TPQC:2;            /**< \brief [23:22] Tagged PTP over Ethernet Packets Queuing Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_FPRQ:3;    /**< \brief [26:24] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_27:1;     /**< \brief [27:27] Reserved (r) */
    __IO Ifx_UReg_32Bit OMCBCQ:1;          /**< \brief [28:28] Over-riding MC-BC queue priority select (rw) */
    __IO Ifx_UReg_32Bit TBRQE:1;           /**< \brief [29:29] Type Field Based Rx Queuing Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL1_Bits;

/** \brief MAC RxQ Ctrl2 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL2_Bits
{
    __IO Ifx_UReg_32Bit PSRQ0:8;           /**< \brief [7:0] Priorities Selected in the Receive Queue 0 (rw) */
    __IO Ifx_UReg_32Bit PSRQ1:8;           /**< \brief [15:8] Priorities Selected in the Receive Queue 1 (rw) */
    __I  Ifx_UReg_32Bit RESERVED_PSRQ2:8;    /**< \brief [23:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PSRQ3:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL2_Bits;

/** \brief MAC RxQ Ctrl4 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL4_Bits
{
    __IO Ifx_UReg_32Bit UFFQE:1;           /**< \brief [0:0] Unicast Address Filter Fail Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit UFFQ:1;            /**< \brief [1:1] Unicast Address Filter Fail Packets Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_Y:6;    /**< \brief [7:2] Reserved (r) */
    __IO Ifx_UReg_32Bit MFFQE:1;           /**< \brief [8:8] Multicast Address Filter Fail Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit MFFQ:1;            /**< \brief [9:9] Multicast Address Filter Fail Packets Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_Y:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit VFFQE:1;           /**< \brief [16:16] VLAN Tag Filter Fail Packets Queuing Enable (rw) */
    __IO Ifx_UReg_32Bit VFFQ:1;            /**< \brief [17:17] VLAN Tag Filter Fail Packets Queue (rw) */
    __I  Ifx_UReg_32Bit RESERVED_30_Y:13;    /**< \brief [30:18] Reserved (r) */
    __IO Ifx_UReg_32Bit UDC:1;             /**< \brief [31:31] Unicast Packet Duplication Control (rw) */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL4_Bits;

/** \brief MAC Rx Domain Time Incr */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __IO Ifx_UReg_32Bit RXSNS:8;           /**< \brief [15:8] Receive Domain Time Increment Value in Sub-Nanoseconds (rw) */
    __IO Ifx_UReg_32Bit RXNS:16;           /**< \brief [31:16] Receive Domain Time Increment Value in Nanoseconds (rw) */
} Ifx_LETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR_Bits;

/** \brief MAC Rx Flow Ctrl */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RX_FLOW_CTRL_Bits
{
    __IO Ifx_UReg_32Bit RFE:1;             /**< \brief [0:0] Receive Flow Control Enable (rw) */
    __IO Ifx_UReg_32Bit UP:1;              /**< \brief [1:1] Unicast Pause Packet Detect (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFCE:1;    /**< \brief [8:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_9:23;    /**< \brief [31:9] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_RX_FLOW_CTRL_Bits;

/** \brief MAC Rx Tx Status */
typedef struct _Ifx_LETH_PORT_CORE_MAC_RX_TX_STATUS_Bits
{
    __I  Ifx_UReg_32Bit TJT:1;             /**< \brief [0:0] Transmit Jabber Timeout (r) */
    __I  Ifx_UReg_32Bit NCARR:1;           /**< \brief [1:1] No Carrier (r) */
    __I  Ifx_UReg_32Bit LCARR:1;           /**< \brief [2:2] Loss of Carrier (r) */
    __I  Ifx_UReg_32Bit EXDEF:1;           /**< \brief [3:3] Excessive Deferral (r) */
    __I  Ifx_UReg_32Bit LCOL:1;            /**< \brief [4:4] Late Collision (r) */
    __I  Ifx_UReg_32Bit EXCOL:1;           /**< \brief [5:5] Excessive Collisions (r) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __I  Ifx_UReg_32Bit RWT:1;             /**< \brief [8:8] Receive Watchdog Timeout (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_9:23;    /**< \brief [31:9] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_RX_TX_STATUS_Bits;

/** \brief MAC Sub Second Increment */
typedef struct _Ifx_LETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __IO Ifx_UReg_32Bit SNSINC:8;          /**< \brief [15:8] Sub-nanosecond Increment Value (rw) */
    __IO Ifx_UReg_32Bit SSINC:8;           /**< \brief [23:16] Sub-second Increment Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT_Bits;

/** \brief MAC System Time Higher Word Seconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits
{
    __IO Ifx_UReg_32Bit TSHWR:16;          /**< \brief [15:0] Timestamp Higher Word Register (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits;

/** \brief MAC System Time Nanoseconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_Bits
{
    __I  Ifx_UReg_32Bit TSSS:31;           /**< \brief [30:0] Timestamp Sub Seconds (r) */
    __I  Ifx_UReg_32Bit RESERVED_31:1;     /**< \brief [31:31] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_Bits;

/** \brief MAC System Time Nanoseconds Update */
typedef struct _Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits
{
    __IO Ifx_UReg_32Bit TSSS:31;           /**< \brief [30:0] Timestamp Sub Seconds (rw) */
    __IO Ifx_UReg_32Bit ADDSUB:1;          /**< \brief [31:31] Add or Subtract Time (rw) */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits;

/** \brief MAC System Time Seconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_Bits
{
    __I  Ifx_UReg_32Bit TSS:32;            /**< \brief [31:0] Timestamp Second (r) */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_Bits;

/** \brief MAC System Time Seconds Update */
typedef struct _Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits
{
    __IO Ifx_UReg_32Bit TSS:32;            /**< \brief [31:0] Timestamp Seconds (rw) */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits;

/** \brief MAC Timestamp Addend */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_ADDEND_Bits
{
    __IO Ifx_UReg_32Bit TSAR:32;           /**< \brief [31:0] Timestamp Addend Register (rw) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_ADDEND_Bits;

/** \brief MAC Timestamp Control */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit TSENA:1;           /**< \brief [0:0] Enable Timestamp (rw) */
    __IO Ifx_UReg_32Bit TSCFUPDT:1;        /**< \brief [1:1] Fine or Coarse Timestamp Update (rw) */
    __IO Ifx_UReg_32Bit TSINIT:1;          /**< \brief [2:2] Initialize Timestamp (rw) */
    __IO Ifx_UReg_32Bit TSUPDT:1;          /**< \brief [3:3] Update Timestamp (rw) */
    __I  Ifx_UReg_32Bit RESERVED_TSTRIG:1;    /**< \brief [4:4] Reserved (r) */
    __IO Ifx_UReg_32Bit TSADDREG:1;        /**< \brief [5:5] Update Addend Register (rw) */
    __IO Ifx_UReg_32Bit PTGE:1;            /**< \brief [6:6] Presentation Time Generation Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7:1;      /**< \brief [7:7] Reserved (r) */
    __IO Ifx_UReg_32Bit TSENALL:1;         /**< \brief [8:8] Enable Timestamp for All Packets (rw) */
    __IO Ifx_UReg_32Bit TSCTRLSSR:1;       /**< \brief [9:9] Timestamp Digital or Binary Rollover Control (rw) */
    __IO Ifx_UReg_32Bit TSVER2ENA:1;       /**< \brief [10:10] Enable PTP Packet Processing for Version 2 Format (rw) */
    __IO Ifx_UReg_32Bit TSIPENA:1;         /**< \brief [11:11] Enable Processing of PTP over Ethernet Packets (rw) */
    __IO Ifx_UReg_32Bit TSIPV6ENA:1;       /**< \brief [12:12] Enable Processing of PTP Packets Sent over IPv6-UDP (rw) */
    __IO Ifx_UReg_32Bit TSIPV4ENA:1;       /**< \brief [13:13] Enable Processing of PTP Packets Sent over IPv4-UDP (rw) */
    __IO Ifx_UReg_32Bit TSEVNTENA:1;       /**< \brief [14:14] Enable Timestamp Snapshot for Event Messages (rw) */
    __IO Ifx_UReg_32Bit TSMSTRENA:1;       /**< \brief [15:15] Enable Snapshot for Messages Relevant to Master (rw) */
    __IO Ifx_UReg_32Bit SNAPTYPSEL:2;      /**< \brief [17:16] Select PTP packets for Taking Snapshots (rw) */
    __IO Ifx_UReg_32Bit TSENMACADDR:1;     /**< \brief [18:18] Enable MAC Address for PTP Packet Filtering (rw) */
    __I  Ifx_UReg_32Bit RESERVED_CSC:1;    /**< \brief [19:19] Reserved (r) */
    __IO Ifx_UReg_32Bit ESTI:1;            /**< \brief [20:20] External System Time Input (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_21:3;    /**< \brief [23:21] Reserved (r) */
    __IO Ifx_UReg_32Bit TXTSSTSM:1;        /**< \brief [24:24] Transmit Timestamp Status Mode (rw) */
    __I  Ifx_UReg_32Bit RESERVED_EPCSL:1;    /**< \brief [25:25] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TITA:1;    /**< \brief [26:26] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_27:1;     /**< \brief [27:27] Reserved (r) */
    __IO Ifx_UReg_32Bit AV8021ASMEN:1;     /**< \brief [28:28] AV 802.1AS Mode Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_CONTROL_Bits;

/** \brief MAC Timestamp Egress Asym Corr */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits
{
    __IO Ifx_UReg_32Bit OSTEAC:32;         /**< \brief [31:0] One-Step Timestamp Egress Asymmetry Correction (rw) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits;

/** \brief MAC Timestamp Egress Corr Nanosecond */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits
{
    __IO Ifx_UReg_32Bit TSEC:32;           /**< \brief [31:0] Timestamp Egress Correction (rw) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits;

/** \brief MAC Timestamp Egress Corr Subnanosec */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __IO Ifx_UReg_32Bit TSECSNS:8;         /**< \brief [15:8] Timestamp Egress Correction, sub-nanoseconds (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits;

/** \brief MAC Timestamp Egress Latency */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_LATENCY_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __I  Ifx_UReg_32Bit ETLSNS:8;          /**< \brief [15:8] Egress Timestamp Latency, in sub-nanoseconds (r) */
    __I  Ifx_UReg_32Bit ETLNS:12;          /**< \brief [27:16] Egress Timestamp Latency, in nanoseconds (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_LATENCY_Bits;

/** \brief MAC Timestamp Ingress Asym Corr */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits
{
    __IO Ifx_UReg_32Bit OSTIAC:32;         /**< \brief [31:0] One-Step Timestamp Ingress Asymmetry Correction (rw) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits;

/** \brief MAC Timestamp Ingress Corr Nanosecond */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits
{
    __IO Ifx_UReg_32Bit TSIC:32;           /**< \brief [31:0] Timestamp Ingress Correction (rw) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits;

/** \brief MAC Timestamp Ingress Corr Subnanosec */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __IO Ifx_UReg_32Bit TSICSNS:8;         /**< \brief [15:8] Timestamp Ingress Correction, sub-nanoseconds (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits;

/** \brief MAC Timestamp Ingress Latency */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_LATENCY_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __I  Ifx_UReg_32Bit ITLSNS:8;          /**< \brief [15:8] Ingress Timestamp Latency, in nanoseconds (r) */
    __I  Ifx_UReg_32Bit ITLNS:12;          /**< \brief [27:16] Ingress Timestamp Latency, in sub-nanoseconds (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_LATENCY_Bits;

/** \brief MAC Timestamp Status */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_STATUS_Bits
{
    __I  Ifx_UReg_32Bit TSSOVF:1;          /**< \brief [0:0] Timestamp Seconds Overflow (r) */
    __I  Ifx_UReg_32Bit TSTARGT0:1;        /**< \brief [1:1] Timestamp Target Time Reached (r) */
    __I  Ifx_UReg_32Bit RESERVED_AUXTSTRIG:1;    /**< \brief [2:2] Reserved (r) */
    __I  Ifx_UReg_32Bit TSTRGTERR0:1;      /**< \brief [3:3] Timestamp Target Time Error (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSTARGT1:1;    /**< \brief [4:4] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSTRGTERR1:1;    /**< \brief [5:5] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSTARGT2:1;    /**< \brief [6:6] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSTRGTERR2:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSTARGT3:1;    /**< \brief [8:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TSTRGTERR3:1;    /**< \brief [9:9] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_14_10:5;    /**< \brief [14:10] Reserved (r) */
    __I  Ifx_UReg_32Bit TXTSSIS:1;         /**< \brief [15:15] Tx Timestamp Status Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_ATSSTN:4;    /**< \brief [19:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23_20:4;    /**< \brief [23:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_ATSSTM:1;    /**< \brief [24:24] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_ATSNS:5;    /**< \brief [29:25] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_STATUS_Bits;

/** \brief MAC TMRQ Regs0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS0_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS0_Bits;

/** \brief MAC TMRQ Regs1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS1_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS1_Bits;

/** \brief MAC TMRQ Regs2 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS2_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS2_Bits;

/** \brief MAC TMRQ Regs3 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS3_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS3_Bits;

/** \brief MAC TMRQ Regs4 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS4_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS4_Bits;

/** \brief MAC TMRQ Regs5 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS5_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS5_Bits;

/** \brief MAC TMRQ Regs6 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS6_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS6_Bits;

/** \brief MAC TMRQ Regs7 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS7_Bits
{
    __IO Ifx_UReg_32Bit TYP:16;            /**< \brief [15:0] Type field Value (rw) */
    __IO Ifx_UReg_32Bit TMRQ:3;            /**< \brief [18:16] Type Match Rx Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_PFEX:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS7_Bits;

/** \brief MAC Tx Domain Time Incr */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_7_0:8;    /**< \brief [7:0] Reserved (r) */
    __IO Ifx_UReg_32Bit TXSNS:8;           /**< \brief [15:8] Transmit Domain Time Increment Value in Sub-Nanoseconds (rw) */
    __IO Ifx_UReg_32Bit TXNS:16;           /**< \brief [31:16] Transmit Domain Time Increment Value in Nanoseconds (rw) */
} Ifx_LETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR_Bits;

/** \brief MAC Tx Timestamp Status Nanoseconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits
{
    __I  Ifx_UReg_32Bit TXTSSLO:31;        /**< \brief [30:0] Transmit Timestamp Status Low (r) */
    __I  Ifx_UReg_32Bit TXTSSMIS:1;        /**< \brief [31:31] Transmit Timestamp Status Missed (r) */
} Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits;

/** \brief MAC Tx Timestamp Status Seconds */
typedef struct _Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits
{
    __I  Ifx_UReg_32Bit TXTSSHI:32;        /**< \brief [31:0] Transmit Timestamp Status High (r) */
} Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits;

/** \brief MAC Version */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VERSION_Bits
{
    __I  Ifx_UReg_32Bit SNPSVER:8;         /**< \brief [7:0] Synopsys-defined Version (r) */
    __I  Ifx_UReg_32Bit USERVER:8;         /**< \brief [15:8] User-defined Version (configured with coreConsultant) (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VERSION_Bits;

/** \brief MAC VLAN Incl */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_INCL_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLC:2;             /**< \brief [17:16] VLAN Tag Control in Transmit Packets (rw) */
    __IO Ifx_UReg_32Bit VLP:1;             /**< \brief [18:18] VLAN Priority Control (rw) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __IO Ifx_UReg_32Bit VLTI:1;            /**< \brief [20:20] VLAN Tag Input (rw) */
    __IO Ifx_UReg_32Bit CBTI:1;            /**< \brief [21:21] Channel based tag insertion (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_22:2;    /**< \brief [23:22] Reserved (r) */
    __IO Ifx_UReg_32Bit ADDR:3;            /**< \brief [26:24] Address (rw) */
    __I  Ifx_UReg_32Bit RESERVED_29_Y:3;    /**< \brief [29:27] Reserved (r) */
    __IO Ifx_UReg_32Bit RDWR:1;            /**< \brief [30:30] Read write control (rw) */
    __I  Ifx_UReg_32Bit BUSY:1;            /**< \brief [31:31] Busy (r) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL_Bits;

/** \brief MAC VLAN Incl0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_INCL0_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit RESERVED_18_16:3;    /**< \brief [18:16] Reserved (r) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL0_Bits;

/** \brief MAC VLAN Incl1 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_INCL1_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit RESERVED_18_16:3;    /**< \brief [18:16] Reserved (r) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL1_Bits;

/** \brief MAC VLAN Incl2 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_INCL2_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit RESERVED_18_16:3;    /**< \brief [18:16] Reserved (r) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL2_Bits;

/** \brief MAC VLAN Incl3 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_INCL3_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit RESERVED_18_16:3;    /**< \brief [18:16] Reserved (r) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL3_Bits;

/** \brief MAC VLAN Incl4 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_INCL4_Bits
{
    __IO Ifx_UReg_32Bit VLT:16;            /**< \brief [15:0] VLAN Tag for Transmit Packets (rw) */
    __I  Ifx_UReg_32Bit RESERVED_18_16:3;    /**< \brief [18:16] Reserved (r) */
    __IO Ifx_UReg_32Bit CSVL:1;            /**< \brief [19:19] C_VLAN or S_VLAN (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL4_Bits;

/** \brief MAC VLAN Tag */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VLAN_TAG_Bits
{
    __IO Ifx_UReg_32Bit VL:16;             /**< \brief [15:0] VLAN Tag Identifier for Receive Packets (rw) */
    __IO Ifx_UReg_32Bit ETV:1;             /**< \brief [16:16] Enable 12-Bit VLAN Tag Comparison (rw) */
    __IO Ifx_UReg_32Bit VTIM:1;            /**< \brief [17:17] VLAN Tag Inverse Match Enable (rw) */
    __IO Ifx_UReg_32Bit ESVL:1;            /**< \brief [18:18] Enable S_VLAN (rw) */
    __IO Ifx_UReg_32Bit ERSVLM:1;          /**< \brief [19:19] Enable Receive S_VLAN Match (rw) */
    __IO Ifx_UReg_32Bit DOVLTC:1;          /**< \brief [20:20] Disable VLAN Type Check (rw) */
    __IO Ifx_UReg_32Bit EVLS:2;            /**< \brief [22:21] Enable VLAN Tag Stripping on Receive (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23:1;     /**< \brief [23:23] Reserved (r) */
    __IO Ifx_UReg_32Bit EVLRXS:1;          /**< \brief [24:24] Enable VLAN Tag in Rx status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_VTHM:1;    /**< \brief [25:25] Reserved (r) */
    __IO Ifx_UReg_32Bit EDVLP:1;           /**< \brief [26:26] Enable Double VLAN Processing (rw) */
    __IO Ifx_UReg_32Bit ERIVLT:1;          /**< \brief [27:27] Enable Inner VLAN Tag (rw) */
    __IO Ifx_UReg_32Bit EIVLS:2;           /**< \brief [29:28] Enable Inner VLAN Tag Stripping on Receive (rw) */
    __I  Ifx_UReg_32Bit RESERVED_30:1;     /**< \brief [30:30] Reserved (r) */
    __IO Ifx_UReg_32Bit EIVLRXS:1;         /**< \brief [31:31] Enable Inner VLAN Tag in Rx Status (rw) */
} Ifx_LETH_PORT_CORE_MAC_VLAN_TAG_Bits;

/** \brief MAC VPCSel IndReg0 */
typedef struct _Ifx_LETH_PORT_CORE_MAC_VPCSEL_INDREG0_Bits
{
    __IO Ifx_UReg_32Bit PCEN:1;            /**< \brief [0:0] Policing Counter Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_1:7;    /**< \brief [7:1] Reserved (r) */
    __IO Ifx_UReg_32Bit PCNUM:4;           /**< \brief [11:8] Policing Counter Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_VPCSEL_INDREG0_Bits;

/** \brief MAC WD JB Timeout */
typedef struct _Ifx_LETH_PORT_CORE_MAC_WD_JB_TIMEOUT_Bits
{
    __IO Ifx_UReg_32Bit WTO:4;             /**< \brief [3:0] Watchdog Timeout (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_4:4;    /**< \brief [7:4] Reserved (r) */
    __IO Ifx_UReg_32Bit PWE:1;             /**< \brief [8:8] Programmable Watchdog Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __IO Ifx_UReg_32Bit JTO:4;             /**< \brief [19:16] Jabber Timeout (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_20:4;    /**< \brief [23:20] Reserved (r) */
    __IO Ifx_UReg_32Bit PJE:1;             /**< \brief [24:24] Programmable Jabber Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_CORE_MAC_WD_JB_TIMEOUT_Bits;

/** \brief MMC Control */
typedef struct _Ifx_LETH_PORT_CORE_MMC_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit CNTRST:1;          /**< \brief [0:0] Counters Reset (rw) */
    __IO Ifx_UReg_32Bit CNTSTOPRO:1;       /**< \brief [1:1] Counter Stop Rollover (rw) */
    __IO Ifx_UReg_32Bit RSTONRD:1;         /**< \brief [2:2] Reset on Read (rw) */
    __IO Ifx_UReg_32Bit CNTFREEZ:1;        /**< \brief [3:3] MMC Counter Freeze (rw) */
    __IO Ifx_UReg_32Bit CNTPRST:1;         /**< \brief [4:4] Counters Preset (rw) */
    __IO Ifx_UReg_32Bit CNTPRSTLVL:1;      /**< \brief [5:5] Full-Half Preset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_UReg_32Bit UCDBC:1;           /**< \brief [8:8] Update MMC Counters for Dropped Broadcast Packets (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_9:23;    /**< \brief [31:9] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_CONTROL_Bits;

/** \brief MMC IPC Rx Interrupt */
typedef struct _Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4GPIS:1;      /**< \brief [0:0] MMC Receive IPV4 Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4HERPIS:1;    /**< \brief [1:1] MMC Receive IPV4 Header Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4NOPAYPIS:1;    /**< \brief [2:2] MMC Receive IPV4 No Payload Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4FRAGPIS:1;    /**< \brief [3:3] MMC Receive IPV4 Fragmented Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4UDSBLPIS:1;    /**< \brief [4:4] MMC Receive IPV4 UDP Checksum Disabled Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6GPIS:1;      /**< \brief [5:5] MMC Receive IPV6 Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6HERPIS:1;    /**< \brief [6:6] MMC Receive IPV6 Header Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6NOPAYPIS:1;    /**< \brief [7:7] MMC Receive IPV6 No Payload Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPGPIS:1;       /**< \brief [8:8] MC Receive UDP Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPERPIS:1;      /**< \brief [9:9] MMC Receive UDP Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPGPIS:1;       /**< \brief [10:10] MMC Receive TCP Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPERPIS:1;      /**< \brief [11:11] MMC Receive TCP Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPGPIS:1;      /**< \brief [12:12] MMC Receive ICMP Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPERPIS:1;     /**< \brief [13:13] MMC Receive ICMP Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_UReg_32Bit RXIPV4GOIS:1;      /**< \brief [16:16] MMC Receive IPV4 Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4HEROIS:1;    /**< \brief [17:17] MMC Receive IPV4 Header Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4NOPAYOIS:1;    /**< \brief [18:18] MMC Receive IPV4 No Payload Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4FRAGOIS:1;    /**< \brief [19:19] MMC Receive IPV4 Fragmented Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV4UDSBLOIS:1;    /**< \brief [20:20] MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt (r) */
    __I  Ifx_UReg_32Bit RXIPV6GOIS:1;      /**< \brief [21:21] MMC Receive IPV6 Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6HEROIS:1;    /**< \brief [22:22] MMC Receive IPV6 Header Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXIPV6NOPAYOIS:1;    /**< \brief [23:23] MMC Receive IPV6 No Payload Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPGOIS:1;       /**< \brief [24:24] MMC Receive UDP Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUDPEROIS:1;      /**< \brief [25:25] MMC Receive UDP Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPGOIS:1;       /**< \brief [26:26] MMC Receive TCP Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXTCPEROIS:1;      /**< \brief [27:27] MMC Receive TCP Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPGOIS:1;      /**< \brief [28:28] MMC Receive ICMP Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXICMPEROIS:1;     /**< \brief [29:29] MMC Receive ICMP Error Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_Bits;

/** \brief MMC IPC Rx Interrupt Mask */
typedef struct _Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK_Bits
{
    __IO Ifx_UReg_32Bit RXIPV4GPIM:1;      /**< \brief [0:0] MMC Receive IPV4 Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4HERPIM:1;    /**< \brief [1:1] MMC Receive IPV4 Header Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4NOPAYPIM:1;    /**< \brief [2:2] MMC Receive IPV4 No Payload Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4FRAGPIM:1;    /**< \brief [3:3] MMC Receive IPV4 Fragmented Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4UDSBLPIM:1;    /**< \brief [4:4] MMC Receive IPV4 UDP Checksum Disabled Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6GPIM:1;      /**< \brief [5:5] MMC Receive IPV6 Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6HERPIM:1;    /**< \brief [6:6] MMC Receive IPV6 Header Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6NOPAYPIM:1;    /**< \brief [7:7] MMC Receive IPV6 No Payload Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPGPIM:1;       /**< \brief [8:8] MMC Receive UDP Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPERPIM:1;      /**< \brief [9:9] MMC Receive UDP Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPGPIM:1;       /**< \brief [10:10] MMC Receive TCP Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPERPIM:1;      /**< \brief [11:11] MMC Receive TCP Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPGPIM:1;      /**< \brief [12:12] MMC Receive ICMP Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPERPIM:1;     /**< \brief [13:13] MMC Receive ICMP Error Packet Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __IO Ifx_UReg_32Bit RXIPV4GOIM:1;      /**< \brief [16:16] MMC Receive IPV4 Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4HEROIM:1;    /**< \brief [17:17] MMC Receive IPV4 Header Error Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4NOPAYOIM:1;    /**< \brief [18:18] MMC Receive IPV4 No Payload Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4FRAGOIM:1;    /**< \brief [19:19] MMC Receive IPV4 Fragmented Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV4UDSBLOIM:1;    /**< \brief [20:20] MMC Receive IPV4 UDP Checksum Disabled Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6GOIM:1;      /**< \brief [21:21] MMC Receive IPV6 Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6HEROIM:1;    /**< \brief [22:22] MMC Receive IPV6 Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXIPV6NOPAYOIM:1;    /**< \brief [23:23] MMC Receive IPV6 Header Error Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPGOIM:1;       /**< \brief [24:24] MMC Receive IPV6 No Payload Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUDPEROIM:1;      /**< \brief [25:25] MMC Receive UDP Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPGOIM:1;       /**< \brief [26:26] MMC Receive TCP Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXTCPEROIM:1;      /**< \brief [27:27] MMC Receive TCP Error Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPGOIM:1;      /**< \brief [28:28] MMC Receive ICMP Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXICMPEROIM:1;     /**< \brief [29:29] MMC Receive ICMP Error Octet Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK_Bits;

/** \brief MMC Rx Interrupt */
typedef struct _Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit RXGBPKTIS:1;       /**< \brief [0:0] MMC Receive Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXGBOCTIS:1;       /**< \brief [1:1] MMC Receive Good Bad Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXGOCTIS:1;        /**< \brief [2:2] MMC Receive Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXBCGPIS:1;        /**< \brief [3:3] MMC Receive Broadcast Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXMCGPIS:1;        /**< \brief [4:4] MMC Receive Multicast Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXCRCERPIS:1;      /**< \brief [5:5] MMC Receive CRC Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXALGNERPIS:1;     /**< \brief [6:6] MMC Receive Alignment Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXRUNTPIS:1;       /**< \brief [7:7] MMC Receive Runt Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXJABERPIS:1;      /**< \brief [8:8] MMC Receive Jabber Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUSIZEGPIS:1;     /**< \brief [9:9] MMC Receive Undersize Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXOSIZEGPIS:1;     /**< \brief [10:10] MMC Receive Oversize Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX64OCTGBPIS:1;    /**< \brief [11:11] MMC Receive 64 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX65T127OCTGBPIS:1;    /**< \brief [12:12] MMC Receive 65 to 127 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX128T255OCTGBPIS:1;    /**< \brief [13:13] MMC Receive 128 to 255 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX256T511OCTGBPIS:1;    /**< \brief [14:14] MMC Receive 256 to 511 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX512T1023OCTGBPIS:1;    /**< \brief [15:15] MMC Receive 512 to 1023 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RX1024TMAXOCTGBPIS:1;    /**< \brief [16:16] MMC Receive 1024 to Maximum Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUCGPIS:1;        /**< \brief [17:17] MMC Receive Unicast Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXLENERPIS:1;      /**< \brief [18:18] MMC Receive Length Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXORANGEPIS:1;     /**< \brief [19:19] MMC Receive Out Of Range Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXPAUSPIS:1;       /**< \brief [20:20] MMC Receive Pause Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXFOVPIS:1;        /**< \brief [21:21] MMC Receive FIFO Overflow Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXVLANGBPIS:1;     /**< \brief [22:22] MMC Receive VLAN Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXWDOGPIS:1;       /**< \brief [23:23] MMC Receive Watchdog Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXRCVERRPIS:1;     /**< \brief [24:24] MMC Receive Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXCTRLPIS:1;       /**< \brief [25:25] MMC Receive Control Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXLPIUSCIS:1;    /**< \brief [26:26] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXLPITRCIS:1;    /**< \brief [27:27] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_Bits;

/** \brief MMC Rx Interrupt Mask */
typedef struct _Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_MASK_Bits
{
    __IO Ifx_UReg_32Bit RXGBPKTIM:1;       /**< \brief [0:0] MMC Receive Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXGBOCTIM:1;       /**< \brief [1:1] MMC Receive Good Bad Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXGOCTIM:1;        /**< \brief [2:2] MMC Receive Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXBCGPIM:1;        /**< \brief [3:3] MMC Receive Broadcast Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXMCGPIM:1;        /**< \brief [4:4] MMC Receive Multicast Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXCRCERPIM:1;      /**< \brief [5:5] MMC Receive CRC Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXALGNERPIM:1;     /**< \brief [6:6] MMC Receive Alignment Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXRUNTPIM:1;       /**< \brief [7:7] MMC Receive Runt Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXJABERPIM:1;      /**< \brief [8:8] MMC Receive Jabber Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUSIZEGPIM:1;     /**< \brief [9:9] MMC Receive Undersize Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXOSIZEGPIM:1;     /**< \brief [10:10] MMC Receive Oversize Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RX64OCTGBPIM:1;    /**< \brief [11:11] MMC Receive 64 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RX65T127OCTGBPIM:1;    /**< \brief [12:12] MMC Receive 65 to 127 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RX128T255OCTGBPIM:1;    /**< \brief [13:13] MMC Receive 128 to 255 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RX256T511OCTGBPIM:1;    /**< \brief [14:14] MMC Receive 256 to 511 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RX512T1023OCTGBPIM:1;    /**< \brief [15:15] MMC Receive 512 to 1023 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RX1024TMAXOCTGBPIM:1;    /**< \brief [16:16] MMC Receive 1024 to Maximum Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUCGPIM:1;        /**< \brief [17:17] MMC Receive Unicast Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXLENERPIM:1;      /**< \brief [18:18] MMC Receive Length Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXORANGEPIM:1;     /**< \brief [19:19] MMC Receive Out Of Range Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXPAUSPIM:1;       /**< \brief [20:20] MMC Receive Pause Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXFOVPIM:1;        /**< \brief [21:21] MMC Receive FIFO Overflow Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXVLANGBPIM:1;     /**< \brief [22:22] MMC Receive VLAN Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXWDOGPIM:1;       /**< \brief [23:23] MMC Receive Watchdog Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXRCVERRPIM:1;     /**< \brief [24:24] MMC Receive Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXCTRLPIM:1;       /**< \brief [25:25] MMC Receive Control Packet Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit RESERVED_RXLPIUSCIM:1;    /**< \brief [26:26] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXLPITRCIM:1;    /**< \brief [27:27] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_MASK_Bits;

/** \brief MMC Tx Interrupt */
typedef struct _Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_Bits
{
    __I  Ifx_UReg_32Bit TXGBOCTIS:1;       /**< \brief [0:0] MMC Transmit Good Bad Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXGBPKTIS:1;       /**< \brief [1:1] MMC Transmit Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXBCGPIS:1;        /**< \brief [2:2] MMC Transmit Broadcast Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXMCGPIS:1;        /**< \brief [3:3] MMC Transmit Multicast Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX64OCTGBPIS:1;    /**< \brief [4:4] MMC Transmit 64 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX65T127OCTGBPIS:1;    /**< \brief [5:5] MMC Transmit 65 to 127 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX128T255OCTGBPIS:1;    /**< \brief [6:6] MMC Transmit 128 to 255 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX256T511OCTGBPIS:1;    /**< \brief [7:7] MMC Transmit 256 to 511 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX512T1023OCTGBPIS:1;    /**< \brief [8:8] MMC Transmit 512 to 1023 Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TX1024TMAXOCTGBPIS:1;    /**< \brief [9:9] MMC Transmit 1024 to Maximum Octet Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXUCGBPIS:1;       /**< \brief [10:10] MMC Transmit Unicast Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXMCGBPIS:1;       /**< \brief [11:11] MMC Transmit Multicast Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXBCGBPIS:1;       /**< \brief [12:12] MMC Transmit Broadcast Good Bad Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXUFLOWERPIS:1;    /**< \brief [13:13] MMC Transmit Underflow Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXSCOLGPIS:1;      /**< \brief [14:14] MMC Transmit Single Collision Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXMCOLGPIS:1;      /**< \brief [15:15] MMC Transmit Multiple Collision Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXDEFPIS:1;        /**< \brief [16:16] MMC Transmit Deferred Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXLATCOLPIS:1;     /**< \brief [17:17] MMC Transmit Late Collision Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXEXCOLPIS:1;      /**< \brief [18:18] MMC Transmit Excessive Collision Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXCARERPIS:1;      /**< \brief [19:19] MMC Transmit Carrier Error Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXGOCTIS:1;        /**< \brief [20:20] MMC Transmit Good Octet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXGPKTIS:1;        /**< \brief [21:21] MMC Transmit Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXEXDEFPIS:1;      /**< \brief [22:22] MMC Transmit Excessive Deferral Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXPAUSPIS:1;       /**< \brief [23:23] MMC Transmit Pause Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXVLANGPIS:1;      /**< \brief [24:24] MMC Transmit VLAN Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXOSIZEGPIS:1;     /**< \brief [25:25] MMC Transmit Oversize Good Packet Counter Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_TXLPIUSCIS:1;    /**< \brief [26:26] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TXLPITRCIS:1;    /**< \brief [27:27] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_Bits;

/** \brief MMC Tx Interrupt Mask */
typedef struct _Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_MASK_Bits
{
    __IO Ifx_UReg_32Bit TXGBOCTIM:1;       /**< \brief [0:0] MMC Transmit Good Bad Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXGBPKTIM:1;       /**< \brief [1:1] MMC Transmit Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXBCGPIM:1;        /**< \brief [2:2] MMC Transmit Broadcast Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXMCGPIM:1;        /**< \brief [3:3] MMC Transmit Multicast Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TX64OCTGBPIM:1;    /**< \brief [4:4] MMC Transmit 64 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TX65T127OCTGBPIM:1;    /**< \brief [5:5] MMC Transmit 65 to 127 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TX128T255OCTGBPIM:1;    /**< \brief [6:6] MMC Transmit 128 to 255 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TX256T511OCTGBPIM:1;    /**< \brief [7:7] MMC Transmit 256 to 511 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TX512T1023OCTGBPIM:1;    /**< \brief [8:8] MMC Transmit 512 to 1023 Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TX1024TMAXOCTGBPIM:1;    /**< \brief [9:9] MMC Transmit 1024 to Maximum Octet Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXUCGBPIM:1;       /**< \brief [10:10] MMC Transmit Unicast Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXMCGBPIM:1;       /**< \brief [11:11] MMC Transmit Multicast Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXBCGBPIM:1;       /**< \brief [12:12] MMC Transmit Broadcast Good Bad Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXUFLOWERPIM:1;    /**< \brief [13:13] MMC Transmit Underflow Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXSCOLGPIM:1;      /**< \brief [14:14] MMC Transmit Single Collision Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXMCOLGPIM:1;      /**< \brief [15:15] MMC Transmit Multiple Collision Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXDEFPIM:1;        /**< \brief [16:16] MMC Transmit Deferred Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXLATCOLPIM:1;     /**< \brief [17:17] MMC Transmit Late Collision Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXEXCOLPIM:1;      /**< \brief [18:18] MMC Transmit Excessive Collision Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXCARERPIM:1;      /**< \brief [19:19] MMC Transmit Carrier Error Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXGOCTIM:1;        /**< \brief [20:20] MMC Transmit Good Octet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXGPKTIM:1;        /**< \brief [21:21] MMC Transmit Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXEXDEFPIM:1;      /**< \brief [22:22] MMC Transmit Excessive Deferral Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXPAUSPIM:1;       /**< \brief [23:23] MMC Transmit Pause Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXVLANGPIM:1;      /**< \brief [24:24] MMC Transmit VLAN Good Packet Counter Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXOSIZEGPIM:1;     /**< \brief [25:25] MMC Transmit Oversize Good Packet Counter Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit RESERVED_TXLPIUSCIM:1;    /**< \brief [26:26] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_TXLPITRCIM:1;    /**< \brief [27:27] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_MASK_Bits;

/** \brief RxICMP Error Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXICMP_ERROR_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXICMPERROCT:32;    /**< \brief [31:0] RxICMP Error Octets (r) */
} Ifx_LETH_PORT_CORE_RXICMP_ERROR_OCTETS_Bits;

/** \brief RxICMP Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXICMP_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXICMPERRPKT:32;    /**< \brief [31:0] RxICMP Error Packets (r) */
} Ifx_LETH_PORT_CORE_RXICMP_ERROR_PACKETS_Bits;

/** \brief RxICMP Good Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXICMP_GOOD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXICMPGDOCT:32;    /**< \brief [31:0] RxICMP Good Octets (r) */
} Ifx_LETH_PORT_CORE_RXICMP_GOOD_OCTETS_Bits;

/** \brief RxICMP Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXICMP_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXICMPGDPKT:32;    /**< \brief [31:0] RxICMP Good Packets (r) */
} Ifx_LETH_PORT_CORE_RXICMP_GOOD_PACKETS_Bits;

/** \brief RxIPv4 Fragmented Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4FRAGOCT:32;    /**< \brief [31:0] RxIPv4 Fragmented Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_Bits;

/** \brief RxIPv4 Fragmented Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4FRAGPKT:32;    /**< \brief [31:0] RxIPv4 Fragmented Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_Bits;

/** \brief RxIPv4 Good Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_GOOD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4GDOCT:32;    /**< \brief [31:0] RxIPv4 Good Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_GOOD_OCTETS_Bits;

/** \brief RxIPv4 Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4GDPKT:32;    /**< \brief [31:0] RxIPv4 Good Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_GOOD_PACKETS_Bits;

/** \brief RxIPv4 Header Error Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4HDRERROCT:32;    /**< \brief [31:0] RxIPv4 Header Error Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_Bits;

/** \brief RxIPv4 Header Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4HDRERRPKT:32;    /**< \brief [31:0] RxIPv4 Header Error Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_Bits;

/** \brief RxIPv4 No Payload Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4NOPAYOCT:32;    /**< \brief [31:0] RxIPv4 Payload Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_Bits;

/** \brief RxIPv4 No Payload Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4NOPAYPKT:32;    /**< \brief [31:0] RxIPv4 Payload Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_Bits;

/** \brief RxIPv4 UDP Checksum Disabled Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4UDSBLPKT:32;    /**< \brief [31:0] RxIPv4 UDP Checksum Disabled Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits;

/** \brief RxIPv4 UDP Checksum Disable Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV4UDSBLOCT:32;    /**< \brief [31:0] RxIPv4 UDP Checksum Disable Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits;

/** \brief RxIPv6 Good Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV6_GOOD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6GDOCT:32;    /**< \brief [31:0] RxIPv6 Good Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV6_GOOD_OCTETS_Bits;

/** \brief RxIPv6 Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV6_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6GDPKT:32;    /**< \brief [31:0] RxIPv6 Good Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV6_GOOD_PACKETS_Bits;

/** \brief RxIPv6 Header Error Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6HDRERROCT:32;    /**< \brief [31:0] RxIPv6 Header Error Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_Bits;

/** \brief RxIPv6 Header Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6HDRERRPKT:32;    /**< \brief [31:0] RxIPv6 Header Error Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_Bits;

/** \brief RxIPv6 No Payload Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6NOPAYOCT:32;    /**< \brief [31:0] RxIPv6 Payload Octets (r) */
} Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_Bits;

/** \brief RxIPv6 No Payload Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXIPV6NOPAYPKT:32;    /**< \brief [31:0] RxIPv6 Payload Packets (r) */
} Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_Bits;

/** \brief RxTCP Error Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXTCP_ERROR_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXTCPERROCT:32;    /**< \brief [31:0] RxTCP Error Octets (r) */
} Ifx_LETH_PORT_CORE_RXTCP_ERROR_OCTETS_Bits;

/** \brief RxTCP Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXTCP_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXTCPERRPKT:32;    /**< \brief [31:0] RxTCP Error Packets (r) */
} Ifx_LETH_PORT_CORE_RXTCP_ERROR_PACKETS_Bits;

/** \brief RxTCP Good Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXTCP_GOOD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXTCPGDOCT:32;     /**< \brief [31:0] RxTCP Good Octets (r) */
} Ifx_LETH_PORT_CORE_RXTCP_GOOD_OCTETS_Bits;

/** \brief RxTCP Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXTCP_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXTCPGDPKT:32;     /**< \brief [31:0] RxTCP Good Packets (r) */
} Ifx_LETH_PORT_CORE_RXTCP_GOOD_PACKETS_Bits;

/** \brief RxUDP Error Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXUDP_ERROR_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXUDPERROCT:32;    /**< \brief [31:0] RxUDP Error Octets (r) */
} Ifx_LETH_PORT_CORE_RXUDP_ERROR_OCTETS_Bits;

/** \brief RxUDP Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXUDP_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXUDPERRPKT:32;    /**< \brief [31:0] RxUDP Error Packets (r) */
} Ifx_LETH_PORT_CORE_RXUDP_ERROR_PACKETS_Bits;

/** \brief RxUDP Good Octets */
typedef struct _Ifx_LETH_PORT_CORE_RXUDP_GOOD_OCTETS_Bits
{
    __I  Ifx_UReg_32Bit RXUDPGDOCT:32;     /**< \brief [31:0] RxUDP Good Octets (r) */
} Ifx_LETH_PORT_CORE_RXUDP_GOOD_OCTETS_Bits;

/** \brief RxUDP Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_RXUDP_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXUDPGDPKT:32;     /**< \brief [31:0] RxUDP Good Packets (r) */
} Ifx_LETH_PORT_CORE_RXUDP_GOOD_PACKETS_Bits;

/** \brief Rx 1024ToMaxOctets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RX1024_MAXOCTGB:32;    /**< \brief [31:0] Rx 1024-Max Octets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Rx 128To255Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RX128_255OCTGB:32;    /**< \brief [31:0] Rx 128-255 Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Rx 256To511Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RX256_511OCTGB:32;    /**< \brief [31:0] Rx 256-511 Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Rx 512To1023Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RX512_1023OCTGB:32;    /**< \brief [31:0] RX 512-1023 Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Rx 64Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RX64OCTGB:32;      /**< \brief [31:0] Rx 64 Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Rx 65To127Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RX65_127OCTGB:32;    /**< \brief [31:0] Rx 65-127 Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Rx Alignment Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXALGNERR:32;      /**< \brief [31:0] Rx Alignment Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS_Bits;

/** \brief Rx Broadcast Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXBCASTG:32;       /**< \brief [31:0] Rx Broadcast Packets Good (r) */
} Ifx_LETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_Bits;

/** \brief Rx Control Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_CONTROL_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXCTRLG:32;        /**< \brief [31:0] Rx Control Packets Good (r) */
} Ifx_LETH_PORT_CORE_RX_CONTROL_PACKETS_GOOD_Bits;

/** \brief Rx CRC Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_CRC_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXCRCERR:32;       /**< \brief [31:0] Rx CRC Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_CRC_ERROR_PACKETS_Bits;

/** \brief Rx FIFO Overflow Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_FIFO_OVERFLOW_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXFIFOOVFL:32;     /**< \brief [31:0] Rx FIFO Overflow Packets (r) */
} Ifx_LETH_PORT_CORE_RX_FIFO_OVERFLOW_PACKETS_Bits;

/** \brief Rx Jabber Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_JABBER_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXJABERR:32;       /**< \brief [31:0] Rx Jabber Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_JABBER_ERROR_PACKETS_Bits;

/** \brief Rx Length Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXLENERR:32;       /**< \brief [31:0] Rx Length Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_Bits;

/** \brief Rx Multicast Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXMCASTG:32;       /**< \brief [31:0] Rx Multicast Packets Good (r) */
} Ifx_LETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_Bits;

/** \brief Rx Octet Count Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXOCTG:32;         /**< \brief [31:0] Rx Octet Count Good (r) */
} Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_Bits;

/** \brief Rx Octet Count Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RXOCTGB:32;        /**< \brief [31:0] Rx Octet Count Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_Bits;

/** \brief Rx Out Of Range Type Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXOUTOFRNG:32;     /**< \brief [31:0] Rx Out of Range Type Packet (r) */
} Ifx_LETH_PORT_CORE_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits;

/** \brief Rx Oversize Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXOVERSZG:32;      /**< \brief [31:0] Rx Oversize Packets Good (r) */
} Ifx_LETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD_Bits;

/** \brief Rx Packets Count Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_PACKETS_COUNT_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RXPKTGB:32;        /**< \brief [31:0] Rx Packets Count Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_PACKETS_COUNT_GOOD_BAD_Bits;

/** \brief Rx Pause Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_PAUSE_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXPAUSEPKT:32;     /**< \brief [31:0] Rx Pause Packets (r) */
} Ifx_LETH_PORT_CORE_RX_PAUSE_PACKETS_Bits;

/** \brief Rx Receive Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_RECEIVE_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXRCVERR:32;       /**< \brief [31:0] Rx Receive Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_RECEIVE_ERROR_PACKETS_Bits;

/** \brief Rx Runt Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_RUNT_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXRUNTERR:32;      /**< \brief [31:0] Rx Runt Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_RUNT_ERROR_PACKETS_Bits;

/** \brief Rx Undersize Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXUNDERSZG:32;     /**< \brief [31:0] Rx Undersize Packets Good (r) */
} Ifx_LETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD_Bits;

/** \brief Rx Unicast Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit RXUCASTG:32;       /**< \brief [31:0] Rx Unicast Packets Good (r) */
} Ifx_LETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_Bits;

/** \brief Rx VLAN Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit RXVLANPKTGB:32;    /**< \brief [31:0] Rx VLAN Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_Bits;

/** \brief Rx Watchdog Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit RXWDGERR:32;       /**< \brief [31:0] Rx Watchdog Error Packets (r) */
} Ifx_LETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS_Bits;

/** \brief Tx 1024ToMaxOctets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TX1024_MAXOCTGB:32;    /**< \brief [31:0] Tx 1024ToMaxOctets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Tx 128To255Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TX128_255OCTGB:32;    /**< \brief [31:0] Tx 128To255Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Tx 256To511Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TX256_511OCTGB:32;    /**< \brief [31:0] Tx 256To511Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Tx 512To1023Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TX512_1023OCTGB:32;    /**< \brief [31:0] Tx 512To1023Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Tx 64Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TX64OCTGB:32;      /**< \brief [31:0] Tx 64Octets Packets Good_Bad (r) */
} Ifx_LETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Tx 65To127Octets Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TX65_127OCTGB:32;    /**< \brief [31:0] Tx 65To127Octets Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits;

/** \brief Tx Broadcast Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit TXBCASTG:32;       /**< \brief [31:0] Tx Broadcast Packets Good (r) */
} Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_Bits;

/** \brief Tx Broadcast Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TXBCASTGB:32;      /**< \brief [31:0] Tx Broadcast Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_Bits;

/** \brief Tx Carrier Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXCARR:32;         /**< \brief [31:0] Tx Carrier Error Packets (r) */
} Ifx_LETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS_Bits;

/** \brief Tx Deferred Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_DEFERRED_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXDEFRD:32;        /**< \brief [31:0] Tx Deferred Packets (r) */
} Ifx_LETH_PORT_CORE_TX_DEFERRED_PACKETS_Bits;

/** \brief Tx Excessive Collision Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXEXSCOL:32;       /**< \brief [31:0] Tx Excessive Collision Packets (r) */
} Ifx_LETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS_Bits;

/** \brief Tx Excessive Deferral Error */
typedef struct _Ifx_LETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR_Bits
{
    __I  Ifx_UReg_32Bit TXEXSDEF:32;       /**< \brief [31:0] Tx Excessive Deferral Error (r) */
} Ifx_LETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR_Bits;

/** \brief Tx Late Collision Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_LATE_COLLISION_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXLATECOL:32;      /**< \brief [31:0] Tx Late Collision Packets (r) */
} Ifx_LETH_PORT_CORE_TX_LATE_COLLISION_PACKETS_Bits;

/** \brief Tx Multicast Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit TXMCASTG:32;       /**< \brief [31:0] Tx Multicast Packets Good (r) */
} Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_Bits;

/** \brief Tx Multicast Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TXMCASTGB:32;      /**< \brief [31:0] Tx Multicast Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_Bits;

/** \brief Tx Multiple Collision Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXMULTCOLG:32;     /**< \brief [31:0] Tx Multiple Collision Good Packets (r) */
} Ifx_LETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits;

/** \brief Tx Octet Count Good */
typedef struct _Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_Bits
{
    __I  Ifx_UReg_32Bit TXOCTG:32;         /**< \brief [31:0] Tx Octet Count Good (r) */
} Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_Bits;

/** \brief Tx Octet Count Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TXOCTGB:32;        /**< \brief [31:0] Tx Octet Count Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_Bits;

/** \brief Tx OSize Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_TX_OSIZE_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit TXOSIZG:32;        /**< \brief [31:0] Tx OSize Packets Good (r) */
} Ifx_LETH_PORT_CORE_TX_OSIZE_PACKETS_GOOD_Bits;

/** \brief Tx Packet Count Good */
typedef struct _Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_Bits
{
    __I  Ifx_UReg_32Bit TXPKTG:32;         /**< \brief [31:0] Tx Packet Count Good (r) */
} Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_Bits;

/** \brief Tx Packet Count Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TXPKTGB:32;        /**< \brief [31:0] Tx Packet Count Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_Bits;

/** \brief Tx Pause Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_PAUSE_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXPAUSE:32;        /**< \brief [31:0] Tx Pause Packets (r) */
} Ifx_LETH_PORT_CORE_TX_PAUSE_PACKETS_Bits;

/** \brief Tx Single Collision Good Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXSNGLCOLG:32;     /**< \brief [31:0] Tx Single Collision Good Packets (r) */
} Ifx_LETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits;

/** \brief Tx Underflow Error Packets */
typedef struct _Ifx_LETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_Bits
{
    __I  Ifx_UReg_32Bit TXUNDRFLW:32;      /**< \brief [31:0] Tx Underflow Error Packets (r) */
} Ifx_LETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_Bits;

/** \brief Tx Unicast Packets Good Bad */
typedef struct _Ifx_LETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_Bits
{
    __I  Ifx_UReg_32Bit TXUCASTGB:32;      /**< \brief [31:0] Tx Unicast Packets Good Bad (r) */
} Ifx_LETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_Bits;

/** \brief Tx VLAN Packets Good */
typedef struct _Ifx_LETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_Bits
{
    __I  Ifx_UReg_32Bit TXVLANG:32;        /**< \brief [31:0] Tx VLAN Packets Good (r) */
} Ifx_LETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_Bits;

/** \brief MTL DBG CTL */
typedef struct _Ifx_LETH_PORT_MTL_MTL_DBG_CTL_Bits
{
    __IO Ifx_UReg_32Bit FDBGEN:1;          /**< \brief [0:0] FIFO Debug Access Enable (rw) */
    __IO Ifx_UReg_32Bit DBGMOD:1;          /**< \brief [1:1] Debug Mode Access to FIFO (rw) */
    __IO Ifx_UReg_32Bit BYTEEN:2;          /**< \brief [3:2] Byte Enables (rw) */
    __I  Ifx_UReg_32Bit RESERVED_4:1;      /**< \brief [4:4] Reserved (r) */
    __IO Ifx_UReg_32Bit PKTSTATE:2;        /**< \brief [6:5] Encoded Packet State (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7:1;      /**< \brief [7:7] Reserved (r) */
    __IO Ifx_UReg_32Bit RSTALL:1;          /**< \brief [8:8] Reset All Pointers (rw) */
    __IO Ifx_UReg_32Bit RSTSEL:1;          /**< \brief [9:9] Reset Pointers of Selected FIFO (rw) */
    __IO Ifx_UReg_32Bit FIFORDEN:1;        /**< \brief [10:10] FIFO Read Enable (rw) */
    __IO Ifx_UReg_32Bit FIFOWREN:1;        /**< \brief [11:11] FIFO Write Enable (rw) */
    __IO Ifx_UReg_32Bit FIFOSEL:2;         /**< \brief [13:12] FIFO Selected for Access (rw) */
    __IO Ifx_UReg_32Bit PKTIE:1;           /**< \brief [14:14] Receive Packet Available Interrupt Status Enable (rw) */
    __IO Ifx_UReg_32Bit STSIE:1;           /**< \brief [15:15] Transmit Status Available Interrupt Status Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_EIEE:1;    /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_EIAEE:1;    /**< \brief [17:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_EIEC:1;    /**< \brief [18:18] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_19:13;    /**< \brief [31:19] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_DBG_CTL_Bits;

/** \brief MTL DBG STS */
typedef struct _Ifx_LETH_PORT_MTL_MTL_DBG_STS_Bits
{
    __I  Ifx_UReg_32Bit FIFOBUSY:1;        /**< \brief [0:0] FIFO Busy (r) */
    __I  Ifx_UReg_32Bit PKTSTATE:2;        /**< \brief [2:1] Encoded Packet State (r) */
    __I  Ifx_UReg_32Bit BYTEEN:2;          /**< \brief [4:3] Byte Enables (r) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit PKTI:1;            /**< \brief [8:8] Receive Packet Available Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit STSI:1;            /**< \brief [9:9] Transmit Status Available Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_14_10:5;    /**< \brief [14:10] Reserved (r) */
    __I  Ifx_UReg_32Bit LOCR:17;           /**< \brief [31:15] Remaining Locations in the FIFO (r) */
} Ifx_LETH_PORT_MTL_MTL_DBG_STS_Bits;

/** \brief MTL EST Control */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit EEST:1;            /**< \brief [0:0] Enable EST (rw) */
    __IO Ifx_UReg_32Bit SSWL:1;            /**< \brief [1:1] Switch to S/W owned list (rw) */
    __I  Ifx_UReg_32Bit RESERVED_2:1;      /**< \brief [2:2] Reserved (r) */
    __IO Ifx_UReg_32Bit QHLBF:1;           /**< \brief [3:3] Quick Assertion of HLBF Error (rw) */
    __IO Ifx_UReg_32Bit DDBF:1;            /**< \brief [4:4] Do not Drop frames during Frame Size Error (rw) */
    __IO Ifx_UReg_32Bit DFBS:1;            /**< \brief [5:5] Drop Frames causing Scheduling Error (rw) */
    __IO Ifx_UReg_32Bit LCSE:2;            /**< \brief [7:6] Loop Count to report Scheduling Error (rw) */
    __IO Ifx_UReg_32Bit TILS:3;            /**< \brief [10:8] Time Interval Left Shift Amount (rw) */
    __I  Ifx_UReg_32Bit RESERVED_11:1;     /**< \brief [11:11] Reserved (r) */
    __IO Ifx_UReg_32Bit CTOV:12;           /**< \brief [23:12] Current Time Offset Value (rw) */
    __IO Ifx_UReg_32Bit PTOV:8;            /**< \brief [31:24] PTP Time Offset Value (rw) */
} Ifx_LETH_PORT_MTL_MTL_EST_CONTROL_Bits;

/** \brief MTL EST Ext Control */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_EXT_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit OVHD:6;            /**< \brief [5:0] Overhead Bytes Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_6:26;    /**< \brief [31:6] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_EXT_CONTROL_Bits;

/** \brief MTL EST Frm Size Capture */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_CAPTURE_Bits
{
    __I  Ifx_UReg_32Bit HBFS:15;           /**< \brief [14:0] Frame Size of HLBF (r) */
    __I  Ifx_UReg_32Bit RESERVED_15:1;     /**< \brief [15:15] Reserved (r) */
    __I  Ifx_UReg_32Bit HBFQ:3;            /**< \brief [18:16] Queue Number of HLBF (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_X:13;    /**< \brief [31:19] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_CAPTURE_Bits;

/** \brief MTL EST Frm Size Error */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_ERROR_Bits
{
    __IO Ifx_UReg_32Bit FEQN:5;            /**< \brief [4:0] Frame Size Error Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_X:27;    /**< \brief [31:5] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_ERROR_Bits;

/** \brief MTL EST GCL Control */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_GCL_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit SRWO:1;            /**< \brief [0:0] Start Read or Write Operation (rw) */
    __IO Ifx_UReg_32Bit R1W0:1;            /**< \brief [1:1] "Read '1', Write '0':" (rw) */
    __IO Ifx_UReg_32Bit GCRR:1;            /**< \brief [2:2] Gate Control Related Registers (rw) */
    __IO Ifx_UReg_32Bit RESERVED_3:1;      /**< \brief [3:3] Reserved (rw) */
    __IO Ifx_UReg_32Bit DBGM:1;            /**< \brief [4:4] Debug Mode (rw) */
    __IO Ifx_UReg_32Bit DBGB:1;            /**< \brief [5:5] Debug Mode Bank Select (rw) */
    __IO Ifx_UReg_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (rw) */
    __IO Ifx_UReg_32Bit ADDR:8;            /**< \brief [15:8] Gate Control List Address: (ADDR when GCRR is "0") (rw) */
    __I  Ifx_UReg_32Bit RESERVED_20_Y:5;    /**< \brief [20:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_ESTEIEE:1;    /**< \brief [21:21] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_ESTEIAEE:1;    /**< \brief [22:22] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_ESTEIEC:1;    /**< \brief [23:23] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_GCL_CONTROL_Bits;

/** \brief MTL EST GCL Data */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_GCL_DATA_Bits
{
    __IO Ifx_UReg_32Bit GCD:32;            /**< \brief [31:0] Gate Control Data (rw) */
} Ifx_LETH_PORT_MTL_MTL_EST_GCL_DATA_Bits;

/** \brief MTL EST Intr Enable */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_INTR_ENABLE_Bits
{
    __IO Ifx_UReg_32Bit IECC:1;            /**< \brief [0:0] Interrupt Enable for Switch List (rw) */
    __IO Ifx_UReg_32Bit IEBE:1;            /**< \brief [1:1] Interrupt Enable for BTR Error (rw) */
    __IO Ifx_UReg_32Bit IEHF:1;            /**< \brief [2:2] Interrupt Enable for HLBF (rw) */
    __IO Ifx_UReg_32Bit IEHS:1;            /**< \brief [3:3] Interrupt Enable for HLBS (rw) */
    __IO Ifx_UReg_32Bit CGCE:1;            /**< \brief [4:4] Interrupt Enable for CGCE (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_5:27;    /**< \brief [31:5] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_INTR_ENABLE_Bits;

/** \brief MTL EST Sch Error */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_SCH_ERROR_Bits
{
    __IO Ifx_UReg_32Bit SEQN:5;            /**< \brief [4:0] Schedule Error Queue Number (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_X:27;    /**< \brief [31:5] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_SCH_ERROR_Bits;

/** \brief MTL EST Status */
typedef struct _Ifx_LETH_PORT_MTL_MTL_EST_STATUS_Bits
{
    __IO Ifx_UReg_32Bit SWLC:1;            /**< \brief [0:0] Switch to S/W owned list Complete (rw) */
    __IO Ifx_UReg_32Bit BTRE:1;            /**< \brief [1:1] BTR Error (rw) */
    __I  Ifx_UReg_32Bit HLBF:1;            /**< \brief [2:2] Head-Of-Line Blocking due to Frame Size (r) */
    __I  Ifx_UReg_32Bit HLBS:1;            /**< \brief [3:3] Head-Of-Line Blocking due to Scheduling (r) */
    __IO Ifx_UReg_32Bit CGCE:1;            /**< \brief [4:4] Constant Gate Control Error (rw) */
    __I  Ifx_UReg_32Bit RESERVED_6_5:2;    /**< \brief [6:5] Reserved (r) */
    __I  Ifx_UReg_32Bit SWOL:1;            /**< \brief [7:7] S/W owned list (r) */
    __I  Ifx_UReg_32Bit BTRL:8;            /**< \brief [15:8] BTR Error Loop Count (r) */
    __I  Ifx_UReg_32Bit RESERVED_CGSN:4;    /**< \brief [19:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_EST_STATUS_Bits;

/** \brief MTL FIFO Debug Data */
typedef struct _Ifx_LETH_PORT_MTL_MTL_FIFO_DEBUG_DATA_Bits
{
    __IO Ifx_UReg_32Bit FDBGDATA:32;       /**< \brief [31:0] FIFO Debug Data (rw) */
} Ifx_LETH_PORT_MTL_MTL_FIFO_DEBUG_DATA_Bits;

/** \brief MTL Interrupt Status */
typedef struct _Ifx_LETH_PORT_MTL_MTL_INTERRUPT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit Q0IS:1;            /**< \brief [0:0] Queue 0 Interrupt status (r) */
    __I  Ifx_UReg_32Bit Q1IS:1;            /**< \brief [1:1] Queue 1 Interrupt status (r) */
    __I  Ifx_UReg_32Bit Q2IS:1;            /**< \brief [2:2] Queue 2 Interrupt status (r) */
    __I  Ifx_UReg_32Bit Q3IS:1;            /**< \brief [3:3] Queue 3 Interrupt status (r) */
    __I  Ifx_UReg_32Bit Q4IS:1;            /**< \brief [4:4] Queue 4 Interrupt status (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q5IS:1;    /**< \brief [5:5] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q6IS:1;    /**< \brief [6:6] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q7IS:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_MACIS:1;    /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit DBGIS:1;           /**< \brief [17:17] Debug Interrupt status (r) */
    __I  Ifx_UReg_32Bit ESTIS:1;           /**< \brief [18:18] EST (TAS- 802.1Qbv) Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_22_19:4;    /**< \brief [22:19] Reserved (r) */
    __I  Ifx_UReg_32Bit MTLPIS:1;          /**< \brief [23:23] MTL Rx Parser Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_INTERRUPT_STATUS_Bits;

/** \brief MTL Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_MTL_OPERATION_MODE_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_0:1;      /**< \brief [0:0] Reserved (r) */
    __IO Ifx_UReg_32Bit DTXSTS:1;          /**< \brief [1:1] Drop Transmit Status (rw) */
    __IO Ifx_UReg_32Bit RAA:1;             /**< \brief [2:2] Receive Arbitration Algorithm (rw) */
    __I  Ifx_UReg_32Bit RESERVED_4_3:2;    /**< \brief [4:3] Reserved (r) */
    __IO Ifx_UReg_32Bit SCHALG:2;          /**< \brief [6:5] Tx Scheduling Algorithm (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7:1;      /**< \brief [7:7] Reserved (r) */
    __IO Ifx_UReg_32Bit CNTPRST:1;         /**< \brief [8:8] Counters Preset (rw) */
    __IO Ifx_UReg_32Bit CNTCLR:1;          /**< \brief [9:9] Counters Reset (rw) */
    __I  Ifx_UReg_32Bit RESERVED_13_10:4;    /**< \brief [13:10] Reserved (r) */
    __IO Ifx_UReg_32Bit RXPED:1;           /**< \brief [14:14] RxParser Software Error/Incomplete Parsing Packet Drop Enable (rw) */
    __IO Ifx_UReg_32Bit FRPE:1;            /**< \brief [15:15] Flexible Rx parser Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_16:16;    /**< \brief [31:16] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_OPERATION_MODE_Bits;

/** \brief MTL RXP Bypass Cnt */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_BYPASS_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPBC:31;          /**< \brief [30:0] Rx Parser Bypass count (r) */
    __I  Ifx_UReg_32Bit RXPBCOF:1;         /**< \brief [31:31] Rx Parser bypass Counter Overflow Bit (r) */
} Ifx_LETH_PORT_MTL_MTL_RXP_BYPASS_CNT_Bits;

/** \brief MTL RXP Control Status */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit NVE:8;             /**< \brief [7:0] Number of valid entry address/index in the Instruction table (rw) */
    __I  Ifx_UReg_32Bit RESERVED_10_X:3;    /**< \brief [10:8] Reserved (r) */
    __IO Ifx_UReg_32Bit OKI_DME:1;         /**< \brief [11:11] "Instruction's OK Index Dual Meaning Enable" (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __IO Ifx_UReg_32Bit NPE:8;             /**< \brief [23:16] Number of parsable entries in the Instruction table (rw) */
    __I  Ifx_UReg_32Bit RESERVED_29_X:6;    /**< \brief [29:24] Reserved (r) */
    __IO Ifx_UReg_32Bit ELIRS:1;           /**< \brief [30:30] Enable Last Instruction in RX Status (rw) */
    __I  Ifx_UReg_32Bit RXPI:1;            /**< \brief [31:31] RX Parser in Idle state (r) */
} Ifx_LETH_PORT_MTL_MTL_RXP_CONTROL_STATUS_Bits;

/** \brief MTL RXP Drop Cnt */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_DROP_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPDC:31;          /**< \brief [30:0] Rx Parser Drop count (r) */
    __I  Ifx_UReg_32Bit RXPDCOVF:1;        /**< \brief [31:31] Rx Parser Drop Counter Overflow Bit (r) */
} Ifx_LETH_PORT_MTL_MTL_RXP_DROP_CNT_Bits;

/** \brief MTL RXP Error Cnt */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_ERROR_CNT_Bits
{
    __I  Ifx_UReg_32Bit RXPEC:31;          /**< \brief [30:0] Rx Parser Error count (r) */
    __I  Ifx_UReg_32Bit RXPECOVF:1;        /**< \brief [31:31] Rx Parser Error Counter Overflow Bit (r) */
} Ifx_LETH_PORT_MTL_MTL_RXP_ERROR_CNT_Bits;

/** \brief MTL RXP Indirect Acc Control Status */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ADDR:10;           /**< \brief [9:0] FRP Instruction Table Offset Address (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_X:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit WRRDN:1;           /**< \brief [16:16] Read Write Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19_17:3;    /**< \brief [19:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXPEIEE:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXPEIAEE:1;    /**< \brief [21:21] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXPEIEC:1;    /**< \brief [22:22] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_30_23:8;    /**< \brief [30:23] Reserved (r) */
    __IO Ifx_UReg_32Bit STARTBUSY:1;       /**< \brief [31:31] FRP Instruction Table Access Busy (rw) */
} Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_Bits;

/** \brief MTL RXP Indirect Acc Data */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_DATA_Bits
{
    __I  Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] FRP Instruction Table Write/Read Data (r) */
} Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_DATA_Bits;

/** \brief MTL RXP Interrupt Control Status */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXP_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit NVEOVIS:1;         /**< \brief [0:0] Number of Valid Entry Address/Index Overflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit NPEOVIS:1;         /**< \brief [1:1] Number of Parsable Entries Overflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit FOOVIS:1;          /**< \brief [2:2] Frame Offset Overflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit PDRFIS:1;          /**< \brief [3:3] Packet Dropped due to RF Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __IO Ifx_UReg_32Bit NVEOVIE:1;         /**< \brief [16:16] Number of Valid Entries Overflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit NPEOVIE:1;         /**< \brief [17:17] Number of Parsable Entries Overflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit FOOVIE:1;          /**< \brief [18:18] Frame Offset Overflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit PDRFIE:1;          /**< \brief [19:19] Packet Drop due to RF Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_20:12;    /**< \brief [31:20] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_RXP_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL RxQ DMA Map0 */
typedef struct _Ifx_LETH_PORT_MTL_MTL_RXQ_DMA_MAP0_Bits
{
    __IO Ifx_UReg_32Bit Q0MDMACH:3;        /**< \brief [2:0] Queue 0 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit RESERVED_3_Y:1;    /**< \brief [3:3] Reserved (r) */
    __IO Ifx_UReg_32Bit Q0DDMACH:1;        /**< \brief [4:4] Queue 0 Enabled for DA-based DMA Channel Selection (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_UReg_32Bit Q1MDMACH:3;        /**< \brief [10:8] Queue 1 Mapped to DMA Channel (rw) */
    __I  Ifx_UReg_32Bit RESERVED_11_Y:1;    /**< \brief [11:11] Reserved (r) */
    __IO Ifx_UReg_32Bit Q1DDMACH:1;        /**< \brief [12:12] Queue 1 Enabled for DA-based DMA Channel Selection (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_13:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q2MDMACH:3;    /**< \brief [18:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_19_Y:1;    /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q2DDMACH:1;    /**< \brief [20:20] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23_21:3;    /**< \brief [23:21] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q3MDMACH:3;    /**< \brief [26:24] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_27_Y:1;    /**< \brief [27:27] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_Q3DDMACH:1;    /**< \brief [28:28] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_MTL_RXQ_DMA_MAP0_Bits;

/** \brief MTL Q0 Interrupt Control Status */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [8:8] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [9:9] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_17:7;    /**< \brief [23:17] Reserved (r) */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [24:24] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL RxQ0 Control */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_FRM_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_4:28;    /**< \brief [31:4] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_CONTROL_Bits;

/** \brief MTL RxQ0 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit RESERVED_3:1;      /**< \brief [3:3] Reserved (r) */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_DEBUG_Bits;

/** \brief MTL RxQ0 Missed Packet Overflow Cnt */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [11:11] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [27:27] Missed Packet Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ0 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_2:1;      /**< \brief [2:2] Reserved (r) */
    __IO Ifx_UReg_32Bit FUP:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEP:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __IO Ifx_UReg_32Bit RFA:4;             /**< \brief [11:8] Threshold for Activating Flow Control (in half-duplex and full-duplex (rw) */
    __I  Ifx_UReg_32Bit RESERVED_13_Y:2;    /**< \brief [13:12] Reserved (r) */
    __IO Ifx_UReg_32Bit RFD:4;             /**< \brief [17:14] Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19_Y:2;    /**< \brief [19:18] Reserved (r) */
    __IO Ifx_UReg_32Bit RQS:5;             /**< \brief [24:20] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_OPERATION_MODE_Bits;

/** \brief MTL TxQ0 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TXQPAUSED:1;       /**< \brief [0:0] Transmit Queue in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TXSTSFSTS:1;       /**< \brief [5:5] MTL Tx Status FIFO Full Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PTXQ:3;            /**< \brief [18:16] Number of Packets in the Transmit Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit STXSTSF:3;         /**< \brief [22:20] Number of Status Words in Tx Status FIFO of Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_23:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_DEBUG_Bits;

/** \brief MTL TxQ0 ETS Status */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_ETS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ABS:24;            /**< \brief [23:0] Average Bits per Slot (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_ETS_STATUS_Bits;

/** \brief MTL TxQ0 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_7:9;    /**< \brief [15:7] Reserved (r) */
    __IO Ifx_UReg_32Bit TQS:6;             /**< \brief [21:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_OPERATION_MODE_Bits;

/** \brief MTL Tx Queue 0 Quantum Weight Register */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit ISCQW:21;          /**< \brief [20:0] idleSlopeCredit, Weights (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ0 Underflow */
typedef struct _Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFFRMCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [11:11] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_12:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_UNDERFLOW_Bits;

/** \brief MTL Q1 Interrupt Control Status */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_Q1_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [8:8] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [9:9] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __IO Ifx_UReg_32Bit RXOVFIS:1;         /**< \brief [16:16] Receive Queue Overflow Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_23_17:7;    /**< \brief [23:17] Reserved (r) */
    __IO Ifx_UReg_32Bit RXOIE:1;           /**< \brief [24:24] Receive Queue Overflow Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_Q1_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL RxQ1 Control */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_CONTROL_Bits
{
    __IO Ifx_UReg_32Bit RXQ_WEGT:3;        /**< \brief [2:0] Receive Queue Weight (rw) */
    __IO Ifx_UReg_32Bit RXQ_FRM_ARBIT:1;    /**< \brief [3:3] Receive Queue Packet Arbitration (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_4:28;    /**< \brief [31:4] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_CONTROL_Bits;

/** \brief MTL RxQ1 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit RWCSTS:1;          /**< \brief [0:0] MTL Rx Queue Write Controller Active Status (r) */
    __I  Ifx_UReg_32Bit RRCSTS:2;          /**< \brief [2:1] MTL Rx Queue Read Controller State (r) */
    __I  Ifx_UReg_32Bit RESERVED_3:1;      /**< \brief [3:3] Reserved (r) */
    __I  Ifx_UReg_32Bit RXQSTS:2;          /**< \brief [5:4] MTL Rx Queue Fill-Level Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PRXQ:14;           /**< \brief [29:16] Number of Packets in Receive Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_30:2;    /**< \brief [31:30] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_DEBUG_Bits;

/** \brief MTL RxQ1 Missed Packet Overflow Cnt */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_Bits
{
    __I  Ifx_UReg_32Bit OVFPKTCNT:11;      /**< \brief [10:0] Overflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit OVFCNTOVF:1;       /**< \brief [11:11] Overflow Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_UReg_32Bit MISPKTCNT:11;      /**< \brief [26:16] Missed Packet Counter (r) */
    __I  Ifx_UReg_32Bit MISCNTOVF:1;       /**< \brief [27:27] Missed Packet Counter Overflow Bit (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_28:4;    /**< \brief [31:28] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_Bits;

/** \brief MTL RxQ1 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit RTC:2;             /**< \brief [1:0] Receive Queue Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_2:1;      /**< \brief [2:2] Reserved (r) */
    __IO Ifx_UReg_32Bit FUP:1;             /**< \brief [3:3] Forward Undersized Good Packets (rw) */
    __IO Ifx_UReg_32Bit FEP:1;             /**< \brief [4:4] Forward Error Packets (rw) */
    __IO Ifx_UReg_32Bit RSF:1;             /**< \brief [5:5] Receive Queue Store and Forward (rw) */
    __IO Ifx_UReg_32Bit DIS_TCP_EF:1;      /**< \brief [6:6] Disable Dropping of TCP/IP Checksum Error Packets (rw) */
    __IO Ifx_UReg_32Bit EHFC:1;            /**< \brief [7:7] Enable Hardware Flow Control (rw) */
    __IO Ifx_UReg_32Bit RFA:4;             /**< \brief [11:8] Threshold for Activating Flow Control (in half-duplex and full-duplex (rw) */
    __I  Ifx_UReg_32Bit RESERVED_13_Y:2;    /**< \brief [13:12] Reserved (r) */
    __IO Ifx_UReg_32Bit RFD:4;             /**< \brief [17:14] Threshold for Deactivating Flow Control (in half-duplex and full-duplex modes) (rw) */
    __I  Ifx_UReg_32Bit RESERVED_19_Y:2;    /**< \brief [19:18] Reserved (r) */
    __IO Ifx_UReg_32Bit RQS:5;             /**< \brief [24:20] Receive Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_OPERATION_MODE_Bits;

/** \brief MTL TxQ1 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TXQPAUSED:1;       /**< \brief [0:0] Transmit Queue in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TXSTSFSTS:1;       /**< \brief [5:5] MTL Tx Status FIFO Full Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PTXQ:3;            /**< \brief [18:16] Number of Packets in the Transmit Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit STXSTSF:3;         /**< \brief [22:20] Number of Status Words in Tx Status FIFO of Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_23:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_DEBUG_Bits;

/** \brief MTL TxQ1 ETS Control */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_1_0:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit AVALG:1;           /**< \brief [2:2] AV Algorithm (rw) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_7:25;    /**< \brief [31:7] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_CONTROL_Bits;

/** \brief MTL TxQ1 ETS Status */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ABS:24;            /**< \brief [23:0] Average Bits per Slot (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_STATUS_Bits;

/** \brief MTL TxQ1 HiCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_HICREDIT_Bits;

/** \brief MTL TxQ1 LoCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_LOCREDIT_Bits;

/** \brief MTL TxQ1 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_7:9;    /**< \brief [15:7] Reserved (r) */
    __IO Ifx_UReg_32Bit TQS:6;             /**< \brief [21:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_OPERATION_MODE_Bits;

/** \brief MTL TxQ1 Quantum Weight */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit ISCQW:21;          /**< \brief [20:0] idleSlopeCredit, Weights (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ1 SendSlopeCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:14;            /**< \brief [13:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_14:18;    /**< \brief [31:14] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ1 Underflow */
typedef struct _Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFFRMCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [11:11] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_12:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_UNDERFLOW_Bits;

/** \brief MTL Q2 Interrupt Control Status */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_Q2_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [8:8] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [9:9] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXOVFIS:1;    /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23_17:7;    /**< \brief [23:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXOIE:1;    /**< \brief [24:24] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_Q2_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL TxQ2 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TXQPAUSED:1;       /**< \brief [0:0] Transmit Queue in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TXSTSFSTS:1;       /**< \brief [5:5] MTL Tx Status FIFO Full Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PTXQ:3;            /**< \brief [18:16] Number of Packets in the Transmit Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit STXSTSF:3;         /**< \brief [22:20] Number of Status Words in Tx Status FIFO of Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_23:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_DEBUG_Bits;

/** \brief MTL TxQ2 ETS Control */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_1_0:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit AVALG:1;           /**< \brief [2:2] AV Algorithm (rw) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_7:25;    /**< \brief [31:7] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_CONTROL_Bits;

/** \brief MTL TxQ2 ETS Status */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ABS:24;            /**< \brief [23:0] Average Bits per Slot (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_STATUS_Bits;

/** \brief MTL TxQ2 HiCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_HICREDIT_Bits;

/** \brief MTL TxQ2 LoCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_LOCREDIT_Bits;

/** \brief MTL TxQ2 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_7:9;    /**< \brief [15:7] Reserved (r) */
    __IO Ifx_UReg_32Bit TQS:6;             /**< \brief [21:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_OPERATION_MODE_Bits;

/** \brief MTL TxQ2 Quantum Weight */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit ISCQW:21;          /**< \brief [20:0] idleSlopeCredit, Weights (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ2 SendSlopeCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:14;            /**< \brief [13:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_14:18;    /**< \brief [31:14] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ2 Underflow */
typedef struct _Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFFRMCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [11:11] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_12:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_UNDERFLOW_Bits;

/** \brief MTL Q3 Interrupt Control Status */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_Q3_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [8:8] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [9:9] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXOVFIS:1;    /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23_17:7;    /**< \brief [23:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXOIE:1;    /**< \brief [24:24] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_Q3_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL TxQ3 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TXQPAUSED:1;       /**< \brief [0:0] Transmit Queue in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TXSTSFSTS:1;       /**< \brief [5:5] MTL Tx Status FIFO Full Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PTXQ:3;            /**< \brief [18:16] Number of Packets in the Transmit Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit STXSTSF:3;         /**< \brief [22:20] Number of Status Words in Tx Status FIFO of Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_23:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_DEBUG_Bits;

/** \brief MTL TxQ3 ETS Control */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_1_0:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit AVALG:1;           /**< \brief [2:2] AV Algorithm (rw) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_7:25;    /**< \brief [31:7] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_CONTROL_Bits;

/** \brief MTL TxQ3 ETS Status */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ABS:24;            /**< \brief [23:0] Average Bits per Slot (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_STATUS_Bits;

/** \brief MTL TxQ3 HiCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_HICREDIT_Bits;

/** \brief MTL TxQ3 LoCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_LOCREDIT_Bits;

/** \brief MTL TxQ3 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_7:9;    /**< \brief [15:7] Reserved (r) */
    __IO Ifx_UReg_32Bit TQS:6;             /**< \brief [21:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_OPERATION_MODE_Bits;

/** \brief MTL TxQ3 Quantum Weight */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit ISCQW:21;          /**< \brief [20:0] idleSlopeCredit, Weights (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ3 SendSlopeCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:14;            /**< \brief [13:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_14:18;    /**< \brief [31:14] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ3 Underflow */
typedef struct _Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFFRMCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [11:11] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_12:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_UNDERFLOW_Bits;

/** \brief MTL Q4 Interrupt Control Status */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_Q4_INTERRUPT_CONTROL_STATUS_Bits
{
    __IO Ifx_UReg_32Bit TXUNFIS:1;         /**< \brief [0:0] Transmit Queue Underflow Interrupt Status (rw) */
    __IO Ifx_UReg_32Bit ABPSIS:1;          /**< \brief [1:1] Average Bits Per Slot Interrupt Status (rw) */
    __I  Ifx_UReg_32Bit RESERVED_7_2:6;    /**< \brief [7:2] Reserved (r) */
    __IO Ifx_UReg_32Bit TXUIE:1;           /**< \brief [8:8] Transmit Queue Underflow Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit ABPSIE:1;          /**< \brief [9:9] Average Bits Per Slot Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXOVFIS:1;    /**< \brief [16:16] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_23_17:7;    /**< \brief [23:17] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_RXOIE:1;    /**< \brief [24:24] Reserved (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_25:7;    /**< \brief [31:25] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_Q4_INTERRUPT_CONTROL_STATUS_Bits;

/** \brief MTL TxQ4 Debug */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_DEBUG_Bits
{
    __I  Ifx_UReg_32Bit TXQPAUSED:1;       /**< \brief [0:0] Transmit Queue in Pause (r) */
    __I  Ifx_UReg_32Bit TRCSTS:2;          /**< \brief [2:1] MTL Tx Queue Read Controller Status (r) */
    __I  Ifx_UReg_32Bit TWCSTS:1;          /**< \brief [3:3] MTL Tx Queue Write Controller Status (r) */
    __I  Ifx_UReg_32Bit TXQSTS:1;          /**< \brief [4:4] MTL Tx Queue Not Empty Status (r) */
    __I  Ifx_UReg_32Bit TXSTSFSTS:1;       /**< \brief [5:5] MTL Tx Status FIFO Full Status (r) */
    __I  Ifx_UReg_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_UReg_32Bit PTXQ:3;            /**< \brief [18:16] Number of Packets in the Transmit Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_19:1;     /**< \brief [19:19] Reserved (r) */
    __I  Ifx_UReg_32Bit STXSTSF:3;         /**< \brief [22:20] Number of Status Words in Tx Status FIFO of Queue (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_23:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_DEBUG_Bits;

/** \brief MTL TxQ4 ETS Control */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_CONTROL_Bits
{
    __I  Ifx_UReg_32Bit RESERVED_1_0:2;    /**< \brief [1:0] Reserved (r) */
    __IO Ifx_UReg_32Bit AVALG:1;           /**< \brief [2:2] AV Algorithm (rw) */
    __IO Ifx_UReg_32Bit CC:1;              /**< \brief [3:3] Credit Control (rw) */
    __IO Ifx_UReg_32Bit SLC:3;             /**< \brief [6:4] Slot Count (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_7:25;    /**< \brief [31:7] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_CONTROL_Bits;

/** \brief MTL TxQ4 ETS Status */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_STATUS_Bits
{
    __I  Ifx_UReg_32Bit ABS:24;            /**< \brief [23:0] Average Bits per Slot (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_24:8;    /**< \brief [31:24] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_STATUS_Bits;

/** \brief MTL TxQ4 HiCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_HICREDIT_Bits
{
    __IO Ifx_UReg_32Bit HC:29;             /**< \brief [28:0] hiCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_HICREDIT_Bits;

/** \brief MTL TxQ4 LoCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_LOCREDIT_Bits
{
    __IO Ifx_UReg_32Bit LC:29;             /**< \brief [28:0] loCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_29:3;    /**< \brief [31:29] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_LOCREDIT_Bits;

/** \brief MTL TxQ4 Operation Mode */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_OPERATION_MODE_Bits
{
    __IO Ifx_UReg_32Bit FTQ:1;             /**< \brief [0:0] Flush Transmit Queue (rw) */
    __IO Ifx_UReg_32Bit TSF:1;             /**< \brief [1:1] Transmit Store and Forward (rw) */
    __IO Ifx_UReg_32Bit TXQEN:2;           /**< \brief [3:2] Transmit Queue Enable (rw) */
    __IO Ifx_UReg_32Bit TTC:3;             /**< \brief [6:4] Transmit Threshold Control (rw) */
    __I  Ifx_UReg_32Bit RESERVED_15_7:9;    /**< \brief [15:7] Reserved (r) */
    __IO Ifx_UReg_32Bit TQS:6;             /**< \brief [21:16] Transmit Queue Size (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_Y:10;    /**< \brief [31:22] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_OPERATION_MODE_Bits;

/** \brief MTL TxQ4 Quantum Weight */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_QUANTUM_WEIGHT_Bits
{
    __IO Ifx_UReg_32Bit ISCQW:21;          /**< \brief [20:0] Weights (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_21:11;    /**< \brief [31:21] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_QUANTUM_WEIGHT_Bits;

/** \brief MTL TxQ4 SendSlopeCredit */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_SENDSLOPECREDIT_Bits
{
    __IO Ifx_UReg_32Bit SSC:14;            /**< \brief [13:0] sendSlopeCredit Value (rw) */
    __I  Ifx_UReg_32Bit RESERVED_31_14:18;    /**< \brief [31:14] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_SENDSLOPECREDIT_Bits;

/** \brief MTL TxQ4 Underflow */
typedef struct _Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_UNDERFLOW_Bits
{
    __I  Ifx_UReg_32Bit UFFRMCNT:11;       /**< \brief [10:0] Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit UFCNTOVF:1;        /**< \brief [11:11] Overflow Bit for Underflow Packet Counter (r) */
    __I  Ifx_UReg_32Bit RESERVED_31_12:20;    /**< \brief [31:12] Reserved (r) */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_UNDERFLOW_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_LETH_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_LETH_PROT_Bits;

/** \brief Port Control Register 0 */
typedef struct _Ifx_LETH_P_PORTCTRL0_Bits
{
    __IO Ifx_UReg_32Bit RXD:3;             /**< \brief [2:0] Alternate Input Select - TC14 RX or MDC in TC14 configuration mode (rw) */
    __IO Ifx_UReg_32Bit RXDEN:1;           /**< \brief [3:3] RXD enable control. (rw) */
    __IO Ifx_UReg_32Bit CRS:2;             /**< \brief [5:4] Alternate Input Select - CRS (rw) */
    __IO Ifx_UReg_32Bit COL:2;             /**< \brief [7:6] Alternate Input Select - COL (rw) */
    __IO Ifx_UReg_32Bit RXDV:2;            /**< \brief [9:8] Alternate Input Select - RXDV (rw) */
    __IO Ifx_UReg_32Bit RXER:2;            /**< \brief [11:10] Alternate Input Select - RXER (rw) */
    __IO Ifx_UReg_32Bit TXCLK:2;           /**< \brief [13:12] Alternate Input Select - TXCLK (rw) */
    __IO Ifx_UReg_32Bit RXD0:2;            /**< \brief [15:14] Alternate Input Select - RXD0 (rw) */
    __IO Ifx_UReg_32Bit RXD1:2;            /**< \brief [17:16] Alternate Input Select - RXD1 (rw) */
    __IO Ifx_UReg_32Bit RXD2:2;            /**< \brief [19:18] Alternate Input Select - RXD2 (rw) */
    __IO Ifx_UReg_32Bit RXD3:2;            /**< \brief [21:20] Alternate Input Select - RXD3 (rw) */
    __IO Ifx_UReg_32Bit RXCLK:2;           /**< \brief [23:22] Alternate Input Select - RXCLK, REFCLK (rw) */
    __IO Ifx_UReg_32Bit REFCLK:2;          /**< \brief [25:24] Alternate Input Select - REFCLK (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __IO Ifx_UReg_32Bit TC14EN:1;          /**< \brief [28:28] TC14 V1.4 (NRZ) or V1.5 (RZ) encoding selection for RX path (rw) */
    __IO Ifx_UReg_32Bit EPR:3;             /**< \brief [31:29] External PHY register (rw) */
} Ifx_LETH_P_PORTCTRL0_Bits;

/** \brief Port Control Register 1 */
typedef struct _Ifx_LETH_P_PORTCTRL1_Bits
{
    __IO Ifx_UReg_32Bit MDIO:3;            /**< \brief [2:0] Alternate Input Select - MDIO or ED  in TC14 mode (rw) */
    __IO Ifx_UReg_32Bit MDIOEN:1;          /**< \brief [3:3] MDIO enable control. (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_LETH_P_PORTCTRL1_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_LETH_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for global module reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for global module reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for global module reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for global module reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_LETH_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_LETH_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel reset status clear - STATCLR (w) */
} Ifx_LETH_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_LETH_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_LETH_RST_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_leth_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_LETH_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_LETH_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ACCEN_RDB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_LETH_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_LETH_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_LETH_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ACCEN_WRB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_LETH_ACCEN_WRB_FPI;

/** \brief ETHBR CSR SW CTRL REG   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_ETHBR_CSR_SW_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_ETHBR_CSR_SW_CTRL_REG;

/** \brief ETHBR FWD CTRL REG   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_ETHBR_FWD_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_ETHBR_FWD_CTRL_REG;

/** \brief ETHBR INTR STATUS REG   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_ETHBR_INTR_STATUS_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_ETHBR_INTR_STATUS_REG;

/** \brief PORT CTRL REG   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_CTRL_MAP_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_CTRL_REG;

/** \brief PORT FWD PORT MAP   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_CTRL_MAP_FWD_PORT_MAP_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_FWD_PORT_MAP;

/** \brief PORT RXC MAP   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_CTRL_MAP_RXC_MAP_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_RXC_MAP;

/** \brief PORT TXQ MAP   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_CTRL_MAP_TXQ_MAP_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP_TXQ_MAP;

/** \brief PORT LPBK CTRL REG   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_LPBK_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_LPBK_CTRL_REG;

/** \brief PORT RXC FLUSH CTRL REG   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_RXC_FLUSH_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_RXC_FLUSH_CTRL_REG;

/** \brief PORT RX WRR WEIGHTS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_RX_WRR_WEIGHTS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_RX_WRR_WEIGHTS;

/** \brief PORT TX WRR WEIGHTS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_BRIDGE_PORT_TX_WRR_WEIGHTS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_BRIDGE_PORT_TX_WRR_WEIGHTS;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_LETH_CLC;

/** \brief DMA Channel Rx/Tx 0 Master TAG ID, VM and PRS allocation   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMACH_TAGVMPRS_Bits B;        /**< \brief Bitfield access */
} Ifx_LETH_DMACH_TAGVMPRS;

/** \brief AXI4 Rx AW ACE Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_AXI4_RX_AW_ACE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_AXI4_RX_AW_ACE_CONTROL;

/** \brief AXI4 TxRx AWAR ACE Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_AXI4_TXRX_AWAR_ACE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_AXI4_TXRX_AWAR_ACE_CONTROL;

/** \brief AXI4 Tx AR ACE Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_AXI4_TX_AR_ACE_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_AXI4_TX_AR_ACE_CONTROL;

/** \brief AXI LPI Entry Interval   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_AXI_LPI_ENTRY_INTERVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_AXI_LPI_ENTRY_INTERVAL;

/** \brief DMA CHy Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_CONTROL_Bits B;        /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_CONTROL;

/** \brief DMA CHy Current App RxBuffer   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_CURRENT_APP_RXBUFFER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_CURRENT_APP_RXBUFFER;

/** \brief DMA CHy Current App RxDesc   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_CURRENT_APP_RXDESC_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_CURRENT_APP_RXDESC;

/** \brief DMA CHy Current App TxBuffer   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_CURRENT_APP_TXBUFFER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_CURRENT_APP_TXBUFFER;

/** \brief DMA CHy Current App TxDesc   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_CURRENT_APP_TXDESC_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_CURRENT_APP_TXDESC;

/** \brief DMA CHy Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_INTERRUPT_ENABLE;

/** \brief DMA CHy Miss Frame Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_MISS_FRAME_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_MISS_FRAME_CNT;

/** \brief DMA CHyRxDesc List Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_RXDESC_LIST_ADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_RXDESC_LIST_ADDRESS;

/** \brief DMA CHy RxDesc Tail Pointer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_RXDESC_TAIL_POINTER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_RXDESC_TAIL_POINTER;

/** \brief DMA CHy RXP Accept Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_RXP_ACCEPT_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_RXP_ACCEPT_CNT;

/** \brief DMA CHy Rx Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_RX_CONTROL_Bits B;     /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_RX_CONTROL;

/** \brief DMA CHy Rx Control2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_RX_CONTROL2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_RX_CONTROL2;

/** \brief DMA CHy Rx Interrupt Watchdog Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER;

/** \brief DMA CHy Slot Function Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS;

/** \brief DMA CHy Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_STATUS_Bits B;         /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_STATUS;

/** \brief DMA CHyTxDesc List Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_TXDESC_LIST_ADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_TXDESC_LIST_ADDRESS;

/** \brief DMA CHy TxDesc Ring Length   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_TXDESC_RING_LENGTH_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_TXDESC_RING_LENGTH;

/** \brief DMA CHy TxDesc Tail Pointer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_TXDESC_TAIL_POINTER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_TXDESC_TAIL_POINTER;

/** \brief DMA CHy Tx Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_CH_TX_CONTROL_Bits B;     /**< \brief Bitfield access */
} Ifx_LETH_DMA_CH_TX_CONTROL;

/** \brief DMA Debug Status0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_DEBUG_STATUS0_Bits B;     /**< \brief Bitfield access */
} Ifx_LETH_DMA_DEBUG_STATUS0;

/** \brief DMA Debug Status1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_DEBUG_STATUS1_Bits B;     /**< \brief Bitfield access */
} Ifx_LETH_DMA_DEBUG_STATUS1;

/** \brief DMA Debug Status2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_DEBUG_STATUS2_Bits B;     /**< \brief Bitfield access */
} Ifx_LETH_DMA_DEBUG_STATUS2;

/** \brief DMA Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_DMA_INTERRUPT_STATUS;

/** \brief DMA Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_MODE_Bits B;              /**< \brief Bitfield access */
} Ifx_LETH_DMA_MODE;

/** \brief DMA SysBus Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_DMA_SYSBUS_MODE_Bits B;       /**< \brief Bitfield access */
} Ifx_LETH_DMA_SYSBUS_MODE;

/** \brief Error handling control enable   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ERR_CTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_LETH_ERR_CTRL;

/** \brief Error handling interrupt/alarm clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ERR_INTCLR_Bits B;            /**< \brief Bitfield access */
} Ifx_LETH_ERR_INTCLR;

/** \brief Error handling interrupt/alarm enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ERR_INTEN_Bits B;             /**< \brief Bitfield access */
} Ifx_LETH_ERR_INTEN;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_LETH_ID;

/** \brief Clock Control Register for Ports   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PEN_Bits B;                   /**< \brief Bitfield access */
} Ifx_LETH_PEN;

/** \brief B10T1S Debug Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_DEBUG_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_DEBUG_MODE;

/** \brief B10T1S PCS Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PCS_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_CTRL;

/** \brief B10T1S PCS Diag 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_1;

/** \brief B10T1S PCS Diag 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_2;

/** \brief B10T1S PCS Jab Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PCS_JAB_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_JAB_TIMER;

/** \brief B10T1S PCS Sts   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PCS_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PCS_STS;

/** \brief B10T1S PLCA Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PLCA_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_CTRL;

/** \brief B10T1S PLCA Node Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PLCA_NODE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_NODE_CTRL;

/** \brief B10T1S PLCA Sts   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PLCA_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_STS;

/** \brief B10T1S PLCA Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PLCA_TIMER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PLCA_TIMER;

/** \brief B10T1S PMA Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PMA_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_CTRL;

/** \brief B10T1S PMA Extnd Ability   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PMA_EXTND_ABILITY_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_EXTND_ABILITY;

/** \brief B10T1S PMA PMD Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PMA_PMD_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_PMD_CTRL;

/** \brief B10T1S PMA Sts   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PMA_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_STS;

/** \brief B10T1S PMA Tst Mode Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_B10T1S_PMA_TST_MODE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_B10T1S_PMA_TST_MODE_CTRL;

/** \brief MAC 10BT1S Ctrl Sts   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_10BT1S_CTRL_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_10BT1S_CTRL_STS;

/** \brief MAC Address0 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_ADDRESS0_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS0_HIGH;

/** \brief MAC Address0 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_ADDRESS0_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS0_LOW;

/** \brief MAC Address1 High   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_ADDRESS1_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS1_HIGH;

/** \brief MAC Address1 Low   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_ADDRESS1_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_ADDRESS1_LOW;

/** \brief MAC Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_CONFIGURATION_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_CONFIGURATION;

/** \brief MAC CSR SW Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_CSR_SW_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_CSR_SW_CTRL;

/** \brief MAC Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_DEBUG;

/** \brief MAC DPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG0;

/** \brief MAC DPCSel IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG1;

/** \brief MAC Ext Cfg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_EXT_CFG1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_EXT_CFG1;

/** \brief MAC Ext Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_EXT_CONFIGURATION_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_EXT_CONFIGURATION;

/** \brief MAC FPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_FPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_FPCSEL_INDREG0;

/** \brief MAC HW Feature0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_HW_FEATURE0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE0;

/** \brief MAC HW Feature1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_HW_FEATURE1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE1;

/** \brief MAC HW Feature2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_HW_FEATURE2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE2;

/** \brief MAC HW Feature3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_HW_FEATURE3_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE3;

/** \brief MAC HW Feature4   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_HW_FEATURE4_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_HW_FEATURE4;

/** \brief MAC Indir Access Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL;

/** \brief MAC Indir Access Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_DATA;

/** \brief MAC Inner VLAN Incl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_INNER_VLAN_INCL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_INNER_VLAN_INCL;

/** \brief MAC Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_INTERRUPT_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_INTERRUPT_ENABLE;

/** \brief MAC Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_INTERRUPT_STATUS;

/** \brief MAC MDIO Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_MDIO_ADDRESS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_MDIO_ADDRESS;

/** \brief MAC MDIO Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_MDIO_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_MDIO_DATA;

/** \brief MAC Packet Filter   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PACKET_FILTER_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PACKET_FILTER;

/** \brief MAC PCCtrl IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG0;

/** \brief MAC PCCtrl IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG1;

/** \brief MAC PCCtrl IndReg10   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG10_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG10;

/** \brief MAC PCCtrl IndReg11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG11_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG11;

/** \brief MAC PCCtrl IndReg12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG12_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG12;

/** \brief MAC PCCtrl IndReg13   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG13_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG13;

/** \brief MAC PCCtrl IndReg14   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG14_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG14;

/** \brief MAC PCCtrl IndReg15   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG15_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG15;

/** \brief MAC PCCtrl IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG2;

/** \brief MAC PCCtrl IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG3;

/** \brief MAC PCCtrl IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG4;

/** \brief MAC PCCtrl IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG5;

/** \brief MAC PCCtrl IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG6;

/** \brief MAC PCCtrl IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG7;

/** \brief MAC PCCtrl IndReg8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG8_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG8;

/** \brief MAC PCCtrl IndReg9   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG9_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG9;

/** \brief MAC PCntr IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG0;

/** \brief MAC PCntr IndReg1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG1;

/** \brief MAC PCntr IndReg10   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG10_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG10;

/** \brief MAC PCntr IndReg11   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG11_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG11;

/** \brief MAC PCntr IndReg12   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG12_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG12;

/** \brief MAC PCntr IndReg13   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG13_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG13;

/** \brief MAC PCntr IndReg14   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG14_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG14;

/** \brief MAC PCntr IndReg15   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG15_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG15;

/** \brief MAC PCntr IndReg2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG2;

/** \brief MAC PCntr IndReg3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG3_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG3;

/** \brief MAC PCntr IndReg4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG4_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG4;

/** \brief MAC PCntr IndReg5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG5_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG5;

/** \brief MAC PCntr IndReg6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG6_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG6;

/** \brief MAC PCntr IndReg7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG7_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG7;

/** \brief MAC PCntr IndReg8   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG8_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG8;

/** \brief MAC PCntr IndReg9   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG9_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG9;

/** \brief MAC PCStatus DA IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG0;

/** \brief MAC PCStatus Filter Event IndReg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG;

/** \brief MAC PCStatus VLAN IndReg   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG;

/** \brief MAC PCTH Intr Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_ENABLE;

/** \brief MAC PCTH Intr Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_STATUS;

/** \brief MAC PCTW Intr Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_ENABLE;

/** \brief MAC PCTW Intr Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_STATUS;

/** \brief MAC PPS0 Interval   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PPS0_INTERVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PPS0_INTERVAL;

/** \brief MAC PPS0 Target Time Nanoseconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS;

/** \brief MAC PPS0 Target Time Seconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS;

/** \brief MAC PPS0 Width   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PPS0_WIDTH_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PPS0_WIDTH;

/** \brief MAC PPS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PPS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PPS_CONTROL;

/** \brief MAC Presn Time ns   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_NS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_NS;

/** \brief MAC Presn Time Updt   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_UPDT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_UPDT;

/** \brief MAC Q0 Tx Flow Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL;

/** \brief MAC RxQ Ctrl0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL0;

/** \brief MAC RxQ Ctrl1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL1;

/** \brief MAC RxQ Ctrl2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL2;

/** \brief MAC RxQ Ctrl4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL4;

/** \brief MAC Rx Domain Time Incr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR;

/** \brief MAC Rx Flow Ctrl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RX_FLOW_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RX_FLOW_CTRL;

/** \brief MAC Rx Tx Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_RX_TX_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_RX_TX_STATUS;

/** \brief MAC Sub Second Increment   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT;

/** \brief MAC System Time Higher Word Seconds   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;

/** \brief MAC System Time Nanoseconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS;

/** \brief MAC System Time Nanoseconds Update   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;

/** \brief MAC System Time Seconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS;

/** \brief MAC System Time Seconds Update   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE;

/** \brief MAC Timestamp Addend   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_ADDEND_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_ADDEND;

/** \brief MAC Timestamp Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_CONTROL;

/** \brief MAC Timestamp Egress Asym Corr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR;

/** \brief MAC Timestamp Egress Corr Nanosecond   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;

/** \brief MAC Timestamp Egress Corr Subnanosec   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC;

/** \brief MAC Timestamp Egress Latency   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_LATENCY_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_LATENCY;

/** \brief MAC Timestamp Ingress Asym Corr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR;

/** \brief MAC Timestamp Ingress Corr Nanosecond   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;

/** \brief MAC Timestamp Ingress Corr Subnanosec   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC;

/** \brief MAC Timestamp Ingress Latency   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_LATENCY_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_LATENCY;

/** \brief MAC Timestamp Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_STATUS;

/** \brief MAC TMRQ Regs0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS0;

/** \brief MAC TMRQ Regs1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS1;

/** \brief MAC TMRQ Regs2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS2;

/** \brief MAC TMRQ Regs3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS3_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS3;

/** \brief MAC TMRQ Regs4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS4_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS4;

/** \brief MAC TMRQ Regs5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS5_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS5;

/** \brief MAC TMRQ Regs6   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS6_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS6;

/** \brief MAC TMRQ Regs7   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS7_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS7;

/** \brief MAC Tx Domain Time Incr   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR;

/** \brief MAC Tx Timestamp Status Nanoseconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;

/** \brief MAC Tx Timestamp Status Seconds   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS;

/** \brief MAC Version   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VERSION_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VERSION;

/** \brief MAC VLAN Incl   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_INCL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL;

/** \brief MAC VLAN Incl0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_INCL0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL0;

/** \brief MAC VLAN Incl1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_INCL1_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL1;

/** \brief MAC VLAN Incl2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_INCL2_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL2;

/** \brief MAC VLAN Incl3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_INCL3_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL3;

/** \brief MAC VLAN Incl4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_INCL4_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_INCL4;

/** \brief MAC VLAN Tag   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VLAN_TAG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VLAN_TAG;

/** \brief MAC VPCSel IndReg0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_VPCSEL_INDREG0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_VPCSEL_INDREG0;

/** \brief MAC WD JB Timeout   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MAC_WD_JB_TIMEOUT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MAC_WD_JB_TIMEOUT;

/** \brief MMC Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_CONTROL;

/** \brief MMC IPC Rx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT;

/** \brief MMC IPC Rx Interrupt Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK;

/** \brief MMC Rx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT;

/** \brief MMC Rx Interrupt Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_MASK;

/** \brief MMC Tx Interrupt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT;

/** \brief MMC Tx Interrupt Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_MASK;

/** \brief RxICMP Error Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXICMP_ERROR_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXICMP_ERROR_OCTETS;

/** \brief RxICMP Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXICMP_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXICMP_ERROR_PACKETS;

/** \brief RxICMP Good Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXICMP_GOOD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXICMP_GOOD_OCTETS;

/** \brief RxICMP Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXICMP_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXICMP_GOOD_PACKETS;

/** \brief RxIPv4 Fragmented Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS;

/** \brief RxIPv4 Fragmented Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS;

/** \brief RxIPv4 Good Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_GOOD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_GOOD_OCTETS;

/** \brief RxIPv4 Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_GOOD_PACKETS;

/** \brief RxIPv4 Header Error Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS;

/** \brief RxIPv4 Header Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS;

/** \brief RxIPv4 No Payload Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS;

/** \brief RxIPv4 No Payload Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS;

/** \brief RxIPv4 UDP Checksum Disabled Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS;

/** \brief RxIPv4 UDP Checksum Disable Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS;

/** \brief RxIPv6 Good Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV6_GOOD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV6_GOOD_OCTETS;

/** \brief RxIPv6 Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV6_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV6_GOOD_PACKETS;

/** \brief RxIPv6 Header Error Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS;

/** \brief RxIPv6 Header Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS;

/** \brief RxIPv6 No Payload Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS;

/** \brief RxIPv6 No Payload Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS;

/** \brief RxTCP Error Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXTCP_ERROR_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXTCP_ERROR_OCTETS;

/** \brief RxTCP Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXTCP_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXTCP_ERROR_PACKETS;

/** \brief RxTCP Good Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXTCP_GOOD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXTCP_GOOD_OCTETS;

/** \brief RxTCP Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXTCP_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXTCP_GOOD_PACKETS;

/** \brief RxUDP Error Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXUDP_ERROR_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXUDP_ERROR_OCTETS;

/** \brief RxUDP Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXUDP_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXUDP_ERROR_PACKETS;

/** \brief RxUDP Good Octets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXUDP_GOOD_OCTETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXUDP_GOOD_OCTETS;

/** \brief RxUDP Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RXUDP_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RXUDP_GOOD_PACKETS;

/** \brief Rx 1024ToMaxOctets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;

/** \brief Rx 128To255Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD;

/** \brief Rx 256To511Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD;

/** \brief Rx 512To1023Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD;

/** \brief Rx 64Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD;

/** \brief Rx 65To127Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD;

/** \brief Rx Alignment Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS;

/** \brief Rx Broadcast Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD;

/** \brief Rx Control Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_CONTROL_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_CONTROL_PACKETS_GOOD;

/** \brief Rx CRC Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_CRC_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_CRC_ERROR_PACKETS;

/** \brief Rx FIFO Overflow Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_FIFO_OVERFLOW_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_FIFO_OVERFLOW_PACKETS;

/** \brief Rx Jabber Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_JABBER_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_JABBER_ERROR_PACKETS;

/** \brief Rx Length Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS;

/** \brief Rx Multicast Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD;

/** \brief Rx Octet Count Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD;

/** \brief Rx Octet Count Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD;

/** \brief Rx Out Of Range Type Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_OUT_OF_RANGE_TYPE_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_OUT_OF_RANGE_TYPE_PACKETS;

/** \brief Rx Oversize Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD;

/** \brief Rx Packets Count Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_PACKETS_COUNT_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_PACKETS_COUNT_GOOD_BAD;

/** \brief Rx Pause Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_PAUSE_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_PAUSE_PACKETS;

/** \brief Rx Receive Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_RECEIVE_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_RECEIVE_ERROR_PACKETS;

/** \brief Rx Runt Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_RUNT_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_RUNT_ERROR_PACKETS;

/** \brief Rx Undersize Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD;

/** \brief Rx Unicast Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD;

/** \brief Rx VLAN Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD;

/** \brief Rx Watchdog Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS;

/** \brief Tx 1024ToMaxOctets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;

/** \brief Tx 128To255Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD;

/** \brief Tx 256To511Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD;

/** \brief Tx 512To1023Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD;

/** \brief Tx 64Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD;

/** \brief Tx 65To127Octets Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD;

/** \brief Tx Broadcast Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD;

/** \brief Tx Broadcast Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD;

/** \brief Tx Carrier Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS;

/** \brief Tx Deferred Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_DEFERRED_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_DEFERRED_PACKETS;

/** \brief Tx Excessive Collision Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS;

/** \brief Tx Excessive Deferral Error   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR;

/** \brief Tx Late Collision Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_LATE_COLLISION_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_LATE_COLLISION_PACKETS;

/** \brief Tx Multicast Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD;

/** \brief Tx Multicast Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD;

/** \brief Tx Multiple Collision Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS;

/** \brief Tx Octet Count Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD;

/** \brief Tx Octet Count Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD;

/** \brief Tx OSize Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_OSIZE_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_OSIZE_PACKETS_GOOD;

/** \brief Tx Packet Count Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD;

/** \brief Tx Packet Count Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD;

/** \brief Tx Pause Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_PAUSE_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_PAUSE_PACKETS;

/** \brief Tx Single Collision Good Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS;

/** \brief Tx Underflow Error Packets   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS;

/** \brief Tx Unicast Packets Good Bad   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD;

/** \brief Tx VLAN Packets Good   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_CORE_TX_VLAN_PACKETS_GOOD_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_CORE_TX_VLAN_PACKETS_GOOD;

/** \brief MTL DBG CTL   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_DBG_CTL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_DBG_CTL;

/** \brief MTL DBG STS   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_DBG_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_DBG_STS;

/** \brief MTL EST Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_CONTROL;

/** \brief MTL EST Ext Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_EXT_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_EXT_CONTROL;

/** \brief MTL EST Frm Size Capture   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_CAPTURE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_CAPTURE;

/** \brief MTL EST Frm Size Error   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_ERROR;

/** \brief MTL EST GCL Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_GCL_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_GCL_CONTROL;

/** \brief MTL EST GCL Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_GCL_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_GCL_DATA;

/** \brief MTL EST Intr Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_INTR_ENABLE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_INTR_ENABLE;

/** \brief MTL EST Sch Error   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_SCH_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_SCH_ERROR;

/** \brief MTL EST Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_EST_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_EST_STATUS;

/** \brief MTL FIFO Debug Data   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_FIFO_DEBUG_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_FIFO_DEBUG_DATA;

/** \brief MTL Interrupt Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_INTERRUPT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_INTERRUPT_STATUS;

/** \brief MTL Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_OPERATION_MODE;

/** \brief MTL RXP Bypass Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_BYPASS_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_BYPASS_CNT;

/** \brief MTL RXP Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_CONTROL_STATUS;

/** \brief MTL RXP Drop Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_DROP_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_DROP_CNT;

/** \brief MTL RXP Error Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_ERROR_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_ERROR_CNT;

/** \brief MTL RXP Indirect Acc Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS;

/** \brief MTL RXP Indirect Acc Data   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_DATA_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_DATA;

/** \brief MTL RXP Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXP_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXP_INTERRUPT_CONTROL_STATUS;

/** \brief MTL RxQ DMA Map0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_MTL_RXQ_DMA_MAP0_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_MTL_RXQ_DMA_MAP0;

/** \brief MTL Q0 Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_Q0_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_Q0_INTERRUPT_CONTROL_STATUS;

/** \brief MTL RxQ0 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_CONTROL;

/** \brief MTL RxQ0 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_DEBUG;

/** \brief MTL RxQ0 Missed Packet Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT;

/** \brief MTL RxQ0 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_OPERATION_MODE;

/** \brief MTL TxQ0 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_DEBUG;

/** \brief MTL TxQ0 ETS Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_ETS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_ETS_STATUS;

/** \brief MTL TxQ0 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_OPERATION_MODE;

/** \brief MTL Tx Queue 0 Quantum Weight Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_QUANTUM_WEIGHT;

/** \brief MTL TxQ0 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_UNDERFLOW;

/** \brief MTL Q1 Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_Q1_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_Q1_INTERRUPT_CONTROL_STATUS;

/** \brief MTL RxQ1 Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_CONTROL;

/** \brief MTL RxQ1 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_DEBUG;

/** \brief MTL RxQ1 Missed Packet Overflow Cnt   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT;

/** \brief MTL RxQ1 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_OPERATION_MODE;

/** \brief MTL TxQ1 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_DEBUG;

/** \brief MTL TxQ1 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_CONTROL;

/** \brief MTL TxQ1 ETS Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_STATUS;

/** \brief MTL TxQ1 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_HICREDIT;

/** \brief MTL TxQ1 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_LOCREDIT;

/** \brief MTL TxQ1 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_OPERATION_MODE;

/** \brief MTL TxQ1 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_QUANTUM_WEIGHT;

/** \brief MTL TxQ1 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_SENDSLOPECREDIT;

/** \brief MTL TxQ1 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_UNDERFLOW;

/** \brief MTL Q2 Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_Q2_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_Q2_INTERRUPT_CONTROL_STATUS;

/** \brief MTL TxQ2 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_DEBUG;

/** \brief MTL TxQ2 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_CONTROL;

/** \brief MTL TxQ2 ETS Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_STATUS;

/** \brief MTL TxQ2 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_HICREDIT;

/** \brief MTL TxQ2 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_LOCREDIT;

/** \brief MTL TxQ2 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_OPERATION_MODE;

/** \brief MTL TxQ2 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_QUANTUM_WEIGHT;

/** \brief MTL TxQ2 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_SENDSLOPECREDIT;

/** \brief MTL TxQ2 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_UNDERFLOW;

/** \brief MTL Q3 Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_Q3_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_Q3_INTERRUPT_CONTROL_STATUS;

/** \brief MTL TxQ3 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_DEBUG;

/** \brief MTL TxQ3 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_CONTROL;

/** \brief MTL TxQ3 ETS Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_STATUS;

/** \brief MTL TxQ3 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_HICREDIT;

/** \brief MTL TxQ3 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_LOCREDIT;

/** \brief MTL TxQ3 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_OPERATION_MODE;

/** \brief MTL TxQ3 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_QUANTUM_WEIGHT;

/** \brief MTL TxQ3 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_SENDSLOPECREDIT;

/** \brief MTL TxQ3 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_UNDERFLOW;

/** \brief MTL Q4 Interrupt Control Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_Q4_INTERRUPT_CONTROL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_Q4_INTERRUPT_CONTROL_STATUS;

/** \brief MTL TxQ4 Debug   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_DEBUG;

/** \brief MTL TxQ4 ETS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_CONTROL_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_CONTROL;

/** \brief MTL TxQ4 ETS Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_STATUS;

/** \brief MTL TxQ4 HiCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_HICREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_HICREDIT;

/** \brief MTL TxQ4 LoCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_LOCREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_LOCREDIT;

/** \brief MTL TxQ4 Operation Mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_OPERATION_MODE_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_OPERATION_MODE;

/** \brief MTL TxQ4 Quantum Weight   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_QUANTUM_WEIGHT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_QUANTUM_WEIGHT;

/** \brief MTL TxQ4 SendSlopeCredit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_SENDSLOPECREDIT_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_SENDSLOPECREDIT;

/** \brief MTL TxQ4 Underflow   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_UNDERFLOW_Bits B;    /**< \brief Bitfield access */
} Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_UNDERFLOW;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_LETH_PROT;

/** \brief Port Control Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_P_PORTCTRL0_Bits B;           /**< \brief Bitfield access */
} Ifx_LETH_P_PORTCTRL0;

/** \brief Port Control Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_P_PORTCTRL1_Bits B;           /**< \brief Bitfield access */
} Ifx_LETH_P_PORTCTRL1;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_LETH_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_LETH_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LETH_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_LETH_RST_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_LETH_RST
{
       __IO Ifx_LETH_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_LETH_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_LETH_RST_STAT                   STAT;                   /**< \brief 8, Reset status register*/
} Ifx_LETH_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_ACCENGLOBAL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENGLOBAL object */
typedef volatile struct _Ifx_LETH_ACCENGLOBAL
{
       __IO Ifx_LETH_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_LETH_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_LETH_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_LETH_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_LETH_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_LETH_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_LETH_ACCENGLOBAL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_ACCENMAC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENMAC object */
typedef volatile struct _Ifx_LETH_ACCENMAC
{
       __IO Ifx_LETH_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_LETH_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_LETH_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_LETH_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_LETH_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_LETH_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_LETH_ACCENMAC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_ACCENCH_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENCH object */
typedef volatile struct _Ifx_LETH_ACCENCH
{
       __IO Ifx_LETH_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_LETH_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_LETH_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_LETH_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_LETH_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_LETH_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_LETH_ACCENCH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_DMACH_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DMACH object */
typedef volatile struct _Ifx_LETH_DMACH
{
       __IO Ifx_LETH_DMACH_TAGVMPRS             TAGVMPRS;               /**< \brief 0, DMA Channel Rx/Tx 0 Master TAG ID, VM and PRS allocation*/
} Ifx_LETH_DMACH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_P_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief P object */
typedef volatile struct _Ifx_LETH_P
{
       __IO Ifx_LETH_P_PORTCTRL0                PORTCTRL0;              /**< \brief 0, Port Control Register 0*/
       __IO Ifx_LETH_P_PORTCTRL1                PORTCTRL1;              /**< \brief 4, Port Control Register 1*/
} Ifx_LETH_P;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_ERR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ERR object */
typedef volatile struct _Ifx_LETH_ERR
{
       __I  Ifx_LETH_ERR_CTRL                   CTRL;                   /**< \brief 0, Error handling control enable*/
       __O  Ifx_LETH_ERR_INTCLR                 INTCLR;                 /**< \brief 4, Error handling interrupt/alarm clear*/
       __IO Ifx_LETH_ERR_INTEN                  INTEN;                  /**< \brief 8, Error handling interrupt/alarm enable*/
} Ifx_LETH_ERR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_CORE_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CORE object */
typedef volatile struct _Ifx_LETH_PORT_CORE
{
       __IO Ifx_LETH_PORT_CORE_MAC_CONFIGURATION MAC_CONFIGURATION;      /**< \brief 0, MAC Configuration*/
       __IO Ifx_LETH_PORT_CORE_MAC_EXT_CONFIGURATION MAC_EXT_CONFIGURATION;    /**< \brief 4, MAC Ext Configuration*/
       __IO Ifx_LETH_PORT_CORE_MAC_PACKET_FILTER MAC_PACKET_FILTER;      /**< \brief 8, MAC Packet Filter*/
       __IO Ifx_LETH_PORT_CORE_MAC_WD_JB_TIMEOUT MAC_WD_JB_TIMEOUT;      /**< \brief C, MAC WD JB Timeout*/
       __I  Ifx_UReg_8Bit                       reserved_10[64];        /**< \brief 10, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_VLAN_TAG     MAC_VLAN_TAG;           /**< \brief 50, MAC VLAN Tag*/
       __I  Ifx_UReg_8Bit                       reserved_54[12];        /**< \brief 54, \internal Reserved */
       union
       {
            __IO Ifx_LETH_PORT_CORE_MAC_VLAN_INCL    MAC_VLAN_INCL;          /**< \brief 60, */
            __IO Ifx_LETH_PORT_CORE_MAC_VLAN_INCL0   MAC_VLAN_INCL0;         /**< \brief 60, */
            __IO Ifx_LETH_PORT_CORE_MAC_VLAN_INCL1   MAC_VLAN_INCL1;         /**< \brief 60, */
            __IO Ifx_LETH_PORT_CORE_MAC_VLAN_INCL2   MAC_VLAN_INCL2;         /**< \brief 60, */
            __IO Ifx_LETH_PORT_CORE_MAC_VLAN_INCL3   MAC_VLAN_INCL3;         /**< \brief 60, */
            __IO Ifx_LETH_PORT_CORE_MAC_VLAN_INCL4   MAC_VLAN_INCL4;         /**< \brief 60, */
       };
       __IO Ifx_LETH_PORT_CORE_MAC_INNER_VLAN_INCL MAC_INNER_VLAN_INCL;    /**< \brief 64, MAC Inner VLAN Incl*/
       __I  Ifx_UReg_8Bit                       reserved_68[8];         /**< \brief 68, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_Q0_TX_FLOW_CTRL MAC_Q0_TX_FLOW_CTRL;    /**< \brief 70, MAC Q0 Tx Flow Ctrl*/
       __I  Ifx_UReg_8Bit                       reserved_74[28];        /**< \brief 74, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_RX_FLOW_CTRL MAC_RX_FLOW_CTRL;       /**< \brief 90, MAC Rx Flow Ctrl*/
       __IO Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL4    MAC_RXQ_CTRL4;          /**< \brief 94, MAC RxQ Ctrl4*/
       __I  Ifx_UReg_8Bit                       reserved_98[8];         /**< \brief 98, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL0    MAC_RXQ_CTRL0;          /**< \brief A0, MAC RxQ Ctrl0*/
       __IO Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL1    MAC_RXQ_CTRL1;          /**< \brief A4, MAC RxQ Ctrl1*/
       __IO Ifx_LETH_PORT_CORE_MAC_RXQ_CTRL2    MAC_RXQ_CTRL2;          /**< \brief A8, MAC RxQ Ctrl2*/
       __I  Ifx_UReg_8Bit                       reserved_AC[4];         /**< \brief AC, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_MAC_INTERRUPT_STATUS MAC_INTERRUPT_STATUS;    /**< \brief B0, MAC Interrupt Status*/
       __IO Ifx_LETH_PORT_CORE_MAC_INTERRUPT_ENABLE MAC_INTERRUPT_ENABLE;    /**< \brief B4, MAC Interrupt Enable*/
       __I  Ifx_LETH_PORT_CORE_MAC_RX_TX_STATUS MAC_RX_TX_STATUS;       /**< \brief B8, MAC Rx Tx Status*/
       __I  Ifx_UReg_8Bit                       reserved_BC[84];        /**< \brief BC, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_MAC_VERSION      MAC_VERSION;            /**< \brief 110, MAC Version*/
       __I  Ifx_LETH_PORT_CORE_MAC_DEBUG        MAC_DEBUG;              /**< \brief 114, MAC Debug*/
       __I  Ifx_UReg_8Bit                       reserved_118[4];        /**< \brief 118, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_MAC_HW_FEATURE0  MAC_HW_FEATURE0;        /**< \brief 11C, MAC HW Feature0*/
       __I  Ifx_LETH_PORT_CORE_MAC_HW_FEATURE1  MAC_HW_FEATURE1;        /**< \brief 120, MAC HW Feature1*/
       __I  Ifx_LETH_PORT_CORE_MAC_HW_FEATURE2  MAC_HW_FEATURE2;        /**< \brief 124, MAC HW Feature2*/
       __I  Ifx_LETH_PORT_CORE_MAC_HW_FEATURE3  MAC_HW_FEATURE3;        /**< \brief 128, MAC HW Feature3*/
       __I  Ifx_LETH_PORT_CORE_MAC_HW_FEATURE4  MAC_HW_FEATURE4;        /**< \brief 12C, MAC HW Feature4*/
       __I  Ifx_UReg_8Bit                       reserved_130[208];      /**< \brief 130, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_MDIO_ADDRESS MAC_MDIO_ADDRESS;       /**< \brief 200, MAC MDIO Address*/
       union
       {
            __IO Ifx_LETH_PORT_CORE_MAC_MDIO_DATA    MAC_MDIO_DATA;          /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_DEBUG_MODE B10T1S_DEBUG_MODE;      /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PCS_CTRL  B10T1S_PCS_CTRL;        /**< \brief 204, */
            __I  Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_1 B10T1S_PCS_DIAG_1;      /**< \brief 204, */
            __I  Ifx_LETH_PORT_CORE_B10T1S_PCS_DIAG_2 B10T1S_PCS_DIAG_2;      /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PCS_JAB_TIMER B10T1S_PCS_JAB_TIMER;    /**< \brief 204, */
            __I  Ifx_LETH_PORT_CORE_B10T1S_PCS_STS   B10T1S_PCS_STS;         /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PLCA_CTRL B10T1S_PLCA_CTRL;       /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PLCA_NODE_CTRL B10T1S_PLCA_NODE_CTRL;    /**< \brief 204, */
            __I  Ifx_LETH_PORT_CORE_B10T1S_PLCA_STS  B10T1S_PLCA_STS;        /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PLCA_TIMER B10T1S_PLCA_TIMER;      /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PMA_CTRL  B10T1S_PMA_CTRL;        /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PMA_EXTND_ABILITY B10T1S_PMA_EXTND_ABILITY;    /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PMA_PMD_CTRL B10T1S_PMA_PMD_CTRL;    /**< \brief 204, */
            __I  Ifx_LETH_PORT_CORE_B10T1S_PMA_STS   B10T1S_PMA_STS;         /**< \brief 204, */
            __IO Ifx_LETH_PORT_CORE_B10T1S_PMA_TST_MODE_CTRL B10T1S_PMA_TST_MODE_CTRL;    /**< \brief 204, */
       };
       __I  Ifx_UReg_8Bit                       reserved_208[24];       /**< \brief 208, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_10BT1S_CTRL_STS MAC_10BT1S_CTRL_STS;    /**< \brief 220, MAC 10BT1S Ctrl Sts*/
       __I  Ifx_UReg_8Bit                       reserved_224[12];       /**< \brief 224, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_CSR_SW_CTRL  MAC_CSR_SW_CTRL;        /**< \brief 230, MAC CSR SW Ctrl*/
       __I  Ifx_UReg_8Bit                       reserved_234[4];        /**< \brief 234, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_EXT_CFG1     MAC_EXT_CFG1;           /**< \brief 238, MAC Ext Cfg1*/
       __I  Ifx_UReg_8Bit                       reserved_23C[4];        /**< \brief 23C, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_NS MAC_PRESN_TIME_NS;      /**< \brief 240, MAC Presn Time ns*/
       __IO Ifx_LETH_PORT_CORE_MAC_PRESN_TIME_UPDT MAC_PRESN_TIME_UPDT;    /**< \brief 244, MAC Presn Time Updt*/
       __I  Ifx_UReg_8Bit                       reserved_248[184];      /**< \brief 248, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_ADDRESS0_HIGH MAC_ADDRESS0_HIGH;      /**< \brief 300, MAC Address0 High*/
       __IO Ifx_LETH_PORT_CORE_MAC_ADDRESS0_LOW MAC_ADDRESS0_LOW;       /**< \brief 304, MAC Address0 Low*/
       __IO Ifx_LETH_PORT_CORE_MAC_ADDRESS1_HIGH MAC_ADDRESS1_HIGH;      /**< \brief 308, MAC Address1 High*/
       __IO Ifx_LETH_PORT_CORE_MAC_ADDRESS1_LOW MAC_ADDRESS1_LOW;       /**< \brief 30C, MAC Address1 Low*/
       __I  Ifx_UReg_8Bit                       reserved_310[1008];     /**< \brief 310, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MMC_CONTROL      MMC_CONTROL;            /**< \brief 700, MMC Control*/
       __I  Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT MMC_RX_INTERRUPT;       /**< \brief 704, MMC Rx Interrupt*/
       __I  Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT MMC_TX_INTERRUPT;       /**< \brief 708, MMC Tx Interrupt*/
       __IO Ifx_LETH_PORT_CORE_MMC_RX_INTERRUPT_MASK MMC_RX_INTERRUPT_MASK;    /**< \brief 70C, MMC Rx Interrupt Mask*/
       __IO Ifx_LETH_PORT_CORE_MMC_TX_INTERRUPT_MASK MMC_TX_INTERRUPT_MASK;    /**< \brief 710, MMC Tx Interrupt Mask*/
       __I  Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD_BAD TX_OCTET_COUNT_GOOD_BAD;    /**< \brief 714, Tx Octet Count Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD_BAD TX_PACKET_COUNT_GOOD_BAD;    /**< \brief 718, Tx Packet Count Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD TX_BROADCAST_PACKETS_GOOD;    /**< \brief 71C, Tx Broadcast Packets Good*/
       __I  Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD TX_MULTICAST_PACKETS_GOOD;    /**< \brief 720, Tx Multicast Packets Good*/
       __I  Ifx_LETH_PORT_CORE_TX_64OCTETS_PACKETS_GOOD_BAD TX_64OCTETS_PACKETS_GOOD_BAD;    /**< \brief 724, Tx 64Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_65TO127OCTETS_PACKETS_GOOD_BAD TX_65TO127OCTETS_PACKETS_GOOD_BAD;    /**< \brief 728, Tx 65To127Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_128TO255OCTETS_PACKETS_GOOD_BAD TX_128TO255OCTETS_PACKETS_GOOD_BAD;    /**< \brief 72C, Tx 128To255Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_256TO511OCTETS_PACKETS_GOOD_BAD TX_256TO511OCTETS_PACKETS_GOOD_BAD;    /**< \brief 730, Tx 256To511Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_512TO1023OCTETS_PACKETS_GOOD_BAD TX_512TO1023OCTETS_PACKETS_GOOD_BAD;    /**< \brief 734, Tx 512To1023Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD TX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;    /**< \brief 738, Tx 1024ToMaxOctets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_UNICAST_PACKETS_GOOD_BAD TX_UNICAST_PACKETS_GOOD_BAD;    /**< \brief 73C, Tx Unicast Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_MULTICAST_PACKETS_GOOD_BAD TX_MULTICAST_PACKETS_GOOD_BAD;    /**< \brief 740, Tx Multicast Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_BROADCAST_PACKETS_GOOD_BAD TX_BROADCAST_PACKETS_GOOD_BAD;    /**< \brief 744, Tx Broadcast Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_TX_UNDERFLOW_ERROR_PACKETS TX_UNDERFLOW_ERROR_PACKETS;    /**< \brief 748, Tx Underflow Error Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_SINGLE_COLLISION_GOOD_PACKETS TX_SINGLE_COLLISION_GOOD_PACKETS;    /**< \brief 74C, Tx Single Collision Good Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_MULTIPLE_COLLISION_GOOD_PACKETS TX_MULTIPLE_COLLISION_GOOD_PACKETS;    /**< \brief 750, Tx Multiple Collision Good Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_DEFERRED_PACKETS TX_DEFERRED_PACKETS;    /**< \brief 754, Tx Deferred Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_LATE_COLLISION_PACKETS TX_LATE_COLLISION_PACKETS;    /**< \brief 758, Tx Late Collision Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_EXCESSIVE_COLLISION_PACKETS TX_EXCESSIVE_COLLISION_PACKETS;    /**< \brief 75C, Tx Excessive Collision Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_CARRIER_ERROR_PACKETS TX_CARRIER_ERROR_PACKETS;    /**< \brief 760, Tx Carrier Error Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_OCTET_COUNT_GOOD TX_OCTET_COUNT_GOOD;    /**< \brief 764, Tx Octet Count Good*/
       __I  Ifx_LETH_PORT_CORE_TX_PACKET_COUNT_GOOD TX_PACKET_COUNT_GOOD;    /**< \brief 768, Tx Packet Count Good*/
       __I  Ifx_LETH_PORT_CORE_TX_EXCESSIVE_DEFERRAL_ERROR TX_EXCESSIVE_DEFERRAL_ERROR;    /**< \brief 76C, Tx Excessive Deferral Error*/
       __I  Ifx_LETH_PORT_CORE_TX_PAUSE_PACKETS TX_PAUSE_PACKETS;       /**< \brief 770, Tx Pause Packets*/
       __I  Ifx_LETH_PORT_CORE_TX_VLAN_PACKETS_GOOD TX_VLAN_PACKETS_GOOD;    /**< \brief 774, Tx VLAN Packets Good*/
       __I  Ifx_LETH_PORT_CORE_TX_OSIZE_PACKETS_GOOD TX_OSIZE_PACKETS_GOOD;    /**< \brief 778, Tx OSize Packets Good*/
       __I  Ifx_UReg_8Bit                       reserved_77C[4];        /**< \brief 77C, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_RX_PACKETS_COUNT_GOOD_BAD RX_PACKETS_COUNT_GOOD_BAD;    /**< \brief 780, Rx Packets Count Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD_BAD RX_OCTET_COUNT_GOOD_BAD;    /**< \brief 784, Rx Octet Count Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_OCTET_COUNT_GOOD RX_OCTET_COUNT_GOOD;    /**< \brief 788, Rx Octet Count Good*/
       __I  Ifx_LETH_PORT_CORE_RX_BROADCAST_PACKETS_GOOD RX_BROADCAST_PACKETS_GOOD;    /**< \brief 78C, Rx Broadcast Packets Good*/
       __I  Ifx_LETH_PORT_CORE_RX_MULTICAST_PACKETS_GOOD RX_MULTICAST_PACKETS_GOOD;    /**< \brief 790, Rx Multicast Packets Good*/
       __I  Ifx_LETH_PORT_CORE_RX_CRC_ERROR_PACKETS RX_CRC_ERROR_PACKETS;    /**< \brief 794, Rx CRC Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_ALIGNMENT_ERROR_PACKETS RX_ALIGNMENT_ERROR_PACKETS;    /**< \brief 798, Rx Alignment Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_RUNT_ERROR_PACKETS RX_RUNT_ERROR_PACKETS;    /**< \brief 79C, Rx Runt Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_JABBER_ERROR_PACKETS RX_JABBER_ERROR_PACKETS;    /**< \brief 7A0, Rx Jabber Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_UNDERSIZE_PACKETS_GOOD RX_UNDERSIZE_PACKETS_GOOD;    /**< \brief 7A4, Rx Undersize Packets Good*/
       __I  Ifx_LETH_PORT_CORE_RX_OVERSIZE_PACKETS_GOOD RX_OVERSIZE_PACKETS_GOOD;    /**< \brief 7A8, Rx Oversize Packets Good*/
       __I  Ifx_LETH_PORT_CORE_RX_64OCTETS_PACKETS_GOOD_BAD RX_64OCTETS_PACKETS_GOOD_BAD;    /**< \brief 7AC, Rx 64Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_65TO127OCTETS_PACKETS_GOOD_BAD RX_65TO127OCTETS_PACKETS_GOOD_BAD;    /**< \brief 7B0, Rx 65To127Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_128TO255OCTETS_PACKETS_GOOD_BAD RX_128TO255OCTETS_PACKETS_GOOD_BAD;    /**< \brief 7B4, Rx 128To255Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_256TO511OCTETS_PACKETS_GOOD_BAD RX_256TO511OCTETS_PACKETS_GOOD_BAD;    /**< \brief 7B8, Rx 256To511Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_512TO1023OCTETS_PACKETS_GOOD_BAD RX_512TO1023OCTETS_PACKETS_GOOD_BAD;    /**< \brief 7BC, Rx 512To1023Octets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD RX_1024TOMAXOCTETS_PACKETS_GOOD_BAD;    /**< \brief 7C0, Rx 1024ToMaxOctets Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_UNICAST_PACKETS_GOOD RX_UNICAST_PACKETS_GOOD;    /**< \brief 7C4, Rx Unicast Packets Good*/
       __I  Ifx_LETH_PORT_CORE_RX_LENGTH_ERROR_PACKETS RX_LENGTH_ERROR_PACKETS;    /**< \brief 7C8, Rx Length Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_OUT_OF_RANGE_TYPE_PACKETS RX_OUT_OF_RANGE_TYPE_PACKETS;    /**< \brief 7CC, Rx Out Of Range Type Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_PAUSE_PACKETS RX_PAUSE_PACKETS;       /**< \brief 7D0, Rx Pause Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_FIFO_OVERFLOW_PACKETS RX_FIFO_OVERFLOW_PACKETS;    /**< \brief 7D4, Rx FIFO Overflow Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_VLAN_PACKETS_GOOD_BAD RX_VLAN_PACKETS_GOOD_BAD;    /**< \brief 7D8, Rx VLAN Packets Good Bad*/
       __I  Ifx_LETH_PORT_CORE_RX_WATCHDOG_ERROR_PACKETS RX_WATCHDOG_ERROR_PACKETS;    /**< \brief 7DC, Rx Watchdog Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_RECEIVE_ERROR_PACKETS RX_RECEIVE_ERROR_PACKETS;    /**< \brief 7E0, Rx Receive Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RX_CONTROL_PACKETS_GOOD RX_CONTROL_PACKETS_GOOD;    /**< \brief 7E4, Rx Control Packets Good*/
       __I  Ifx_UReg_8Bit                       reserved_7E8[24];       /**< \brief 7E8, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT_MASK MMC_IPC_RX_INTERRUPT_MASK;    /**< \brief 800, MMC IPC Rx Interrupt Mask*/
       __I  Ifx_UReg_8Bit                       reserved_804[4];        /**< \brief 804, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_MMC_IPC_RX_INTERRUPT MMC_IPC_RX_INTERRUPT;    /**< \brief 808, MMC IPC Rx Interrupt*/
       __I  Ifx_UReg_8Bit                       reserved_80C[4];        /**< \brief 80C, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_RXIPV4_GOOD_PACKETS RXIPV4_GOOD_PACKETS;    /**< \brief 810, RxIPv4 Good Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_PACKETS RXIPV4_HEADER_ERROR_PACKETS;    /**< \brief 814, RxIPv4 Header Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_PACKETS RXIPV4_NO_PAYLOAD_PACKETS;    /**< \brief 818, RxIPv4 No Payload Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_PACKETS RXIPV4_FRAGMENTED_PACKETS;    /**< \brief 81C, RxIPv4 Fragmented Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS RXIPV4_UDP_CHECKSUM_DISABLED_PACKETS;    /**< \brief 820, RxIPv4 UDP Checksum Disabled Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV6_GOOD_PACKETS RXIPV6_GOOD_PACKETS;    /**< \brief 824, RxIPv6 Good Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_PACKETS RXIPV6_HEADER_ERROR_PACKETS;    /**< \brief 828, RxIPv6 Header Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_PACKETS RXIPV6_NO_PAYLOAD_PACKETS;    /**< \brief 82C, RxIPv6 No Payload Packets*/
       __I  Ifx_LETH_PORT_CORE_RXUDP_GOOD_PACKETS RXUDP_GOOD_PACKETS;     /**< \brief 830, RxUDP Good Packets*/
       __I  Ifx_LETH_PORT_CORE_RXUDP_ERROR_PACKETS RXUDP_ERROR_PACKETS;    /**< \brief 834, RxUDP Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RXTCP_GOOD_PACKETS RXTCP_GOOD_PACKETS;     /**< \brief 838, RxTCP Good Packets*/
       __I  Ifx_LETH_PORT_CORE_RXTCP_ERROR_PACKETS RXTCP_ERROR_PACKETS;    /**< \brief 83C, RxTCP Error Packets*/
       __I  Ifx_LETH_PORT_CORE_RXICMP_GOOD_PACKETS RXICMP_GOOD_PACKETS;    /**< \brief 840, RxICMP Good Packets*/
       __I  Ifx_LETH_PORT_CORE_RXICMP_ERROR_PACKETS RXICMP_ERROR_PACKETS;    /**< \brief 844, RxICMP Error Packets*/
       __I  Ifx_UReg_8Bit                       reserved_848[8];        /**< \brief 848, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_RXIPV4_GOOD_OCTETS RXIPV4_GOOD_OCTETS;     /**< \brief 850, RxIPv4 Good Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_HEADER_ERROR_OCTETS RXIPV4_HEADER_ERROR_OCTETS;    /**< \brief 854, RxIPv4 Header Error Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_NO_PAYLOAD_OCTETS RXIPV4_NO_PAYLOAD_OCTETS;    /**< \brief 858, RxIPv4 No Payload Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_FRAGMENTED_OCTETS RXIPV4_FRAGMENTED_OCTETS;    /**< \brief 85C, RxIPv4 Fragmented Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS RXIPV4_UDP_CHECKSUM_DISABLE_OCTETS;    /**< \brief 860, RxIPv4 UDP Checksum Disable Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV6_GOOD_OCTETS RXIPV6_GOOD_OCTETS;     /**< \brief 864, RxIPv6 Good Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV6_HEADER_ERROR_OCTETS RXIPV6_HEADER_ERROR_OCTETS;    /**< \brief 868, RxIPv6 Header Error Octets*/
       __I  Ifx_LETH_PORT_CORE_RXIPV6_NO_PAYLOAD_OCTETS RXIPV6_NO_PAYLOAD_OCTETS;    /**< \brief 86C, RxIPv6 No Payload Octets*/
       __I  Ifx_LETH_PORT_CORE_RXUDP_GOOD_OCTETS RXUDP_GOOD_OCTETS;      /**< \brief 870, RxUDP Good Octets*/
       __I  Ifx_LETH_PORT_CORE_RXUDP_ERROR_OCTETS RXUDP_ERROR_OCTETS;     /**< \brief 874, RxUDP Error Octets*/
       __I  Ifx_LETH_PORT_CORE_RXTCP_GOOD_OCTETS RXTCP_GOOD_OCTETS;      /**< \brief 878, RxTCP Good Octets*/
       __I  Ifx_LETH_PORT_CORE_RXTCP_ERROR_OCTETS RXTCP_ERROR_OCTETS;     /**< \brief 87C, RxTCP Error Octets*/
       __I  Ifx_LETH_PORT_CORE_RXICMP_GOOD_OCTETS RXICMP_GOOD_OCTETS;     /**< \brief 880, RxICMP Good Octets*/
       __I  Ifx_LETH_PORT_CORE_RXICMP_ERROR_OCTETS RXICMP_ERROR_OCTETS;    /**< \brief 884, RxICMP Error Octets*/
       __I  Ifx_UReg_8Bit                       reserved_888[488];      /**< \brief 888, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_CTRL MAC_INDIR_ACCESS_CTRL;    /**< \brief A70, MAC Indir Access Ctrl*/
       union
       {
            __IO Ifx_LETH_PORT_CORE_MAC_INDIR_ACCESS_DATA MAC_INDIR_ACCESS_DATA;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG0 MAC_DPCSEL_INDREG0;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_DPCSEL_INDREG1 MAC_DPCSEL_INDREG1;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_FPCSEL_INDREG0 MAC_FPCSEL_INDREG0;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCSTATUS_FILTER_EVENT_INDREG MAC_PCSTATUS_FILTER_EVENT_INDREG;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG0 MAC_PCCTRL_INDREG0;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG1 MAC_PCCTRL_INDREG1;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG10 MAC_PCCTRL_INDREG10;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG11 MAC_PCCTRL_INDREG11;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG12 MAC_PCCTRL_INDREG12;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG13 MAC_PCCTRL_INDREG13;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG14 MAC_PCCTRL_INDREG14;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG15 MAC_PCCTRL_INDREG15;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG2 MAC_PCCTRL_INDREG2;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG3 MAC_PCCTRL_INDREG3;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG4 MAC_PCCTRL_INDREG4;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG5 MAC_PCCTRL_INDREG5;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG6 MAC_PCCTRL_INDREG6;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG7 MAC_PCCTRL_INDREG7;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG8 MAC_PCCTRL_INDREG8;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCCTRL_INDREG9 MAC_PCCTRL_INDREG9;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCSTATUS_DA_INDREG0 MAC_PCSTATUS_DA_INDREG0;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCSTATUS_VLAN_INDREG MAC_PCSTATUS_VLAN_INDREG;    /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG0 MAC_PCNTR_INDREG0;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG1 MAC_PCNTR_INDREG1;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG10 MAC_PCNTR_INDREG10;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG11 MAC_PCNTR_INDREG11;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG12 MAC_PCNTR_INDREG12;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG13 MAC_PCNTR_INDREG13;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG14 MAC_PCNTR_INDREG14;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG15 MAC_PCNTR_INDREG15;     /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG2 MAC_PCNTR_INDREG2;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG3 MAC_PCNTR_INDREG3;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG4 MAC_PCNTR_INDREG4;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG5 MAC_PCNTR_INDREG5;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG6 MAC_PCNTR_INDREG6;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG7 MAC_PCNTR_INDREG7;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG8 MAC_PCNTR_INDREG8;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_PCNTR_INDREG9 MAC_PCNTR_INDREG9;      /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS0   MAC_TMRQ_REGS0;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS1   MAC_TMRQ_REGS1;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS2   MAC_TMRQ_REGS2;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS3   MAC_TMRQ_REGS3;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS4   MAC_TMRQ_REGS4;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS5   MAC_TMRQ_REGS5;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS6   MAC_TMRQ_REGS6;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_TMRQ_REGS7   MAC_TMRQ_REGS7;         /**< \brief A74, */
            __IO Ifx_LETH_PORT_CORE_MAC_VPCSEL_INDREG0 MAC_VPCSEL_INDREG0;     /**< \brief A74, */
       };
       __IO Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_ENABLE MAC_PCTH_INTR_ENABLE;    /**< \brief A78, MAC PCTH Intr Enable*/
       __IO Ifx_LETH_PORT_CORE_MAC_PCTH_INTR_STATUS MAC_PCTH_INTR_STATUS;    /**< \brief A7C, MAC PCTH Intr Status*/
       __I  Ifx_UReg_8Bit                       reserved_A80[32];       /**< \brief A80, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_ENABLE MAC_PCTW_INTR_ENABLE;    /**< \brief AA0, MAC PCTW Intr Enable*/
       __IO Ifx_LETH_PORT_CORE_MAC_PCTW_INTR_STATUS MAC_PCTW_INTR_STATUS;    /**< \brief AA4, MAC PCTW Intr Status*/
       __I  Ifx_UReg_8Bit                       reserved_AA8[88];       /**< \brief AA8, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_CONTROL MAC_TIMESTAMP_CONTROL;    /**< \brief B00, MAC Timestamp Control*/
       __IO Ifx_LETH_PORT_CORE_MAC_SUB_SECOND_INCREMENT MAC_SUB_SECOND_INCREMENT;    /**< \brief B04, MAC Sub Second Increment*/
       __I  Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS MAC_SYSTEM_TIME_SECONDS;    /**< \brief B08, MAC System Time Seconds*/
       __I  Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS MAC_SYSTEM_TIME_NANOSECONDS;    /**< \brief B0C, MAC System Time Nanoseconds*/
       __IO Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_SECONDS_UPDATE MAC_SYSTEM_TIME_SECONDS_UPDATE;    /**< \brief B10, MAC System Time Seconds Update*/
       __IO Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_NANOSECONDS_UPDATE MAC_SYSTEM_TIME_NANOSECONDS_UPDATE;    /**< \brief B14, MAC System Time Nanoseconds Update*/
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_ADDEND MAC_TIMESTAMP_ADDEND;    /**< \brief B18, MAC Timestamp Addend*/
       __IO Ifx_LETH_PORT_CORE_MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS MAC_SYSTEM_TIME_HIGHER_WORD_SECONDS;    /**< \brief B1C, MAC System Time Higher Word Seconds*/
       __I  Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_STATUS MAC_TIMESTAMP_STATUS;    /**< \brief B20, MAC Timestamp Status*/
       __IO Ifx_LETH_PORT_CORE_MAC_RX_DOMAIN_TIME_INCR MAC_RX_DOMAIN_TIME_INCR;    /**< \brief B24, MAC Rx Domain Time Incr*/
       __IO Ifx_LETH_PORT_CORE_MAC_TX_DOMAIN_TIME_INCR MAC_TX_DOMAIN_TIME_INCR;    /**< \brief B28, MAC Tx Domain Time Incr*/
       __I  Ifx_UReg_8Bit                       reserved_B2C[4];        /**< \brief B2C, \internal Reserved */
       __I  Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_NANOSECONDS MAC_TX_TIMESTAMP_STATUS_NANOSECONDS;    /**< \brief B30, MAC Tx Timestamp Status Nanoseconds*/
       __I  Ifx_LETH_PORT_CORE_MAC_TX_TIMESTAMP_STATUS_SECONDS MAC_TX_TIMESTAMP_STATUS_SECONDS;    /**< \brief B34, MAC Tx Timestamp Status Seconds*/
       __I  Ifx_UReg_8Bit                       reserved_B38[24];       /**< \brief B38, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_ASYM_CORR MAC_TIMESTAMP_INGRESS_ASYM_CORR;    /**< \brief B50, MAC Timestamp Ingress Asym Corr*/
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_ASYM_CORR MAC_TIMESTAMP_EGRESS_ASYM_CORR;    /**< \brief B54, MAC Timestamp Egress Asym Corr*/
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND MAC_TIMESTAMP_INGRESS_CORR_NANOSECOND;    /**< \brief B58, MAC Timestamp Ingress Corr Nanosecond*/
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND MAC_TIMESTAMP_EGRESS_CORR_NANOSECOND;    /**< \brief B5C, MAC Timestamp Egress Corr Nanosecond*/
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC MAC_TIMESTAMP_INGRESS_CORR_SUBNANOSEC;    /**< \brief B60, MAC Timestamp Ingress Corr Subnanosec*/
       __IO Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC MAC_TIMESTAMP_EGRESS_CORR_SUBNANOSEC;    /**< \brief B64, MAC Timestamp Egress Corr Subnanosec*/
       __I  Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_INGRESS_LATENCY MAC_TIMESTAMP_INGRESS_LATENCY;    /**< \brief B68, MAC Timestamp Ingress Latency*/
       __I  Ifx_LETH_PORT_CORE_MAC_TIMESTAMP_EGRESS_LATENCY MAC_TIMESTAMP_EGRESS_LATENCY;    /**< \brief B6C, MAC Timestamp Egress Latency*/
       __IO Ifx_LETH_PORT_CORE_MAC_PPS_CONTROL  MAC_PPS_CONTROL;        /**< \brief B70, MAC PPS Control*/
       __I  Ifx_UReg_8Bit                       reserved_B74[12];       /**< \brief B74, \internal Reserved */
       __IO Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_SECONDS MAC_PPS0_TARGET_TIME_SECONDS;    /**< \brief B80, MAC PPS0 Target Time Seconds*/
       __IO Ifx_LETH_PORT_CORE_MAC_PPS0_TARGET_TIME_NANOSECONDS MAC_PPS0_TARGET_TIME_NANOSECONDS;    /**< \brief B84, MAC PPS0 Target Time Nanoseconds*/
       __IO Ifx_LETH_PORT_CORE_MAC_PPS0_INTERVAL MAC_PPS0_INTERVAL;      /**< \brief B88, MAC PPS0 Interval*/
       __IO Ifx_LETH_PORT_CORE_MAC_PPS0_WIDTH   MAC_PPS0_WIDTH;         /**< \brief B8C, MAC PPS0 Width*/
} Ifx_LETH_PORT_CORE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_MTL_Q0_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief Q0 object */
typedef volatile struct _Ifx_LETH_PORT_MTL_Q0
{
       __IO Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_OPERATION_MODE MTL_TXQ0_OPERATION_MODE;    /**< \brief 0, MTL TxQ0 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_UNDERFLOW MTL_TXQ0_UNDERFLOW;     /**< \brief 4, MTL TxQ0 Underflow*/
       __I  Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_DEBUG MTL_TXQ0_DEBUG;         /**< \brief 8, MTL TxQ0 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[8];          /**< \brief C, \internal Reserved */
       __I  Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_ETS_STATUS MTL_TXQ0_ETS_STATUS;    /**< \brief 14, MTL TxQ0 ETS Status*/
       __IO Ifx_LETH_PORT_MTL_Q0_MTL_TXQ0_QUANTUM_WEIGHT MTL_TXQ0_QUANTUM_WEIGHT;    /**< \brief 18, MTL Tx Queue 0 Quantum Weight Register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[16];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q0_MTL_Q0_INTERRUPT_CONTROL_STATUS MTL_Q0_INTERRUPT_CONTROL_STATUS;    /**< \brief 2C, MTL Q0 Interrupt Control Status*/
       __IO Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_OPERATION_MODE MTL_RXQ0_OPERATION_MODE;    /**< \brief 30, MTL RxQ0 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT MTL_RXQ0_MISSED_PACKET_OVERFLOW_CNT;    /**< \brief 34, MTL RxQ0 Missed Packet Overflow Cnt*/
       __I  Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_DEBUG MTL_RXQ0_DEBUG;         /**< \brief 38, MTL RxQ0 Debug*/
       __IO Ifx_LETH_PORT_MTL_Q0_MTL_RXQ0_CONTROL MTL_RXQ0_CONTROL;       /**< \brief 3C, MTL RxQ0 Control*/
} Ifx_LETH_PORT_MTL_Q0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_MTL_Q1_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief Q1 object */
typedef volatile struct _Ifx_LETH_PORT_MTL_Q1
{
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_OPERATION_MODE MTL_TXQ1_OPERATION_MODE;    /**< \brief 0, MTL TxQ1 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_UNDERFLOW MTL_TXQ1_UNDERFLOW;     /**< \brief 4, MTL TxQ1 Underflow*/
       __I  Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_DEBUG MTL_TXQ1_DEBUG;         /**< \brief 8, MTL TxQ1 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_CONTROL MTL_TXQ1_ETS_CONTROL;    /**< \brief 10, MTL TxQ1 ETS Control*/
       __I  Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_ETS_STATUS MTL_TXQ1_ETS_STATUS;    /**< \brief 14, MTL TxQ1 ETS Status*/
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_QUANTUM_WEIGHT MTL_TXQ1_QUANTUM_WEIGHT;    /**< \brief 18, MTL TxQ1 Quantum Weight*/
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_SENDSLOPECREDIT MTL_TXQ1_SENDSLOPECREDIT;    /**< \brief 1C, MTL TxQ1 SendSlopeCredit*/
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_HICREDIT MTL_TXQ1_HICREDIT;      /**< \brief 20, MTL TxQ1 HiCredit*/
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_TXQ1_LOCREDIT MTL_TXQ1_LOCREDIT;      /**< \brief 24, MTL TxQ1 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_Q1_INTERRUPT_CONTROL_STATUS MTL_Q1_INTERRUPT_CONTROL_STATUS;    /**< \brief 2C, MTL Q1 Interrupt Control Status*/
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_OPERATION_MODE MTL_RXQ1_OPERATION_MODE;    /**< \brief 30, MTL RxQ1 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT MTL_RXQ1_MISSED_PACKET_OVERFLOW_CNT;    /**< \brief 34, MTL RxQ1 Missed Packet Overflow Cnt*/
       __I  Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_DEBUG MTL_RXQ1_DEBUG;         /**< \brief 38, MTL RxQ1 Debug*/
       __IO Ifx_LETH_PORT_MTL_Q1_MTL_RXQ1_CONTROL MTL_RXQ1_CONTROL;       /**< \brief 3C, MTL RxQ1 Control*/
} Ifx_LETH_PORT_MTL_Q1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_MTL_Q2_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief Q2 object */
typedef volatile struct _Ifx_LETH_PORT_MTL_Q2
{
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_OPERATION_MODE MTL_TXQ2_OPERATION_MODE;    /**< \brief 0, MTL TxQ2 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_UNDERFLOW MTL_TXQ2_UNDERFLOW;     /**< \brief 4, MTL TxQ2 Underflow*/
       __I  Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_DEBUG MTL_TXQ2_DEBUG;         /**< \brief 8, MTL TxQ2 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_CONTROL MTL_TXQ2_ETS_CONTROL;    /**< \brief 10, MTL TxQ2 ETS Control*/
       __I  Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_ETS_STATUS MTL_TXQ2_ETS_STATUS;    /**< \brief 14, MTL TxQ2 ETS Status*/
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_QUANTUM_WEIGHT MTL_TXQ2_QUANTUM_WEIGHT;    /**< \brief 18, MTL TxQ2 Quantum Weight*/
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_SENDSLOPECREDIT MTL_TXQ2_SENDSLOPECREDIT;    /**< \brief 1C, MTL TxQ2 SendSlopeCredit*/
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_HICREDIT MTL_TXQ2_HICREDIT;      /**< \brief 20, MTL TxQ2 HiCredit*/
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_TXQ2_LOCREDIT MTL_TXQ2_LOCREDIT;      /**< \brief 24, MTL TxQ2 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q2_MTL_Q2_INTERRUPT_CONTROL_STATUS MTL_Q2_INTERRUPT_CONTROL_STATUS;    /**< \brief 2C, MTL Q2 Interrupt Control Status*/
} Ifx_LETH_PORT_MTL_Q2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_MTL_Q3_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief Q3 object */
typedef volatile struct _Ifx_LETH_PORT_MTL_Q3
{
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_OPERATION_MODE MTL_TXQ3_OPERATION_MODE;    /**< \brief 0, MTL TxQ3 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_UNDERFLOW MTL_TXQ3_UNDERFLOW;     /**< \brief 4, MTL TxQ3 Underflow*/
       __I  Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_DEBUG MTL_TXQ3_DEBUG;         /**< \brief 8, MTL TxQ3 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_CONTROL MTL_TXQ3_ETS_CONTROL;    /**< \brief 10, MTL TxQ3 ETS Control*/
       __I  Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_ETS_STATUS MTL_TXQ3_ETS_STATUS;    /**< \brief 14, MTL TxQ3 ETS Status*/
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_QUANTUM_WEIGHT MTL_TXQ3_QUANTUM_WEIGHT;    /**< \brief 18, MTL TxQ3 Quantum Weight*/
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_SENDSLOPECREDIT MTL_TXQ3_SENDSLOPECREDIT;    /**< \brief 1C, MTL TxQ3 SendSlopeCredit*/
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_HICREDIT MTL_TXQ3_HICREDIT;      /**< \brief 20, MTL TxQ3 HiCredit*/
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_TXQ3_LOCREDIT MTL_TXQ3_LOCREDIT;      /**< \brief 24, MTL TxQ3 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q3_MTL_Q3_INTERRUPT_CONTROL_STATUS MTL_Q3_INTERRUPT_CONTROL_STATUS;    /**< \brief 2C, MTL Q3 Interrupt Control Status*/
} Ifx_LETH_PORT_MTL_Q3;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_MTL_Q4_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief Q4 object */
typedef volatile struct _Ifx_LETH_PORT_MTL_Q4
{
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_OPERATION_MODE MTL_TXQ4_OPERATION_MODE;    /**< \brief 0, MTL TxQ4 Operation Mode*/
       __I  Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_UNDERFLOW MTL_TXQ4_UNDERFLOW;     /**< \brief 4, MTL TxQ4 Underflow*/
       __I  Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_DEBUG MTL_TXQ4_DEBUG;         /**< \brief 8, MTL TxQ4 Debug*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_CONTROL MTL_TXQ4_ETS_CONTROL;    /**< \brief 10, MTL TxQ4 ETS Control*/
       __I  Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_ETS_STATUS MTL_TXQ4_ETS_STATUS;    /**< \brief 14, MTL TxQ4 ETS Status*/
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_QUANTUM_WEIGHT MTL_TXQ4_QUANTUM_WEIGHT;    /**< \brief 18, MTL TxQ4 Quantum Weight*/
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_SENDSLOPECREDIT MTL_TXQ4_SENDSLOPECREDIT;    /**< \brief 1C, MTL TxQ4 SendSlopeCredit*/
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_HICREDIT MTL_TXQ4_HICREDIT;      /**< \brief 20, MTL TxQ4 HiCredit*/
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_TXQ4_LOCREDIT MTL_TXQ4_LOCREDIT;      /**< \brief 24, MTL TxQ4 LoCredit*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q4_MTL_Q4_INTERRUPT_CONTROL_STATUS MTL_Q4_INTERRUPT_CONTROL_STATUS;    /**< \brief 2C, MTL Q4 Interrupt Control Status*/
} Ifx_LETH_PORT_MTL_Q4;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_MTL_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief MTL object */
typedef volatile struct _Ifx_LETH_PORT_MTL
{
       __IO Ifx_LETH_PORT_MTL_MTL_OPERATION_MODE MTL_OPERATION_MODE;     /**< \brief 0, MTL Operation Mode*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_DBG_CTL       MTL_DBG_CTL;            /**< \brief 8, MTL DBG CTL*/
       __IO Ifx_LETH_PORT_MTL_MTL_DBG_STS       MTL_DBG_STS;            /**< \brief C, MTL DBG STS*/
       __IO Ifx_LETH_PORT_MTL_MTL_FIFO_DEBUG_DATA MTL_FIFO_DEBUG_DATA;    /**< \brief 10, MTL FIFO Debug Data*/
       __I  Ifx_UReg_8Bit                       reserved_14[12];        /**< \brief 14, \internal Reserved */
       __I  Ifx_LETH_PORT_MTL_MTL_INTERRUPT_STATUS MTL_INTERRUPT_STATUS;    /**< \brief 20, MTL Interrupt Status*/
       __I  Ifx_UReg_8Bit                       reserved_24[12];        /**< \brief 24, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_RXQ_DMA_MAP0  MTL_RXQ_DMA_MAP0;       /**< \brief 30, MTL RxQ DMA Map0*/
       __I  Ifx_UReg_8Bit                       reserved_34[28];        /**< \brief 34, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_EST_CONTROL   MTL_EST_CONTROL;        /**< \brief 50, MTL EST Control*/
       __IO Ifx_LETH_PORT_MTL_MTL_EST_EXT_CONTROL MTL_EST_EXT_CONTROL;    /**< \brief 54, MTL EST Ext Control*/
       __IO Ifx_LETH_PORT_MTL_MTL_EST_STATUS    MTL_EST_STATUS;         /**< \brief 58, MTL EST Status*/
       __I  Ifx_UReg_8Bit                       reserved_5C[4];         /**< \brief 5C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_EST_SCH_ERROR MTL_EST_SCH_ERROR;      /**< \brief 60, MTL EST Sch Error*/
       __IO Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_ERROR MTL_EST_FRM_SIZE_ERROR;    /**< \brief 64, MTL EST Frm Size Error*/
       __I  Ifx_LETH_PORT_MTL_MTL_EST_FRM_SIZE_CAPTURE MTL_EST_FRM_SIZE_CAPTURE;    /**< \brief 68, MTL EST Frm Size Capture*/
       __I  Ifx_UReg_8Bit                       reserved_6C[4];         /**< \brief 6C, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_EST_INTR_ENABLE MTL_EST_INTR_ENABLE;    /**< \brief 70, MTL EST Intr Enable*/
       __I  Ifx_UReg_8Bit                       reserved_74[12];        /**< \brief 74, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_EST_GCL_CONTROL MTL_EST_GCL_CONTROL;    /**< \brief 80, MTL EST GCL Control*/
       __IO Ifx_LETH_PORT_MTL_MTL_EST_GCL_DATA  MTL_EST_GCL_DATA;       /**< \brief 84, MTL EST GCL Data*/
       __I  Ifx_UReg_8Bit                       reserved_88[24];        /**< \brief 88, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_MTL_RXP_CONTROL_STATUS MTL_RXP_CONTROL_STATUS;    /**< \brief A0, MTL RXP Control Status*/
       __IO Ifx_LETH_PORT_MTL_MTL_RXP_INTERRUPT_CONTROL_STATUS MTL_RXP_INTERRUPT_CONTROL_STATUS;    /**< \brief A4, MTL RXP Interrupt Control Status*/
       __I  Ifx_LETH_PORT_MTL_MTL_RXP_DROP_CNT  MTL_RXP_DROP_CNT;       /**< \brief A8, MTL RXP Drop Cnt*/
       __I  Ifx_LETH_PORT_MTL_MTL_RXP_ERROR_CNT MTL_RXP_ERROR_CNT;      /**< \brief AC, MTL RXP Error Cnt*/
       __IO Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_CONTROL_STATUS MTL_RXP_INDIRECT_ACC_CONTROL_STATUS;    /**< \brief B0, MTL RXP Indirect Acc Control Status*/
       __I  Ifx_LETH_PORT_MTL_MTL_RXP_INDIRECT_ACC_DATA MTL_RXP_INDIRECT_ACC_DATA;    /**< \brief B4, MTL RXP Indirect Acc Data*/
       __I  Ifx_LETH_PORT_MTL_MTL_RXP_BYPASS_CNT MTL_RXP_BYPASS_CNT;     /**< \brief B8, MTL RXP Bypass Cnt*/
       __I  Ifx_UReg_8Bit                       reserved_BC[68];        /**< \brief BC, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q0                Q0;                     /**< \brief 100, */
       __IO Ifx_LETH_PORT_MTL_Q1                Q1;                     /**< \brief 140, */
       __IO Ifx_LETH_PORT_MTL_Q2                Q2;                     /**< \brief 180, */
       __I  Ifx_UReg_8Bit                       reserved_1B0[16];       /**< \brief 1B0, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q3                Q3;                     /**< \brief 1C0, */
       __I  Ifx_UReg_8Bit                       reserved_1F0[16];       /**< \brief 1F0, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL_Q4                Q4;                     /**< \brief 200, */
} Ifx_LETH_PORT_MTL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_PORT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PORT object */
typedef volatile struct _Ifx_LETH_PORT
{
       __IO Ifx_LETH_PORT_CORE                  CORE;                   /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_B90[112];      /**< \brief B90, \internal Reserved */
       __IO Ifx_LETH_PORT_MTL                   MTL;                    /**< \brief C00, */
       __I  Ifx_UReg_8Bit                       reserved_E30[4560];     /**< \brief E30, \internal Reserved */
} Ifx_LETH_PORT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_BRIDGE_PORT_CTRL_MAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief PORT_CTRL_MAP object */
typedef volatile struct _Ifx_LETH_BRIDGE_PORT_CTRL_MAP
{
       __IO Ifx_LETH_BRIDGE_PORT_CTRL_MAP_CTRL_REG CTRL_REG;               /**< \brief 0, PORT CTRL REG*/
       __IO Ifx_LETH_BRIDGE_PORT_CTRL_MAP_TXQ_MAP TXQ_MAP;                /**< \brief 4, PORT TXQ MAP*/
       __IO Ifx_LETH_BRIDGE_PORT_CTRL_MAP_RXC_MAP RXC_MAP;                /**< \brief 8, PORT RXC MAP*/
       __IO Ifx_LETH_BRIDGE_PORT_CTRL_MAP_FWD_PORT_MAP FWD_PORT_MAP;           /**< \brief C, PORT FWD PORT MAP*/
} Ifx_LETH_BRIDGE_PORT_CTRL_MAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_BRIDGE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief BRIDGE object */
typedef volatile struct _Ifx_LETH_BRIDGE
{
       __IO Ifx_LETH_BRIDGE_ETHBR_FWD_CTRL_REG  ETHBR_FWD_CTRL_REG;     /**< \brief 0, ETHBR FWD CTRL REG*/
       __IO Ifx_LETH_BRIDGE_PORT_LPBK_CTRL_REG  PORT_LPBK_CTRL_REG;     /**< \brief 4, PORT LPBK CTRL REG*/
       __IO Ifx_LETH_BRIDGE_PORT_RXC_FLUSH_CTRL_REG PORT_RXC_FLUSH_CTRL_REG;    /**< \brief 8, PORT RXC FLUSH CTRL REG*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_LETH_BRIDGE_PORT_CTRL_MAP       PORT_CTRL_MAP[4];       /**< \brief 10, */
       __I  Ifx_UReg_8Bit                       reserved_50[160];       /**< \brief 50, \internal Reserved */
       __IO Ifx_LETH_BRIDGE_PORT_TX_WRR_WEIGHTS PORT_TX_WRR_WEIGHTS;    /**< \brief F0, PORT TX WRR WEIGHTS*/
       __IO Ifx_LETH_BRIDGE_PORT_RX_WRR_WEIGHTS PORT_RX_WRR_WEIGHTS;    /**< \brief F4, PORT RX WRR WEIGHTS*/
       __I  Ifx_UReg_8Bit                       reserved_F8[8];         /**< \brief F8, \internal Reserved */
       __IO Ifx_LETH_BRIDGE_ETHBR_CSR_SW_CTRL_REG ETHBR_CSR_SW_CTRL_REG;    /**< \brief 100, ETHBR CSR SW CTRL REG*/
       __I  Ifx_LETH_BRIDGE_ETHBR_INTR_STATUS_REG ETHBR_INTR_STATUS_REG;    /**< \brief 104, ETHBR INTR STATUS REG*/
} Ifx_LETH_BRIDGE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_DMA_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_LETH_DMA_CH
{
       __IO Ifx_LETH_DMA_CH_CONTROL             CONTROL;                /**< \brief 0, DMA CHy Control*/
       __IO Ifx_LETH_DMA_CH_TX_CONTROL          TX_CONTROL;             /**< \brief 4, DMA CHy Tx Control*/
       __IO Ifx_LETH_DMA_CH_RX_CONTROL          RX_CONTROL;             /**< \brief 8, DMA CHy Rx Control*/
       __I  Ifx_UReg_8Bit                       reserved_C[8];          /**< \brief C, \internal Reserved */
       __IO Ifx_LETH_DMA_CH_TXDESC_LIST_ADDRESS TXDESC_LIST_ADDRESS;    /**< \brief 14, DMA CHyTxDesc List Address*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
       __IO Ifx_LETH_DMA_CH_RXDESC_LIST_ADDRESS RXDESC_LIST_ADDRESS;    /**< \brief 1C, DMA CHyRxDesc List Address*/
       __IO Ifx_LETH_DMA_CH_TXDESC_TAIL_POINTER TXDESC_TAIL_POINTER;    /**< \brief 20, DMA CHy TxDesc Tail Pointer*/
       __I  Ifx_UReg_8Bit                       reserved_24[4];         /**< \brief 24, \internal Reserved */
       __IO Ifx_LETH_DMA_CH_RXDESC_TAIL_POINTER RXDESC_TAIL_POINTER;    /**< \brief 28, DMA CHy RxDesc Tail Pointer*/
       __IO Ifx_LETH_DMA_CH_TXDESC_RING_LENGTH  TXDESC_RING_LENGTH;     /**< \brief 2C, DMA CHy TxDesc Ring Length*/
       __IO Ifx_LETH_DMA_CH_RX_CONTROL2         RX_CONTROL2;            /**< \brief 30, DMA CHy Rx Control2*/
       __IO Ifx_LETH_DMA_CH_INTERRUPT_ENABLE    INTERRUPT_ENABLE;       /**< \brief 34, DMA CHy Interrupt Enable*/
       __IO Ifx_LETH_DMA_CH_RX_INTERRUPT_WATCHDOG_TIMER RX_INTERRUPT_WATCHDOG_TIMER;    /**< \brief 38, DMA CHy Rx Interrupt Watchdog Timer*/
       __IO Ifx_LETH_DMA_CH_SLOT_FUNCTION_CONTROL_STATUS SLOT_FUNCTION_CONTROL_STATUS;    /**< \brief 3C, DMA CHy Slot Function Control Status*/
       __I  Ifx_UReg_8Bit                       reserved_40[4];         /**< \brief 40, \internal Reserved */
       __I  Ifx_LETH_DMA_CH_CURRENT_APP_TXDESC  CURRENT_APP_TXDESC;     /**< \brief 44, DMA CHy Current App TxDesc*/
       __I  Ifx_UReg_8Bit                       reserved_48[4];         /**< \brief 48, \internal Reserved */
       __I  Ifx_LETH_DMA_CH_CURRENT_APP_RXDESC  CURRENT_APP_RXDESC;     /**< \brief 4C, DMA CHy Current App RxDesc*/
       __I  Ifx_UReg_8Bit                       reserved_50[4];         /**< \brief 50, \internal Reserved */
       __I  Ifx_LETH_DMA_CH_CURRENT_APP_TXBUFFER CURRENT_APP_TXBUFFER;    /**< \brief 54, DMA CHy Current App TxBuffer*/
       __I  Ifx_UReg_8Bit                       reserved_58[4];         /**< \brief 58, \internal Reserved */
       __I  Ifx_LETH_DMA_CH_CURRENT_APP_RXBUFFER CURRENT_APP_RXBUFFER;    /**< \brief 5C, DMA CHy Current App RxBuffer*/
       __IO Ifx_LETH_DMA_CH_STATUS              STATUS;                 /**< \brief 60, DMA CHy Status*/
       __I  Ifx_LETH_DMA_CH_MISS_FRAME_CNT      MISS_FRAME_CNT;         /**< \brief 64, DMA CHy Miss Frame Cnt*/
       __I  Ifx_LETH_DMA_CH_RXP_ACCEPT_CNT      RXP_ACCEPT_CNT;         /**< \brief 68, DMA CHy RXP Accept Cnt*/
       __I  Ifx_UReg_8Bit                       reserved_6C[20];        /**< \brief 6C, \internal Reserved */
} Ifx_LETH_DMA_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Leth_DMA_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DMA object */
typedef volatile struct _Ifx_LETH_DMA
{
       __IO Ifx_LETH_DMA_MODE                   MODE;                   /**< \brief 0, DMA Mode*/
       __IO Ifx_LETH_DMA_SYSBUS_MODE            SYSBUS_MODE;            /**< \brief 4, DMA SysBus Mode*/
       __I  Ifx_LETH_DMA_INTERRUPT_STATUS       INTERRUPT_STATUS;       /**< \brief 8, DMA Interrupt Status*/
       __I  Ifx_LETH_DMA_DEBUG_STATUS0          DEBUG_STATUS0;          /**< \brief C, DMA Debug Status0*/
       __I  Ifx_LETH_DMA_DEBUG_STATUS1          DEBUG_STATUS1;          /**< \brief 10, DMA Debug Status1*/
       __I  Ifx_LETH_DMA_DEBUG_STATUS2          DEBUG_STATUS2;          /**< \brief 14, DMA Debug Status2*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_LETH_DMA_AXI4_TX_AR_ACE_CONTROL AXI4_TX_AR_ACE_CONTROL;    /**< \brief 20, AXI4 Tx AR ACE Control*/
       __IO Ifx_LETH_DMA_AXI4_RX_AW_ACE_CONTROL AXI4_RX_AW_ACE_CONTROL;    /**< \brief 24, AXI4 Rx AW ACE Control*/
       __IO Ifx_LETH_DMA_AXI4_TXRX_AWAR_ACE_CONTROL AXI4_TXRX_AWAR_ACE_CONTROL;    /**< \brief 28, AXI4 TxRx AWAR ACE Control*/
       __I  Ifx_UReg_8Bit                       reserved_2C[20];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_LETH_DMA_AXI_LPI_ENTRY_INTERVAL AXI_LPI_ENTRY_INTERVAL;    /**< \brief 40, AXI LPI Entry Interval*/
       __I  Ifx_UReg_8Bit                       reserved_44[188];       /**< \brief 44, \internal Reserved */
       __IO Ifx_LETH_DMA_CH                     CH[8];                  /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_500[61440];    /**< \brief 500, \internal Reserved */
} Ifx_LETH_DMA;

/******************************************************************************/
/** \addtogroup IfxSfr_Leth_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief LETH object */
typedef volatile struct _Ifx_LETH
{
       __IO Ifx_LETH_CLC                        CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_LETH_ID                         ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_LETH_RST                        RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_LETH_PEN                        PEN;                    /**< \brief 20, Clock Control Register for Ports*/
       __IO Ifx_LETH_PROT                       PROTE;                  /**< \brief 24, PROT Register Endinit*/
       __IO Ifx_LETH_PROT                       PROTSE;                 /**< \brief 28, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_2C[20];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_LETH_ACCENGLOBAL                ACCENGLOBAL;            /**< \brief 40, */
       __IO Ifx_LETH_ACCENMAC                   ACCENMAC[4];            /**< \brief 60, */
       __IO Ifx_LETH_ACCENCH                    ACCENCH[8];             /**< \brief E0, */
       __I  Ifx_UReg_8Bit                       reserved_1E0[288];      /**< \brief 1E0, \internal Reserved */
       __IO Ifx_LETH_DMACH                      DMACH[8];               /**< \brief 300, DMA Channel Rx/Tx 0 Master TAG ID, VM and PRS allocation*/
       __IO Ifx_LETH_P                          P[4];                   /**< \brief 320, Port Control Register 1*/
       __I  Ifx_UReg_8Bit                       reserved_340[192];      /**< \brief 340, \internal Reserved */
       __IO Ifx_LETH_ERR                        ERR;                    /**< \brief 400, Error handling interrupt/alarm enable*/
       __I  Ifx_UReg_8Bit                       reserved_40C[64500];    /**< \brief 40C, \internal Reserved */
       __IO Ifx_LETH_PORT                       PORT[4];                /**< \brief 10000, */
       __I  Ifx_UReg_8Bit                       reserved_18000[24576];    /**< \brief 18000, \internal Reserved */
       __IO Ifx_LETH_BRIDGE                     BRIDGE;                 /**< \brief 1E000, */
       __I  Ifx_UReg_8Bit                       reserved_1E108[3832];    /**< \brief 1E108, \internal Reserved */
       __IO Ifx_LETH_DMA                        DMA;                    /**< \brief 1F000, */
       __I  Ifx_UReg_8Bit                       reserved_2E500[793344];    /**< \brief 2E500, \internal Reserved */
} Ifx_LETH;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXLETH_REGDEF_H */
