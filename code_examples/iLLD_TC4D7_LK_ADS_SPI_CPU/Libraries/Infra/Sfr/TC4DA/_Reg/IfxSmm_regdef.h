/**
 * \file IfxSmm_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SMM/V13.1.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Smm_Registers Smm Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Smm_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Smm_Registers
 * 
 * \defgroup IfxSfr_Smm_Registers_union Register unions
 * \ingroup IfxSfr_Smm_Registers
 * 
 * \defgroup IfxSfr_Smm_Registers_struct Memory map
 * \ingroup IfxSfr_Smm_Registers
 */
#ifndef IFXSMM_REGDEF_H
#define IFXSMM_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Smm_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_SMM_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SMM_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_SMM_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_SMM_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_SMM_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMM_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_SMM_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SMM_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_SMM_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_SMM_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_SMM_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMM_ACCEN_WRB_FPI_Bits;

/** \brief Power Management Droop Control and Status Register */
typedef struct _Ifx_SMM_DRPCTRL_Bits
{
    __O  Ifx_UReg_32Bit REQ:1;             /**< \brief [0:0] Set to trigger new voltage droop compensation activity. (w) */
    __IO Ifx_UReg_32Bit DWELL_CNT:4;       /**< \brief [4:1] Dwell timer count delay keeping voltage before droop deassertion (rw) */
    __IO Ifx_UReg_32Bit STEPS:4;           /**< \brief [8:5] Target number of steps to raise or lower voltage level (rw) */
    __IO Ifx_UReg_32Bit DIR:1;             /**< \brief [9:9] Definiton of the direction of the voltage (rising/reducing) (rw) */
    __IO Ifx_UReg_32Bit ABORT:1;           /**< \brief [10:10] Abort control (rw) */
    __I  Ifx_UReg_32Bit ERR:1;             /**< \brief [11:11] Error indicator (rh) */
    __I  Ifx_UReg_32Bit V_NOM:1;           /**< \brief [12:12] Voltage at nominal level (rh) */
    __I  Ifx_UReg_32Bit V_SP:1;            /**< \brief [13:13] Voltage Set Point (rh) */
    __I  Ifx_UReg_32Bit BUSY:1;            /**< \brief [14:14] Busy status of droop compensation activity (rh) */
    __O  Ifx_UReg_32Bit ERRCLR:1;          /**< \brief [15:15] Clear ERR (w) */
    __IO Ifx_UReg_32Bit LJT:1;             /**< \brief [16:16] Load Jump Taken flag set by SW during DWELL time (rwh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_SMM_DRPCTRL_Bits;

/** \brief ESR0 Pad configuration Control Register */
typedef struct _Ifx_SMM_DRVCFGESR0_Bits
{
    __IO Ifx_UReg_32Bit DIR:1;             /**< \brief [0:0] Pad Signal direction (rwh) */
    __IO Ifx_UReg_32Bit OD:1;              /**< \brief [1:1] Output Buffer configuration (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit MODE:4;            /**< \brief [7:4] Input configuration or Alternative Output signal selection (rwh) */
    __IO Ifx_UReg_32Bit PD:3;              /**< \brief [10:8] Pad drive mode (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit PL:3;              /**< \brief [14:12] Pad level selection (rwh) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_SMM_DRVCFGESR0_Bits;

/** \brief ESR1 Pad configuration Control Register */
typedef struct _Ifx_SMM_DRVCFGESR1_Bits
{
    __IO Ifx_UReg_32Bit DIR:1;             /**< \brief [0:0] Pad Signal direction (rwh) */
    __IO Ifx_UReg_32Bit OD:1;              /**< \brief [1:1] Output Buffer configuration (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit MODE:4;            /**< \brief [7:4] Input configuration or Alternative Output signal selection (rwh) */
    __IO Ifx_UReg_32Bit PD:3;              /**< \brief [10:8] Pad drive mode (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit PL:3;              /**< \brief [14:12] Pad level selection (rwh) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_SMM_DRVCFGESR1_Bits;

/** \brief ESR0 Reset Output Configuration Register */
typedef struct _Ifx_SMM_ESR0CFG_Bits
{
    __I  Ifx_UReg_32Bit ARI:1;             /**< \brief [0:0] Application ESR0 Reset Output Indicator - ARI (rh) */
    __O  Ifx_UReg_32Bit ARC:1;             /**< \brief [1:1] Application ESR0 Reset Output Indicator Clear - ARC (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_SMM_ESR0CFG_Bits;

/** \brief ESR0 Reset Counter Control Register */
typedef struct _Ifx_SMM_ESR0CNTCTRL_Bits
{
    __IO Ifx_UReg_32Bit RSTECNT:12;        /**< \brief [11:0] Reload Value for Reset and ESR Output Elongation Counter (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKDIV:4;          /**< \brief [19:16] Clock divider for 100MHz base clock (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit RSTCON:2;          /**< \brief [25:24] Reset Release and ESR0 Reset Output Elongation Behaviour (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_SMM_ESR0CNTCTRL_Bits;

/** \brief ESR0 Input Configuration Register */
typedef struct _Ifx_SMM_ESRCFG_Bits
{
    __I  Ifx_UReg_32Bit :7;                /**< \brief [6:0] \internal Reserved */
    __IO Ifx_UReg_32Bit EDCON:2;           /**< \brief [8:7] Edge Detection Control - EDCON (rw) */
    __IO Ifx_UReg_32Bit DFEN:1;            /**< \brief [9:9] ESR Digital Filter Enable - DFEN (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [12:10] \internal Reserved */
    __IO Ifx_UReg_32Bit CNTLCK:1;          /**< \brief [13:13] Counter configuration Lock (rwh) */
    __IO Ifx_UReg_32Bit CLKDIV:1;          /**< \brief [14:14] Backup Clock Divider - 1024 (rw) */
    __IO Ifx_UReg_32Bit GL:1;              /**< \brief [15:15] Greater than or Less than Counter Event Selection (rw) */
    __IO Ifx_UReg_32Bit RSTDELAY:16;       /**< \brief [31:16] Reset input pulse width compare value (rw) */
} Ifx_SMM_ESRCFG_Bits;

/** \brief ESR0 GPIO Control Register */
typedef struct _Ifx_SMM_GPIOESR0_Bits
{
    __I  Ifx_UReg_32Bit OUT:1;             /**< \brief [0:0] Output value (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __O  Ifx_UReg_32Bit SET:1;             /**< \brief [2:2] Set (w) */
    __O  Ifx_UReg_32Bit CLR:1;             /**< \brief [3:3] Clear (w) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __I  Ifx_UReg_32Bit IN:1;              /**< \brief [8:8] Read back Pin value (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_SMM_GPIOESR0_Bits;

/** \brief ESR1 GPIO Control Register */
typedef struct _Ifx_SMM_GPIOESR1_Bits
{
    __I  Ifx_UReg_32Bit OUT:1;             /**< \brief [0:0] Output value (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __O  Ifx_UReg_32Bit SET:1;             /**< \brief [2:2] Set (w) */
    __O  Ifx_UReg_32Bit CLR:1;             /**< \brief [3:3] Clear (w) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __I  Ifx_UReg_32Bit IN:1;              /**< \brief [8:8] Read back Pin value (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_SMM_GPIOESR1_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_SMM_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_SMM_ID_Bits;

/** \brief Pad Disable Control Register */
typedef struct _Ifx_SMM_PDISC_Bits
{
    __IO Ifx_UReg_32Bit PDIS0:1;           /**< \brief [0:0] Pad Disable for ESR Pin 0 - PDIS0 (rwh) */
    __IO Ifx_UReg_32Bit PDIS1:1;           /**< \brief [1:1] Pad Disable for ESR Pin 1 - PDIS1 (rwh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_SMM_PDISC_Bits;

/** \brief Power Management Control and Status Register for CPU0 */
typedef struct _Ifx_SMM_PMCSR_Bits
{
    __IO Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __I  Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management status (rh) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_SMM_PMCSR_Bits;

/** \brief Power Management Control and Status Register for CPUcs in CSRM subystem */
typedef struct _Ifx_SMM_PMCSRCS_Bits
{
    __IO Ifx_UReg_32Bit REQSLP:2;          /**< \brief [1:0] Idle Mode and Sleep Mode Request (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __I  Ifx_UReg_32Bit PMST:3;            /**< \brief [10:8] Power management Status (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit CPUCSSLPEN:1;      /**< \brief [16:16] Enable of CPUcs IDLE Mode on SLEEP request (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_SMM_PMCSRCS_Bits;

/** \brief Power Management Status Register 0 */
typedef struct _Ifx_SMM_PMSTAT0_Bits
{
    __I  Ifx_UReg_32Bit CPU0:1;            /**< \brief [0:0] CPU0 Status - CPU0 (rh) */
    __I  Ifx_UReg_32Bit CPU1:1;            /**< \brief [1:1] CPU1 Status - CPU1 (rh) */
    __I  Ifx_UReg_32Bit CPU2:1;            /**< \brief [2:2] CPU2 Status - CPU2 (rh) */
    __I  Ifx_UReg_32Bit CPU3:1;            /**< \brief [3:3] CPU3 Status - CPU3 (rh) */
    __I  Ifx_UReg_32Bit CPU4:1;            /**< \brief [4:4] CPU4 Status - CPU4 (rh) */
    __I  Ifx_UReg_32Bit CPU5:1;            /**< \brief [5:5] CPU5 Status - CPU5 (rh) */
    __I  Ifx_UReg_32Bit CSRM:1;            /**< \brief [6:6] CSRM CPUcs status (rh) */
    __I  Ifx_UReg_32Bit PPU:1;             /**< \brief [7:7] PPU Status - PPU (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit CPU0LS:1;          /**< \brief [16:16] CPU0LS Status - CPU0LS (rh) */
    __I  Ifx_UReg_32Bit CPU1LS:1;          /**< \brief [17:17] CPU1LS Status - CPU1LS (rh) */
    __I  Ifx_UReg_32Bit CPU2LS:1;          /**< \brief [18:18] CPU2LS Status - CPU2LS (rh) */
    __I  Ifx_UReg_32Bit CPU3LS:1;          /**< \brief [19:19] CPU3LS Status - CPU3LS (rh) */
    __I  Ifx_UReg_32Bit CPU4LS:1;          /**< \brief [20:20] CPU4LS Status - CPU4LS (rh) */
    __I  Ifx_UReg_32Bit CPU5LS:1;          /**< \brief [21:21] CPU5LS Status - CPU5LS (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_SMM_PMSTAT0_Bits;

/** \brief Standby and Wake-up Control Register 1 */
typedef struct _Ifx_SMM_PMSWCR1_Bits
{
    __I  Ifx_UReg_32Bit :7;                /**< \brief [6:0] \internal Reserved */
    __IO Ifx_UReg_32Bit PROCMODEEN:1;      /**< \brief [7:7] Global IDLE Mode Enable for Processing Units (rw) */
    __IO Ifx_UReg_32Bit CPUIDLSEL:3;       /**< \brief [10:8] CPU selection for Idle mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit IRADIS:1;          /**< \brief [12:12] Idle-Request-Acknowledge Sequence Disable (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [23:13] \internal Reserved */
    __IO Ifx_UReg_32Bit CPUSEL:3;          /**< \brief [26:24] CPU selection for Sleep and Standby mode (rw) */
    __O  Ifx_UReg_32Bit STBYEVEN:1;        /**< \brief [27:27] STBYEV Bit protection (w) */
    __IO Ifx_UReg_32Bit STBYEV:3;          /**< \brief [30:28] Standby Entry Event Configuration - STBYEV (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMM_PMSWCR1_Bits;

/** \brief Power Management Transition Control and Status Register 0 */
typedef struct _Ifx_SMM_PMTRCSR0_Bits
{
    __IO Ifx_UReg_32Bit LJTEN:1;           /**< \brief [0:0] Load Jump Timer Enable - LJTEN (rw) */
    __IO Ifx_UReg_32Bit LJTOVEN:1;         /**< \brief [1:1] Load Jump Timer Overflow Enable - LJTOVEN (rw) */
    __IO Ifx_UReg_32Bit LJTOVIEN:1;        /**< \brief [2:2] Load Jump Timer Overflow Interrupt Enable - LJTOVIEN (rw) */
    __IO Ifx_UReg_32Bit LJTSTRT:1;         /**< \brief [3:3] Load Jump Timer Start - LJTSTRT (rwh) */
    __IO Ifx_UReg_32Bit LJTSTP:1;          /**< \brief [4:4] Load Jump Timer Stop - LJTSTP (rw) */
    __O  Ifx_UReg_32Bit LJTCLR:1;          /**< \brief [5:5] Load Jump Timer Clear - LJTCLR (w) */
    __IO Ifx_UReg_32Bit DROOPENAB:1;       /**< \brief [6:6] Selection between Load Jump Sequencing Units A or B (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [11:7] \internal Reserved */
    __IO Ifx_UReg_32Bit SDSTEP:4;          /**< \brief [15:12] Droop Voltage Step(vdroop_step_i) - SDSTEP (rw) */
    __IO Ifx_UReg_32Bit VDTEN:1;           /**< \brief [16:16] Voltage Droop Timer Enable - VDTEN (rw) */
    __IO Ifx_UReg_32Bit VDTOVEN:1;         /**< \brief [17:17] Voltage Droop Timer Overflow Enable - VDTOVEN (rw) */
    __IO Ifx_UReg_32Bit VDTOVIEN:1;        /**< \brief [18:18] Voltage Droop Timer Overflow Interrupt Enable - VDTOVIEN (rw) */
    __IO Ifx_UReg_32Bit VDTSTRT:1;         /**< \brief [19:19] Voltage Droop Timer Start - VDTSTRT (rwh) */
    __IO Ifx_UReg_32Bit VDTSTP:1;          /**< \brief [20:20] Voltage Droop Timer Stop - VDTSTP (rw) */
    __O  Ifx_UReg_32Bit VDTCLR:1;          /**< \brief [21:21] Voltage Droop Timer Clear - VDTCLR (w) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_SMM_PMTRCSR0_Bits;

/** \brief Power Management Transition Control and Status Register 1 */
typedef struct _Ifx_SMM_PMTRCSR1_Bits
{
    __IO Ifx_UReg_32Bit LJTCV:16;          /**< \brief [15:0] Load Jump Timer Compare Setpoint Value - LJTCV (rw) */
    __IO Ifx_UReg_32Bit VDTCV:10;          /**< \brief [25:16] Voltage Droop Timer Compare Setpoint Value - VDTCV (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_SMM_PMTRCSR1_Bits;

/** \brief Power Management Transition Control and Status Register 2 */
typedef struct _Ifx_SMM_PMTRCSR2_Bits
{
    __IO Ifx_UReg_32Bit LDJMPREQ:2;        /**< \brief [1:0] Load Jump Request - LDJMPREQ (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __I  Ifx_UReg_32Bit LJTRUN:2;          /**< \brief [5:4] Load Jump Timer Run Status - LJTRUN (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit LJTOV:1;           /**< \brief [8:8] Load Jump Timer Overflow Status - LJTOV (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __O  Ifx_UReg_32Bit LJTOVCLR:1;        /**< \brief [12:12] Load Jump Timer Overflow Status Clear - LJTOVCLR (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit LJTCNT:16;         /**< \brief [31:16] Load Jump Timer Value - LJTCNT (rh) */
} Ifx_SMM_PMTRCSR2_Bits;

/** \brief Power Management Transition Control and Status Register 3 */
typedef struct _Ifx_SMM_PMTRCSR3_Bits
{
    __IO Ifx_UReg_32Bit VDROOPREQ:2;       /**< \brief [1:0] Voltage Droop Request - VDROOPREQ (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __I  Ifx_UReg_32Bit VDTRUN:2;          /**< \brief [5:4] Voltage Droop Timer Run Status - VDTRUN (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit VDTOV:1;           /**< \brief [8:8] Voltage Droop Timer Overflow Status - VDTOV (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __O  Ifx_UReg_32Bit VDTOVCLR:1;        /**< \brief [12:12] Voltage Droop Timer Overflow Status Clear - VDTOVCLR (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit VDTCNT:10;         /**< \brief [25:16] Voltage Droop Timer Value - VDTCNT (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_SMM_PMTRCSR3_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_SMM_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_SMM_PROT_Bits;

/** \brief PROT Initialisation Configuration Register */
typedef struct _Ifx_SMM_PROTINIT_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit PINIT_DONE:1;      /**< \brief [16:16] INIT_DONE signal for locking unused PROTs (rw1s) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_SMM_PROTINIT_Bits;

/** \brief Reset Type Status Register */
typedef struct _Ifx_SMM_RSTSTAT_Bits
{
    __I  Ifx_UReg_32Bit LVD:1;             /**< \brief [0:0] Low Voltage Detector Resets (rh) */
    __I  Ifx_UReg_32Bit PDCLDRST:1;        /**< \brief [1:1] Power Domain Cold Reset (rh) */
    __I  Ifx_UReg_32Bit CLDPORST:1;        /**< \brief [2:2] Cold Power-On Reset (rh) */
    __I  Ifx_UReg_32Bit PORST:1;           /**< \brief [3:3] Warm Power-On Reset (rh) */
    __I  Ifx_UReg_32Bit SYSRST:1;          /**< \brief [4:4] System Reset (rh) */
    __I  Ifx_UReg_32Bit APPRST:1;          /**< \brief [5:5] Application Reset (rh) */
    __I  Ifx_UReg_32Bit DBGRST:1;          /**< \brief [6:6] debug reset (rh) */
    __I  Ifx_UReg_32Bit TRRST:1;           /**< \brief [7:7] trace reset (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMM_RSTSTAT_Bits;

/** \brief Reset Status Clear Register */
typedef struct _Ifx_SMM_RSTSTATCLR_Bits
{
    __O  Ifx_UReg_32Bit CLRC:1;            /**< \brief [0:0] Clear Reset Status - CLRC (w) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [15:1] \internal Reserved */
    __O  Ifx_UReg_32Bit CLRSMUIRF:1;       /**< \brief [16:16] Clear Internal SMU Reset Flag (w) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_SMM_RSTSTATCLR_Bits;

/** \brief Highest Reset Type Status Register */
typedef struct _Ifx_SMM_RSTSTATH_Bits
{
    __I  Ifx_UReg_32Bit LVD:1;             /**< \brief [0:0] Low Voltage Detector Resets (rh) */
    __I  Ifx_UReg_32Bit PDCLDRST:1;        /**< \brief [1:1] Power Domain Cold Reset (rh) */
    __I  Ifx_UReg_32Bit CLDPORST:1;        /**< \brief [2:2] Cold Power-On Reset (rh) */
    __I  Ifx_UReg_32Bit PORST:1;           /**< \brief [3:3] Warm Power-On Reset (rh) */
    __I  Ifx_UReg_32Bit SYSRST:1;          /**< \brief [4:4] System Reset (rh) */
    __I  Ifx_UReg_32Bit APPRST:1;          /**< \brief [5:5] Application Reset (rh) */
    __I  Ifx_UReg_32Bit DBGRST:1;          /**< \brief [6:6] Debug reset (rh) */
    __I  Ifx_UReg_32Bit TRRST:1;           /**< \brief [7:7] Trace reset (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMM_RSTSTATH_Bits;

/** \brief Reset Trigger Control Register A */
typedef struct _Ifx_SMM_RSTTRIGCTRLA_Bits
{
    __IO Ifx_UReg_32Bit ESR0:3;            /**< \brief [2:0] ESR0 Reset Trigger Configuration (rw) */
    __IO Ifx_UReg_32Bit ESR1:3;            /**< \brief [5:3] ESR1 Reset Trigger Configuration (rw) */
    __IO Ifx_UReg_32Bit ESR2:3;            /**< \brief [8:6] ESR2 Reset Trigger Configuration (rw) */
    __IO Ifx_UReg_32Bit SMUSAFE0AR:3;      /**< \brief [11:9] SMU SAFE0 Reset0 Trigger Configuration (rw) */
    __IO Ifx_UReg_32Bit SMUSAFE0SR:3;      /**< \brief [14:12] SMU SAFE0 Reset1 Trigger Configuration (rw) */
    __IO Ifx_UReg_32Bit SMUSAFE1AR:3;      /**< \brief [17:15] SMU SAFE1 Reset0 Trigger Configuration (rw) */
    __IO Ifx_UReg_32Bit SMUSAFE1SR:3;      /**< \brief [20:18] SMU SAFE1 Reset1 Trigger Configuration (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SW:3;              /**< \brief [26:24] SW Reset Request Trigger Reset Configuration - SW (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [29:27] \internal Reserved */
    __IO Ifx_UReg_32Bit PINRST:1;          /**< \brief [30:30] Pin Reset Configuration (rw) */
    __IO Ifx_UReg_32Bit PHYRST:1;          /**< \brief [31:31] Phy Reset Configuration - PHYRST (rw) */
} Ifx_SMM_RSTTRIGCTRLA_Bits;

/** \brief Reset Trigger Control Register B */
typedef struct _Ifx_SMM_RSTTRIGCTRLB_Bits
{
    __IO Ifx_UReg_32Bit STM0:3;            /**< \brief [2:0] STM0 Reset Request Trigger Reset Configuration - STM0 (rw) */
    __IO Ifx_UReg_32Bit STM1:3;            /**< \brief [5:3] STM1 Reset Request Trigger Reset Configuration (If Product has STM1) - STM1 (rw) */
    __IO Ifx_UReg_32Bit STM2:3;            /**< \brief [8:6] STM2 Reset Request Trigger Reset Configuration (If Product has STM2) - STM2 (rw) */
    __IO Ifx_UReg_32Bit STM3:3;            /**< \brief [11:9] STM3 Reset Request Trigger Reset Configuration (If Product has STM3) - STM3 (rw) */
    __IO Ifx_UReg_32Bit STM4:3;            /**< \brief [14:12] STM4 Reset Request Trigger Reset Configuration (If Product has STM4) - STM4 (rw) */
    __IO Ifx_UReg_32Bit STM5:3;            /**< \brief [17:15] STM5 Reset Request Trigger Reset Configuration (If Product has STM5) - STM5 (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_SMM_RSTTRIGCTRLB_Bits;

/** \brief Reset Trigger Control Register C */
typedef struct _Ifx_SMM_RSTTRIGCTRLC_Bits
{
    __IO Ifx_UReg_32Bit SMUSEC:3;          /**< \brief [2:0] SMU SEC Reset Request Trigger Reset Configuration (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_SMM_RSTTRIGCTRLC_Bits;

/** \brief Shut Down Sequence Control Register D */
typedef struct _Ifx_SMM_SHSEQCTRLD_Bits
{
    __I  Ifx_UReg_32Bit FLSS:1;            /**< \brief [0:0] Flash Shutdown State Reached and Acknowledge received (rh) */
    __I  Ifx_UReg_32Bit CSSX:6;            /**< \brief [6:1] CPUx Shutdown State Reached and Acknowledge received (rh) */
    __I  Ifx_UReg_32Bit PPUSS:1;           /**< \brief [7:7] PPU Shutdown State Reached and Acknowledge received (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMM_SHSEQCTRLD_Bits;

/** \brief Reset Trigger Register for SMU related Trigger */
typedef struct _Ifx_SMM_SMURSTSTATA_Bits
{
    __I  Ifx_UReg_32Bit SMU0ALMGRP0:5;     /**< \brief [4:0] Reset Request Trigger Status for Safety related Trigger Group0 of SAFE_SMU0 (rh) */
    __I  Ifx_UReg_32Bit SMU0ALMID0:5;      /**< \brief [9:5] Reset Request Trigger Status for Safety related Trigger ID0 of SAFE_SMU0 (rh) */
    __I  Ifx_UReg_32Bit SMU0ALMGRP1:5;     /**< \brief [14:10] Reset Request Trigger Status for Safety related Trigger Group1 of SAFE_SMU0 (rh) */
    __I  Ifx_UReg_32Bit SMU0ALMID1:5;      /**< \brief [19:15] Reset Request Trigger Status for Safety related Trigger ID1 of SAFE_SMU0 (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_SMM_SMURSTSTATA_Bits;

/** \brief Reset Trigger Register for SMU related Trigger */
typedef struct _Ifx_SMM_SMURSTSTATB_Bits
{
    __I  Ifx_UReg_32Bit SMU1ALMGRP0:5;     /**< \brief [4:0] Reset Request Trigger Status for Safety related Trigger Group0 of SAFE_SMU1 (rh) */
    __I  Ifx_UReg_32Bit SMU1ALMID0:5;      /**< \brief [9:5] Reset Request Trigger Status for Safety related Trigger ID0 of SAFE_SMU1 (rh) */
    __I  Ifx_UReg_32Bit SMU1ALRMGRP1:5;    /**< \brief [14:10] Reset Request Trigger Status for Safety related Trigger Group1 of SAFE_SMU1 (rh) */
    __I  Ifx_UReg_32Bit SMU1ALRMID1:5;     /**< \brief [19:15] Reset Request Trigger Status for Safety related Trigger Group of SAFE_SMU1 (rh) */
    __I  Ifx_UReg_32Bit SMUSECALMGRP:3;    /**< \brief [22:20] Reset Request Trigger Status for Seucrity related Trigger Group of SEC_SMU (rh) */
    __I  Ifx_UReg_32Bit SMUSECALMID:5;     /**< \brief [27:23] Reset Request Trigger Status for Seucrity related Trigger Alarm of SEC_SMU (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_SMM_SMURSTSTATB_Bits;

/** \brief Start-up Configuration Register */
typedef struct _Ifx_SMM_STCON_Bits
{
    __IO Ifx_UReg_32Bit ST_PROT:1;         /**< \brief [0:0] Start-up Protection Setting (rwh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [13:1] \internal Reserved */
    __O  Ifx_UReg_32Bit SFCBAE:1;          /**< \brief [14:14] Set Flash Config. Sector Access Enable (w) */
    __O  Ifx_UReg_32Bit CFCBAE:1;          /**< \brief [15:15] Clear Flash Config. Sector Access Enable (w) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_SMM_STCON_Bits;

/** \brief Start-up Memory Register 1 */
typedef struct _Ifx_SMM_STMEM1_Bits
{
    __IO Ifx_UReg_32Bit RSTSEQ:4;          /**< \brief [3:0] Processed reset sequence by FW (rw) */
    __IO Ifx_UReg_32Bit LBISTEXE:1;        /**< \brief [4:4] LBIST was executed with the current RSTSEQ (rw) */
    __IO Ifx_UReg_32Bit STBYSKP:1;         /**< \brief [5:5] Standby RAMs skipped during RAMINIT (rw) */
    __IO Ifx_UReg_32Bit RAMIN:2;           /**< \brief [7:6] Reserved for BFW usage (rw) */
    __IO Ifx_UReg_32Bit BV:1;              /**< \brief [8:8] BMHD valid flag (rw) */
    __IO Ifx_UReg_32Bit BP:1;              /**< \brief [9:9] Boot configured from pins (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [10:10] \internal Reserved */
    __IO Ifx_UReg_32Bit BIDX:2;            /**< \brief [12:11] Index of the valid BMHD (rw) */
    __IO Ifx_UReg_32Bit BCFG:3;            /**< \brief [15:13] Start up mode effectively taken by SSW (rw) */
    __IO Ifx_UReg_32Bit EMU:1;             /**< \brief [16:16] Device emulation indication (rw) */
    __IO Ifx_UReg_32Bit SCFG:2;            /**< \brief [18:17] SWAP configuration (rw) */
    __IO Ifx_UReg_32Bit ST:1;              /**< \brief [19:19] SWAP target - ST (rw) */
    __IO Ifx_UReg_32Bit SIDX:7;            /**< \brief [26:20] Index x of SWAP entry in UCB_SWAP_ORIG/COPY containing valid marker (rw) */
    __IO Ifx_UReg_32Bit CLK_E:2;           /**< \brief [28:27] Error during CLK handling during Application Reset only (rw) */
    __IO Ifx_UReg_32Bit CON_E:1;           /**< \brief [29:29] CON_E (rw) */
    __IO Ifx_UReg_32Bit CS_E:1;            /**< \brief [30:30] CSRM error flag indicating that CSRM boot was not successful (rw1s) */
    __IO Ifx_UReg_32Bit QME:1;             /**< \brief [31:31] QM entered flag (rw1s) */
} Ifx_SMM_STMEM1_Bits;

/** \brief Start-up Memory Register 2 */
typedef struct _Ifx_SMM_STMEM2_Bits
{
    __IO Ifx_UReg_32Bit MEM0:2;            /**< \brief [1:0] Reserved for BFW usage (rw) */
    __IO Ifx_UReg_32Bit BOOT_ADDR:30;      /**< \brief [31:2] Address of first user-code instruction - BOOT_ADDR (rw) */
} Ifx_SMM_STMEM2_Bits;

/** \brief Start-Up Status Register */
typedef struct _Ifx_SMM_STSTAT_Bits
{
    __I  Ifx_UReg_32Bit HWCFG:8;           /**< \brief [7:0] Hardware Configuration Setting - HWCFG (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [14:8] \internal Reserved */
    __I  Ifx_UReg_32Bit MODE1:1;           /**< \brief [15:15] MODE - MODE1 (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TRSTL:1;           /**< \brief [19:19] TRSTL Status - TRSTL (rh) */
    __I  Ifx_UReg_32Bit SPDEN:1;           /**< \brief [20:20] Single Pin DAP Mode Enable - SPDEN (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __I  Ifx_UReg_32Bit RAMINT:1;          /**< \brief [24:24] RAM Content Security Integrity - RAMINT (rh) */
    __I  Ifx_UReg_32Bit MODE2:1;           /**< \brief [25:25] MODE - MODE2 (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_SMM_STSTAT_Bits;

/** \brief Software Reset Control Register */
typedef struct _Ifx_SMM_SWRSTCON_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __O  Ifx_UReg_32Bit SWRSTREQ:1;        /**< \brief [1:1] Software Reset Request - SWRSTREQ (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_SMM_SWRSTCON_Bits;

/** \brief System Control Register */
typedef struct _Ifx_SMM_SYSCON_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __O  Ifx_UReg_32Bit RAMINTM:2;         /**< \brief [3:2] RAM Integrity Modify - RAMINTM (w) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit DDC:1;             /**< \brief [8:8] Disable DXCPL - DDC (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_SMM_SYSCON_Bits;

/** \brief User Info Storage Register */
typedef struct _Ifx_SMM_USRINFO_Bits
{
    __IO Ifx_UReg_32Bit USRINFO:32;        /**< \brief [31:0] User Information (rw) */
} Ifx_SMM_USRINFO_Bits;

/** \brief Reset Trigger Status Register for Warm Reset Events */
typedef struct _Ifx_SMM_WRMRSTTRIG_Bits
{
    __I  Ifx_UReg_32Bit ESR0:1;            /**< \brief [0:0] Reset Request Trigger Reset Status for ESR0 pin (rh) */
    __I  Ifx_UReg_32Bit ESR1:1;            /**< \brief [1:1] Reset Request Trigger Reset Status for ESR1 pin (rh) */
    __I  Ifx_UReg_32Bit ESR2:1;            /**< \brief [2:2] Reset Request Trigger Reset Status for ESR2 pin (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit SMUSAFE0AR:1;      /**< \brief [4:4] Application Reset Request Trigger Reset Status for SMU SAFE0 (rh) */
    __I  Ifx_UReg_32Bit SMUSAFE0SR:1;      /**< \brief [5:5] System Reset Request Trigger Reset Status for SMU SAFE0 (rh) */
    __I  Ifx_UReg_32Bit SMUSAFE1AR:1;      /**< \brief [6:6] Application Reset Request Trigger Reset Status for SMU SAFE1 (rh) */
    __I  Ifx_UReg_32Bit SMUSAFE1SR:1;      /**< \brief [7:7] System Reset Request Trigger Reset Status for SMU SAFE1 (rh) */
    __I  Ifx_UReg_32Bit SMUSEC:1;          /**< \brief [8:8] Reset Request Trigger Reset Status for Secure Safety Management Unit (rh) */
    __I  Ifx_UReg_32Bit SW:1;              /**< \brief [9:9] Reset Request Trigger Reset Status for Software reset request (rh) */
    __I  Ifx_UReg_32Bit STM0:1;            /**< \brief [10:10] Reset Request Trigger Reset Status for STM0 Compare Match (rh) */
    __I  Ifx_UReg_32Bit STM1:1;            /**< \brief [11:11] Reset Request Trigger Reset Status for STM1 Compare Match (rh) */
    __I  Ifx_UReg_32Bit STM2:1;            /**< \brief [12:12] Reset Request Trigger Reset Status for STM2 Compare Match (If Product has STM2) (rh) */
    __I  Ifx_UReg_32Bit STM3:1;            /**< \brief [13:13] Reset Request Trigger Reset Status for STM3 Compare Match (If Product has STM3) (rh) */
    __I  Ifx_UReg_32Bit STM4:1;            /**< \brief [14:14] Reset Request Trigger Reset Status for STM4 Compare Match (If Product has STM4) (rh) */
    __I  Ifx_UReg_32Bit STM5:1;            /**< \brief [15:15] Reset Request Trigger Reset Status for STM5 Compare Match (If Product has STM5) (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __I  Ifx_UReg_32Bit CB0:1;             /**< \brief [18:18] Reset Request Trigger Status for Cerberus System Reset from Debug tool (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __I  Ifx_UReg_32Bit CB3:1;             /**< \brief [20:20] Reset Request Trigger Status for Cerberus Application Reset from Debug tool (rh) */
    __I  Ifx_UReg_32Bit DWR:1;             /**< \brief [21:21] Reset Request Trigger Reset Status for Double SMU Reset (Double Watchdog Reset) (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [28:22] \internal Reserved */
    __I  Ifx_UReg_32Bit LBPORST:1;         /**< \brief [29:29] LBIST termination due to PORST (rh) */
    __I  Ifx_UReg_32Bit LBTERM:1;          /**< \brief [30:30] LBIST was properly terminated (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMM_WRMRSTTRIG_Bits;

/** \brief Highest Reset Trigger Status Register for Warm Reset Events */
typedef struct _Ifx_SMM_WRMRSTTRIGH_Bits
{
    __I  Ifx_UReg_32Bit ESR0:1;            /**< \brief [0:0] Reset Request Trigger Reset Status for ESR0 pin (rh) */
    __I  Ifx_UReg_32Bit ESR1:1;            /**< \brief [1:1] Reset Request Trigger Reset Status for ESR1 pin (rh) */
    __I  Ifx_UReg_32Bit ESR2:1;            /**< \brief [2:2] Reset Request Trigger Reset Status for ESR2 pin (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit SMUSAFE0AR:1;      /**< \brief [4:4] Application Reset Request Trigger Reset Status for SMU SAFE0 (rh) */
    __I  Ifx_UReg_32Bit SMUSAFE0SR:1;      /**< \brief [5:5] System Reset Request Trigger Reset Status for SMU SAFE0 (rh) */
    __I  Ifx_UReg_32Bit SMUSAFE1AR:1;      /**< \brief [6:6] Application Reset Request Trigger Reset Status for SMU SAFE1 (rh) */
    __I  Ifx_UReg_32Bit SMUSAFE1SR:1;      /**< \brief [7:7] System Reset Request Trigger Reset Status for SMU SAFE1 (rh) */
    __I  Ifx_UReg_32Bit SMUSEC:1;          /**< \brief [8:8] Reset Request Trigger Reset Status for Secure Safety Management Unit (rh) */
    __I  Ifx_UReg_32Bit SW:1;              /**< \brief [9:9] Reset Request Trigger Reset Status for Software reset request (rh) */
    __I  Ifx_UReg_32Bit STM0:1;            /**< \brief [10:10] Reset Request Trigger Reset Status for STM0 Compare Match (rh) */
    __I  Ifx_UReg_32Bit STM1:1;            /**< \brief [11:11] Reset Request Trigger Reset Status for STM1 Compare Match (rh) */
    __I  Ifx_UReg_32Bit STM2:1;            /**< \brief [12:12] Reset Request Trigger Reset Status for STM2 Compare Match (If Product has STM2) (rh) */
    __I  Ifx_UReg_32Bit STM3:1;            /**< \brief [13:13] Reset Request Trigger Reset Status for STM3 Compare Match (If Product has STM3) (rh) */
    __I  Ifx_UReg_32Bit STM4:1;            /**< \brief [14:14] Reset Request Trigger Reset Status for STM4 Compare Match (If Product has STM4) (rh) */
    __I  Ifx_UReg_32Bit STM5:1;            /**< \brief [15:15] Reset Request Trigger Reset Status for STM5 Compare Match (If Product has STM5) (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __I  Ifx_UReg_32Bit CB0:1;             /**< \brief [18:18] Reset Request Trigger Status for Cerberus System Reset from Debug tool (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __I  Ifx_UReg_32Bit CB3:1;             /**< \brief [20:20] Reset Request Trigger Status for Cerberus Application Reset from Debug tool (rh) */
    __I  Ifx_UReg_32Bit DWR:1;             /**< \brief [21:21] Reset Request Trigger Reset Status for Double SMU Reset (Double Watchdog Reset) (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [28:22] \internal Reserved */
    __I  Ifx_UReg_32Bit LBPORST:1;         /**< \brief [29:29] LBIST termination due to PORST (rh) */
    __I  Ifx_UReg_32Bit LBTERM:1;          /**< \brief [30:30] LBIST was properly terminated (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMM_WRMRSTTRIGH_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_smm_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_SMM_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_SMM_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_SMM_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_SMM_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_SMM_ACCEN_WRB_FPI;

/** \brief Power Management Droop Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_DRPCTRL_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_DRPCTRL;

/** \brief ESR0 Pad configuration Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_DRVCFGESR0_Bits B;             /**< \brief Bitfield access */
} Ifx_SMM_DRVCFGESR0;

/** \brief ESR1 Pad configuration Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_DRVCFGESR1_Bits B;             /**< \brief Bitfield access */
} Ifx_SMM_DRVCFGESR1;

/** \brief ESR0 Reset Output Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ESR0CFG_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_ESR0CFG;

/** \brief ESR0 Reset Counter Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ESR0CNTCTRL_Bits B;            /**< \brief Bitfield access */
} Ifx_SMM_ESR0CNTCTRL;

/** \brief ESR0 Input Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ESRCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_SMM_ESRCFG;

/** \brief ESR0 GPIO Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_GPIOESR0_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_GPIOESR0;

/** \brief ESR1 GPIO Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_GPIOESR1_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_GPIOESR1;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_SMM_ID;

/** \brief Pad Disable Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PDISC_Bits B;                  /**< \brief Bitfield access */
} Ifx_SMM_PDISC;

/** \brief Power Management Control and Status Register for CPU0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMCSR_Bits B;                  /**< \brief Bitfield access */
} Ifx_SMM_PMCSR;

/** \brief Power Management Control and Status Register for CPUcs in CSRM subystem   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMCSRCS_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_PMCSRCS;

/** \brief Power Management Status Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMSTAT0_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_PMSTAT0;

/** \brief Standby and Wake-up Control Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMSWCR1_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_PMSWCR1;

/** \brief Power Management Transition Control and Status Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMTRCSR0_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_PMTRCSR0;

/** \brief Power Management Transition Control and Status Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMTRCSR1_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_PMTRCSR1;

/** \brief Power Management Transition Control and Status Register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMTRCSR2_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_PMTRCSR2;

/** \brief Power Management Transition Control and Status Register 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PMTRCSR3_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_PMTRCSR3;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_SMM_PROT;

/** \brief PROT Initialisation Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_PROTINIT_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_PROTINIT;

/** \brief Reset Type Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_RSTSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_RSTSTAT;

/** \brief Reset Status Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_RSTSTATCLR_Bits B;             /**< \brief Bitfield access */
} Ifx_SMM_RSTSTATCLR;

/** \brief Highest Reset Type Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_RSTSTATH_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_RSTSTATH;

/** \brief Reset Trigger Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_RSTTRIGCTRLA_Bits B;           /**< \brief Bitfield access */
} Ifx_SMM_RSTTRIGCTRLA;

/** \brief Reset Trigger Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_RSTTRIGCTRLB_Bits B;           /**< \brief Bitfield access */
} Ifx_SMM_RSTTRIGCTRLB;

/** \brief Reset Trigger Control Register C   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_RSTTRIGCTRLC_Bits B;           /**< \brief Bitfield access */
} Ifx_SMM_RSTTRIGCTRLC;

/** \brief Shut Down Sequence Control Register D   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_SHSEQCTRLD_Bits B;             /**< \brief Bitfield access */
} Ifx_SMM_SHSEQCTRLD;

/** \brief Reset Trigger Register for SMU related Trigger   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_SMURSTSTATA_Bits B;            /**< \brief Bitfield access */
} Ifx_SMM_SMURSTSTATA;

/** \brief Reset Trigger Register for SMU related Trigger   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_SMURSTSTATB_Bits B;            /**< \brief Bitfield access */
} Ifx_SMM_SMURSTSTATB;

/** \brief Start-up Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_STCON_Bits B;                  /**< \brief Bitfield access */
} Ifx_SMM_STCON;

/** \brief Start-up Memory Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_STMEM1_Bits B;                 /**< \brief Bitfield access */
} Ifx_SMM_STMEM1;

/** \brief Start-up Memory Register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_STMEM2_Bits B;                 /**< \brief Bitfield access */
} Ifx_SMM_STMEM2;

/** \brief Start-Up Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_STSTAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_SMM_STSTAT;

/** \brief Software Reset Control Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_SWRSTCON_Bits B;               /**< \brief Bitfield access */
} Ifx_SMM_SWRSTCON;

/** \brief System Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_SYSCON_Bits B;                 /**< \brief Bitfield access */
} Ifx_SMM_SYSCON;

/** \brief User Info Storage Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_USRINFO_Bits B;                /**< \brief Bitfield access */
} Ifx_SMM_USRINFO;

/** \brief Reset Trigger Status Register for Warm Reset Events   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_WRMRSTTRIG_Bits B;             /**< \brief Bitfield access */
} Ifx_SMM_WRMRSTTRIG;

/** \brief Highest Reset Trigger Status Register for Warm Reset Events   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMM_WRMRSTTRIGH_Bits B;            /**< \brief Bitfield access */
} Ifx_SMM_WRMRSTTRIGH;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Smm_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_SMM_ACCEN
{
       __IO Ifx_SMM_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_SMM_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_SMM_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_SMM_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_SMM_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_SMM_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SMM_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Smm_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_SMM_ACCENCS
{
       __IO Ifx_SMM_ACCEN_WRA                   WRA;                    /**< \brief 0, ACCENCS write access enable register A*/
       __IO Ifx_SMM_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, ACCENCS write access enable register B*/
       __IO Ifx_SMM_ACCEN_RDA                   RDA;                    /**< \brief 8, ACCENCS read access enable register A*/
       __IO Ifx_SMM_ACCEN_RDB_FPI               RDB;                    /**< \brief C, ACCENCS read access enable register B*/
       __IO Ifx_SMM_ACCEN_VM                    VM;                     /**< \brief 10, ACCENCS VM access enable register*/
       __IO Ifx_SMM_ACCEN_PRS                   PRS;                    /**< \brief 14, ACCENCS PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SMM_ACCENCS;

/******************************************************************************/
/** \addtogroup IfxSfr_Smm_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief SMM object */
typedef volatile struct _Ifx_SMM
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_SMM_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_SMM_PROT                        PROTE;                  /**< \brief C, PROT Register Endinit*/
       __IO Ifx_SMM_PROT                        PROTSE;                 /**< \brief 10, PROT Register Safe Endinit*/
       __IO Ifx_SMM_PROT                        PROTCSE;                /**< \brief 14, PROT Register Cyber-Secure Endinit*/
       __IO Ifx_SMM_ACCEN                       ACCEN;                  /**< \brief 18, */
       __IO Ifx_SMM_ACCENCS                     ACCENCS;                /**< \brief 38, SCU APU for general cyber-secure resources*/
       __IO Ifx_SMM_PROT                        PROTCE;                 /**< \brief 58, PROT Register Cyber-Secure Endinit*/
       __IO Ifx_SMM_PROT                        PROTCPU[6];             /**< \brief 5C, PROT Register for PMCSR0 Idle control*/
       __IO Ifx_SMM_PMCSR                       PMCSR[6];               /**< \brief 74, Power Management Control and Status Register for CPU0*/
       __IO Ifx_SMM_PMCSRCS                     PMCSRCS;                /**< \brief 8C, Power Management Control and Status Register for CPUcs in CSRM subystem*/
       __I  Ifx_UReg_8Bit                       reserved_90[4];         /**< \brief 90, \internal Reserved */
       __IO Ifx_SMM_PMSWCR1                     PMSWCR1;                /**< \brief 94, Standby and Wake-up Control Register 1*/
       __IO Ifx_SMM_PMTRCSR0                    PMTRCSR0;               /**< \brief 98, Power Management Transition Control and Status Register 0*/
       __IO Ifx_SMM_PMTRCSR1                    PMTRCSR1;               /**< \brief 9C, Power Management Transition Control and Status Register 1*/
       __IO Ifx_SMM_PMTRCSR2                    PMTRCSR2;               /**< \brief A0, Power Management Transition Control and Status Register 2*/
       __IO Ifx_SMM_PMTRCSR3                    PMTRCSR3;               /**< \brief A4, Power Management Transition Control and Status Register 3*/
       __I  Ifx_UReg_8Bit                       reserved_A8[4];         /**< \brief A8, \internal Reserved */
       __I  Ifx_SMM_PMSTAT0                     PMSTAT0;                /**< \brief AC, Power Management Status Register 0*/
       __IO Ifx_SMM_DRPCTRL                     DRPCTRL;                /**< \brief B0, Power Management Droop Control and Status Register*/
       __I  Ifx_SMM_STSTAT                      STSTAT;                 /**< \brief B4, Start-Up Status Register*/
       __IO Ifx_SMM_SYSCON                      SYSCON;                 /**< \brief B8, System Control Register*/
       __IO Ifx_SMM_STCON                       STCON;                  /**< \brief BC, Start-up Configuration Register*/
       __O  Ifx_SMM_SWRSTCON                    SWRSTCON;               /**< \brief C0, Software Reset Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_C4[4];         /**< \brief C4, \internal Reserved */
       __IO Ifx_SMM_STMEM1                      STMEM1;                 /**< \brief C8, Start-up Memory Register 1*/
       __IO Ifx_SMM_STMEM2                      STMEM2;                 /**< \brief CC, Start-up Memory Register 2*/
       __I  Ifx_UReg_8Bit                       reserved_D0[36];        /**< \brief D0, \internal Reserved */
       __I  Ifx_SMM_SHSEQCTRLD                  SHSEQCTRLD;             /**< \brief F4, Shut Down Sequence Control Register D*/
       __I  Ifx_UReg_8Bit                       reserved_F8[4];         /**< \brief F8, \internal Reserved */
       __I  Ifx_SMM_WRMRSTTRIG                  WRMRSTTRIG;             /**< \brief FC, Warm Reset Trigger Status Register*/
       __I  Ifx_SMM_WRMRSTTRIGH                 WRMRSTTRIGH;            /**< \brief 100, Warm Reset Highest Trigger Status Register*/
       __I  Ifx_SMM_RSTSTAT                     RSTSTAT;                /**< \brief 104, Reset Type Status Register*/
       __I  Ifx_SMM_RSTSTATH                    RSTSTATH;               /**< \brief 108, Highest Reset Type Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_10C[4];        /**< \brief 10C, \internal Reserved */
       __O  Ifx_SMM_RSTSTATCLR                  RSTSTATCLR;             /**< \brief 110, Reset Status Clear Register*/
       __IO Ifx_SMM_RSTTRIGCTRLA                RSTTRIGCTRLA;           /**< \brief 114, Reset Trigger Control Register A*/
       __IO Ifx_SMM_RSTTRIGCTRLB                RSTTRIGCTRLB;           /**< \brief 118, Reset Trigger Control Register B*/
       __IO Ifx_SMM_RSTTRIGCTRLC                RSTTRIGCTRLC;           /**< \brief 11C, Reset Trigger Control Register C*/
       __I  Ifx_SMM_SMURSTSTATA                 SMURSTSTATA;            /**< \brief 120, SMU Reset Trigger Status Register A*/
       __I  Ifx_SMM_SMURSTSTATB                 SMURSTSTATB;            /**< \brief 124, SMU Reset Trigger Status Register B*/
       __IO Ifx_SMM_USRINFO                     USRINFO;                /**< \brief 128, User Info Storage Register*/
       __IO Ifx_SMM_PDISC                       PDISC;                  /**< \brief 12C, Pad Disable Control Register*/
       __IO Ifx_SMM_ESR0CFG                     ESR0CFG;                /**< \brief 130, ESR0 Reset Output Configuration Register*/
       __IO Ifx_SMM_ESRCFG                      ESRCFG[3];              /**< \brief 134, ESR0 Input Configuration Register*/
       __IO Ifx_SMM_ESR0CNTCTRL                 ESR0CNTCTRL;            /**< \brief 140, ESR0 Reset Counter Control Register*/
       __IO Ifx_SMM_GPIOESR0                    GPIOESR0;               /**< \brief 144, ESR0 GPIO Control Register*/
       __IO Ifx_SMM_DRVCFGESR0                  DRVCFGESR0;             /**< \brief 148, ESR0 Pad configuration Control Register*/
       __IO Ifx_SMM_GPIOESR1                    GPIOESR1;               /**< \brief 14C, ESR1 GPIO Control Register*/
       __IO Ifx_SMM_DRVCFGESR1                  DRVCFGESR1;             /**< \brief 150, ESR1 Pad configuration Control Register*/
       __IO Ifx_SMM_PROTINIT                    PROTINIT;               /**< \brief 154, PROT Initialisation Configuration Register*/
       __I  Ifx_UReg_8Bit                       reserved_158[16040];    /**< \brief 158, \internal Reserved */
} Ifx_SMM;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXSMM_REGDEF_H */
