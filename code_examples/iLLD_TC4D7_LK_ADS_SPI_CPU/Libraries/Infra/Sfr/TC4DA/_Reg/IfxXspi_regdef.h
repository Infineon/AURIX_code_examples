/**
 * \file IfxXspi_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_XSPI/V0.2.2.0.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Xspi_Registers Xspi Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Xspi_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Xspi_Registers
 * 
 * \defgroup IfxSfr_Xspi_Registers_union Register unions
 * \ingroup IfxSfr_Xspi_Registers
 * 
 * \defgroup IfxSfr_Xspi_Registers_struct Memory map
 * \ingroup IfxSfr_Xspi_Registers
 */
#ifndef IFXXSPI_REGDEF_H
#define IFXXSPI_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Xspi_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_XSPI_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_XSPI_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_XSPI_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_XSPI_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_XSPI_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_XSPI_ACCEN_RDB_SRI_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_XSPI_ACCEN_RGNLA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:26;           /**< \brief [31:6] Bits 31 to 6 of the lower bound of the access protected region (rw) */
} Ifx_XSPI_ACCEN_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_XSPI_ACCEN_RGNUA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:26;           /**< \brief [31:6] Bits 31 to 6 of the upper bound of the access protected region (rw) */
} Ifx_XSPI_ACCEN_RGNUA_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_XSPI_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_XSPI_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_XSPI_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_XSPI_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_XSPI_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_XSPI_ACCEN_WRB_SRI_Bits;

/** \brief AXI Address Register 0 */
typedef struct _Ifx_XSPI_AXIAR0_Bits
{
    __IO Ifx_UReg_32Bit AXIAR_0_31:32;     /**< \brief [31:0] LSB for AXI address for DMA operation (rw) */
} Ifx_XSPI_AXIAR0_Bits;

/** \brief Source Burst Length */
typedef struct _Ifx_XSPI_AXIARLEN_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ARLEN:8;           /**< \brief [15:8] Source Burst Length (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_AXIARLEN_Bits;

/** \brief Destination Burst Length */
typedef struct _Ifx_XSPI_AXIAWLEN_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit AWLEN:8;           /**< \brief [15:8] Destination Burst Length (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_AXIAWLEN_Bits;

/** \brief AXI Master Error Interrupt Clear Register */
typedef struct _Ifx_XSPI_AXIECR_Bits
{
    __I  Ifx_UReg_32Bit AXIECR:1;          /**< \brief [0:0] Clear AXI Error Interrupt (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_AXIECR_Bits;

/** \brief AXI Clock domain FSM time out register */
typedef struct _Ifx_XSPI_AXIFSMTOCR_Bits
{
    __IO Ifx_UReg_32Bit TOV:16;            /**< \brief [15:0] Time Out Value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_AXIFSMTOCR_Bits;

/** \brief Baud Rate Select */
typedef struct _Ifx_XSPI_BAUDR_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SCKDV:15;          /**< \brief [15:1] SSI Clock Divider (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_BAUDR_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_XSPI_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_XSPI_CLC_Bits;

/** \brief Control Register 0 */
typedef struct _Ifx_XSPI_CTRLR0_Bits
{
    __IO Ifx_UReg_32Bit DFS:5;             /**< \brief [4:0] Data Frame Size (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_32Bit FRF:2;             /**< \brief [7:6] Frame Format (rw) */
    __IO Ifx_UReg_32Bit SCPH:1;            /**< \brief [8:8] Serial Clock Phase (rw) */
    __IO Ifx_UReg_32Bit SCPOL:1;           /**< \brief [9:9] Serial Clock Polarity (rw) */
    __IO Ifx_UReg_32Bit TMOD:2;            /**< \brief [11:10] Transfer Mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [12:12] \internal Reserved */
    __IO Ifx_UReg_32Bit SRL:1;             /**< \brief [13:13] Shift Register Loop (rw) */
    __IO Ifx_UReg_32Bit SSTE:1;            /**< \brief [14:14] Slave Select Toggle Enable (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [21:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SPI_FRF:2;         /**< \brief [23:22] SPI Frame Format (rw) */
    __IO Ifx_UReg_32Bit SPI_HYPERBUS_EN:1;    /**< \brief [24:24] SPI Hyperbus Frame format enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [25:25] \internal Reserved */
    __IO Ifx_UReg_32Bit CLK_LOOP_EN:1;     /**< \brief [26:26] Clock loop back enable bit (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit SSI_IS_MST:1;      /**< \brief [31:31] This field selects if xSPI is working in Master or Slave mode (rw) */
} Ifx_XSPI_CTRLR0_Bits;

/** \brief Control Register 1 */
typedef struct _Ifx_XSPI_CTRLR1_Bits
{
    __IO Ifx_UReg_32Bit NDF:16;            /**< \brief [15:0] Number of Data Frames (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_CTRLR1_Bits;

/** \brief Control Register 2 */
typedef struct _Ifx_XSPI_CTRLR2_Bits
{
    __IO Ifx_UReg_32Bit PORTSEL:1;         /**< \brief [0:0] Port selection (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_CTRLR2_Bits;

/** \brief DDR_DRIVE_EDGE - Transmit Drive Edge Register */
typedef struct _Ifx_XSPI_DDR_DRIVE_EDGE_Bits
{
    __IO Ifx_UReg_32Bit TDE:8;             /**< \brief [7:0] TXD Drive edge register which decided the driving edge of transmit data (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_XSPI_DDR_DRIVE_EDGE_Bits;

/** \brief DMA Control Register */
typedef struct _Ifx_XSPI_DMACR_Bits
{
    __I  Ifx_UReg_32Bit RDMAE:1;           /**< \brief [0:0] Receive DMA Enable (r) */
    __I  Ifx_UReg_32Bit TDMAE:1;           /**< \brief [1:1] Transmit DMA Enable (r) */
    __IO Ifx_UReg_32Bit IDMAE:1;           /**< \brief [2:2] Internal DMA Enable (rw) */
    __IO Ifx_UReg_32Bit ATW:2;             /**< \brief [4:3] AXI transfer width for DMA transfers mapped to arsize/awsize (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_32Bit AINC:1;            /**< \brief [6:6] Address Increment (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit ACACHE:4;          /**< \brief [11:8] AXI arcache/awcache signal value (rw) */
    __IO Ifx_UReg_32Bit APROT:3;           /**< \brief [14:12] AXI arprot/awprot signal value (rw) */
    __IO Ifx_UReg_32Bit AID:4;             /**< \brief [18:15] AXI awid/arid signal value (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_XSPI_DMACR_Bits;

/** \brief Transfer Done Clear Interrupt Clear Register */
typedef struct _Ifx_XSPI_DONECR_Bits
{
    __I  Ifx_UReg_32Bit DONECR:1;          /**< \brief [0:0] Clear Transfer Done Interrupt (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_DONECR_Bits;

/** \brief xSPI  Data Register 0 */
typedef struct _Ifx_XSPI_DR_Bits
{
    __IO Ifx_UReg_32Bit DR:32;             /**< \brief [31:0] Data Register (rw) */
} Ifx_XSPI_DR_Bits;

/** \brief Interrupt Clear Register */
typedef struct _Ifx_XSPI_ICR_Bits
{
    __I  Ifx_UReg_32Bit ICR:1;             /**< \brief [0:0] Clear Interrupts (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_ICR_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_XSPI_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_XSPI_ID_Bits;

/** \brief Interrupt Mask Register */
typedef struct _Ifx_XSPI_IMR_Bits
{
    __IO Ifx_UReg_32Bit TXEIM:1;           /**< \brief [0:0] Transmit FIFO Empty Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit TXOIM:1;           /**< \brief [1:1] Transmit FIFO Overflow Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXUIM:1;           /**< \brief [2:2] Receive FIFO Underflow Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXOIM:1;           /**< \brief [3:3] Receive FIFO Overflow Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit RXFIM:1;           /**< \brief [4:4] Receive FIFO Full Interrupt Mask0 (rw) */
    __IO Ifx_UReg_32Bit MSTIM:1;           /**< \brief [5:5] Multi-Master Contention Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit XRXOIM:1;          /**< \brief [6:6] XIP Receive FIFO Overflow Interrupt Mask (r) */
    __IO Ifx_UReg_32Bit TXUIM:1;           /**< \brief [7:7] Transmit FIFO Underflow Interrupt Mask (rw) */
    __IO Ifx_UReg_32Bit AXIEM:1;           /**< \brief [8:8] AXI Error Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __I  Ifx_UReg_32Bit SPITEM:1;          /**< \brief [10:10] SPI Transmit Error Interrupt Mask (r) */
    __IO Ifx_UReg_32Bit DONEM:1;           /**< \brief [11:11] SSI Done Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_XSPI_IMR_Bits;

/** \brief Error handling interrupt/alarm clear */
typedef struct _Ifx_XSPI_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit A2SDCLR:1;         /**< \brief [0:0] Clear the A2SDAT bit. (w) */
    __O  Ifx_UReg_32Bit A2SACLR:1;         /**< \brief [1:1] Clear the A2SADDR bit. (w) */
    __O  Ifx_UReg_32Bit S2FDCLR:1;         /**< \brief [2:2] Clear the S2FDAT bit. (w) */
    __O  Ifx_UReg_32Bit S2FACLR:1;         /**< \brief [3:3] Clear the S2FADDR bit. (w) */
    __O  Ifx_UReg_32Bit FPIMCLR:1;         /**< \brief [4:4] Clear the FPIMST bit. (w) */
    __O  Ifx_UReg_32Bit FPISCLR:1;         /**< \brief [5:5] Clear the FPISLV bit. (w) */
    __O  Ifx_UReg_32Bit WRERRCLR:1;        /**< \brief [6:6] Write error on slave interface Clear (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_XSPI_INTCLR_Bits;

/** \brief Error handling interrupt/alarm mask */
typedef struct _Ifx_XSPI_INTMSK_Bits
{
    __IO Ifx_UReg_32Bit A2SDMSK:1;         /**< \brief [0:0] A2SDAT interrupt mask (rw) */
    __IO Ifx_UReg_32Bit A2SAMSK:1;         /**< \brief [1:1] A2SADDR interrupt mask (rw) */
    __IO Ifx_UReg_32Bit S2FDMSK:1;         /**< \brief [2:2] S2FDAT interrupt mask (rw) */
    __IO Ifx_UReg_32Bit S2FAMSK:1;         /**< \brief [3:3] S2FADDR interrupt mask (rw) */
    __IO Ifx_UReg_32Bit AXIPECMSK:1;       /**< \brief [4:4] AXI parity failure interrupt mask register (rw) */
    __IO Ifx_UReg_32Bit DPPECMSK:1;        /**< \brief [5:5] Data path Parity checker error mask (rw) */
    __IO Ifx_UReg_32Bit REGERRMSK:1;       /**< \brief [6:6] Register space error mask (rw) */
    __IO Ifx_UReg_32Bit SLVIFAPEMSK:1;     /**< \brief [7:7] AHB address parity failure interrupt mask (rw) */
    __IO Ifx_UReg_32Bit AXICEMSK:1;        /**< \brief [8:8] AXI Master Interface ECC correctable error mask (rw) */
    __IO Ifx_UReg_32Bit AXIUEMSK:1;        /**< \brief [9:9] AXI Master Interface ECC uncorrectable error mask (rw) */
    __IO Ifx_UReg_32Bit SLVIFDPEMSK:1;     /**< \brief [10:10] AHB write data parity failure interrupt mask (rw) */
    __IO Ifx_UReg_32Bit FSMPEMSK:1;        /**< \brief [11:11] FSM Parity Error mask (rw) */
    __IO Ifx_UReg_32Bit AXIFSMTOMSK:1;     /**< \brief [12:12] AXI clock domain FSM time out error mask (rw) */
    __IO Ifx_UReg_32Bit AXIVRPECMSK:1;     /**< \brief [13:13] AXI Valid/Ready Parity Error status mask (rw) */
    __IO Ifx_UReg_32Bit FPIMMSK:1;         /**< \brief [14:14] FPIMST interrupt mask (rw) */
    __IO Ifx_UReg_32Bit FPISMSK:1;         /**< \brief [15:15] FPISLV interrupt mask (rw) */
    __IO Ifx_UReg_32Bit WRERRMSK:1;        /**< \brief [16:16] Write error on slave interface mask (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_XSPI_INTMSK_Bits;

/** \brief Error handling control */
typedef struct _Ifx_XSPI_INTSTAT_Bits
{
    __I  Ifx_UReg_32Bit A2SDAT:1;          /**< \brief [0:0] Error detected during the data phase in the A2S bridge (rh) */
    __I  Ifx_UReg_32Bit A2SADDR:1;         /**< \brief [1:1] Error detected during the address phase in the A2S bridge (rh) */
    __I  Ifx_UReg_32Bit S2FDAT:1;          /**< \brief [2:2] Error detected during the data phase in the S2F bridge. (rh) */
    __I  Ifx_UReg_32Bit S2FADDR:1;         /**< \brief [3:3] Error detected during the address phase in the S2F bridge. (rh) */
    __I  Ifx_UReg_32Bit FPIMST:1;          /**< \brief [4:4] Error related to UBS issues in FPI master from S2F bridge (rh) */
    __I  Ifx_UReg_32Bit FPISLV:1;          /**< \brief [5:5] Error signal generated by UBS (rh) */
    __I  Ifx_UReg_32Bit WRERR:1;           /**< \brief [6:6] Write error on slave interface (rh) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_XSPI_INTSTAT_Bits;

/** \brief Interrupt Status Register */
typedef struct _Ifx_XSPI_ISR_Bits
{
    __I  Ifx_UReg_32Bit TXEIS:1;           /**< \brief [0:0] Transmit FIFO Empty Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXOIS:1;           /**< \brief [1:1] Transmit FIFO Overflow Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUIS:1;           /**< \brief [2:2] Receive FIFO Underflow Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXOIS:1;           /**< \brief [3:3] Receive FIFO Overflow Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXFIS:1;           /**< \brief [4:4] Receive FIFO Full Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MSTIS:1;           /**< \brief [5:5] Multi-Master Contention Interrupt Status (r) */
    __I  Ifx_UReg_32Bit XRXOIS:1;          /**< \brief [6:6] XIP Receive FIFO Overflow Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXUIS:1;           /**< \brief [7:7] Transmit FIFO Underflow Interrupt Status (r) */
    __I  Ifx_UReg_32Bit AXIES:1;           /**< \brief [8:8] AXI Error Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __I  Ifx_UReg_32Bit SPITES:1;          /**< \brief [10:10] SPI Transmit Error Interrupt (r) */
    __I  Ifx_UReg_32Bit DONES:1;           /**< \brief [11:11] SSI Done Interrupt Status (r) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_XSPI_ISR_Bits;

/** \brief Multi-Master Interrupt Clear Register */
typedef struct _Ifx_XSPI_MSTICR_Bits
{
    __I  Ifx_UReg_32Bit MSTICR:1;          /**< \brief [0:0] Clear Multi-Master Contention Interrupt (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_MSTICR_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_XSPI_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_XSPI_PROT_Bits;

/** \brief Raw Interrupt Status Register */
typedef struct _Ifx_XSPI_RISR_Bits
{
    __I  Ifx_UReg_32Bit TXEIR:1;           /**< \brief [0:0] Transmit FIFO Empty Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXOIR:1;           /**< \brief [1:1] Transmit FIFO Overflow Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXUIR:1;           /**< \brief [2:2] Receive FIFO Underflow Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXOIR:1;           /**< \brief [3:3] Receive FIFO Overflow Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit RXFIR:1;           /**< \brief [4:4] Receive FIFO Full Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit MSTIR:1;           /**< \brief [5:5] Multi-Master Contention Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit XRXOIR:1;          /**< \brief [6:6] XIP Receive FIFO Overflow Raw Interrupt Status (r) */
    __I  Ifx_UReg_32Bit TXUIR:1;           /**< \brief [7:7] Transmit FIFO Underflow Interrupt Raw Status (r) */
    __I  Ifx_UReg_32Bit AXIER:1;           /**< \brief [8:8] AXI Error Interrupt Raw Status (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __I  Ifx_UReg_32Bit SPITER:1;          /**< \brief [10:10] SPI Transmit Error Interrupt status (r) */
    __I  Ifx_UReg_32Bit DONER:1;           /**< \brief [11:11] SSI Done Interrupt Raw Status (r) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_XSPI_RISR_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_XSPI_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_XSPI_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_XSPI_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_XSPI_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_XSPI_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_XSPI_RST_STAT_Bits;

/** \brief Receive FIFO Level Register */
typedef struct _Ifx_XSPI_RXFLR_Bits
{
    __I  Ifx_UReg_32Bit RXTFL:5;           /**< \brief [4:0] Receive FIFO Level (r) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_XSPI_RXFLR_Bits;

/** \brief Receive FIFO Threshold Level */
typedef struct _Ifx_XSPI_RXFTLR_Bits
{
    __IO Ifx_UReg_32Bit RFT:4;             /**< \brief [3:0] Receive FIFO Threshold (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_XSPI_RXFTLR_Bits;

/** \brief Receive FIFO Overflow Interrupt Clear Register */
typedef struct _Ifx_XSPI_RXOICR_Bits
{
    __I  Ifx_UReg_32Bit RXOICR:1;          /**< \brief [0:0] Clear Receive FIFO Overflow Interrupt (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_RXOICR_Bits;

/** \brief Receive FIFO Underflow Interrupt Clear Register */
typedef struct _Ifx_XSPI_RXUICR_Bits
{
    __I  Ifx_UReg_32Bit RXUICR:1;          /**< \brief [0:0] Clear Receive FIFO Underflow Interrupt (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_RXUICR_Bits;

/** \brief RX Sample Delay Register */
typedef struct _Ifx_XSPI_RX_SAMPLE_DELAY_Bits
{
    __IO Ifx_UReg_32Bit RSD:8;             /**< \brief [7:0] Receive Data (rxd) Sample Delay (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit SE:1;              /**< \brief [16:16] Receive Data (rxd) Sampling Edge (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_XSPI_RX_SAMPLE_DELAY_Bits;

/** \brief Safety Control register */
typedef struct _Ifx_XSPI_SAFETYCR_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit PAR_MODE:1;        /**< \brief [1:1] Parity Mode (r) */
    __IO Ifx_UReg_32Bit FSM_PAR_EN:1;      /**< \brief [2:2] FSM Parity Enable (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [15:3] \internal Reserved */
    __IO Ifx_UReg_32Bit FSM_EI_EN:1;       /**< \brief [16:16] FSM Error Insertion Enable (rw) */
    __IO Ifx_UReg_32Bit FSM_EI_TYPE:1;     /**< \brief [17:17] FSM Error Insertion Type (rw) */
    __IO Ifx_UReg_32Bit FSM_SEL:2;         /**< \brief [19:18] Select FSM in which the error injection should be enabled (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [20:20] \internal Reserved */
    __IO Ifx_UReg_32Bit DPPG_EI_EN:1;      /**< \brief [21:21] Data path parity Error Insertion Enable (rw) */
    __IO Ifx_UReg_32Bit REGP_EI_EN:1;      /**< \brief [22:22] Register space protection Error insertion Enable (rw) */
    __IO Ifx_UReg_32Bit REG_SEL:4;         /**< \brief [26:23] Register select for error injection (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_XSPI_SAFETYCR_Bits;

/** \brief Safety Interrupt Clear Register */
typedef struct _Ifx_XSPI_SAFETYICR_Bits
{
    __O  Ifx_UReg_32Bit FSMPEC:1;          /**< \brief [0:0] FSM Parity Error status clear register (w) */
    __O  Ifx_UReg_32Bit AXIFSMTOC:1;       /**< \brief [1:1] AXI clock domain FSM time out error clear register (w) */
    __O  Ifx_UReg_32Bit SLVIFSMTOC:1;      /**< \brief [2:2] AHB Slave Interface clock domain FSM time out error clear register (w) */
    __O  Ifx_UReg_32Bit SSIFSMTOC:1;       /**< \brief [3:3] SSI Core clock domain FSM time out error clear register (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __O  Ifx_UReg_32Bit AXIPEC:1;          /**< \brief [5:5] AXI parity failure interrupt clear register (w) */
    __O  Ifx_UReg_32Bit DPPEC:1;           /**< \brief [6:6] Data path Parity checker error clear register (w) */
    __O  Ifx_UReg_32Bit REGERRC:1;         /**< \brief [7:7] Register space error clear register (w) */
    __O  Ifx_UReg_32Bit SLVIFDPEC:1;       /**< \brief [8:8] AHB write data parity failure interrupt clear (w) */
    __O  Ifx_UReg_32Bit SLVIFAPEC:1;       /**< \brief [9:9] AHB address parity failure interrupt clear register (w) */
    __O  Ifx_UReg_32Bit AXIVRPEC:1;        /**< \brief [10:10] AXI Valid/Ready Parity Error status clear register (w) */
    __O  Ifx_UReg_32Bit AXICEC:1;          /**< \brief [11:11] AXI Master Interface ECC correctable error status register (w) */
    __O  Ifx_UReg_32Bit AXIUEC:1;          /**< \brief [12:12] AXI Master Interface ECC uncorrectable error status clear register (w) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_XSPI_SAFETYICR_Bits;

/** \brief Safety Interrupt Status Register */
typedef struct _Ifx_XSPI_SAFETYISR_Bits
{
    __I  Ifx_UReg_32Bit FSMPES:1;          /**< \brief [0:0] FSM Parity Error status (r) */
    __I  Ifx_UReg_32Bit AXIFSMTOS:1;       /**< \brief [1:1] AXI clock domain FSM time out error status (r) */
    __I  Ifx_UReg_32Bit SLVIFSMTOS:1;      /**< \brief [2:2] AHB Slave Interface clock domain FSM time out error status (r) */
    __I  Ifx_UReg_32Bit SSIFSMTOS:1;       /**< \brief [3:3] SSI Core clock domain FSM time out error status (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __I  Ifx_UReg_32Bit AXIPES:1;          /**< \brief [5:5] AXI parity failure interrupt status (r) */
    __I  Ifx_UReg_32Bit DPPES:1;           /**< \brief [6:6] Data path Parity checker error (r) */
    __I  Ifx_UReg_32Bit REGERRS:1;         /**< \brief [7:7] Register space error status (r) */
    __I  Ifx_UReg_32Bit SLVIFDPES:1;       /**< \brief [8:8] AHB write data parity failure interrupt status (r) */
    __I  Ifx_UReg_32Bit SLVIFAPES:1;       /**< \brief [9:9] AHB address parity failure interrupt status (r) */
    __I  Ifx_UReg_32Bit AXIVRPES:1;        /**< \brief [10:10] AXI Valid/Ready Parity Error status register (r) */
    __I  Ifx_UReg_32Bit AXICES:1;          /**< \brief [11:11] AXI Master Interface ECC correctable error status register (r) */
    __I  Ifx_UReg_32Bit AXIUES:1;          /**< \brief [12:12] AXI Master Interface ECC uncorrectable error status register (r) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_XSPI_SAFETYISR_Bits;

/** \brief Slave Enable Register */
typedef struct _Ifx_XSPI_SER_Bits
{
    __IO Ifx_UReg_32Bit SER:2;             /**< \brief [1:0] Slave Select Enable Flag (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_XSPI_SER_Bits;

/** \brief Slave interface Clock domain FSM time out register */
typedef struct _Ifx_XSPI_SLVIFFSMTOCR_Bits
{
    __IO Ifx_UReg_32Bit TOV:16;            /**< \brief [15:0] Time Out Value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_SLVIFFSMTOCR_Bits;

/** \brief SPI Device Address Register */
typedef struct _Ifx_XSPI_SPIAR_Bits
{
    __IO Ifx_UReg_32Bit SDAR:32;           /**< \brief [31:0] SPI Device Address Register. (rw) */
} Ifx_XSPI_SPIAR_Bits;

/** \brief SPI Device Register */
typedef struct _Ifx_XSPI_SPIDR_Bits
{
    __IO Ifx_UReg_32Bit SPI_INST:16;       /**< \brief [15:0] SPI Instruction code (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_SPIDR_Bits;

/** \brief SPI_CTRLR0 - SPI Control Register */
typedef struct _Ifx_XSPI_SPI_CTRLR0_Bits
{
    __IO Ifx_UReg_32Bit TRANS_TYPE:2;      /**< \brief [1:0] Address and instruction transfer format (rw) */
    __IO Ifx_UReg_32Bit ADDR_L:4;          /**< \brief [5:2] This bit defines Length of Address to be transmitted (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [6:6] \internal Reserved */
    __IO Ifx_UReg_32Bit XIP_MD_BIT_EN:1;    /**< \brief [7:7] Mode bits enable in XIP mode (rw) */
    __IO Ifx_UReg_32Bit INST_L:2;          /**< \brief [9:8] Dual/Quad/Octal mode instruction length in bits (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [10:10] \internal Reserved */
    __IO Ifx_UReg_32Bit WAIT_CYCLES:5;     /**< \brief [15:11] Wait cycles (rw) */
    __IO Ifx_UReg_32Bit SPI_DDR_EN:1;      /**< \brief [16:16] SPI DDR Enable bit (rw) */
    __IO Ifx_UReg_32Bit INST_DDR_EN:1;     /**< \brief [17:17] Instruction DDR Enable bit (rw) */
    __IO Ifx_UReg_32Bit SPI_RXDS_EN:1;     /**< \brief [18:18] Read data strobe enable bit (rw) */
    __IO Ifx_UReg_32Bit XIP_DFS_HC:1;      /**< \brief [19:19] Fix DFS for XIP transfers (rw) */
    __IO Ifx_UReg_32Bit XIP_INST_EN:1;     /**< \brief [20:20] XIP instruction enable bit (rw) */
    __IO Ifx_UReg_32Bit SSIC_XIP_CONT_XFER_EN:1;    /**< \brief [21:21] Enable continuous transfer in XIP mode (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit SPI_DM_EN:1;       /**< \brief [24:24] SPI data mask enable bit (rw) */
    __IO Ifx_UReg_32Bit SPI_RXDS_SIG_EN:1;    /**< \brief [25:25] Enable rxds signaling during address and command phase of Hypebus transfer (rw) */
    __IO Ifx_UReg_32Bit XIP_MBL:2;         /**< \brief [27:26] XIP Mode bits length (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [28:28] \internal Reserved */
    __I  Ifx_UReg_32Bit XIP_PREFETCH_EN:1;    /**< \brief [29:29] Enables XIP pre-fetch functionality in DWC_ssi (r) */
    __IO Ifx_UReg_32Bit CLK_STRETCH_EN:1;    /**< \brief [30:30] Enables clock stretching capability in SPI transfers (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_XSPI_SPI_CTRLR0_Bits;

/** \brief Status Register */
typedef struct _Ifx_XSPI_SR_Bits
{
    __I  Ifx_UReg_32Bit BUSY:1;            /**< \brief [0:0] SSI Busy Flag (r) */
    __I  Ifx_UReg_32Bit TFNF:1;            /**< \brief [1:1] Transmit FIFO Not Full (r) */
    __I  Ifx_UReg_32Bit TFE:1;             /**< \brief [2:2] Transmit FIFO Empty (r) */
    __I  Ifx_UReg_32Bit RFNE:1;            /**< \brief [3:3] Receive FIFO Not Empty (r) */
    __I  Ifx_UReg_32Bit RFF:1;             /**< \brief [4:4] Receive FIFO Full (r) */
    __I  Ifx_UReg_32Bit TXE:1;             /**< \brief [5:5] Transmission Error (r) */
    __I  Ifx_UReg_32Bit DCOL:1;            /**< \brief [6:6] Data Collision Error (r) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [14:7] \internal Reserved */
    __I  Ifx_UReg_32Bit CMPLTD_DF:17;      /**< \brief [31:15] Completed Data frames (r) */
} Ifx_XSPI_SR_Bits;

/** \brief xSPI kernel  component version */
typedef struct _Ifx_XSPI_SSIC_VERSION_ID_Bits
{
    __I  Ifx_UReg_32Bit SSIC_COMP_VERSION:32;    /**< \brief [31:0] Contains the hex representation of the Synopsys component version (r) */
} Ifx_XSPI_SSIC_VERSION_ID_Bits;

/** \brief xSPI kernel Enable Register */
typedef struct _Ifx_XSPI_SSIENR_Bits
{
    __IO Ifx_UReg_32Bit SSIC_EN:1;         /**< \brief [0:0] SSI Enable (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_SSIENR_Bits;

/** \brief xSPI kernel Clock domain FSM time out register */
typedef struct _Ifx_XSPI_SSIFSMTOCR_Bits
{
    __IO Ifx_UReg_32Bit TOV:16;            /**< \brief [15:0] Time Out Value (rw) */
    __IO Ifx_UReg_32Bit TOS:2;             /**< \brief [17:16] Time out scale (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_XSPI_SSIFSMTOCR_Bits;

/** \brief Transmit FIFO Error Interrupt Clear Register Register */
typedef struct _Ifx_XSPI_TXEICR_Bits
{
    __I  Ifx_UReg_32Bit TXEICR:1;          /**< \brief [0:0] Clear Transmit FIFO Overflow/Underflow Interrupt (rc) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_XSPI_TXEICR_Bits;

/** \brief Transmit FIFO Level Register */
typedef struct _Ifx_XSPI_TXFLR_Bits
{
    __I  Ifx_UReg_32Bit TXTFL:5;           /**< \brief [4:0] Transmit FIFO Level (r) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_XSPI_TXFLR_Bits;

/** \brief Transmit FIFO Threshold Level */
typedef struct _Ifx_XSPI_TXFTLR_Bits
{
    __IO Ifx_UReg_32Bit TFT:4;             /**< \brief [3:0] Transmit FIFO Threshold (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit TXFTHR:7;          /**< \brief [22:16] Transfer start FIFO level (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_XSPI_TXFTLR_Bits;

/** \brief XIP time out register for continuous transfers */
typedef struct _Ifx_XSPI_XIP_CNT_TIME_OUT_Bits
{
    __IO Ifx_UReg_32Bit XTOC:8;            /**< \brief [7:0] XIP time out value in terms of Fsri/2 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_XSPI_XIP_CNT_TIME_OUT_Bits;

/** \brief XIP_INCR_INST - XIP INCR transfer opcode */
typedef struct _Ifx_XSPI_XIP_INCR_INST_Bits
{
    __IO Ifx_UReg_32Bit INCR_INST:16;      /**< \brief [15:0] XIP INCR transfer opcode (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_XIP_INCR_INST_Bits;

/** \brief eXecute in Place - Mode bits */
typedef struct _Ifx_XSPI_XIP_MODE_BITS_Bits
{
    __IO Ifx_UReg_32Bit XIP_MD_BITS:16;    /**< \brief [15:0] XIP mode bits to be sent after address phase of XIP transfer (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_XIP_MODE_BITS_Bits;

/** \brief XIP WRAP transfer opcode */
typedef struct _Ifx_XSPI_XIP_WRAP_INST_Bits
{
    __IO Ifx_UReg_32Bit WRAP_INST:16;      /**< \brief [15:0] XIP WRAP transfer opcode (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_XSPI_XIP_WRAP_INST_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_xspi_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_RDB_SRI_Bits B;         /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_RDB_SRI;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_RGNLA_Bits B;           /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_RGNUA_Bits B;           /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_RGNUA;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ACCEN_WRB_SRI_Bits B;         /**< \brief Bitfield access */
} Ifx_XSPI_ACCEN_WRB_SRI;

/** \brief AXI Address Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_AXIAR0_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_AXIAR0;

/** \brief Source Burst Length   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_AXIARLEN_Bits B;              /**< \brief Bitfield access */
} Ifx_XSPI_AXIARLEN;

/** \brief Destination Burst Length   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_AXIAWLEN_Bits B;              /**< \brief Bitfield access */
} Ifx_XSPI_AXIAWLEN;

/** \brief AXI Master Error Interrupt Clear Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_AXIECR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_AXIECR;

/** \brief AXI Clock domain FSM time out register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_AXIFSMTOCR_Bits B;            /**< \brief Bitfield access */
} Ifx_XSPI_AXIFSMTOCR;

/** \brief Baud Rate Select   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_BAUDR_Bits B;                 /**< \brief Bitfield access */
} Ifx_XSPI_BAUDR;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_XSPI_CLC;

/** \brief Control Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_CTRLR0_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_CTRLR0;

/** \brief Control Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_CTRLR1_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_CTRLR1;

/** \brief Control Register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_CTRLR2_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_CTRLR2;

/** \brief DDR_DRIVE_EDGE - Transmit Drive Edge Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_DDR_DRIVE_EDGE_Bits B;        /**< \brief Bitfield access */
} Ifx_XSPI_DDR_DRIVE_EDGE;

/** \brief DMA Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_DMACR_Bits B;                 /**< \brief Bitfield access */
} Ifx_XSPI_DMACR;

/** \brief Transfer Done Clear Interrupt Clear Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_DONECR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_DONECR;

/** \brief xSPI  Data Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_DR_Bits B;                    /**< \brief Bitfield access */
} Ifx_XSPI_DR;

/** \brief Interrupt Clear Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ICR_Bits B;                   /**< \brief Bitfield access */
} Ifx_XSPI_ICR;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_XSPI_ID;

/** \brief Interrupt Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_IMR_Bits B;                   /**< \brief Bitfield access */
} Ifx_XSPI_IMR;

/** \brief Error handling interrupt/alarm clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_INTCLR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_INTCLR;

/** \brief Error handling interrupt/alarm mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_INTMSK_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_INTMSK;

/** \brief Error handling control   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_INTSTAT_Bits B;               /**< \brief Bitfield access */
} Ifx_XSPI_INTSTAT;

/** \brief Interrupt Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_ISR_Bits B;                   /**< \brief Bitfield access */
} Ifx_XSPI_ISR;

/** \brief Multi-Master Interrupt Clear Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_MSTICR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_MSTICR;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_XSPI_OCS;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_XSPI_PROT;

/** \brief Raw Interrupt Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RISR_Bits B;                  /**< \brief Bitfield access */
} Ifx_XSPI_RISR;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_XSPI_RST_STAT;

/** \brief Receive FIFO Level Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RXFLR_Bits B;                 /**< \brief Bitfield access */
} Ifx_XSPI_RXFLR;

/** \brief Receive FIFO Threshold Level   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RXFTLR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_RXFTLR;

/** \brief Receive FIFO Overflow Interrupt Clear Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RXOICR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_RXOICR;

/** \brief Receive FIFO Underflow Interrupt Clear Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RXUICR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_RXUICR;

/** \brief RX Sample Delay Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_RX_SAMPLE_DELAY_Bits B;       /**< \brief Bitfield access */
} Ifx_XSPI_RX_SAMPLE_DELAY;

/** \brief Safety Control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SAFETYCR_Bits B;              /**< \brief Bitfield access */
} Ifx_XSPI_SAFETYCR;

/** \brief Safety Interrupt Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SAFETYICR_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_SAFETYICR;

/** \brief Safety Interrupt Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SAFETYISR_Bits B;             /**< \brief Bitfield access */
} Ifx_XSPI_SAFETYISR;

/** \brief Slave Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SER_Bits B;                   /**< \brief Bitfield access */
} Ifx_XSPI_SER;

/** \brief Slave interface Clock domain FSM time out register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SLVIFFSMTOCR_Bits B;          /**< \brief Bitfield access */
} Ifx_XSPI_SLVIFFSMTOCR;

/** \brief SPI Device Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SPIAR_Bits B;                 /**< \brief Bitfield access */
} Ifx_XSPI_SPIAR;

/** \brief SPI Device Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SPIDR_Bits B;                 /**< \brief Bitfield access */
} Ifx_XSPI_SPIDR;

/** \brief SPI_CTRLR0 - SPI Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SPI_CTRLR0_Bits B;            /**< \brief Bitfield access */
} Ifx_XSPI_SPI_CTRLR0;

/** \brief Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SR_Bits B;                    /**< \brief Bitfield access */
} Ifx_XSPI_SR;

/** \brief xSPI kernel  component version   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SSIC_VERSION_ID_Bits B;       /**< \brief Bitfield access */
} Ifx_XSPI_SSIC_VERSION_ID;

/** \brief xSPI kernel Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SSIENR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_SSIENR;

/** \brief xSPI kernel Clock domain FSM time out register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_SSIFSMTOCR_Bits B;            /**< \brief Bitfield access */
} Ifx_XSPI_SSIFSMTOCR;

/** \brief Transmit FIFO Error Interrupt Clear Register Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_TXEICR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_TXEICR;

/** \brief Transmit FIFO Level Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_TXFLR_Bits B;                 /**< \brief Bitfield access */
} Ifx_XSPI_TXFLR;

/** \brief Transmit FIFO Threshold Level   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_TXFTLR_Bits B;                /**< \brief Bitfield access */
} Ifx_XSPI_TXFTLR;

/** \brief XIP time out register for continuous transfers   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_XIP_CNT_TIME_OUT_Bits B;      /**< \brief Bitfield access */
} Ifx_XSPI_XIP_CNT_TIME_OUT;

/** \brief XIP_INCR_INST - XIP INCR transfer opcode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_XIP_INCR_INST_Bits B;         /**< \brief Bitfield access */
} Ifx_XSPI_XIP_INCR_INST;

/** \brief eXecute in Place - Mode bits   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_XIP_MODE_BITS_Bits B;         /**< \brief Bitfield access */
} Ifx_XSPI_XIP_MODE_BITS;

/** \brief XIP WRAP transfer opcode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_XSPI_XIP_WRAP_INST_Bits B;         /**< \brief Bitfield access */
} Ifx_XSPI_XIP_WRAP_INST;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_XSPI_RST
{
       __IO Ifx_XSPI_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_XSPI_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_XSPI_RST_STAT                   STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_XSPI_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_XSPI_ACCEN
{
       __IO Ifx_XSPI_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_XSPI_ACCEN_WRB_SRI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_XSPI_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_XSPI_ACCEN_RDB_SRI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_XSPI_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_XSPI_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_XSPI_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_RGN_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_XSPI_RGN_ACCEN
{
       __IO Ifx_XSPI_ACCEN_WRA                  WRA;                    /**< \brief 0, CH0 Write access enable register A*/
       __IO Ifx_XSPI_ACCEN_WRB_SRI              WRB;                    /**< \brief 4, CH0 Write access enable register B*/
       __IO Ifx_XSPI_ACCEN_RDA                  RDA;                    /**< \brief 8, CH0 Read access enable register A*/
       __IO Ifx_XSPI_ACCEN_RDB_SRI              RDB;                    /**< \brief C, CH0 Read access enable register B*/
       __IO Ifx_XSPI_ACCEN_VM                   VM;                     /**< \brief 10, CH0 VM access enable register*/
       __IO Ifx_XSPI_ACCEN_PRS                  PRS;                    /**< \brief 14, CH0 PRS access enable register*/
       __IO Ifx_XSPI_ACCEN_RGNLA                RGNLA;                  /**< \brief 18, CH0 RGN Lower address*/
       __IO Ifx_XSPI_ACCEN_RGNUA                RGNUA;                  /**< \brief 1C, CH0 RGN upper address*/
} Ifx_XSPI_RGN_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_RGN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RGN object */
typedef volatile struct _Ifx_XSPI_RGN
{
       __IO Ifx_XSPI_RGN_ACCEN                  ACCEN;                  /**< \brief 0, */
} Ifx_XSPI_RGN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_XIP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief XIP object */
typedef volatile struct _Ifx_XSPI_XIP
{
       __IO Ifx_XSPI_XIP_MODE_BITS              MODE_BITS;              /**< \brief 0, eXecute in Place - Mode bits*/
       __IO Ifx_XSPI_XIP_INCR_INST              INCR_INST;              /**< \brief 4, XIP_INCR_INST - XIP INCR transfer opcode*/
       __IO Ifx_XSPI_XIP_WRAP_INST              WRAP_INST;              /**< \brief 8, XIP WRAP transfer opcode*/
       __I  Ifx_UReg_8Bit                       reserved_C[12];         /**< \brief C, \internal Reserved */
       __IO Ifx_XSPI_XIP_CNT_TIME_OUT           CNT_TIME_OUT;           /**< \brief 18, XIP time out register for continuous transfers*/
} Ifx_XSPI_XIP;

/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief XSPI object */
typedef volatile struct _Ifx_XSPI
{
       __IO Ifx_XSPI_CLC                        CLC;                    /**< \brief 0, Clock Control Register*/
       __I  Ifx_XSPI_OCS                        OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_XSPI_ID                         ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_XSPI_RST                        RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_XSPI_PROT                       PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_XSPI_PROT                       PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_XSPI_ACCEN                      ACCEN;                  /**< \brief 40, */
       __IO Ifx_XSPI_RGN                        RGN[8];                 /**< \brief 60, */
       __I  Ifx_XSPI_INTSTAT                    INTSTAT;                /**< \brief 160, Error handling control*/
       __O  Ifx_XSPI_INTCLR                     INTCLR;                 /**< \brief 164, Error handling interrupt/alarm clear*/
       __IO Ifx_XSPI_INTMSK                     INTMSK;                 /**< \brief 168, Error handling interrupt/alarm mask*/
       __IO Ifx_XSPI_CTRLR2                     CTRLR2;                 /**< \brief 16C, Control Register 2*/
       __I  Ifx_UReg_8Bit                       reserved_170[144];      /**< \brief 170, \internal Reserved */
       __IO Ifx_XSPI_CTRLR0                     CTRLR0;                 /**< \brief 200, Control Register 0*/
       __IO Ifx_XSPI_CTRLR1                     CTRLR1;                 /**< \brief 204, Control Register 1*/
       __IO Ifx_XSPI_SSIENR                     SSIENR;                 /**< \brief 208, xSPI kernel Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_20C[4];        /**< \brief 20C, \internal Reserved */
       __IO Ifx_XSPI_SER                        SER;                    /**< \brief 210, Slave Enable Register*/
       __IO Ifx_XSPI_BAUDR                      BAUDR;                  /**< \brief 214, Baud Rate Select*/
       __IO Ifx_XSPI_TXFTLR                     TXFTLR;                 /**< \brief 218, Transmit FIFO Threshold Level*/
       __IO Ifx_XSPI_RXFTLR                     RXFTLR;                 /**< \brief 21C, Receive FIFO Threshold Level*/
       __I  Ifx_XSPI_TXFLR                      TXFLR;                  /**< \brief 220, Transmit FIFO Level Register*/
       __I  Ifx_XSPI_RXFLR                      RXFLR;                  /**< \brief 224, Receive FIFO Level Register*/
       __I  Ifx_XSPI_SR                         SR;                     /**< \brief 228, Status Register*/
       __IO Ifx_XSPI_IMR                        IMR;                    /**< \brief 22C, Interrupt Mask Register*/
       __I  Ifx_XSPI_ISR                        ISR;                    /**< \brief 230, Interrupt Status Register*/
       __I  Ifx_XSPI_RISR                       RISR;                   /**< \brief 234, Raw Interrupt Status Register*/
       __I  Ifx_XSPI_TXEICR                     TXEICR;                 /**< \brief 238, Transmit FIFO Error Interrupt Clear Register Register*/
       __I  Ifx_XSPI_RXOICR                     RXOICR;                 /**< \brief 23C, Receive FIFO Overflow Interrupt Clear Register*/
       __I  Ifx_XSPI_RXUICR                     RXUICR;                 /**< \brief 240, Receive FIFO Underflow Interrupt Clear Register*/
       __I  Ifx_XSPI_MSTICR                     MSTICR;                 /**< \brief 244, Multi-Master Interrupt Clear Register*/
       __I  Ifx_XSPI_ICR                        ICR;                    /**< \brief 248, Interrupt Clear Register*/
       __IO Ifx_XSPI_DMACR                      DMACR;                  /**< \brief 24C, DMA Control Register*/
       __IO Ifx_XSPI_AXIAWLEN                   AXIAWLEN;               /**< \brief 250, Destination Burst Length*/
       __IO Ifx_XSPI_AXIARLEN                   AXIARLEN;               /**< \brief 254, Source Burst Length*/
       __I  Ifx_UReg_8Bit                       reserved_258[4];        /**< \brief 258, \internal Reserved */
       __I  Ifx_XSPI_SSIC_VERSION_ID            SSIC_VERSION_ID;        /**< \brief 25C, xSPI kernel  component version*/
       __IO Ifx_XSPI_DR                         DR[36];                 /**< \brief 260, xSPI  Data Register 0*/
       __IO Ifx_XSPI_RX_SAMPLE_DELAY            RX_SAMPLE_DELAY;        /**< \brief 2F0, RX Sample Delay Register*/
       __IO Ifx_XSPI_SPI_CTRLR0                 SPI_CTRLR0;             /**< \brief 2F4, SPI_CTRLR0 - SPI Control Register*/
       __IO Ifx_XSPI_DDR_DRIVE_EDGE             DDR_DRIVE_EDGE;         /**< \brief 2F8, DDR_DRIVE_EDGE - Transmit Drive Edge Register*/
       __IO Ifx_XSPI_XIP                        XIP;                    /**< \brief 2FC, */
       __I  Ifx_UReg_8Bit                       reserved_318[8];        /**< \brief 318, \internal Reserved */
       __IO Ifx_XSPI_SPIDR                      SPIDR;                  /**< \brief 320, SPI Device Register*/
       __IO Ifx_XSPI_SPIAR                      SPIAR;                  /**< \brief 324, SPI Device Address Register*/
       __IO Ifx_XSPI_AXIAR0                     AXIAR0;                 /**< \brief 328, AXI Address Register 0*/
       __I  Ifx_UReg_8Bit                       reserved_32C[4];        /**< \brief 32C, \internal Reserved */
       __I  Ifx_XSPI_AXIECR                     AXIECR;                 /**< \brief 330, AXI Master Error Interrupt Clear Register*/
       __I  Ifx_XSPI_DONECR                     DONECR;                 /**< \brief 334, Transfer Done Clear Interrupt Clear Register*/
       __I  Ifx_UReg_8Bit                       reserved_338[72];       /**< \brief 338, \internal Reserved */
       __IO Ifx_XSPI_SAFETYCR                   SAFETYCR;               /**< \brief 380, Safety Control register*/
       __IO Ifx_XSPI_SLVIFFSMTOCR               SLVIFFSMTOCR;           /**< \brief 384, Slave interface Clock domain FSM time out register*/
       __IO Ifx_XSPI_SSIFSMTOCR                 SSIFSMTOCR;             /**< \brief 388, xSPI kernel Clock domain FSM time out register*/
       __IO Ifx_XSPI_AXIFSMTOCR                 AXIFSMTOCR;             /**< \brief 38C, AXI Clock domain FSM time out register*/
       __I  Ifx_UReg_8Bit                       reserved_390[16];       /**< \brief 390, \internal Reserved */
       __I  Ifx_XSPI_SAFETYISR                  SAFETYISR;              /**< \brief 3A0, Safety Interrupt Status Register*/
       __O  Ifx_XSPI_SAFETYICR                  SAFETYICR;              /**< \brief 3A4, Safety Interrupt Clear Register*/
       __I  Ifx_UReg_8Bit                       reserved_3A8[64600];    /**< \brief 3A8, \internal Reserved */
} Ifx_XSPI;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXXSPI_REGDEF_H */
