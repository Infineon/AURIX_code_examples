/**
 * \file IfxClock_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_Clock/V0.2.3.1.0
 * Specification: latest @ 2024-11-15 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET : V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Clock_Registers Clock Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Clock_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Clock_Registers
 * 
 * \defgroup IfxSfr_Clock_Registers_union Register unions
 * \ingroup IfxSfr_Clock_Registers
 * 
 * \defgroup IfxSfr_Clock_Registers_struct Memory map
 * \ingroup IfxSfr_Clock_Registers
 */
#ifndef IFXCLOCK_REGDEF_H
#define IFXCLOCK_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Clock_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_CLOCK_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CLOCK_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CLOCK_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CLOCK_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CLOCK_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CLOCK_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CLOCK_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CLOCK_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CLOCK_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CLOCK_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CLOCK_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CLOCK_ACCEN_WRB_FPI_Bits;

/** \brief Global clock control register */
typedef struct _Ifx_CLOCK_CCUCON_Bits
{
    __IO Ifx_UReg_32Bit CLKSELS:2;         /**< \brief [1:0] Selection for system clock source (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKSELP:1;         /**< \brief [16:16] Selection for peripheral clock sources (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_CLOCK_CCUCON_Bits;

/** \brief Global clock monitor register */
typedef struct _Ifx_CLOCK_CCUMON_Bits
{
    __IO Ifx_UReg_32Bit PLL0MONEN:1;       /**< \brief [0:0] PLL0 clock alive monitor enable (rw) */
    __IO Ifx_UReg_32Bit PLL1MONEN:1;       /**< \brief [1:1] PLL1 clock alive monitor enable (rw) */
    __IO Ifx_UReg_32Bit PLL2MONEN:1;       /**< \brief [2:2] PLL2 clock alive monitor enable (rw) */
    __IO Ifx_UReg_32Bit PLL3MONEN:1;       /**< \brief [3:3] PLL3 clock alive monitor enable (rw) */
    __IO Ifx_UReg_32Bit KDV0MONEN:1;       /**< \brief [4:4] PLL0 K-divider monitor enable (rw) */
    __IO Ifx_UReg_32Bit KDV1MONEN:1;       /**< \brief [5:5] PLL1 K-divider monitor enable (rw) */
    __IO Ifx_UReg_32Bit KDV2MONEN:1;       /**< \brief [6:6] PLL2 K-divider monitor enable (rw) */
    __IO Ifx_UReg_32Bit KDV3MONEN:1;       /**< \brief [7:7] PLL3 K-divider monitor enable (rw) */
    __IO Ifx_UReg_32Bit BACKMONEN:1;       /**< \brief [8:8] EVR oscillator clock alive monitor enable (rw) */
    __IO Ifx_UReg_32Bit RAMPMONEN:1;       /**< \brief [9:9] Ramp clock monitor enable (rw) */
    __IO Ifx_UReg_32Bit SDIVMONEN:1;       /**< \brief [10:10] System clock divider monitor enable (rw) */
    __IO Ifx_UReg_32Bit PDIVMONEN:1;       /**< \brief [11:11] Peripheral clock divider monitor enable (rw) */
    __IO Ifx_UReg_32Bit PLLPPUMONEN:1;     /**< \brief [12:12] PLLPPU clock alive monitor enable (rw) */
    __IO Ifx_UReg_32Bit KDVPPUMONEN:1;     /**< \brief [13:13] PLLPPU K-divider monitor enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit PLL0MONTST:1;      /**< \brief [16:16] PLL0 clock alive monitor test (rw) */
    __IO Ifx_UReg_32Bit PLL1MONTST:1;      /**< \brief [17:17] PLL1 clock alive monitor test (rw) */
    __IO Ifx_UReg_32Bit PLL2MONTST:1;      /**< \brief [18:18] PLL2 clock alive monitor test (rw) */
    __IO Ifx_UReg_32Bit PLL3MONTST:1;      /**< \brief [19:19] PLL3 clock alive monitor test (rw) */
    __IO Ifx_UReg_32Bit KDV0MONTST:1;      /**< \brief [20:20] PLL0 K-divider monitor test (rw) */
    __IO Ifx_UReg_32Bit KDV1MONTST:1;      /**< \brief [21:21] PLL1 K-divider monitor test (rw) */
    __IO Ifx_UReg_32Bit KDV2MONTST:1;      /**< \brief [22:22] PLL2 K-divider monitor test (rw) */
    __IO Ifx_UReg_32Bit KDV3MONTST:1;      /**< \brief [23:23] PLL3 K-divider monitor test (rw) */
    __IO Ifx_UReg_32Bit BACKMONTST:1;      /**< \brief [24:24] Backup clock monitor test (rw) */
    __IO Ifx_UReg_32Bit RAMPMONTST:1;      /**< \brief [25:25] Ramp clock monitor test (rw) */
    __IO Ifx_UReg_32Bit SDIVMONTST:1;      /**< \brief [26:26] System clock divider monitor test (rw) */
    __IO Ifx_UReg_32Bit PDIVMONTST:1;      /**< \brief [27:27] Peripheral clock divider monitor test (rw) */
    __IO Ifx_UReg_32Bit PLLPPUMONTST:1;    /**< \brief [28:28] PLLPPU clock alive monitor test (rw) */
    __IO Ifx_UReg_32Bit KDVPPUMONTST:1;    /**< \brief [29:29] PLL3 K-divider monitor test (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CLOCK_CCUMON_Bits;

/** \brief Global clock status register */
typedef struct _Ifx_CLOCK_CCUSTAT_Bits
{
    __I  Ifx_UReg_32Bit CLKSELS:2;         /**< \brief [1:0] Selection for system clock source (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __I  Ifx_UReg_32Bit CLKSELP:1;         /**< \brief [16:16] Selection for peripheral clock sources (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [30:17] \internal Reserved */
    __I  Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Register lock status (rh) */
} Ifx_CLOCK_CCUSTAT_Bits;

/** \brief External clock control register */
typedef struct _Ifx_CLOCK_EXTCON_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Output enable for EXTCLK0 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit SEL0:5;            /**< \brief [6:2] Clock select for EXTCLK0 (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [15:7] \internal Reserved */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [16:16] Output enable for EXTCLK1 (rw) */
    __IO Ifx_UReg_32Bit NSEL1:1;           /**< \brief [17:17] Negation selection for EXTCLK1 (rw) */
    __IO Ifx_UReg_32Bit SEL1:5;            /**< \brief [22:18] External clock select for EXTCLK1 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit DIV1:7;            /**< \brief [30:24] Clock divider for EXTCLK1 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_CLOCK_EXTCON_Bits;

/** \brief Fractional divider control register */
typedef struct _Ifx_CLOCK_EXTFDCON_Bits
{
    __IO Ifx_UReg_32Bit STEP:10;           /**< \brief [9:0] Step value (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DM:2;              /**< \brief [13:12] Divider mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [14:14] \internal Reserved */
    __IO Ifx_UReg_32Bit DISCLK:1;          /**< \brief [15:15] Disable clock (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CLOCK_EXTFDCON_Bits;

/** \brief Module Identification register */
typedef struct _Ifx_CLOCK_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number (r) */
} Ifx_CLOCK_ID_Bits;

/** \brief Global clock monitor status register */
typedef struct _Ifx_CLOCK_MONSTAT_Bits
{
    __I  Ifx_UReg_32Bit RES0:1;            /**< \brief [0:0] RES0 (rh) */
    __I  Ifx_UReg_32Bit RES1:1;            /**< \brief [1:1] RES1 (rh) */
    __I  Ifx_UReg_32Bit RES2:1;            /**< \brief [2:2] RES2 (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __I  Ifx_UReg_32Bit KDV1:1;            /**< \brief [8:8] PLL1 K-divider monitor status (rh) */
    __I  Ifx_UReg_32Bit KDV2:1;            /**< \brief [9:9] PLL2 K-divider monitor status (rh) */
    __I  Ifx_UReg_32Bit KDV3:1;            /**< \brief [10:10] PLL3 K-divider monitor status (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __I  Ifx_UReg_32Bit SDIV:8;            /**< \brief [23:16] System clock divider monitor status (rh) */
    __I  Ifx_UReg_32Bit PDIV:8;            /**< \brief [31:24] Peripheral clock divider monitor status (rh) */
} Ifx_CLOCK_MONSTAT_Bits;

/** \brief Crystal oscillator control register */
typedef struct _Ifx_CLOCK_OSCCON_Bits
{
    __IO Ifx_UReg_32Bit GAINSEL:2;         /**< \brief [1:0] Oscillator gain selection (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [4:2] \internal Reserved */
    __IO Ifx_UReg_32Bit HYSEN:1;           /**< \brief [5:5] Enable shaper hysteresis (rw) */
    __IO Ifx_UReg_32Bit HYSCTL:2;          /**< \brief [7:6] Shaper hysteresis control. Applicable only if HYSEN=1 (rw) */
    __IO Ifx_UReg_32Bit MODE:3;            /**< \brief [10:8] Oscillator mode (rw) */
    __IO Ifx_UReg_32Bit SUPM:1;            /**< \brief [11:11] Supply Mode (rw) */
    __IO Ifx_UReg_32Bit X1CAP0EN:1;        /**< \brief [12:12] XTAL1 capacitance 0 enable (rw) */
    __IO Ifx_UReg_32Bit X1CAP1EN:1;        /**< \brief [13:13] XTAL1 capacitance 1 enable (rw) */
    __IO Ifx_UReg_32Bit X1CAP2EN:1;        /**< \brief [14:14] XTAL1 capacitance 2 enable (rw) */
    __IO Ifx_UReg_32Bit X1CAP3EN:1;        /**< \brief [15:15] XTAL1 capacitance 3 enable (rw) */
    __IO Ifx_UReg_32Bit X2CAP0EN:1;        /**< \brief [16:16] XTAL2 capacitance 0 enable (rw) */
    __IO Ifx_UReg_32Bit X2CAP1EN:1;        /**< \brief [17:17] XTAL2 capacitance 1 enable (rw) */
    __IO Ifx_UReg_32Bit X2CAP2EN:1;        /**< \brief [18:18] XTAL2 capacitance 2 enable (rw) */
    __IO Ifx_UReg_32Bit X2CAP3EN:1;        /**< \brief [19:19] XTAL2 capacitance 3 enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __IO Ifx_UReg_32Bit INSEL:2;           /**< \brief [25:24] Input selection (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKSELPHY0:1;      /**< \brief [28:28] Reference clock Input selection (rw) */
    __IO Ifx_UReg_32Bit CLKSELPHY2:1;      /**< \brief [29:29] Reference clock Input selection (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CLOCK_OSCCON_Bits;

/** \brief EVR oscillator monitor register */
typedef struct _Ifx_CLOCK_OSCMON0_Bits
{
    __IO Ifx_UReg_32Bit LOTHR:12;          /**< \brief [11:0] Monitor lower threshold (rw) */
    __IO Ifx_UReg_32Bit UPTHR:12;          /**< \brief [23:12] Monitor upper threshold (rw) */
    __IO Ifx_UReg_32Bit MONEN:1;           /**< \brief [24:24] Monitor enable (rw) */
    __IO Ifx_UReg_32Bit MONTST:1;          /**< \brief [25:25] Monitor test (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_CLOCK_OSCMON0_Bits;

/** \brief Crystal oscillator monitor register */
typedef struct _Ifx_CLOCK_OSCMON1_Bits
{
    __IO Ifx_UReg_32Bit OSCVAL:7;          /**< \brief [6:0] Reference input frequency value for crystal oscillator monitors (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit SMONEN:1;          /**< \brief [8:8] System-PLL crystal oscillator monitor enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __IO Ifx_UReg_32Bit SMONTST:2;         /**< \brief [13:12] System-PLL crystal oscillator monitor test (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [23:14] \internal Reserved */
    __IO Ifx_UReg_32Bit PMONEN:1;          /**< \brief [24:24] Peripheral-PLL crystal oscillator monitor enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [27:25] \internal Reserved */
    __IO Ifx_UReg_32Bit PMONTST:2;         /**< \brief [29:28] Peripheral-PLL crystal oscillator monitor test (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CLOCK_OSCMON1_Bits;

/** \brief Crystal oscillator status register */
typedef struct _Ifx_CLOCK_OSCSTAT_Bits
{
    __I  Ifx_UReg_32Bit SOWDS:2;           /**< \brief [1:0] Oscillator watchdog status for System-PLL (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __I  Ifx_UReg_32Bit POWDS:2;           /**< \brief [17:16] Oscillator watchdog status for Peripheral-PLL (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [19:18] \internal Reserved */
    __I  Ifx_UReg_32Bit OAR:1;             /**< \brief [20:20] Oscillator amplitude reached (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_CLOCK_OSCSTAT_Bits;

/** \brief Peripheral CCU clock control register 0 */
typedef struct _Ifx_CLOCK_PERCCUCON0_Bits
{
    __IO Ifx_UReg_32Bit MCANDIV:4;         /**< \brief [3:0] MCAN divider reload value (rw) */
    __IO Ifx_UReg_32Bit CLKSELMCAN:2;      /**< \brief [5:4] Clock selection for MCAN (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit MSCDIV:4;          /**< \brief [11:8] MSC divider reload value (rw) */
    __IO Ifx_UReg_32Bit CLKSELMSC:2;       /**< \brief [13:12] Clock selection for MSC (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit QSPIDIV:4;         /**< \brief [19:16] QSPI divider reload value (rw) */
    __IO Ifx_UReg_32Bit CLKSELQSPI:2;      /**< \brief [21:20] Clock selection for QSPI (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit I2CDIV:4;          /**< \brief [27:24] I2C divider reload value (rw) */
    __IO Ifx_UReg_32Bit PPUDIV:4;          /**< \brief [31:28] PPU divider reload value (rw) */
} Ifx_CLOCK_PERCCUCON0_Bits;

/** \brief Peripheral CCU clock control register 1 */
typedef struct _Ifx_CLOCK_PERCCUCON1_Bits
{
    __IO Ifx_UReg_32Bit ASCLINFDIV:4;      /**< \brief [3:0] ASCLIN fast divider reload value (rw) */
    __IO Ifx_UReg_32Bit XSPISLDIV:4;       /**< \brief [7:4] xSPISL divider reload value (rw) */
    __IO Ifx_UReg_32Bit ASCLINSDIV:4;      /**< \brief [11:8] ASCLIN slow divider reload value (rw) */
    __IO Ifx_UReg_32Bit CLKSELASCLINS:2;    /**< \brief [13:12] Clock selection for ASCLINS (rw) */
    __IO Ifx_UReg_32Bit CLKSELCANXL:2;     /**< \brief [15:14] Clock selection for CANXL (rw) */
    __IO Ifx_UReg_32Bit ADCPERON:1;        /**< \brief [16:16] Power safe switch-off for ADC clock (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [19:17] \internal Reserved */
    __IO Ifx_UReg_32Bit CANXLDIV:4;        /**< \brief [23:20] CANXL divider reload value (rw) */
    __IO Ifx_UReg_32Bit ERAYPERON:1;       /**< \brief [24:24] Power safe switch-off for ERAY clock (rw) */
    __IO Ifx_UReg_32Bit XSPIPERON:1;       /**< \brief [25:25] Power safe switch-off for xSPI clock (rw) */
    __IO Ifx_UReg_32Bit SDMMCPERON:1;      /**< \brief [26:26] Power safe switch-off for SDMMC clock (rw) */
    __IO Ifx_UReg_32Bit HSCTPERON:1;       /**< \brief [27:27] HSTC IVR power down (rw) */
    __IO Ifx_UReg_32Bit LETH100PERON:1;    /**< \brief [28:28] Power safe switch-off for LETH100 clock (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_CLOCK_PERCCUCON1_Bits;

/** \brief Peripheral-PLL configuration register 0 */
typedef struct _Ifx_CLOCK_PERPLLCON0_Bits
{
    __IO Ifx_UReg_32Bit PLLPWR:1;          /**< \brief [0:0] Peripheral-PLL power mode (rw) */
    __IO Ifx_UReg_32Bit RESLD:1;           /**< \brief [1:1] Restart DCO lock detection (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit MODEN:1;           /**< \brief [3:3] Modulation enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit NDIV:7;            /**< \brief [14:8] N-divider value (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit PDIV:3;            /**< \brief [18:16] P-divider value (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_CLOCK_PERPLLCON0_Bits;

/** \brief Peripheral-PLL configuration register 1 */
typedef struct _Ifx_CLOCK_PERPLLCON1_Bits
{
    __IO Ifx_UReg_32Bit K2DIV:4;           /**< \brief [3:0] K2-divider value - K2DIV (rw) */
    __IO Ifx_UReg_32Bit K2PREDIV:2;        /**< \brief [5:4] PLL1 pre-divider select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit K3DIV:3;           /**< \brief [10:8] K3-divider value - K3DIV (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit K3PREDIV:4;        /**< \brief [15:12] PLL2 pre-divider select (rw) */
    __IO Ifx_UReg_32Bit K4DIV:3;           /**< \brief [18:16] K4-divider value - K4DIV (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit K4PREDIV:2;        /**< \brief [21:20] PLL3 pre-divider select (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_CLOCK_PERPLLCON1_Bits;

/** \brief Peripheral-PLL configuration register 2 */
typedef struct _Ifx_CLOCK_PERPLLCON2_Bits
{
    __IO Ifx_UReg_32Bit MODCFG:15;         /**< \brief [14:0] Modulation Configuration - MODCFG (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKSELSRC1:2;      /**< \brief [17:16] Clock selection for fsource1 (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_CLOCK_PERPLLCON2_Bits;

/** \brief Peripheral-PLL status register */
typedef struct _Ifx_CLOCK_PERPLLSTAT_Bits
{
    __I  Ifx_UReg_32Bit PWRSTAT:1;         /**< \brief [0:0] Peripheral-PLL power mode status (rh) */
    __I  Ifx_UReg_32Bit PLLLOCK:1;         /**< \brief [1:1] Peripheral-PLL lock status (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __I  Ifx_UReg_32Bit MODRUN:1;          /**< \brief [3:3] Peripheral-PLL Modulation run (rh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CLOCK_PERPLLSTAT_Bits;

/** \brief Peripheral-PLL modulation trim configuration register 0 */
typedef struct _Ifx_CLOCK_PMODCON0_Bits
{
    __I  Ifx_UReg_32Bit :31;               /**< \brief [30:0] \internal Reserved */
    __IO Ifx_UReg_32Bit CAL_EN:1;          /**< \brief [31:31] Calibration enable (rw) */
} Ifx_CLOCK_PMODCON0_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_CLOCK_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_CLOCK_PROT_Bits;

/** \brief Ramp oscillator control register 0 */
typedef struct _Ifx_CLOCK_RAMPCON0_Bits
{
    __IO Ifx_UReg_32Bit UFL:10;            /**< \brief [9:0] Upper frequency limit (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit CMD:3;             /**< \brief [18:16] Ramp sequencer command (rwh) */
    __IO Ifx_UReg_32Bit PWR:1;             /**< \brief [19:19] Power (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_CLOCK_RAMPCON0_Bits;

/** \brief Ramp oscillator monitor register */
typedef struct _Ifx_CLOCK_RAMPMON_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RESFLLLD:1;        /**< \brief [24:24] Restart DCO Lock Detection (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [27:25] \internal Reserved */
    __IO Ifx_UReg_32Bit FLLLDEN:1;         /**< \brief [28:28] Frequency lock detection enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_CLOCK_RAMPMON_Bits;

/** \brief Ramp oscillator status register */
typedef struct _Ifx_CLOCK_RAMPSTAT_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __I  Ifx_UReg_32Bit FSTAT:2;           /**< \brief [17:16] Frequency status (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [19:18] \internal Reserved */
    __I  Ifx_UReg_32Bit SSTAT:2;           /**< \brief [21:20] Sequencer status (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [22:22] \internal Reserved */
    __I  Ifx_UReg_32Bit ACTIVE:1;          /**< \brief [23:23] Power status (rh) */
    __I  Ifx_UReg_32Bit FLLLOCK:1;         /**< \brief [24:24] FLL lock status (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_CLOCK_RAMPSTAT_Bits;

/** \brief System-PLL modulation trim configuration register 0 */
typedef struct _Ifx_CLOCK_SMODCON0_Bits
{
    __I  Ifx_UReg_32Bit :31;               /**< \brief [30:0] \internal Reserved */
    __IO Ifx_UReg_32Bit CAL_EN:1;          /**< \brief [31:31] Calibration enable (rw) */
} Ifx_CLOCK_SMODCON0_Bits;

/** \brief System CCU clock control register 0 */
typedef struct _Ifx_CLOCK_SYSCCUCON0_Bits
{
    __IO Ifx_UReg_32Bit SPBDIV:4;          /**< \brief [3:0] SPB divider reload value (rw) */
    __IO Ifx_UReg_32Bit CPBDIV:4;          /**< \brief [7:4] CPB divider reload value (rw) */
    __IO Ifx_UReg_32Bit TPBDIV:4;          /**< \brief [11:8] TPB divider reload value (rw) */
    __IO Ifx_UReg_32Bit SRIDIV:4;          /**< \brief [15:12] SRI divider reload value (rw) */
    __IO Ifx_UReg_32Bit FSIDIV:4;          /**< \brief [19:16] FSI divider reload value (rw) */
    __IO Ifx_UReg_32Bit FSI2DIV:1;         /**< \brief [20:20] FSI2 divider reload value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit STMDIV:4;          /**< \brief [27:24] STM divider reload value (rw) */
    __IO Ifx_UReg_32Bit LPDIV:1;           /**< \brief [28:28] Low Power divider reload value (rw) */
    __I  Ifx_UReg_32Bit SRICSDIV:1;        /**< \brief [29:29] SRI cyber security clock divider (rh) */
    __O  Ifx_UReg_32Bit UP:1;              /**< \brief [30:30] Update request (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_CLOCK_SYSCCUCON0_Bits;

/** \brief System CCU clock control register 1 */
typedef struct _Ifx_CLOCK_SYSCCUCON1_Bits
{
    __IO Ifx_UReg_32Bit GETHDIV:4;         /**< \brief [3:0] GETH divider reload value (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [11:4] \internal Reserved */
    __IO Ifx_UReg_32Bit EGTMDIV:4;         /**< \brief [15:12] eGTM divider reload value (rw) */
    __IO Ifx_UReg_32Bit MCANHDIV:4;        /**< \brief [19:16] MCANH divider reload value (rw) */
    __IO Ifx_UReg_32Bit LETHDIV:4;         /**< \brief [23:20] LETH divider reload value (rw) */
    __IO Ifx_UReg_32Bit CANXLHDIV:4;       /**< \brief [27:24] CANXLH divider reload value (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [29:28] \internal Reserved */
    __O  Ifx_UReg_32Bit UP:1;              /**< \brief [30:30] Update request (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_CLOCK_SYSCCUCON1_Bits;

/** \brief System-PLL configuration register 0 */
typedef struct _Ifx_CLOCK_SYSPLLCON0_Bits
{
    __IO Ifx_UReg_32Bit PLLPWR:1;          /**< \brief [0:0] System-PLL power mode (rw) */
    __IO Ifx_UReg_32Bit RESLD:1;           /**< \brief [1:1] Restart DCO Lock Detection - RESLD (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit MODEN:1;           /**< \brief [3:3] Modulation enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit NDIV:7;            /**< \brief [14:8] N-divider value (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit PDIV:3;            /**< \brief [18:16] P-divider value (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_CLOCK_SYSPLLCON0_Bits;

/** \brief System-PLL configuration register 1 */
typedef struct _Ifx_CLOCK_SYSPLLCON1_Bits
{
    __IO Ifx_UReg_32Bit K2DIV:4;           /**< \brief [3:0] K2-divider value - K2DIV (rw) */
    __IO Ifx_UReg_32Bit K2PREDIV:2;        /**< \brief [5:4] PLL0 pre-divider select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit K3DIV:3;           /**< \brief [10:8] K3-divider value - K3DIV (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit K3PREDIV:4;        /**< \brief [15:12] PLLPPU pre-divider select (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CLOCK_SYSPLLCON1_Bits;

/** \brief System-PLL configuration register 2 */
typedef struct _Ifx_CLOCK_SYSPLLCON2_Bits
{
    __IO Ifx_UReg_32Bit MODCFG:15;         /**< \brief [14:0] Modulation Configuration - MODCFG (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_CLOCK_SYSPLLCON2_Bits;

/** \brief System-PLL status register */
typedef struct _Ifx_CLOCK_SYSPLLSTAT_Bits
{
    __I  Ifx_UReg_32Bit PWRSTAT:1;         /**< \brief [0:0] System-PLL power mode status (rh) */
    __I  Ifx_UReg_32Bit PLLLOCK:1;         /**< \brief [1:1] System-PLL Lock status (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __I  Ifx_UReg_32Bit MODRUN:1;          /**< \brief [3:3] System-PLL Modulation run (rh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CLOCK_SYSPLLSTAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_clock_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ACCEN_PRS_Bits B;            /**< \brief Bitfield access */
} Ifx_CLOCK_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ACCEN_RDA_Bits B;            /**< \brief Bitfield access */
} Ifx_CLOCK_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ACCEN_RDB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_CLOCK_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ACCEN_VM_Bits B;             /**< \brief Bitfield access */
} Ifx_CLOCK_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ACCEN_WRA_Bits B;            /**< \brief Bitfield access */
} Ifx_CLOCK_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ACCEN_WRB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_CLOCK_ACCEN_WRB_FPI;

/** \brief Global clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_CCUCON_Bits B;               /**< \brief Bitfield access */
} Ifx_CLOCK_CCUCON;

/** \brief Global clock monitor register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_CCUMON_Bits B;               /**< \brief Bitfield access */
} Ifx_CLOCK_CCUMON;

/** \brief Global clock status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_CCUSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_CLOCK_CCUSTAT;

/** \brief External clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_EXTCON_Bits B;               /**< \brief Bitfield access */
} Ifx_CLOCK_EXTCON;

/** \brief Fractional divider control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_EXTFDCON_Bits B;             /**< \brief Bitfield access */
} Ifx_CLOCK_EXTFDCON;

/** \brief Module Identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_ID_Bits B;                   /**< \brief Bitfield access */
} Ifx_CLOCK_ID;

/** \brief Global clock monitor status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_MONSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_CLOCK_MONSTAT;

/** \brief Crystal oscillator control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_OSCCON_Bits B;               /**< \brief Bitfield access */
} Ifx_CLOCK_OSCCON;

/** \brief EVR oscillator monitor register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_OSCMON0_Bits B;              /**< \brief Bitfield access */
} Ifx_CLOCK_OSCMON0;

/** \brief Crystal oscillator monitor register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_OSCMON1_Bits B;              /**< \brief Bitfield access */
} Ifx_CLOCK_OSCMON1;

/** \brief Crystal oscillator status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_OSCSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_CLOCK_OSCSTAT;

/** \brief Peripheral CCU clock control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PERCCUCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_PERCCUCON0;

/** \brief Peripheral CCU clock control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PERCCUCON1_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_PERCCUCON1;

/** \brief Peripheral-PLL configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PERPLLCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_PERPLLCON0;

/** \brief Peripheral-PLL configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PERPLLCON1_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_PERPLLCON1;

/** \brief Peripheral-PLL configuration register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PERPLLCON2_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_PERPLLCON2;

/** \brief Peripheral-PLL status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PERPLLSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_PERPLLSTAT;

/** \brief Peripheral-PLL modulation trim configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PMODCON0_Bits B;             /**< \brief Bitfield access */
} Ifx_CLOCK_PMODCON0;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_PROT_Bits B;                 /**< \brief Bitfield access */
} Ifx_CLOCK_PROT;

/** \brief Ramp oscillator control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_RAMPCON0_Bits B;             /**< \brief Bitfield access */
} Ifx_CLOCK_RAMPCON0;

/** \brief Ramp oscillator monitor register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_RAMPMON_Bits B;              /**< \brief Bitfield access */
} Ifx_CLOCK_RAMPMON;

/** \brief Ramp oscillator status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_RAMPSTAT_Bits B;             /**< \brief Bitfield access */
} Ifx_CLOCK_RAMPSTAT;

/** \brief System-PLL modulation trim configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SMODCON0_Bits B;             /**< \brief Bitfield access */
} Ifx_CLOCK_SMODCON0;

/** \brief System CCU clock control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SYSCCUCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_SYSCCUCON0;

/** \brief System CCU clock control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SYSCCUCON1_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_SYSCCUCON1;

/** \brief System-PLL configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SYSPLLCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_SYSPLLCON0;

/** \brief System-PLL configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SYSPLLCON1_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_SYSPLLCON1;

/** \brief System-PLL configuration register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SYSPLLCON2_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_SYSPLLCON2;

/** \brief System-PLL status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CLOCK_SYSPLLSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_CLOCK_SYSPLLSTAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Clock_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_CLOCK_ACCEN
{
       __IO Ifx_CLOCK_ACCEN_WRA                 WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_CLOCK_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_CLOCK_ACCEN_RDA                 RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_CLOCK_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_CLOCK_ACCEN_VM                  VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_CLOCK_ACCEN_PRS                 PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CLOCK_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Clock_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_CLOCK_ACCENCS
{
       __IO Ifx_CLOCK_ACCEN_WRA                 WRA;                    /**< \brief 0, ACCENCS write access enable register A*/
       __IO Ifx_CLOCK_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, ACCENCS write access enable register B*/
       __IO Ifx_CLOCK_ACCEN_RDA                 RDA;                    /**< \brief 8, ACCENCS read access enable register A*/
       __IO Ifx_CLOCK_ACCEN_RDB_FPI             RDB;                    /**< \brief C, ACCENCS read access enable register B*/
       __IO Ifx_CLOCK_ACCEN_VM                  VM;                     /**< \brief 10, ACCENCS VM access enable register*/
       __IO Ifx_CLOCK_ACCEN_PRS                 PRS;                    /**< \brief 14, ACCENCS PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CLOCK_ACCENCS;

/******************************************************************************/
/** \addtogroup IfxSfr_Clock_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CLOCK object */
typedef volatile struct _Ifx_CLOCK
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_CLOCK_ID                        ID;                     /**< \brief 8, Module Identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[20];         /**< \brief C, \internal Reserved */
       __IO Ifx_CLOCK_PROT                      PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_CLOCK_PROT                      PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __IO Ifx_CLOCK_PROT                      PROTCSE;                /**< \brief 28, PROT Register Cyber-Secure APU Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_2C[20];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_CLOCK_ACCEN                     ACCEN;                  /**< \brief 40, */
       __IO Ifx_CLOCK_ACCENCS                   ACCENCS;                /**< \brief 60, SCU APU for general cyber-secure resources*/
       __I  Ifx_UReg_8Bit                       reserved_80[128];       /**< \brief 80, \internal Reserved */
       __IO Ifx_CLOCK_OSCCON                    OSCCON;                 /**< \brief 100, Crystal oscillator control register*/
       __I  Ifx_UReg_8Bit                       reserved_104[252];      /**< \brief 104, \internal Reserved */
       __IO Ifx_CLOCK_RAMPCON0                  RAMPCON0;               /**< \brief 200, Ramp oscillator control register 0*/
       __I  Ifx_UReg_8Bit                       reserved_204[8];        /**< \brief 204, \internal Reserved */
       __I  Ifx_CLOCK_RAMPSTAT                  RAMPSTAT;               /**< \brief 20C, Ramp oscillator status register*/
       __I  Ifx_UReg_8Bit                       reserved_210[240];      /**< \brief 210, \internal Reserved */
       __IO Ifx_CLOCK_SYSPLLCON0                SYSPLLCON0;             /**< \brief 300, System-PLL configuration register 0*/
       __IO Ifx_CLOCK_SYSPLLCON1                SYSPLLCON1;             /**< \brief 304, System-PLL configuration register 1*/
       __IO Ifx_CLOCK_SYSPLLCON2                SYSPLLCON2;             /**< \brief 308, System-PLL configuration register 2*/
       __I  Ifx_CLOCK_SYSPLLSTAT                SYSPLLSTAT;             /**< \brief 30C, System-PLL status register*/
       __I  Ifx_UReg_8Bit                       reserved_310[48];       /**< \brief 310, \internal Reserved */
       __IO Ifx_CLOCK_SMODCON0                  SMODCON0;               /**< \brief 340, System-PLL modulation trim configuration register 0*/
       __I  Ifx_UReg_8Bit                       reserved_344[60];       /**< \brief 344, \internal Reserved */
       __IO Ifx_CLOCK_PERPLLCON0                PERPLLCON0;             /**< \brief 380, Peripheral-PLL configuration register 0*/
       __IO Ifx_CLOCK_PERPLLCON1                PERPLLCON1;             /**< \brief 384, Peripheral-PLL configuration register 1*/
       __IO Ifx_CLOCK_PERPLLCON2                PERPLLCON2;             /**< \brief 388, Peripheral-PLL configuration register 2*/
       __I  Ifx_CLOCK_PERPLLSTAT                PERPLLSTAT;             /**< \brief 38C, Peripheral-PLL status register*/
       __I  Ifx_UReg_8Bit                       reserved_390[16];       /**< \brief 390, \internal Reserved */
       __IO Ifx_CLOCK_PMODCON0                  PMODCON0;               /**< \brief 3A0, Peripheral-PLL modulation trim configuration register 0*/
       __I  Ifx_UReg_8Bit                       reserved_3A4[92];       /**< \brief 3A4, \internal Reserved */
       __IO Ifx_CLOCK_CCUCON                    CCUCON;                 /**< \brief 400, Global clock control register*/
       __I  Ifx_CLOCK_CCUSTAT                   CCUSTAT;                /**< \brief 404, Global clock status register*/
       __I  Ifx_UReg_8Bit                       reserved_408[8];        /**< \brief 408, \internal Reserved */
       __IO Ifx_CLOCK_SYSCCUCON0                SYSCCUCON0;             /**< \brief 410, System CCU clock control register 0*/
       __IO Ifx_CLOCK_SYSCCUCON1                SYSCCUCON1;             /**< \brief 414, System CCU clock control register 1*/
       __I  Ifx_UReg_8Bit                       reserved_418[8];        /**< \brief 418, \internal Reserved */
       __IO Ifx_CLOCK_PERCCUCON0                PERCCUCON0;             /**< \brief 420, Peripheral CCU clock control register 0*/
       __IO Ifx_CLOCK_PERCCUCON1                PERCCUCON1;             /**< \brief 424, Peripheral CCU clock control register 1*/
       __I  Ifx_UReg_8Bit                       reserved_428[8];        /**< \brief 428, \internal Reserved */
       __IO Ifx_CLOCK_EXTCON                    EXTCON;                 /**< \brief 430, External clock control register*/
       __IO Ifx_CLOCK_EXTFDCON                  EXTFDCON;               /**< \brief 434, Fractional divider control register*/
       __I  Ifx_UReg_8Bit                       reserved_438[200];      /**< \brief 438, \internal Reserved */
       __IO Ifx_CLOCK_CCUMON                    CCUMON;                 /**< \brief 500, Global clock monitor register*/
       __IO Ifx_CLOCK_OSCMON0                   OSCMON0;                /**< \brief 504, EVR oscillator monitor register*/
       __IO Ifx_CLOCK_OSCMON1                   OSCMON1;                /**< \brief 508, Crystal oscillator monitor register*/
       __I  Ifx_CLOCK_OSCSTAT                   OSCSTAT;                /**< \brief 50C, Crystal oscillator status register*/
       __IO Ifx_CLOCK_RAMPMON                   RAMPMON;                /**< \brief 510, Ramp oscillator monitor register*/
       __I  Ifx_UReg_8Bit                       reserved_514[4];        /**< \brief 514, \internal Reserved */
       __I  Ifx_CLOCK_MONSTAT                   MONSTAT;                /**< \brief 518, Global clock monitor status register*/
       __I  Ifx_UReg_8Bit                       reserved_51C[15076];    /**< \brief 51C, \internal Reserved */
} Ifx_CLOCK;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXCLOCK_REGDEF_H */
