/**
 * \file IfxSent_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SENT/V0.2.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Sent_Registers Sent Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Sent_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Sent_Registers
 * 
 * \defgroup IfxSfr_Sent_Registers_union Register unions
 * \ingroup IfxSfr_Sent_Registers
 * 
 * \defgroup IfxSfr_Sent_Registers_struct Memory map
 * \ingroup IfxSfr_Sent_Registers
 */
#ifndef IFXSENT_REGDEF_H
#define IFXSENT_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Sent_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_SENT_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SENT_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_SENT_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_SENT_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_SENT_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SENT_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_SENT_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SENT_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_SENT_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_SENT_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_SENT_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SENT_ACCEN_WRB_FPI_Bits;

/** \brief Channel fractional divider register 0 */
typedef struct _Ifx_SENT_CH_CFDR_Bits
{
    __IO Ifx_UReg_32Bit DIV:16;            /**< \brief [15:0] Divider Value - DIV (rw) */
    __I  Ifx_UReg_32Bit DIVM:16;           /**< \brief [31:16] Measured Divider Value - DIVM (rh) */
} Ifx_SENT_CH_CFDR_Bits;

/** \brief Channel pre divider register 0 */
typedef struct _Ifx_SENT_CH_CPDR_Bits
{
    __IO Ifx_UReg_32Bit PDIV:12;           /**< \brief [11:0] Divider Factor of Pre Divider for Channel x - PDIV (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_SENT_CH_CPDR_Bits;

/** \brief Interrupt node pointer register 0 */
typedef struct _Ifx_SENT_CH_INP_Bits
{
    __IO Ifx_UReg_32Bit RSI:4;             /**< \brief [3:0] Interrupt Node Pointer for Interrupt RSI - RSI (rw) */
    __IO Ifx_UReg_32Bit RDI:4;             /**< \brief [7:4] Interrupt Node Pointer for Interrupt RDI - RDI (rw) */
    __IO Ifx_UReg_32Bit RBI:4;             /**< \brief [11:8] Interrupt Node Pointer for Interrupt RBI - RBI (rw) */
    __IO Ifx_UReg_32Bit TDI:4;             /**< \brief [15:12] Interrupt Node Pointer for Interrupt TDI - TDI (rw) */
    __IO Ifx_UReg_32Bit TBI:4;             /**< \brief [19:16] Interrupt Node Pointer for Interrupt TBI - TBI (rw) */
    __IO Ifx_UReg_32Bit ERRI:4;            /**< \brief [23:20] Interrupt Node Pointer for Interrupt FRI, FDI, NNI, NVI, CRCI, WSI, SCRI - ERRI (rw) */
    __IO Ifx_UReg_32Bit SDI:4;             /**< \brief [27:24] Interrupt Node Pointer for Interrupt SDI - SDI (rw) */
    __IO Ifx_UReg_32Bit WDI:4;             /**< \brief [31:28] Interrupt Node Pointer for Interrupt WDI - WDI (rw) */
} Ifx_SENT_CH_INP_Bits;

/** \brief Interrupt clear register 0 */
typedef struct _Ifx_SENT_CH_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Clear Interrupt Request Flag RSI - RSI (w) */
    __O  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Clear Interrupt Request Flag RDI - RDI (w) */
    __O  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Clear Interrupt Request Flag RBI - RBI (w) */
    __O  Ifx_UReg_32Bit TDI:1;             /**< \brief [3:3] Clear Interrupt Request Flag TDI - TDI (w) */
    __O  Ifx_UReg_32Bit TBI:1;             /**< \brief [4:4] Clear Interrupt Request Flag TBI - TBI (w) */
    __O  Ifx_UReg_32Bit FRI:1;             /**< \brief [5:5] Clear Interrupt Request Flag FRI - FRI (w) */
    __O  Ifx_UReg_32Bit FDI:1;             /**< \brief [6:6] Clear Interrupt Request Flag FDI - FDI (w) */
    __O  Ifx_UReg_32Bit NNI:1;             /**< \brief [7:7] Clear Interrupt Request Flag NNI - NNI (w) */
    __O  Ifx_UReg_32Bit NVI:1;             /**< \brief [8:8] Clear Interrupt Request Flag NVI - NVI (w) */
    __O  Ifx_UReg_32Bit CRCI:1;            /**< \brief [9:9] Clear Interrupt Request Flag CRCI - CRCI (w) */
    __O  Ifx_UReg_32Bit WSI:1;             /**< \brief [10:10] Clear Interrupt Request Flag WSI - WSI (w) */
    __O  Ifx_UReg_32Bit SDI:1;             /**< \brief [11:11] Clear Interrupt Request Flag SDI - SDI (w) */
    __O  Ifx_UReg_32Bit SCRI:1;            /**< \brief [12:12] Clear Interrupt Request Flag SCRI - SCRI (w) */
    __O  Ifx_UReg_32Bit WDI:1;             /**< \brief [13:13] Clear Interrupt Request Flag WDI - WDI (w) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_SENT_CH_INTCLR_Bits;

/** \brief Interrupt enable register 0 */
typedef struct _Ifx_SENT_CH_INTEN_Bits
{
    __IO Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Enable Interrupt Request RSI - RSI (rw) */
    __IO Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Enable Interrupt Request RDI - RDI (rw) */
    __IO Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Enable Interrupt Request RBI - RBI (rw) */
    __IO Ifx_UReg_32Bit TDI:1;             /**< \brief [3:3] Enable Interrupt Request TDI - TDI (rw) */
    __IO Ifx_UReg_32Bit TBI:1;             /**< \brief [4:4] Enable Interrupt Request TBI - TBI (rw) */
    __IO Ifx_UReg_32Bit FRI:1;             /**< \brief [5:5] Enable Interrupt Request FRI - FRI (rw) */
    __IO Ifx_UReg_32Bit FDI:1;             /**< \brief [6:6] Enable Interrupt Request FDI - FDI (rw) */
    __IO Ifx_UReg_32Bit NNI:1;             /**< \brief [7:7] Enable Interrupt Request NNI - NNI (rw) */
    __IO Ifx_UReg_32Bit NVI:1;             /**< \brief [8:8] Enable Interrupt Request NVI - NVI (rw) */
    __IO Ifx_UReg_32Bit CRCI:1;            /**< \brief [9:9] Enable Interrupt Request CRCI - CRCI (rw) */
    __IO Ifx_UReg_32Bit WSI:1;             /**< \brief [10:10] Enable Interrupt Request WSI - WSI (rw) */
    __IO Ifx_UReg_32Bit SDI:1;             /**< \brief [11:11] Enable Interrupt Request SDI - SDI (rw) */
    __IO Ifx_UReg_32Bit SCRI:1;            /**< \brief [12:12] Enable Interrupt Request SCRI - SCRI (rw) */
    __IO Ifx_UReg_32Bit WDI:1;             /**< \brief [13:13] Enable Interrupt Request WDI - WDI (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_SENT_CH_INTEN_Bits;

/** \brief Interrupt set register 0 */
typedef struct _Ifx_SENT_CH_INTSET_Bits
{
    __O  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Set Interrupt Request Flag RSI - RSI (w) */
    __O  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Set Interrupt Request Flag RDI - RDI (w) */
    __O  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Set Interrupt Request Flag RBI - RBI (w) */
    __O  Ifx_UReg_32Bit TDI:1;             /**< \brief [3:3] Set Interrupt Request Flag TDI - TDI (w) */
    __O  Ifx_UReg_32Bit TBI:1;             /**< \brief [4:4] Set Interrupt Request Flag TBI - TBI (w) */
    __O  Ifx_UReg_32Bit FRI:1;             /**< \brief [5:5] Set Interrupt Request Flag FRI - FRI (w) */
    __O  Ifx_UReg_32Bit FDI:1;             /**< \brief [6:6] Set Interrupt Request Flag FDI - FDI (w) */
    __O  Ifx_UReg_32Bit NNI:1;             /**< \brief [7:7] Set Interrupt Request Flag NNI - NNI (w) */
    __O  Ifx_UReg_32Bit NVI:1;             /**< \brief [8:8] Set Interrupt Request Flag NVI - NVI (w) */
    __O  Ifx_UReg_32Bit CRCI:1;            /**< \brief [9:9] Set Interrupt Request Flag CRCI - CRCI (w) */
    __O  Ifx_UReg_32Bit WSI:1;             /**< \brief [10:10] Set Interrupt Request Flag WSI - WSI (w) */
    __O  Ifx_UReg_32Bit SDI:1;             /**< \brief [11:11] Set Interrupt Request Flag SDI - SDI (w) */
    __O  Ifx_UReg_32Bit SCRI:1;            /**< \brief [12:12] Set Interrupt Request Flag SCRI - SCRI (w) */
    __O  Ifx_UReg_32Bit WDI:1;             /**< \brief [13:13] Set Interrupt Request Flag WDI - WDI (w) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_SENT_CH_INTSET_Bits;

/** \brief Interrupt status register 0 */
typedef struct _Ifx_SENT_CH_INTSTAT_Bits
{
    __I  Ifx_UReg_32Bit RSI:1;             /**< \brief [0:0] Receive Success Interrupt Request Flag - RSI (rh) */
    __I  Ifx_UReg_32Bit RDI:1;             /**< \brief [1:1] Receive Data Interrupt Request Flag - RDI (rh) */
    __I  Ifx_UReg_32Bit RBI:1;             /**< \brief [2:2] Receive Buffer Overflow Interrupt Request Flag - RBI (rh) */
    __I  Ifx_UReg_32Bit TDI:1;             /**< \brief [3:3] Transfer Data Interrupt Request Flag - TDI (rh) */
    __I  Ifx_UReg_32Bit TBI:1;             /**< \brief [4:4] Transmit Buffer Underflow Interrupt Request Flag - TBI (rh) */
    __I  Ifx_UReg_32Bit FRI:1;             /**< \brief [5:5] Frequency Range Interrupt Request Flag - FRI (rh) */
    __I  Ifx_UReg_32Bit FDI:1;             /**< \brief [6:6] Frequency Drift Interrupt Request Flag - FDI (rh) */
    __I  Ifx_UReg_32Bit NNI:1;             /**< \brief [7:7] Number of Nibbles Wrong Request Flag - NNI (rh) */
    __I  Ifx_UReg_32Bit NVI:1;             /**< \brief [8:8] Nibbles Value out of Range Request Flag - NVI (rh) */
    __I  Ifx_UReg_32Bit CRCI:1;            /**< \brief [9:9] CRC Error Request Flag - CRCI (rh) */
    __I  Ifx_UReg_32Bit WSI:1;             /**< \brief [10:10] Wrong Status and Communication Nibble Error Request Flag - WSI (rh) */
    __I  Ifx_UReg_32Bit SDI:1;             /**< \brief [11:11] Serial Data Receive Interrupt Request Flag - SDI (rh) */
    __I  Ifx_UReg_32Bit SCRI:1;            /**< \brief [12:12] Serial Data CRC Error Request Flag - SCRI (rh) */
    __I  Ifx_UReg_32Bit WDI:1;             /**< \brief [13:13] Watch Dog Error Request Flag - WDI (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_SENT_CH_INTSTAT_Bits;

/** \brief Input and output control register 0 */
typedef struct _Ifx_SENT_CH_IOCR_Bits
{
    __IO Ifx_UReg_32Bit ALTI:2;            /**< \brief [1:0] Alternate Input Select - ALTI (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit DEPTH:4;           /**< \brief [7:4] Digital Glitch Filter Depth - DEPTH (rw) */
    __IO Ifx_UReg_32Bit OIE:1;             /**< \brief [8:8] Output Inverter Enable Channel x - OIE (rw) */
    __IO Ifx_UReg_32Bit IIE:1;             /**< \brief [9:9] Input Inverter Enable Channel x - IIE (rw) */
    __O  Ifx_UReg_32Bit CEC:1;             /**< \brief [10:10] Clear Edge Counter - CEC (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __I  Ifx_UReg_32Bit REG:1;             /**< \brief [12:12] Rising Edge Glitch Flag for Channel x - REG (rh) */
    __I  Ifx_UReg_32Bit FEG:1;             /**< \brief [13:13] Falling Edge Glitch Flag for Channel x - FEG (rh) */
    __IO Ifx_UReg_32Bit CREG:1;            /**< \brief [14:14] Clear Rising Edge Glitch Flag for Channel x - CREG (rw) */
    __IO Ifx_UReg_32Bit CFEG:1;            /**< \brief [15:15] Clear Falling Edge Glitch Flag for Channel x - CFEG (rw) */
    __IO Ifx_UReg_32Bit ETS:4;             /**< \brief [19:16] External Trigger Select - ETS (rw) */
    __I  Ifx_UReg_32Bit EC:8;              /**< \brief [27:20] Edge Counter - EC (rh) */
    __IO Ifx_UReg_32Bit CTR:1;             /**< \brief [28:28] Clear Trigger Monitor Flag for Channel x - CTR (rw) */
    __I  Ifx_UReg_32Bit TRM:1;             /**< \brief [29:29] Trigger Monitor Flag for Channel x - TRM (rh) */
    __I  Ifx_UReg_32Bit RXM:1;             /**< \brief [30:30] Receive Monitor for Channel x - RXM (rh) */
    __I  Ifx_UReg_32Bit TXM:1;             /**< \brief [31:31] Transmit Monitor for Channel x - TXM (rh) */
} Ifx_SENT_CH_IOCR_Bits;

/** \brief Receiver control register 0 */
typedef struct _Ifx_SENT_CH_RCR_Bits
{
    __IO Ifx_UReg_32Bit CEN:1;             /**< \brief [0:0] Channel Enable - CEN (rw) */
    __IO Ifx_UReg_32Bit IEP:1;             /**< \brief [1:1] Ignore End Pulse - IEP (rw) */
    __IO Ifx_UReg_32Bit ACE:1;             /**< \brief [2:2] Alternative CRC Mode Enable - ACE (rw) */
    __IO Ifx_UReg_32Bit SNI:1;             /**< \brief [3:3] Status Nibble Included in CRC - SNI (rw) */
    __IO Ifx_UReg_32Bit SDP:1;             /**< \brief [4:4] Serial Data Processing Mode - SDP (rw) */
    __IO Ifx_UReg_32Bit SCDIS:1;           /**< \brief [5:5] CRC for Serial Data Disabled Mode - SCDIS (rw) */
    __IO Ifx_UReg_32Bit CDIS:1;            /**< \brief [6:6] CRC Disabled Mode - CDIS (rw) */
    __IO Ifx_UReg_32Bit CFC:1;             /**< \brief [7:7] Consecutive Frame Check - CFC (rw) */
    __IO Ifx_UReg_32Bit FRL:8;             /**< \brief [15:8] Frame Length - FRL (rw) */
    __IO Ifx_UReg_32Bit CRZ:1;             /**< \brief [16:16] CRC with Zero Nibble for Serial Data - CRZ (rw) */
    __IO Ifx_UReg_32Bit ESF:1;             /**< \brief [17:17] Enhanced Serial Frame Mode - ESF (rw) */
    __IO Ifx_UReg_32Bit IDE:1;             /**< \brief [18:18] Ignore Drift Error Mode - IDE (rw) */
    __IO Ifx_UReg_32Bit SUSEN:1;           /**< \brief [19:19] Suspend Enable - SUSEN (rw) */
    __IO Ifx_UReg_32Bit FDFL:1;            /**< \brief [20:20] Frequency Drift Check based on Frame Length - FDFL (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_SENT_CH_RCR_Bits;

/** \brief Receive status register 0 */
typedef struct _Ifx_SENT_CH_RSR_Bits
{
    __I  Ifx_UReg_32Bit CRC:4;             /**< \brief [3:0] CRC - CRC (r) */
    __I  Ifx_UReg_32Bit CST:2;             /**< \brief [5:4] Channel Status - CST (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit SCN:4;             /**< \brief [11:8] Status and Communication Nibble - SCN (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit FRLEN:16;          /**< \brief [31:16] Frame Length including Pause Nibble - FRLEN (r) */
} Ifx_SENT_CH_RSR_Bits;

/** \brief SPC control register 0 */
typedef struct _Ifx_SENT_CH_SCR_Bits
{
    __IO Ifx_UReg_32Bit PLEN:6;            /**< \brief [5:0] Pulse Length - PLEN (rw) */
    __IO Ifx_UReg_32Bit TRIG:2;            /**< \brief [7:6] Trigger Source and Mode Selection - TRIG (rw) */
    __IO Ifx_UReg_32Bit DEL:6;             /**< \brief [13:8] Delay Length - DEL (rw) */
    __IO Ifx_UReg_32Bit BASE:1;            /**< \brief [14:14] Time Base - BASE (rw) */
    __I  Ifx_UReg_32Bit TRQ:1;             /**< \brief [15:15] Transfer Request in Progress - TRQ (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_SENT_CH_SCR_Bits;

/** \brief Serial data and status register 0 */
typedef struct _Ifx_SENT_CH_SDS_Bits
{
    __I  Ifx_UReg_32Bit SD:16;             /**< \brief [15:0] Serial Data - SD (r) */
    __I  Ifx_UReg_32Bit MID:8;             /**< \brief [23:16] Message ID - MID (r) */
    __I  Ifx_UReg_32Bit SCRC:6;            /**< \brief [29:24] SCRC - SCRC (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __I  Ifx_UReg_32Bit CON:1;             /**< \brief [31:31] Configuration bit - CON (r) */
} Ifx_SENT_CH_SDS_Bits;

/** \brief Receive data view register 0 */
typedef struct _Ifx_SENT_CH_VIEW_Bits
{
    __IO Ifx_UReg_32Bit RDNP0:3;           /**< \brief [2:0] Receive Data Target Nibble Pointer 0 - RDNP0 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP1:3;           /**< \brief [6:4] Receive Data Target Nibble Pointer 1 - RDNP1 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP2:3;           /**< \brief [10:8] Receive Data Target Nibble Pointer 2 - RDNP2 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP3:3;           /**< \brief [14:12] Receive Data Target Nibble Pointer 3 - RDNP3 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP4:3;           /**< \brief [18:16] Receive Data Target Nibble Pointer 4 - RDNP4 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [19:19] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP5:3;           /**< \brief [22:20] Receive Data Target Nibble Pointer 5 - RDNP5 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP6:3;           /**< \brief [26:24] Receive Data Target Nibble Pointer 6 - RDNP6 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __IO Ifx_UReg_32Bit RDNP7:3;           /**< \brief [30:28] Receive Data Target Nibble Pointer 7 - RDNP7 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SENT_CH_VIEW_Bits;

/** \brief Watch dog timer register 0 */
typedef struct _Ifx_SENT_CH_WDT_Bits
{
    __IO Ifx_UReg_32Bit WDL:16;            /**< \brief [15:0] Watch Dog Timer Limit - WDL (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_SENT_CH_WDT_Bits;

/** \brief Clock control register */
typedef struct _Ifx_SENT_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_SENT_CLC_Bits;

/** \brief SENT Fractional divider register */
typedef struct _Ifx_SENT_FDR_Bits
{
    __IO Ifx_UReg_32Bit STEP:10;           /**< \brief [9:0] Step Value - STEP (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [13:10] \internal Reserved */
    __IO Ifx_UReg_32Bit DM:2;              /**< \brief [15:14] Divider Mode - DM (rw) */
    __I  Ifx_UReg_32Bit RESULT:10;         /**< \brief [25:16] Result Value - RESULT (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_SENT_FDR_Bits;

/** \brief Module identification register */
typedef struct _Ifx_SENT_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_SENT_ID_Bits;

/** \brief Interrupt overview register */
typedef struct _Ifx_SENT_INTOV_Bits
{
    __I  Ifx_UReg_32Bit IPC0:1;            /**< \brief [0:0] Interrupt Pending on Channel 0 - IPC0 (rh) */
    __I  Ifx_UReg_32Bit IPC1:1;            /**< \brief [1:1] Interrupt Pending on Channel 1 - IPC1 (rh) */
    __I  Ifx_UReg_32Bit IPC2:1;            /**< \brief [2:2] Interrupt Pending on Channel 2 - IPC2 (rh) */
    __I  Ifx_UReg_32Bit IPC3:1;            /**< \brief [3:3] Interrupt Pending on Channel 3 - IPC3 (rh) */
    __I  Ifx_UReg_32Bit IPC4:1;            /**< \brief [4:4] Interrupt Pending on Channel 4 - IPC4 (rh) */
    __I  Ifx_UReg_32Bit IPC5:1;            /**< \brief [5:5] Interrupt Pending on Channel 5 - IPC5 (rh) */
    __I  Ifx_UReg_32Bit IPC6:1;            /**< \brief [6:6] Interrupt Pending on Channel 6 - IPC6 (rh) */
    __I  Ifx_UReg_32Bit IPC7:1;            /**< \brief [7:7] Interrupt Pending on Channel 7 - IPC7 (rh) */
    __I  Ifx_UReg_32Bit IPC8:1;            /**< \brief [8:8] Interrupt Pending on Channel 8 - IPC8 (rh) */
    __I  Ifx_UReg_32Bit IPC9:1;            /**< \brief [9:9] Interrupt Pending on Channel 9 - IPC9 (rh) */
    __I  Ifx_UReg_32Bit IPC10:1;           /**< \brief [10:10] Interrupt Pending on Channel 10 - IPC10 (rh) */
    __I  Ifx_UReg_32Bit IPC11:1;           /**< \brief [11:11] Interrupt Pending on Channel 11 - IPC11 (rh) */
    __I  Ifx_UReg_32Bit IPC12:1;           /**< \brief [12:12] Interrupt Pending on Channel 12 - IPC12 (rh) */
    __I  Ifx_UReg_32Bit IPC13:1;           /**< \brief [13:13] Interrupt Pending on Channel 13 - IPC13 (rh) */
    __I  Ifx_UReg_32Bit IPC14:1;           /**< \brief [14:14] Interrupt Pending on Channel 14 - IPC14 (rh) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_SENT_INTOV_Bits;

/** \brief OCDS control and status register */
typedef struct _Ifx_SENT_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_SENT_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_SENT_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_SENT_PROT_Bits;

/** \brief Receive data register 0 */
typedef struct _Ifx_SENT_RDR_Bits
{
    __I  Ifx_UReg_32Bit RD0:4;             /**< \brief [3:0] Receive Data Nibble 0 - RD0 (rh) */
    __I  Ifx_UReg_32Bit RD1:4;             /**< \brief [7:4] Receive Data Nibble 1 - RD1 (rh) */
    __I  Ifx_UReg_32Bit RD2:4;             /**< \brief [11:8] Receive Data Nibble 2 - RD2 (rh) */
    __I  Ifx_UReg_32Bit RD3:4;             /**< \brief [15:12] Receive Data Nibble 3 - RD3 (rh) */
    __I  Ifx_UReg_32Bit RD4:4;             /**< \brief [19:16] Receive Data Nibble 4 - RD4 (rh) */
    __I  Ifx_UReg_32Bit RD5:4;             /**< \brief [23:20] Receive Data Nibble 5 - RD5 (rh) */
    __I  Ifx_UReg_32Bit RD6:4;             /**< \brief [27:24] Receive Data Nibble 6 - RD6 (rh) */
    __I  Ifx_UReg_32Bit RD7:4;             /**< \brief [31:28] Receive Data Nibble 7 - RD7 (rh) */
} Ifx_SENT_RDR_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_SENT_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_SENT_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_SENT_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_SENT_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_SENT_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_SENT_RST_STAT_Bits;

/** \brief Receive time stamp register 0 */
typedef struct _Ifx_SENT_RTS_Bits
{
    __I  Ifx_UReg_32Bit LTS:32;            /**< \brief [31:0] Last Receive Time Stamp for Channel x - LTS (r) */
} Ifx_SENT_RTS_Bits;

/** \brief Time stamp predivider register */
typedef struct _Ifx_SENT_TPD_Bits
{
    __IO Ifx_UReg_32Bit TDIV:20;           /**< \brief [19:0] Divider Factor of Pre Divider for TSR - TDIV (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_SENT_TPD_Bits;

/** \brief Module time stamp register */
typedef struct _Ifx_SENT_TSR_Bits
{
    __I  Ifx_UReg_32Bit CTS:32;            /**< \brief [31:0] Current Time Stamp for the Module - CTS (rh) */
} Ifx_SENT_TSR_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_sent_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ACCEN_RDB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_SENT_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_SENT_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ACCEN_WRB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_SENT_ACCEN_WRB_FPI;

/** \brief Channel fractional divider register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_CFDR_Bits B;               /**< \brief Bitfield access */
} Ifx_SENT_CH_CFDR;

/** \brief Channel pre divider register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_CPDR_Bits B;               /**< \brief Bitfield access */
} Ifx_SENT_CH_CPDR;

/** \brief Interrupt node pointer register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_INP_Bits B;                /**< \brief Bitfield access */
} Ifx_SENT_CH_INP;

/** \brief Interrupt clear register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_INTCLR_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_CH_INTCLR;

/** \brief Interrupt enable register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_INTEN_Bits B;              /**< \brief Bitfield access */
} Ifx_SENT_CH_INTEN;

/** \brief Interrupt set register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_INTSET_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_CH_INTSET;

/** \brief Interrupt status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_INTSTAT_Bits B;            /**< \brief Bitfield access */
} Ifx_SENT_CH_INTSTAT;

/** \brief Input and output control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_IOCR_Bits B;               /**< \brief Bitfield access */
} Ifx_SENT_CH_IOCR;

/** \brief Receiver control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_RCR_Bits B;                /**< \brief Bitfield access */
} Ifx_SENT_CH_RCR;

/** \brief Receive status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_RSR_Bits B;                /**< \brief Bitfield access */
} Ifx_SENT_CH_RSR;

/** \brief SPC control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_SCR_Bits B;                /**< \brief Bitfield access */
} Ifx_SENT_CH_SCR;

/** \brief Serial data and status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_SDS_Bits B;                /**< \brief Bitfield access */
} Ifx_SENT_CH_SDS;

/** \brief Receive data view register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_VIEW_Bits B;               /**< \brief Bitfield access */
} Ifx_SENT_CH_VIEW;

/** \brief Watch dog timer register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CH_WDT_Bits B;                /**< \brief Bitfield access */
} Ifx_SENT_CH_WDT;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_CLC;

/** \brief SENT Fractional divider register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_FDR_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_FDR;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_SENT_ID;

/** \brief Interrupt overview register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_INTOV_Bits B;                 /**< \brief Bitfield access */
} Ifx_SENT_INTOV;

/** \brief OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_OCS_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_SENT_PROT;

/** \brief Receive data register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_RDR_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_RDR;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_SENT_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_SENT_RST_STAT;

/** \brief Receive time stamp register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_RTS_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_RTS;

/** \brief Time stamp predivider register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_TPD_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_TPD;

/** \brief Module time stamp register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SENT_TSR_Bits B;                   /**< \brief Bitfield access */
} Ifx_SENT_TSR;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Sent_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_SENT_RST
{
       __IO Ifx_SENT_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_SENT_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_SENT_RST_STAT                   STAT;                   /**< \brief 8, Reset status register*/
} Ifx_SENT_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Sent_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_SENT_ACCEN
{
       __IO Ifx_SENT_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_SENT_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_SENT_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_SENT_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_SENT_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_SENT_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SENT_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Sent_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_SENT_CH
{
       __IO Ifx_SENT_CH_CPDR                    CPDR;                   /**< \brief 0, Channel pre divider register 0*/
       __IO Ifx_SENT_CH_CFDR                    CFDR;                   /**< \brief 4, Channel fractional divider register 0*/
       __IO Ifx_SENT_CH_RCR                     RCR;                    /**< \brief 8, Receiver control register 0*/
       __I  Ifx_SENT_CH_RSR                     RSR;                    /**< \brief C, Receive status register 0*/
       __I  Ifx_SENT_CH_SDS                     SDS;                    /**< \brief 10, Serial data and status register 0*/
       __IO Ifx_SENT_CH_IOCR                    IOCR;                   /**< \brief 14, Input and output control register 0*/
       __IO Ifx_SENT_CH_SCR                     SCR;                    /**< \brief 18, SPC control register 0*/
       __IO Ifx_SENT_CH_VIEW                    VIEW;                   /**< \brief 1C, Receive data view register 0*/
       __I  Ifx_SENT_CH_INTSTAT                 INTSTAT;                /**< \brief 20, Interrupt status register 0*/
       __O  Ifx_SENT_CH_INTSET                  INTSET;                 /**< \brief 24, Interrupt set register 0*/
       __O  Ifx_SENT_CH_INTCLR                  INTCLR;                 /**< \brief 28, Interrupt clear register 0*/
       __IO Ifx_SENT_CH_INTEN                   INTEN;                  /**< \brief 2C, Interrupt enable register 0*/
       __IO Ifx_SENT_CH_INP                     INP;                    /**< \brief 30, Interrupt node pointer register 0*/
       __IO Ifx_SENT_CH_WDT                     WDT;                    /**< \brief 34, Watch dog timer register 0*/
       __I  Ifx_UReg_8Bit                       reserved_38[8];         /**< \brief 38, \internal Reserved */
} Ifx_SENT_CH;

/******************************************************************************/
/** \addtogroup IfxSfr_Sent_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief SENT object */
typedef volatile struct _Ifx_SENT
{
       __IO Ifx_SENT_CLC                        CLC;                    /**< \brief 0, Clock control register*/
       __IO Ifx_SENT_OCS                        OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_SENT_ID                         ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_SENT_RST                        RST;                    /**< \brief C, Reset status register*/
       __IO Ifx_SENT_PROT                       PROTE;                  /**< \brief 18, PROT register endinit*/
       __IO Ifx_SENT_PROT                       PROTSE;                 /**< \brief 1C, PROT register safe endinit*/
       __IO Ifx_SENT_ACCEN                      ACCEN;                  /**< \brief 20, */
       __IO Ifx_SENT_FDR                        FDR;                    /**< \brief 40, SENT Fractional divider register*/
       __I  Ifx_SENT_INTOV                      INTOV;                  /**< \brief 44, Interrupt overview register*/
       __I  Ifx_SENT_TSR                        TSR;                    /**< \brief 48, Module time stamp register*/
       __IO Ifx_SENT_TPD                        TPD;                    /**< \brief 4C, Time stamp predivider register*/
       __I  Ifx_UReg_8Bit                       reserved_50[48];        /**< \brief 50, \internal Reserved */
       __I  Ifx_SENT_RDR                        RDR[15];                /**< \brief 80, Receive data register 0*/
       __I  Ifx_UReg_8Bit                       reserved_BC[68];        /**< \brief BC, \internal Reserved */
       __IO Ifx_SENT_CH                         CH[15];                 /**< \brief 100, Reserved*/
       __I  Ifx_UReg_8Bit                       reserved_4C0[1472];     /**< \brief 4C0, \internal Reserved */
       __I  Ifx_SENT_RTS                        RTS[15];                /**< \brief A80, Receive time stamp register 0*/
       __I  Ifx_UReg_8Bit                       reserved_ABC[324];      /**< \brief ABC, \internal Reserved */
} Ifx_SENT;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXSENT_REGDEF_H */
