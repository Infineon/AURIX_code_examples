/**
 * \file IfxPpu_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_PPUC/V0.2.1.1.7
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Ppu_Registers Ppu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Ppu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Ppu_Registers
 * 
 * \defgroup IfxSfr_Ppu_Registers_union Register unions
 * \ingroup IfxSfr_Ppu_Registers
 * 
 * \defgroup IfxSfr_Ppu_Registers_struct Memory map
 * \ingroup IfxSfr_Ppu_Registers
 */
#ifndef IFXPPU_REGDEF_H
#define IFXPPU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Ppu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_PPU_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_PPU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_PPU_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_PPU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_PPU_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_PPU_ACCEN_RDB_SRI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_PPU_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_PPU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_PPU_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_PPU_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_PPU_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_PPU_ACCEN_WRB_SRI_Bits;

/** \brief Clock control register */
typedef struct _Ifx_PPU_CLC_Bits
{
    __IO Ifx_Strict_32Bit DISR:1;          /**< \brief [0:0] Module disable request bit - DISR (rw) */
    __I  Ifx_Strict_32Bit DISS:1;          /**< \brief [1:1] Module disable status bit - DISS (rh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_PPU_CLC_Bits;

/** \brief PPU control register */
typedef struct _Ifx_PPU_CTRL_Bits
{
    __IO Ifx_Strict_32Bit REQR:1;          /**< \brief [0:0] Request run (rwh) */
    __IO Ifx_Strict_32Bit REQWU:1;         /**< \brief [1:1] Request wake up from sleep (rwh) */
    __IO Ifx_Strict_32Bit REQH:1;          /**< \brief [2:2] Request halt (rwh) */
    __IO Ifx_Strict_32Bit ENIRQ:1;         /**< \brief [3:3] Enable PPU ISP to ICU interface (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit CBU:1;           /**< \brief [8:8] Clock enable for CBU interface (rw) */
    __IO Ifx_Strict_32Bit LBU:1;           /**< \brief [9:9] Clock enable for LBU interface (rw) */
    __IO Ifx_Strict_32Bit STU:1;           /**< \brief [10:10] Clock enable for STU interface (rw) */
    __IO Ifx_Strict_32Bit STUDMI:1;        /**< \brief [11:11] Clock enable for STU-DMI interface (rw) */
    __IO Ifx_Strict_32Bit CSMDMI:1;        /**< \brief [12:12] Clock enable for CSM-DMI interface (rw) */
    __IO Ifx_Strict_32Bit VMDMI:1;         /**< \brief [13:13] Clock enable for VMEM-DMI interface (rw) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_PPU_CTRL_Bits;

/** \brief Debug Address Register */
typedef struct _Ifx_PPU_DB_ADDR_Bits
{
    __IO Ifx_Strict_32Bit ADDRESS:32;      /**< \brief [31:0] Auxiliary/core/memory address location to be read from for debug read operations or written to for debug write operations (rwh) */
} Ifx_PPU_DB_ADDR_Bits;

/** \brief Debug Command Register */
typedef struct _Ifx_PPU_DB_CMD_Bits
{
    __IO Ifx_Strict_32Bit COMMAND:4;       /**< \brief [3:0] Defines the debug command (read/write to aux/core/mem). All non-enumerated values result in a NOP instruction. (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_PPU_DB_CMD_Bits;

/** \brief Debug Data Register */
typedef struct _Ifx_PPU_DB_DATA_Bits
{
    __IO Ifx_Strict_32Bit DATA_REGISTER:32;    /**< \brief [31:0] DATA REGISTER (rwh) */
} Ifx_PPU_DB_DATA_Bits;

/** \brief Debug Reset Register */
typedef struct _Ifx_PPU_DB_RESET_Bits
{
    __O  Ifx_Strict_32Bit RESET:2;         /**< \brief [1:0] Triggers a system reset request (w) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_PPU_DB_RESET_Bits;

/** \brief Debug Status Register */
typedef struct _Ifx_PPU_DB_STATUS_Bits
{
    __IO Ifx_Strict_32Bit ST:1;            /**< \brief [0:0] The stalled (ST) flag indicates that the debug interface is busy (rwh) */
    __IO Ifx_Strict_32Bit FL:1;            /**< \brief [1:1] When true, the failure (FL) flag indicates that the debug operation has failed (rwh) */
    __IO Ifx_Strict_32Bit RD:1;            /**< \brief [2:2] The ready (RD) flag indicates whether the debug interface is available to accept another transaction command (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit RU:1;            /**< \brief [4:4] The run (RU) flag is set to one when the ARC processor is running (rwh) */
    __IO Ifx_Strict_32Bit RA:1;            /**< \brief [5:5] The Reset Applied (RA) flag is used by the debug host to determine that a target reset has occurred (rwh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_PPU_DB_STATUS_Bits;

/** \brief Cluster ECC Error Status Register */
typedef struct _Ifx_PPU_HSSI_CLUSTER_ECC_ERROR_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __I  Ifx_Strict_32Bit CSM:1;           /**< \brief [1:1] CSM ECC Error (rh) */
    __I  Ifx_Strict_32Bit B_ECC:1;         /**< \brief [2:2] Bus Error (rh) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_PPU_HSSI_CLUSTER_ECC_ERROR_Bits;

/** \brief Cluster Memory SBE Counter Register */
typedef struct _Ifx_PPU_HSSI_CLUSTER_SBE_COUNTER_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __I  Ifx_Strict_32Bit CSM:4;           /**< \brief [7:4] CSM SBE Count (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_PPU_HSSI_CLUSTER_SBE_COUNTER_Bits;

/** \brief HSSI CPU0 Error Status Register */
typedef struct _Ifx_PPU_HSSI_CPU0_SAFETY_ERROR_Bits
{
    __I  Ifx_Strict_32Bit WD:1;            /**< \brief [0:0] WatchDog Error Status Bit (rh) */
    __I  Ifx_Strict_32Bit CPU:1;           /**< \brief [1:1] CPU Lockstep Status Bit (rh) */
    __I  Ifx_Strict_32Bit MECC:1;          /**< \brief [2:2] Scalar Memory ECC Status Bit (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [4:3] \internal Reserved */
    __I  Ifx_Strict_32Bit ISO:1;           /**< \brief [5:5] Debug Isolation Status Bit (rh) */
    __I  Ifx_Strict_32Bit VEC:1;           /**< \brief [6:6] Vector Lockstep Status Bit (rh) */
    __I  Ifx_Strict_32Bit VMEMECC:1;       /**< \brief [7:7] Vector Memory ECC Status Bit (rh) */
    __I  Ifx_Strict_32Bit VEDC:1;          /**< \brief [8:8] Vector EDC/Parity Status Bit (rh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_PPU_HSSI_CPU0_SAFETY_ERROR_Bits;

/** \brief Scalar ECC Error Status Register */
typedef struct _Ifx_PPU_HSSI_ECC_ERROR_HS0_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ICACHE:1;        /**< \brief [4:4] ICache ECC Error (rh) */
    __I  Ifx_Strict_32Bit ICACHE_TAG:1;    /**< \brief [5:5] ICache Tag ECC Error (rh) */
    __I  Ifx_Strict_32Bit DCACHE:1;        /**< \brief [6:6] DCache ECC Error (rh) */
    __I  Ifx_Strict_32Bit DCACHE_TAG:1;    /**< \brief [7:7] DCache Tag ECC Error (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_PPU_HSSI_ECC_ERROR_HS0_Bits;

/** \brief Vector Memory ECC Error Status Register */
typedef struct _Ifx_PPU_HSSI_ECC_ERROR_VISION0_Bits
{
    __I  Ifx_Strict_32Bit VMEM:1;          /**< \brief [0:0] Vector Memory ECC Error (rh) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_PPU_HSSI_ECC_ERROR_VISION0_Bits;

/** \brief HSSI Safety Error Status Register */
typedef struct _Ifx_PPU_HSSI_SAFETY_ERROR_Bits
{
    __I  Ifx_Strict_32Bit CPU0:1;          /**< \brief [0:0] CPU0 Error Bit (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit SM:1;            /**< \brief [4:4] Safety Monitor Error Bit (rh) */
    __I  Ifx_Strict_32Bit WD0:1;           /**< \brief [5:5] WatchDog Error Bit (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [8:6] \internal Reserved */
    __I  Ifx_Strict_32Bit CC:1;            /**< \brief [9:9] Cluster Error Bit (rh) */
    __I  Ifx_Strict_32Bit AC:1;            /**< \brief [10:10] ARConnect Error Bit (rh) */
    __I  Ifx_Strict_32Bit VEC0:1;          /**< \brief [11:11] Vector Error Bit (rh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_PPU_HSSI_SAFETY_ERROR_Bits;

/** \brief Scalar Memory SBE Count Register */
typedef struct _Ifx_PPU_HSSI_SBE_COUNTER_HS0_Bits
{
    __I  Ifx_Strict_32Bit :8;              /**< \brief [7:0] \internal Reserved */
    __I  Ifx_Strict_32Bit DCACHE:4;        /**< \brief [11:8] DCache SBE Count (rh) */
    __I  Ifx_Strict_32Bit ICACHE:4;        /**< \brief [15:12] ICache SBE Count (rh) */
    __I  Ifx_Strict_32Bit DCACHE_TAG:4;    /**< \brief [19:16] DCache TAG SBE Count (rh) */
    __I  Ifx_Strict_32Bit ICACHE_TAG:4;    /**< \brief [23:20] ICache TAG SBE Count (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_PPU_HSSI_SBE_COUNTER_HS0_Bits;

/** \brief Vector Memory SBE Counter Register */
typedef struct _Ifx_PPU_HSSI_SBE_COUNTER_VISION0_Bits
{
    __I  Ifx_Strict_32Bit VMEM:4;          /**< \brief [3:0] SBE count for the vector memories (rh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_PPU_HSSI_SBE_COUNTER_VISION0_Bits;

/** \brief Module identification register */
typedef struct _Ifx_PPU_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module revision - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module number - MOD_NUM (r) */
} Ifx_PPU_ID_Bits;

/** \brief PPU interrupt status register */
typedef struct _Ifx_PPU_IRQSTAT_Bits
{
    __IO Ifx_Strict_32Bit PIRQ:1;          /**< \brief [0:0] Pending interrupt status (rwh) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_PPU_IRQSTAT_Bits;

/** \brief Last captured service request register */
typedef struct _Ifx_PPU_LCSR_Bits
{
    __I  Ifx_Strict_32Bit PN:8;            /**< \brief [7:0] Latest captured service request priority number (rh) */
    __I  Ifx_Strict_32Bit VM:3;            /**< \brief [10:8] Virtual machine number information (rh) */
    __I  Ifx_Strict_32Bit CS:1;            /**< \brief [11:11] Cyber security enable (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [14:12] \internal Reserved */
    __I  Ifx_Strict_32Bit ID:11;           /**< \brief [25:15] Last captured interrupt SRN ID (rh) */
    __I  Ifx_Strict_32Bit ECC:6;           /**< \brief [31:26] Service request ECC (rh) */
} Ifx_PPU_LCSR_Bits;

/** \brief OCDS AP0 trigger register */
typedef struct _Ifx_PPU_OAP0T_Bits
{
    __IO Ifx_Strict_32Bit CV:32;           /**< \brief [31:0] Compare value (rw) */
} Ifx_PPU_OAP0T_Bits;

/** \brief OCDS AP1 trigger register */
typedef struct _Ifx_PPU_OAP1T_Bits
{
    __IO Ifx_Strict_32Bit CV:32;           /**< \brief [31:0] Compare value (rw) */
} Ifx_PPU_OAP1T_Bits;

/** \brief OCDS suspend and trigger bus control */
typedef struct _Ifx_PPU_OSTBC_Bits
{
    __IO Ifx_Strict_32Bit TGS:2;           /**< \brief [1:0] Trigger set for OTGB0 or OTGB1 (rw) */
    __IO Ifx_Strict_32Bit TGB:1;           /**< \brief [2:2] OTGB0/1 bus select (rw) */
    __O  Ifx_Strict_32Bit TG_P:1;          /**< \brief [3:3] TGS, TGB write protection (w) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [20:4] \internal Reserved */
    __IO Ifx_Strict_32Bit EVTA:3;          /**< \brief [23:21] Event associated (rw) */
    __IO Ifx_Strict_32Bit SUS:4;           /**< \brief [27:24] OCDS suspend control (rw) */
    __O  Ifx_Strict_32Bit SUS_P:1;         /**< \brief [28:28] Suspend protect (w) */
    __I  Ifx_Strict_32Bit SUSSTA:1;        /**< \brief [29:29] Suspend status (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_PPU_OSTBC_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_PPU_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_PPU_PROT_Bits;

/** \brief Protection tag definiton for CBU interface */
typedef struct _Ifx_PPU_PTAG_CBU_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine enable (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set enable (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_PPU_PTAG_CBU_Bits;

/** \brief Protection tag definiton for LBU interface */
typedef struct _Ifx_PPU_PTAG_LBU_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine enable (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set enable (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_PPU_PTAG_LBU_Bits;

/** \brief Protection tag definiton for STU interface */
typedef struct _Ifx_PPU_PTAG_STU_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine enable (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set enable (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_PPU_PTAG_STU_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_PPU_RST_CTRLA_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit GRSTEN0:1;       /**< \brief [8:8] Enable for global module reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN1:1;       /**< \brief [9:9] Enable for global module reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN2:1;       /**< \brief [10:10] Enable for global module reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN3:1;       /**< \brief [11:11] Enable for global module reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_PPU_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_PPU_RST_CTRLB_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __O  Ifx_Strict_32Bit STATCLR:1;       /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_PPU_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_PPU_RST_STAT_Bits
{
    __I  Ifx_Strict_32Bit KRST:3;          /**< \brief [2:0] Kernel reset status - KRST (rh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [7:3] \internal Reserved */
    __I  Ifx_Strict_32Bit GRST0:1;         /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_Strict_32Bit GRST1:1;         /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_Strict_32Bit GRST2:1;         /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_Strict_32Bit GRST3:1;         /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_PPU_RST_STAT_Bits;

/** \brief PPU safety mechanism control register */
typedef struct _Ifx_PPU_SMCTRL_Bits
{
    __IO Ifx_Strict_32Bit SAFETYL:2;       /**< \brief [1:0] Define safety level (rw) */
    __IO Ifx_Strict_32Bit ERWDT:1;         /**< \brief [2:2] Enable kernel reset watchdog timer (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_PPU_SMCTRL_Bits;

/** \brief Processor status register */
typedef struct _Ifx_PPU_STAT_Bits
{
    __I  Ifx_Strict_32Bit RUN:2;           /**< \brief [1:0] Run status (rh) */
    __I  Ifx_Strict_32Bit SM:3;            /**< \brief [4:2] Sleep mode (rh) */
    __I  Ifx_Strict_32Bit SAFETY:2;        /**< \brief [6:5] PPU safety status (rh) */
    __I  Ifx_Strict_32Bit SAFETYD:2;       /**< \brief [8:7] PPU safety diagnostic mode (rh) */
    __I  Ifx_Strict_32Bit SCOMP:2;         /**< \brief [10:9] Status safety comparators (rh) */
    __I  Ifx_Strict_32Bit SD:1;            /**< \brief [11:11] Shutdown mode status (rh) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [30:12] \internal Reserved */
    __IO Ifx_Strict_32Bit PCTRIG:1;        /**< \brief [31:31] Performance counter trigger (rw) */
} Ifx_PPU_STAT_Bits;

/** \brief STU Entry Data Structure Base Lower Address Register */
typedef struct _Ifx_PPU_STU_BASE_L_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit STU_BASE_ADDR_31_2_:30;    /**< \brief [31:2] STU_BASE_ADDR[31:2] (rw) */
} Ifx_PPU_STU_BASE_L_Bits;

/** \brief STU BCR Register */
typedef struct _Ifx_PPU_STU_BUILD_Bits
{
    __I  Ifx_Strict_32Bit VERSION:8;       /**< \brief [7:0] STU version (r) */
    __I  Ifx_Strict_32Bit INUM:2;          /**< \brief [9:8] Initiator port number (r) */
    __I  Ifx_Strict_32Bit IDW:1;           /**< \brief [10:10] Initiator port data width (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [11:11] \internal Reserved */
    __I  Ifx_Strict_32Bit PNUM:2;          /**< \brief [13:12] Physical Number of channels (r) */
    __I  Ifx_Strict_32Bit LT:1;            /**< \brief [14:14] Light Option (r) */
    __I  Ifx_Strict_32Bit PM:1;            /**< \brief [15:15] Performance mode (r) */
    __I  Ifx_Strict_32Bit FIFOD:3;         /**< \brief [18:16] FIFO Depth (r) */
    __I  Ifx_Strict_32Bit BUFSZ:3;         /**< \brief [21:19] Buffer Size (r) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_PPU_STU_BUILD_Bits;

/** \brief STU Disable Recording Register */
typedef struct _Ifx_PPU_STU_DISABLE_RECORD_Bits
{
    __I  Ifx_Strict_32Bit C0:1;            /**< \brief [0:0] Core 0 (rh) */
    __I  Ifx_Strict_32Bit C1:1;            /**< \brief [1:1] Core 1 (rh) */
    __I  Ifx_Strict_32Bit C2:1;            /**< \brief [2:2] Core 2 (rh) */
    __I  Ifx_Strict_32Bit C3:1;            /**< \brief [3:3] Core 3 (rh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_PPU_STU_DISABLE_RECORD_Bits;

/** \brief STU Done Interrupt Register */
typedef struct _Ifx_PPU_STU_DONE_IRQ_Bits
{
    __IO Ifx_Strict_32Bit D_IRQ:1;         /**< \brief [0:0] Done Interrupt Status (rwh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __IO Ifx_Strict_32Bit G:1;             /**< \brief [31:31] Global flag (rwh) */
} Ifx_PPU_STU_DONE_IRQ_Bits;

/** \brief STU Number of Entries Register */
typedef struct _Ifx_PPU_STU_ENTRY_NUM_Bits
{
    __IO Ifx_Strict_32Bit NUM:2;           /**< \brief [1:0] Number of entries (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __IO Ifx_Strict_32Bit M:1;             /**< \brief [8:8] MODE (rw) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_PPU_STU_ENTRY_NUM_Bits;

/** \brief STU Entry Select Register */
typedef struct _Ifx_PPU_STU_ENTRY_SELECT_Bits
{
    __IO Ifx_Strict_32Bit SEL_ENTRY:7;     /**< \brief [6:0] Entry Select (rw) */
    __I  Ifx_Strict_32Bit :25;             /**< \brief [31:7] \internal Reserved */
} Ifx_PPU_STU_ENTRY_SELECT_Bits;

/** \brief STU Entry Status Register */
typedef struct _Ifx_PPU_STU_ENTRY_STAT_Bits
{
    __I  Ifx_Strict_32Bit FREE:1;          /**< \brief [0:0] Free Status of Entry (rh) */
    __I  Ifx_Strict_32Bit ERR:1;           /**< \brief [1:1] Error (rh) */
    __I  Ifx_Strict_32Bit EVENT:1;         /**< \brief [2:2] Event Signal Status (rh) */
    __I  Ifx_Strict_32Bit D_IRQ:1;         /**< \brief [3:3] Done Interrupt (rh) */
    __I  Ifx_Strict_32Bit E_IRQ:1;         /**< \brief [4:4] Error Interrupt (rh) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_PPU_STU_ENTRY_STAT_Bits;

/** \brief STU Error Interrupt Register */
typedef struct _Ifx_PPU_STU_ERR_IRQ_Bits
{
    __IO Ifx_Strict_32Bit E_IRQ:1;         /**< \brief [0:0] Error Interrupt Status (rwh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __IO Ifx_Strict_32Bit G:1;             /**< \brief [31:31] Global flag (rwh) */
} Ifx_PPU_STU_ERR_IRQ_Bits;

/** \brief STU Event Register */
typedef struct _Ifx_PPU_STU_EVENT_Bits
{
    __IO Ifx_Strict_32Bit EVT:1;           /**< \brief [0:0] Event Signal Status (rwh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __IO Ifx_Strict_32Bit G:1;             /**< \brief [31:31] Global flag (rwh) */
} Ifx_PPU_STU_EVENT_Bits;

/** \brief STU Free Entry Register */
typedef struct _Ifx_PPU_STU_FREE_NUM_Bits
{
    __I  Ifx_Strict_32Bit FREE_NUM:8;      /**< \brief [7:0] Free Number of entries (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_PPU_STU_FREE_NUM_Bits;

/** \brief STU Next Free Entry Register */
typedef struct _Ifx_PPU_STU_NEXT_FREE_Bits
{
    __I  Ifx_Strict_32Bit NEXT_FREE:8;     /**< \brief [7:0] Next Free Entry (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_PPU_STU_NEXT_FREE_Bits;

/** \brief STU Next Free Entry Increase Register */
typedef struct _Ifx_PPU_STU_NEXT_FREE_INC_Bits
{
    __IO Ifx_Strict_32Bit INC:8;           /**< \brief [7:0] Initiated request entry (rwh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_PPU_STU_NEXT_FREE_INC_Bits;

/** \brief STU Weight Register */
typedef struct _Ifx_PPU_STU_WEIGHT_Bits
{
    __IO Ifx_Strict_32Bit W:3;             /**< \brief [2:0] Weight (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_PPU_STU_WEIGHT_Bits;

/** \brief PPU interrupt vector base address configuration register */
typedef struct _Ifx_PPU_VECBASE_Bits
{
    __I  Ifx_Strict_32Bit :10;             /**< \brief [9:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:22;         /**< \brief [31:10] Interrupt Vector Base Address (rw) */
} Ifx_PPU_VECBASE_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_ppu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ACCEN_RDB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_PPU_ACCEN_RDB_SRI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_PPU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ACCEN_WRB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_PPU_ACCEN_WRB_SRI;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_PPU_CLC;

/** \brief PPU control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_CTRL_Bits B;                   /**< \brief Bitfield access */
} Ifx_PPU_CTRL;

/** \brief Debug Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_DB_ADDR_Bits B;                /**< \brief Bitfield access */
} Ifx_PPU_DB_ADDR;

/** \brief Debug Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_DB_CMD_Bits B;                 /**< \brief Bitfield access */
} Ifx_PPU_DB_CMD;

/** \brief Debug Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_DB_DATA_Bits B;                /**< \brief Bitfield access */
} Ifx_PPU_DB_DATA;

/** \brief Debug Reset Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_DB_RESET_Bits B;               /**< \brief Bitfield access */
} Ifx_PPU_DB_RESET;

/** \brief Debug Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_DB_STATUS_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_DB_STATUS;

/** \brief Cluster ECC Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_CLUSTER_ECC_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_PPU_HSSI_CLUSTER_ECC_ERROR;

/** \brief Cluster Memory SBE Counter Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_CLUSTER_SBE_COUNTER_Bits B;    /**< \brief Bitfield access */
} Ifx_PPU_HSSI_CLUSTER_SBE_COUNTER;

/** \brief HSSI CPU0 Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_CPU0_SAFETY_ERROR_Bits B;    /**< \brief Bitfield access */
} Ifx_PPU_HSSI_CPU0_SAFETY_ERROR;

/** \brief Scalar ECC Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_ECC_ERROR_HS0_Bits B;     /**< \brief Bitfield access */
} Ifx_PPU_HSSI_ECC_ERROR_HS0;

/** \brief Vector Memory ECC Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_ECC_ERROR_VISION0_Bits B;    /**< \brief Bitfield access */
} Ifx_PPU_HSSI_ECC_ERROR_VISION0;

/** \brief HSSI Safety Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_SAFETY_ERROR_Bits B;      /**< \brief Bitfield access */
} Ifx_PPU_HSSI_SAFETY_ERROR;

/** \brief Scalar Memory SBE Count Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_SBE_COUNTER_HS0_Bits B;    /**< \brief Bitfield access */
} Ifx_PPU_HSSI_SBE_COUNTER_HS0;

/** \brief Vector Memory SBE Counter Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_HSSI_SBE_COUNTER_VISION0_Bits B;    /**< \brief Bitfield access */
} Ifx_PPU_HSSI_SBE_COUNTER_VISION0;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_PPU_ID;

/** \brief PPU interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_IRQSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_PPU_IRQSTAT;

/** \brief Last captured service request register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_LCSR_Bits B;                   /**< \brief Bitfield access */
} Ifx_PPU_LCSR;

/** \brief OCDS AP0 trigger register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_OAP0T_Bits B;                  /**< \brief Bitfield access */
} Ifx_PPU_OAP0T;

/** \brief OCDS AP1 trigger register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_OAP1T_Bits B;                  /**< \brief Bitfield access */
} Ifx_PPU_OAP1T;

/** \brief OCDS suspend and trigger bus control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_OSTBC_Bits B;                  /**< \brief Bitfield access */
} Ifx_PPU_OSTBC;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_PPU_PROT;

/** \brief Protection tag definiton for CBU interface   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_PTAG_CBU_Bits B;               /**< \brief Bitfield access */
} Ifx_PPU_PTAG_CBU;

/** \brief Protection tag definiton for LBU interface   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_PTAG_LBU_Bits B;               /**< \brief Bitfield access */
} Ifx_PPU_PTAG_LBU;

/** \brief Protection tag definiton for STU interface   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_PTAG_STU_Bits B;               /**< \brief Bitfield access */
} Ifx_PPU_PTAG_STU;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_PPU_RST_STAT;

/** \brief PPU safety mechanism control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_SMCTRL_Bits B;                 /**< \brief Bitfield access */
} Ifx_PPU_SMCTRL;

/** \brief Processor status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STAT_Bits B;                   /**< \brief Bitfield access */
} Ifx_PPU_STAT;

/** \brief STU Entry Data Structure Base Lower Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_BASE_L_Bits B;             /**< \brief Bitfield access */
} Ifx_PPU_STU_BASE_L;

/** \brief STU BCR Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_BUILD_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_STU_BUILD;

/** \brief STU Disable Recording Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_DISABLE_RECORD_Bits B;     /**< \brief Bitfield access */
} Ifx_PPU_STU_DISABLE_RECORD;

/** \brief STU Done Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_DONE_IRQ_Bits B;           /**< \brief Bitfield access */
} Ifx_PPU_STU_DONE_IRQ;

/** \brief STU Number of Entries Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_ENTRY_NUM_Bits B;          /**< \brief Bitfield access */
} Ifx_PPU_STU_ENTRY_NUM;

/** \brief STU Entry Select Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_ENTRY_SELECT_Bits B;       /**< \brief Bitfield access */
} Ifx_PPU_STU_ENTRY_SELECT;

/** \brief STU Entry Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_ENTRY_STAT_Bits B;         /**< \brief Bitfield access */
} Ifx_PPU_STU_ENTRY_STAT;

/** \brief STU Error Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_ERR_IRQ_Bits B;            /**< \brief Bitfield access */
} Ifx_PPU_STU_ERR_IRQ;

/** \brief STU Event Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_EVENT_Bits B;              /**< \brief Bitfield access */
} Ifx_PPU_STU_EVENT;

/** \brief STU Free Entry Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_FREE_NUM_Bits B;           /**< \brief Bitfield access */
} Ifx_PPU_STU_FREE_NUM;

/** \brief STU Next Free Entry Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_NEXT_FREE_Bits B;          /**< \brief Bitfield access */
} Ifx_PPU_STU_NEXT_FREE;

/** \brief STU Next Free Entry Increase Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_NEXT_FREE_INC_Bits B;      /**< \brief Bitfield access */
} Ifx_PPU_STU_NEXT_FREE_INC;

/** \brief STU Weight Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_STU_WEIGHT_Bits B;             /**< \brief Bitfield access */
} Ifx_PPU_STU_WEIGHT;

/** \brief PPU interrupt vector base address configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PPU_VECBASE_Bits B;                /**< \brief Bitfield access */
} Ifx_PPU_VECBASE;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_PPU_RST
{
       __IO Ifx_PPU_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_PPU_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_PPU_RST_STAT                    STAT;                   /**< \brief 8, Reset status register*/
} Ifx_PPU_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_SFR_PROT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PROT object */
typedef volatile struct _Ifx_PPU_SFR_PROT
{
       __IO Ifx_PPU_PROT                        E;                      /**< \brief 0, PROT register endinit for SFR*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_PPU_PROT                        SE;                     /**< \brief 8, PROT register safe endinit for SFR*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_PPU_PROT                        T;                      /**< \brief 10, PROT register for tag definition registers*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
} Ifx_PPU_SFR_PROT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_SFR_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PPU_SFR_ACCEN
{
       __IO Ifx_PPU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PPU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PPU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PPU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_PPU_SFR_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_SFR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SFR object */
typedef volatile struct _Ifx_PPU_SFR
{
       __IO Ifx_PPU_SFR_PROT                    PROT;                   /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_18[16];        /**< \brief 18, \internal Reserved */
       __IO Ifx_PPU_SFR_ACCEN                   ACCEN;                  /**< \brief 28, */
} Ifx_PPU_SFR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_PTAG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PTAG object */
typedef volatile struct _Ifx_PPU_PTAG
{
       __IO Ifx_PPU_PTAG_CBU                    CBU;                    /**< \brief 0, Protection tag definiton for CBU interface*/
       __IO Ifx_PPU_PTAG_STU                    STU;                    /**< \brief 4, Protection tag definiton for STU interface*/
       __IO Ifx_PPU_PTAG_LBU                    LBU;                    /**< \brief 8, Protection tag definiton for LBU interface*/
} Ifx_PPU_PTAG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_CSM_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PPU_CSM_ACCEN
{
       __IO Ifx_PPU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PPU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PPU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PPU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_PPU_CSM_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_CSM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CSM object */
typedef volatile struct _Ifx_PPU_CSM
{
       __IO Ifx_PPU_PROT                        PROT;                   /**< \brief 0, PROT register for CSM_ACCEN*/
       __I  Ifx_UReg_8Bit                       reserved_4[28];         /**< \brief 4, \internal Reserved */
       __IO Ifx_PPU_CSM_ACCEN                   ACCEN;                  /**< \brief 20, */
} Ifx_PPU_CSM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_AP_ACCEN_SM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SM object */
typedef volatile struct _Ifx_PPU_AP_ACCEN_SM
{
       __IO Ifx_PPU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PPU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PPU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PPU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_PPU_AP_ACCEN_SM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_AP_ACCEN_STUDMI_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief STUDMI object */
typedef volatile struct _Ifx_PPU_AP_ACCEN_STUDMI
{
       __IO Ifx_PPU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PPU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PPU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PPU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_PPU_AP_ACCEN_STUDMI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_AP_ACCEN_DEBUG_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief DEBUG object */
typedef volatile struct _Ifx_PPU_AP_ACCEN_DEBUG
{
       __IO Ifx_PPU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PPU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PPU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PPU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_PPU_AP_ACCEN_DEBUG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_AP_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PPU_AP_ACCEN
{
       __IO Ifx_PPU_AP_ACCEN_SM                 SM;                     /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_PPU_AP_ACCEN_STUDMI             STUDMI;                 /**< \brief 20, */
       __I  Ifx_UReg_8Bit                       reserved_3C[4];         /**< \brief 3C, \internal Reserved */
       __IO Ifx_PPU_AP_ACCEN_DEBUG              DEBUG;                  /**< \brief 40, */
} Ifx_PPU_AP_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_AP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief AP object */
typedef volatile struct _Ifx_PPU_AP
{
       __IO Ifx_PPU_PROT                        PROT;                   /**< \brief 0, PROT register for AP_ACCEN registers*/
       __I  Ifx_UReg_8Bit                       reserved_4[28];         /**< \brief 4, \internal Reserved */
       __IO Ifx_PPU_AP_ACCEN                    ACCEN;                  /**< \brief 20, */
} Ifx_PPU_AP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_STU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief STU object */
typedef volatile struct _Ifx_PPU_STU
{
       __I  Ifx_PPU_STU_BUILD                   BUILD;                  /**< \brief 0, STU BCR Register*/
       __IO Ifx_PPU_STU_ENTRY_NUM               ENTRY_NUM;              /**< \brief 4, STU Number of Entries Register*/
       __I  Ifx_PPU_STU_NEXT_FREE               NEXT_FREE;              /**< \brief 8, STU Next Free Entry Register*/
       __I  Ifx_PPU_STU_FREE_NUM                FREE_NUM;               /**< \brief C, STU Free Entry Register*/
       __IO Ifx_PPU_STU_NEXT_FREE_INC           NEXT_FREE_INC;          /**< \brief 10, STU Next Free Entry Increase Register*/
       __IO Ifx_PPU_STU_ENTRY_SELECT            ENTRY_SELECT;           /**< \brief 14, STU Entry Select Register*/
       __I  Ifx_PPU_STU_ENTRY_STAT              ENTRY_STAT;             /**< \brief 18, STU Entry Status Register*/
       __IO Ifx_PPU_STU_BASE_L                  BASE_L;                 /**< \brief 1C, STU Entry Data Structure Base Lower Address Register*/
       __I  Ifx_UReg_8Bit                       reserved_20[4];         /**< \brief 20, \internal Reserved */
       __IO Ifx_PPU_STU_WEIGHT                  WEIGHT;                 /**< \brief 24, STU Weight Register*/
       __IO Ifx_PPU_STU_EVENT                   EVENT;                  /**< \brief 28, STU Event Register*/
       __IO Ifx_PPU_STU_DONE_IRQ                DONE_IRQ;               /**< \brief 2C, STU Done Interrupt Register*/
       __IO Ifx_PPU_STU_ERR_IRQ                 ERR_IRQ;                /**< \brief 30, STU Error Interrupt Register*/
       __I  Ifx_PPU_STU_DISABLE_RECORD          DISABLE_RECORD;         /**< \brief 34, STU Disable Recording Register*/
} Ifx_PPU_STU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_HSSI_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief HSSI object */
typedef volatile struct _Ifx_PPU_HSSI
{
       __I  Ifx_PPU_HSSI_SAFETY_ERROR           SAFETY_ERROR;           /**< \brief 0, HSSI Safety Error Status Register*/
       __I  Ifx_PPU_HSSI_CPU0_SAFETY_ERROR      CPU0_SAFETY_ERROR;      /**< \brief 4, HSSI CPU0 Error Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_8[28];         /**< \brief 8, \internal Reserved */
       __I  Ifx_PPU_HSSI_SBE_COUNTER_HS0        SBE_COUNTER_HS0;        /**< \brief 24, Scalar Memory SBE Count Register*/
       __I  Ifx_UReg_8Bit                       reserved_28[12];        /**< \brief 28, \internal Reserved */
       __I  Ifx_PPU_HSSI_SBE_COUNTER_VISION0    SBE_COUNTER_VISION0;    /**< \brief 34, Vector Memory SBE Counter Register*/
       __I  Ifx_UReg_8Bit                       reserved_38[28];        /**< \brief 38, \internal Reserved */
       __I  Ifx_PPU_HSSI_CLUSTER_SBE_COUNTER    CLUSTER_SBE_COUNTER;    /**< \brief 54, Cluster Memory SBE Counter Register*/
       __I  Ifx_PPU_HSSI_ECC_ERROR_HS0          ECC_ERROR_HS0;          /**< \brief 58, Scalar ECC Error Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_5C[12];        /**< \brief 5C, \internal Reserved */
       __I  Ifx_PPU_HSSI_ECC_ERROR_VISION0      ECC_ERROR_VISION0;      /**< \brief 68, Vector Memory ECC Error Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_6C[28];        /**< \brief 6C, \internal Reserved */
       __I  Ifx_PPU_HSSI_CLUSTER_ECC_ERROR      CLUSTER_ECC_ERROR;      /**< \brief 88, Cluster ECC Error Status Register*/
} Ifx_PPU_HSSI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_DB_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DB object */
typedef volatile struct _Ifx_PPU_DB
{
       __IO Ifx_PPU_DB_STATUS                   STATUS;                 /**< \brief 0, Debug Status Register*/
       __IO Ifx_PPU_DB_CMD                      CMD;                    /**< \brief 4, Debug Command Register*/
       __IO Ifx_PPU_DB_ADDR                     ADDR;                   /**< \brief 8, Debug Address Register*/
       __IO Ifx_PPU_DB_DATA                     DATA;                   /**< \brief C, Debug Data Register*/
       __O  Ifx_PPU_DB_RESET                    RESET;                  /**< \brief 10, Debug Reset Register*/
} Ifx_PPU_DB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_VMEM_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PPU_VMEM_ACCEN
{
       __IO Ifx_PPU_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PPU_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PPU_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PPU_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_PPU_VMEM_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_VMEM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VMEM object */
typedef volatile struct _Ifx_PPU_VMEM
{
       __IO Ifx_PPU_PROT                        PROT;                   /**< \brief 0, PROT register for VMEM_ACCEN*/
       __I  Ifx_UReg_8Bit                       reserved_4[28];         /**< \brief 4, \internal Reserved */
       __IO Ifx_PPU_VMEM_ACCEN                  ACCEN;                  /**< \brief 20, */
} Ifx_PPU_VMEM;

/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_APU_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU_APU object */
typedef volatile struct _Ifx_PPU_APU
{
       __IO Ifx_PPU_AP                          AP;                     /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_7C[65412];     /**< \brief 7C, \internal Reserved */
} Ifx_PPU_APU;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_CSMAP_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU_CSMAP object */
typedef volatile struct _Ifx_PPU_CSMAP
{
       __IO Ifx_PPU_CSM                         CSM;                    /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_40[65472];     /**< \brief 40, \internal Reserved */
} Ifx_PPU_CSMAP;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_DEBUG_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU_DEBUG object */
typedef volatile struct _Ifx_PPU_DEBUG
{
       __IO Ifx_PPU_DB                          DB;                     /**< \brief 0, Debug Reset Register*/
       __I  Ifx_UReg_8Bit                       reserved_14[65516];     /**< \brief 14, \internal Reserved */
} Ifx_PPU_DEBUG;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_SM_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU_SM object */
typedef volatile struct _Ifx_PPU_SM
{
       __IO Ifx_PPU_HSSI                        HSSI;                   /**< \brief 0, Cluster ECC Error Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_8C[65396];     /**< \brief 8C, \internal Reserved */
} Ifx_PPU_SM;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_STUDMI_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU_STUDMI object */
typedef volatile struct _Ifx_PPU_STUDMI
{
       __IO Ifx_PPU_STU                         STU;                    /**< \brief 0, STU Disable Recording Register*/
       __I  Ifx_UReg_8Bit                       reserved_38[65480];     /**< \brief 38, \internal Reserved */
} Ifx_PPU_STUDMI;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_VMEMAP_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU_VMEMAP object */
typedef volatile struct _Ifx_PPU_VMEMAP
{
       __IO Ifx_PPU_VMEM                        VMEM;                   /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_3C[65476];     /**< \brief 3C, \internal Reserved */
} Ifx_PPU_VMEMAP;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PPU object */
typedef volatile struct _Ifx_PPU
{
       __IO Ifx_PPU_CLC                         CLC;                    /**< \brief 0, Clock control register*/
       __IO Ifx_PPU_OSTBC                       OSTBC;                  /**< \brief 4, OCDS suspend and trigger bus control*/
       __I  Ifx_PPU_ID                          ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_PPU_RST                         RST;                    /**< \brief C, Reset status register*/
       __IO Ifx_PPU_SFR                         SFR;                    /**< \brief 18, */
       __IO Ifx_PPU_CTRL                        CTRL;                   /**< \brief 60, PPU control register*/
       __IO Ifx_PPU_STAT                        STAT;                   /**< \brief 64, Processor status register*/
       __IO Ifx_PPU_SMCTRL                      SMCTRL;                 /**< \brief 68, PPU safety mechanism control register*/
       __IO Ifx_PPU_IRQSTAT                     IRQSTAT;                /**< \brief 6C, PPU interrupt status register*/
       __I  Ifx_PPU_LCSR                        LCSR;                   /**< \brief 70, Last captured service request register*/
       __IO Ifx_PPU_VECBASE                     VECBASE;                /**< \brief 74, PPU interrupt vector base address configuration register*/
       __IO Ifx_PPU_OAP0T                       OAP0T;                  /**< \brief 78, OCDS AP0 trigger register*/
       __IO Ifx_PPU_OAP1T                       OAP1T;                  /**< \brief 7C, OCDS AP1 trigger register*/
       __IO Ifx_PPU_PTAG                        PTAG;                   /**< \brief 80, Protection tag definiton for LBU interface*/
       __I  Ifx_UReg_8Bit                       reserved_8C[65396];     /**< \brief 8C, \internal Reserved */
} Ifx_PPU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPPU_REGDEF_H */
