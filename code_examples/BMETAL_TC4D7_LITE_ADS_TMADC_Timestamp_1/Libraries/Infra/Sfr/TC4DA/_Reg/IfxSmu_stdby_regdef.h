/**
 * \file IfxSmu_stdby_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SMU/V0.2.2.1.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Smu_stdby_Registers Smu_stdby Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Smu_stdby_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Smu_stdby_Registers
 * 
 * \defgroup IfxSfr_Smu_stdby_Registers_union Register unions
 * \ingroup IfxSfr_Smu_stdby_Registers
 * 
 * \defgroup IfxSfr_Smu_stdby_Registers_struct Memory map
 * \ingroup IfxSfr_Smu_stdby_Registers
 */
#ifndef IFXSMU_STDBY_REGDEF_H
#define IFXSMU_STDBY_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Smu_stdby_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_SMU_STDBY_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SMU_STDBY_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_SMU_STDBY_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_SMU_STDBY_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_SMU_STDBY_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMU_STDBY_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_SMU_STDBY_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_SMU_STDBY_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_SMU_STDBY_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_SMU_STDBY_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_SMU_STDBY_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_SMU_STDBY_ACCEN_WRB_FPI_Bits;

/** \brief SMU_STDBY FSP Configuration Register */
typedef struct _Ifx_SMU_STDBY_AGSTDBY_FSP0_Bits
{
    __IO Ifx_UReg_32Bit FE0:1;             /**< \brief [0:0] FSP configuration flag for alarm 0 in alarm group AGSTDBYi. - FE0 (rw) */
    __IO Ifx_UReg_32Bit FE1:1;             /**< \brief [1:1] FSP configuration flag for alarm 1 in alarm group AGSTDBYi. - FE1 (rw) */
    __IO Ifx_UReg_32Bit FE2:1;             /**< \brief [2:2] FSP configuration flag for alarm 2 in alarm group AGSTDBYi. - FE2 (rw) */
    __IO Ifx_UReg_32Bit FE3:1;             /**< \brief [3:3] FSP configuration flag for alarm 3 in alarm group AGSTDBYi. - FE3 (rw) */
    __IO Ifx_UReg_32Bit FE4:1;             /**< \brief [4:4] FSP configuration flag for alarm 4 in alarm group AGSTDBYi. - FE4 (rw) */
    __IO Ifx_UReg_32Bit FE5:1;             /**< \brief [5:5] FSP configuration flag for alarm 5 in alarm group AGSTDBYi. - FE5 (rw) */
    __IO Ifx_UReg_32Bit FE6:1;             /**< \brief [6:6] FSP configuration flag for alarm 6 in alarm group AGSTDBYi. - FE6 (rw) */
    __IO Ifx_UReg_32Bit FE7:1;             /**< \brief [7:7] FSP configuration flag for alarm 7 in alarm group AGSTDBYi. - FE7 (rw) */
    __IO Ifx_UReg_32Bit FE8:1;             /**< \brief [8:8] FSP configuration flag for alarm 8 in alarm group AGSTDBYi. - FE8 (rw) */
    __IO Ifx_UReg_32Bit FE9:1;             /**< \brief [9:9] FSP configuration flag for alarm 9 in alarm group AGSTDBYi. - FE9 (rw) */
    __IO Ifx_UReg_32Bit FE10:1;            /**< \brief [10:10] FSP configuration flag for alarm 10 in alarm group AGSTDBYi. - FE10 (rw) */
    __IO Ifx_UReg_32Bit FE11:1;            /**< \brief [11:11] FSP configuration flag for alarm 11 in alarm group AGSTDBYi. - FE11 (rw) */
    __IO Ifx_UReg_32Bit FE12:1;            /**< \brief [12:12] FSP configuration flag for alarm 12 in alarm group AGSTDBYi. - FE12 (rw) */
    __IO Ifx_UReg_32Bit FE13:1;            /**< \brief [13:13] FSP configuration flag for alarm 13 in alarm group AGSTDBYi. - FE13 (rw) */
    __IO Ifx_UReg_32Bit FE14:1;            /**< \brief [14:14] FSP configuration flag for alarm 14 in alarm group AGSTDBYi. - FE14 (rw) */
    __IO Ifx_UReg_32Bit FE15:1;            /**< \brief [15:15] FSP configuration flag for alarm 15 in alarm group AGSTDBYi. - FE15 (rw) */
    __IO Ifx_UReg_32Bit FE16:1;            /**< \brief [16:16] FSP configuration flag for alarm 16 in alarm group AGSTDBYi. - FE16 (rw) */
    __IO Ifx_UReg_32Bit FE17:1;            /**< \brief [17:17] FSP configuration flag for alarm 17 in alarm group AGSTDBYi. - FE17 (rw) */
    __IO Ifx_UReg_32Bit FE18:1;            /**< \brief [18:18] FSP configuration flag for alarm 18 in alarm group AGSTDBYi. - FE18 (rw) */
    __IO Ifx_UReg_32Bit FE19:1;            /**< \brief [19:19] FSP configuration flag for alarm 19 in alarm group AGSTDBYi. - FE19 (rw) */
    __IO Ifx_UReg_32Bit FE20:1;            /**< \brief [20:20] FSP configuration flag for alarm 20 in alarm group AGSTDBYi. - FE20 (rw) */
    __IO Ifx_UReg_32Bit FE21:1;            /**< \brief [21:21] FSP configuration flag for alarm 21 in alarm group AGSTDBYi. - FE21 (rw) */
    __IO Ifx_UReg_32Bit FE22:1;            /**< \brief [22:22] FSP configuration flag for alarm 22 in alarm group AGSTDBYi. - FE22 (rw) */
    __IO Ifx_UReg_32Bit FE23:1;            /**< \brief [23:23] FSP configuration flag for alarm 23 in alarm group AGSTDBYi. - FE23 (rw) */
    __IO Ifx_UReg_32Bit FE24:1;            /**< \brief [24:24] FSP configuration flag for alarm 24 in alarm group AGSTDBYi. - FE24 (rw) */
    __IO Ifx_UReg_32Bit FE25:1;            /**< \brief [25:25] FSP configuration flag for alarm 25 in alarm group AGSTDBYi. - FE25 (rw) */
    __IO Ifx_UReg_32Bit FE26:1;            /**< \brief [26:26] FSP configuration flag for alarm 26 in alarm group AGSTDBYi. - FE26 (rw) */
    __IO Ifx_UReg_32Bit FE27:1;            /**< \brief [27:27] FSP configuration flag for alarm 27 in alarm group AGSTDBYi. - FE27 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [29:28] \internal Reserved */
    __O  Ifx_UReg_32Bit BITPROT:1;         /**< \brief [30:30] AG2iFSP_STDBY register bits protection (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMU_STDBY_AGSTDBY_FSP0_Bits;

/** \brief SMU_STDBY FSP Configuration Register */
typedef struct _Ifx_SMU_STDBY_AGSTDBY_FSP1_Bits
{
    __IO Ifx_UReg_32Bit FE0:1;             /**< \brief [0:0] FSP configuration flag for alarm 0 in alarm group AGSTDBYi. - FE0 (rw) */
    __IO Ifx_UReg_32Bit FE1:1;             /**< \brief [1:1] FSP configuration flag for alarm 1 in alarm group AGSTDBYi. - FE1 (rw) */
    __IO Ifx_UReg_32Bit FE2:1;             /**< \brief [2:2] FSP configuration flag for alarm 2 in alarm group AGSTDBYi. - FE2 (rw) */
    __IO Ifx_UReg_32Bit FE3:1;             /**< \brief [3:3] FSP configuration flag for alarm 3 in alarm group AGSTDBYi. - FE3 (rw) */
    __IO Ifx_UReg_32Bit FE4:1;             /**< \brief [4:4] FSP configuration flag for alarm 4 in alarm group AGSTDBYi. - FE4 (rw) */
    __IO Ifx_UReg_32Bit FE5:1;             /**< \brief [5:5] FSP configuration flag for alarm 5 in alarm group AGSTDBYi. - FE5 (rw) */
    __IO Ifx_UReg_32Bit FE6:1;             /**< \brief [6:6] FSP configuration flag for alarm 6 in alarm group AGSTDBYi. - FE6 (rw) */
    __IO Ifx_UReg_32Bit FE7:1;             /**< \brief [7:7] FSP configuration flag for alarm 7 in alarm group AGSTDBYi. - FE7 (rw) */
    __IO Ifx_UReg_32Bit FE8:1;             /**< \brief [8:8] FSP configuration flag for alarm 8 in alarm group AGSTDBYi. - FE8 (rw) */
    __IO Ifx_UReg_32Bit FE9:1;             /**< \brief [9:9] FSP configuration flag for alarm 9 in alarm group AGSTDBYi. - FE9 (rw) */
    __IO Ifx_UReg_32Bit FE10:1;            /**< \brief [10:10] FSP configuration flag for alarm 10 in alarm group AGSTDBYi. - FE10 (rw) */
    __IO Ifx_UReg_32Bit FE11:1;            /**< \brief [11:11] FSP configuration flag for alarm 11 in alarm group AGSTDBYi. - FE11 (rw) */
    __IO Ifx_UReg_32Bit FE12:1;            /**< \brief [12:12] FSP configuration flag for alarm 12 in alarm group AGSTDBYi. - FE12 (rw) */
    __IO Ifx_UReg_32Bit FE13:1;            /**< \brief [13:13] FSP configuration flag for alarm 13 in alarm group AGSTDBYi. - FE13 (rw) */
    __IO Ifx_UReg_32Bit FE14:1;            /**< \brief [14:14] FSP configuration flag for alarm 14 in alarm group AGSTDBYi. - FE14 (rw) */
    __IO Ifx_UReg_32Bit FE15:1;            /**< \brief [15:15] FSP configuration flag for alarm 15 in alarm group AGSTDBYi. - FE15 (rw) */
    __IO Ifx_UReg_32Bit FE16:1;            /**< \brief [16:16] FSP configuration flag for alarm 16 in alarm group AGSTDBYi. - FE16 (rw) */
    __IO Ifx_UReg_32Bit FE17:1;            /**< \brief [17:17] FSP configuration flag for alarm 17 in alarm group AGSTDBYi. - FE17 (rw) */
    __IO Ifx_UReg_32Bit FE18:1;            /**< \brief [18:18] FSP configuration flag for alarm 18 in alarm group AGSTDBYi. - FE18 (rw) */
    __IO Ifx_UReg_32Bit FE19:1;            /**< \brief [19:19] FSP configuration flag for alarm 19 in alarm group AGSTDBYi. - FE19 (rw) */
    __IO Ifx_UReg_32Bit FE20:1;            /**< \brief [20:20] FSP configuration flag for alarm 20 in alarm group AGSTDBYi. - FE20 (rw) */
    __IO Ifx_UReg_32Bit FE21:1;            /**< \brief [21:21] FSP configuration flag for alarm 21 in alarm group AGSTDBYi. - FE21 (rw) */
    __IO Ifx_UReg_32Bit FE22:1;            /**< \brief [22:22] FSP configuration flag for alarm 22 in alarm group AGSTDBYi. - FE22 (rw) */
    __IO Ifx_UReg_32Bit FE23:1;            /**< \brief [23:23] FSP configuration flag for alarm 23 in alarm group AGSTDBYi. - FE23 (rw) */
    __IO Ifx_UReg_32Bit FE24:1;            /**< \brief [24:24] FSP configuration flag for alarm 24 in alarm group AGSTDBYi. - FE24 (rw) */
    __IO Ifx_UReg_32Bit FE25:1;            /**< \brief [25:25] FSP configuration flag for alarm 25 in alarm group AGSTDBYi. - FE25 (rw) */
    __IO Ifx_UReg_32Bit FE26:1;            /**< \brief [26:26] FSP configuration flag for alarm 26 in alarm group AGSTDBYi. - FE26 (rw) */
    __IO Ifx_UReg_32Bit FE27:1;            /**< \brief [27:27] FSP configuration flag for alarm 27 in alarm group AGSTDBYi. - FE27 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [29:28] \internal Reserved */
    __O  Ifx_UReg_32Bit BITPROT:1;         /**< \brief [30:30] AG2iFSP_STDBY register bits protection (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMU_STDBY_AGSTDBY_FSP1_Bits;

/** \brief SMU_STDBY FSP Configuration Register */
typedef struct _Ifx_SMU_STDBY_AGSTDBY_FSP2_Bits
{
    __IO Ifx_UReg_32Bit FE0:1;             /**< \brief [0:0] FSP configuration flag for alarm 0 in alarm group AGSTDBYi. - FE0 (rw) */
    __IO Ifx_UReg_32Bit FE1:1;             /**< \brief [1:1] FSP configuration flag for alarm 1 in alarm group AGSTDBYi. - FE1 (rw) */
    __IO Ifx_UReg_32Bit FE2:1;             /**< \brief [2:2] FSP configuration flag for alarm 2 in alarm group AGSTDBYi. - FE2 (rw) */
    __IO Ifx_UReg_32Bit FE3:1;             /**< \brief [3:3] FSP configuration flag for alarm 3 in alarm group AGSTDBYi. - FE3 (rw) */
    __IO Ifx_UReg_32Bit FE4:1;             /**< \brief [4:4] FSP configuration flag for alarm 4 in alarm group AGSTDBYi. - FE4 (rw) */
    __IO Ifx_UReg_32Bit FE5:1;             /**< \brief [5:5] FSP configuration flag for alarm 5 in alarm group AGSTDBYi. - FE5 (rw) */
    __IO Ifx_UReg_32Bit FE6:1;             /**< \brief [6:6] FSP configuration flag for alarm 6 in alarm group AGSTDBYi. - FE6 (rw) */
    __IO Ifx_UReg_32Bit FE7:1;             /**< \brief [7:7] FSP configuration flag for alarm 7 in alarm group AGSTDBYi. - FE7 (rw) */
    __IO Ifx_UReg_32Bit FE8:1;             /**< \brief [8:8] FSP configuration flag for alarm 8 in alarm group AGSTDBYi. - FE8 (rw) */
    __IO Ifx_UReg_32Bit FE9:1;             /**< \brief [9:9] FSP configuration flag for alarm 9 in alarm group AGSTDBYi. - FE9 (rw) */
    __IO Ifx_UReg_32Bit FE10:1;            /**< \brief [10:10] FSP configuration flag for alarm 10 in alarm group AGSTDBYi. - FE10 (rw) */
    __IO Ifx_UReg_32Bit FE11:1;            /**< \brief [11:11] FSP configuration flag for alarm 11 in alarm group AGSTDBYi. - FE11 (rw) */
    __IO Ifx_UReg_32Bit FE12:1;            /**< \brief [12:12] FSP configuration flag for alarm 12 in alarm group AGSTDBYi. - FE12 (rw) */
    __IO Ifx_UReg_32Bit FE13:1;            /**< \brief [13:13] FSP configuration flag for alarm 13 in alarm group AGSTDBYi. - FE13 (rw) */
    __IO Ifx_UReg_32Bit FE14:1;            /**< \brief [14:14] FSP configuration flag for alarm 14 in alarm group AGSTDBYi. - FE14 (rw) */
    __IO Ifx_UReg_32Bit FE15:1;            /**< \brief [15:15] FSP configuration flag for alarm 15 in alarm group AGSTDBYi. - FE15 (rw) */
    __IO Ifx_UReg_32Bit FE16:1;            /**< \brief [16:16] FSP configuration flag for alarm 16 in alarm group AGSTDBYi. - FE16 (rw) */
    __IO Ifx_UReg_32Bit FE17:1;            /**< \brief [17:17] FSP configuration flag for alarm 17 in alarm group AGSTDBYi. - FE17 (rw) */
    __IO Ifx_UReg_32Bit FE18:1;            /**< \brief [18:18] FSP configuration flag for alarm 18 in alarm group AGSTDBYi. - FE18 (rw) */
    __IO Ifx_UReg_32Bit FE19:1;            /**< \brief [19:19] FSP configuration flag for alarm 19 in alarm group AGSTDBYi. - FE19 (rw) */
    __IO Ifx_UReg_32Bit FE20:1;            /**< \brief [20:20] FSP configuration flag for alarm 20 in alarm group AGSTDBYi. - FE20 (rw) */
    __IO Ifx_UReg_32Bit FE21:1;            /**< \brief [21:21] FSP configuration flag for alarm 21 in alarm group AGSTDBYi. - FE21 (rw) */
    __IO Ifx_UReg_32Bit FE22:1;            /**< \brief [22:22] FSP configuration flag for alarm 22 in alarm group AGSTDBYi. - FE22 (rw) */
    __IO Ifx_UReg_32Bit FE23:1;            /**< \brief [23:23] FSP configuration flag for alarm 23 in alarm group AGSTDBYi. - FE23 (rw) */
    __IO Ifx_UReg_32Bit FE24:1;            /**< \brief [24:24] FSP configuration flag for alarm 24 in alarm group AGSTDBYi. - FE24 (rw) */
    __IO Ifx_UReg_32Bit FE25:1;            /**< \brief [25:25] FSP configuration flag for alarm 25 in alarm group AGSTDBYi. - FE25 (rw) */
    __IO Ifx_UReg_32Bit FE26:1;            /**< \brief [26:26] FSP configuration flag for alarm 26 in alarm group AGSTDBYi. - FE26 (rw) */
    __IO Ifx_UReg_32Bit FE27:1;            /**< \brief [27:27] FSP configuration flag for alarm 27 in alarm group AGSTDBYi. - FE27 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [29:28] \internal Reserved */
    __O  Ifx_UReg_32Bit BITPROT:1;         /**< \brief [30:30] AG2iFSP_STDBY register bits protection (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMU_STDBY_AGSTDBY_FSP2_Bits;

/** \brief SMU_STDBY FSP Configuration Register */
typedef struct _Ifx_SMU_STDBY_AGSTDBY_FSP3_Bits
{
    __IO Ifx_UReg_32Bit FE0:1;             /**< \brief [0:0] FSP configuration flag for alarm 0 in alarm group AGSTDBYi. - FE0 (rw) */
    __IO Ifx_UReg_32Bit FE1:1;             /**< \brief [1:1] FSP configuration flag for alarm 1 in alarm group AGSTDBYi. - FE1 (rw) */
    __IO Ifx_UReg_32Bit FE2:1;             /**< \brief [2:2] FSP configuration flag for alarm 2 in alarm group AGSTDBYi. - FE2 (rw) */
    __IO Ifx_UReg_32Bit FE3:1;             /**< \brief [3:3] FSP configuration flag for alarm 3 in alarm group AGSTDBYi. - FE3 (rw) */
    __IO Ifx_UReg_32Bit FE4:1;             /**< \brief [4:4] FSP configuration flag for alarm 4 in alarm group AGSTDBYi. - FE4 (rw) */
    __IO Ifx_UReg_32Bit FE5:1;             /**< \brief [5:5] FSP configuration flag for alarm 5 in alarm group AGSTDBYi. - FE5 (rw) */
    __IO Ifx_UReg_32Bit FE6:1;             /**< \brief [6:6] FSP configuration flag for alarm 6 in alarm group AGSTDBYi. - FE6 (rw) */
    __IO Ifx_UReg_32Bit FE7:1;             /**< \brief [7:7] FSP configuration flag for alarm 7 in alarm group AGSTDBYi. - FE7 (rw) */
    __IO Ifx_UReg_32Bit FE8:1;             /**< \brief [8:8] FSP configuration flag for alarm 8 in alarm group AGSTDBYi. - FE8 (rw) */
    __IO Ifx_UReg_32Bit FE9:1;             /**< \brief [9:9] FSP configuration flag for alarm 9 in alarm group AGSTDBYi. - FE9 (rw) */
    __IO Ifx_UReg_32Bit FE10:1;            /**< \brief [10:10] FSP configuration flag for alarm 10 in alarm group AGSTDBYi. - FE10 (rw) */
    __IO Ifx_UReg_32Bit FE11:1;            /**< \brief [11:11] FSP configuration flag for alarm 11 in alarm group AGSTDBYi. - FE11 (rw) */
    __IO Ifx_UReg_32Bit FE12:1;            /**< \brief [12:12] FSP configuration flag for alarm 12 in alarm group AGSTDBYi. - FE12 (rw) */
    __IO Ifx_UReg_32Bit FE13:1;            /**< \brief [13:13] FSP configuration flag for alarm 13 in alarm group AGSTDBYi. - FE13 (rw) */
    __IO Ifx_UReg_32Bit FE14:1;            /**< \brief [14:14] FSP configuration flag for alarm 14 in alarm group AGSTDBYi. - FE14 (rw) */
    __IO Ifx_UReg_32Bit FE15:1;            /**< \brief [15:15] FSP configuration flag for alarm 15 in alarm group AGSTDBYi. - FE15 (rw) */
    __IO Ifx_UReg_32Bit FE16:1;            /**< \brief [16:16] FSP configuration flag for alarm 16 in alarm group AGSTDBYi. - FE16 (rw) */
    __IO Ifx_UReg_32Bit FE17:1;            /**< \brief [17:17] FSP configuration flag for alarm 17 in alarm group AGSTDBYi. - FE17 (rw) */
    __IO Ifx_UReg_32Bit FE18:1;            /**< \brief [18:18] FSP configuration flag for alarm 18 in alarm group AGSTDBYi. - FE18 (rw) */
    __IO Ifx_UReg_32Bit FE19:1;            /**< \brief [19:19] FSP configuration flag for alarm 19 in alarm group AGSTDBYi. - FE19 (rw) */
    __IO Ifx_UReg_32Bit FE20:1;            /**< \brief [20:20] FSP configuration flag for alarm 20 in alarm group AGSTDBYi. - FE20 (rw) */
    __IO Ifx_UReg_32Bit FE21:1;            /**< \brief [21:21] FSP configuration flag for alarm 21 in alarm group AGSTDBYi. - FE21 (rw) */
    __IO Ifx_UReg_32Bit FE22:1;            /**< \brief [22:22] FSP configuration flag for alarm 22 in alarm group AGSTDBYi. - FE22 (rw) */
    __IO Ifx_UReg_32Bit FE23:1;            /**< \brief [23:23] FSP configuration flag for alarm 23 in alarm group AGSTDBYi. - FE23 (rw) */
    __IO Ifx_UReg_32Bit FE24:1;            /**< \brief [24:24] FSP configuration flag for alarm 24 in alarm group AGSTDBYi. - FE24 (rw) */
    __IO Ifx_UReg_32Bit FE25:1;            /**< \brief [25:25] FSP configuration flag for alarm 25 in alarm group AGSTDBYi. - FE25 (rw) */
    __IO Ifx_UReg_32Bit FE26:1;            /**< \brief [26:26] FSP configuration flag for alarm 26 in alarm group AGSTDBYi. - FE26 (rw) */
    __IO Ifx_UReg_32Bit FE27:1;            /**< \brief [27:27] FSP configuration flag for alarm 27 in alarm group AGSTDBYi. - FE27 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [29:28] \internal Reserved */
    __O  Ifx_UReg_32Bit BITPROT:1;         /**< \brief [30:30] AG2iFSP_STDBY register bits protection (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMU_STDBY_AGSTDBY_FSP3_Bits;

/** \brief SMU_STDBY Alarm Status Register */
typedef struct _Ifx_SMU_STDBY_AGSTDBY_STS_Bits
{
    __IO Ifx_UReg_32Bit SF0:1;             /**< \brief [0:0] Status flag for alarm 0 belonging to alarm group i. - SF0 (rw1ch) */
    __IO Ifx_UReg_32Bit SF1:1;             /**< \brief [1:1] Status flag for alarm 1 belonging to alarm group i. - SF1 (rw1ch) */
    __IO Ifx_UReg_32Bit SF2:1;             /**< \brief [2:2] Status flag for alarm 2 belonging to alarm group i. - SF2 (rw1ch) */
    __IO Ifx_UReg_32Bit SF3:1;             /**< \brief [3:3] Status flag for alarm 3 belonging to alarm group i. - SF3 (rw1ch) */
    __IO Ifx_UReg_32Bit SF4:1;             /**< \brief [4:4] Status flag for alarm 4 belonging to alarm group i. - SF4 (rw1ch) */
    __IO Ifx_UReg_32Bit SF5:1;             /**< \brief [5:5] Status flag for alarm 5 belonging to alarm group i. - SF5 (rw1ch) */
    __IO Ifx_UReg_32Bit SF6:1;             /**< \brief [6:6] Status flag for alarm 6 belonging to alarm group i. - SF6 (rw1ch) */
    __IO Ifx_UReg_32Bit SF7:1;             /**< \brief [7:7] Status flag for alarm 7 belonging to alarm group i. - SF7 (rw1ch) */
    __IO Ifx_UReg_32Bit SF8:1;             /**< \brief [8:8] Status flag for alarm 8 belonging to alarm group i. - SF8 (rw1ch) */
    __IO Ifx_UReg_32Bit SF9:1;             /**< \brief [9:9] Status flag for alarm 9 belonging to alarm group i. - SF9 (rw1ch) */
    __IO Ifx_UReg_32Bit SF10:1;            /**< \brief [10:10] Status flag for alarm 10 belonging to alarm group i. - SF10 (rw1ch) */
    __IO Ifx_UReg_32Bit SF11:1;            /**< \brief [11:11] Status flag for alarm 11 belonging to alarm group i. - SF11 (rw1ch) */
    __IO Ifx_UReg_32Bit SF12:1;            /**< \brief [12:12] Status flag for alarm 12 belonging to alarm group i. - SF12 (rw1ch) */
    __IO Ifx_UReg_32Bit SF13:1;            /**< \brief [13:13] Status flag for alarm 13 belonging to alarm group i. - SF13 (rw1ch) */
    __IO Ifx_UReg_32Bit SF14:1;            /**< \brief [14:14] Status flag for alarm 14 belonging to alarm group i. - SF14 (rw1ch) */
    __IO Ifx_UReg_32Bit SF15:1;            /**< \brief [15:15] Status flag for alarm 15 belonging to alarm group i. - SF15 (rw1ch) */
    __IO Ifx_UReg_32Bit SF16:1;            /**< \brief [16:16] Status flag for alarm 16 belonging to alarm group i. - SF16 (rw1ch) */
    __IO Ifx_UReg_32Bit SF17:1;            /**< \brief [17:17] Status flag for alarm 17 belonging to alarm group i. - SF17 (rw1ch) */
    __IO Ifx_UReg_32Bit SF18:1;            /**< \brief [18:18] Status flag for alarm 18 belonging to alarm group i. - SF18 (rw1ch) */
    __IO Ifx_UReg_32Bit SF19:1;            /**< \brief [19:19] Status flag for alarm 19 belonging to alarm group i. - SF19 (rw1ch) */
    __IO Ifx_UReg_32Bit SF20:1;            /**< \brief [20:20] Status flag for alarm 20 belonging to alarm group i. - SF20 (rw1ch) */
    __IO Ifx_UReg_32Bit SF21:1;            /**< \brief [21:21] Status flag for alarm 21 belonging to alarm group i. - SF21 (rw1ch) */
    __IO Ifx_UReg_32Bit SF22:1;            /**< \brief [22:22] Status flag for alarm 22 belonging to alarm group i. - SF22 (rw1ch) */
    __IO Ifx_UReg_32Bit SF23:1;            /**< \brief [23:23] Status flag for alarm 23 belonging to alarm group i. - SF23 (rw1ch) */
    __IO Ifx_UReg_32Bit SF24:1;            /**< \brief [24:24] Status flag for alarm 24 belonging to alarm group i. - SF24 (rw1ch) */
    __IO Ifx_UReg_32Bit SF25:1;            /**< \brief [25:25] Status flag for alarm 25 belonging to alarm group i. - SF25 (rw1ch) */
    __IO Ifx_UReg_32Bit SF26:1;            /**< \brief [26:26] Status flag for alarm 26 belonging to alarm group i. - SF26 (rw1ch) */
    __IO Ifx_UReg_32Bit SF27:1;            /**< \brief [27:27] Status flag for alarm 27 belonging to alarm group i. - SF27 (rw1ch) */
    __IO Ifx_UReg_32Bit FSP0ERR:1;         /**< \brief [28:28] FSP0 Error Pin Fault State Status Bit - FSP0ERR (rw1ch) */
    __IO Ifx_UReg_32Bit FSP1ERR:1;         /**< \brief [29:29] FSP1 Error Pin Fault State Status Bit - FSP1ERR (rw1ch) */
    __IO Ifx_UReg_32Bit FSP2ERR:1;         /**< \brief [30:30] FSP2 Error Pin Fault State Status Bit - FSP2ERR (rw1ch) */
    __IO Ifx_UReg_32Bit FSP3ERR:1;         /**< \brief [31:31] FSP3 Error Pin Fault State Status Bit - FSP3ERR (rw1ch) */
} Ifx_SMU_STDBY_AGSTDBY_STS_Bits;

/** \brief SMU_STDBY Command Register */
typedef struct _Ifx_SMU_STDBY_CMDSTDBY_Bits
{
    __IO Ifx_UReg_32Bit SMUEN:1;           /**< \brief [0:0] SMU_stdby Module Enable - SMUEN (rw) */
    __IO Ifx_UReg_32Bit FSP0EN:1;          /**< \brief [1:1] SMU_stdby FSP0 Error pin enable - FSP0EN (rw) */
    __IO Ifx_UReg_32Bit FSP1EN:1;          /**< \brief [2:2] SMU_stdby FSP1 Error pin enable - FSP1EN (rw) */
    __IO Ifx_UReg_32Bit FSP2EN:1;          /**< \brief [3:3] SMU_stdby FSP2 Error pin enable - FSP2EN (rw) */
    __IO Ifx_UReg_32Bit FSP3EN:1;          /**< \brief [4:4] SMU_stdby FSP3 Error pin enable - FSP3EN (rw) */
    __IO Ifx_UReg_32Bit FSP0PD:1;          /**< \brief [5:5] SMU_stdby FSP0 Error pull-down - FSP0PD (rw) */
    __IO Ifx_UReg_32Bit FSP1PD:1;          /**< \brief [6:6] SMU_stdby FSP1 Error pull-down - FSP1PD (rw) */
    __IO Ifx_UReg_32Bit FSP2PD:1;          /**< \brief [7:7] SMU_stdby FSP2 Error pull-down - FSP2PD (rw) */
    __IO Ifx_UReg_32Bit FSP3PD:1;          /**< \brief [8:8] SMU_stdby FSP3 Error pull-down - FSP3PD (rw) */
    __IO Ifx_UReg_32Bit ASCE:1;            /**< \brief [9:9] SMU_stdby alarm status clear enable - ASCE (rwh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [29:10] \internal Reserved */
    __O  Ifx_UReg_32Bit BITPROT:1;         /**< \brief [30:30] CMDSTDBY register bits protection (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMU_STDBY_CMDSTDBY_Bits;

/** \brief SMU_STDBY BIST Control Register */
typedef struct _Ifx_SMU_STDBY_MONBISTCTRL_Bits
{
    __IO Ifx_UReg_32Bit TSTEN:1;           /**< \brief [0:0] SMU_stdby alarm BIST enable - TSTEN (rw1sh) */
    __O  Ifx_UReg_32Bit TSTCLR:1;          /**< \brief [1:1] SMU_stdby BIST flag clear - TSTCLR (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [29:2] \internal Reserved */
    __O  Ifx_UReg_32Bit BITPROT:1;         /**< \brief [30:30] Bit Protection TSTEN - BITPROT (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_SMU_STDBY_MONBISTCTRL_Bits;

/** \brief SMU_STDBY BIST Status Register */
typedef struct _Ifx_SMU_STDBY_MONBISTSTAT_Bits
{
    __I  Ifx_UReg_32Bit TSTOK:1;           /**< \brief [0:0] SMU_stdby BIST ok bit - TSTOK (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __I  Ifx_UReg_32Bit TSTRUN:1;          /**< \brief [2:2] SMU_stdby BIST run bit - TSTRUN (rh) */
    __I  Ifx_UReg_32Bit TSTDONE:1;         /**< \brief [3:3] SMU_stdby BIST done bit - TSTDONE (rh) */
    __I  Ifx_UReg_32Bit PMSERR:1;          /**< \brief [4:4] Error found in PMS SARADC by SMU_stdby BIST (rh) */
    __I  Ifx_UReg_32Bit SMUERR0:1;         /**< \brief [5:5] Error found in SMU_stdby found by SMU_stdby BIST (rh) */
    __I  Ifx_UReg_32Bit SMUERR1:1;         /**< \brief [6:6] Error found in SMU_stdby found by SMU_stdby BIST (rh) */
    __I  Ifx_UReg_32Bit SMUERR2:1;         /**< \brief [7:7] Error found in SMU_stdby found by SMU_stdby BIST (rh) */
    __I  Ifx_UReg_32Bit SMUERR3:1;         /**< \brief [8:8] Error found in SMU_stdby found by SMU_stdby BIST (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_SMU_STDBY_MONBISTSTAT_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_SMU_STDBY_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_SMU_STDBY_PROT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_smu_stdby_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_ACCEN_PRS_Bits B;        /**< \brief Bitfield access */
} Ifx_SMU_STDBY_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_ACCEN_RDA_Bits B;        /**< \brief Bitfield access */
} Ifx_SMU_STDBY_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_ACCEN_RDB_FPI_Bits B;    /**< \brief Bitfield access */
} Ifx_SMU_STDBY_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_ACCEN_VM_Bits B;         /**< \brief Bitfield access */
} Ifx_SMU_STDBY_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_ACCEN_WRA_Bits B;        /**< \brief Bitfield access */
} Ifx_SMU_STDBY_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_ACCEN_WRB_FPI_Bits B;    /**< \brief Bitfield access */
} Ifx_SMU_STDBY_ACCEN_WRB_FPI;

/** \brief SMU_STDBY FSP Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_AGSTDBY_FSP0_Bits B;     /**< \brief Bitfield access */
} Ifx_SMU_STDBY_AGSTDBY_FSP0;

/** \brief SMU_STDBY FSP Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_AGSTDBY_FSP1_Bits B;     /**< \brief Bitfield access */
} Ifx_SMU_STDBY_AGSTDBY_FSP1;

/** \brief SMU_STDBY FSP Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_AGSTDBY_FSP2_Bits B;     /**< \brief Bitfield access */
} Ifx_SMU_STDBY_AGSTDBY_FSP2;

/** \brief SMU_STDBY FSP Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_AGSTDBY_FSP3_Bits B;     /**< \brief Bitfield access */
} Ifx_SMU_STDBY_AGSTDBY_FSP3;

/** \brief SMU_STDBY Alarm Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_AGSTDBY_STS_Bits B;      /**< \brief Bitfield access */
} Ifx_SMU_STDBY_AGSTDBY_STS;

/** \brief SMU_STDBY Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_CMDSTDBY_Bits B;         /**< \brief Bitfield access */
} Ifx_SMU_STDBY_CMDSTDBY;

/** \brief SMU_STDBY BIST Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_MONBISTCTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_SMU_STDBY_MONBISTCTRL;

/** \brief SMU_STDBY BIST Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_MONBISTSTAT_Bits B;      /**< \brief Bitfield access */
} Ifx_SMU_STDBY_MONBISTSTAT;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_SMU_STDBY_PROT_Bits B;             /**< \brief Bitfield access */
} Ifx_SMU_STDBY_PROT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Smu_stdby_AGSTDBY_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief AGSTDBY object */
typedef volatile struct _Ifx_SMU_STDBY_AGSTDBY
{
       __IO Ifx_SMU_STDBY_AGSTDBY_FSP0          FSP0;                   /**< \brief 0, SMU_STDBY FSP Configuration Register*/
       __IO Ifx_SMU_STDBY_AGSTDBY_FSP1          FSP1;                   /**< \brief 4, SMU_STDBY FSP Configuration Register*/
       __IO Ifx_SMU_STDBY_AGSTDBY_FSP2          FSP2;                   /**< \brief 8, SMU_STDBY FSP Configuration Register*/
       __IO Ifx_SMU_STDBY_AGSTDBY_FSP3          FSP3;                   /**< \brief C, SMU_STDBY FSP Configuration Register*/
       __IO Ifx_SMU_STDBY_AGSTDBY_STS           STS;                    /**< \brief 10, SMU_STDBY Alarm Status Register*/
} Ifx_SMU_STDBY_AGSTDBY;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Smu_stdby_ACCENSTDBY_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENSTDBY object */
typedef volatile struct _Ifx_SMU_STDBY_ACCENSTDBY
{
       __IO Ifx_SMU_STDBY_ACCEN_WRA             WRA;                    /**< \brief 0, SMU_STDBY Write access enable register A*/
       __IO Ifx_SMU_STDBY_ACCEN_WRB_FPI         WRB;                    /**< \brief 4, SMU_STDBY Write access enable register B*/
       __IO Ifx_SMU_STDBY_ACCEN_RDA             RDA;                    /**< \brief 8, SMU_STDBY Read access enable register A*/
       __IO Ifx_SMU_STDBY_ACCEN_RDB_FPI         RDB;                    /**< \brief C, SMU_STDBY Read access enable register B*/
       __IO Ifx_SMU_STDBY_ACCEN_VM              VM;                     /**< \brief 10, SMU_STDBY VM access enable register*/
       __IO Ifx_SMU_STDBY_ACCEN_PRS             PRS;                    /**< \brief 14, SMU_STDBY PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_SMU_STDBY_ACCENSTDBY;

/******************************************************************************/
/** \addtogroup IfxSfr_Smu_stdby_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief SMU_STDBY object */
typedef volatile struct _Ifx_SMU_STDBY
{
       __I  Ifx_UReg_8Bit                       reserved_0[20];         /**< \brief 0, \internal Reserved */
       __I  Ifx_SMU_STDBY_MONBISTSTAT           MONBISTSTAT;            /**< \brief 14, SMU_STDBY BIST Status Register*/
       __IO Ifx_SMU_STDBY_MONBISTCTRL           MONBISTCTRL;            /**< \brief 18, SMU_STDBY BIST Control Register*/
       __IO Ifx_SMU_STDBY_CMDSTDBY              CMDSTDBY;               /**< \brief 1C, SMU_STDBY Command Register*/
       __IO Ifx_SMU_STDBY_AGSTDBY               AGSTDBY[5];             /**< \brief 20, */
       __I  Ifx_UReg_8Bit                       reserved_84[24];        /**< \brief 84, \internal Reserved */
       __IO Ifx_SMU_STDBY_PROT                  PROTSTDBYE;             /**< \brief 9C, SMU_STDBY PROT Register Endinit*/
       __IO Ifx_SMU_STDBY_PROT                  PROTSTDBYSE;            /**< \brief A0, SMU_STDBY PROT Register Safe Endinit*/
       __IO Ifx_SMU_STDBY_ACCENSTDBY            ACCENSTDBY;             /**< \brief A4, */
       __I  Ifx_UReg_8Bit                       reserved_C4[1852];      /**< \brief C4, \internal Reserved */
} Ifx_SMU_STDBY;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXSMU_STDBY_REGDEF_H */
