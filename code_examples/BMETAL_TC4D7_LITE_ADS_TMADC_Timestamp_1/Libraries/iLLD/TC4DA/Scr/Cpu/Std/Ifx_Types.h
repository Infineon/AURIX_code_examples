/**
 * \file Ifx_Types.h
 * \brief This files defines all types used by the IFX HAL and libraries
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef IFX_TYPES_H
#define IFX_TYPES_H 1

/******************************************************************************/
// #include "SrvSw/SCR/Compilers.h" /* mapping compiler specific keywords */
// #include "SrvSw/SCR/CompilerTasking.h"
// #include "Cpu/Platform_Types.h"

/*For AgenTiX*/

#include "SrvSw/SCR/Compilers.h"       /* mapping compiler specific keywords */
#include "SrvSw/SCR/CompilerTasking.h" /* mapping compiler specific keywords */
#include "Platform_Types.h"

/*******************************************************************************
**                      Global Data Types                                     **
**                      (Types not defined by AUTOSAR)                        **
*******************************************************************************/
typedef signed long long   sint64;          /**< \brief -9223372036854775808 .. +9223372036854775807     */
typedef unsigned long long uint64;          /**< \brief                    0 .. 18446744073709551615     */

typedef const char        *pchar;           /**< \brief const char pointer                               */
typedef void              *pvoid;           /**< \brief void pointer                                     */
typedef volatile void     *vvoid;           /**< \brief volatile void pointer                            */

typedef struct
{
    float32 real;               /**< \brief Real part */
    float32 imag;               /**< \brief Imaginary part */
} cfloat32;

typedef struct
{
    uint32 real;                /**< \brief Real part */
    uint32 imag;                /**< \brief Imaginary part */
} csint32;

// typedef sint64             Ifx_TickTime;    /**< \brief Time in ticks */
// #define TIME_INFINITE ((Ifx_TickTime)0x7FFFFFFFFFFFFFFFLL)
// #define TIME_NULL     ((Ifx_TickTime)0x0000000000000000LL)

// #define IFX_ONES          (0xFFFFFFFFFFFFFFFFU) //why 64 bits??
// #define IFX_ZEROS         (0x0000000000000000U)

/** \brief  definition. */
typedef enum
{
    Ifx_Functionality_disable = 0,      /**< \brief The module/feature is disabled */
    Ifx_Functionality_enable  = 1       /**< \brief The module/feature is enabled */
} Ifx_Functionality;

/** \brief Circular buffer definition. */
typedef struct
{
    void  *base;                   /**< \brief buffer base address */
    uint16 index;                  /**< \brief buffer current index */
    uint16 length;                 /**< \brief buffer length*/
} Ifx_CircularBuffer;

typedef pvoid Ifx_AddressValue;    /**< \brief Used in address values */

#define IFX_PI                  (3.1415926535897932384626433832795f)
#define IFX_TWO_OVER_PI         (2.0 / IFX_PI)
#define IFX_ONE_OVER_SQRT_THREE (0.57735026918962576450914878050196f)
#define IFX_SQRT_TWO            (1.4142135623730950488016887242097f)
#define IFX_SQRT_THREE          (1.7320508075688772935274463415059f)

#endif /* IFX_TYPES_H */
