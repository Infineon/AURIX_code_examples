/**
 * \file IfxDre_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_DRE/V0.2.1.1.24
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Dre_Registers Dre Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Dre_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Dre_Registers
 * 
 * \defgroup IfxSfr_Dre_Registers_union Register unions
 * \ingroup IfxSfr_Dre_Registers
 * 
 * \defgroup IfxSfr_Dre_Registers_struct Memory map
 * \ingroup IfxSfr_Dre_Registers
 */
#ifndef IFXDRE_REGDEF_H
#define IFXDRE_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Dre_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_DRE_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DRE_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_DRE_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_DRE_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_DRE_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_DRE_ACCEN_RDB_SRI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_DRE_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DRE_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_DRE_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_DRE_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_DRE_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_DRE_ACCEN_WRB_SRI_Bits;

/** \brief RAM CAN address database CRE start address */
typedef struct _Ifx_DRE_CAD_CAN_CRESA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Address (rw) */
} Ifx_DRE_CAD_CAN_CRESA_Bits;

/** \brief CAN receive request 0 */
typedef struct _Ifx_DRE_CANRXR0_Bits
{
    __I  Ifx_Strict_32Bit C0_RH0R:1;       /**< \brief [0:0] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C0_RH1R:1;       /**< \brief [1:1] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C1_RH0R:1;       /**< \brief [2:2] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C1_RH1R:1;       /**< \brief [3:3] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C2_RH0R:1;       /**< \brief [4:4] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C2_RH1R:1;       /**< \brief [5:5] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C3_RH0R:1;       /**< \brief [6:6] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C3_RH1R:1;       /**< \brief [7:7] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C4_RH0R:1;       /**< \brief [8:8] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C4_RH1R:1;       /**< \brief [9:9] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C5_RH0R:1;       /**< \brief [10:10] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C5_RH1R:1;       /**< \brief [11:11] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C6_RH0R:1;       /**< \brief [12:12] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C6_RH1R:1;       /**< \brief [13:13] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C7_RH0R:1;       /**< \brief [14:14] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C7_RH1R:1;       /**< \brief [15:15] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C8_RH0R:1;       /**< \brief [16:16] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C8_RH1R:1;       /**< \brief [17:17] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C9_RH0R:1;       /**< \brief [18:18] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C9_RH1R:1;       /**< \brief [19:19] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C10_RH0R:1;      /**< \brief [20:20] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C10_RH1R:1;      /**< \brief [21:21] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C11_RH0R:1;      /**< \brief [22:22] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C11_RH1R:1;      /**< \brief [23:23] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C12_RH0R:1;      /**< \brief [24:24] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C12_RH1R:1;      /**< \brief [25:25] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C13_RH0R:1;      /**< \brief [26:26] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C13_RH1R:1;      /**< \brief [27:27] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C14_RH0R:1;      /**< \brief [28:28] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C14_RH1R:1;      /**< \brief [29:29] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C15_RH0R:1;      /**< \brief [30:30] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C15_RH1R:1;      /**< \brief [31:31] CANi Receive Host Buffer 1 Pending Request (rh) */
} Ifx_DRE_CANRXR0_Bits;

/** \brief CAN receive request 1 */
typedef struct _Ifx_DRE_CANRXR1_Bits
{
    __I  Ifx_Strict_32Bit C16_RH0R:1;      /**< \brief [0:0] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C16_RH1R:1;      /**< \brief [1:1] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C17_RH0R:1;      /**< \brief [2:2] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C17_RH1R:1;      /**< \brief [3:3] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C18_RH0R:1;      /**< \brief [4:4] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C18_RH1R:1;      /**< \brief [5:5] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C19_RH0R:1;      /**< \brief [6:6] CANi Receive Host Buffer 0 Pending Request (rh) */
    __I  Ifx_Strict_32Bit C19_RH1R:1;      /**< \brief [7:7] CANi Receive Host Buffer 1 Pending Request (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DRE_CANRXR1_Bits;

/** \brief CAN transmit buffer available request */
typedef struct _Ifx_DRE_CANTXR_Bits
{
    __I  Ifx_Strict_32Bit C0_THR:1;        /**< \brief [0:0] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C1_THR:1;        /**< \brief [1:1] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C2_THR:1;        /**< \brief [2:2] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C3_THR:1;        /**< \brief [3:3] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C4_THR:1;        /**< \brief [4:4] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C5_THR:1;        /**< \brief [5:5] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C6_THR:1;        /**< \brief [6:6] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C7_THR:1;        /**< \brief [7:7] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C8_THR:1;        /**< \brief [8:8] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C9_THR:1;        /**< \brief [9:9] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C10_THR:1;       /**< \brief [10:10] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C11_THR:1;       /**< \brief [11:11] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C12_THR:1;       /**< \brief [12:12] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C13_THR:1;       /**< \brief [13:13] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C14_THR:1;       /**< \brief [14:14] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C15_THR:1;       /**< \brief [15:15] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C16_THR:1;       /**< \brief [16:16] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C17_THR:1;       /**< \brief [17:17] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C18_THR:1;       /**< \brief [18:18] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit C19_THR:1;       /**< \brief [19:19] CANi Transmit Host Buffer 0 Request (rh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_CANTXR_Bits;

/** \brief CAN resource partition */
typedef struct _Ifx_DRE_CAN_RP_Bits
{
    __IO Ifx_Strict_32Bit RPI:3;           /**< \brief [2:0] CAN Resource Partition Index (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_DRE_CAN_RP_Bits;

/** \brief CAN input buffer pending request */
typedef struct _Ifx_DRE_CIBL_BPR_Bits
{
    __IO Ifx_Strict_32Bit PR0:1;           /**< \brief [0:0] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR1:1;           /**< \brief [1:1] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR2:1;           /**< \brief [2:2] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR3:1;           /**< \brief [3:3] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR4:1;           /**< \brief [4:4] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR5:1;           /**< \brief [5:5] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR6:1;           /**< \brief [6:6] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR7:1;           /**< \brief [7:7] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR8:1;           /**< \brief [8:8] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR9:1;           /**< \brief [9:9] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR10:1;          /**< \brief [10:10] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR11:1;          /**< \brief [11:11] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR12:1;          /**< \brief [12:12] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR13:1;          /**< \brief [13:13] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR14:1;          /**< \brief [14:14] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR15:1;          /**< \brief [15:15] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR16:1;          /**< \brief [16:16] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR17:1;          /**< \brief [17:17] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR18:1;          /**< \brief [18:18] Buffer Pending Request (rw1ch) */
    __IO Ifx_Strict_32Bit PR19:1;          /**< \brief [19:19] Buffer Pending Request (rw1ch) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_CIBL_BPR_Bits;

/** \brief CAN input buffer list status */
typedef struct _Ifx_DRE_CIBL_STATUS_Bits
{
    __I  Ifx_Strict_32Bit PIDX:6;          /**< \brief [5:0] Put Index (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __I  Ifx_Strict_32Bit CBI:6;           /**< \brief [13:8] Current CAN Input Buffer Index (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __I  Ifx_Strict_32Bit BF:1;            /**< \brief [16:16] Buffer Full (rh) */
    __I  Ifx_Strict_32Bit BE:1;            /**< \brief [17:17] Buffer Empty (rh) */
    __IO Ifx_Strict_32Bit CRCE:1;          /**< \brief [18:18] CRC error flag (rw1ch) */
    __IO Ifx_Strict_32Bit WDTE:1;          /**< \brief [19:19] Watchdog timeout error flag (rw1ch) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_CIBL_STATUS_Bits;

/** \brief RAM CIBUF CRC computed by CRE */
typedef struct _Ifx_DRE_CIBUF_CRC_Bits
{
    __IO Ifx_UReg_32Bit CRC:16;            /**< \brief [15:0] CRC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_CIBUF_CRC_Bits;

/** \brief RAM CIBUF data byte m */
typedef struct _Ifx_DRE_CIBUF_DB_Bits
{
    __IO Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rwh) */
} Ifx_DRE_CIBUF_DB_Bits;

/** \brief RAM CIBUF register 0 */
typedef struct _Ifx_DRE_CIBUF_R0_Bits
{
    __I  Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] CAN Identifier (rh) */
    __I  Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rh) */
    __I  Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rh) */
    __I  Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rh) */
} Ifx_DRE_CIBUF_R0_Bits;

/** \brief RAM CIBUF register 1 */
typedef struct _Ifx_DRE_CIBUF_R1_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rwh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_DRE_CIBUF_R1_Bits;

/** \brief RAM CIBUF routing header */
typedef struct _Ifx_DRE_CIBUF_RHEAD_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __I  Ifx_UReg_32Bit SCBID:6;           /**< \brief [7:2] Source CAN Bus ID (rh) */
    __I  Ifx_UReg_32Bit ETHDID:6;          /**< \brief [13:8] Ethernet Destination ID (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_CIBUF_RHEAD_Bits;

/** \brief CAN Input buffer timeout status */
typedef struct _Ifx_DRE_CITO_Bits
{
    __IO Ifx_Strict_32Bit TOUT0:1;         /**< \brief [0:0] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT1:1;         /**< \brief [1:1] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT2:1;         /**< \brief [2:2] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT3:1;         /**< \brief [3:3] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT4:1;         /**< \brief [4:4] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT5:1;         /**< \brief [5:5] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT6:1;         /**< \brief [6:6] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT7:1;         /**< \brief [7:7] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT8:1;         /**< \brief [8:8] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT9:1;         /**< \brief [9:9] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT10:1;        /**< \brief [10:10] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT11:1;        /**< \brief [11:11] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT12:1;        /**< \brief [12:12] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT13:1;        /**< \brief [13:13] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT14:1;        /**< \brief [14:14] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT15:1;        /**< \brief [15:15] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT16:1;        /**< \brief [16:16] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT17:1;        /**< \brief [17:17] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT18:1;        /**< \brief [18:18] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT19:1;        /**< \brief [19:19] Timeout error (rw1ch) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_CITO_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_DRE_CLC_Bits
{
    __IO Ifx_Strict_32Bit DISR:1;          /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_Strict_32Bit DISS:1;          /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __IO Ifx_Strict_32Bit EDIS:1;          /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_DRE_CLC_Bits;

/** \brief CAN output buffer pending request 0 */
typedef struct _Ifx_DRE_COBL_BPR0_Bits
{
    __IO Ifx_Strict_32Bit PR0:1;           /**< \brief [0:0] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR1:1;           /**< \brief [1:1] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR2:1;           /**< \brief [2:2] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR3:1;           /**< \brief [3:3] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR4:1;           /**< \brief [4:4] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR5:1;           /**< \brief [5:5] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR6:1;           /**< \brief [6:6] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR7:1;           /**< \brief [7:7] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR8:1;           /**< \brief [8:8] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR9:1;           /**< \brief [9:9] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR10:1;          /**< \brief [10:10] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR11:1;          /**< \brief [11:11] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR12:1;          /**< \brief [12:12] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR13:1;          /**< \brief [13:13] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR14:1;          /**< \brief [14:14] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR15:1;          /**< \brief [15:15] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR16:1;          /**< \brief [16:16] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR17:1;          /**< \brief [17:17] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR18:1;          /**< \brief [18:18] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR19:1;          /**< \brief [19:19] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR20:1;          /**< \brief [20:20] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR21:1;          /**< \brief [21:21] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR22:1;          /**< \brief [22:22] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR23:1;          /**< \brief [23:23] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR24:1;          /**< \brief [24:24] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR25:1;          /**< \brief [25:25] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR26:1;          /**< \brief [26:26] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR27:1;          /**< \brief [27:27] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR28:1;          /**< \brief [28:28] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR29:1;          /**< \brief [29:29] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR30:1;          /**< \brief [30:30] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR31:1;          /**< \brief [31:31] Buffer Pending Request (rwh) */
} Ifx_DRE_COBL_BPR0_Bits;

/** \brief CAN output buffer pending request 1 */
typedef struct _Ifx_DRE_COBL_BPR1_Bits
{
    __IO Ifx_Strict_32Bit PR32:1;          /**< \brief [0:0] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR33:1;          /**< \brief [1:1] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR34:1;          /**< \brief [2:2] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR35:1;          /**< \brief [3:3] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR36:1;          /**< \brief [4:4] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR37:1;          /**< \brief [5:5] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR38:1;          /**< \brief [6:6] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR39:1;          /**< \brief [7:7] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR40:1;          /**< \brief [8:8] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR41:1;          /**< \brief [9:9] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR42:1;          /**< \brief [10:10] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR43:1;          /**< \brief [11:11] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR44:1;          /**< \brief [12:12] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR45:1;          /**< \brief [13:13] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR46:1;          /**< \brief [14:14] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR47:1;          /**< \brief [15:15] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR48:1;          /**< \brief [16:16] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR49:1;          /**< \brief [17:17] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR50:1;          /**< \brief [18:18] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR51:1;          /**< \brief [19:19] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR52:1;          /**< \brief [20:20] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR53:1;          /**< \brief [21:21] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR54:1;          /**< \brief [22:22] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR55:1;          /**< \brief [23:23] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR56:1;          /**< \brief [24:24] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR57:1;          /**< \brief [25:25] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR58:1;          /**< \brief [26:26] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR59:1;          /**< \brief [27:27] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR60:1;          /**< \brief [28:28] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR61:1;          /**< \brief [29:29] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR62:1;          /**< \brief [30:30] Buffer Pending Request (rwh) */
    __IO Ifx_Strict_32Bit PR63:1;          /**< \brief [31:31] Buffer Pending Request (rwh) */
} Ifx_DRE_COBL_BPR1_Bits;

/** \brief CAN output buffer list status */
typedef struct _Ifx_DRE_COBL_STATUS_Bits
{
    __I  Ifx_Strict_32Bit PIDX:7;          /**< \brief [6:0] Put Index (rh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [15:7] \internal Reserved */
    __I  Ifx_Strict_32Bit BF:1;            /**< \brief [16:16] Buffer Full (rh) */
    __I  Ifx_Strict_32Bit BE:1;            /**< \brief [17:17] Buffer Empty (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [18:18] \internal Reserved */
    __IO Ifx_Strict_32Bit WDTE:1;          /**< \brief [19:19] Watchdog timeout error flag (rw1ch) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DRE_COBL_STATUS_Bits;

/** \brief RAM COBUF CRC computed by DRE */
typedef struct _Ifx_DRE_COBUF_CRC_Bits
{
    __IO Ifx_UReg_32Bit CRC:16;            /**< \brief [15:0] CRC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_COBUF_CRC_Bits;

/** \brief RAM COBUF data byte m */
typedef struct _Ifx_DRE_COBUF_DB_Bits
{
    __I  Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rh) */
} Ifx_DRE_COBUF_DB_Bits;

/** \brief RAM multi-cast routing header */
typedef struct _Ifx_DRE_COBUF_MCRH_Bits
{
    __I  Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] Source ID (rh) */
    __I  Ifx_UReg_32Bit DID0:6;            /**< \brief [13:8] Destination ID 1 (rh) */
    __I  Ifx_UReg_32Bit DID1:6;            /**< \brief [19:14] Destination ID 2 (rh) */
    __I  Ifx_UReg_32Bit DID2:6;            /**< \brief [25:20] Destination ID 3 (rh) */
    __I  Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] Destination ID 4 (rh) */
} Ifx_DRE_COBUF_MCRH_Bits;

/** \brief RAM COBUF register 0 */
typedef struct _Ifx_DRE_COBUF_R0_Bits
{
    __I  Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] CAN Identifier (rh) */
    __I  Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rh) */
    __I  Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rh) */
    __I  Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rh) */
} Ifx_DRE_COBUF_R0_Bits;

/** \brief RAM COBUF register 1 */
typedef struct _Ifx_DRE_COBUF_R1_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __I  Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rh) */
    __I  Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rh) */
    __I  Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_DRE_COBUF_R1_Bits;

/** \brief RAM uni-cast routing header */
typedef struct _Ifx_DRE_COBUF_UCRH_Bits
{
    __I  Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] Source ID (rh) */
    __I  Ifx_UReg_32Bit DID:6;             /**< \brief [13:8] Destination ID (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_COBUF_UCRH_Bits;

/** \brief CAN Output buffer timeout status 0 */
typedef struct _Ifx_DRE_COTO0_Bits
{
    __IO Ifx_Strict_32Bit TOUT0:1;         /**< \brief [0:0] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT1:1;         /**< \brief [1:1] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT2:1;         /**< \brief [2:2] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT3:1;         /**< \brief [3:3] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT4:1;         /**< \brief [4:4] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT5:1;         /**< \brief [5:5] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT6:1;         /**< \brief [6:6] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT7:1;         /**< \brief [7:7] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT8:1;         /**< \brief [8:8] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT9:1;         /**< \brief [9:9] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT10:1;        /**< \brief [10:10] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT11:1;        /**< \brief [11:11] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT12:1;        /**< \brief [12:12] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT13:1;        /**< \brief [13:13] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT14:1;        /**< \brief [14:14] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT15:1;        /**< \brief [15:15] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT16:1;        /**< \brief [16:16] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT17:1;        /**< \brief [17:17] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT18:1;        /**< \brief [18:18] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT19:1;        /**< \brief [19:19] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT20:1;        /**< \brief [20:20] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT21:1;        /**< \brief [21:21] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT22:1;        /**< \brief [22:22] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT23:1;        /**< \brief [23:23] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT24:1;        /**< \brief [24:24] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT25:1;        /**< \brief [25:25] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT26:1;        /**< \brief [26:26] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT27:1;        /**< \brief [27:27] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT28:1;        /**< \brief [28:28] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT29:1;        /**< \brief [29:29] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT30:1;        /**< \brief [30:30] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT31:1;        /**< \brief [31:31] Timeout error (rw1ch) */
} Ifx_DRE_COTO0_Bits;

/** \brief CAN Output buffer timeout status 1 */
typedef struct _Ifx_DRE_COTO1_Bits
{
    __IO Ifx_Strict_32Bit TOUT32:1;        /**< \brief [0:0] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT33:1;        /**< \brief [1:1] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT34:1;        /**< \brief [2:2] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT35:1;        /**< \brief [3:3] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT36:1;        /**< \brief [4:4] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT37:1;        /**< \brief [5:5] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT38:1;        /**< \brief [6:6] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT39:1;        /**< \brief [7:7] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT40:1;        /**< \brief [8:8] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT41:1;        /**< \brief [9:9] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT42:1;        /**< \brief [10:10] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT43:1;        /**< \brief [11:11] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT44:1;        /**< \brief [12:12] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT45:1;        /**< \brief [13:13] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT46:1;        /**< \brief [14:14] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT47:1;        /**< \brief [15:15] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT48:1;        /**< \brief [16:16] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT49:1;        /**< \brief [17:17] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT50:1;        /**< \brief [18:18] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT51:1;        /**< \brief [19:19] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT52:1;        /**< \brief [20:20] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT53:1;        /**< \brief [21:21] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT54:1;        /**< \brief [22:22] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT55:1;        /**< \brief [23:23] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT56:1;        /**< \brief [24:24] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT57:1;        /**< \brief [25:25] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT58:1;        /**< \brief [26:26] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT59:1;        /**< \brief [27:27] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT60:1;        /**< \brief [28:28] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT61:1;        /**< \brief [29:29] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT62:1;        /**< \brief [30:30] Timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TOUT63:1;        /**< \brief [31:31] Timeout error (rw1ch) */
} Ifx_DRE_COTO1_Bits;

/** \brief DRE CAN watchdog configuration */
typedef struct _Ifx_DRE_CWDCFG_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] Enable CAN watchdog (rw) */
    __IO Ifx_Strict_32Bit WTOE:1;          /**< \brief [1:1] CAN watchdog timeout error (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [15:2] \internal Reserved */
    __IO Ifx_Strict_32Bit CTO:16;          /**< \brief [31:16] CAN timeout value (rw) */
} Ifx_DRE_CWDCFG_Bits;

/** \brief DMA resource partition */
typedef struct _Ifx_DRE_DMA_RP_Bits
{
    __IO Ifx_Strict_32Bit RPI:3;           /**< \brief [2:0] Resource partition index (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_DRE_DMA_RP_Bits;

/** \brief Destination memory configuration */
typedef struct _Ifx_DRE_DMEM_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit EN1:1;           /**< \brief [0:0] Enable Memory Destination 1 (rw1sh) */
    __IO Ifx_Strict_32Bit EN2:1;           /**< \brief [1:1] Enable Memory Destination 2 (rw1sh) */
    __IO Ifx_Strict_32Bit AST:1;           /**< \brief [2:2] Append Status Information (rw) */
    __IO Ifx_Strict_32Bit ATH:1;           /**< \brief [3:3] Append Timing Header (rw) */
    __IO Ifx_Strict_32Bit INP:4;           /**< \brief [7:4] Interrupt Node Pointer (rw) */
    __IO Ifx_Strict_32Bit OA:8;            /**< \brief [15:8] Offset Address (rw) */
    __IO Ifx_Strict_32Bit CTYP:1;          /**< \brief [16:16] Type of CAN message (rw) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [31:17] \internal Reserved */
} Ifx_DRE_DMEM_CONFIG_Bits;

/** \brief RAM Destination memory frame data buffer index */
typedef struct _Ifx_DRE_DMEM_FDBI_Bits
{
    __IO Ifx_UReg_32Bit INDEX:32;          /**< \brief [31:0] Data buffer index (rwh) */
} Ifx_DRE_DMEM_FDBI_Bits;

/** \brief Destination memory transfer mode configuration */
typedef struct _Ifx_DRE_DMEM_MODE_Bits
{
    __IO Ifx_Strict_32Bit TYP:1;           /**< \brief [0:0] PDU Mode enabled (rw) */
    __IO Ifx_Strict_32Bit TRIG:1;          /**< \brief [1:1] Trigger Mode (rw) */
    __IO Ifx_Strict_32Bit BUF:1;           /**< \brief [2:2] Buffer Mode (rw) */
    __IO Ifx_Strict_32Bit FOM:1;           /**< \brief [3:3] FDBI overflow mode (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_DRE_DMEM_MODE_Bits;

/** \brief Destination memory resource partition */
typedef struct _Ifx_DRE_DMEM_RP_Bits
{
    __IO Ifx_Strict_32Bit RPI:3;           /**< \brief [2:0] Resource Partition Index (rw) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_DRE_DMEM_RP_Bits;

/** \brief RAM Destination memory start address */
typedef struct _Ifx_DRE_DMEM_SA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Absolute Start Address (rw) */
} Ifx_DRE_DMEM_SA_Bits;

/** \brief Destination memory status */
typedef struct _Ifx_DRE_DMEM_STATUS_Bits
{
    __IO Ifx_Strict_32Bit NM:1;            /**< \brief [0:0] New Message (rw1ch) */
    __I  Ifx_Strict_32Bit SID:6;           /**< \brief [6:1] Source ID (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __I  Ifx_Strict_32Bit BC:8;            /**< \brief [15:8] Buffer Counter (rh) */
    __IO Ifx_Strict_32Bit WMF:1;           /**< \brief [16:16] Watermark Flag (rw1ch) */
    __IO Ifx_Strict_32Bit WAF:1;           /**< \brief [17:17] Wraparound Flag (rw1ch) */
    __IO Ifx_Strict_32Bit BO:1;            /**< \brief [18:18] Buffer Overflow (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [19:19] \internal Reserved */
    __IO Ifx_Strict_32Bit MC:12;           /**< \brief [31:20] Message Counter (rw1ch) */
} Ifx_DRE_DMEM_STATUS_Bits;

/** \brief RAM Destination memory wraparound level */
typedef struct _Ifx_DRE_DMEM_WA_Bits
{
    __IO Ifx_UReg_32Bit WAL:32;            /**< \brief [31:0] Wraparound level (rw) */
} Ifx_DRE_DMEM_WA_Bits;

/** \brief RAM Destination memory watermark level */
typedef struct _Ifx_DRE_DMEM_WM_Bits
{
    __IO Ifx_UReg_32Bit WML:32;            /**< \brief [31:0] Watermark level (rw) */
} Ifx_DRE_DMEM_WM_Bits;

/** \brief Ethernet address database configuration */
typedef struct _Ifx_DRE_EADCFG_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit GOV:8;           /**< \brief [23:16] GETH offset value (rw) */
    __IO Ifx_Strict_32Bit LOV:8;           /**< \brief [31:24] LETH offset value (rw) */
} Ifx_DRE_EADCFG_Bits;

/** \brief RAM GETH Rx DMA channel address */
typedef struct _Ifx_DRE_EAD_GETH_RXDMA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Address (rw) */
} Ifx_DRE_EAD_GETH_RXDMA_Bits;

/** \brief RAM GETH Tx DMA channel address */
typedef struct _Ifx_DRE_EAD_GETH_TXDMA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Address (rw) */
} Ifx_DRE_EAD_GETH_TXDMA_Bits;

/** \brief RAM LETH Rx DMA channel address */
typedef struct _Ifx_DRE_EAD_LETH_RXDMA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Address (rw) */
} Ifx_DRE_EAD_LETH_RXDMA_Bits;

/** \brief RAM LETH Tx DMA channel address */
typedef struct _Ifx_DRE_EAD_LETH_TXDMA_Bits
{
    __IO Ifx_UReg_32Bit ADR:32;            /**< \brief [31:0] Address (rw) */
} Ifx_DRE_EAD_LETH_TXDMA_Bits;

/** \brief Ethernet descriptor list status */
typedef struct _Ifx_DRE_EDLSTAT_Bits
{
    __IO Ifx_Strict_32Bit RXCNT:6;         /**< \brief [5:0] Receive count (rwh) */
    __IO Ifx_Strict_32Bit TXCNT:8;         /**< \brief [13:6] Transmit and forward count (rwh) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_EDLSTAT_Bits;

/** \brief Ethernet input buffer configuration */
typedef struct _Ifx_DRE_EIBUF_CONFIG_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit NTSCF_SA:6;      /**< \brief [7:2] Start Address of the NTSCF Header (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [27:8] \internal Reserved */
    __IO Ifx_Strict_32Bit RRF:1;           /**< \brief [28:28] Reject Remote Frame (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_DRE_EIBUF_CONFIG_Bits;

/** \brief Ethernet input buffer error */
typedef struct _Ifx_DRE_EIBUF_ERROR_Bits
{
    __IO Ifx_Strict_32Bit WDTE:1;          /**< \brief [0:0] Ethernet watchdog timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit RDESE:1;         /**< \brief [1:1] Rx descriptor error (rw1ch) */
    __IO Ifx_Strict_32Bit BF:1;            /**< \brief [2:2] Buffer full (rw1ch) */
    __I  Ifx_Strict_32Bit DERRTYP:3;       /**< \brief [5:3] Descriptor error type (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_DRE_EIBUF_ERROR_Bits;

/** \brief Ethernet input buffer status */
typedef struct _Ifx_DRE_EIBUF_STATUS_Bits
{
    __I  Ifx_Strict_32Bit LE_ACF_CAN_ADDR:9;    /**< \brief [8:0] Last Error ACF CAN Address Pointer (rh) */
    __IO Ifx_Strict_32Bit FE:1;            /**< \brief [9:9] Input Ethernet Frame Error (rw1ch) */
    __IO Ifx_Strict_32Bit IFT:1;           /**< \brief [10:10] Invalid Frame Type (rw1ch) */
    __IO Ifx_Strict_32Bit IDID:1;          /**< \brief [11:11] Invalid destination ID (rw1ch) */
    __IO Ifx_Strict_32Bit LME:1;           /**< \brief [12:12] AVTP Length Mismatch Error (rw1ch) */
    __IO Ifx_Strict_32Bit CFE:1;           /**< \brief [13:13] CAN Format Error (rw1ch) */
    __IO Ifx_Strict_32Bit RFE:1;           /**< \brief [14:14] Remote Frame Error (rw1ch) */
    __IO Ifx_Strict_32Bit FC:1;            /**< \brief [15:15] Ethernet Frame Complete (rw1ch) */
    __I  Ifx_Strict_32Bit ACF_CAN_ADDR:9;    /**< \brief [24:16] ACF CAN Address Pointer (rh) */
    __I  Ifx_Strict_32Bit MSFE:3;          /**< \brief [27:25] Matched Stream ID Filter Element (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __IO Ifx_Strict_32Bit RXREQ:1;         /**< \brief [29:29] Ethernet receive request (rw1ch) */
    __IO Ifx_Strict_32Bit BPRC:1;          /**< \brief [30:30] Buffer Pending Request Clear (rw1sh) */
    __I  Ifx_Strict_32Bit BPR:1;           /**< \brief [31:31] Buffer Pending Request (rh) */
} Ifx_DRE_EIBUF_STATUS_Bits;

/** \brief Ethernet output buffer configuration */
typedef struct _Ifx_DRE_EOBUF_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit PL:11;           /**< \brief [10:0] ACF Payload Length (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit DID:6;           /**< \brief [21:16] Destination ID of the Buffer (rw) */
    __IO Ifx_Strict_32Bit HE:1;            /**< \brief [22:22] Header Enable (rw) */
    __IO Ifx_Strict_32Bit TTM:2;           /**< \brief [24:23] Transmit Trigger Mode (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_DRE_EOBUF_CONFIG_Bits;

/** \brief Ethernet output buffer error */
typedef struct _Ifx_DRE_EOBUF_ERROR_Bits
{
    __IO Ifx_Strict_32Bit WDTE:1;          /**< \brief [0:0] Ethernet watchdog timeout error (rw1ch) */
    __IO Ifx_Strict_32Bit TDESE:1;         /**< \brief [1:1] Tx descriptor error (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __I  Ifx_Strict_32Bit DERRTYP:3;       /**< \brief [5:3] Descriptor error type (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_DRE_EOBUF_ERROR_Bits;

/** \brief MAC header 0 */
typedef struct _Ifx_DRE_EOBUF_MAC_H0_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit DA0:8;           /**< \brief [23:16] MAC Destination Address 0 (rw) */
    __IO Ifx_Strict_32Bit DA1:8;           /**< \brief [31:24] MAC Destination Address 1 (rw) */
} Ifx_DRE_EOBUF_MAC_H0_Bits;

/** \brief MAC header 1 */
typedef struct _Ifx_DRE_EOBUF_MAC_H1_Bits
{
    __IO Ifx_Strict_32Bit DA2:8;           /**< \brief [7:0] MAC Destination Address 2 (rw) */
    __IO Ifx_Strict_32Bit DA3:8;           /**< \brief [15:8] MAC Destination Address 3 (rw) */
    __IO Ifx_Strict_32Bit DA4:8;           /**< \brief [23:16] MAC Destination Address 4 (rw) */
    __IO Ifx_Strict_32Bit DA5:8;           /**< \brief [31:24] MAC Destination Address 5 (rw) */
} Ifx_DRE_EOBUF_MAC_H1_Bits;

/** \brief MAC header 2 */
typedef struct _Ifx_DRE_EOBUF_MAC_H2_Bits
{
    __IO Ifx_Strict_32Bit SA0:8;           /**< \brief [7:0] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA1:8;           /**< \brief [15:8] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA2:8;           /**< \brief [23:16] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA3:8;           /**< \brief [31:24] MAC Source Address (rw) */
} Ifx_DRE_EOBUF_MAC_H2_Bits;

/** \brief MAC header 3 */
typedef struct _Ifx_DRE_EOBUF_MAC_H3_Bits
{
    __IO Ifx_Strict_32Bit SA4:8;           /**< \brief [7:0] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit SA5:8;           /**< \brief [15:8] MAC Source Address (rw) */
    __IO Ifx_Strict_32Bit TPID_H:8;        /**< \brief [23:16] Tagged Protocol Identifier High (rw) */
    __IO Ifx_Strict_32Bit TPID_L:8;        /**< \brief [31:24] Tagged Protocol Identifier Low (rw) */
} Ifx_DRE_EOBUF_MAC_H3_Bits;

/** \brief MAC header 4 */
typedef struct _Ifx_DRE_EOBUF_MAC_H4_Bits
{
    __IO Ifx_Strict_32Bit VTAG_H:8;        /**< \brief [7:0] VLAN Tag High (rw) */
    __IO Ifx_Strict_32Bit VTAG_L:8;        /**< \brief [15:8] VLAN Tag Low (rw) */
    __IO Ifx_Strict_32Bit AVTPET_H:8;      /**< \brief [23:16] AVTP Ethertype High (rw) */
    __IO Ifx_Strict_32Bit AVTPET_L:8;      /**< \brief [31:24] AVTP Ethertype Low (rw) */
} Ifx_DRE_EOBUF_MAC_H4_Bits;

/** \brief NTSCF header */
typedef struct _Ifx_DRE_EOBUF_NTSCF_H0_Bits
{
    __I  Ifx_Strict_32Bit SUBTYP:8;        /**< \brief [7:0] Subtype of AVTP Frame (r) */
    __I  Ifx_Strict_32Bit NTSCFDL_H:3;     /**< \brief [10:8] NTSCF Data Length High (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [14:11] \internal Reserved */
    __IO Ifx_Strict_32Bit SV:1;            /**< \brief [15:15] Stream ID Valid (rw) */
    __I  Ifx_Strict_32Bit NTSCFDL_L:8;     /**< \brief [23:16] NTSCF Data Length Low (rh) */
    __IO Ifx_Strict_32Bit SN:8;            /**< \brief [31:24] Sequence Number (rwh) */
} Ifx_DRE_EOBUF_NTSCF_H0_Bits;

/** \brief Stream ID configuration 0 */
typedef struct _Ifx_DRE_EOBUF_NTSCF_STREAM0_ID_Bits
{
    __IO Ifx_Strict_32Bit ID0:8;           /**< \brief [7:0] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID1:8;           /**< \brief [15:8] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID2:8;           /**< \brief [23:16] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID3:8;           /**< \brief [31:24] Stream ID (rw) */
} Ifx_DRE_EOBUF_NTSCF_STREAM0_ID_Bits;

/** \brief Stream ID configuration 1 */
typedef struct _Ifx_DRE_EOBUF_NTSCF_STREAM1_ID_Bits
{
    __IO Ifx_Strict_32Bit ID4:8;           /**< \brief [7:0] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID5:8;           /**< \brief [15:8] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID6:8;           /**< \brief [23:16] Stream ID (rw) */
    __IO Ifx_Strict_32Bit ID7:8;           /**< \brief [31:24] Stream ID (rw) */
} Ifx_DRE_EOBUF_NTSCF_STREAM1_ID_Bits;

/** \brief Ethernet output buffer status */
typedef struct _Ifx_DRE_EOBUF_STATUS_Bits
{
    __I  Ifx_Strict_32Bit ACFL:8;          /**< \brief [7:0] ACF CAN Fill Level (rh) */
    __I  Ifx_Strict_32Bit BF:1;            /**< \brief [8:8] Buffer Full (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [9:9] \internal Reserved */
    __IO Ifx_Strict_32Bit TTL:1;           /**< \brief [10:10] Transmit Trigger Lost (rw1ch) */
    __IO Ifx_Strict_32Bit TXREQ:1;         /**< \brief [11:11] Ethernet Output Buffer Transmit Request (rw1ch) */
    __IO Ifx_Strict_32Bit TXRDY:1;         /**< \brief [12:12] Ethernet Output Buffer Transmit Ready (rw1sh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __I  Ifx_Strict_32Bit ACF_CAN_ADDR:9;    /**< \brief [24:16] ACF CAN Address Offset (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_DRE_EOBUF_STATUS_Bits;

/** \brief Transmit trigger configuration */
typedef struct _Ifx_DRE_EOBUF_TTC_Bits
{
    __IO Ifx_Strict_32Bit BUFT:11;         /**< \brief [10:0] Buffer Threshold (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit TFL:8;           /**< \brief [23:16] Trigger Fill Level (rw) */
    __IO Ifx_Strict_32Bit TP:8;            /**< \brief [31:24] Pre-scale for Timer (rw) */
} Ifx_DRE_EOBUF_TTC_Bits;

/** \brief Timer threshold and status */
typedef struct _Ifx_DRE_EOBUF_TTS_Bits
{
    __I  Ifx_Strict_32Bit CTV:16;          /**< \brief [15:0] Current Timer Value (rh) */
    __IO Ifx_Strict_32Bit TRV:16;          /**< \brief [31:16] Timer Reload Value (rw) */
} Ifx_DRE_EOBUF_TTS_Bits;

/** \brief Ethernet requests summary */
typedef struct _Ifx_DRE_EREQ_Bits
{
    __IO Ifx_Strict_32Bit TX0_REQ:1;       /**< \brief [0:0] Tx request (rw1ch) */
    __IO Ifx_Strict_32Bit TX1_REQ:1;       /**< \brief [1:1] Tx request (rw1ch) */
    __IO Ifx_Strict_32Bit TX2_REQ:1;       /**< \brief [2:2] Tx request (rw1ch) */
    __IO Ifx_Strict_32Bit TX3_REQ:1;       /**< \brief [3:3] Tx request (rw1ch) */
    __IO Ifx_Strict_32Bit TX4_REQ:1;       /**< \brief [4:4] Tx request (rw1ch) */
    __IO Ifx_Strict_32Bit TX5_REQ:1;       /**< \brief [5:5] Tx request (rw1ch) */
    __IO Ifx_Strict_32Bit FWD0_REQ:1;      /**< \brief [6:6] Forward request (rw1ch) */
    __IO Ifx_Strict_32Bit FWD1_REQ:1;      /**< \brief [7:7] Forward request (rw1ch) */
    __IO Ifx_Strict_32Bit FWD2_REQ:1;      /**< \brief [8:8] Forward request (rw1ch) */
    __IO Ifx_Strict_32Bit FWD3_REQ:1;      /**< \brief [9:9] Forward request (rw1ch) */
    __IO Ifx_Strict_32Bit FWD4_REQ:1;      /**< \brief [10:10] Forward request (rw1ch) */
    __IO Ifx_Strict_32Bit FWD5_REQ:1;      /**< \brief [11:11] Forward request (rw1ch) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [12:12] \internal Reserved */
    __I  Ifx_Strict_32Bit CBI0:3;          /**< \brief [15:13] Current buffer index 0 (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [16:16] \internal Reserved */
    __I  Ifx_Strict_32Bit CBI1:3;          /**< \brief [19:17] Current buffer index 1 (rh) */
    __I  Ifx_Strict_32Bit CBI2:3;          /**< \brief [22:20] Current buffer index 2 (rh) */
    __I  Ifx_Strict_32Bit CBI3:3;          /**< \brief [25:23] Current buffer index 3 (rh) */
    __I  Ifx_Strict_32Bit CBI4:3;          /**< \brief [28:26] Current buffer index 4 (rh) */
    __I  Ifx_Strict_32Bit CBI5:3;          /**< \brief [31:29] Current buffer index 5 (rh) */
} Ifx_DRE_EREQ_Bits;

/** \brief DRE Ethernet watchdog configuration */
typedef struct _Ifx_DRE_EWDCFG_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] Enable Ethernet watchdog (rw) */
    __IO Ifx_Strict_32Bit WTOE:1;          /**< \brief [1:1] Ethernet watchdog timeout error (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [15:2] \internal Reserved */
    __IO Ifx_Strict_32Bit ETO:16;          /**< \brief [31:16] Ethernet timeout value (rw) */
} Ifx_DRE_EWDCFG_Bits;

/** \brief Forwarding table configuration */
typedef struct _Ifx_DRE_FTCFG_Bits
{
    __IO Ifx_Strict_32Bit NRULES:8;        /**< \brief [7:0] Number of forwarding rules (rw) */
    __I  Ifx_Strict_32Bit FID:23;          /**< \brief [30:8] Forwarding ID (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_DRE_FTCFG_Bits;

/** \brief RAM Forward filter ID2 */
typedef struct _Ifx_DRE_FT_FE_FID2_Bits
{
    __I  Ifx_UReg_32Bit :9;                /**< \brief [8:0] \internal Reserved */
    __IO Ifx_UReg_32Bit FID2:23;           /**< \brief [31:9] Forward filter ID2 (rwh) */
} Ifx_DRE_FT_FE_FID2_Bits;

/** \brief RAM Forwarding rule and FID1 */
typedef struct _Ifx_DRE_FT_FE_FRULE_Bits
{
    __IO Ifx_UReg_32Bit FMODE:2;           /**< \brief [1:0] Filter mode (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit DSEL:6;            /**< \brief [8:3] Destination select (rwh) */
    __IO Ifx_UReg_32Bit FID1:23;           /**< \brief [31:9] Forward filter ID1 (rwh) */
} Ifx_DRE_FT_FE_FRULE_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_DRE_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module Number Value - MOD_NUMBER (r) */
} Ifx_DRE_ID_Bits;

/** \brief Interrupt line enable */
typedef struct _Ifx_DRE_IE_Bits
{
    __IO Ifx_Strict_32Bit IE0:1;           /**< \brief [0:0] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE1:1;           /**< \brief [1:1] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE2:1;           /**< \brief [2:2] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE3:1;           /**< \brief [3:3] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE4:1;           /**< \brief [4:4] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE5:1;           /**< \brief [5:5] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE6:1;           /**< \brief [6:6] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE7:1;           /**< \brief [7:7] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE8:1;           /**< \brief [8:8] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE9:1;           /**< \brief [9:9] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE10:1;          /**< \brief [10:10] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE11:1;          /**< \brief [11:11] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE12:1;          /**< \brief [12:12] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE13:1;          /**< \brief [13:13] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE14:1;          /**< \brief [14:14] Interrupt Line i Enabled (rw) */
    __IO Ifx_Strict_32Bit IE15:1;          /**< \brief [15:15] Interrupt Line i Enabled (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_IE_Bits;

/** \brief Interrupt signal */
typedef struct _Ifx_DRE_INTSIG_Bits
{
    __I  Ifx_Strict_32Bit INT0:1;          /**< \brief [0:0] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT1:1;          /**< \brief [1:1] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT2:1;          /**< \brief [2:2] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT3:1;          /**< \brief [3:3] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT4:1;          /**< \brief [4:4] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT5:1;          /**< \brief [5:5] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT6:1;          /**< \brief [6:6] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT7:1;          /**< \brief [7:7] Interrupt Line i (rh) */
    __I  Ifx_Strict_32Bit INT8:1;          /**< \brief [8:8] CAN input buffer status interrupt (rh) */
    __I  Ifx_Strict_32Bit INT9:1;          /**< \brief [9:9] CAN output buffer status interrupt (rh) */
    __I  Ifx_Strict_32Bit INT10:1;         /**< \brief [10:10] Ethernet input buffer frame error and status interrupts (rh) */
    __I  Ifx_Strict_32Bit INT11:1;         /**< \brief [11:11] Ethernet Frame Receive Request (rh) */
    __I  Ifx_Strict_32Bit INT12:1;         /**< \brief [12:12] Routing Table Error Interrupt (rh) */
    __I  Ifx_Strict_32Bit INT13:1;         /**< \brief [13:13] ME Routing Transaction Lost (rh) */
    __I  Ifx_Strict_32Bit INT14:1;         /**< \brief [14:14] Ethernet output buffer error and status interrupts (rh) */
    __I  Ifx_Strict_32Bit INT15:1;         /**< \brief [15:15] Ethernet Frame Transmit Request (rh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_INTSIG_Bits;

/** \brief Multi-cast routing header */
typedef struct _Ifx_DRE_MCRH_Bits
{
    __I  Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __I  Ifx_Strict_32Bit DID0:6;          /**< \brief [13:8] Destination ID 1 (rh) */
    __I  Ifx_Strict_32Bit DID1:6;          /**< \brief [19:14] Destination ID 2 (rh) */
    __I  Ifx_Strict_32Bit DID2:6;          /**< \brief [25:20] Destination ID 3 (rh) */
    __I  Ifx_Strict_32Bit DID3:6;          /**< \brief [31:26] Destination ID 4 (rh) */
} Ifx_DRE_MCRH_Bits;

/** \brief Move engine destination address */
typedef struct _Ifx_DRE_ME_DESTA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Destination Address (rh) */
} Ifx_DRE_ME_DESTA_Bits;

/** \brief Move engine error register */
typedef struct _Ifx_DRE_ME_ERR_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SPBBE:1;         /**< \brief [1:1] SPB Bus Transaction error (rw1ch) */
    __IO Ifx_Strict_32Bit SRIBE:1;         /**< \brief [2:2] SRI Transaction Error (rw1ch) */
    __IO Ifx_Strict_32Bit DBOE:1;          /**< \brief [3:3] Destination Buffer Overflow Error (rw1ch) */
    __IO Ifx_Strict_32Bit IRDE:1;          /**< \brief [4:4] Invalid Routing Destination Error (rw1ch) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [15:5] \internal Reserved */
    __I  Ifx_Strict_32Bit FEC:3;           /**< \brief [18:16] First error code (rh) */
    __I  Ifx_Strict_32Bit FEDIR:1;         /**< \brief [19:19] First Error Direction (rh) */
    __I  Ifx_Strict_32Bit FESID:6;         /**< \brief [25:20] First Error Source ID (rh) */
    __I  Ifx_Strict_32Bit FEDID:6;         /**< \brief [31:26] First Error Destination ID (rh) */
} Ifx_DRE_ME_ERR_Bits;

/** \brief Move engine first error destination address */
typedef struct _Ifx_DRE_ME_FEDESTA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] First Error Destination Address (rh) */
} Ifx_DRE_ME_FEDESTA_Bits;

/** \brief Move engine first error source address */
typedef struct _Ifx_DRE_ME_FESRCA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] First Error Source Address (rh) */
} Ifx_DRE_ME_FESRCA_Bits;

/** \brief Move engine source address */
typedef struct _Ifx_DRE_ME_SRCA_Bits
{
    __I  Ifx_Strict_32Bit ADR:32;          /**< \brief [31:0] Source Address (rh) */
} Ifx_DRE_ME_SRCA_Bits;

/** \brief Move engine state */
typedef struct _Ifx_DRE_ME_STATE_Bits
{
    __I  Ifx_Strict_32Bit SPBR:1;          /**< \brief [0:0] SPB Read (rh) */
    __I  Ifx_Strict_32Bit SPBW:1;          /**< \brief [1:1] SPB Write (rh) */
    __I  Ifx_Strict_32Bit SRIR:1;          /**< \brief [2:2] SRI Read (rh) */
    __I  Ifx_Strict_32Bit SRIW:1;          /**< \brief [3:3] SRI Write (rh) */
    __I  Ifx_Strict_32Bit SID:6;           /**< \brief [9:4] Source ID (rh) */
    __I  Ifx_Strict_32Bit DID:6;           /**< \brief [15:10] Destination ID (rh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_DRE_ME_STATE_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_DRE_OCS_Bits
{
    __I  Ifx_Strict_32Bit :24;             /**< \brief [23:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SUS:4;           /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_Strict_32Bit SUS_P:1;         /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_Strict_32Bit SUSSTA:1;        /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_DRE_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_DRE_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_DRE_PROT_Bits;

/** \brief RAM RDESC word 0 read format */
typedef struct _Ifx_DRE_RDESC_RD0_Bits
{
    __IO Ifx_UReg_32Bit BUF1AP:32;         /**< \brief [31:0] Ethernet input buffer address pointer (rwh) */
} Ifx_DRE_RDESC_RD0_Bits;

/** \brief RAM RDESC word 3 read format GETH */
typedef struct _Ifx_DRE_RDESC_RD3G_Bits
{
    __I  Ifx_UReg_32Bit :30;               /**< \brief [29:0] \internal Reserved */
    __IO Ifx_UReg_32Bit IOC:1;             /**< \brief [30:30] Interrupt on Completion (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_RDESC_RD3G_Bits;

/** \brief RAM RDESC word 3 read format LETH */
typedef struct _Ifx_DRE_RDESC_RD3L_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit BUF1V:1;           /**< \brief [24:24] Buffer 1 address valid (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [29:25] \internal Reserved */
    __IO Ifx_UReg_32Bit IOC:1;             /**< \brief [30:30] Interrupt on Completion (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_RDESC_RD3L_Bits;

/** \brief RAM RDESC word 0 Write-back format Non Tunneled frames (also LETH) */
typedef struct _Ifx_DRE_RDESC_WR0NT_Bits
{
    __IO Ifx_UReg_32Bit OVT:16;            /**< \brief [15:0] Outer VLAN Tag or External Lookup Result Data (rwh) */
    __IO Ifx_UReg_32Bit IVT:16;            /**< \brief [31:16] Inner VLAN Tag or External Lookup Result Data (rwh) */
} Ifx_DRE_RDESC_WR0NT_Bits;

/** \brief RAM RDESC word 0 Write-back format Tunneled frames */
typedef struct _Ifx_DRE_RDESC_WR0T_Bits
{
    __IO Ifx_UReg_32Bit OL2L3:3;           /**< \brief [2:0] Outer L2 L3 Type (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit VID:24;            /**< \brief [31:8] VNID or VSID (rwh) */
} Ifx_DRE_RDESC_WR0T_Bits;

/** \brief RAM RDESC word 1 write-back format GETH */
typedef struct _Ifx_DRE_RDESC_WR1G_Bits
{
    __IO Ifx_UReg_32Bit FRPLI:32;          /**< \brief [31:0] RSS HASH/Flexible Recieve Parser Last Instruction (rwh) */
} Ifx_DRE_RDESC_WR1G_Bits;

/** \brief RAM RDESC word 1 write-back format LETH */
typedef struct _Ifx_DRE_RDESC_WR1L_Bits
{
    __IO Ifx_UReg_32Bit PT:3;              /**< \brief [2:0] Payload type (rwh) */
    __IO Ifx_UReg_32Bit IPHE:1;            /**< \brief [3:3] IP Header Error (rwh) */
    __IO Ifx_UReg_32Bit IPV4:1;            /**< \brief [4:4] IPV4 Header Present (rwh) */
    __IO Ifx_UReg_32Bit IPV6:1;            /**< \brief [5:5] IPV6 Header Present (rwh) */
    __IO Ifx_UReg_32Bit IPCB:1;            /**< \brief [6:6] IP Checksum Bypassed (rwh) */
    __IO Ifx_UReg_32Bit IPCE:1;            /**< \brief [7:7] IP Payload Error (rwh) */
    __IO Ifx_UReg_32Bit PMT:4;             /**< \brief [11:8] PTP Message Type (rwh) */
    __IO Ifx_UReg_32Bit PFT:1;             /**< \brief [12:12] PTP Packet Type (rwh) */
    __IO Ifx_UReg_32Bit PV:1;              /**< \brief [13:13] PTP Version (rwh) */
    __IO Ifx_UReg_32Bit TSA:1;             /**< \brief [14:14] Timestamp Available (rwh) */
    __IO Ifx_UReg_32Bit TD:1;              /**< \brief [15:15] Timestamp Dropped (rwh) */
    __IO Ifx_UReg_32Bit OPC:16;            /**< \brief [31:16] OAM Sub-Type Code, or MAC Control Packet opcode (rwh) */
} Ifx_DRE_RDESC_WR1L_Bits;

/** \brief RAM RDESC word 2 write-back format GETH */
typedef struct _Ifx_DRE_RDESC_WR2G_Bits
{
    __IO Ifx_UReg_32Bit AVTCP:1;           /**< \brief [0:0] AV Tagged Control Packet (rwh) */
    __IO Ifx_UReg_32Bit AVTDP:1;           /**< \brief [1:1] AV Tagged Data Packet (rwh) */
    __IO Ifx_UReg_32Bit HL:8;              /**< \brief [9:2] L3/L4 Header Length (rwh) */
    __IO Ifx_UReg_32Bit FPS1:1;            /**< \brief [10:10] Flexible Receive Parser bit 1 (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit FPS2:1;            /**< \brief [12:12] Flexible Receive Parser bit 2 (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [14:13] \internal Reserved */
    __IO Ifx_UReg_32Bit VF:1;              /**< \brief [15:15] VLAN Filter Status (rwh) */
    __IO Ifx_UReg_32Bit SAF:1;             /**< \brief [16:16] SA Address Filter Fail (rwh) */
    __IO Ifx_UReg_32Bit DAF:1;             /**< \brief [17:17] Destination Address Filter Fail (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit MADRM:8;           /**< \brief [26:19] MAC Address Match or Hash Value (rwh) */
    __IO Ifx_UReg_32Bit L3FM:1;            /**< \brief [27:27] Layer 3 Filter Match (rwh) */
    __IO Ifx_UReg_32Bit L4FM:1;            /**< \brief [28:28] Layer 4 Filter Match (rwh) */
    __IO Ifx_UReg_32Bit L3L4FM:3;          /**< \brief [31:29] Layer 3 and Layer 4 Filter Number Matched (rwh) */
} Ifx_DRE_RDESC_WR2G_Bits;

/** \brief RAM RDESC word 2 write-back format LETH */
typedef struct _Ifx_DRE_RDESC_WR2L_Bits
{
    __IO Ifx_UReg_32Bit HL:10;             /**< \brief [9:0] L3/L4 Header Length (rwh) */
    __IO Ifx_UReg_32Bit ARPNR:1;           /**< \brief [10:10] ARP Reply Not Generated (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [13:11] \internal Reserved */
    __IO Ifx_UReg_32Bit ITS:1;             /**< \brief [14:14] Inner VLAN Tag Filter Status (rwh) */
    __IO Ifx_UReg_32Bit OTS:1;             /**< \brief [15:15] VLAN Filter Status (rwh) */
    __IO Ifx_UReg_32Bit SAF:1;             /**< \brief [16:16] SA Filter Fail or Packet dropped (rwh) */
    __IO Ifx_UReg_32Bit DAF:1;             /**< \brief [17:17] DA Filter Fail or Packet parsing incomplete (rwh) */
    __IO Ifx_UReg_32Bit HF:1;              /**< \brief [18:18] Hash Filter Status (rwh) */
    __IO Ifx_UReg_32Bit MADRM:8;           /**< \brief [26:19] MAC Address Match or Hash Value (rwh) */
    __IO Ifx_UReg_32Bit L3FM:1;            /**< \brief [27:27] Layer 3 Filter Match (rwh) */
    __IO Ifx_UReg_32Bit L4FM:1;            /**< \brief [28:28] Layer 4 Filter Match (rwh) */
    __IO Ifx_UReg_32Bit L3L4FM:3;          /**< \brief [31:29] Layer 3 and Layer 4 Filter Number Matched (rwh) */
} Ifx_DRE_RDESC_WR2L_Bits;

/** \brief RAM RDESC word 3 write-back format GETH */
typedef struct _Ifx_DRE_RDESC_WR3G_Bits
{
    __IO Ifx_UReg_32Bit PL:14;             /**< \brief [13:0] Packet length (rwh) */
    __IO Ifx_UReg_32Bit FRPSL:1;           /**< \brief [14:14] Flexible Receive Parser Status LSB bit (rwh) */
    __IO Ifx_UReg_32Bit ES:1;              /**< \brief [15:15] Error Summary (rwh) */
    __IO Ifx_UReg_32Bit ETLT:4;            /**< \brief [19:16] Error Type or L2 Type (rwh) */
    __IO Ifx_UReg_32Bit L34T:4;            /**< \brief [23:20] Layer3/ Layer4 packet Type (rwh) */
    __IO Ifx_UReg_32Bit ETMNCP:1;          /**< \brief [24:24] Ether Type Match or No Coagulation Packet (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [26:25] \internal Reserved */
    __IO Ifx_UReg_32Bit CDA:1;             /**< \brief [27:27] Context Descriptor Available (rwh) */
    __IO Ifx_UReg_32Bit LD:1;              /**< \brief [28:28] Last Descriptor (rwh) */
    __IO Ifx_UReg_32Bit FD:1;              /**< \brief [29:29] First Descriptor (rwh) */
    __IO Ifx_UReg_32Bit CTXT:1;            /**< \brief [30:30] Receive Context Descriptor (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_RDESC_WR3G_Bits;

/** \brief RAM RDESC word 3 write-back format LETH */
typedef struct _Ifx_DRE_RDESC_WR3L_Bits
{
    __IO Ifx_UReg_32Bit PL:15;             /**< \brief [14:0] Packet length (rwh) */
    __IO Ifx_UReg_32Bit ES:1;              /**< \brief [15:15] Error Summary (rwh) */
    __IO Ifx_UReg_32Bit LT:3;              /**< \brief [18:16] Length/Type Field (rwh) */
    __IO Ifx_UReg_32Bit DE:1;              /**< \brief [19:19] Dribble Bit Error (rwh) */
    __IO Ifx_UReg_32Bit RE:1;              /**< \brief [20:20] Receive Error (rwh) */
    __IO Ifx_UReg_32Bit OE:1;              /**< \brief [21:21] Overflow Error (rwh) */
    __IO Ifx_UReg_32Bit RWT:1;             /**< \brief [22:22] Receive Watchdog Timeout (rwh) */
    __IO Ifx_UReg_32Bit GP:1;              /**< \brief [23:23] Giant Packet (rwh) */
    __IO Ifx_UReg_32Bit CE:1;              /**< \brief [24:24] CRC Error (rwh) */
    __IO Ifx_UReg_32Bit RS0V:1;            /**< \brief [25:25] Receive Status RDESCi_WR0 Valid (rwh) */
    __IO Ifx_UReg_32Bit RS1V:1;            /**< \brief [26:26] Receive Status RDESCi_WR1 Valid (rwh) */
    __IO Ifx_UReg_32Bit RS2V:1;            /**< \brief [27:27] Receive Status RDESCi_WR2 Valid (rwh) */
    __IO Ifx_UReg_32Bit LD:1;              /**< \brief [28:28] Last Descriptor (rwh) */
    __IO Ifx_UReg_32Bit FD:1;              /**< \brief [29:29] First Descriptor (rwh) */
    __IO Ifx_UReg_32Bit CTXT:1;            /**< \brief [30:30] Receive Context Descriptor (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_RDESC_WR3L_Bits;

/** \brief Rx Ethernet descriptor list configuration and control */
typedef struct _Ifx_DRE_RETHDL_CTRL_Bits
{
    __IO Ifx_Strict_32Bit EIF:1;           /**< \brief [0:0] Ethernet Interface (rw) */
    __IO Ifx_Strict_32Bit DMACH:3;         /**< \brief [3:1] DMA channel number (rw) */
    __IO Ifx_Strict_32Bit EIFID:2;         /**< \brief [5:4] Ethernet interface ID (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [6:6] \internal Reserved */
    __IO Ifx_Strict_32Bit TRIG:1;          /**< \brief [7:7] Trigger type (rw) */
    __IO Ifx_Strict_32Bit FCS:1;           /**< \brief [8:8] Receive Ethernet packet has FCS field (rw) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [25:9] \internal Reserved */
    __IO Ifx_Strict_32Bit IOC:1;           /**< \brief [26:26] Interrupt on completion (rw) */
    __I  Ifx_Strict_32Bit STOPACK:1;       /**< \brief [27:27] STOP acknowledge (rh) */
    __IO Ifx_Strict_32Bit STOP:1;          /**< \brief [28:28] STOP bit (rw) */
    __IO Ifx_Strict_32Bit PTR:3;           /**< \brief [31:29] Descriptor pointer (rwh) */
} Ifx_DRE_RETHDL_CTRL_Bits;

/** \brief RP 0 mode register */
typedef struct _Ifx_DRE_RP_MODE_Bits
{
    __IO Ifx_Strict_32Bit MODE:1;          /**< \brief [0:0] Resource Partition Supervisor Mode - MODE (rw) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [15:1] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine Enable (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set Enable (rw) */
    __IO Ifx_Strict_32Bit TAGOFF:1;        /**< \brief [24:24] Tag Offset (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_DRE_RP_MODE_Bits;

/** \brief CAN ID request */
typedef struct _Ifx_DRE_RREQ_CID_Bits
{
    __I  Ifx_Strict_32Bit ID:29;           /**< \brief [28:0] CAN Identifier (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [30:29] \internal Reserved */
    __I  Ifx_Strict_32Bit XTD:1;           /**< \brief [31:31] Extended Identifier (rh) */
} Ifx_DRE_RREQ_CID_Bits;

/** \brief Routing request configuration */
typedef struct _Ifx_DRE_RREQ_CONFIG_Bits
{
    __I  Ifx_Strict_32Bit REQ:1;           /**< \brief [0:0] New Routing Request (rh) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [15:1] \internal Reserved */
    __I  Ifx_Strict_32Bit RTI:3;           /**< \brief [18:16] Routing Table Index (rh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_DRE_RREQ_CONFIG_Bits;

/** \brief Routing status */
typedef struct _Ifx_DRE_RS_Bits
{
    __I  Ifx_Strict_32Bit RE:9;            /**< \brief [8:0] Routing Element (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __IO Ifx_Strict_32Bit IRT:1;           /**< \brief [16:16] Invalid Routing Table (rw1ch) */
    __IO Ifx_Strict_32Bit NMFE:1;          /**< \brief [17:17] Non-Matching Filter Element Error (rw1ch) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_DRE_RS_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_DRE_RST_CTRLA_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit GRSTEN0:1;       /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN1:1;       /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN2:1;       /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_Strict_32Bit GRSTEN3:1;       /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_DRE_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_DRE_RST_CTRLB_Bits
{
    __IO Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __O  Ifx_Strict_32Bit STATCLR:1;       /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_DRE_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_DRE_RST_STAT_Bits
{
    __I  Ifx_Strict_32Bit KRST:1;          /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __I  Ifx_Strict_32Bit GRST0:1;         /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_Strict_32Bit GRST1:1;         /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_Strict_32Bit GRST2:1;         /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_Strict_32Bit GRST3:1;         /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_DRE_RST_STAT_Bits;

/** \brief CAN transmit routing table configuration */
typedef struct _Ifx_DRE_RT_CONFIG_Bits
{
    __IO Ifx_Strict_32Bit NRULES:8;        /**< \brief [7:0] Number of routing rules (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DRE_RT_CONFIG_Bits;

/** \brief RAM routing table CAN ID filter configuration */
typedef struct _Ifx_DRE_RT_RE_CIDFC_Bits
{
    __IO Ifx_UReg_32Bit CANID1:13;         /**< \brief [12:0] CAN ID 1 (rw) */
    __IO Ifx_UReg_32Bit IDS:3;             /**< \brief [15:13] ID Shift (rw) */
    __IO Ifx_UReg_32Bit CANID2:13;         /**< \brief [28:16] CAN ID 2 (rw) */
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [30:29] Filter Mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_DRE_RT_RE_CIDFC_Bits;

/** \brief RAM routing table multi-cast routing */
typedef struct _Ifx_DRE_RT_RE_MCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit DID0:6;            /**< \brief [13:8] Destination ID 1 (rw) */
    __IO Ifx_UReg_32Bit DID1:6;            /**< \brief [19:14] Destination ID 2 (rw) */
    __IO Ifx_UReg_32Bit DID2:6;            /**< \brief [25:20] Destination ID 3 (rw) */
    __IO Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] Destination ID 4 (rw) */
} Ifx_DRE_RT_RE_MCR_Bits;

/** \brief RAM routing table uni-cast routing */
typedef struct _Ifx_DRE_RT_RE_UCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Routing Rule Mode (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [13:8] Destination ID (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_RT_RE_UCR_Bits;

/** \brief Stream ID filter configuration */
typedef struct _Ifx_DRE_SIDF_FC_Bits
{
    __IO Ifx_Strict_32Bit FE:1;            /**< \brief [0:0] Filter Enable (rw) */
    __IO Ifx_Strict_32Bit MODE:2;          /**< \brief [2:1] Filter Mode (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit RTI:3;           /**< \brief [6:4] Routing Table Index (rw) */
    __I  Ifx_Strict_32Bit :25;             /**< \brief [31:7] \internal Reserved */
} Ifx_DRE_SIDF_FC_Bits;

/** \brief Stream ID filter 1 higher */
typedef struct _Ifx_DRE_SIDF_FIL1_H_Bits
{
    __IO Ifx_Strict_32Bit F1H:32;          /**< \brief [31:0] Higher Filter 1 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL1_H_Bits;

/** \brief Stream ID filter 1 lower */
typedef struct _Ifx_DRE_SIDF_FIL1_L_Bits
{
    __IO Ifx_Strict_32Bit F1L:32;          /**< \brief [31:0] Lower Filter 1 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL1_L_Bits;

/** \brief Stream ID filter 2 higher */
typedef struct _Ifx_DRE_SIDF_FIL2_H_Bits
{
    __IO Ifx_Strict_32Bit F2H:32;          /**< \brief [31:0] Higher Filter 2 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL2_H_Bits;

/** \brief Stream ID filter 2 lower */
typedef struct _Ifx_DRE_SIDF_FIL2_L_Bits
{
    __IO Ifx_Strict_32Bit F2L:32;          /**< \brief [31:0] Lower Filter 2 Stream ID (rw) */
} Ifx_DRE_SIDF_FIL2_L_Bits;

/** \brief RAM TDESC word 0 read format */
typedef struct _Ifx_DRE_TDESC_RD0_Bits
{
    __IO Ifx_UReg_32Bit BUF1AP:32;         /**< \brief [31:0] Ethernet Buffer Address Pointer 1 (rwh) */
} Ifx_DRE_TDESC_RD0_Bits;

/** \brief RAM TDESC word 1 read format */
typedef struct _Ifx_DRE_TDESC_RD1_Bits
{
    __IO Ifx_UReg_32Bit BUF2AP:32;         /**< \brief [31:0] Ethernet Buffer Address Pointer 2 (rwh) */
} Ifx_DRE_TDESC_RD1_Bits;

/** \brief RAM TDESC word 2 read format */
typedef struct _Ifx_DRE_TDESC_RD2_Bits
{
    __IO Ifx_UReg_32Bit S1L:14;            /**< \brief [13:0] Size of buffer 1 (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit S2L:14;            /**< \brief [29:16] Size of buffer 2 (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __IO Ifx_UReg_32Bit IOC:1;             /**< \brief [31:31] Interrupt on Completion (rwh) */
} Ifx_DRE_TDESC_RD2_Bits;

/** \brief RAM TDESC word 3 read format */
typedef struct _Ifx_DRE_TDESC_RD3_Bits
{
    __IO Ifx_UReg_32Bit FL:15;             /**< \brief [14:0] Packet Length (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit CIC:2;             /**< \brief [17:16] Checksum Insertion control (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit SLOTNUM:4;         /**< \brief [22:19] Slot Number (rwh) */
    __IO Ifx_UReg_32Bit SAIC:3;            /**< \brief [25:23] SA insertion control (rwh) */
    __IO Ifx_UReg_32Bit CPC:2;             /**< \brief [27:26] CRC Pad Control (rwh) */
    __IO Ifx_UReg_32Bit LD:1;              /**< \brief [28:28] Last Descriptor (rwh) */
    __IO Ifx_UReg_32Bit FD:1;              /**< \brief [29:29] First Descriptor (rwh) */
    __IO Ifx_UReg_32Bit CTXT:1;            /**< \brief [30:30] Context Type (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_TDESC_RD3_Bits;

/** \brief RAM TDESC word 3 write-back format for GETH */
typedef struct _Ifx_DRE_TDESC_WR3G_Bits
{
    __I  Ifx_UReg_32Bit :27;               /**< \brief [26:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DERR:1;            /**< \brief [27:27] Descriptor Error (rwh) */
    __IO Ifx_UReg_32Bit LD:1;              /**< \brief [28:28] Last Descriptor (rwh) */
    __IO Ifx_UReg_32Bit FD:1;              /**< \brief [29:29] First Descriptor (rwh) */
    __IO Ifx_UReg_32Bit CTXT:1;            /**< \brief [30:30] Context Type (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_TDESC_WR3G_Bits;

/** \brief RAM TDESC word 3 write-back format for LETH */
typedef struct _Ifx_DRE_TDESC_WR3L_Bits
{
    __IO Ifx_UReg_32Bit IHE:1;             /**< \brief [0:0] IP Header Error (rwh) */
    __IO Ifx_UReg_32Bit DB:1;              /**< \brief [1:1] Deferred Bit (rwh) */
    __IO Ifx_UReg_32Bit UF:1;              /**< \brief [2:2] Underflow Error (rwh) */
    __IO Ifx_UReg_32Bit ED:1;              /**< \brief [3:3] Excessive Deferral (rwh) */
    __IO Ifx_UReg_32Bit CC:4;              /**< \brief [7:4] Collision Count (rwh) */
    __IO Ifx_UReg_32Bit EC:1;              /**< \brief [8:8] Excessive Collision (rwh) */
    __IO Ifx_UReg_32Bit LC:1;              /**< \brief [9:9] Late Collision (rwh) */
    __IO Ifx_UReg_32Bit NC:1;              /**< \brief [10:10] No Carrier (rwh) */
    __IO Ifx_UReg_32Bit LOC:1;             /**< \brief [11:11] Loss of Carrier (rwh) */
    __IO Ifx_UReg_32Bit PCE:1;             /**< \brief [12:12] Payload Checksum Error (rwh) */
    __IO Ifx_UReg_32Bit FF:1;              /**< \brief [13:13] Packet Flushed (rwh) */
    __IO Ifx_UReg_32Bit JT:1;              /**< \brief [14:14] Jabber Timeout (rwh) */
    __IO Ifx_UReg_32Bit ES:1;              /**< \brief [15:15] Error Summary (rwh) */
    __IO Ifx_UReg_32Bit EUE:1;             /**< \brief [16:16] ECC Uncorrectable Error Status (rwh) */
    __IO Ifx_UReg_32Bit TTSS:1;            /**< \brief [17:17] Tx Timestamp Status (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [22:18] \internal Reserved */
    __IO Ifx_UReg_32Bit DE:1;              /**< \brief [23:23] Descriptor Error (rwh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit LD:1;              /**< \brief [28:28] Last Descriptor (rwh) */
    __IO Ifx_UReg_32Bit FD:1;              /**< \brief [29:29] First Descriptor (rwh) */
    __IO Ifx_UReg_32Bit CTXT:1;            /**< \brief [30:30] Context Type (rwh) */
    __IO Ifx_UReg_32Bit OWN:1;             /**< \brief [31:31] OWN bit (rwh) */
} Ifx_DRE_TDESC_WR3L_Bits;

/** \brief Tx Ethernet descriptor list configuration and control */
typedef struct _Ifx_DRE_TETHDL_CTRL_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit DMACH:3;         /**< \brief [3:1] DMA channel number (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [5:4] \internal Reserved */
    __IO Ifx_Strict_32Bit TRIG:1;          /**< \brief [6:6] Trigger type (rw) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [18:7] \internal Reserved */
    __IO Ifx_Strict_32Bit SLOTNUM:4;       /**< \brief [22:19] Slot Number configuration (rw) */
    __IO Ifx_Strict_32Bit SAIC:3;          /**< \brief [25:23] SA insertion control configuration (rw) */
    __IO Ifx_Strict_32Bit IOC:1;           /**< \brief [26:26] Interrupt on completion (rw) */
    __I  Ifx_Strict_32Bit STOPACK:1;       /**< \brief [27:27] STOP acknowledge (rh) */
    __IO Ifx_Strict_32Bit STOP:1;          /**< \brief [28:28] STOP bit (rw) */
    __IO Ifx_Strict_32Bit PTR:3;           /**< \brief [31:29] Descriptor pointer (rwh) */
} Ifx_DRE_TETHDL_CTRL_Bits;

/** \brief Uni-cast routing header */
typedef struct _Ifx_DRE_UCRH_Bits
{
    __I  Ifx_Strict_32Bit MODE:2;          /**< \brief [1:0] Routing Rule Mode (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __I  Ifx_Strict_32Bit DID:6;           /**< \brief [13:8] Destination ID (rh) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_DRE_UCRH_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_dre_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_RDB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_RDB_SRI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ACCEN_WRB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_ACCEN_WRB_SRI;

/** \brief RAM CAN address database CRE start address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CAD_CAN_CRESA_Bits B;          /**< \brief Bitfield access */
} Ifx_DRE_CAD_CAN_CRESA;

/** \brief CAN receive request 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CANRXR0_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_CANRXR0;

/** \brief CAN receive request 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CANRXR1_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_CANRXR1;

/** \brief CAN transmit buffer available request   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CANTXR_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_CANTXR;

/** \brief CAN resource partition   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CAN_RP_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_CAN_RP;

/** \brief CAN input buffer pending request   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBL_BPR_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_CIBL_BPR;

/** \brief CAN input buffer list status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBL_STATUS_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_CIBL_STATUS;

/** \brief RAM CIBUF CRC computed by CRE   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_CRC_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_CRC;

/** \brief RAM CIBUF data byte m   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_DRE_CIBUF_DB_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_DB;

/** \brief RAM CIBUF register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_R0_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_R0;

/** \brief RAM CIBUF register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_R1_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_R1;

/** \brief RAM CIBUF routing header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CIBUF_RHEAD_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_CIBUF_RHEAD;

/** \brief CAN Input buffer timeout status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CITO_Bits B;                   /**< \brief Bitfield access */
} Ifx_DRE_CITO;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_DRE_CLC;

/** \brief CAN output buffer pending request 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_BPR0_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_COBL_BPR0;

/** \brief CAN output buffer pending request 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_BPR1_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_COBL_BPR1;

/** \brief CAN output buffer list status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBL_STATUS_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_COBL_STATUS;

/** \brief RAM COBUF CRC computed by DRE   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_CRC_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_COBUF_CRC;

/** \brief RAM COBUF data byte m   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_DRE_COBUF_DB_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_COBUF_DB;

/** \brief RAM multi-cast routing header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_MCRH_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_COBUF_MCRH;

/** \brief RAM COBUF register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_R0_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_COBUF_R0;

/** \brief RAM COBUF register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_R1_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_COBUF_R1;

/** \brief RAM uni-cast routing header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COBUF_UCRH_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_COBUF_UCRH;

/** \brief CAN Output buffer timeout status 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COTO0_Bits B;                  /**< \brief Bitfield access */
} Ifx_DRE_COTO0;

/** \brief CAN Output buffer timeout status 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_COTO1_Bits B;                  /**< \brief Bitfield access */
} Ifx_DRE_COTO1;

/** \brief DRE CAN watchdog configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_CWDCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_CWDCFG;

/** \brief DMA resource partition   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMA_RP_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_DMA_RP;

/** \brief Destination memory configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_CONFIG_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_DMEM_CONFIG;

/** \brief RAM Destination memory frame data buffer index   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_FDBI_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_DMEM_FDBI;

/** \brief Destination memory transfer mode configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_MODE_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_DMEM_MODE;

/** \brief Destination memory resource partition   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_RP_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_DMEM_RP;

/** \brief RAM Destination memory start address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_SA_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_DMEM_SA;

/** \brief Destination memory status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_STATUS_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_DMEM_STATUS;

/** \brief RAM Destination memory wraparound level   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_WA_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_DMEM_WA;

/** \brief RAM Destination memory watermark level   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_DMEM_WM_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_DMEM_WM;

/** \brief Ethernet address database configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EADCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_EADCFG;

/** \brief RAM GETH Rx DMA channel address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EAD_GETH_RXDMA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EAD_GETH_RXDMA;

/** \brief RAM GETH Tx DMA channel address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EAD_GETH_TXDMA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EAD_GETH_TXDMA;

/** \brief RAM LETH Rx DMA channel address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EAD_LETH_RXDMA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EAD_LETH_RXDMA;

/** \brief RAM LETH Tx DMA channel address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EAD_LETH_TXDMA_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EAD_LETH_TXDMA;

/** \brief Ethernet descriptor list status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EDLSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_EDLSTAT;

/** \brief Ethernet input buffer configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EIBUF_CONFIG_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EIBUF_CONFIG;

/** \brief Ethernet input buffer error   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EIBUF_ERROR_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_EIBUF_ERROR;

/** \brief Ethernet input buffer status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EIBUF_STATUS_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EIBUF_STATUS;

/** \brief Ethernet output buffer configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_CONFIG_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_CONFIG;

/** \brief Ethernet output buffer error   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_ERROR_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_ERROR;

/** \brief MAC header 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H0_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H0;

/** \brief MAC header 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H1_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H1;

/** \brief MAC header 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H2_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H2;

/** \brief MAC header 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H3_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H3;

/** \brief MAC header 4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_MAC_H4_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_MAC_H4;

/** \brief NTSCF header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_NTSCF_H0_Bits B;         /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_NTSCF_H0;

/** \brief Stream ID configuration 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_NTSCF_STREAM0_ID_Bits B;    /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_NTSCF_STREAM0_ID;

/** \brief Stream ID configuration 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_NTSCF_STREAM1_ID_Bits B;    /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_NTSCF_STREAM1_ID;

/** \brief Ethernet output buffer status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_STATUS_Bits B;           /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_STATUS;

/** \brief Transmit trigger configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_TTC_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_TTC;

/** \brief Timer threshold and status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EOBUF_TTS_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_EOBUF_TTS;

/** \brief Ethernet requests summary   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EREQ_Bits B;                   /**< \brief Bitfield access */
} Ifx_DRE_EREQ;

/** \brief DRE Ethernet watchdog configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_EWDCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_EWDCFG;

/** \brief Forwarding table configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_FTCFG_Bits B;                  /**< \brief Bitfield access */
} Ifx_DRE_FTCFG;

/** \brief RAM Forward filter ID2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_FT_FE_FID2_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_FT_FE_FID2;

/** \brief RAM Forwarding rule and FID1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_FT_FE_FRULE_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_FT_FE_FRULE;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_DRE_ID;

/** \brief Interrupt line enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_IE_Bits B;                     /**< \brief Bitfield access */
} Ifx_DRE_IE;

/** \brief Interrupt signal   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_INTSIG_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_INTSIG;

/** \brief Multi-cast routing header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_MCRH_Bits B;                   /**< \brief Bitfield access */
} Ifx_DRE_MCRH;

/** \brief Move engine destination address   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_DESTA_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_ME_DESTA;

/** \brief Move engine error register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_ERR_Bits B;                 /**< \brief Bitfield access */
} Ifx_DRE_ME_ERR;

/** \brief Move engine first error destination address   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_FEDESTA_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_ME_FEDESTA;

/** \brief Move engine first error source address   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_FESRCA_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_ME_FESRCA;

/** \brief Move engine source address   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_SRCA_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_ME_SRCA;

/** \brief Move engine state   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_ME_STATE_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_ME_STATE;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_DRE_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_DRE_PROT;

/** \brief RAM RDESC word 0 read format   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_RD0_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_RDESC_RD0;

/** \brief RAM RDESC word 1 read format   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_DRE_RDESC_RD1;

/** \brief RAM RDESC word 2 read format   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_DRE_RDESC_RD2;

/** \brief RAM RDESC word 3 read format GETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_RD3G_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_RD3G;

/** \brief RAM RDESC word 3 read format LETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_RD3L_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_RD3L;

/** \brief RAM RDESC word 0 Write-back format Non Tunneled frames (also LETH)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR0NT_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR0NT;

/** \brief RAM RDESC word 0 Write-back format Tunneled frames   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR0T_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR0T;

/** \brief RAM RDESC word 1 write-back format GETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR1G_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR1G;

/** \brief RAM RDESC word 1 write-back format LETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR1L_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR1L;

/** \brief RAM RDESC word 2 write-back format GETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR2G_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR2G;

/** \brief RAM RDESC word 2 write-back format LETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR2L_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR2L;

/** \brief RAM RDESC word 3 write-back format GETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR3G_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR3G;

/** \brief RAM RDESC word 3 write-back format LETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RDESC_WR3L_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_RDESC_WR3L;

/** \brief Rx Ethernet descriptor list configuration and control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RETHDL_CTRL_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_RETHDL_CTRL;

/** \brief RP 0 mode register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RP_MODE_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_RP_MODE;

/** \brief CAN ID request   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RREQ_CID_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_RREQ_CID;

/** \brief Routing request configuration   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RREQ_CONFIG_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_RREQ_CONFIG;

/** \brief Routing status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RS_Bits B;                     /**< \brief Bitfield access */
} Ifx_DRE_RS;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_DRE_RST_STAT;

/** \brief CAN transmit routing table configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_CONFIG_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_RT_CONFIG;

/** \brief RAM routing table CAN ID filter configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_RE_CIDFC_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_RT_RE_CIDFC;

/** \brief RAM routing table multi-cast routing   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_RE_MCR_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_RT_RE_MCR;

/** \brief RAM routing table uni-cast routing   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_RT_RE_UCR_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_RT_RE_UCR;

/** \brief Stream ID filter configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FC_Bits B;                /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FC;

/** \brief Stream ID filter 1 higher   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL1_H_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL1_H;

/** \brief Stream ID filter 1 lower   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL1_L_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL1_L;

/** \brief Stream ID filter 2 higher   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL2_H_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL2_H;

/** \brief Stream ID filter 2 lower   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_SIDF_FIL2_L_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_SIDF_FIL2_L;

/** \brief RAM TDESC word 0 read format   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TDESC_RD0_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_TDESC_RD0;

/** \brief RAM TDESC word 1 read format   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TDESC_RD1_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_TDESC_RD1;

/** \brief RAM TDESC word 2 read format   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TDESC_RD2_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_TDESC_RD2;

/** \brief RAM TDESC word 3 read format   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TDESC_RD3_Bits B;              /**< \brief Bitfield access */
} Ifx_DRE_TDESC_RD3;

/** \brief RAM TDESC word 0 write-back format   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_DRE_TDESC_WR0;

/** \brief RAM TDESC word 1 write-back format   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_DRE_TDESC_WR1;

/** \brief RAM TDESC word 2 write-back format   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_DRE_TDESC_WR2;

/** \brief RAM TDESC word 3 write-back format for GETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TDESC_WR3G_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_TDESC_WR3G;

/** \brief RAM TDESC word 3 write-back format for LETH   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TDESC_WR3L_Bits B;             /**< \brief Bitfield access */
} Ifx_DRE_TDESC_WR3L;

/** \brief Tx Ethernet descriptor list configuration and control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_TETHDL_CTRL_Bits B;            /**< \brief Bitfield access */
} Ifx_DRE_TETHDL_CTRL;

/** \brief Uni-cast routing header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DRE_UCRH_Bits B;                   /**< \brief Bitfield access */
} Ifx_DRE_UCRH;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_DRE_RST
{
       __IO Ifx_DRE_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_DRE_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_DRE_RST_STAT                    STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_DRE_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_DRE_ACCEN
{
       __IO Ifx_DRE_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_DRE_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_DRE_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_DRE_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_DRE_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_DRE_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_DRE_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_ETH_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_DRE_ETH_ACCEN
{
       __IO Ifx_DRE_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_DRE_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_DRE_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_DRE_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_DRE_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_DRE_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_DRE_ETH_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_ETH_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ETH object */
typedef volatile struct _Ifx_DRE_ETH
{
       __IO Ifx_DRE_ETH_ACCEN                   ACCEN;                  /**< \brief 0, */
} Ifx_DRE_ETH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RP object */
typedef volatile struct _Ifx_DRE_RP
{
       __IO Ifx_DRE_RP_MODE                     MODE;                   /**< \brief 0, RP 0 mode register*/
} Ifx_DRE_RP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CAN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CAN object */
typedef volatile struct _Ifx_DRE_CAN
{
       __IO Ifx_DRE_CAN_RP                      RP;                     /**< \brief 0, CAN resource partition*/
} Ifx_DRE_CAN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CIBL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CIBL object */
typedef volatile struct _Ifx_DRE_CIBL
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_CIBL_BPR                    BPR;                    /**< \brief 8, CAN input buffer pending request*/
       __IO Ifx_DRE_CIBL_STATUS                 STATUS;                 /**< \brief C, CAN input buffer list status*/
} Ifx_DRE_CIBL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_COBL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief COBL object */
typedef volatile struct _Ifx_DRE_COBL
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_COBL_BPR0                   BPR0;                   /**< \brief 8, CAN output buffer pending request 0*/
       __IO Ifx_DRE_COBL_BPR1                   BPR1;                   /**< \brief C, CAN output buffer pending request 1*/
       __IO Ifx_DRE_COBL_STATUS                 STATUS;                 /**< \brief 10, CAN output buffer list status*/
} Ifx_DRE_COBL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EIBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EIBUF object */
typedef volatile struct _Ifx_DRE_EIBUF
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_EIBUF_CONFIG                CONFIG;                 /**< \brief 4, Ethernet input buffer configuration*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_DRE_EIBUF_ERROR                 ERROR;                  /**< \brief C, Ethernet input buffer error*/
       __IO Ifx_DRE_EIBUF_STATUS                STATUS;                 /**< \brief 10, Ethernet input buffer status*/
} Ifx_DRE_EIBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EOBUF_MAC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MAC object */
typedef volatile struct _Ifx_DRE_EOBUF_MAC
{
       __IO Ifx_DRE_EOBUF_MAC_H0                H0;                     /**< \brief 0, MAC header 0*/
       __IO Ifx_DRE_EOBUF_MAC_H1                H1;                     /**< \brief 4, MAC header 1*/
       __IO Ifx_DRE_EOBUF_MAC_H2                H2;                     /**< \brief 8, MAC header 2*/
       __IO Ifx_DRE_EOBUF_MAC_H3                H3;                     /**< \brief C, MAC header 3*/
       __IO Ifx_DRE_EOBUF_MAC_H4                H4;                     /**< \brief 10, MAC header 4*/
} Ifx_DRE_EOBUF_MAC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EOBUF_NTSCF_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief NTSCF object */
typedef volatile struct _Ifx_DRE_EOBUF_NTSCF
{
       __IO Ifx_DRE_EOBUF_NTSCF_H0              H0;                     /**< \brief 0, NTSCF header*/
       __IO Ifx_DRE_EOBUF_NTSCF_STREAM0_ID      STREAM0_ID;             /**< \brief 4, Stream ID configuration 0*/
       __IO Ifx_DRE_EOBUF_NTSCF_STREAM1_ID      STREAM1_ID;             /**< \brief 8, Stream ID configuration 1*/
} Ifx_DRE_EOBUF_NTSCF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EOBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EOBUF object */
typedef volatile struct _Ifx_DRE_EOBUF
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_EOBUF_CONFIG                CONFIG;                 /**< \brief 4, Ethernet output buffer configuration*/
       __IO Ifx_DRE_EOBUF_MAC                   MAC;                    /**< \brief 8, MAC header*/
       __IO Ifx_DRE_EOBUF_NTSCF                 NTSCF;                  /**< \brief 1C, NTSCF header*/
       __IO Ifx_DRE_EOBUF_STATUS                STATUS;                 /**< \brief 28, Ethernet output buffer status*/
       __IO Ifx_DRE_EOBUF_TTC                   TTC;                    /**< \brief 2C, Transmit trigger configuration*/
       __IO Ifx_DRE_EOBUF_TTS                   TTS;                    /**< \brief 30, Timer threshold and status*/
       __IO Ifx_DRE_EOBUF_ERROR                 ERROR;                  /**< \brief 34, Ethernet output buffer error*/
} Ifx_DRE_EOBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_SIDF_FIL1_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief FIL1 object */
typedef volatile struct _Ifx_DRE_SIDF_FIL1
{
       __IO Ifx_DRE_SIDF_FIL1_L                 L;                      /**< \brief 0, Stream ID filter 1 lower*/
       __IO Ifx_DRE_SIDF_FIL1_H                 H;                      /**< \brief 4, Stream ID filter 1 higher*/
} Ifx_DRE_SIDF_FIL1;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_SIDF_FIL2_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief FIL2 object */
typedef volatile struct _Ifx_DRE_SIDF_FIL2
{
       __IO Ifx_DRE_SIDF_FIL2_L                 L;                      /**< \brief 0, Stream ID filter 2 lower*/
       __IO Ifx_DRE_SIDF_FIL2_H                 H;                      /**< \brief 4, Stream ID filter 2 higher*/
} Ifx_DRE_SIDF_FIL2;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_SIDF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SIDF object */
typedef volatile struct _Ifx_DRE_SIDF
{
       __IO Ifx_DRE_SIDF_FC                     FC;                     /**< \brief 0, Stream ID filter configuration*/
       __IO Ifx_DRE_SIDF_FIL1                   FIL1;                   /**< \brief 4, */
       __IO Ifx_DRE_SIDF_FIL2                   FIL2;                   /**< \brief C, Filter 2*/
} Ifx_DRE_SIDF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RT object */
typedef volatile struct _Ifx_DRE_RT
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_RT_CONFIG                   CONFIG;                 /**< \brief 4, CAN transmit routing table configuration*/
} Ifx_DRE_RT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RREQ_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RREQ object */
typedef volatile struct _Ifx_DRE_RREQ
{
       __I  Ifx_DRE_RREQ_CONFIG                 CONFIG;                 /**< \brief 0, Routing request configuration*/
       __I  Ifx_DRE_RREQ_CID                    CID;                    /**< \brief 4, CAN ID request*/
} Ifx_DRE_RREQ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_DMEM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DMEM object */
typedef volatile struct _Ifx_DRE_DMEM
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_DMEM_CONFIG                 CONFIG;                 /**< \brief 4, Destination memory configuration*/
       __IO Ifx_DRE_DMEM_MODE                   MODE;                   /**< \brief 8, Destination memory transfer mode configuration*/
       __I  Ifx_UReg_8Bit                       reserved_C[12];         /**< \brief C, \internal Reserved */
       __IO Ifx_DRE_DMEM_STATUS                 STATUS;                 /**< \brief 18, Destination memory status*/
       __IO Ifx_DRE_DMEM_RP                     RP;                     /**< \brief 1C, Destination memory resource partition*/
} Ifx_DRE_DMEM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_ME_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ME object */
typedef volatile struct _Ifx_DRE_ME
{
       __I  Ifx_DRE_ME_SRCA                     SRCA;                   /**< \brief 0, Move engine source address*/
       __I  Ifx_DRE_ME_DESTA                    DESTA;                  /**< \brief 4, Move engine destination address*/
       __I  Ifx_DRE_ME_STATE                    STATE;                  /**< \brief 8, Move engine state*/
       __I  Ifx_DRE_ME_FESRCA                   FESRCA;                 /**< \brief C, Move engine first error source address*/
       __I  Ifx_DRE_ME_FEDESTA                  FEDESTA;                /**< \brief 10, Move engine first error destination address*/
       __IO Ifx_DRE_ME_ERR                      ERR;                    /**< \brief 14, Move engine error register*/
} Ifx_DRE_ME;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RETHDL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RETHDL object */
typedef volatile struct _Ifx_DRE_RETHDL
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_RETHDL_CTRL                 CTRL;                   /**< \brief 4, Rx Ethernet descriptor list configuration and control*/
} Ifx_DRE_RETHDL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_TETHDL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TETHDL object */
typedef volatile struct _Ifx_DRE_TETHDL
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_DRE_TETHDL_CTRL                 CTRL;                   /**< \brief 4, Tx Ethernet descriptor list configuration and control*/
       __I  Ifx_UReg_8Bit                       reserved_8[8];          /**< \brief 8, \internal Reserved */
} Ifx_DRE_TETHDL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_DMA_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DMA object */
typedef volatile struct _Ifx_DRE_DMA
{
       __IO Ifx_DRE_DMA_RP                      RP;                     /**< \brief 0, DMA resource partition*/
} Ifx_DRE_DMA;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CAD_CAN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CAD_CAN object */
typedef volatile struct _Ifx_DRE_CAD_CAN
{
       __IO Ifx_DRE_CAD_CAN_CRESA               CRESA;                  /**< \brief 0, RAM CAN address database CRE start address*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
} Ifx_DRE_CAD_CAN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_CIBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CIBUF object */
typedef volatile struct _Ifx_DRE_CIBUF
{
       __I  Ifx_DRE_CIBUF_RHEAD                 RHEAD;                  /**< \brief 0, RAM CIBUF routing header*/
       __IO Ifx_DRE_CIBUF_CRC                   CRC;                    /**< \brief 4, RAM CIBUF CRC computed by CRE*/
       __I  Ifx_DRE_CIBUF_R0                    R0;                     /**< \brief 8, RAM CIBUF register 0*/
       __IO Ifx_DRE_CIBUF_R1                    R1;                     /**< \brief C, RAM CIBUF register 1*/
       __IO Ifx_DRE_CIBUF_DB                    DB[64];                 /**< \brief 10, RAM CIBUF data byte m*/
} Ifx_DRE_CIBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_COBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief COBUF object */
typedef volatile struct _Ifx_DRE_COBUF
{
       union
       {
            __I  Ifx_DRE_COBUF_UCRH                  UCRH;                   /**< \brief 0, Routing header*/
            __I  Ifx_DRE_COBUF_MCRH                  MCRH;                   /**< \brief 0, Routing header*/
       };
       __IO Ifx_DRE_COBUF_CRC                   CRC;                    /**< \brief 4, RAM COBUF CRC computed by DRE*/
       __I  Ifx_DRE_COBUF_R0                    R0;                     /**< \brief 8, RAM COBUF register 0*/
       __I  Ifx_DRE_COBUF_R1                    R1;                     /**< \brief C, RAM COBUF register 1*/
       __I  Ifx_DRE_COBUF_DB                    DB[64];                 /**< \brief 10, RAM COBUF data byte m*/
} Ifx_DRE_COBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RT_RE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RE object */
typedef volatile struct _Ifx_DRE_RT_RE
{
       __IO Ifx_DRE_RT_RE_CIDFC                 CIDFC;                  /**< \brief 0, RAM routing table CAN ID filter configuration*/
       union
       {
            __IO Ifx_DRE_RT_RE_UCR                   UCR;                    /**< \brief 4, RAM routing table destination configuraton*/
            __IO Ifx_DRE_RT_RE_MCR                   MCR;                    /**< \brief 4, RAM routing table destination configuraton*/
       };
} Ifx_DRE_RT_RE;


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EAD_LETH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief LETH object */
typedef volatile struct _Ifx_DRE_EAD_LETH
{
       __IO Ifx_DRE_EAD_LETH_TXDMA              TXDMA;                  /**< \brief 0, RAM LETH Tx DMA channel address*/
       __IO Ifx_DRE_EAD_LETH_RXDMA              RXDMA;                  /**< \brief 4, RAM LETH Rx DMA channel address*/
} Ifx_DRE_EAD_LETH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EAD_GETH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief GETH object */
typedef volatile struct _Ifx_DRE_EAD_GETH
{
       __IO Ifx_DRE_EAD_GETH_TXDMA              TXDMA;                  /**< \brief 0, RAM GETH Tx DMA channel address*/
       __IO Ifx_DRE_EAD_GETH_RXDMA              RXDMA;                  /**< \brief 4, RAM GETH Rx DMA channel address*/
} Ifx_DRE_EAD_GETH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_EAD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EAD object */
typedef volatile struct _Ifx_DRE_EAD
{
       __IO Ifx_DRE_EAD_LETH                    LETH[4];                /**< \brief 0, */
       __IO Ifx_DRE_EAD_GETH                    GETH[2];                /**< \brief 20, */
} Ifx_DRE_EAD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_TDESC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TDESC object */
typedef volatile struct _Ifx_DRE_TDESC
{
       union
       {
            __IO Ifx_DRE_TDESC_RD0                   RD0;                    /**< \brief 0, */
            __I  Ifx_DRE_TDESC_WR0                   WR0;                    /**< \brief 0, */
       };
       union
       {
            __IO Ifx_DRE_TDESC_RD1                   RD1;                    /**< \brief 4, */
            __I  Ifx_DRE_TDESC_WR1                   WR1;                    /**< \brief 4, */
       };
       union
       {
            __IO Ifx_DRE_TDESC_RD2                   RD2;                    /**< \brief 8, */
            __I  Ifx_DRE_TDESC_WR2                   WR2;                    /**< \brief 8, */
       };
       union
       {
            __IO Ifx_DRE_TDESC_RD3                   RD3;                    /**< \brief C, */
            __IO Ifx_DRE_TDESC_WR3G                  WR3G;                   /**< \brief C, */
            __IO Ifx_DRE_TDESC_WR3L                  WR3L;                   /**< \brief C, */
       };
} Ifx_DRE_TDESC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_RDESC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RDESC object */
typedef volatile struct _Ifx_DRE_RDESC
{
       union
       {
            __IO Ifx_DRE_RDESC_RD0                   RD0;                    /**< \brief 0, */
            __IO Ifx_DRE_RDESC_WR0NT                 WR0NT;                  /**< \brief 0, */
            __IO Ifx_DRE_RDESC_WR0T                  WR0T;                   /**< \brief 0, */
       };
       union
       {
            __I  Ifx_DRE_RDESC_RD1                   RD1;                    /**< \brief 4, */
            __IO Ifx_DRE_RDESC_WR1G                  WR1G;                   /**< \brief 4, */
            __IO Ifx_DRE_RDESC_WR1L                  WR1L;                   /**< \brief 4, */
       };
       union
       {
            __I  Ifx_DRE_RDESC_RD2                   RD2;                    /**< \brief 8, */
            __IO Ifx_DRE_RDESC_WR2G                  WR2G;                   /**< \brief 8, */
            __IO Ifx_DRE_RDESC_WR2L                  WR2L;                   /**< \brief 8, */
       };
       union
       {
            __IO Ifx_DRE_RDESC_RD3G                  RD3G;                   /**< \brief C, */
            __IO Ifx_DRE_RDESC_RD3L                  RD3L;                   /**< \brief C, */
            __IO Ifx_DRE_RDESC_WR3G                  WR3G;                   /**< \brief C, */
            __IO Ifx_DRE_RDESC_WR3L                  WR3L;                   /**< \brief C, */
       };
} Ifx_DRE_RDESC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_FT_FE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief FE object */
typedef volatile struct _Ifx_DRE_FT_FE
{
       __IO Ifx_DRE_FT_FE_FRULE                 FRULE;                  /**< \brief 0, RAM Forwarding rule and FID1*/
       __IO Ifx_DRE_FT_FE_FID2                  FID2;                   /**< \brief 4, RAM Forward filter ID2*/
} Ifx_DRE_FT_FE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dre_FT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief FT object */
typedef volatile struct _Ifx_DRE_FT
{
       __IO Ifx_DRE_FT_FE                       FE[128];                /**< \brief 0, RAM forwarding element*/
} Ifx_DRE_FT;


/******************************************************************************/
/** \addtogroup IfxSfr_Dre_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief DRE object */
typedef volatile struct _Ifx_DRE
{
       __IO Ifx_DRE_CLC                         CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_DRE_OCS                         OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_DRE_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_DRE_RST                         RST;                    /**< \brief C, Reset Status Register*/
       __IO Ifx_DRE_PROT                        PROTE;                  /**< \brief 18, PROT Register Endinit*/
       __IO Ifx_DRE_PROT                        PROTSE;                 /**< \brief 1C, PROT Register Safe Endinit*/
       __IO Ifx_DRE_ACCEN                       ACCEN;                  /**< \brief 20, */
       __IO Ifx_DRE_ETH                         ETH[6];                 /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_100[3904];     /**< \brief 100, \internal Reserved */
       __IO Ifx_DRE_RP                          RP[8];                  /**< \brief 1040, RP 0 mode register*/
       __IO Ifx_DRE_CAN                         CAN[20];                /**< \brief 1060, CAN resource partition*/
       __IO Ifx_DRE_CIBL                        CIBL;                   /**< \brief 10B0, CAN input buffer list status*/
       __IO Ifx_DRE_COBL                        COBL;                   /**< \brief 10C0, CAN output buffer list status*/
       __IO Ifx_DRE_EIBUF                       EIBUF[6];               /**< \brief 10D4, Ethernet input buffer status*/
       __IO Ifx_DRE_EOBUF                       EOBUF[6];               /**< \brief 114C, Ethernet output buffer error*/
       __IO Ifx_DRE_SIDF                        SIDF[8];                /**< \brief 129C, Filter 2*/
       __IO Ifx_DRE_RT                          RT[4];                  /**< \brief 133C, CAN transmit routing table configuration*/
       __IO Ifx_DRE_RREQ                        RREQ;                   /**< \brief 135C, CAN ID request*/
       union
       {
             __I  Ifx_DRE_UCRH                        UCRH;                   /**< \brief 1364, Uni-cast routing header*/
             __I  Ifx_DRE_MCRH                        MCRH;                   /**< \brief 1364, Multi-cast routing header*/
       };
       __IO Ifx_DRE_RS                          RS;                     /**< \brief 1368, Routing status*/
       __I  Ifx_DRE_CANRXR0                     CANRXR0;                /**< \brief 136C, CAN receive request 0*/
       __I  Ifx_DRE_CANRXR1                     CANRXR1;                /**< \brief 1370, CAN receive request 1*/
       __I  Ifx_DRE_CANTXR                      CANTXR;                 /**< \brief 1374, CAN transmit buffer available request*/
       __IO Ifx_DRE_DMEM                        DMEM[28];               /**< \brief 1378, Destination memory resource partition*/
       __IO Ifx_DRE_ME                          ME;                     /**< \brief 16F8, Move engine error register*/
       __I  Ifx_DRE_INTSIG                      INTSIG;                 /**< \brief 1710, Interrupt signal*/
       __IO Ifx_DRE_IE                          IE;                     /**< \brief 1714, Interrupt line enable*/
       __IO Ifx_DRE_RETHDL                      RETHDL[6];              /**< \brief 1718, Rx Ethernet descriptor list configuration and control*/
       __IO Ifx_DRE_TETHDL                      TETHDL[6];              /**< \brief 1748, */
       __I  Ifx_UReg_8Bit                       reserved_17A8[48];      /**< \brief 17A8, \internal Reserved */
       __IO Ifx_DRE_EDLSTAT                     EDLSTAT;                /**< \brief 17D8, Ethernet descriptor list status*/
       __IO Ifx_DRE_EREQ                        EREQ;                   /**< \brief 17DC, Ethernet requests summary*/
       __I  Ifx_UReg_8Bit                       reserved_17E0[4];       /**< \brief 17E0, \internal Reserved */
       __IO Ifx_DRE_FTCFG                       FTCFG;                  /**< \brief 17E4, Forwarding table configuration*/
       __I  Ifx_UReg_8Bit                       reserved_17E8[4];       /**< \brief 17E8, \internal Reserved */
       __IO Ifx_DRE_CWDCFG                      CWDCFG;                 /**< \brief 17EC, DRE CAN watchdog configuration*/
       __I  Ifx_UReg_8Bit                       reserved_17F0[4];       /**< \brief 17F0, \internal Reserved */
       __IO Ifx_DRE_EWDCFG                      EWDCFG;                 /**< \brief 17F4, DRE Ethernet watchdog configuration*/
       __IO Ifx_DRE_EADCFG                      EADCFG;                 /**< \brief 17F8, Ethernet address database configuration*/
       __IO Ifx_DRE_DMA                         DMA[6];                 /**< \brief 17FC, DMA resource partition*/
       __I  Ifx_UReg_8Bit                       reserved_1814[4];       /**< \brief 1814, \internal Reserved */
       __IO Ifx_DRE_CITO                        CITO;                   /**< \brief 1818, CAN Input buffer timeout status*/
       __IO Ifx_DRE_COTO0                       COTO0;                  /**< \brief 181C, CAN Output buffer timeout status 0*/
       __IO Ifx_DRE_COTO1                       COTO1;                  /**< \brief 1820, CAN Output buffer timeout status 1*/
       __I  Ifx_UReg_8Bit                       reserved_1824[26588];    /**< \brief 1824, \internal Reserved */
       Ifx_UReg_64Bit                      RAM[4096];             /**< \brief 8000, Embedded SRAM for DRE*/
} Ifx_DRE;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXDRE_REGDEF_H */
