/**
 * \file IfxClock_cfg.h
 * \brief CLOCK on-chip implementation data 
 * \ingroup IfxLld_Clock 
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 
 *
 * \defgroup IfxLld_Clock CLOCK
 * \ingroup IfxLld
 * \defgroup IfxLld_Clock_Impl Implementation
 * \ingroup IfxLld_Clock
 * \defgroup IfxLld_Clock_Std Standard Driver
 * \ingroup IfxLld_Clock
 */

#ifndef IFXCLOCK_CFG_H
#define IFXCLOCK_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
/******************************************************************************/
#include "Ifx_Cfg.h"
#include "IfxClock_bf.h"

/******************************************************************************/
/*                           Macro                                            */
/******************************************************************************/
#ifndef IFX_CFG_CLOCK_XTAL_FREQUENCY
#    define IFX_CFG_CLOCK_XTAL_FREQUENCY   20000000   /**< \brief Default External oscillator frequency */
#    warning "IFX_CFG_CLOCK_XTAL_FREQUENCY not specified in your IfxCfg.h file."
#    warning "Please double check the external XTAL frequency with the default setting of 20 MHz!"
#endif

#ifndef IFX_CFG_CLOCK_SYSCLK_FREQUENCY
#    define IFX_CFG_CLOCK_SYSCLK_FREQUENCY 20000000     /**< \brief Default External SysClk pin frequency */
#endif

#ifndef IFX_CFG_CLOCK_SYSPLL_FREQUENCY
#    define IFX_CFG_CLOCK_SYSPLL_FREQUENCY    500000000  /**< \brief Default PLL frequency */
#endif

#ifndef IFX_CFG_CLOCK_PPUPLL_FREQUENCY
#    define IFX_CFG_CLOCK_PPUPLL_FREQUENCY    450000000  /**< \brief Default PPU PLL frequency */
#endif

#ifndef IFX_CFG_CLOCK_PERPLL1_FREQUENCY
#    define IFX_CFG_CLOCK_PERPLL1_FREQUENCY   160000000   /**< \brief Default PER PLL1 frequency */
#endif

#ifndef IFX_CFG_CLOCK_PERPLL2_FREQUENCY
#    define IFX_CFG_CLOCK_PERPLL2_FREQUENCY   200000000   /**< \brief Default PER PLL2 frequency */
#endif

#ifndef IFX_CFG_CLOCK_PERPLL3_FREQUENCY
#    define IFX_CFG_CLOCK_PERPLL3_FREQUENCY   200000000   /**< \brief Default PER PLL3 frequency */
#endif

#define IFXCLOCK_EVR_OSC_FREQUENCY         (100000000.0f)

#ifndef IFX_CFG_CLOCK_OSC_F_FREQUENCY
#	 define IFXCLOCK_CFG_OSC_F_FREQ      20000000        /**< \brief Default fOsc_f low pass filtered oscillator frequency */
#endif

/* By Default - external crystal is chosen as input */
/* This can be set to external clock input by user */
#ifndef IFX_CFG_CLOCK_EXT_CLOCK
#    define IFX_CFG_CLOCK_EXT_CLOCK 0 /**< \brief Default External Crystal input */
#endif


/* iLLD Configs from Master CFG file */
/*Utility macros for the configuration structure */
#if (IFX_CFG_CLOCK_XTAL_FREQUENCY == (20000000))
#define IFXCLOCK_CFG_XTAL_FREQ        20MHZ
#elif (IFX_CFG_CLOCK_XTAL_FREQUENCY == (25000000))
#define IFXCLOCK_CFG_XTAL_FREQ        25MHZ
#elif (IFX_CFG_CLOCK_XTAL_FREQUENCY == (40000000))
#define IFXCLOCK_CFG_XTAL_FREQ        40MHZ
#elif (IFX_CFG_CLOCK_XTAL_FREQUENCY == (10000000))
#define IFXCLOCK_CFG_XTAL_FREQ        10MHZ
#else
#error "Wrong XTAL frequency configuration! check IFX_CFG_CLOCK_XTAL_FREQUENCY configuration in Ifx_Cfg.h."
#error "AurixPlus Triboard supported crystal frequencies are  10MHz, 20MHz, 25MHz and 40MHz"
#endif

#if (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (80000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 80MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (133000000)) && (IFX_CFG_CLOCK_XTAL_FREQUENCY != (8000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 133MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (160000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 160MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (200000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 200MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (240000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 240MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (300000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 300MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (400000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 400MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (450000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 450MHZ
#elif (IFX_CFG_CLOCK_SYSPLL_FREQUENCY == (500000000))
#define IFXCLOCK_CFG_SYSPLL_FREQ 500MHZ
#else
#error "Wrong PLL frequency configuration!, check IFX_CFG_CLOCK_SYSPLL_FREQUENCY configuration in Ifx_Cfg.h."
#error "Supported PLL frequencies are 80MHz, 133MHz (8MHz XTAL doesn't support), 160Mhz, 200MHz, 240Mhz, and 300MHz."
#endif

#if (IFX_CFG_CLOCK_PPUPLL_FREQUENCY == (400000000))
#define IFXCLOCK_CFG_PPUPLL_FREQ 400MHZ
#elif (IFX_CFG_CLOCK_PPUPLL_FREQUENCY == (450000000))
#define IFXCLOCK_CFG_PPUPLL_FREQ 450MHZ
#else
#error "Wrong PPUPLL frequency configuration!, check IFX_CFG_CLOCK_PLLPPU_FREQUENCY configuration in Ifx_Cfg.h."
#error "Supported PPUPLL frequencies are 400MHz and 450MHz."
#endif

/******************************************************************************/
/*                           Per PLL Config                                   */
/******************************************************************************/

#if (IFX_CFG_CLOCK_PERPLL1_FREQUENCY == (320000000))
#define IFXCLOCK_CFG_PERPLL1_FREQ     320MHZ
#elif (IFX_CFG_CLOCK_PERPLL1_FREQUENCY == (160000000))
#define IFXCLOCK_CFG_PERPLL1_FREQ     160MHZ
#else
#error "Wrong PLL1 frequency configuration!, check IFX_CFG_CLOCK_PLL1_FREQUENCY configuration in Ifx_Cfg.h."
#error "Supported PLL1 frequencies are 160MHz and 320MHz."
#endif

#if (IFX_CFG_CLOCK_PERPLL2_FREQUENCY == (200000000))
#define IFXCLOCK_CFG_PERPLL2_FREQ 200MHZ
#else
#error "Wrong PLL2 frequency configuration!, check IFX_CFG_CLOCK_PLL2_FREQUENCY configuration in Ifx_Cfg.h."
#error "Supported PLL2 frequency is 200MHz."
#endif

#if (IFX_CFG_CLOCK_PERPLL3_FREQUENCY == (200000000))
#define IFXCLOCK_CFG_PERPLL3_FREQ 200MHZ
#else
#error "Wrong PLL3 frequency configuration!, check IFX_CFG_CLOCK_PLL3_FREQUENCY configuration in Ifx_Cfg.h."
#error "Supported PLL3 frequency is 200MHz."
#endif

/***************************************************************************************************/

/***************************************************************************************************/
/*********************** SYSPLL CONFIGURATIONS *****************************************************/
/***************************************************************************************************/

/*******************************16MHz Oscillator Frequency******************************************/
// TODO

/*******************************20MHz Oscillator Frequency******************************************/

/************** Target = 400MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_400MHZ_400MHZ
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 400MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_SYS_PLL_20MHZ_400MHZ_400MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(40 - 1), (IfxClock_K2divider)(8 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_400MHZ_400MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_400MHZ_400MHZ
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 400MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_SYS_PLL_20MHZ_400MHZ_400MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(40 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_400MHZ_400MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

/************** Target = 450MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_450MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 450MHZ target (fDCO= 450)*/
#define IFXCLOCK_CFG_SYS_PLL_20MHZ_450MHZ_450MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(2 - 1), (IfxClock_Ndivider)(45 - 1), (IfxClock_K2divider)(3 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_450MHZ_450MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_450MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 450MHz target (fDCO= 450)*/
#define IFXCLOCK_CFG_SYS_PLL_20MHZ_450MHZ_450MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider }*/            \
    {(IfxClock_Pdivider)(2 - 1), (IfxClock_Ndivider)(45 - 1), (IfxClock_K2divider)(1 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(1 - 1) }
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_450MHZ_450MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_800MHZ_TO_TARGET_400MHZ
#define IFXCLOCK_CFG_PLL_STEPS_FDCO_800MHZ_TO_TARGET_400MHZ              \
   (6 - 1), (4 - 1), (3 - 1), (2 - 1)
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_800MHZ_TO_TARGET_400MHZ */

#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_450MHZ_TO_TARGET_450MHZ
#define IFXCLOCK_CFG_PLL_STEPS_FDCO_450MHZ_TO_TARGET_450MHZ              \
   (3 - 1), (2 - 1), (1 - 1)
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_450MHZ_TO_TARGET_450MHZ */

#ifndef IFXCLOCK_CFG_PLL_STEPS_20MHZ_400MHZ
/**** Macro for Pll step for profile with 20MHz Crystal and 400MHz target (fDCO= 800MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_20MHZ_400MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_800MHZ_TO_TARGET_400MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_20MHZ_400MHZ */

#ifndef IFXCLOCK_CFG_PLL_STEPS_20MHZ_450MHZ
/**** Macro for Pll step for profile with 20MHz Crystal and 400MHz target (fDCO= 450MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_20MHZ_450MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_450MHZ_TO_TARGET_450MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_20MHZ_450MHZ */

/************** Target = 500MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_500MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 500MHz/450MHz target (fDCO= 1GHZ)*/
#define IFXCLOCK_CFG_SYS_PLL_20MHZ_500MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(50 - 1), (IfxClock_K2divider)(10 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(2 - 1) }
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_500MHZ_450MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_500MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 20MHz Crystal and 500MHz target (fDCO= 1GHZ)*/
#define IFXCLOCK_CFG_SYS_PLL_20MHZ_500MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(50 - 1), (IfxClock_K2divider)(1 - 1), (IfxClock_K2PreDivider)(2 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(2 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_20MHZ_500MHZ_450MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_500MHZ_TO_TARGET_500MHZ
#define IFXCLOCK_CFG_PLL_STEPS_FDCO_500MHZ_TO_TARGET_500MHZ              \
   (5 - 1), (3 - 1), (2 - 1), (1 - 1)
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_500MHZ_TO_TARGET_500MHZ */

#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_1GHZ_TO_TARGET_500MHZ
#define IFXCLOCK_CFG_PLL_STEPS_FDCO_1GHZ_TO_TARGET_500MHZ              \
   (6 - 1), (5 - 1), (3 - 1), (2 - 1)
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_FDCO_1GHZ_TO_TARGET_500MHZ */


#ifndef IFXCLOCK_CFG_PLL_STEPS_20MHZ_500MHZ
/**** Macro for Pll step for profile with 20MHz Crystal and 500MHz target (fDCO= 500MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_20MHZ_500MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_500MHZ_TO_TARGET_500MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_20MHZ_500MHZ */

/*******************************25MHz Oscillator Frequency******************************************/

/************** Target = 400MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_400MHZ_400MHZ
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 400MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_SYS_PLL_25MHZ_400MHZ_400MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(32 - 1), (IfxClock_K2divider)(8 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_400MHZ_400MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_400MHZ_400MHZ
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 400MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_SYS_PLL_25MHZ_400MHZ_400MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(32 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_400MHZ_400MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_25MHZ_400MHZ
/**** Macro for Pll step for profile with 25MHz Crystal and 400MHz target (fDCO= ?MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_25MHZ_400MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_800MHZ_TO_TARGET_400MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_25MHZ_400MHZ */

/************** Target = 450MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_450MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 450MHz target (fDCO= 450)*/
#define IFXCLOCK_CFG_SYS_PLL_25MHZ_450MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(18 - 1), (IfxClock_K2divider)(3 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_450MHZ_450MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_450MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 450MHz target (fDCO= 450)*/
#define IFXCLOCK_CFG_SYS_PLL_25MHZ_450MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(18 - 1), (IfxClock_K2divider)(1 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_450MHZ_450MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_25MHZ_450MHZ
/**** Macro for Pll step for profile with 25MHz Crystal and 450MHz target (fDCO= 450MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_25MHZ_450MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_450MHZ_TO_TARGET_450MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_25MHZ_450MHZ */

/************** Target = 500MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence  k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_500MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 500MHz target (fDCO= 1GHz)*/
#define IFXCLOCK_CFG_SYS_PLL_25MHZ_500MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(40 - 1),  (IfxClock_K2divider)(10 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(2 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_500MHZ_450MHZ */
#else
/* Ramp Osc is enabled hence  k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_500MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 25MHz Crystal and 500MHz target (fDCO= 1GHz)*/
#define IFXCLOCK_CFG_SYS_PLL_25MHZ_500MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(40 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(2 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_25MHZ_500MHZ_450MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_25MHZ_500MHZ
/**** Macro for Pll step for profile with 25MHz Crystal and 500MHz target (fDCO= 1GHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_25MHZ_500MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_1GHZ_TO_TARGET_500MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_25MHZ_500MHZ */

/*******************************10MHz Oscillator Frequency******************************************/

/************** Target = 400MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_400MHZ_400MHZ
/**** Macro for Initial Pll step, for profile with 10MHz Crystal and 400MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_SYS_PLL_10MHZ_400MHZ_400MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(80 - 1), (IfxClock_K2divider)(8 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_400MHZ_400MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_400MHZ_400MHZ
/**** Macro for Initial Pll step, for profile with 10MHz Crystal and 400MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_SYS_PLL_10MHZ_400MHZ_400MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(80 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_400MHZ_400MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_10MHZ_400MHZ
/**** Macro for Pll step for profile with 10MHz Crystal and 400MHz target (fDCO= 800MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_10MHZ_400MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_800MHZ_TO_TARGET_400MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_10MHZ_400MHZ */

/************** Target = 450MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_450MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 10MHz Crystal and 450MHz target (fDCO= 450)*/
#define IFXCLOCK_CFG_SYS_PLL_10MHZ_450MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(45 - 1), (IfxClock_K2divider)(3 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_450MHZ_450MHZ */
#else
/* Ramp Osc is enabled hence k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_450MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 10MHz Crystal and 450MHz target (fDCO= 450)*/
#define IFXCLOCK_CFG_SYS_PLL_10MHZ_450MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(45 - 1), (IfxClock_K2divider)(1 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(1 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_450MHZ_450MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_10MHZ_450MHZ
/**** Macro for Pll step for profile with 10MHz Crystal and 450MHz target (fDCO= 450MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_10MHZ_450MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_450MHZ_TO_TARGET_450MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_10MHZ_450MHZ */


/************** Target = 500MHz *****************/

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/* Ramp Osc is disabled hence  k2 and k3 dividers have initial step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_500MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 10MHz Crystal and 500MHz target (fDCO= 500)*/
#define IFXCLOCK_CFG_SYS_PLL_10MHZ_500MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(50 - 1), (IfxClock_K2divider)(5 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(2 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_500MHZ_450MHZ */
#else
/* Ramp Osc is enabled hence  k2 and k3 dividers have final step value */
#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_500MHZ_450MHZ
/**** Macro for Initial Pll step, for profile with 10MHz Crystal and 500MHz target (fDCO= 500)*/
#define IFXCLOCK_CFG_SYS_PLL_10MHZ_500MHZ_450MHZ                            \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2PreDivider, uint8 k3Initial, uint8 k3PreDivider}*/            \
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(50 - 1), (IfxClock_K2divider)(1 - 1), (IfxClock_K2PreDivider)(1 - 1), (IfxClock_K3divider)(1 - 1), (IfxClock_K3PreDivider)(2 - 1)}
#endif /*#ifndef IFXCLOCK_CFG_SYS_PLL_10MHZ_500MHZ_450MHZ */
#endif /*#ifdefined IFX_CLOCK_DISABLE_RAMPCON */

#ifndef IFXCLOCK_CFG_PLL_STEPS_10MHZ_500MHZ
/**** Macro for Pll step for profile with 10MHz Crystal and 500MHz target (fDCO= 500MHz)*/
#define IFXCLOCK_CFG_PLL_STEPS_10MHZ_500MHZ  IFXCLOCK_CFG_PLL_STEPS_FDCO_500MHZ_TO_TARGET_500MHZ
#endif /*#ifndef IFXCLOCK_CFG_PLL_STEPS_10MHZ_500MHZ */



/*******************************40MHz Oscillator Frequency******************************************/
//TODO

/***************************************************************************************************/

/******************************* OSCCON DEFAULT ******************************************/
#ifndef IFX_CLOCK_OSCCON_HYSEN_VAL
#define IFX_CLOCK_OSCCON_HYSEN_VAL               (1)
#endif

#ifndef IFX_CLOCK_OSCCON_X1CAP0EN_VAL
#define IFX_CLOCK_OSCCON_X1CAP0EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X1CAP1EN_VAL
#define IFX_CLOCK_OSCCON_X1CAP1EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X1CAP2EN_VAL
#define IFX_CLOCK_OSCCON_X1CAP2EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X1CAP3EN_VAL
#define IFX_CLOCK_OSCCON_X1CAP3EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X2CAP0EN_VAL
#define IFX_CLOCK_OSCCON_X2CAP0EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X2CAP1EN_VAL
#define IFX_CLOCK_OSCCON_X2CAP1EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X2CAP2EN_VAL
#define IFX_CLOCK_OSCCON_X2CAP2EN_VAL            (0)
#endif

#ifndef IFX_CLOCK_OSCCON_X2CAP3EN_VAL
#define IFX_CLOCK_OSCCON_X2CAP3EN_VAL            (0)
#endif

/***************************************************************************************************/

/*********************** PERPLL CONFIGURATIONS *****************************************************/
/***************************************************************************************************/

/*******************************16MHz Oscillator Frequency******************************************/
// TODO

/*******************************20MHz Oscillator Frequency******************************************/


/************** Fpll1 = 320MHz, Fpll2 = 200MHz *****************/

#ifndef IFXCLOCK_CFG_PER_PLL_20MHZ_320MHZ_200MHZ_200MHZ
/** \brief Macro for Initial Pll step, for profile with 20MHz Crystal and 320/200MHz target (fDCO= 640)*/
#define IFXCLOCK_CFG_PER_PLL_20MHZ_320MHZ_200MHZ_200MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2Predivider, uint8 k3Divider, uint8 k3Predivider, uint8 k4Divider, uint8 k4Predivider}*/\
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(32 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)0 , (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)6 , (IfxClock_K4divider)(2 - 1), (IfxClock_K4PreDivider)3}
#endif /*#ifndef IFXCLOCK_CFG_PER_PLL_20MHZ_320MHZ_200MHZ */

/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/

#ifndef IFXCLOCK_CFG_PER_PLL_20MHZ_160MHZ_200MHZ_200MHZ
/** \brief Macro for Initial Pll step, for profile with 20MHz Crystal and 160/200MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_PER_PLL_20MHZ_160MHZ_200MHZ_200MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2Predivider, uint8 k3Divider, uint8 k3Predivider, uint8 k4Divider, uint8 k4Predivider}*/\
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(40 - 1), (IfxClock_K2divider)(5 - 1), (IfxClock_K2PreDivider)0, (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)10, (IfxClock_K4divider)(2 - 1), (IfxClock_K4PreDivider)1}
#endif /*#ifndef IFXCLOCK_CFG_PER_PLL_20MHZ_160MHZ_200MHZ */

/*******************************25MHz Oscillator Frequency******************************************/

/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/

#ifndef IFXCLOCK_CFG_PER_PLL_25MHZ_160MHZ_200MHZ_200MHZ
/** \brief Macro for Initial Pll step, for profile with 25MHz Crystal and 160/200MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_PER_PLL_25MHZ_160MHZ_200MHZ_200MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2Predivider, uint8 k3Divider, uint8 k3Predivider, uint8 k4Divider, uint8 k4Predivider}*/\
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(32 - 1), (IfxClock_K2divider)(5 - 1), (IfxClock_K2PreDivider)0, (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)10, (IfxClock_K4divider)(2 - 1), (IfxClock_K4PreDivider)1}
#endif /*#ifndef IFXCLOCK_CFG_PER_PLL_25MHZ_160MHZ_200MHZ */

#ifndef IFXCLOCK_CFG_PER_PLL_25MHZ_320MHZ_200MHZ_200MHZ
/** \brief Macro for Initial Pll step, for profile with 25MHz Crystal and 320/200MHz target (fDCO= 640)*/
#define IFXCLOCK_CFG_PER_PLL_25MHZ_320MHZ_200MHZ_200MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2Predivider, uint8 k3Divider, uint8 k3Predivider, uint8 k4Divider, uint8 k4Predivider}*/\
    {(IfxClock_Pdivider)(5 - 1), (IfxClock_Ndivider)(128 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)0, (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)6, (IfxClock_K4divider)(2 - 1),(IfxClock_K4PreDivider)3}
#endif /*#ifndef IFXCLOCK_CFG_PER_PLL_25MHZ_320MHZ_200MHZ_200MHZ */

/*******************************10MHz Oscillator Frequency******************************************/

/************** Fpll1 = 160MHz, Fpll2 = 200MHz *****************/

#ifndef IFXCLOCK_CFG_PER_PLL_10MHZ_160MHZ_200MHZ_200MHZ
/** \brief Macro for Initial Pll step, for profile with 10MHz Crystal and 160/200MHz target (fDCO= 800)*/
#define IFXCLOCK_CFG_PER_PLL_10MHZ_160MHZ_200MHZ_200MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2Predivider, uint8 k3Divider, uint8 k3Predivider, uint8 k4Divider, uint8 k4Predivider}*/\
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(80 - 1), (IfxClock_K2divider)(5 - 1), (IfxClock_K2PreDivider)0, (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)10, (IfxClock_K4divider)(2 - 1),(IfxClock_K4PreDivider)1}
#endif /*#ifndef IFXCLOCK_CFG_PER_PLL_10MHZ_160MHZ_200MHZ */

/************** Fpll1 = 320MHz, Fpll2 = 200MHz *****************/

#ifndef IFXCLOCK_CFG_PER_PLL_10MHZ_320MHZ_200MHZ
/** \brief Macro for Initial Pll step, for profile with 10MHz Crystal and 320/200MHz target (fDCO= 640)*/
#define IFXCLOCK_CFG_PER_PLL_10MHZ_320MHZ_200MHZ                           \
/*{ uint8 pDivider, uint8 nDivider, uint8 k2Initial, uint8 k2Predivider, uint8 k3Divider, uint8 k3Predivider, uint8 k4Divider, uint8 k4Predivider}*/\
    {(IfxClock_Pdivider)(1 - 1), (IfxClock_Ndivider)(64 - 1), (IfxClock_K2divider)(2 - 1), (IfxClock_K2PreDivider)0, (IfxClock_K3divider)(2 - 1), (IfxClock_K3PreDivider)6, (IfxClock_K4divider)(2 - 1), (IfxClock_K4PreDivider)3}
#endif /*#ifndef IFXCLOCK_CFG_PER_PLL_10MHZ_320MHZ_200MHZ */

/*******************************40MHz Oscillator Frequency******************************************/

//TODO

/***************************** Final Macro Setting for PLL ****************************************/
#define IFXCLOCK_CFG_PLL_STEPS_BASIC_(xtalFreq, pll0Freq)        IFXCLOCK_CFG_PLL_STEPS_##xtalFreq##_##pll0Freq
#define IFXCLOCK_CFG_PLL_STEPS_BASIC(xtalFreq, pll0Freq)         IFXCLOCK_CFG_PLL_STEPS_BASIC_(xtalFreq, pll0Freq)
#define IFXCLOCK_CFG_PLL_STEPS        IFXCLOCK_CFG_PLL_STEPS_BASIC(IFXCLOCK_CFG_XTAL_FREQ, IFXCLOCK_CFG_SYSPLL_FREQ)

/****************** initial step configuration definitions ******************************/
/*macro for sys pll initial step configuration */
#define IFXCLOCK_CFG_SYS_PLL_INITIAL_STEP_BASIC_(xtalFreq, pll0Freq, ppuFreq) IFXCLOCK_CFG_SYS_PLL_##xtalFreq##_##pll0Freq##_##ppuFreq
#define IFXCLOCK_CFG_SYS_PLL_INITIAL_STEP_BASIC(xtalFreq, pll0Freq, ppuFreq)  IFXCLOCK_CFG_SYS_PLL_INITIAL_STEP_BASIC_(xtalFreq, pll0Freq, ppuFreq)
#define IFXCLOCK_CFG_SYS_PLL_INITIAL_STEP IFXCLOCK_CFG_SYS_PLL_INITIAL_STEP_BASIC(IFXCLOCK_CFG_XTAL_FREQ, IFXCLOCK_CFG_SYSPLL_FREQ, IFXCLOCK_CFG_PPUPLL_FREQ)

/*macro for per pll initial step configuration */
#define IFXCLOCK_CFG_PER_PLL_INITIAL_STEP_BASIC_(xtalFreq, pll1Freq, pll2Freq, pll3freq) IFXCLOCK_CFG_PER_PLL_##xtalFreq##_##pll1Freq##_##pll2Freq##_##pll3freq
#define IFXCLOCK_CFG_PER_PLL_INITIAL_STEP_BASIC(xtalFreq, pll1Freq, pll2Freq, pll3freq)  IFXCLOCK_CFG_PER_PLL_INITIAL_STEP_BASIC_(xtalFreq, pll1Freq, pll2Freq, pll3freq)
#define IFXCLOCK_CFG_PER_PLL_INITIAL_STEP IFXCLOCK_CFG_PER_PLL_INITIAL_STEP_BASIC(IFXCLOCK_CFG_XTAL_FREQ, IFXCLOCK_CFG_PERPLL1_FREQ, IFXCLOCK_CFG_PERPLL2_FREQ, IFXCLOCK_CFG_PERPLL3_FREQ)


/***************************************************************************************************/
/*********************** DIVIDER CONFIGURATIONS ****************************************************/
/***************************************************************************************************/

/**************** DIVIDERS DEPENDING ON FSource0 (Fpll0) *******************************************/

/************************* PLL0 400MHz **************************/
/****************************************************** ********/
/************** SYSCCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 100 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_STMDIV_400MHZ
#define IFXCLOCK_CFG_STMDIV_400MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_STMDIV_400MHZ */

/************** SYSCCUCON1 : EGTMDIV  (Output : fEGTM)**************/
/* Target = 400 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_EGTMDIV_400MHZ
#define IFXCLOCK_CFG_EGTMDIV_400MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_GTMDIV_400MHZ */

/************** SYSCCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 400 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_SRIDIV_400MHZ
#define IFXCLOCK_CFG_SRIDIV_400MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_SRIDIV_400MHZ */

/************** SYSCCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 100 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_SPBDIV_400MHZ
#define IFXCLOCK_CFG_SPBDIV_400MHZ             (4)
#endif /*#ifndef IFXCLOCK_CFG_SPBDIV_400MHZ */

/************** SYSCCUCON0 : TPBDIV  (Output : fTPB)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_TPBDIV_400MHZ
#define IFXCLOCK_CFG_TPBDIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_TPBDIV_400MHZ */

/************** SYSCCUCON0 : CPBDIV  (Output : fCPB)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_CPBDIV_400MHZ
#define IFXCLOCK_CFG_CPBDIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CPBDIV_400MHZ */

/************** SYSCCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 100 MHz AND Source = Fsri */
#ifndef IFXCLOCK_CFG_FSIDIV_400MHZ
#define IFXCLOCK_CFG_FSIDIV_400MHZ             (IFXCLOCK_CFG_SRIDIV_400MHZ * 4)
#endif /*#ifndef IFXCLOCK_CFG_FSIDIV_400MHZ */

/************** SYSCCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 400 MHz AND Source = Fsri */
#ifndef IFXCLOCK_CFG_FSI2DIV_400MHZ
#define IFXCLOCK_CFG_FSI2DIV_400MHZ             (IFXCLOCK_CFG_SRIDIV_400MHZ * 1)
#endif /*#ifndef IFXCLOCK_CFG_FSI2DIV_400MHZ */

/************** SYSCCUCON1 : XGETH0DIV  (Output : fXGETH0)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_XGETH0DIV_400MHZ
#define IFXCLOCK_CFG_XGETH0DIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_XGETH0DIV_400MHZ */

/************** SYSCCUCON1 : XGETH1DIV  (Output : fXGETH1)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_XGETH1DIV_400MHZ
#define IFXCLOCK_CFG_XGETH1DIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_XGETH1DIV_400MHZ */

/************** SYSCCUCON1 : LETHDIV  (Output : fLETH)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_LETHDIV_400MHZ
#define IFXCLOCK_CFG_LETHDIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_LETHDIV_400MHZ */

/************** SYSCCUCON1 : CANXLHDIV  (Output : fCANXLH)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_CANXLHDIV_400MHZ
#define IFXCLOCK_CFG_CANXLHDIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CANXLHDIV_400MHZ */

/************** CCUCON1 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 200 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_MCANHDIV_400MHZ
#define IFXCLOCK_CFG_MCANHDIV_400MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_MCANHDIV_400MHZ */

/************** SYSCCUCON0 : SRICSDIV  (Output : fSRI)**************/
/* Target = 400 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_SRICSDIV_400MHZ
#define IFXCLOCK_CFG_SRICSDIV_400MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_SRICSDIV_400MHZ */
/************** CCUCON5 : ADASDIV  (Output : fADAS)**************/
/* Target = 300 MHz AND Source = Fsource0 */
//#ifndef IFXCLOCK_CFG_ADASDIV_400MHZ
//#define IFXCLOCK_CFG_ADASDIV_400MHZ             (1)
//#endif /*#ifndef IFXCLOCK_CFG_ADASDIV_400MHZ */

/************************* PLL0 500MHz **************************/
/****************************************************** ********/
/************** SYSCCUCON0 : STMDIV  (Output : fSTM)**************/
/* Target = 500 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_STMDIV_500MHZ
#define IFXCLOCK_CFG_STMDIV_500MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_STMDIV_500MHZ */

/************** SYSCCUCON1 : EGTMDIV  (Output : fEGTM)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_EGTMDIV_500MHZ
#define IFXCLOCK_CFG_EGTMDIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_GTMDIV_500MHZ */

/************** SYSCCUCON0 : SRIDIV  (Output : fSRI)**************/
/* Target = 500 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_SRIDIV_500MHZ
#define IFXCLOCK_CFG_SRIDIV_500MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_SRIDIV_500MHZ */

/************** SYSCCUCON0 : SRICSDIV  (Output : fSRI)**************/
/* Target = 500 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_SRICSDIV_500MHZ
#define IFXCLOCK_CFG_SRICSDIV_500MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_SRICSDIV_500MHZ */

/************** SYSCCUCON0 : SPBDIV  (Output : fSPB)**************/
/* Target = 100 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_SPBDIV_500MHZ
#define IFXCLOCK_CFG_SPBDIV_500MHZ             (5)
#endif /*#ifndef IFXCLOCK_CFG_SPBDIV_500MHZ */

/************** SYSCCUCON0 : TPBDIV  (Output : fTPB)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_TPBDIV_500MHZ
#define IFXCLOCK_CFG_TPBDIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_TPBDIV_500MHZ */

/************** SYSCCUCON0 : CPBDIV  (Output : fCPB)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_CPBDIV_500MHZ
#define IFXCLOCK_CFG_CPBDIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CPBDIV_500MHZ */


/************** SYSCCUCON0 : FSIDIV  (Output : fFSI)**************/
/* Target = 100 MHz AND Source = Fsri */
#ifndef IFXCLOCK_CFG_FSIDIV_500MHZ
#define IFXCLOCK_CFG_FSIDIV_500MHZ             (IFXCLOCK_CFG_SRIDIV_500MHZ * 5)
#endif /*#ifndef IFXCLOCK_CFG_FSIDIV_500MHZ */

/************** SYSCCUCON0 : FSI2DIV  (Output : fFSI2)**************/
/* Target = 500 MHz AND Source = Fsri */
#ifndef IFXCLOCK_CFG_FSI2DIV_500MHZ
#define IFXCLOCK_CFG_FSI2DIV_500MHZ             (IFXCLOCK_CFG_SRIDIV_500MHZ * 1)
#endif /*#ifndef IFXCLOCK_CFG_FSI2DIV_500MHZ */

/************** SYSCCUCON1 : XGETH0DIV  (Output : fXGETH0)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_XGETH0DIV_500MHZ
#define IFXCLOCK_CFG_XGETH0DIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_XGETH0DIV_500MHZ */

/************** SYSCCUCON1 : XGETH1DIV  (Output : fXGETH1)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_XGETH1DIV_500MHZ
#define IFXCLOCK_CFG_XGETH1DIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_XGETH1DIV_500MHZ */

/************** SYSCCUCON1 : LETHDIV  (Output : fLETH)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_LETHDIV_500MHZ
#define IFXCLOCK_CFG_LETHDIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_LETHDIV_500MHZ */

/************** SYSCCUCON1 : CANXLHDIV  (Output : fCANXLH)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_CANXLHDIV_500MHZ
#define IFXCLOCK_CFG_CANXLHDIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CANXLHDIV_500MHZ */

/************** CCUCON1 : MCANHDIV  (Output : fMCANH)**************/
/* Target = 250 MHz AND Source = Fsource0 */
#ifndef IFXCLOCK_CFG_MCANHDIV_500MHZ
#define IFXCLOCK_CFG_MCANHDIV_500MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_MCANHDIV_500MHZ */
/**************** DIVIDERS DEPENDING ON FSource1,2,3 (Fpll1_Fpll2) ***********************************/

/**************** Fpll1 = 320MHz, Fpll2 = 200MHz , Fpll3 = ?? ***************************************************/

/************** PERCCUCON0 : MCANDIV  (Output : fMCAN)**************/
/* Target = 160 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_MCANDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_MCANDIV_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_MCANDIV_320MHZ_200MHZ */

/************** PERCCUCON0 : CLKSELMCAN  (Output : fMCANI)**************/
/* Target = Fmcani MHz AND Source = Fmcani/Fosc0 */
#ifndef IFXCLOCK_CFG_CLKSELMCAN_320MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELMCAN_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELMCAN_320MHZ_200MHZ */


/************** PERCCUCON0 : I2CDIV  (Output : fI2C)**************/
/* Target = 100 MHz AND Source = Fsource2 */
#ifndef IFXCLOCK_CFG_I2CDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_I2CDIV_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_I2CDIV_320MHZ_200MHZ */

/************** PERCCUCON0 : MSCDIV  (Output : fMSC)**************/
/* Target = 160 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_MSCDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_MSCDIV_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_MSCDIV_320MHZ_200MHZ */

/************** PERCCUCON0 : CLKSELMSC  (Output : fSOURCEMSC)**************/
/* Target = Fsource1 MHz AND Source = Fsource1/Fsource2 */
#ifndef IFXCLOCK_CFG_CLKSELMSC_320MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELMSC_320MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELMSC_320MHZ_200MHZ */

/************** PERCCUCON0 : QSPIDIV  (Output : fQSPI)**************/
/* Target = 200 MHz AND Source = Fsource2 */
#ifndef IFXCLOCK_CFG_QSPIDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_QSPIDIV_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_QSPIDIV_320MHZ_200MHZ */
/************** PERCCUCON0 : PPU  (Output : fPPU)**************/

/* Target = Fsource1/Fsource1 AND Source = Fsourceppu */
#ifndef IFXCLOCK_CFG_PPUDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_PPUDIV_320MHZ_200MHZ            (1)
#endif /*#ifndef IFXCLOCK_CFG_PPUDIV_320MHZ_200MHZ */

/************** PERCCUCON0 : CLKSELQSPI  (Output : fSOURCESPI)**************/
/* Target = Fsource2 MHz AND Source = Fsource1/Fsource2 */
#ifndef IFXCLOCK_CFG_CLKSELQSPI_320MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELQSPI_320MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELQSPI_320MHZ_200MHZ */

/************** PERCCUCON1 : ASCLINFDIV  (Output : fASCLINF)**************/
/* Target = 200 MHz AND Source = Fsource2 */
#ifndef IFXCLOCK_CFG_ASCLINFDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_ASCLINFDIV_320MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_ASCLINFDIV_320MHZ_200MHZ */

/************** PERCCUCON1 : ASCLINSDIV  (Output : fASCLINSI)**************/
/* Target = 80 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_ASCLINSDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_ASCLINSDIV_320MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_ASCLINSDIV_320MHZ_200MHZ */

/************** PERCCUCON1 : CLKSELASCLINS  (Output : fASCLINS)**************/
/* Target = Fasclinsi MHz AND Source = Fasclinsi/Fosc0 */
#ifndef IFXCLOCK_CFG_CLKSELASCLINS_320MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELASCLINS_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELASCLINS_320MHZ_200MHZ */
/************** PERCCUCON1 : ASCLINSDIV  (Output : fASCLINSI)**************/
/* Target = 80 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_ASCLINSDIV_320MHZ_200MHZ
#define IFXCLOCK_CFG_ASCLINSDIV_320MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_ASCLINSDIV_320MHZ_200MHZ */

/************** PERCCUCON1 : CLKSELASCLINS  (Output : fASCLINS)**************/
/* Target = Fasclinsi MHz AND Source = Fasclinsi/Fosc0 */
#ifndef IFXCLOCK_CFG_CLKSELASCLINS_320MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELASCLINS_320MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELASCLINS_320MHZ_200MHZ */

/************** PERCCUCON1 : CANXLDIV  (Output : fCANXL)**************/
/* Target = 80 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_CANXLDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_CANXLDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_CANXLDIV_160MHZ_200MHZ */

/************** PERCCUCON1 : PPUDIV  (Output : fPPU)**************/
/* Target = Fsource1/Fsource1 AND Source = Fsourceppu */
#ifndef IFXCLOCK_CFG_PPUDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_PPUDIV_160MHZ_200MHZ            (1)
#endif /*#ifndef IFXCLOCK_CFG_PPUDIV_160MHZ_200MHZ */

/************** PERCCUCON1 : CLKSELCANXL  (Output : fCANXL)**************/
/* Target = Fcanxl MHz AND Source = Fcanxl/Fosc0 */
#ifndef IFXCLOCK_CFG_CLKSELCANXL_160MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELCANXL_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELCANXL_160MHZ_200MHZ */

/************** PERCCUCON1 : XSPISLDIV  (Output : fXSPISL)**************/
/* Target = 80 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_XSPISLDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_XSPISLDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_XSPISLDIV_160MHZ_200MHZ */
/************** CCUCON2 : CLKSELADC (Output : fadc)**************/
/* Target = Fsource1 MHz */
#ifndef IFXCLOCK_CFG_CLKSELADC_320MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELADC_320MHZ_200MHZ             (0)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELADC_320MHZ_200MHZ */

#ifndef IFXCLOCK_CFG_ADC_PERON
#define IFXCLOCK_CFG_ADC_PERON             (1)
#endif /*#ifndef IFXCLOCK_CFG_ADC_PERON */

#ifndef IFXCLOCK_CFG_ERAY_PERON
#define IFXCLOCK_CFG_ERAY_PERON             (1)
#endif /*#ifndef IFXCLOCK_CFG_ERAY_PERON */

#ifndef IFXCLOCK_CFG_XSPI_PERON
#define IFXCLOCK_CFG_XSPI_PERON             (1)
#endif /*#ifndef IFXCLOCK_CFG_XSPI_PERON */

#ifndef IFXCLOCK_CFG_SDMMC_PERON
#define IFXCLOCK_CFG_SDMMC_PERON             (1)
#endif /*#ifndef IFXCLOCK_CFG_SDMMMC_PERON */

#ifndef IFXCLOCK_CFG_HSCT_PERON
#define IFXCLOCK_CFG_HSCT_PERON             (1)
#endif /*#ifndef IFXCLOCK_CFG_HSCT_PERON */

#ifndef IFXCLOCK_CFG_LETH100PERON
#define IFXCLOCK_CFG_LETH100PERON             (1)
#endif /*#ifndef IFXCLOCK_CFG_LETH100PERON */

/**************** Fpll1 = 160MHz, Fpll2 = 200MHz ***************************************************/

/************** CCUCON1 : MCANDIV  (Output : fMCAN)**************/
/* Target = 80 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_MCANDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_MCANDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_MCANDIV_160MHZ_200MHZ */

/************** CCUCON1 : CLKSELMCAN  (Output : fMCANI)**************/
/* Target = Fmcani MHz AND Source = Fmcani/Fosc0 */
#ifndef IFXCLOCK_CFG_CLKSELMCAN_160MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELMCAN_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELMCAN_160MHZ_200MHZ */

/************** CCUCON1 : PLL1DIVDIS  (Output : fsource1)**************/
/* Target = Fpll1by2 MHz AND Source = Fpll1 */
#ifndef IFXCLOCK_CFG_PLL1DIVDIS_160MHZ_200MHZ
#define IFXCLOCK_CFG_PLL1DIVDIS_160MHZ_200MHZ             (0)
#endif /*#ifndef IFXCLOCK_CFG_PLL1DIVDIS_160MHZ_200MHZ */

/************** CCUCON1 : I2CDIV  (Output : fI2C)**************/
/* Target = 100 MHz AND Source = Fsource2 */
#ifndef IFXCLOCK_CFG_I2CDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_I2CDIV_160MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_I2CDIV_160MHZ_200MHZ */

/************** CCUCON1 : MSCDIV  (Output : fMSC)**************/
/* Target = 160 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_MSCDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_MSCDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_MSCDIV_160MHZ_200MHZ */

/************** CCUCON1 : CLKSELMSC  (Output : fSOURCEMSC)**************/
/* Target = Fsource1 MHz AND Source = Fsource1/Fsource2 */
#ifndef IFXCLOCK_CFG_CLKSELMSC_160MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELMSC_160MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELMSC_160MHZ_200MHZ */

/************** CCUCON1 : QSPIDIV  (Output : fQSPI)**************/
/* Target = 200 MHz AND Source = Fsource2 */
#ifndef IFXCLOCK_CFG_QSPIDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_QSPIDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_QSPIDIV_160MHZ_200MHZ */

/************** CCUCON1 : CLKSELQSPI  (Output : fSOURCESPI)**************/
/* Target = Fsource2 MHz AND Source = Fsource1/Fsource2 */
#ifndef IFXCLOCK_CFG_CLKSELQSPI_160MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELQSPI_160MHZ_200MHZ             (2)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELQSPI_160MHZ_200MHZ */

/************** CCUCON2 : ASCLINFDIV  (Output : fASCLINF)**************/
/* Target = 200 MHz AND Source = Fsource2 */
#ifndef IFXCLOCK_CFG_ASCLINFDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_ASCLINFDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_ASCLINFDIV_160MHZ_200MHZ */

/************** CCUCON2 : ASCLINSDIV  (Output : fASCLINSI)**************/
/* Target = 80 MHz AND Source = Fsource1 */
#ifndef IFXCLOCK_CFG_ASCLINSDIV_160MHZ_200MHZ
#define IFXCLOCK_CFG_ASCLINSDIV_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_ASCLINSDIV_160MHZ_200MHZ */

/************** CCUCON2 : CLKSELASCLINS  (Output : fASCLINS)**************/
/* Target = Fasclinsi MHz AND Source = Fasclinsi/Fosc0 */
#ifndef IFXCLOCK_CFG_CLKSELASCLINS_160MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELASCLINS_160MHZ_200MHZ             (1)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELASCLINS_160MHZ_200MHZ */

/************** CCUCON2 : CLKSELADC (Output : fadc)**************/
/* Target = Fsource1 MHz */
#ifndef IFXCLOCK_CFG_CLKSELADC_160MHZ_200MHZ
#define IFXCLOCK_CFG_CLKSELADC_160MHZ_200MHZ             (0)
#endif /*#ifndef IFXCLOCK_CFG_CLKSELADC_160MHZ_200MHZ */

/***************************************************************************************************/
/*********************** REGISTER DEFAULT VALUES ***************************************************/
/***************************************************************************************************/

/************************** OSCCON **************************/
#define IFXCLOCK_CFG_OSCCON_MASK \
    (uint32)( \
        (IFX_CLOCK_OSCCON_HYSEN_MSK << IFX_CLOCK_OSCCON_HYSEN_OFF) | \
        (IFX_CLOCK_OSCCON_X1CAP0EN_MSK << IFX_CLOCK_OSCCON_X1CAP0EN_OFF) |\
        (IFX_CLOCK_OSCCON_X1CAP1EN_MSK << IFX_CLOCK_OSCCON_X1CAP1EN_OFF) |\
        (IFX_CLOCK_OSCCON_X1CAP2EN_MSK << IFX_CLOCK_OSCCON_X1CAP2EN_OFF) |\
        (IFX_CLOCK_OSCCON_X1CAP3EN_MSK << IFX_CLOCK_OSCCON_X1CAP3EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP0EN_MSK << IFX_CLOCK_OSCCON_X2CAP0EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP1EN_MSK << IFX_CLOCK_OSCCON_X2CAP1EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP2EN_MSK << IFX_CLOCK_OSCCON_X2CAP2EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP3EN_MSK << IFX_CLOCK_OSCCON_X2CAP3EN_OFF) )

#define IFXCLOCK_CFG_OSCCON_VALUE \
    (uint32)( \
        (IFX_CLOCK_OSCCON_HYSEN_VAL << IFX_CLOCK_OSCCON_HYSEN_OFF) | \
        (IFX_CLOCK_OSCCON_X1CAP0EN_VAL << IFX_CLOCK_OSCCON_X1CAP0EN_OFF) |\
        (IFX_CLOCK_OSCCON_X1CAP1EN_VAL << IFX_CLOCK_OSCCON_X1CAP1EN_OFF) |\
        (IFX_CLOCK_OSCCON_X1CAP2EN_VAL << IFX_CLOCK_OSCCON_X1CAP2EN_OFF) |\
        (IFX_CLOCK_OSCCON_X1CAP3EN_VAL << IFX_CLOCK_OSCCON_X1CAP3EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP0EN_VAL << IFX_CLOCK_OSCCON_X2CAP0EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP1EN_VAL << IFX_CLOCK_OSCCON_X2CAP1EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP2EN_VAL << IFX_CLOCK_OSCCON_X2CAP2EN_OFF) |\
        (IFX_CLOCK_OSCCON_X2CAP3EN_VAL << IFX_CLOCK_OSCCON_X2CAP3EN_OFF) )

/**************** Final OSCCON ******************/

#define IFXCLOCK_CFG_CLK_OSCCON                                                              \
    {                                                                                            \
/*      {   uint32 value,            uint32 mask                    }*/                          \
        IFXCLOCK_CFG_OSCCON_VALUE, IFXCLOCK_CFG_OSCCON_MASK   /*IFXCLOCKCcu_CcuconRegConfig SYSCCUCON0;*/ \
    }

/************************** SYSCCUCON0 **************************/
#define IFXCLOCK_CFG_SYSCCUCON0_MASK \
    (uint32)( \
        (IFX_CLOCK_SYSCCUCON0_SPBDIV_MSK << IFX_CLOCK_SYSCCUCON0_SPBDIV_OFF) | \
		(IFX_CLOCK_SYSCCUCON0_CPBDIV_MSK << IFX_CLOCK_SYSCCUCON0_CPBDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON0_TPBDIV_MSK << IFX_CLOCK_SYSCCUCON0_TPBDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON0_SRIDIV_MSK << IFX_CLOCK_SYSCCUCON0_SRIDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON0_FSIDIV_MSK << IFX_CLOCK_SYSCCUCON0_FSIDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON0_STMDIV_MSK << IFX_CLOCK_SYSCCUCON0_STMDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON0_SRICSDIV_MSK << IFX_CLOCK_SYSCCUCON0_SRICSDIV_OFF) )

#define IFXCLOCK_CFG_SYSCCUCON0_BASIC_(pll0Freq, pll1Freq, pll2Freq) \
    (uint32)( \
        (IFXCLOCK_CFG_SPBDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_SPBDIV_OFF) | \
		(IFXCLOCK_CFG_CPBDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_CPBDIV_OFF) | \
        (IFXCLOCK_CFG_TPBDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_TPBDIV_OFF) | \
        (IFXCLOCK_CFG_SRIDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_SRIDIV_OFF) | \
        (IFXCLOCK_CFG_FSIDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_FSIDIV_OFF) | \
        (IFXCLOCK_CFG_STMDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_STMDIV_OFF) | \
        (IFXCLOCK_CFG_SRICSDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON0_SRICSDIV_OFF))

#define IFXCLOCK_CFG_SYSCCUCON0_BASIC(pll0Freq, pll1Freq, pll2Freq) IFXCLOCK_CFG_SYSCCUCON0_BASIC_(pll0Freq, pll1Freq, pll2Freq)

#define IFXCLOCK_CFG_SYSCCUCON0 IFXCLOCK_CFG_SYSCCUCON0_BASIC(IFXCLOCK_CFG_SYSPLL_FREQ, IFXCLOCK_CFG_PERPLL1_FREQ, IFXCLOCK_CFG_PERPLL2_FREQ)

/************************** SYSCCUCON1 **************************/
#define IFXCLOCK_CFG_SYSCCUCON1_MASK \
    (uint32)( \
        (IFX_CLOCK_SYSCCUCON1_GETHDIV_MSK << IFX_CLOCK_SYSCCUCON1_GETHDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON1_MCANHDIV_MSK << IFX_CLOCK_SYSCCUCON1_MCANHDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON1_LETHDIV_MSK << IFX_CLOCK_SYSCCUCON1_LETHDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON1_CANXLHDIV_MSK << IFX_CLOCK_SYSCCUCON1_CANXLHDIV_OFF) | \
        (IFX_CLOCK_SYSCCUCON1_EGTMDIV_MSK << IFX_CLOCK_SYSCCUCON1_EGTMDIV_OFF) )

#define IFXCLOCK_CFG_SYSCCUCON1_BASIC_(pll0Freq, pll1Freq, pll2Freq) \
    (uint32)( \
        (IFXCLOCK_CFG_XGETH0DIV_##pll0Freq << IFX_CLOCK_SYSCCUCON1_GETHDIV_OFF) | \
        (IFXCLOCK_CFG_EGTMDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON1_EGTMDIV_OFF) | \
        (IFXCLOCK_CFG_MCANHDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON1_MCANHDIV_OFF) | \
		(IFXCLOCK_CFG_LETHDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON1_LETHDIV_OFF) | \
        (IFXCLOCK_CFG_CANXLHDIV_##pll0Freq << IFX_CLOCK_SYSCCUCON1_CANXLHDIV_OFF) )

#define IFXCLOCK_CFG_SYSCCUCON1_BASIC(pll0Freq, pll1Freq, pll2Freq) IFXCLOCK_CFG_SYSCCUCON1_BASIC_(pll0Freq, pll1Freq, pll2Freq)

#define IFXCLOCK_CFG_SYSCCUCON1 IFXCLOCK_CFG_SYSCCUCON1_BASIC(IFXCLOCK_CFG_SYSPLL_FREQ, IFXCLOCK_CFG_PERPLL1_FREQ, IFXCLOCK_CFG_PERPLL2_FREQ)

/************************** PERCCUCON0 **************************/
#define IFXCLOCK_CFG_PERCCUCON0_MASK \
    (uint32)( \
        (IFX_CLOCK_PERCCUCON0_MCANDIV_MSK << IFX_CLOCK_PERCCUCON0_MCANDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON0_CLKSELMCAN_MSK << IFX_CLOCK_PERCCUCON0_CLKSELMCAN_OFF) | \
        (IFX_CLOCK_PERCCUCON0_MSCDIV_MSK << IFX_CLOCK_PERCCUCON0_MSCDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON0_CLKSELMSC_MSK << IFX_CLOCK_PERCCUCON0_CLKSELMSC_OFF) | \
        (IFX_CLOCK_PERCCUCON0_I2CDIV_MSK << IFX_CLOCK_PERCCUCON0_I2CDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON0_QSPIDIV_MSK << IFX_CLOCK_PERCCUCON0_QSPIDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON0_CLKSELQSPI_MSK << IFX_CLOCK_PERCCUCON0_CLKSELQSPI_OFF) | \
        (IFX_CLOCK_PERCCUCON0_PPUDIV_MSK << IFX_CLOCK_PERCCUCON0_PPUDIV_OFF))

#define IFXCLOCK_CFG_PERCCUCON0_BASIC_(pll0Freq, pll1Freq, pll2Freq) \
    (uint32)( \
        (IFXCLOCK_CFG_MCANDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_MCANDIV_OFF) | \
        (IFXCLOCK_CFG_CLKSELMCAN_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_CLKSELMCAN_OFF) | \
        (IFXCLOCK_CFG_MSCDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_MSCDIV_OFF) | \
        (IFXCLOCK_CFG_CLKSELMSC_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_CLKSELMSC_OFF) | \
        (IFXCLOCK_CFG_I2CDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_I2CDIV_OFF) | \
        (IFXCLOCK_CFG_QSPIDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_QSPIDIV_OFF) | \
        (IFXCLOCK_CFG_CLKSELQSPI_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_CLKSELQSPI_OFF) | \
        (IFXCLOCK_CFG_PPUDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON0_PPUDIV_OFF))

#define IFXCLOCK_CFG_PERCCUCON0_BASIC(pll0Freq, pll1Freq, pll2Freq) IFXCLOCK_CFG_PERCCUCON0_BASIC_(pll0Freq, pll1Freq, pll2Freq)

#define IFXCLOCK_CFG_PERCCUCON0 IFXCLOCK_CFG_PERCCUCON0_BASIC(IFXCLOCK_CFG_SYSPLL_FREQ, IFXCLOCK_CFG_PERPLL1_FREQ, IFXCLOCK_CFG_PERPLL2_FREQ)

/************************** PERCCUCON1 **************************/
#define IFXCLOCK_CFG_PERCCUCON1_MASK \
    (uint32)( \
        (IFX_CLOCK_PERCCUCON1_ASCLINFDIV_MSK << IFX_CLOCK_PERCCUCON1_ASCLINFDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON1_ASCLINSDIV_MSK << IFX_CLOCK_PERCCUCON1_ASCLINSDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON1_CLKSELASCLINS_MSK << IFX_CLOCK_PERCCUCON1_CLKSELASCLINS_OFF)| \
        (IFX_CLOCK_PERCCUCON1_CLKSELCANXL_MSK << IFX_CLOCK_PERCCUCON1_CLKSELCANXL_OFF)| \
        (IFX_CLOCK_PERCCUCON1_ADCPERON_MSK << IFX_CLOCK_PERCCUCON1_ADCPERON_OFF) | \
        (IFX_CLOCK_PERCCUCON1_XSPISLDIV_MSK << IFX_CLOCK_PERCCUCON1_XSPISLDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON1_CANXLDIV_MSK << IFX_CLOCK_PERCCUCON1_CANXLDIV_OFF) | \
        (IFX_CLOCK_PERCCUCON1_ERAYPERON_MSK << IFX_CLOCK_PERCCUCON1_ERAYPERON_OFF) | \
        (IFX_CLOCK_PERCCUCON1_XSPIPERON_MSK << IFX_CLOCK_PERCCUCON1_XSPIPERON_OFF) | \
        (IFX_CLOCK_PERCCUCON1_SDMMCPERON_MSK << IFX_CLOCK_PERCCUCON1_SDMMCPERON_OFF) | \
        (IFX_CLOCK_PERCCUCON1_HSCTPERON_MSK << IFX_CLOCK_PERCCUCON1_HSCTPERON_OFF) | \
        (IFX_CLOCK_PERCCUCON1_LETH100PERON_MSK << IFX_CLOCK_PERCCUCON1_LETH100PERON_OFF))

#define IFXCLOCK_CFG_PERCCUCON1_BASIC_(pll0Freq, pll1Freq, pll2Freq) \
    (uint32)( \
        (IFXCLOCK_CFG_ASCLINFDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON1_ASCLINFDIV_OFF) | \
        (IFXCLOCK_CFG_ASCLINSDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON1_ASCLINSDIV_OFF) | \
        (IFXCLOCK_CFG_CLKSELASCLINS_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON1_CLKSELASCLINS_OFF)| \
        (IFXCLOCK_CFG_CLKSELCANXL_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON1_CLKSELCANXL_OFF)| \
        (IFXCLOCK_CFG_ADC_PERON << IFX_CLOCK_PERCCUCON1_ADCPERON_OFF)| \
        (IFXCLOCK_CFG_XSPISLDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON1_XSPISLDIV_OFF)| \
        (IFXCLOCK_CFG_CANXLDIV_##pll1Freq##_##pll2Freq << IFX_CLOCK_PERCCUCON1_CANXLDIV_OFF)| \
        (IFXCLOCK_CFG_LETH100PERON << IFX_CLOCK_PERCCUCON1_LETH100PERON_OFF)| \
        (IFXCLOCK_CFG_XSPI_PERON << IFX_CLOCK_PERCCUCON1_XSPIPERON_OFF)| \
        (IFXCLOCK_CFG_ERAY_PERON << IFX_CLOCK_PERCCUCON1_ERAYPERON_OFF)| \
        (IFXCLOCK_CFG_SDMMC_PERON << IFX_CLOCK_PERCCUCON1_SDMMCPERON_OFF)| \
        (IFXCLOCK_CFG_HSCT_PERON << IFX_CLOCK_PERCCUCON1_HSCTPERON_OFF))


#define IFXCLOCK_CFG_PERCCUCON1_BASIC(pll0Freq, pll1Freq, pll2Freq) IFXCLOCK_CFG_PERCCUCON1_BASIC_(pll0Freq, pll1Freq, pll2Freq)

#define IFXCLOCK_CFG_PERCCUCON1 IFXCLOCK_CFG_PERCCUCON1_BASIC(IFXCLOCK_CFG_SYSPLL_FREQ, IFXCLOCK_CFG_PERPLL1_FREQ, IFXCLOCK_CFG_PERPLL2_FREQ)


/**************** Final Clock Distribution ******************/

#define IFXCLOCK_CFG_CLK_DISTRIBUTION                                                              \
    {                                                                                            \
/*      {   uint32 value,            uint32 mask                    }*/                          \
        {IFXCLOCK_CFG_SYSCCUCON0, IFXCLOCK_CFG_SYSCCUCON0_MASK},   /*IFXCLOCKCcu_CcuconRegConfig SYSCCUCON0;*/  \
        {IFXCLOCK_CFG_SYSCCUCON1, IFXCLOCK_CFG_SYSCCUCON1_MASK},   /*IFXCLOCKCcu_CcuconRegConfig SYSCCUCON1;*/  \
        {IFXCLOCK_CFG_PERCCUCON0, IFXCLOCK_CFG_PERCCUCON0_MASK},   /*IFXCLOCKCcu_CcuconRegConfig PERCCUCON0;*/  \
        {IFXCLOCK_CFG_PERCCUCON1, IFXCLOCK_CFG_PERCCUCON1_MASK},   /*IFXCLOCKCcu_CcuconRegConfig PERCCUCON1;*/  \
    }

/** \brief Macros to configure FLASH Wait states 
 * The values are configured as per the UM. The PFLASH wait state is based on fSRI 
 * and DLFASH wait state is based on fFSI.
 */

#ifndef IFXCLOCK_CFG_DFLASH_WAITSTATE_VAL
#define IFXCLOCK_CFG_DFLASH_WAITSTATE_VAL (5)
#endif

#ifndef IFXCLOCK_CFG_PFLASH_WAITSTATE_VAL
#define IFXCLOCK_CFG_PFLASH_WAITSTATE_VAL (8)
#endif

#define IFXCLOCK_CFG_FLASH_WAITSTATE       \
/*  {   uint16 dFlashWaitCycles,           uint16 pFlashWaitCycles                 }*/\
    {IFXCLOCK_CFG_DFLASH_WAITSTATE_VAL, IFXCLOCK_CFG_PFLASH_WAITSTATE_VAL}
/******************************************************************************/


/******************************************************************************/
/*                           Enum                                             */
/******************************************************************************/



/******************************************************************************/

#endif /* IFXCLOCK_CFG_H */

