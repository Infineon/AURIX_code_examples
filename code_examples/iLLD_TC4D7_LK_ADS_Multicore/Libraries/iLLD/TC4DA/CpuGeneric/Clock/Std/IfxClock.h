/**
 * \file IfxClock.h
 * \brief CLOCK  basic functionality
 * \ingroup IfxLld_Clock
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Clock CLOCK
 * \addtogroup IfxLld_Clock
 * \{
 * \defgroup IfxLld_Clock How to use the Clock driver?
 * \addtogroup IfxLld_Clock
 * \{
 *
 * The  Clock control unit driver provides a default configuration for pll and Clock initialisation and set of peripheral clock configuration functions.
 *
 * In the following sections it will be described, how to integrate the driver into the application framework.
 *
 * \section IfxLld_Clock_Std_Preparation Preparation
 * \subsection IfxLld_Clock_Std_Include Include Files
 *
 * Include following header file into your C code:
 * \code
 * #include <Clock/Std/IfxClock.h>
 * \endcode
 *
 * \subsection IfxLld_Clock_Std_Variables Variables
 *
 * Declare the Clock Configuration variables in your C code:
 *
 * \code
 * // used globally
 *
 * static const IfxClock_FlashWaitstateConfig IfxClock_defaultFlashWaitstateConfig = IFXCLOCK_CFG_FLASH_WAITSTATE;
 * // Default configuration for the Clock Configuration
 * IfxClock_Config                      IfxClock_testClockConfig = {
 *     IFX_CFG_CLOCK_XTAL_FREQUENCY,
 *     IFXCLOCK_CFG_SYS_PLL_INITIAL_STEP,
 *     IFXCLOCK_CFG_PER_PLL_INITIAL_STEP,
 *  #if !defined(IFX_CLOCK_DISABLE_RAMPCON)
 *     {IfxClock_RampWaitTime_8us, 500},
 * #endif
 *     IFXCLOCK_CFG_CLK_DISTRIBUTION,
 *     &IfxClock_defaultFlashWaitstateConfig,
 *     &IfxClock_defaultModConfig,
 *     IfxClock_PllInputClockSelection_fOsc0,
 *     IfxClock_SysClockSourceSelect_pll,
 *     IfxClock_PerClockSourceSelect_pll
 * };
 *
 * \endcode
 *
 * \subsection IfxLld_Clock_Std_Init Module Initialisation
 *
 * The module initialisation can be done in the same function. Here an example:
 * \code
 *
 *        // standard PLL & clock initialisation
 *         IfxClock_init(&IfxClock_testClockConfig);
 * \endcode
 *
 *    The SYS PLL, PER PLL1 , PLL2, PLL3 and clocks are now initialised based on the XTAL and PLL values configured in Ifx_Cfg.h and are ready for use now!
 *
 * Alternately the PLL and clocks can be initialised using below method which provides greater control on the configuration.
 *
 * \code
 *
 *     IfxClock_Config        IfxClock_sampleClockConfig;
 *
 *     IfxClock_initConfig(&IfxClock_sampleClockConfig);
 *
 *
 *
 *   // To change xtal frequency dynamically during run time:
 *   // current xtal frequency is stored in global variable IfxClock_xtalFrequency.
 *   // In Ifx_cfg.h file, use below define
 *   #define IFX_CFG_CLOCK_XTAL_FREQUENCY (IfxClock_xtalFrequency)
 *     // IfxClock_sampleClockConfig.xtalFrequency = IFX_CFG_CLOCK_XTAL_FREQUENCY ;
 *
 *       //select the clock source that is used for the clock generation of fsource1/ 2/3
 *       IfxClock_sampleClockConfig.PerClockSourceSelect = IfxClock_PerClockSourceSelect_pll; //IfxClock_PerClockSourceSelect_back
 *
 *      //selects the clock source that is used for the clock generation of fsource0
 *       IfxClock_sampleClockConfig.SysClockSourceSelect = IfxClock_SysClockSourceSelect_pll; //IfxClock_SysClockSourceSelect_back or IfxClock_SysClockSourceSelect_ramp
 *
 *       //select the primary clock source for the System PLL
 *       IfxClock_sampleClockConfig.pllInputClockSelection = IfxClock_PllInputClockSelection_fOsc0; // IfxClock_PllInputClockSelection_fSysclk or IfxClock_PllInputClockSelection_back
 *
 *       // Configure PER PLL1,2,3
 *       // fPLL1 = N * fIN / P * K2 * 1. 0 -> K2PREDIV = 0
 *       // fPLL1 = N * fIN / P * K2 * 2. 0 -> K2PREDIV = 1
 *       // fPLL1 = N * fIN / P * K2 * 1. 2 -> K2PREDIV = 2
 *       // fPLL1 = N * fIN / P * K2 * 1. 6 -> K2PREDIV = 3
 *       //
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 0
 *       // fPLL2 = N * fIN / P * K3 * 1. 1 -> K3PREDIV = 1
 *       // fPLL2 = N * fIN / P * K3 * 1. 2 -> K3PREDIV = 2
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 3
 *       // fPLL2 = N * fIN / P * K3 * 1. 4 -> K3PREDIV = 4
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 5
 *       // fPLL2 = N * fIN / P * K3 * 1. 6 -> K3PREDIV = 6
 *       // fPLL2 = N * fIN / P * K3 * 1. 7 -> K3PREDIV = 7
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 8
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 9
 *       // fPLL2 = N * fIN / P * K3 * 2. 0 -> K3PREDIV = 10
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 11
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 12
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 13
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 14
 *       // fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 15
 *
 *       //
 *       // fPLL3 = N * fIN / P * K4 * 1. 0 -> K4PREDIV = 0
 *       // fPLL3 = N * fIN / P * K4 * 2. 0 -> K4PREDIV = 1
 *       // fPLL3 = N * fIN / P * K4 * 1. 2 -> K4PREDIV = 2
 *       // fPLL3 = N * fIN / P * K4 * 1. 6 -> K4PREDIV = 3
 *    IfxClock_sampleClockConfig.perPllConfig.pDivider = IfxClock_Pdivider_1 ;
 *    IfxClock_sampleClockConfig.perPllConfig.nDivider = IfxClock_Ndivider_32 ;
 *    IfxClock_sampleClockConfig.perPllConfig.k2Divider = IfxClock_K2divider_2 ;
 *    IfxClock_sampleClockConfig.perPllConfig.k2PreDivider = IfxClock_K2PreDivider_divBy1_0 ;
 *
 *    IfxClock_sampleClockConfig.perPllConfig.k3Divider = IfxClock_K3divider_2 ;
 *    IfxClock_sampleClockConfig.perPllConfig.k3PreDivider = IfxClock_K3PreDivider_divBy1_0 ;
 *    IfxClock_sampleClockConfig.perPllConfig.k4Divider = IfxClock_K4divider_2 ;
 *    IfxClock_sampleClockConfig.perPllConfig.k4PreDivider = IfxClock_K4PreDivider_divBy1_0 ;
 *
 *    // Ramp OSC configuration
 *   IfxClock_sampleClockConfig.rampConfig.rampOscUpperFreqLimit = 500; // in units of 1MHz, min 100
 *    IfxClock_sampleClockConfig.rampConfig.rampWaitTime = IfxClock_RampWaitTime_2us; // IfxClock_RampWaitTime_1us, IfxClock_RampWaitTime_4us, IfxClock_RampWaitTime_8us
 *
 *    // Configure PLL0
 *      // fPLL0 = N * fIN / P * K2 * 1. 0 -> K2PREDIV = 0
 *       // fPLL0 = N * fIN / P * K2 * 2. 0 -> K2PREDIV = 1
 *       // fPLL0 = N * fIN / P * K2 * 1. 6 -> K2PREDIV = 2
 *       // fPLL0 = N * fIN / P * K2 * 1. 2 -> K2PREDIV = 3
 *    IfxClock_sampleClockConfig.sysPllConfig.pDivider = IfxClock_Pdivider_2;
 *    IfxClock_sampleClockConfig.sysPllConfig.nDivider = IfxClock_Ndivider_45;
 *    IfxClock_sampleClockConfig.sysPllConfig.k2Divider = IfxClock_K2divider_1;
 *    IfxClock_sampleClockConfig.sysPllConfig.k2PreDivider =IfxClock_K2PreDivider_divBy1_0;
 *    // Configure PPU
 *    IfxClock_sampleClockConfig.sysPllConfig.k3Divider = IfxClock_K3divider_1;
 *    IfxClock_sampleClockConfig.sysPllConfig.k3PreDividerPpu = IfxClock_K3PreDividerPpu_divBy1_0;
 *    //Clock Distribution
 *    IfxClock_sampleClockConfig.clockDistribution.sysccucon0.value = IFXCLOCK_CFG_SYSCCUCON0;
 *    IfxClock_sampleClockConfig.clockDistribution.sysccucon0.mask = IFXCLOCK_CFG_SYSCCUCON0_MASK;
 *    IfxClock_sampleClockConfig.clockDistribution.sysccucon1.value = IFXCLOCK_CFG_SYSCCUCON1;
 *    IfxClock_sampleClockConfig.clockDistribution.sysccucon1.mask = IFXCLOCK_CFG_SYSCCUCON1_MASK;
 *     // update CCUCON Config use mask and value as below
 *    IfxClock_sampleClockConfig.clockDistribution.perccucon0.value = IFXCLOCK_CFG_PERCCUCON0;
 *    IfxClock_sampleClockConfig.clockDistribution.perccucon0.mask = IFXCLOCK_CFG_PERCCUCON0_MASK;
 *    IfxClock_sampleClockConfig.clockDistribution.perccucon1.value = IFXCLOCK_CFG_PERCCUCON1;
 *   IfxClock_sampleClockConfig.clockDistribution.perccucon1.mask = IFXCLOCK_CFG_PERCCUCON1_MASK;
 *
 *
 *     // standard PLL & clock initialisation
 *     IfxClock_init(&IfxClock_sampleClockConfig);
 *
 * \endcode
 *
 * ** Modulation Configuration **
 * The CLOCK CCU module also provides an option to Frequency Modulate the clock.
 * The Modulation configuration can be done as follows:
 *
 * \code
 *
 * //define your modulation configuration structure:
 *
 *  IFX_CONST IfxClock_Mod_Config IfxClock_SampleModConfig = {
 *          IfxClock_ModEn_disabled,          // disable is default //enable / disable modulation
 *          IfxClock_ModulationAmplitude_0p5, // default 0 value  // specify the modulation amplitude %
 *
 *   // calibration configs
 *      IfxClock_CalEn_enabled,           // enable cal_en  // enable or disable calibration of modulation
 *       IfxClock_CalEn_enabled,           // enable ab_cal_en
 *      0,
 *
 *   // delays and xcorr avg config
 *       0,                                 /// 0 sys emc delay
 *      3,                                 // xcorr delay defaults to 3
 *      3,                                 // xcorr avg sel defaults to 3
 *       0                                  // Per EMC Delay
 *
 *  }
 *  // put this as part of the CCU configuration:
 *  IfxClock_sampleClockConfig.modulationConfig = &IfxClock_SampleModConfig;
 *
 *  // now initalize the CCU PLL and clock with the init function
 *  IfxClock_init(&IfxClock_sampleClockConfig)
 * \endcode
 *
 * \}
 * \}
 *
 * \defgroup IfxLld_Clock_Std_Ccu Clock Control Functions
 * \ingroup IfxLld_Clock_Std
 * \defgroup IfxLld_Clock_Std_Ccu_Operative Clock Control Operative Functions
 * \ingroup IfxLld_Clock_Std
 * \defgroup IfxLld_Clock_Std_Ccu_Configuration Clock Control Configuration Functions
 * \ingroup IfxLld_Clock_Std
 * \defgroup IfxLld_Clock_Std_Enum Enumerations
 * \ingroup IfxLld_Clock_Std
 * \defgroup IfxLld_Clock_Std_Ccu_Configuration Clock Control Configuration Structures
 * \ingroup IfxLld_Clock_Std
 */

#ifndef IFXCLOCK_H
#define IFXCLOCK_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxClock_cfg.h"
#if !defined(IFX_ILLD_PPU_USAGE)
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#endif
#if defined(IFX_ILLD_PPU_USAGE)
#include "Cpu/Std/IfxPpu_Intrinsics.h"
#endif
#include "IfxCpu_reg.h"
#include "IfxClock_reg.h"
#include "IfxEray_reg.h"
#include "Ap/Std/IfxApProt.h"
#include "Ap/Std/IfxApApu.h"
#include "_Utilities/Ifx_Assert.h"
#if !defined(IFX_ILLD_PPU_USAGE)
#include "Smu/Std/IfxSmu.h"
#endif
#if !defined(IFX_ILLD_PPU_USAGE)
#include "Wtu/Std/IfxWtu.h"
#endif

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief ~40uS max wait time
 */
#ifndef IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT
#define IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT     (0x1000U)
#endif

/** \brief x max wait time for PLL locking
 */
#ifndef IFXCLOCK_PLL_LOCK_TIMEOUT_COUNT
#define IFXCLOCK_PLL_LOCK_TIMEOUT_COUNT           (0xF000U)
#endif

/** \brief
 */
#ifndef IFXCLOCK_PLL_RAMPOSC_TIMEOUT_COUNT
#define IFXCLOCK_PLL_RAMPOSC_TIMEOUT_COUNT        (0x1FFFFFU)
#endif

/** \brief ~122uS max wait time for PLL power down/up state update
 */
#ifndef IFXCLOCK_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT
#define IFXCLOCK_SYSPLLSTAT_PWDSTAT_TIMEOUT_COUNT (0x3000U)
#endif

#define IFXCLOCK_LOOP_TIMEOUT_CHECK(tVar, tErr) \
    {                                           \
        if (((sint32)--tVar) <= 0)              \
        {                                       \
            tErr = (uint8)1;                    \
            break;                              \
        }                                       \
        else                                    \
        {                                       \
        }                                       \
    }

/** \brief Modulation frequency
 */
#define IFXCLOCK_MODULATION_FREQ_HZ               (3600000)

/** \brief x-correlation lower limit is set to 150
 */
#define IFXCLOCK_XCORR_LOWER_LIMIT                ((uint32)150)

/** \brief higher limit for XCORR is set to 350
 */
#define IFXCLOCK_XCORR_HIGHER_LIMIT               ((uint32)350)

/** \brief MODCFG shift value for SYSPLLCON2
 */
#define IFXCLOCK_MODCFG_DEFAULT_SHIFT             (10)

/** \brief MODCFG default value - for SYSPLLCON2[15:10]
 */
#define IFXCLOCK_MODCFG_DEFAULT_VAL               ((uint32)0x1D)

/** \brief get Rgain from MA and FDco
 */
#define IFXCLOCK_GET_RGAIN_NOM(MA, FDco)           ((2 * (MA / 100) * (FDco / IFXCLOCK_MODULATION_FREQ_HZ)))

/** \brief Get RGAin HEX from RGain Nominal value
 */
#define IFXCLOCK_GET_RGAIN_HEX(RGain_Nom)          ((uint16)((RGain_Nom * 32) + 0.5f))

/** \brief Get MODCFG from RGAIN_HEX
 */
#define IFXCLOCK_GET_MODCFG(RGain_Hex)             ((uint16)(IFXCLOCK_MODCFG_DEFAULT_VAL << IFXCLOCK_MODCFG_DEFAULT_SHIFT) | ((0x03FF) & (uint16)(RGain_Hex)))

/** \brief Get the Delta RnD Value
 */
#define IFXCLOCK_GET_DELTA_RANDD(RGain_Hex)        ((uint32)((RGain_Hex / 10) > 2 ? (RGain_Hex / 10) : 2))

/** \brief Get XCorr Nom value from FOsc and from the XGain
 */
#define IFXCLOCK_GET_XCORR_NOM(FOsc, RGain, XGain) ((1184.0f / FOsc) * RGain * XGain)

/** \brief Get XCorr hex value from XCORR nominal
 */
#define IFXCLOCK_GET_XCORR_HEX(XCorr_Nom)          ((uint32)(XCorr_Nom + 0.5f))

/** \brief Get XTOL value from the XCORR
 */
#define IFXCLOCK_GET_XTOL(XCorr)                   ((uint32)((XCorr / 20) > 10 ? (XCorr / 20) : 10))

/** \brief
 */
#ifndef IFXCLOCK_PLL_K2DIV_COUNT
#define IFXCLOCK_PLL_K2DIV_COUNT                     (6)
#endif

/** \brief Divider generic macro
 */
#define IFXCLOCK_DIVIDER_15                          (15)

/** \brief Divider generic macro
 */
#define IFXCLOCK_DIVIDER_1                           (1)

/** \brief 3 millisecond wait time for Crystal Osc to stabilize
 */
#ifndef IFXCLOCK_OSC_WAITTIME
#define IFXCLOCK_OSC_WAITTIME                        (0.003f)
#endif

/** \brief 10ns wait time for SysPLL k2 step
 */
#ifndef IFXCLOCK_SYSPLL_K2STEP_WAITTIME
#define IFXCLOCK_SYSPLL_K2STEP_WAITTIME              (0.00000001f)
#endif

/** \brief 1ms wait time after powering up SYSPLL
 */
#ifndef IFXCLOCK_SYSPLL_POWERUP_WAITTIME
#define IFXCLOCK_SYSPLL_POWERUP_WAITTIME             (0.001f)
#endif

/** \brief 1ms wait time after powering up PERPLL
 */
#ifndef IFXCLOCK_PERPLL_POWERUP_WAITTIME
#define IFXCLOCK_PERPLL_POWERUP_WAITTIME             (0.001f)
#endif

/** \brief 100 micro seconds wait time after LCK lock bit set
 */
#ifndef IFXCLOCK_CCUSTAT_LCKLOCK_WAITTIME
#define IFXCLOCK_CCUSTAT_LCKLOCK_WAITTIME            (0.0001f)
#endif

/** \brief 10 micro seconds wait time after LCK lock bit set
 */
#ifndef IFXCLOCK_CCUSTAT_LCK_WAITTIME
#define IFXCLOCK_CCUSTAT_LCK_WAITTIME                (0.00001f)
#endif

/** \brief System PLL KxPREDIV and KxDIV initial value
 */
#ifndef IFXCLOCK_SYSPLL_KXDIV_KXPREDIV_INITIAL_VALUE
#define IFXCLOCK_SYSPLL_KXDIV_KXPREDIV_INITIAL_VALUE (0x0000A111)
#endif

/** \brief Peripheral PLL KxPREDIV and KxDIV initial value
 */
#ifndef IFXCLOCK_PERPLL_KXDIV_KXPREDIV_INITIAL_VALUE
#define IFXCLOCK_PERPLL_KXDIV_KXPREDIV_INITIAL_VALUE (0x0011A111)
#endif

/** \brief 100 nano seconds wait time to ensure toggling of CAL_EN bit in CLOCK_SMODCON0
 */
#ifndef IFXCLOCK_MODULATION_CAL_EN_TOGGLE_WAIT_TIME
#define IFXCLOCK_MODULATION_CAL_EN_TOGGLE_WAIT_TIME  (0.0000001f)
#endif

/******************************************************************************/
/*------------------------------Type Definitions------------------------------*/
/******************************************************************************/

/** \brief Function pointer type for the hooks
 * \return None
 */
typedef void (*IfxClock_PllStepsFunctionHook)(void);

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Clock_Std_Enum
 * \{ */
/** \brief calibration enable
 */
typedef enum
{
    IfxClock_CalEn_disabled = 0,  /**< \brief disable calibration */
    IfxClock_CalEn_enabled  = 1   /**< \brief enable calibration */
} IfxClock_CalEn;

/** \brief divider mode selection for EXTCLK0
 */
typedef enum
{
    IfxClock_Clk0Mode_normal     = 0, /**< \brief Select normal mode */
    IfxClock_Clk0Mode_fractional = 1  /**< \brief Select fractional mode */
} IfxClock_Clk0Mode;

/** \brief clock line negation selection for EXTCLK1
 */
typedef enum
{
    IfxClock_Clk1Negation_inverted    = 0, /**< \brief Select inverted signal for EXTCLK1 */
    IfxClock_Clk1Negation_nonInverted = 1  /**< \brief Select non inverted signal for EXTCLK1 */
} IfxClock_Clk1Negation;

/** \brief External Clock Selection for EXTCLK0
 */
typedef enum
{
    IfxClock_ClkSel0_fBACK   = 0,  /**< \brief Select fBACK as EXTCLK0 */
    IfxClock_ClkSel0_fRAMP   = 1,  /**< \brief Select fRAMP as EXTCLK0 */
    IfxClock_ClkSel0_fOSC    = 2,  /**< \brief Select fOSC as EXTCLK0 */
    IfxClock_ClkSel0_fPLL0   = 3,  /**< \brief Select fPLL0 as EXTCLK0 */
    IfxClock_ClkSel0_fPLL1   = 4,  /**< \brief Select fPLL1 as EXTCLK0 */
    IfxClock_ClkSel0_fPLL2   = 5,  /**< \brief Select fPLL2 as EXTCLK0 */
    IfxClock_ClkSel0_fPLL3   = 6,  /**< \brief Select fPLL3 as EXTCLK0 */
    IfxClock_ClkSel0_fFRAC   = 7,  /**< \brief Select fFRAC as EXTCLK0 */
    IfxClock_ClkSel0_fSPB    = 8,  /**< \brief Select fSPB as EXTCLK0 */
    IfxClock_ClkSel0_fCPB    = 9,  /**< \brief Select fCPB as EXTCLK0 */
    IfxClock_ClkSel0_fTPB    = 10, /**< \brief Select fTPB as EXTCLK0 */
    IfxClock_ClkSel0_fSRI    = 11, /**< \brief Select fSRI as EXTCLK0 */
    IfxClock_ClkSel0_fFSI    = 12, /**< \brief Select fFSI as EXTCLK0 */
    IfxClock_ClkSel0_fSTM    = 14, /**< \brief Select fSTM as EXTCLK0 */
    IfxClock_ClkSel0_feGTM   = 16, /**< \brief Select feGTM as EXTCLK0 */
    IfxClock_ClkSel0_fGETH   = 17, /**< \brief Select fGETH as EXTCLK0 */
    IfxClock_ClkSel0_fMCANH  = 18, /**< \brief Select fMCANH as EXTCLK0 */
    IfxClock_ClkSel0_fLETH   = 22, /**< \brief Select fLETH as EXTCLK0 */
    IfxClock_ClkSel0_fPPU    = 23, /**< \brief Select fPPU as EXTCLK0 */
    IfxClock_ClkSel0_fCANXLH = 24  /**< \brief Select fCANXLH as EXTCLK0 */
} IfxClock_ClkSel0;

/** \brief External Clock Selection for EXTCLK1
 */
typedef enum
{
    IfxClock_ClkSel1_fBACK    = 0,   /**< \brief Select fBACK as EXTCLK1 */
    IfxClock_ClkSel1_fRAMP    = 1,   /**< \brief Select fRAMP as EXTCLK1 */
    IfxClock_ClkSel1_fOSC     = 2,   /**< \brief Select fOSC as EXTCLK1 */
    IfxClock_ClkSel1_fPLL0    = 3,   /**< \brief Select fPLL0 as EXTCLK1 */
    IfxClock_ClkSel1_fPLL1    = 4,   /**< \brief Select fPLL1 as EXTCLK1 */
    IfxClock_ClkSel1_fPLL2    = 5,   /**< \brief Select fPLL2 as EXTCLK1 */
    IfxClock_ClkSel1_fPLL3    = 6,   /**< \brief Select fPLL3 as EXTCLK1 */
    IfxClock_ClkSel1_fDIV1    = 7,   /**< \brief Select fDIV1 as EXTCLK1 */
    IfxClock_ClkSel1_fMT0     = 9,   /**< \brief Select fMT0 as EXTCLK1 */
    IfxClock_ClkSel1_fERAY    = 10,  /**< \brief Select fERAY as EXTCLK1 */
    IfxClock_ClkSel1_fMCAN    = 11,  /**< \brief Select fMCAN as EXTCLK1 */
    IfxClock_ClkSel1_fADC     = 12,  /**< \brief Select fADC as EXTCLK1 */
    IfxClock_ClkSel1_fQSPI    = 13,  /**< \brief Select fQSPI as EXTCLK1 */
    IfxClock_ClkSel1_fMSC     = 14,  /**< \brief Select fMSC as EXTCLK1 */
    IfxClock_ClkSel1_fI2C     = 15,  /**< \brief Select fI2C as EXTCLK1 */
    IfxClock_ClkSel1_fASCLINF = 16,  /**< \brief Select fASCLINF as EXTCLK1 */
    IfxClock_ClkSel1_fASCLINS = 17,  /**< \brief Select fASCLINS as EXTCLK1 */
    IfxClock_ClkSel1_fXSPI    = 19,  /**< \brief Select fXSPI as EXTCLK1 */
    IfxClock_ClkSel1_fSDMMC   = 20,  /**< \brief Select fSDMMC as EXTCLK1 */
    IfxClock_ClkSel1_fPPU     = 21,  /**< \brief Select fPPU as EXTCLK1 */
    IfxClock_ClkSel1_fCANXL   = 22,  /**< \brief Select fCANXL as EXTCLK1 */
    IfxClock_ClkSel1_fLETH100 = 23,  /**< \brief Select fLETH100 as EXTCLK1 */
    IfxClock_ClkSel1_fXSPISL  = 24   /**< \brief Select fXSPISL as EXTCLK1 */
} IfxClock_ClkSel1;

/** \brief Selects if in case of emergency the clock select is switches to fBACK or fRAMP
 * Register : CCUCON.B.EMSWSEL ; 0: RAMP, 1: BACK
 */
typedef enum
{
    IfxClock_EmergencySwitchSelect_ramp = 0,  /**< \brief emergency the clock select : Ramp */
    IfxClock_EmergencySwitchSelect_back = 1   /**< \brief emergency the clock select : Backup clock */
} IfxClock_EmergencySwitchSelect;

/** \brief clock source selection
 */
typedef enum
{
    IfxClock_Fsource_0 = 0,      /**< \brief fSource0  */
    IfxClock_Fsource_1,          /**< \brief fSource1  */
    IfxClock_Fsource_2,          /**< \brief fSource2  */
    IfxClock_Fsource_3           /**< \brief fSource3  */
} IfxClock_Fsource;

/** \brief PLL0 Divider Select: defines the pre-dividing factor in front of the K2-Divider
 *  Register : SYSPLLCON0.B.K2PREDIV ;
 *  00B DIVBY1_0 / The 1.0 pre-divider between DCO and K2-Divider is selected for PLL0 . Hence, the resulting divider factor in front of the K2-Divider is fDCO / 1.0.
 *  01B DIVBY2_0 / The 2.0 pre-divider between DCO and K2-Divider is selected for PLL0 . Hence, the resulting divider factor in front of the K2-Divider is fDCO / 2.0.
 *  10B DIVBY1_2 / The 1.2 pre-divider between DCO and K2-Divider is selected for PLL0 . Hence, the resulting divider factor in front of the K2-Divider is fDCO / 1.2.
 *  11B DIVBY1_6 / The 1.6 pre-divider between DCO and K2-Divider is selected for PLL0 . Hence, the resulting divider factor in front of the K2-Divider is fDCO / 1.6.
 */
typedef enum
{
    IfxClock_K2PreDivider_divBy1_0 = 0,  /**< \brief The 1.0 pre-divider between DCO and K2-Divider is selected for PLL0 */
    IfxClock_K2PreDivider_divBy2_0 = 1,  /**< \brief The 2.0 pre-divider between DCO and K2-Divider is selected for PLL0 */
    IfxClock_K2PreDivider_divBy1_2 = 2,  /**< \brief The 1.2 pre-divider between DCO and K2-Divider is selected for PLL0 */
    IfxClock_K2PreDivider_divBy1_6 = 3   /**< \brief The 1.6 pre-divider between DCO and K2-Divider is selected for PLL0 */
} IfxClock_K2PreDivider;

/** \brief MODULE_CLOCK.PLLCON1.B.K2DIV, specifies the K2-Divider
 */
typedef enum
{
    IfxClock_K2divider_1 = 0,      /**< \brief K2-Divider 1  */
    IfxClock_K2divider_2,          /**< \brief K2-Divider 2  */
    IfxClock_K2divider_3,          /**< \brief K2-Divider 3  */
    IfxClock_K2divider_4,          /**< \brief K2-Divider 4  */
    IfxClock_K2divider_5,          /**< \brief K2-Divider 5  */
    IfxClock_K2divider_6,          /**< \brief K2-Divider 6  */
    IfxClock_K2divider_7,          /**< \brief K2-Divider 7  */
    IfxClock_K2divider_8,          /**< \brief K2-Divider 8  */
    IfxClock_K2divider_9,          /**< \brief K2-Divider 9  */
    IfxClock_K2divider_10,         /**< \brief K2-Divider 10  */
    IfxClock_K2divider_11,         /**< \brief K2-Divider 11  */
    IfxClock_K2divider_12,         /**< \brief K2-Divider 12  */
    IfxClock_K2divider_13,         /**< \brief K2-Divider 13  */
    IfxClock_K2divider_14,         /**< \brief K2-Divider 14  */
    IfxClock_K2divider_15,         /**< \brief K2-Divider 15  */
    IfxClock_K2divider_16          /**< \brief K2-Divider 16  */
} IfxClock_K2divider;

/** \brief Defines the pre-dividing factor in front of the K3-Divider
 *  Register : PERPLLCON1.B.K3PREDIV;
 *  0H DIVBY1_0 / The 1.0 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.0.
 *  1H DIVBY1_1 / The 1.1 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.1.
 *  2H DIVBY1_2 / The 1.2 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.2.
 *  4H DIVBY1_4 / The 1.4 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.4.
 *  6H DIVBY1_6 / The 1.6 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.6.
 *  7H DIVBY1_7 / The 1.0 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.7.
 *  AH DIVBY2_0 / The 2.0 pre-divider between DCO and K3-Divider is selected.
 * Hence, the resulting divider factor in front of the K3-Divider is fDCO / 2.0.
 */
typedef enum
{
    IfxClock_K3PreDivider_divBy1_0 = 0,  /**< \brief The 1.0 pre-divider between DCO and K3-Divider is selected for PLL0 */
    IfxClock_K3PreDivider_divBy1_1 = 1,  /**< \brief The 1.1 pre-divider between DCO and K3-Divider is selected for PLL0 */
    IfxClock_K3PreDivider_divBy1_2 = 2,  /**< \brief The 1.2 pre-divider between DCO and K3-Divider is selected for PLL0 */
    IfxClock_K3PreDivider_divBy1_4 = 4,  /**< \brief The 1.4 pre-divider between DCO and K3-Divider is selected for PLL0 */
    IfxClock_K3PreDivider_divBy1_6 = 6,  /**< \brief The 1.6 pre-divider between DCO and K3-Divider is selected for PLL0 */
    IfxClock_K3PreDivider_divBy1_7 = 7,  /**< \brief The 1.7 pre-divider between DCO and K3-Divider is selected for PLL0 */
    IfxClock_K3PreDivider_divBy2_0 = 10  /**< \brief The 2.0 pre-divider between DCO and K3-Divider is selected for PLL0 */
} IfxClock_K3PreDivider;

/** \brief MODULE_CLOCK.PLLCON1.B.K3DIV, specifies the K3-Divider
 */
typedef enum
{
    IfxClock_K3divider_1 = 0,      /**< \brief K3-Divider 1  */
    IfxClock_K3divider_2,          /**< \brief K3-Divider 2  */
    IfxClock_K3divider_3,          /**< \brief K3-Divider 3  */
    IfxClock_K3divider_4,          /**< \brief K3-Divider 4  */
    IfxClock_K3divider_5,          /**< \brief K3-Divider 5  */
    IfxClock_K3divider_6,          /**< \brief K3-Divider 6  */
    IfxClock_K3divider_7,          /**< \brief K3-Divider 7  */
    IfxClock_K3divider_8           /**< \brief K3-Divider 8  */
} IfxClock_K3divider;

/** \brief PLL3 Divider Select: defines the pre-dividing factor in front of the K4-Divider
 *  Register : PERPLLCON0.B.K4PREDIV ;
 *  00B DIVBY1_0 / The 1.0 pre-divider between DCO and K3-Divider is selected for PLL2 . Hence, the resulting divider factor in front of the K3-Divider is fDCO / 1.0.
 *  01B DIVBY2_0 / The 2.0 pre-divider between DCO and K4-Divider is selected for PLL3 . Hence, the resulting divider factor in front of the K4-Divider is fDCO / 2.0.
 *  10B DIVBY1_2 / The 1.2 pre-divider between DCO and K4-Divider is selected for PLL3 . Hence, the resulting divider factor in front of the K4-Divider is fDCO / 1.2.
 *  11B DIVBY1_6 / The 1.6 pre-divider between DCO and K4-Divider is selected for PLL3 . Hence, the resulting divider factor in front of the K4-Divider is fDCO / 1.6
 */
typedef enum
{
    IfxClock_K4PreDivider_divBy1_0 = 0,  /**< \brief The 1.0 pre-divider between DCO and K4-Divider is selected for PLL3 */
    IfxClock_K4PreDivider_divBy2_0 = 1,  /**< \brief The 2.0 pre-divider between DCO and K4-Divider is selected for PLL3 */
    IfxClock_K4PreDivider_divBy1_2 = 2,  /**< \brief The 1.2 pre-divider between DCO and K4-Divider is selected for PLL3 */
    IfxClock_K4PreDivider_divBy1_6 = 3   /**< \brief The 1.6 pre-divider between DCO and K4-Divider is selected for PLL3 */
} IfxClock_K4PreDivider;

/** \brief MODULE_CLOCK.PLLCON1.B.K4DIV, specifies the K4-Divider
 */
typedef enum
{
    IfxClock_K4divider_1 = 0,      /**< \brief K4-Divider 1  */
    IfxClock_K4divider_2,          /**< \brief K4-Divider 2  */
    IfxClock_K4divider_3,          /**< \brief K4-Divider 3  */
    IfxClock_K4divider_4,          /**< \brief K4-Divider 4  */
    IfxClock_K4divider_5,          /**< \brief K4-Divider 5  */
    IfxClock_K4divider_6,          /**< \brief K4-Divider 6  */
    IfxClock_K4divider_7,          /**< \brief K4-Divider 7  */
    IfxClock_K4divider_8           /**< \brief K4-Divider 8  */
} IfxClock_K4divider;

/** \brief Low Power Division Ratios.
 * It overwrites the current divider settings of the listed frequencies to enable a low power mode of operation. The selected LPDIV setting is valid for all clocks derived from fXXX with XXX = SPB, SRI, FSI, GETH, CPB, GTM and eGTM.
 * LPDIV does only effect enabled clocks, i.e. XXXDIV = 0 will not be changed
 */
typedef enum
{
    IfxClock_LowPowerDivRatio_divBy1   = 0, /**< \brief fXXX controlled by the related SYSCCUCON0/1 bit fields */
    IfxClock_LowPowerDivRatio_divBy120 = 1  /**< \brief fXXX = fsource0 / 120 (if previously enabled) */
} IfxClock_LowPowerDivRatio;

/** \brief modulation enable
 */
typedef enum
{
    IfxClock_ModEn_disabled = 0,  /**< \brief disable modulation */
    IfxClock_ModEn_enabled  = 1   /**< \brief enable modulation */
} IfxClock_ModEn;

/** \brief ENUM for MA (%) values
 */
typedef enum
{
    IfxClock_ModulationAmplitude_0p5 = 0,      /**< \brief 0.5%  */
    IfxClock_ModulationAmplitude_1p0,          /**< \brief 1.0%  */
    IfxClock_ModulationAmplitude_1p25,         /**< \brief 1.25%  */
    IfxClock_ModulationAmplitude_1p5,          /**< \brief 1.5%  */
    IfxClock_ModulationAmplitude_2p0,          /**< \brief 2%  */
    IfxClock_ModulationAmplitude_2p5,          /**< \brief 2.5%  */
    IfxClock_ModulationAmplitude_count,        /**< \brief range  */
} IfxClock_ModulationAmplitude;

/** \brief MODULE_CLOCK.PLLCON0.B.NDIV, specifies the N-Divider
 */
typedef enum
{
    IfxClock_Ndivider_1 = 0,      /**< \brief  N-divider 1  */
    IfxClock_Ndivider_2,          /**< \brief  N-divider 2  */
    IfxClock_Ndivider_3,          /**< \brief  N-divider 3  */
    IfxClock_Ndivider_4,          /**< \brief  N-divider 4  */
    IfxClock_Ndivider_5,          /**< \brief  N-divider 5  */
    IfxClock_Ndivider_6,          /**< \brief  N-divider 6  */
    IfxClock_Ndivider_7,          /**< \brief  N-divider 7  */
    IfxClock_Ndivider_8,          /**< \brief  N-divider 8  */
    IfxClock_Ndivider_9,          /**< \brief  N-divider 9  */
    IfxClock_Ndivider_10,         /**< \brief  N-divider 10  */
    IfxClock_Ndivider_11,         /**< \brief  N-divider 11  */
    IfxClock_Ndivider_12,         /**< \brief  N-divider 12  */
    IfxClock_Ndivider_13,         /**< \brief  N-divider 13  */
    IfxClock_Ndivider_14,         /**< \brief  N-divider 14  */
    IfxClock_Ndivider_15,         /**< \brief  N-divider 15  */
    IfxClock_Ndivider_16,         /**< \brief  N-divider 16  */
    IfxClock_Ndivider_17,         /**< \brief  N-divider 17  */
    IfxClock_Ndivider_18,         /**< \brief  N-divider 18  */
    IfxClock_Ndivider_19,         /**< \brief  N-divider 19  */
    IfxClock_Ndivider_20,         /**< \brief  N-divider 20  */
    IfxClock_Ndivider_21,         /**< \brief  N-divider 21  */
    IfxClock_Ndivider_22,         /**< \brief  N-divider 22  */
    IfxClock_Ndivider_23,         /**< \brief  N-divider 23  */
    IfxClock_Ndivider_24,         /**< \brief  N-divider 24  */
    IfxClock_Ndivider_25,         /**< \brief  N-divider 25  */
    IfxClock_Ndivider_26,         /**< \brief  N-divider 26  */
    IfxClock_Ndivider_27,         /**< \brief  N-divider 27  */
    IfxClock_Ndivider_28,         /**< \brief  N-divider 28  */
    IfxClock_Ndivider_29,         /**< \brief  N-divider 29  */
    IfxClock_Ndivider_30,         /**< \brief  N-divider 30  */
    IfxClock_Ndivider_31,         /**< \brief  N-divider 31  */
    IfxClock_Ndivider_32,         /**< \brief  N-divider 32  */
    IfxClock_Ndivider_33,         /**< \brief  N-divider 33  */
    IfxClock_Ndivider_34,         /**< \brief  N-divider 34  */
    IfxClock_Ndivider_35,         /**< \brief  N-divider 35  */
    IfxClock_Ndivider_36,         /**< \brief  N-divider 36  */
    IfxClock_Ndivider_37,         /**< \brief  N-divider 37  */
    IfxClock_Ndivider_38,         /**< \brief  N-divider 38  */
    IfxClock_Ndivider_39,         /**< \brief  N-divider 39  */
    IfxClock_Ndivider_40,         /**< \brief  N-divider 40  */
    IfxClock_Ndivider_41,         /**< \brief  N-divider 41  */
    IfxClock_Ndivider_42,         /**< \brief  N-divider 42  */
    IfxClock_Ndivider_43,         /**< \brief  N-divider 43  */
    IfxClock_Ndivider_44,         /**< \brief  N-divider 44  */
    IfxClock_Ndivider_45,         /**< \brief  N-divider 45  */
    IfxClock_Ndivider_46,         /**< \brief  N-divider 46  */
    IfxClock_Ndivider_47,         /**< \brief  N-divider 47  */
    IfxClock_Ndivider_48,         /**< \brief  N-divider 48  */
    IfxClock_Ndivider_49,         /**< \brief  N-divider 49  */
    IfxClock_Ndivider_50,         /**< \brief  N-divider 50  */
    IfxClock_Ndivider_51,         /**< \brief  N-divider 51  */
    IfxClock_Ndivider_52,         /**< \brief  N-divider 52  */
    IfxClock_Ndivider_53,         /**< \brief  N-divider 53  */
    IfxClock_Ndivider_54,         /**< \brief  N-divider 54  */
    IfxClock_Ndivider_55,         /**< \brief  N-divider 55  */
    IfxClock_Ndivider_56,         /**< \brief  N-divider 56  */
    IfxClock_Ndivider_57,         /**< \brief  N-divider 57  */
    IfxClock_Ndivider_58,         /**< \brief  N-divider 58  */
    IfxClock_Ndivider_59,         /**< \brief  N-divider 59  */
    IfxClock_Ndivider_60,         /**< \brief  N-divider 60  */
    IfxClock_Ndivider_61,         /**< \brief  N-divider 61  */
    IfxClock_Ndivider_62,         /**< \brief  N-divider 62  */
    IfxClock_Ndivider_63,         /**< \brief  N-divider 63  */
    IfxClock_Ndivider_64,         /**< \brief  N-divider 64  */
    IfxClock_Ndivider_65,         /**< \brief  N-divider 65  */
    IfxClock_Ndivider_66,         /**< \brief  N-divider 66  */
    IfxClock_Ndivider_67,         /**< \brief  N-divider 67  */
    IfxClock_Ndivider_68,         /**< \brief  N-divider 68  */
    IfxClock_Ndivider_69,         /**< \brief  N-divider 69  */
    IfxClock_Ndivider_70,         /**< \brief  N-divider 70  */
    IfxClock_Ndivider_71,         /**< \brief  N-divider 71  */
    IfxClock_Ndivider_72,         /**< \brief  N-divider 72  */
    IfxClock_Ndivider_73,         /**< \brief  N-divider 73  */
    IfxClock_Ndivider_74,         /**< \brief  N-divider 74  */
    IfxClock_Ndivider_75,         /**< \brief  N-divider 75  */
    IfxClock_Ndivider_76,         /**< \brief  N-divider 76  */
    IfxClock_Ndivider_77,         /**< \brief  N-divider 77  */
    IfxClock_Ndivider_78,         /**< \brief  N-divider 78  */
    IfxClock_Ndivider_79,         /**< \brief  N-divider 79  */
    IfxClock_Ndivider_80,         /**< \brief  N-divider 80  */
    IfxClock_Ndivider_81,         /**< \brief  N-divider 81  */
    IfxClock_Ndivider_82,         /**< \brief  N-divider 82  */
    IfxClock_Ndivider_83,         /**< \brief  N-divider 83  */
    IfxClock_Ndivider_84,         /**< \brief  N-divider 84  */
    IfxClock_Ndivider_85,         /**< \brief  N-divider 85  */
    IfxClock_Ndivider_86,         /**< \brief  N-divider 86  */
    IfxClock_Ndivider_87,         /**< \brief  N-divider 87  */
    IfxClock_Ndivider_88,         /**< \brief  N-divider 88  */
    IfxClock_Ndivider_89,         /**< \brief  N-divider 89  */
    IfxClock_Ndivider_90,         /**< \brief  N-divider 90  */
    IfxClock_Ndivider_91,         /**< \brief  N-divider 91  */
    IfxClock_Ndivider_92,         /**< \brief  N-divider 92  */
    IfxClock_Ndivider_93,         /**< \brief  N-divider 93  */
    IfxClock_Ndivider_94,         /**< \brief  N-divider 94  */
    IfxClock_Ndivider_95,         /**< \brief  N-divider 95  */
    IfxClock_Ndivider_96,         /**< \brief  N-divider 96  */
    IfxClock_Ndivider_97,         /**< \brief  N-divider 97  */
    IfxClock_Ndivider_98,         /**< \brief  N-divider 98  */
    IfxClock_Ndivider_99,         /**< \brief  N-divider 99  */
    IfxClock_Ndivider_100,        /**< \brief  N-divider 100  */
    IfxClock_Ndivider_101,        /**< \brief  N-divider 101  */
    IfxClock_Ndivider_102,        /**< \brief  N-divider 102  */
    IfxClock_Ndivider_103,        /**< \brief  N-divider 103  */
    IfxClock_Ndivider_104,        /**< \brief  N-divider 104  */
    IfxClock_Ndivider_105,        /**< \brief  N-divider 105  */
    IfxClock_Ndivider_106,        /**< \brief  N-divider 106  */
    IfxClock_Ndivider_107,        /**< \brief  N-divider 107  */
    IfxClock_Ndivider_108,        /**< \brief  N-divider 108  */
    IfxClock_Ndivider_109,        /**< \brief  N-divider 109  */
    IfxClock_Ndivider_110,        /**< \brief  N-divider 110  */
    IfxClock_Ndivider_111,        /**< \brief  N-divider 111  */
    IfxClock_Ndivider_112,        /**< \brief  N-divider 112  */
    IfxClock_Ndivider_113,        /**< \brief  N-divider 113  */
    IfxClock_Ndivider_114,        /**< \brief  N-divider 114  */
    IfxClock_Ndivider_115,        /**< \brief  N-divider 115  */
    IfxClock_Ndivider_116,        /**< \brief  N-divider 116  */
    IfxClock_Ndivider_117,        /**< \brief  N-divider 117  */
    IfxClock_Ndivider_118,        /**< \brief  N-divider 118  */
    IfxClock_Ndivider_119,        /**< \brief  N-divider 119  */
    IfxClock_Ndivider_120,        /**< \brief  N-divider 120  */
    IfxClock_Ndivider_121,        /**< \brief  N-divider 121  */
    IfxClock_Ndivider_122,        /**< \brief  N-divider 122  */
    IfxClock_Ndivider_123,        /**< \brief  N-divider 123  */
    IfxClock_Ndivider_124,        /**< \brief  N-divider 124  */
    IfxClock_Ndivider_125,        /**< \brief  N-divider 125  */
    IfxClock_Ndivider_126,        /**< \brief  N-divider 126  */
    IfxClock_Ndivider_127,        /**< \brief  N-divider 127  */
    IfxClock_Ndivider_128         /**< \brief  N-divider 128  */
} IfxClock_Ndivider;

/** \brief MODULE_CLOCK.PLLCON0.B.PDIV, specifies the P-Divider
 */
typedef enum
{
    IfxClock_Pdivider_1 = 0,      /**< \brief  P-divider 1  */
    IfxClock_Pdivider_2,          /**< \brief  P-divider 2  */
    IfxClock_Pdivider_3,          /**< \brief  P-divider 3  */
    IfxClock_Pdivider_4,          /**< \brief  P-divider 4  */
    IfxClock_Pdivider_5,          /**< \brief  P-divider 5  */
    IfxClock_Pdivider_6,          /**< \brief  P-divider 6  */
    IfxClock_Pdivider_7,          /**< \brief  P-divider 7  */
    IfxClock_Pdivider_8           /**< \brief  P-divider 8  */
} IfxClock_Pdivider;

/** \brief selects the clock source that is used for the clock generation of fsrc1 and fsource2/3
 * Register : CCUCON.B.CLKSELP ;
 * 0: PLL / fsrc1 = fPLL1; fsource2 = fPLL2; fsource3 = fPLL3
 * 1: BACK / fBACK is used as clock source for fsrc1, fsource2, and fsource3
 */
typedef enum
{
    IfxClock_PerClockSourceSelect_pll  = 0, /**< \brief Peripheral Clock Source select : pll */
    IfxClock_PerClockSourceSelect_back = 1  /**< \brief Peripheral Clock Source select : Backup clock */
} IfxClock_PerClockSourceSelect;

/** \brief selects the primary clock source for the System PLL
 * Register : CCUCON.B.INSEL ;
 * 0: BACK / back-up clock is used as clock source
 * 1: OSC0 / fOSC0 is used as clock source
 * 2: SYSCLK / SYSCLK pin is used as clock source
 * 3: fOSC_F is used as clock source
 */
typedef enum
{
    IfxClock_PllInputClockSelection_back    = 0,  /**< \brief PLL Clock Source select : Backup clock */
    IfxClock_PllInputClockSelection_fOsc0   = 1,  /**< \brief PLL Clock Source select : XTAL / fosc0 */
    IfxClock_PllInputClockSelection_fSysclk = 2,  /**< \brief PLL Clock Source select : SYS clock (fosc1) */
    IfxClock_PllInputClockSelection_fOsc_f  = 3   /**< \brief PLL Clock Source select : XTAL / fosc_f */
} IfxClock_PllInputClockSelection;

/** \brief reflect the ramping frequency status of the ramping oscillator. They automatically change during a ramp-up/down sequence.
 * Register : RAMPSTAT.B.FSTAT ;
 * 00B InBet / The ramping oscillator's output frequency is between the base frequency and the upper frequency limit.
 * 01B AtBase / The ramping oscillator's output frequency equals the base frequency which is 100 MHz.
 * 10B AtTop / The ramping oscillator's output frequency equals the upper frequency limit.
 */
typedef enum
{
    IfxClock_RampFreqStatus_inBet  = 0,  /**< \brief The ramping oscillator's output frequency is between the base frequency and the upper frequency limit */
    IfxClock_RampFreqStatus_atBase = 1,  /**< \brief The ramping oscillator's output frequency equals the base frequency which is 100 MHz */
    IfxClock_RampFreqStatus_atTop  = 2   /**< \brief The ramping oscillator's output frequency equals the upper frequency limit. */
} IfxClock_RampFreqStatus;

/** \brief used to power-up/down the Ramping Oscillator.
 * Register : RAMPCON.B.PWR ; RAMPSTAT.B.ACTIVE
 * 0B power down
 * 1B power up
 */
typedef enum
{
    IfxClock_RampPower_powerDown = 0,  /**< \brief Power down ramping Osc */
    IfxClock_RampPower_powerUp   = 1   /**< \brief power up ramping osc */
} IfxClock_RampPower;

/** \brief These will direct a ramping sequence according to its control parameters (UFL, SZ, WAIT).
 * Register : RAMPCON.B.CMD ;
 * 000B Idle / Idle, do nothing, actual frequency is kept constant.
 * 001B RampUp / Ramp-up until the upper frequency limit has been reached.
 * 010B RampDown / Ramp-down until the base frequency has been reached.
 * 011B Stop / Stop/pause ramping, actual frequency is kept constant.
 * 100B Reset / Reset, stop ramping (if in progress) and set the oscillator to its base frequency (=100Mhz).
 */
typedef enum
{
    IfxClock_RampSeqCmd_idle     = 0,  /**< \brief Idle, actual frequency is kept constant. */
    IfxClock_RampSeqCmd_rampUp   = 1,  /**< \brief Ramp-up until the upper frequency limit has been reached */
    IfxClock_RampSeqCmd_rampDown = 2,  /**< \brief Ramp-down until the base frequency has been reached */
    IfxClock_RampSeqCmd_stop     = 3,  /**< \brief Stop/pause ramping, actual frequency is kept constant */
    IfxClock_RampSeqCmd_train    = 4   /**< \brief Execute training sequence */
} IfxClock_RampSeqCmd;

/** \brief Status bits to reflect the current state of the ramping sequencer
 * Register : RAMPSTAT.B.SSTAT ;
 * 00B Idle / Frequency constant, not changing
 * 01B RampUp / Frequency increasing
 * 10B RampDown / Frequency decreasing
 */
typedef enum
{
    IfxClock_RampSeqStatus_idle     = 0,  /**< \brief Frequency constant, not changing */
    IfxClock_RampSeqStatus_rampUp   = 1,  /**< \brief Frequency increasing */
    IfxClock_RampSeqStatus_rampDown = 2,  /**< \brief Frequency decreasing */
    IfxClock_RampSeqStatus_training = 3   /**< \brief Training */
} IfxClock_RampSeqStatus;

/** \brief enum for SPI Slave Select
 */
typedef enum
{
    IfxClock_SpiSlaveSelect_0 = 0,  /**< \brief 0 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_1 = 1,  /**< \brief 1 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_2 = 2,  /**< \brief 2 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_3 = 3,  /**< \brief 3 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_4 = 4,  /**< \brief 4 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_5 = 5,  /**< \brief 5 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_6 = 6,  /**< \brief 6 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_7 = 7,  /**< \brief 7 SPI Slave Sel */
    IfxClock_SpiSlaveSelect_8 = 8,  /**< \brief 8 SPI Slave Sel 7/DCCU0-7 */
    IfxClock_SpiSlaveSelect_9 = 9   /**< \brief 9 SPI Slave Sel PCCU */
} IfxClock_SpiSlaveSelect;

/** \brief selects the clock source that is used for the clock generation of fsource0
 * Register : CCUCON.B.CLKSELS ;
 * 0: PLL / fPLL0 is used as clock source fsource0
 * 1: BACK / fBACKis used as clock source fsource0
 * 2: RAMP / fRAMP is used as clock source fsource0
 */
typedef enum
{
    IfxClock_SysClockSourceSelect_pll  = 0,  /**< \brief System Clock Source select : pll */
    IfxClock_SysClockSourceSelect_back = 1,  /**< \brief System Clock Source select : Backup clock */
    IfxClock_SysClockSourceSelect_ramp = 2   /**< \brief System Clock Source select : Ramp clock */
} IfxClock_SysClockSourceSelect;

/** \brief trap request type
 */
typedef enum
{
    IfxClock_Traprequest_esr0 = 0,  /**< \brief external service request 0 */
    IfxClock_Traprequest_esr1,      /**< \brief external service request 1 */
    IfxClock_Traprequest_trap2,     /**< \brief trap2 */
    IfxClock_Traprequest_smu        /**< \brief safety management unit */
} IfxClock_Traprequest;

/** \brief enum for XGain values
 */
typedef enum
{
    IfxClock_XGain_00    = 0, /**< \brief 0 */
    IfxClock_XGain_01    = 1, /**< \brief 0 */
    IfxClock_XGain_0p25  = 2, /**< \brief 0.25 */
    IfxClock_XGain_0p5   = 3, /**< \brief 0.5 */
    IfxClock_XGain_1p0   = 4, /**< \brief 1.0 */
    IfxClock_XGain_2p0   = 5, /**< \brief 2.0 */
    IfxClock_XGain_4p0   = 6, /**< \brief 4.0 */
    IfxClock_XGain_count = 7  /**< \brief range of xgain values */
} IfxClock_XGain;

/** \} */

/** \brief Enum for PERPLL FM MA (%) values
 */
typedef enum
{
    IfxClock_PerPllModulationAmplitude_0p01  = 0,  /**< \brief 0.01% */
    IfxClock_PerPllModulationAmplitude_0p02  = 1,  /**< \brief 0.02% */
    IfxClock_PerPllModulationAmplitude_0p03  = 2,  /**< \brief 0.03% */
    IfxClock_PerPllModulationAmplitude_0p04  = 3,  /**< \brief 0.04% */
    IfxClock_PerPllModulationAmplitude_0p05  = 4,  /**< \brief 0.05% */
    IfxClock_PerPllModulationAmplitude_0p06  = 5,  /**< \brief 0.06% */
    IfxClock_PerPllModulationAmplitude_0p07  = 6,  /**< \brief 0.07% */
    IfxClock_PerPllModulationAmplitude_0p08  = 7,  /**< \brief 0.08% */
    IfxClock_PerPllModulationAmplitude_0p09  = 8,  /**< \brief 0.09% */
    IfxClock_PerPllModulationAmplitude_0p10  = 9,  /**< \brief 0.10% */
    IfxClock_PerPllModulationAmplitude_0p11  = 10, /**< \brief 0.11% */
    IfxClock_PerPllModulationAmplitude_0p12  = 11, /**< \brief 0.12% */
    IfxClock_PerPllModulationAmplitude_0p13  = 12, /**< \brief 0.13% */
    IfxClock_PerPllModulationAmplitude_0p14  = 13, /**< \brief 0.14% */
    IfxClock_PerPllModulationAmplitude_0p15  = 14, /**< \brief 0.15% */
    IfxClock_PerPllModulationAmplitude_count = 15  /**< \brief range */
} IfxClock_PerPllModulationAmplitude;

/** \brief XSPISLDIV divider values
 */
typedef enum
{
    IfxClock_Xspisldiv_1 = 1,  /**< \brief XSPISL divider value is 0 */
    IfxClock_Xspisldiv_2 = 2,  /**< \brief XSPISL divider reload value is 2 */
    IfxClock_Xspisldiv_4 = 4   /**< \brief XSPISL divider reload value is 4 */
} IfxClock_Xspisldiv;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Clock_Std_Ccu_Configuration
 * \{ */
/** \brief Configuration structure type for CCUCON registers.
 */
typedef struct
{
    uint32 value;       /**< \brief CCUCON Register value to be updated. */
    uint32 mask;        /**< \brief CCUCON Mask to select the bit fields to be updated. */
} IfxClock_CcuconRegConfig;

/** \} */

/** \addtogroup IfxLld_Clock_Std_Ccu_Configuration
 * \{ */
/** \brief Configuration structure type for all the CCUCON registers to configure clock distribution.
 */
typedef struct
{
    IfxClock_CcuconRegConfig sysccucon0;       /**< \brief CCUCON0 Register configuration */
    IfxClock_CcuconRegConfig sysccucon1;       /**< \brief CCUCON1 Register configuration */
    IfxClock_CcuconRegConfig perccucon0;       /**< \brief PER CCUCON0 Register configuration */
    IfxClock_CcuconRegConfig perccucon1;       /**< \brief PER CCUCON1 Register configuration */
} IfxClock_ClockDistributionConfig;

/** \brief Configuration structure type for the Flash waitstate configuration.
 */
typedef struct
{
    uint16 dFlashWaitCycles;       /**< \brief dFlashWaitCycles */
    uint16 pFlashWaitCycles;       /**< \brief pFlashWaitCycles */
} IfxClock_FlashWaitstateConfig;

/** \brief system pll modulation config
 */
typedef struct
{
    IfxClock_ModEn               Mod_Enable;       /**< \brief modulation enable */
    IfxClock_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
} IfxClock_Mod_Config;

/** \brief Configuration structure type for OSCCON registers.
 */
typedef struct
{
    uint32 value;       /**< \brief OSCON Register value to be updated. */
    uint32 mask;        /**< \brief OSCON Mask to select the bit fields to be updated. */
} IfxClock_OscconRegConfig;

/** \brief Configuration structure type for the Per Pll config
 *   This structure must be used to configure the P, N , K2, K3,K4 divider dividers.
 *   fPLL1 = N * fIN / P * K2 * 1. 0 -> K2PREDIV = 0
 *   fPLL1 = N * fIN / P * K2 * 2. 0 -> K2PREDIV = 1
 *   fPLL1 = N * fIN / P * K2 * 1. 2 -> K2PREDIV = 2
 *   fPLL1 = N * fIN / P * K2 * 1. 6 -> K2PREDIV = 3
 *
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 0
 *   fPLL2 = N * fIN / P * K3 * 1. 1 -> K3PREDIV = 1
 *   fPLL2 = N * fIN / P * K3 * 1. 2 -> K3PREDIV = 2
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 3
 *   fPLL2 = N * fIN / P * K3 * 1. 4 -> K3PREDIV = 4
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 5
 *   fPLL2 = N * fIN / P * K3 * 1. 6 -> K3PREDIV = 6
 *   fPLL2 = N * fIN / P * K3 * 1. 7 -> K3PREDIV = 7
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 8
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 9
 *   fPLL2 = N * fIN / P * K3 * 2. 0 -> K3PREDIV = 10
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 11
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 12
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 13
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 14
 *   fPLL2 = N * fIN / P * K3 * 1. 0 -> K3PREDIV = 15
 *
 *   fPLL3 = N * fIN / P * K4 * 1. 0 -> K4PREDIV = 0
 *   fPLL3 = N * fIN / P * K4 * 2. 0 -> K4PREDIV = 1
 *   fPLL3 = N * fIN / P * K4 * 1. 2 -> K4PREDIV = 2
 *   fPLL3 = N * fIN / P * K4 * 1. 6 -> K4PREDIV = 3
 */
typedef struct
{
    IfxClock_Pdivider     pDivider;           /**< \brief P divider value for basic step */
    IfxClock_Ndivider     nDivider;           /**< \brief N divider value for basic step */
    IfxClock_K2divider    k2Divider;          /**< \brief K2 divider value. */
    IfxClock_K2PreDivider k2PreDivider;       /**< \brief K2 Pre divider value */
    IfxClock_K3divider    k3Divider;          /**< \brief K3 divider value */
    IfxClock_K3PreDivider k3PreDivider;       /**< \brief K3 Pre divider value */
    IfxClock_K4divider    k4Divider;          /**< \brief K4 divider value */
    IfxClock_K4PreDivider k4PreDivider;       /**< \brief K4 Pre divider value */
} IfxClock_PerPllConfig;

#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/** \brief
 */
typedef struct
{
    uint8            numOfSteps;      /**< \brief Number of PLL divider steps during clock throttling */
    IFX_CONST uint8 *pllSteps;        /**< \brief Pointer to the array of Pll divider step configuration. */
} IfxClock_PllThrottleConfig;
#endif

/** \brief Configuration structure type for the Ramp Configuration
 */
typedef struct
{
    uint16 rampOscUpperFreqLimit;       /**< \brief Ramp oscillator Upper frequency Limit in steps of 10Mhz */
} IfxClock_RampConfig;

/** \brief Configuration structure type for the Sys Pll  config.
 *   This structure must be used to configure the P, N and K2  divider dividers.
 *   Note: The K2 Divider Value in case of RAMP OSC enabled will be the Final K2 Divider Value
 *   and in case RAMP OSC is disabled, the K2 Divider value will be the initial Step Value
 *   fPLL0 = N * fIN / P * K2 * 1. 0 -> K2PREDIV = 0
 *   fPLL0 = N * fIN / P * K2 * 2. 0 -> K2PREDIV = 1
 *   fPLL0 = N * fIN / P * K2 * 1. 6 -> K2PREDIV = 2
 *   fPLL0 = N * fIN / P * K2 * 1. 2 -> K2PREDIV = 3
 */
typedef struct
{
    IfxClock_Pdivider     pDivider;           /**< \brief P divider value for basic (initial) step */
    IfxClock_Ndivider     nDivider;           /**< \brief N divider value for basic (initial) step */
    IfxClock_K2divider    k2Divider;          /**< \brief K2 divider value for basic step */
    IfxClock_K2PreDivider k2PreDivider;       /**< \brief K2 Pre divider value for PLL0 */
    IfxClock_K3divider    k3Divider;          /**< \brief K3 divider value for basic step */
    IfxClock_K3PreDivider k3PreDivider;       /**< \brief K3 Pre divider value for PPU */
} IfxClock_SysPllConfig;

/** \} */

/** \brief peripheral PLL modulation config
 */
typedef struct
{
    IfxClock_ModEn               Mod_Enable;       /**< \brief modulation enable */
    IfxClock_ModulationAmplitude Mod_Amp;          /**< \brief modulation amplitude */
} IfxClock_perPllMod_Config;

/** \addtogroup IfxLld_Clock_Std_Ccu_Configuration
 * \{ */
/** \brief Configuration structure CLOCK module
 */
typedef struct
{
    uint32                xtalFrequency;                                     /**< \brief Xtal frequency */
    IfxClock_SysPllConfig sysPllConfig;                                      /**< \brief System PLL Configurations */
    IfxClock_PerPllConfig perPllConfig;                                      /**< \brief Peripheral PLL Configurations */
#if !defined(IFX_CLOCK_DISABLE_RAMPCON)
    IfxClock_RampConfig   rampConfig;                                        /**< \brief Ramp configuration */
#endif
#if defined(IFX_CLOCK_DISABLE_RAMPCON)
    IfxClock_PllThrottleConfig               sysPllThrottleConfig;           /**< \brief Configuration of PLL throttling. */
#endif
    IfxClock_ClockDistributionConfig         clockDistribution;              /**< \brief Configuration of of bus clocks and other module clock distribution. */
    IFX_CONST IfxClock_FlashWaitstateConfig *flashFconWaitStateConfig;       /**< \brief Configuration of flash waitstate */
    IFX_CONST IfxClock_Mod_Config           *modulationConfig;               /**< \brief modulation configuration */
    IFX_CONST IfxClock_perPllMod_Config     *perPllmodulationConfig;         /**< \brief peripheral pll modulation configuration */
    IfxClock_PllInputClockSelection          pllInputClockSelection;         /**< \brief Pll input clock selection */
    IfxClock_SysClockSourceSelect            SysClockSourceSelect;
    IfxClock_PerClockSourceSelect            PerClockSourceSelect;
    IfxClock_OscconRegConfig                 osccon;                         /**< \brief OSCCON Configurations */
} IfxClock_Config;

/** \brief structure holding the RGain parameters for modulation
 */
typedef struct
{
    float32 RGainNom;           /**< \brief RGain Nominal value */
    uint16  RGainHex;           /**< \brief RGain Hex value */
    uint32  DeltaRnDGain;       /**< \brief RGain delta value */
} IfxClock_RGain_Values;

/** \brief XCorr tolerance value
 */
typedef struct
{
    float32 XCorrNom;       /**< \brief XCORR value */
    uint32  XCorr;          /**< \brief XCORR value */
    uint32  XGain;          /**< \brief XGain value */
    uint32  XTol;           /**< \brief XCorr tolerance value */
} IfxClock_XCorr_Values;

/** \} */

/** \addtogroup IfxLld_Clock_Std_Ccu
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief API to get SRICS divider frequency.
 * This API returns the SriCS frequency based on the divider values in CCUCON registers.
 * \return SriCs frequency (fSRI) in Hz
 */
IFX_EXTERN uint32 IfxClock_getSriCsFrequency(void);

/** \} */

/** \addtogroup IfxLld_Clock_Std_Ccu_Operative
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief API to get Adc (EVADC, EDSADC)  frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return Adc frequency (fADC) in Hz
 */
IFX_INLINE uint32 IfxClock_getAdcFrequency(void);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief calculates the Rgain parameters from the oscillator frequency, modulation amplitude for SYSPLL
 * \param modamp modulation amplitude
 * \param RGain_P r gain parameters
 * \return None
 */
IFX_EXTERN void IfxClock_calRGainParameters(IfxClock_ModulationAmplitude modamp, IfxClock_RGain_Values *RGain_P);

/** \brief calculates the Rgain parameters from the oscillator frequency, modulation amplitude for PERPLL
 * \param modamp modulation amplitude
 * \param RGain_P r gain parameters
 * \return None
 */
IFX_EXTERN void IfxClock_perPllCalRGainParameters(IfxClock_ModulationAmplitude modamp, IfxClock_RGain_Values *RGain_P);

/** \brief this function calculates the XCorrelation parameters from the given values of Rgain and from the xcorrelation input parameters.
 * \param RGainNom nominal RGain value
 * \param XCorr_P xcorrelation input parameters.
 * \return status of calculation
 */
IFX_EXTERN boolean IfxClock_calXCorrParameters(float32 RGainNom, IfxClock_XCorr_Values *XCorr_P);

/** \} */

/** \addtogroup IfxLld_Clock_Std_Ccu_Configuration
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/
#if !defined(IFX_ILLD_PPU_USAGE)
/** \brief This  function configures the Ccu SYS PLLs initial step and PER PLL.
 * 1. Configure the Ramp oscillator (RAMPCON UFL, SZ, WAIT) for the desired Sys PLL frequency (450MHZ) and enable CMD to ramp up. Enable clock source (CCUCON.CLKSELS = RAMP) to RAMPCON frequency.
 * 2. Configure the Sys PLL and Per PLL dividers (N, P, K2/K3/K4) to desired frequencies (450MHz).
 * 3. For Sys PLL,  the K2 divider be the final value i.e  direct jump to final PLL value
 * 4. For Per PLL,  the K3/K4 divider be the final value
 * 5. Configure the peripheral Dividers (SYS/PERCCUCONx) to desired values.
 * 6. Once the RAMPCON reaches the desired freq (FSTAT = AtTop), and SYSPLL then switch CLKSELS to SysPLL.
 * NOTE: Pre-condition to call this function is PLL should be in OFF state before configuring SYSPLL and PERPLL's (By default PLL will be in off state)
 */
IFX_EXTERN boolean IfxClock_configureCcuPll(const IfxClock_Config *pllCfg);
#endif

/** \} */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Inlined API for clock distribution
 * For each CCUCON register update the configured value with the mask.
 * \param clockDistributionConfig pointer to clock distribution structure
 * \return TRUE: Operation successful, FALSE: Operation Failure
 */
IFX_INLINE boolean IfxClock_distributeClockInline(const IfxClock_ClockDistributionConfig *clockDistributionConfig);

/** \brief API to get ASCLINF divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return AsclinF frequency (fASCLINF) in Hz
 */
IFX_INLINE uint32 IfxClock_getAsclinFFrequency(void);

/** \brief API to get EVR Oscillator frequency.
 * This API returns the constant which is specific to the Clock of the controller.
 * \return EVR Oscillator frequency (fBACK or fEVR) in Hz.
 */
IFX_INLINE uint32 IfxClock_getEvrFrequency(void);

/** \brief API to get I2C frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return I2C frequency (fI2C) in Hz
 */
IFX_INLINE uint32 IfxClock_getI2cFrequency(void);

/** \brief API to get MCANH divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return MCANH frequency (fMCANH) in Hz
 */
IFX_INLINE uint32 IfxClock_getMcanhFrequency(void);

/** \brief API to get Oscillator 0 frequency.
 * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
 * \return Osc0 frequency (fOSC0) in Hz.
 */
IFX_INLINE uint32 IfxClock_getOsc0Frequency(void);

/** \brief API to get Oscillator 0 frequency.
 * This API returns the fOsc0 frequency based on the divider value in CCUCON register and the input oscillator.
 * \return Osc frequency (fOSC) in Hz.
 */
IFX_INLINE uint32 IfxClock_getOscFrequency(void);

/** \brief Returns the Peripheral clock source selection
 * \return Per Clock source selection
 */
IFX_INLINE IfxClock_PerClockSourceSelect IfxClock_getPerClockSourceSelection(void);

/** \brief API to get current Ramp sequence status.
 * \return Ramp frequency  status
 *  00B InBet / The ramping oscillator's output frequency is between the base frequency and the upper frequency limit.
 *  01B AtBase / The ramping oscillator's output frequency equals the base frequency which is 100 MHz.
 *  10B AtTop / The ramping oscillator's output frequency equals the upper frequency limit.
 */
IFX_INLINE IfxClock_RampFreqStatus IfxClock_getRampFreqStatus(void);

/** \brief API to get current Ramp sequence status.
 * \return Ramp sequence status
 *  00B Idle / Frequency constant, not changing
 *  01B RampUp / Frequency increasing
 *  10B RampDown / Frequency decreasing
 */
IFX_INLINE IfxClock_RampSeqStatus IfxClock_getRampSeqStatus(void);

/** \brief API to get STM divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return STM frequency (fSTM) in Hz
 */
IFX_INLINE uint32 IfxClock_getStmFrequency(void);

/** \brief Returns the clock source selection
 * \return Clock source selection
 */
IFX_INLINE IfxClock_PllInputClockSelection IfxClock_getSysClockSourceSelection(void);

/** \brief API to get GETH divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return GETH frequency (fGETH) in Hz
 */
IFX_INLINE uint32 IfxClock_getXGeth0Frequency(void);

/** \brief API to get GTMdivider frequency
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * return GTM frequency (fGTM) in Hz
 * \return Gtm Frequency
 */
IFX_INLINE uint32 IfxClock_geteGtmFrequency(void);

/** \brief API to get XSPI frequency.
 * \return XSPI frequency (fXSPI) in Hz
 */
IFX_INLINE uint32 IfxClock_getXspiFrequency(void);

/** \brief API to set Ramp Oscillator  powerup  / power-down
 * \return None
 */
IFX_INLINE void IfxClock_setRampPowerMode(IfxClock_RampPower rampPower);

/** \brief API to configure the LPDIV value to enter into Low Power mode.
 *
 * Caution:
 * write to LPDIV with non-zero division ratio will cause system to enter low power mode.
 * Low power mode will affect different SPBDIV and SRIDIV ratios.
 *
 * The original CCUCON0 ratios should be preserved by user prior to calling this function.
 * The "normal" CCUCON0 ratios have to be passed to API: "IfxClock_switchToNormalMode" to go back to the original division ratios.
 * \param lpDiv Low Power Division Ratio
 * \return None
 */
IFX_INLINE void IfxClock_switchToLowPowerMode(IfxClock_LowPowerDivRatio lpDiv);

/** \brief API to switch back to normal mode from low power mode.
 *
 * Caution:
 * The original CCUCON0 setting has to be saved by user prior to entering Low Power mode.
 * Pass the original CCUCON0 register as a whole word to this function to restore the normal settings.
 *
 * Ramp back to normal mode is done in steps to avoid sudden jump in frequency and power usage.
 * \param ccucon0 CCUCON0 values at normal mode
 * \return None
 *
 * Switch to low power mode and back using iLLD functions as below
 * \code
 *     uint32 ccucon0 = CLOCK_SYSCCUCON0.U;
 *     IfxClock_LowPowerDivRatio lpDiv = IfxClock_LowPowerDivRatio_divBy120;
 *     IfxClock_switchToLowPowerMode(lpDiv);
 * \endcode
 *
 * Switch back to normal mode  with the saved ccucon0 value
 * \code
 *     IfxClock_switchToNormalMode(ccucon0);
 * \endcode
 *
 */
IFX_INLINE void IfxClock_switchToNormalMode(const uint32 ccucon0);
#if defined(IFX_CLOCK_DISABLE_RAMPCON)
/**
 * \return None
 */
IFX_INLINE void IfxClock_throttleSysPllClockInline(const IfxClock_PllThrottleConfig *pllThrottleConfig);
#endif

#if !defined(IFX_ILLD_PPU_USAGE)
/** \brief API to wait for requested duration along with watchdog service to avoid any reset case during startup of the chip.
 * \param timeSec timeSec Time interval to wait in seconds
 * \return None
 */
IFX_INLINE void IfxClock_waitWithWdtService(float32 timeSec);
#endif

/** \brief API to get backup frequency
 * This API returns the backup frequency as 0 if its not in idle state or if the ramp is in progress
 * \return uint32 Backup Freq
 */
IFX_INLINE uint32 IfxClock_getRampFrequency(void);

/** \brief API to check if Sys PLL is locked, if its is locked it will return the frequency
 * This API returns 0 if the Sys PLL is not locked. If it is locked it returns the frequency
 * \return Sys PLL Freq
 */
IFX_INLINE uint32 IfxClock_checkSysPllLock(void);

/** \brief API to check if Per PLL is locked, if its is locked it will return the frequency
 * This API returns 0 if the Per PLL is not locked. If it is locked it returns the frequency
 * \return Per PLL Freq
 */
IFX_INLINE uint32 IfxClock_checkPerPllLock(IfxClock_Fsource fsource);

/** \brief API to enable/power-on the Crystal oscillator
 * \return None
 */
IFX_INLINE void IfxClock_powerOnCrystalOsc(void);

/** \brief API to enable/power-on the Ramp oscillator
 * \return None
 */
IFX_INLINE void IfxClock_powerOnRampOsc(void);

/** \brief API to get XSPI frequency.
 * \return SDMMCfrequency (fsdmmc) in Hz
 */
IFX_INLINE uint32 IfxClock_getSdmmcFrequency(void);

/** \brief API to get PerPLL DCO frequency
 * \return uint32 PerPLL DCO frequency
 */
IFX_INLINE uint32 IfxClock_getPerPllDcoFrequency(void);

/** \brief API to get LETH divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return LETH frequency (fLETH) in Hz
 */
IFX_INLINE uint32 IfxClock_getLethFrequency(void);

/** \brief API to get LETH100 divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE2.
 * \return LETH100 frequency (fLETH100) in Hz
 */
IFX_INLINE uint32 IfxClock_getLeth100Frequency(void);

/** \brief API to get CANXLH divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return CANXLH frequency (fCANXLH) in Hz
 */
IFX_INLINE uint32 IfxClock_getCanXLhFrequency(void);

/** \brief API to get ERAY divider frequency
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return CANXLH frequency (fERAY) in Hz
 */
IFX_INLINE uint32 IfxClock_getErayFrequency(void);

/** \brief API to get Macro Tick 0 frequency.
 *  This API returns the based on the divider value of MPC and UT and f-utick.
 * \return Macro Tick 0 frequency (fMT0) in Hz
 */
IFX_INLINE uint32 IfxClock_getMt0Frequency(void);

/** \brief API to get PPU frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return PPU frequency (fPPU) in Hz
 */
IFX_INLINE uint32 IfxClock_getPpuFrequency(void);

/** \brief API to get CANXLI divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return CANXLH frequency (fCANXLI) in Hz
 */
IFX_INLINE uint32 IfxClock_getCanXLiFrequency(void);

/** \brief API to get XSPISL divider frequency.
 *  This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return CANXLH frequency (fXSPISL) in Hz
 */
IFX_INLINE uint32 IfxClock_getXspislFrequency(void);

/** \brief Configure the Ramp oscillator (RAMPCON UFL) for the desired Sys PLL frequency to ramp up
 * \param rampFreq Configure ramp frequency
 * \return rampup configuration status
 */
IFX_INLINE boolean IfxClock_configureRampUp(uint32 rampFreq);

/** \brief API to get HSCTPERON divider frequency
 * \return HSCTPERON frequency (fHSCT) in Hz
 */
IFX_INLINE uint32 IfxClock_getHsctFrequency(void);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief API for clock distribution.
 * \return None
 */
IFX_EXTERN void IfxClock_distributeClock(IfxClock_ClockDistributionConfig *clockDistributionConfig);

/** \brief API to get ASCLINS divider frequency.
 * This API returns the ASCLINS frequency  based on the divider value in CCUCON register and fSOURCE.
 * \return AsclinS frequency (fASCLINS) in Hz
 */
IFX_EXTERN uint32 IfxClock_getAsclinSFrequency(void);

/** \brief API to get CPB divider frequency.
 * \return CPB frequency (fSPB) in Hz
 */
IFX_EXTERN uint32 IfxClock_getCpbFrequency(void);

/** \brief This API returns the Cpu frequency
 * \return Cpu[x] frequency in Hz, where x is cpu number passed as parameter
 */
IFX_EXTERN uint32 IfxClock_getCpuFrequency(void);

/** \brief API to get FSI divider frequency in Hz.
 * This API returns the fFSI based on the divider value in CCUCON register and the input oscillator.
 * \return FSI frequency (fFSI) in Hz.
 */
IFX_EXTERN uint32 IfxClock_getFsiFrequency(void);

/** \brief API to get MCAN divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return Mcan frequency (fMCAN) in Hz
 */
IFX_EXTERN uint32 IfxClock_getMcanFrequency(void);

/** \brief get source frequency fSOURCE.
 * This API returns the source frequency based on the configurations with CCUCON register configuration.
 * \return Module frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getModuleFrequency(void);

/** \brief API to get MSC divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return Msc frequency (fMSC) in Hz
 */
IFX_EXTERN uint32 IfxClock_getMscFrequency(void);

/** \brief API to get actual PER PLL1  frequency
 * This API returns the PER PLL1 frequency based on the K2 divider value in PLLCON and the VCO frequency.
 * Fpll1= (Fosc*N)/(P*K2)
 * \return PER PLL1 (K2 Divider) frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getPerPllFrequency1(void);

/** \brief This API returns the PER PLL2 frequency based on the K3 divider value in PLLCON and the VCO frequency.
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 0
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 1) if K3PREDIV = 1
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 2) if K3PREDIV = 2
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 3
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 4) if K3PREDIV = 4
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 5
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 6) if K3PREDIV = 6
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 7) if K3PREDIV = 7
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 8
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 9
 *  fPLL2 = (N * fIN) / (P * K3 * 2. 0) if K3PREDIV = 10
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 11
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 12
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 13
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 14
 *  fPLL2 = (N * fIN) / (P * K3 * 1. 0) if K3PREDIV = 15
 * \return PER PLL2 (K3 Divider ) frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getPerPllFrequency2(void);

/** \brief This API returns the PER PLL3 frequency based on the K4 divider value in PLLCON and the VCO frequency.
 * fPLL3 = N * fIN / P * K4 * 1. 0 if K4PREDIV = 0
 * fPLL3 = N * fIN / P * K4 * 2. 0 if K4PREDIV = 1
 * fPLL3 = N * fIN / P * K4 * 1. 2 if K4PREDIV = 2
 * fPLL3 = N * fIN / P * K4 * 1. 6 if K4PREDIV = 3
 * \return PER PLL2 (K3 Divider ) frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getPerPllFrequency3(void);

/** \brief get Peripheral source frequency fSOURCE.
 * This API returns the source frequency based on the configurations with CCUCON register configuration.
 * \param fsource fsource selection
 * \return Effective fSOURCE in Hz
 */
IFX_EXTERN uint32 IfxClock_getPerSourceFrequency(IfxClock_Fsource fsource);

/** \brief API to get actual Sys PLL output frequency.
 * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
 * \return System Pll (fSysPLL) frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getPllFrequency(void);

/** \brief API to get actual PLL Ppu output frequency.
 * This API returns the based on the divider values in CCUCON, PLLCON registers and the input oscillator.
 * \return Ppu Pll (fPLLPPU) frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getPllPpuFrequency(void);

/** \brief API to get Qspi divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return Qspi frequency (fQspi) in Hz
 */
IFX_EXTERN uint32 IfxClock_getQspiFrequency(void);

/** \brief API to get SPB divider frequency.
 * This API returns the based on fSOURCE and also on Low power divider mode and/or SPBDIV divider value in CCUCON registers.
 * \return SPB frequency (fSPB) in Hz
 */
IFX_EXTERN uint32 IfxClock_getSpbFrequency(void);

/** \brief API to get SRI divider frequency.
 * This API returns the Sri frequency based on the divider values in CCUCON registers and fSOURCE.
 * \return Sri frequency (fSRI) in Hz
 */
IFX_EXTERN uint32 IfxClock_getSriFrequency(void);

/** \brief get System source frequency fSOURCE.
 * This API returns the source frequency based on the configurations with CCUCON register configuration.
 * \return Effective fSOURCE in Hz
 */
IFX_EXTERN uint32 IfxClock_getSysSourceFrequency(void);

/** \brief get System source frequency fSOURCEPPU.
 * This API returns the ppu source frequency based on the configurations with CCUCON register configuration.
 * \return Effective fSOURCEPPU in Hz
 */
IFX_EXTERN uint32 IfxClock_getPpuSourceFrequency(void);

/** \brief API to get TPB divider frequency.
 * \return TPB frequency (fSPB) in Hz
 */
IFX_EXTERN uint32 IfxClock_getTpbFrequency(void);
#if !defined(IFX_ILLD_PPU_USAGE)
/** \brief API to initialize the CLOCK Clock Control Unit.
 * This API initialize the Sys PLL with ramp steps, BUS dividers and Per PLL for the configuration provided by the configuration structure.
 * Note: Following SMU alarms are disabled before the PLL configuration and Cleared at the end of PLL lock in the function.
 * System PLL input clock out of range
 * Per PLL input clock out of range
 * The application should store/restore these alarm configurations if required.
 * The K2 Divider Value in case of RAMP OSC enabled will be the Final K2 Divider Value
 * and in case RAMP OSC is disabled, the K2 Divider value will be the initial Step Value
 * Note: This API cannot be called from the PPU
 * \param config Pointer to the configuration structure of the Clock
 * \return Error status of the Clock initialization process.
 * \retval TRUE: If an error occurred during initialization.
 * \retval FALSE: If initialization was successful.
 */
IFX_EXTERN boolean IfxClock_init(const IfxClock_Config *config);

/** \brief Initializes the clock configuration with default values
 * \param cfg Pointer to the configuration structure of the Clock
 * \return None
 */
IFX_EXTERN void IfxClock_initConfig(IfxClock_Config *cfg);
#endif

/** \brief initialize the system pll modulation
 * \param Mod_Cfg modulation configuration
 * \return None
 */
IFX_EXTERN void IfxClock_modulation_init(const IfxClock_Mod_Config *Mod_Cfg);

/** \brief API to set ASCLINF frequency (with ASCLINF divider)
 * This API configure ASCLINF divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param asclinFFreq AsclinF frequency (fASCLINF) in Hz
 * \return Actual AsclinF frequency (fASCLINF) in Hz
 */
IFX_EXTERN uint32 IfxClock_setAsclinFFrequency(uint32 asclinFFreq);

/** \brief API to set ASCLINS frequency (with ASCLINS divider)
 * This API configure ASCLINS divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param asclinSFreq Desired AscLinS frequency in Hz
 * \return Actual AsclinS frequency (fASCLINS) in Hz
 */
IFX_EXTERN uint32 IfxClock_setAsclinSFrequency(uint32 asclinSFreq);

/** \brief API to set CPB frequency (with CPB divider)
 * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param cpbFreq Desired CPB frequency in Hz
 * \return Actual SPB frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_setCpbFrequency(uint32 cpbFreq);

/** \brief API to set FSI frequency (with FSI divider)
 * This API configure Fsi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param fsiFreq FSI frequency (fFSI) in Hz
 * \return Actual Fsi frequency (fFSI) in Hz
 */
IFX_EXTERN uint32 IfxClock_setFsiFrequency(uint32 fsiFreq);

/** \brief API to set I2C frequency (with I2C divider)
 * This API configure adas divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param i2cFreq I2C frequency (fI2C) in Hz
 * \return Actual I2C frequency (fI2C) in Hz
 */
IFX_EXTERN uint32 IfxClock_setI2cFrequency(uint32 i2cFreq);

/** \brief API to set MCAN frequency (with MCAN divider)
 * This API configure MCAN divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param mcanFreq Desired MSC frequency in Hz
 * \return Actual Mcan frequency (fMCAN) in Hz
 */
IFX_EXTERN uint32 IfxClock_setMcanFrequency(uint32 mcanFreq);

/** \brief API to set MCANH frequency (with MCANH divider)
 * This API configure mcanh divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param mcanhFreq MCANH frequency (fMCANH) in Hz
 * \return Actual MCanh frequency (fMCANH) in Hz
 */
IFX_EXTERN uint32 IfxClock_setMcanhFrequency(uint32 mcanhFreq);

/** \brief API to set MSC frequency (with MSC divider)
 * This API configure MSC divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param mscFreq Desired MSC frequency in Hz
 * \return Actual Msc frequency (fMSC) in Hz
 */
IFX_EXTERN uint32 IfxClock_setMscFrequency(uint32 mscFreq);

/** \brief API to set QSPI frequency (with QSPI divider)
 * This API configure Qspi divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param qspiFreq Desired QSPI frequency in Hz
 * \return Actual Qspi frequency (fQspi) in Hz
 */
IFX_EXTERN uint32 IfxClock_setQspiFrequency(uint32 qspiFreq);

/** \brief API to set SPB frequency (with SPB divider)
 * This API configure SPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param spbFreq Desired SPB frequency in Hz
 * \return Actual SPB frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_setSpbFrequency(uint32 spbFreq);

/** \brief API to set SRI frequency (with SRI divider)
 * This API configure Sri divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param sriFreq Sri frequency (fSRI) in Hz
 * \return Actual Sri frequency (fSRI) in Hz
 */
IFX_EXTERN uint32 IfxClock_setSriFrequency(uint32 sriFreq);

/** \brief API to set STM frequency (with STM divider)
 * This API configure Stm divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param stmFreq Stm frequency (fASCLINF) in Hz
 * \return Actual Stm frequency (fSTM) in Hz
 */
IFX_EXTERN uint32 IfxClock_setStmFrequency(uint32 stmFreq);

/** \brief API to set TPB frequency (with CPB divider)
 * This API configure TPB divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param tpbFreq Desired TPB frequency in Hz
 * \return Actual SPB frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_setTpbFrequency(uint32 tpbFreq);

/** \brief API to set GETH frequency (with GETH divider)
 * This API configure geth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param gethFreq GETH frequency (fGETH) in Hz
 * \return Actual Geth frequency (fGETH) in Hz
 */
IFX_EXTERN uint32 IfxClock_setXGeth0Frequency(uint32 gethFreq);

/** \brief API to set GTM frequency (with GTM divider)
 * This API configure GTM divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param eGtmFreq Desired eGTM frequency in Hz
 * \return Actual GTM frequency in HZ
 */
IFX_EXTERN uint32 IfxClock_seteGtmFrequency(uint32 eGtmFreq);

/** \brief API to set XSPI frequency
 *  This API configures K4 divider values in PERPLLCON1 registers. The actual frequency always depends on the feasibility with the divider value
 * \param xSpiFreq Desired XSPI frequency in Hz
 * \return Actual XSPI frequency in HZ
 */
IFX_EXTERN uint32 IfxClock_setXspiFrequency(uint32 xSpiFreq);

/** \brief API to init the PLL3 values
 *  This API configure xSpi divider values in PERPLLCON1 registers. The actual frequency always depends on the feasibility with the divider value
 * \param k4Div Desired k4Div value
 * \param k4PreDiv Desired k4PreDiv value
 * \return Actual xSpi frequency in HZ
 */
IFX_EXTERN uint32 IfxClock_initPll3Dividers(IfxClock_K4divider k4Div, IfxClock_K4PreDivider k4PreDiv);

/** \brief API to switch to Backup clock from the current PLL frequency.
 * \param cfg Pointer to the configuration structure of the Clock
 * \return None
 */
IFX_EXTERN boolean IfxClock_switchToBackupClock(const IfxClock_Config *cfg);

/** \brief Configures access to all masters to the Clock in the device
 * \param apConfig pointer to configuration structure
 * \return None
 */
IFX_EXTERN void IfxClock_configureAccessToClock(IfxApApu_ApuConfig *apConfig);

/** \brief API to get CANXL divider frequency.
 * This API returns the based on the divider value in CCUCON register and fSOURCE.
 * \return CANXL frequency (fCANXL) in Hz
 */
IFX_EXTERN uint32 IfxClock_getCanXLFrequency(void);

/** \brief API to set CANXL frequency (with CANXL divider)
 * This API configure CANXL divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param canXLFreq Desired CANXL frequency in Hz
 * \return Actual Mcan frequency (fMCAN) in Hz
 */
IFX_EXTERN uint32 IfxClock_setCanXLFrequency(uint32 canXLFreq);

/** \brief API to set CANXLH frequency (with CANXLH divider)
 * This API configure CANXLH divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param canXlhFreq CANXLH frequency (fCANXLH) in Hz
 * \return Actual CANXLH frequency (fCANXLH) in Hz
 */
IFX_EXTERN uint32 IfxClock_setCanXLhFrequency(uint32 canXlhFreq);

/** \brief API to set LETH frequency (with LETH divider)
 * This API configure leth divider values in CCUCON registers. The actual frequency always depends on the feasibility with the divider value
 * \param lethFreq LETH frequency (fLETH) in Hz
 * \return Actual Leth frequency (fLETH) in Hz
 */
IFX_EXTERN uint32 IfxClock_setLethFrequency(uint32 lethFreq);

/** \brief Configure the external clock output 0
 * \param Clk_Sel Select the output clock line
 * \param freqHz Frequency in Hz for in case of Clk_Sel = IfxClock_ClkSel0_fFRAC
 * \param mode Select the divider mode
 * \return None
 */
IFX_EXTERN void IfxClock_enableExtClockOut0(IfxClock_ClkSel0 Clk_Sel, const uint32 freqHz, IfxClock_Clk0Mode mode);

/** \brief Configure the external clock output 1
 * \param Clk_Sel Select the output clock line
 * \param freqHz Frequency in Hz for in case of Clk_Sel = IfxClock_ClkSel1_fDIV1
 * \param sel Output clock line negation selection
 * \return None
 */
IFX_EXTERN void IfxClock_enableExtClockOut1(IfxClock_ClkSel1 Clk_Sel, const uint32 freqHz, IfxClock_Clk1Negation sel);

/** \brief Get the configured frequency for external clock output 0
 * \return Frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getExtClock0Frequency(void);

/** \brief Get the configured frequency for external clock output 1
 * \return Frequency in Hz
 */
IFX_EXTERN uint32 IfxClock_getExtClock1Frequency(void);

/** \brief Configure the Ramp oscillator (RAMPCON UFL) for the desired Sys PLL frequency and enable CMD to ramp up/down
 * NOTE: It is user responsibility to provide valid rampFreq based on rampSeqCmd
 * \param rampFreq Configure the ramp frequency
 * \param rampSeqCmd Ramp sequence command
 * \return ramp configuration status
 */
IFX_EXTERN boolean IfxClock_configureRampOscillator(uint32 rampFreq, IfxClock_RampSeqCmd rampSeqCmd);

/** \brief initialize peripheral pll modulation
 * \param Mod_Cfg modulation configuration
 * \return None
 */
IFX_EXTERN void IfxClock_perPllModulation_init(const IfxClock_perPllMod_Config *Mod_Cfg);

/** \brief API to set xSPISL  frequency
 * \param xspislFreq xSPISL (slow) frequency (fxSPISL) in Hz
 * \return Actual xSPISL frequency (fxSPISL) in Hz
 */
IFX_EXTERN uint32 IfxClock_setXspislFrequency(uint32 xspislFreq);

/** \brief API to set the PPU frequency
 * \param ppuFreq PPU frequency (fPPU) in Hz
 * \return Actual PPU frequency (fPPU) in Hz
 */
IFX_EXTERN uint32 IfxClock_setPpuFrequency(uint32 ppuFreq);

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/
IFX_EXTERN IFX_CONST float32 IfxClock_MA_PerPll_percent[IfxClock_PerPllModulationAmplitude_count];

/** \brief maps to the IfxClock_ModulationAmplitude enum
 */
IFX_EXTERN IFX_CONST float32 IfxClock_MA_percent[IfxClock_ModulationAmplitude_count];

IFX_EXTERN IFX_CONST float32 IfxClock_X_Gain_Value[IfxClock_XGain_count];

/** \brief Configuration structure for CLOCK driver.
 * The values of this structure are defined as # defined macros in the implementation of Clock
 */
IFX_EXTERN IFX_CONST IfxClock_Config           IfxClock_defaultClockConfig;

/** \brief deault system pll modulation config
 */
IFX_EXTERN IFX_CONST IfxClock_Mod_Config       IfxClock_defaultModConfig;

/** \brief default peripheral pll modulation config
 */
IFX_EXTERN IFX_CONST IfxClock_perPllMod_Config IfxClock_defaultPerPllModConfig;

IFX_EXTERN uint32                              IfxClock_xtalFrequency;

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE boolean IfxClock_distributeClockInline(const IfxClock_ClockDistributionConfig *clockDistributionConfig)
{
    uint32 timeoutCycleCount;
    uint32 initError = 0;
#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_config);
#endif

    /*Configure the clock distribution */
    {                                                    /*Write CCUCON0 configuration */
        Ifx_CLOCK_SYSCCUCON0 sysccucon0;
        sysccucon0.U      = CLOCK_SYSCCUCON0.U & ~clockDistributionConfig->sysccucon0.mask;
        /*update with configured value */
        sysccucon0.U     |= (clockDistributionConfig->sysccucon0.mask & clockDistributionConfig->sysccucon0.value);
        sysccucon0.B.UP   = 1;
        timeoutCycleCount = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

        while (CLOCK_CCUSTAT.B.LCK != 0U)
        {
            IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
        }

        CLOCK_SYSCCUCON0.U = sysccucon0.U;          /*Set update bit explicitly to make above configurations effective */
    }
    {
        /*Write CCUCON1 configuration */
        Ifx_CLOCK_SYSCCUCON1 sysccucon1;
        sysccucon1.U      = CLOCK_SYSCCUCON1.U;

        sysccucon1.U      = CLOCK_SYSCCUCON1.U & ~clockDistributionConfig->sysccucon1.mask;
        /*update with configured value */
        sysccucon1.U     |= (clockDistributionConfig->sysccucon1.mask & clockDistributionConfig->sysccucon1.value);
        sysccucon1.B.UP   = 1;
        timeoutCycleCount = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

        while (CLOCK_CCUSTAT.B.LCK != 0U)
        {
            IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
        }

        CLOCK_SYSCCUCON1.U = sysccucon1.U;
    }

    {
        /*Write PERCCUCON0 configuration */
        Ifx_CLOCK_PERCCUCON0 perccucon0;
        perccucon0.U      = CLOCK_PERCCUCON0.U & ~clockDistributionConfig->perccucon0.mask;
        /*update with configured value */
        perccucon0.U     |= (clockDistributionConfig->perccucon0.mask & clockDistributionConfig->perccucon0.value);
        timeoutCycleCount = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

        while (CLOCK_CCUSTAT.B.LCK != 0U)
        {
            IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
        }

        CLOCK_PERCCUCON0.U = perccucon0.U;
    }

    {
        /*Write PERCCUCON1 configuration */
        Ifx_CLOCK_PERCCUCON1 perccucon1;
        perccucon1.U      = CLOCK_PERCCUCON1.U & ~clockDistributionConfig->perccucon1.mask;
        /*update with configured value */
        perccucon1.U     |= (clockDistributionConfig->perccucon1.mask & clockDistributionConfig->perccucon1.value);
        timeoutCycleCount = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

        while (CLOCK_CCUSTAT.B.LCK != 0U)
        {
            IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
        }

        CLOCK_PERCCUCON1.U = perccucon1.U;
    }
#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_run);
#endif

    return (boolean)initError;
}


IFX_INLINE uint32 IfxClock_getAdcFrequency(void)
{
    uint32 freq     = 0U;
    uint8  acdPerOn = CLOCK_PERCCUCON1.B.ADCPERON;

    if (acdPerOn)
    {
        freq = IfxClock_getPerSourceFrequency(IfxClock_Fsource_1);
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getAsclinFFrequency(void)
{
    uint32 freq          = 0;
    uint8  asclindiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint8  actualDiv     = CLOCK_PERCCUCON1.B.ASCLINFDIV;

    if (actualDiv != 0)
    {
        freq = IfxClock_getPerSourceFrequency(IfxClock_Fsource_2) / asclindiv[actualDiv];
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getEvrFrequency(void)
{
    return IFXCLOCK_EVR_OSC_FREQUENCY;
}


IFX_INLINE uint32 IfxClock_getI2cFrequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_PERCCUCON0.B.I2CDIV;

    if (actualDiv)
    {
        freq = IfxClock_getPerSourceFrequency(IfxClock_Fsource_2) / clkdiv[actualDiv];
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getMcanhFrequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_SYSCCUCON1.B.MCANHDIV;

    if (actualDiv)
    {
        freq = IfxClock_getSysSourceFrequency() / clkdiv[actualDiv];
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getOsc0Frequency(void)
{
    return IFX_CFG_CLOCK_XTAL_FREQUENCY;
}


IFX_INLINE uint32 IfxClock_getOscFrequency(void)
{
    uint32 freq;

    if (CLOCK_OSCCON.B.INSEL == IfxClock_PllInputClockSelection_back)
    {
        freq = IFXCLOCK_EVR_OSC_FREQUENCY;
    }
    else if (CLOCK_OSCCON.B.INSEL == IfxClock_PllInputClockSelection_fOsc0)
    {
        freq = (uint32)IfxClock_xtalFrequency;
    }
    else if (CLOCK_OSCCON.B.INSEL == IfxClock_PllInputClockSelection_fSysclk)
    {
        freq = IFX_CFG_CLOCK_SYSCLK_FREQUENCY;
    }

    else if (CLOCK_OSCCON.B.INSEL == IfxClock_PllInputClockSelection_fOsc_f)
    {
        freq = IFXCLOCK_CFG_OSC_F_FREQ;
    }
    else
    {
        /* Reserved values, this */
        freq = IFXCLOCK_EVR_OSC_FREQUENCY;
    }

    return freq;
}


IFX_INLINE IfxClock_PerClockSourceSelect IfxClock_getPerClockSourceSelection(void)
{
    return (IfxClock_PerClockSourceSelect)CLOCK_CCUSTAT.B.CLKSELP;
}


IFX_INLINE IfxClock_RampFreqStatus IfxClock_getRampFreqStatus(void)
{
    return (IfxClock_RampFreqStatus)CLOCK_RAMPSTAT.B.FSTAT;
}


IFX_INLINE IfxClock_RampSeqStatus IfxClock_getRampSeqStatus(void)
{
    return (IfxClock_RampSeqStatus)CLOCK_RAMPSTAT.B.SSTAT;
}


IFX_INLINE uint32 IfxClock_getStmFrequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_SYSCCUCON0.B.STMDIV;

    if (CLOCK_SYSCCUCON0.B.LPDIV == 0)
    {
        /*Not in low power mode */
        if (actualDiv)
        {
            freq = IfxClock_getSysSourceFrequency() / clkdiv[actualDiv];
        }
    }
    else
    {
        freq = IfxClock_getSysSourceFrequency() / 120;
    }

    return freq;
}


IFX_INLINE IfxClock_PllInputClockSelection IfxClock_getSysClockSourceSelection(void)
{
    return (IfxClock_PllInputClockSelection)CLOCK_CCUSTAT.B.CLKSELS;
}


IFX_INLINE uint32 IfxClock_getXGeth0Frequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_SYSCCUCON1.B.GETHDIV;

    if (CLOCK_SYSCCUCON0.B.LPDIV == 0)
    {
        /*Not in low power mode */
        if (actualDiv)
        {
            freq = IfxClock_getSysSourceFrequency() / clkdiv[actualDiv];
        }
    }
    else
    {
        freq = IfxClock_getSysSourceFrequency() / 120;
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_geteGtmFrequency(void)
{
    uint8  eGtmDiv    = CLOCK_SYSCCUCON1.B.EGTMDIV;
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 gtmFreq    = 0;

    if (CLOCK_SYSCCUCON0.B.LPDIV == 0)
    {
        /*Not in low power mode */
        if (eGtmDiv != 0)
        {
            gtmFreq = IfxClock_getSysSourceFrequency() / clkdiv[eGtmDiv];
        }
    }
    else
    {
        gtmFreq = IfxClock_getSysSourceFrequency() / 120;
    }

    return gtmFreq;
}


IFX_INLINE uint32 IfxClock_getXspiFrequency(void)
{
    uint32 freq    = 0;
    uint8  clockOn = CLOCK_PERCCUCON1.B.XSPIPERON;

    if (clockOn)
    {
        freq = IfxClock_getPerSourceFrequency(IfxClock_Fsource_3);
    }

    return freq;
}


IFX_INLINE void IfxClock_setRampPowerMode(IfxClock_RampPower rampPower)
{
    /* wait for unlock status  */
    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {}

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_config);
#endif

    CLOCK_RAMPCON0.B.PWR = (uint32)rampPower;

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_run);
#endif
}


IFX_INLINE void IfxClock_switchToLowPowerMode(IfxClock_LowPowerDivRatio lpDiv)
{
    /* wait for unlock status - safety watchdog ensures timeout */
    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {} /*Wait till ccucon0 lock is set, No "timeout" required, ENDINIT watch-dog is active! */

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_config);
#endif

    Ifx_CLOCK_SYSCCUCON0 scu_ccucon0;
    scu_ccucon0.U       = CLOCK_SYSCCUCON0.U; /* read ccucon0*/
    scu_ccucon0.B.LPDIV = lpDiv;              /* write Div ratio to LPDIV */
    scu_ccucon0.B.UP    = 1;                  /*Update the ccucon0 register */
    CLOCK_SYSCCUCON0.U  = scu_ccucon0.U;      /* write back */

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_run);
#endif

    /* wait for unlock status - safety watchdog ensures timeout */
    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {} /*Wait till ccucon0 lock is set, No "timeout" required, ENDINIT watch-dog is active! */
}


IFX_INLINE void IfxClock_switchToNormalMode(const uint32 ccucon0)
{
    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {} /*Wait till ccucon0 lock is set, No "timeout" required, ENDINIT watch-dog is active! */

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_config);
#endif

    /* Intermediate step : SPBDIV = 12 and SRIDIV = 3
     *  NOTE: This intermediate step in division ratio is done to avoid a sudden jump in clock frequency
     *  while jumping back from Low Power to Normal mode. The division ratios used in this step is hard
     *  coded into this function after proving on HW.
     */
    Ifx_CLOCK_SYSCCUCON0 scu_ccucon0;
    scu_ccucon0.U        = CLOCK_SYSCCUCON0.U; /* read ccucon0*/
    scu_ccucon0.B.SRIDIV = 3;                  /* SRIDIV = 1:3*/
    scu_ccucon0.B.SPBDIV = 12;                 /* SPBDIV = 1:12 */
    scu_ccucon0.B.LPDIV  = 0;                  /* Exit Low Power Mode */
    scu_ccucon0.B.UP     = 1;
    CLOCK_SYSCCUCON0.U   = scu_ccucon0.U;      /* write back */

    /* wait  */
    //    IfxClock_wait(IFXCLOCK_LPTONORMAL_WAITTIME); /* wait */ // FIXME

    /* Now back to original settings for normal mode */
    /* wait for unlock status - safety watchdog ensures timeout */
    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {} /*Wait till ccucon0 lock is set, No "timeout" required, ENDINIT watch-dog is active! */

    scu_ccucon0.U      = CLOCK_SYSCCUCON0.U;   /* read ccucon0*/
    scu_ccucon0.U      = ccucon0;    /* original setting */
    scu_ccucon0.B.UP   = 1;             /* update */
    CLOCK_SYSCCUCON0.U = scu_ccucon0.U; /* write back */

    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {}

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_run);
#endif
}


#if defined(IFX_CLOCK_DISABLE_RAMPCON)
IFX_INLINE void IfxClock_throttleSysPllClockInline(const IfxClock_PllThrottleConfig *pllThrottleConfig)
{
    uint8  pllStepsCount;
    uint32 timeoutCycleCount;

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_config);
#endif

    /*Start Pll ramp up sequence */
    for (pllStepsCount = 0; pllStepsCount < pllThrottleConfig->numOfSteps; pllStepsCount++)
    {                       /*iterate through number of pll steps */
        timeoutCycleCount = IFXCLOCK_PLL_K2DIV_COUNT << 5;

        while ((CLOCK_CCUSTAT.B.LCK != 0U) && timeoutCycleCount--)
        {}

        /*Now set the K2 divider value for the step corresponding to step count */
        CLOCK_SYSPLLCON1.B.K2DIV = pllThrottleConfig->pllSteps[pllStepsCount];

        IfxClock_waitWithWdtService(IFXCLOCK_SYSPLL_K2STEP_WAITTIME);
    }

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_run);
#endif
}


#endif

#if !defined(IFX_ILLD_PPU_USAGE)
IFX_INLINE void IfxClock_waitWithWdtService(float32 timeSec)
{
    uint32 stmCount          = (uint32)(IfxClock_getStmFrequency() * timeSec);
    uint64 stmCountBegin     = (uint64)CPU0_STM_ABS.U;
    uint16 cpuWdtPassword    = IfxWtu_getCpuWatchdogPassword();
    uint16 systemWdtPassword = IfxWtu_getSystemWatchdogPassword();

    while ((uint64)(CPU0_STM_ABS.U - stmCountBegin) < stmCount)
    {
        /* There is no need to check overflow of the STM timer.
         * When counter after overflow subtracted with counter before overflow,
         * the subtraction result will be as expected, as long as both are unsigned 32 bits
         * eg: stmCountBegin= 0xFFFFFFFE (before overflow)
         *     stmCountNow = 0x00000002 (before overflow)
         *     diff= stmCountNow - stmCountBegin = 4 as expected.*/
        IfxWtu_serviceCpuWatchdog(cpuWdtPassword);
        IfxWtu_serviceSystemWatchdog(systemWdtPassword);
    }
}


#endif

IFX_INLINE uint32 IfxClock_getRampFrequency(void)
{
    uint32 freq = 0U;

    /* Check if ramp is locked at top and return or if at base return 100Mhz */
    if (CLOCK_RAMPSTAT.B.SSTAT == IfxClock_RampSeqStatus_idle)
    {
        if (CLOCK_RAMPSTAT.B.FSTAT == IfxClock_RampFreqStatus_atTop)
        {
            /* Convert to Mhz and return */
            freq = (uint32)(((uint32)CLOCK_RAMPCON0.B.UFL) * (1000000U));
        }
        else if (CLOCK_RAMPSTAT.B.FSTAT == IfxClock_RampFreqStatus_atBase)
        {
            freq = (uint32)(100000000U);
        }
        else
        {
            /* Return 0 if freq is in between the base and UFL */
            freq = 0U;
        }
    }
    else
    {
        /* Return 0 if status is not idle */
        freq = 0U;
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_checkSysPllLock(void)
{
    if (CLOCK_SYSPLLSTAT.B.PLLLOCK == 1U)
    {
        return (uint32)(IfxClock_getSysSourceFrequency());
    }
    else
    {
        return 0U;
    }
}


IFX_INLINE uint32 IfxClock_checkPerPllLock(IfxClock_Fsource fsource)
{
    if (CLOCK_PERPLLSTAT.B.PLLLOCK == 1U)
    {
        return (uint32)(IfxClock_getPerSourceFrequency(fsource));
    }
    else
    {
        return 0U;
    }
}


IFX_INLINE void IfxClock_powerOnCrystalOsc(void)
{
    Ifx_CLOCK_OSCCON scuOsccon;
    uint8            initError         = 0;
    uint32           timeoutCycleCount = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

    scuOsccon.U = CLOCK_OSCCON.U;

#if (IFX_CFG_CLOCK_EXT_CLOCK == 1)
    scuOsccon.B.MODE = 2U;         /* external clock selected */
#else
    scuOsccon.B.MODE = 0U;         /*oscillator enabled */
#endif

    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {
        IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
    }

    CLOCK_OSCCON.U = scuOsccon.U;
    IFX_UNUSED_PARAMETER(initError)
}


IFX_INLINE void IfxClock_powerOnRampOsc(void)
{
    uint8  initError         = 0;
    uint32 timeoutCycleCount = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {
        IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
    }

    CLOCK_RAMPCON0.B.PWR = 1U;

    timeoutCycleCount    = IFXCLOCK_CCUCON_LCK_BIT_TIMEOUT_COUNT;

    while (CLOCK_RAMPSTAT.B.ACTIVE != 1U)
    {
        --timeoutCycleCount;
    }

    IFX_UNUSED_PARAMETER(timeoutCycleCount)
    IFX_UNUSED_PARAMETER(initError)
}


IFX_INLINE uint32 IfxClock_getSdmmcFrequency(void)
{
    uint32 freq    = 0U;
    uint8  clockOn = CLOCK_PERCCUCON1.B.SDMMCPERON;

    if (clockOn)
    {
        freq = (uint32)((IfxClock_getPerSourceFrequency(IfxClock_Fsource_2)) / 2U);
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getPerPllDcoFrequency(void)
{
    uint64               freq = 0U;
    Ifx_CLOCK_PERPLLCON0 perPllCon0;

    perPllCon0.U = CLOCK_PERPLLCON0.U;

    freq         = ((IFX_CFG_CLOCK_XTAL_FREQUENCY / (perPllCon0.B.PDIV + 1)) * (perPllCon0.B.NDIV + 1));

    return (uint32)freq;
}


IFX_INLINE uint32 IfxClock_getLethFrequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_SYSCCUCON1.B.LETHDIV;

    if (CLOCK_SYSCCUCON0.B.LPDIV == 0)
    {
        /*Not in low power mode */
        if (actualDiv)
        {
            freq = IfxClock_getSysSourceFrequency() / clkdiv[actualDiv];
        }
    }
    else
    {
        freq = IfxClock_getSysSourceFrequency() / 120;
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getLeth100Frequency(void)
{
    uint32 freq      = 0;
    uint8  actualDiv = CLOCK_PERCCUCON1.B.LETH100PERON;

    if (CLOCK_SYSCCUCON0.B.LPDIV == 0)
    {
        /*Not in low power mode */
        if (actualDiv)
        {
            freq = IfxClock_getPerPllFrequency2() / 2U;
        }
    }
    else
    {
        freq = IfxClock_getSysSourceFrequency() / 120;
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getCanXLhFrequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_SYSCCUCON1.B.CANXLHDIV;

    if (actualDiv)
    {
        freq = IfxClock_getSysSourceFrequency() / clkdiv[actualDiv];
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getErayFrequency(void)
{
    uint32 freq    = 0U;
    uint8  clockOn = CLOCK_PERCCUCON1.B.ERAYPERON;

    if (clockOn)
    {
        freq = (uint32)((IfxClock_getPerSourceFrequency(IfxClock_Fsource_1)) / 2U);
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getMt0Frequency(void)
{
    uint32 fmt0 = 0U;

    if (ERAY0_CLC.B.DISS == 0u) // Check if module clock is enable
    {
        uint32         fmicrotick = 0U;
        Ifx_ERAY_PRTC1 prtc1;
        prtc1.U = ERAY0_PRTC1.U;

        if ((prtc1.B.BRP == 0u) || (prtc1.B.BRP == 1u))
        {
            fmicrotick = 40000000u;   // 1 Micro tick= 25ns
        }
        else
        {
            fmicrotick = 20000000u;   // 1 Micro tick= 50ns
        }

        Ifx_ERAY_GTUC01 gtuc01;
        Ifx_ERAY_GTUC02 gtuc02;

        gtuc01.U = ERAY0_GTUC01.U;
        gtuc02.U = ERAY0_GTUC02.U;

        fmt0     = (gtuc02.B.MPC / gtuc01.B.UT) * fmicrotick;
    }

    return (uint32)fmt0;
}


IFX_INLINE uint32 IfxClock_getPpuFrequency(void)
{
    uint8  clkdiv[16] = {0, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_PERCCUCON0.B.PPUDIV;

    if (CLOCK_PERCCUCON0.B.PPUDIV == 0)
    {
        freq = 0;
    }
    else
    {
        if (actualDiv)
        {
            freq = IfxClock_getPpuSourceFrequency() / clkdiv[actualDiv];
        }
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getCanXLiFrequency(void)
{
    uint8  clkdiv[16] = {1, 1, 2, 3, 4, 5, 6, 6, 8, 8, 10, 10, 12, 12, 12, 15};
    uint32 freq       = 0;
    uint8  actualDiv  = CLOCK_PERCCUCON1.B.CANXLDIV;

    if (actualDiv)
    {
        freq = IfxClock_getPerSourceFrequency(IfxClock_Fsource_1) / clkdiv[actualDiv];
    }

    return freq;
}


IFX_INLINE uint32 IfxClock_getXspislFrequency(void)
{
    uint32 freq    = 0U;
    uint8  clockOn = CLOCK_PERCCUCON1.B.XSPISLDIV;

    if (clockOn == IfxClock_Xspisldiv_1)
    {
        freq = (uint32)(IfxClock_getPerSourceFrequency(IfxClock_Fsource_3));
    }
    else if (clockOn == IfxClock_Xspisldiv_2)
    {
        freq = (uint32)((IfxClock_getPerSourceFrequency(IfxClock_Fsource_3)) / 2U);
    }
    else if (clockOn == IfxClock_Xspisldiv_4)
    {
        freq = (uint32)((IfxClock_getPerSourceFrequency(IfxClock_Fsource_3)) / 4U);
    }
    else
    {
        /* do nothing */
    }

    return freq;
}


IFX_INLINE boolean IfxClock_configureRampUp(uint32 rampFreq)
{
    uint8              initError = 0;

    /* Configure the Ramp oscillator (RAMPCON UFL) for the desired Sys PLL frequency and enable CMD to ramp up */

    Ifx_CLOCK_RAMPCON0 rampcon;
    rampcon.U     = CLOCK_RAMPCON0.U;
    rampcon.B.UFL = rampFreq;
    rampcon.B.CMD = IfxClock_RampSeqCmd_rampUp;

    while (CLOCK_CCUSTAT.B.LCK != 0U)
    {}

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_config);
#endif
    CLOCK_RAMPCON0.U = rampcon.U;

#if (IFX_PROT_ENABLED == 1U)
    IfxApProt_setState((Ifx_PROT_PROT *)&CLOCK_PROTE, IfxApProt_State_run);
#endif

    {
        uint32 timeoutCycleCount;

        /* Wait for Ramp oscillator to reach the desired frequency */
        timeoutCycleCount = IFXCLOCK_PLL_RAMPOSC_TIMEOUT_COUNT;

        while ((IfxClock_getRampFreqStatus() != rampFreq) && (CLOCK_RAMPSTAT.B.FLLLOCK != 1))
        {
            IFXCLOCK_LOOP_TIMEOUT_CHECK(timeoutCycleCount, initError);
        }
    }

    return (boolean)initError;
}


IFX_INLINE uint32 IfxClock_getHsctFrequency(void)
{
    uint32 freq    = 0U;
    uint8  clockOn = CLOCK_PERCCUCON1.B.HSCTPERON;

    if (clockOn == TRUE)
    {
        freq = (uint32)(IfxClock_getPerPllDcoFrequency());
    }
    else
    {
        /* do nothing */
    }

    return freq;
}


#endif /* IFXCLOCK_H */
