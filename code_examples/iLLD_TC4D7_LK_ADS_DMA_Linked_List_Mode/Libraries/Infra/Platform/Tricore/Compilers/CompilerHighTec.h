/**
 * \file CompilerHighTec.h
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2019 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef COMPILERHIGHTEC_H
#define COMPILERHIGHTEC_H 1

/******************************************************************************/

#include <stddef.h>

/*Linker definitions which are specific to HighTec */
/* IFX_CFG_USE_COMPILER_DEFAULT_LINKER shall be defined in Ifx_Cfg.h
 * to use the default compiler linker varaibles and startup */
#ifndef IFX_CFG_USE_COMPILER_DEFAULT_LINKER

/*Start: Common definitions ********************************************** */
#define IFXCOMPILER_COMMON_LINKER_SYMBOLS()                                   \
    extern unsigned int __A0_MEM[];     /**< center of A0 addressable area */ \
    extern unsigned int __A1_MEM[];     /**< center of A1 addressable area */ \
    extern unsigned int __A8_MEM[];     /**< center of A8 addressable area */ \
    extern unsigned int __A9_MEM[];     /**< center of A9 addressable area */

/*End: Common definitions ************************************************ */

/*Start: Core 0 definitions ********************************************** */

/*C extern defintions */
#define IFXCOMPILER_CORE_LINKER_SYMBOLS(cpu)                                    \
    extern unsigned int __USTACK##cpu[];      /**< user stack end */            \
    extern unsigned int __ISTACK##cpu[];      /**< interrupt stack end */       \
    extern unsigned int __INTTAB_CPU##cpu[];  /**< Interrupt vector table */    \
    extern unsigned int __TRAPTAB_CPU##cpu[]; /**< trap table */                \
    extern unsigned int __CSA##cpu[];         /**< context save area 1 begin */ \
    extern unsigned int __CSA##cpu##_END[];   /**< context save area 1 begin */

#define __USTACK(cpu)      __USTACK##cpu
#define __ISTACK(cpu)      __ISTACK##cpu
#define __INTTAB_CPU(cpu)  __INTTAB_CPU##cpu
#define __TRAPTAB_CPU(cpu) __TRAPTAB_CPU##cpu
#define __CSA(cpu)         __CSA##cpu
#define __CSA_END(cpu)     __CSA##cpu##_END

/*Wrapper macros for the tool specific definitions */
#if defined(IFX_USE_SW_MANAGED_INT)
#define __INTTAB(cpu)      ((unsigned int)__INTTAB_CPU##cpu | (unsigned int)0x1FE0)
#else
#define __INTTAB(cpu)      __INTTAB_CPU##cpu
#endif /*defined(IFX_USE_SW_MANAGED_INT) */

#define __TRAPTAB(cpu)     __TRAPTAB_CPU##cpu

#define __SDATA1(cpu)      __A0_MEM
#define __SDATA2(cpu)      __A1_MEM
#define __SDATA3(cpu)      __A8_MEM
#define __SDATA4(cpu)      __A9_MEM

#endif /*IFX_CFG_USE_COMPILER_DEFAULT_LINKER*/

/******************************************************************************/
#ifndef IFX_INLINE
#define IFX_INLINE         static inline __attribute__ ((always_inline))            /*Makes the function always inlined */
#endif

#define IFX_PACKED         __attribute__ ((packed))

#define COMPILER_NAME      "HighTec"
#define COMPILER_VERSION   __VERSION__

#define COMPILER_REVISION  0

#define IFX_INTERRUPT_FAST IFX_INTERRUPT

#if defined(IFX_USE_SW_MANAGED_INT)

#ifndef IFX_INTERRUPT
#define IFX_INTERRUPT(isr, cpu, prio) void isr(void)
#endif

#else
/* *INDENT-OFF* */
#ifndef IFX_INTERRUPT
#define IFX_INTERRUPT(isr, cpu, prio) IFX_INTERRUPT_INTERNAL(isr, cpu, prio)
#endif
#endif /*defined(IFX_USE_SW_MANAGED_INT)*/

#ifndef IFX_INTERRUPT_INTERNAL
#ifdef IFX_USE_COMPILER_CONSTRUCTED_INT
#define IFX_INTERRUPT_INTERNAL2(isr, cpu, prio, u) \
  __attribute__ ((interrupt_handler)) \
  void __interrupt_handler_##cpu##u##prio (void)

#define IFX_INTERRUPT_INTERNAL(isr, cpu, prio) \
  IFX_INTERRUPT_INTERNAL2(isr, cpu, prio, _)

#else /* IFX_USE_COMPILER_CONSTRUCTED_INT */

/**
 * ISR functions registered by IFX_INTERRUPT are using the interrupt_handler
 * calling convention.
 */
#define IFX_INTERRUPT_FUNC __attribute__((interrupt_handler))

#define IFX_INTERRUPT_INTERNAL(isr, cpu, prio) \
__asm__ (                                                                      \
".altmacro\n"                                                                  \
".macro .int_entry.2 intEntryLabel, name\n"                                    \
"    .pushsection .\\intEntryLabel,\"ax\",@progbits\n"                         \
"    .align 5\n"                                                               \
"    __\\intEntryLabel :\n"                                                    \
"        svlcx\n"                                                              \
"        movh.a  %a14, hi:\\name\n"                                            \
"        lea     %a14, [%a14]lo:\\name\n"                                      \
"        ji      %a14\n"                                                       \
"        .org 32\n"                                                            \
"    .popsection\n"                                                            \
".endm\n"                                                                      \
".macro .int_entry.1 prio,cpu,u,name\n"                                        \
"    .int_entry.2 intvec_tc\\cpu\\u\\prio,(\\name)\n"                          \
".endm\n"                                                                      \
".macro .intr.entry name,cpu,prio\n"                                           \
"    .int_entry.1 %(\\prio),%(\\cpu),_,\\name\n"                               \
".endm\n"                                                                      \
".intr.entry "#isr","#cpu","#prio"\n"                                          \
".purgem .int_entry.2\n"                                                       \
".purgem .int_entry.1\n"                                                       \
".purgem .intr.entry\n");                                                      \
IFX_EXTERN IFX_INTERRUPT_FUNC void isr ();                                     \
IFX_INTERRUPT_FUNC void isr (void)

#endif /* IFX_USE_COMPILER_CONSTRUCTED_INT */
#endif /* IFX_INTERRUPT_INTERNAL */


/*******************************************************************************
 For the VM use-case we provide multiple variants of the IFX_INTERRUPT macro:

 IFX_INTERRUPT_VM
 - basically the same as IFX_INTERRUPT, but using the section naming convention
   of the VM use-case to create the intvec entry.

 IFX_INTERRUPT_VM_RFH
 - if predeclared, the ISR must have the following prototype:
   __attribute__((jump_and_link)) void isr_function(unsigned int d15);
 - the macro does the following:
   - attaches the jump_and_link attribute on the ISR function.
   - creates an interrupt vector table (intvec) entry as a section.
 - the intvec entry does the following:
   - saves the lower context
   - calls the ISR using JLI, passing the value of %d15 in %d4 in the first
     argument d15
   - if MSB of %d15 was zero, then returns from the exception (RFE),
     otherwise it will return from the hypervisor (RFH).
 - Since the ISR has attribute jump_and_link it will return by ji %a11 therefore
   it is up to the implementation of the ISR whether it will return to the
   intvec entry or if it handles the Return From Exception/Hypervisor sequence
   in place.
   In case it doesn't return to the intvec entry, it has to take care about
   restoration of the lower context too.

*******************************************************************************/

#define IFX_JL_FUNC __attribute__((jump_and_link))
#define IFX_INTERRUPT_VM_FUNC __attribute__((interrupt_handler))


#ifndef IFX_INTERRUPT_VM
#define IFX_INTERRUPT_VM(isr, cpu, vm, prio) \
    IFX_INTERRUPT_VM_INTERNAL(isr, cpu, vm, prio)
#endif

#ifndef IFX_INTERRUPT_VM_INTERNAL
#define IFX_INTERRUPT_VM_INTERNAL(isr, cpu, vm, prio) \
__asm__ (                                                                      \
".altmacro\n"                                                                  \
".macro .int_entry.2 intEntryLabel, name\n"                                    \
"    .pushsection .\\intEntryLabel,\"ax\",@progbits\n"                         \
"    .align 5\n"                                                               \
"    __\\intEntryLabel :\n"                                                    \
"        svlcx\n"                                                              \
"        movh.a  %a14, hi:\\name\n"                                            \
"        lea     %a14, [%a14]lo:\\name\n"                                      \
"        ji      %a14\n"                                                       \
"        .org 32\n"                                                            \
"    .popsection\n"                                                            \
".endm\n"                                                                      \
".macro .int_entry.1 prio,vm,cpu,u,name\n"                                     \
"    .int_entry.2 intvecvm_tc\\cpu\\u\\vm\\u\\prio,(\\name)\n"                 \
".endm\n"                                                                      \
".macro .intr.entry name,cpu,vm,prio\n"                                        \
"    .int_entry.1 %(\\prio),%(\\vm),%(\\cpu),_,\\name\n"                       \
".endm\n"                                                                      \
".intr.entry "#isr","#cpu","#vm","#prio"\n"                                    \
".purgem .int_entry.2\n"                                                       \
".purgem .int_entry.1\n"                                                       \
".purgem .intr.entry\n");                                                      \
IFX_EXTERN IFX_INTERRUPT_VM_FUNC void isr ();                                  \
IFX_INTERRUPT_VM_FUNC void isr (void)
#endif /* IFX_INTERRUPT_VM_INTERNAL */


#ifndef IFX_INTERRUPT_VM_RFH
#define IFX_INTERRUPT_VM_RFH(isr, cpu, vm, prio) \
    IFX_INTERRUPT_VM_RFH_INTERNAL(isr, cpu, vm, prio)
#endif

#ifndef IFX_INTERRUPT_VM_RFH_INTERNAL
#define IFX_INTERRUPT_VM_RFH_INTERNAL(isr, cpu, vm, prio) \
__asm__ (                                                                      \
".altmacro\n"                                                                  \
".macro .int_entry.2 intEntryLabel, name\n"                                    \
"    .pushsection .\\intEntryLabel,\"ax\",@progbits\n"                         \
"    .align 5\n"                                                               \
"    __\\intEntryLabel :\n"                                                    \
"        svlcx\n"                                                              \
"        movh.a  %a14, hi:\\name\n"                                            \
"        mov     %d4, %d15\n"                                                  \
"        lea     %a14, [%a14]lo:\\name\n"                                      \
"        jli     %a14\n"                                                       \
"        rslcx\n"                                                              \
"        jz.t %d15, 31, 1f\n"                                                  \
"        rfh\n"                                                                \
"1:\n"                                                                         \
"        rfe\n"                                                                \
"        .org 32\n"                                                            \
"    .popsection\n"                                                            \
".endm\n"                                                                      \
".macro .int_entry.1 prio,vm,cpu,u,name\n"                                     \
"    .int_entry.2 intvecvm_tc\\cpu\\u\\vm\\u\\prio,(\\name)\n"                 \
".endm\n"                                                                      \
".macro .intr.entry name,cpu,vm,prio\n"                                        \
"    .int_entry.1 %(\\prio),%(\\vm),%(\\cpu),_,\\name\n"                       \
".endm\n"                                                                      \
".intr.entry "#isr","#cpu","#vm","#prio"\n"                                    \
".purgem .int_entry.2\n"                                                       \
".purgem .int_entry.1\n"                                                       \
".purgem .intr.entry\n");                                                      \
IFX_EXTERN IFX_JL_FUNC void isr (unsigned int d15);                            \
IFX_JL_FUNC void isr (unsigned int d15)
#endif /* IFX_INTERRUPT_VM_INTVEC_RFH_BY_RV_INTERNAL */

/* *INDENT-ON* */

/******************************************************************************/

#define IFX_ALIGN(n) __attribute__ ((aligned(n)))

/******************************************************************************/
/*Memory qualifiers*/
#ifndef IFX_FAR_ABS
#define IFX_FAR_ABS __attribute__((fardata))
#endif

#ifndef IFX_NEAR_ABS
#define IFX_NEAR_ABS
#endif

#ifndef IFX_REL_A0
#define IFX_REL_A0 __attribute__((smalldata("a0")))
#endif

#ifndef IFX_REL_A1
#define IFX_REL_A1 __attribute__((smalldata("a1")))
#endif

#ifndef IFX_REL_A8
#define IFX_REL_A8 __attribute__((smalldata("a8")))
#endif

#ifndef IFX_REL_A9
#define IFX_REL_A9 __attribute__((smalldata("a9")))
#endif
/******************************************************************************/

#endif /* COMPILERHIGHTEC_H */
