/**
 * \file Ifx_Ssw.h
 * \brief Startup Software configuration. Can configure which core to be enabled.
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef IFX_SSW_H
#define IFX_SSW_H 1

/*******************************************************************************
**                      Includes                                              **
*******************************************************************************/
#include "Ifx_Ssw_Compilers.h"
#include "Ifx_Ssw_LegacySwCfg.h"

/******************************************************************************/
/*                          Macros                                            */
/******************************************************************************/

#ifndef IFX_CFG_SSW_ENABLE_TRICORE0
#define IFX_CFG_SSW_ENABLE_TRICORE0 (1U)
#endif

#ifndef IFX_CFG_SSW_ENABLE_TRICORE1
#define IFX_CFG_SSW_ENABLE_TRICORE1 (1U)
#endif

#ifndef IFX_CFG_SSW_ENABLE_TRICORE2
#define IFX_CFG_SSW_ENABLE_TRICORE2 (1U)
#endif

#ifndef IFX_CFG_SSW_ENABLE_TRICORE3
#define IFX_CFG_SSW_ENABLE_TRICORE3 (1U)
#endif

#ifndef IFX_CFG_SSW_ENABLE_TRICORE4
#define IFX_CFG_SSW_ENABLE_TRICORE4 (1U)
#endif

#ifndef IFX_CFG_SSW_ENABLE_TRICORE5
#define IFX_CFG_SSW_ENABLE_TRICORE5 (1U)
#endif

#ifndef IFX_CFG_SSW_PSW_DEFAULT
#define IFX_CFG_SSW_PSW_DEFAULT     (0x00000980u)
#endif

/** \brief Hook function to skip the startup routine and jump
 * to the user defined function
 * Note: Function calls are not to be used in this hook
 */
#ifndef IFX_CFG_SSW_SKIP_STARTUP_ROUTINE
#define IFX_CFG_SSW_SKIP_STARTUP_ROUTINE(cpu) /**< Hook function is empty if not configured*/
#endif

/******************************************************************************/
/*                          Typedefs                                          */
/******************************************************************************/
/** \brief Structure definition for the BMHD
 * Based on BMI and start address respective CRC and Inverted CRC values has to be calculated and updated.
 * CRC-32 polynomial as defined in the IEEE 802.3 standard is used to generate the CRC value. The CRC algorithm
 * treats input data as a stream of bits.
 *
 * Eg. To calculate the CRC data has to given in big-endian order.
 * for the below values:
 *    sal    = 	0xAE404800
 *    bmi    = 0x000E
 *    bmhdid = 0xB359
 *    stad   = 0xA0000000
 * CRC calculation:
 *    Input        = 0x0xAE404800B359000EA0000000
 *    CRC value    = 0x90380C26
 */
typedef struct
{
    unsigned int   sal;                 /**< \brief 0x000: System address of BMHD */
    unsigned short bmi;                 /**< \brief 0x004: Boot Mode Index (BMI)*/
    unsigned short bmhdid;              /**< \brief 0x006: Boot Mode Header ID (CODE) = B359H*/
    unsigned int   stad;                /**< \brief 0x008: User Code start address*/
    unsigned int   crc;                 /**< \brief 0x00C: Check Result for the BMI Header (offset 000H - 007H)*/
    unsigned int   reserved0[496];      /**< \brief 0x010: Reserved area */
    unsigned int   pw[8];               /**< \brief 0xFD0: Password protection (8 words)*/
    unsigned int   confirmation;        /**< \brief 0xFF0: 32-bit CODE, (always same)*/
    unsigned int   reserved1;           /**< \brief 0xFF4: Reserved area */
    unsigned int   confirmationCopy;    /**< \brief 0xFF8: 32-bit CODE, (always same)*/
} Ifx_Ssw_Bmhd;

/** \brief Structure definition for the USER CFG part of UCB
 * The user to configure the required values for the parameters part of the USER CFG Block
 */
typedef struct
{
    unsigned int rtcUserCfg;            /**< \brief 0x000: System address of rtcUserCfg*/
    unsigned int lockstepEna;           /**< \brief 0x004: User selection for LOCKSTEP activation */
    unsigned int reserved0;             /**< \brief 0x008: Reserved 0 */
    unsigned int smmEsr0CntCtrl;        /**< \brief 0x00C: User configuration value for SMM_EXTIF_ESR0CNTCTRL*/
    unsigned int pmsPadEsr2Con;         /**< \brief 0x010: User configuration value for PMS_PAD_ESR2CON*/
    unsigned int ramInit;               /**< \brief 0x014: User selection for RTC SRAMs initialization*/
    unsigned int lbistExe;              /**< \brief 0x018: User selection for LBIST execution*/
    unsigned int hostRamInit;           /**< \brief 0x01C: User slection for HOST RAM AUTO Init */
    unsigned int swapEna;               /**< \brief 0x020: User selection for SWAP activation*/
    unsigned int addrrEna;              /**< \brief 0x024: User selection for ADDRESS ROUTING*/
    unsigned int crcRtcUserCfg;         /**< \brief 0x028: Check Result for this table*/
    unsigned int reserved1[489];        /**< \brief 0x02C: Reserved area */
    unsigned int pw[8];                 /**< \brief 0xFD0: Password protection (8 words)*/
    unsigned int confirmation;          /**< \brief 0xFF0: 32-bit CODE, (always same)*/
} Ifx_Ssw_UserCfg;

/** \brief Structure definition for the CS USER CFG part of UCB
 * The user to configure the required values for the parameters part of the CS USER CFG Block
 */
typedef struct
{
    unsigned int csUserCfg;             /**< \brief 0x000: System address of Cs UserCfg */
    unsigned int bml;                   /**< \brief 0x004: Boot Mode Lock */
    unsigned int swapCsEna;             /**< \brief 0x008: User selection for SWAP activation */
    unsigned int csrmCfg;               /**< \brief 0x00C: CSRM boot selection */
    unsigned int cssRamInit;            /**< \brief 0x010: User selection for CS SRAMs initialization */
    unsigned int reserved0[2];          /**< \brief 0x014: Reserved */
    unsigned int crcCsUserCfg;          /**< \brief 0x01C: CRC Result for this table */
    unsigned int reserved1[492];        /**< \brief 0x02C: Reserved area */
    unsigned int pw[8];                 /**< \brief 0xFD0: Password protection (8 words)*/
    unsigned int confirmation;          /**< \brief 0xFF0: 32-bit CODE, (always same)*/
} Ifx_Ssw_CsUserCfg;

/******************************************************************************/
/*                         Exported prototypes                                */
/******************************************************************************/

void __Core1_start(void);

void __Core2_start(void);

void __Core3_start(void);

void __Core4_start(void);

void __Core5_start(void);

#endif /* IFX_SSW_H */
