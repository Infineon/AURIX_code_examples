/**
 * \file IfxVmt_cfg.h
 * \brief Vmt on-chip implementation data
 * \ingroup IfxLld_Vmt
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Vmt Vmt
 * \ingroup IfxLld
 * \defgroup IfxLld_Vmt_Impl Implementation
 * \ingroup IfxLld_Vmt
 * \defgroup IfxLld_Vmt_Std Standard Driver
 * \ingroup IfxLld_Vmt
 */

#ifndef IFXVMT_CFG_H
#define IFXVMT_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Cpu/Std/IfxCpu.h"
#include "_Impl/IfxSmu_cfg.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Number of MBIST Table items
 */
#define IFXVMT_NUM_MBIST_TABLE_ITEMS (228)
/** \brief Maximum number of tracked SRAM addresses (ETTR)
 */
#define IFXVMT_MAX_TRACKED_ADDRESSES (5)

/** \brief Number of DMTUs
 */
#define IFXVMT_NUM_DMTU              (7)

/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/

/** \brief MBIST Selection
 */

typedef enum
{
    IfxVmt_MbistSel_none               = -1,
    IfxVmt_MbistSel_cpu0Dspr           = 0,
    IfxVmt_MbistSel_cpu0Dtag           = 1,
    IfxVmt_MbistSel_cpu0Pspr           = 2,
    IfxVmt_MbistSel_cpu0Ptag           = 3,
    IfxVmt_MbistSel_cpu0DlmuStby       = 4,
    IfxVmt_MbistSel_cpu1Dspr           = 5,
    IfxVmt_MbistSel_cpu1Dtag           = 6,
    IfxVmt_MbistSel_cpu1Pspr           = 7,
    IfxVmt_MbistSel_cpu1Ptag           = 8,
    IfxVmt_MbistSel_cpu1DlmuStby       = 9,
    IfxVmt_MbistSel_cpu2Dspr           = 10,
    IfxVmt_MbistSel_cpu2Dtag           = 11,
    IfxVmt_MbistSel_cpu2Pspr           = 12,
    IfxVmt_MbistSel_cpu2Ptag           = 13,
    IfxVmt_MbistSel_cpu2DlmuStby       = 14,
    IfxVmt_MbistSel_cssKeyattr         = 271,
    IfxVmt_MbistSel_cssKeystore        = 272,
    IfxVmt_MbistSel_cssFifo0           = 273,
    IfxVmt_MbistSel_cssFifo1           = 274,
    IfxVmt_MbistSel_cssContext         = 275,
    IfxVmt_MbistSel_dma0               = 20,
    IfxVmt_MbistSel_mcds4pTbuf         = 21,
    IfxVmt_MbistSel_mcds4pLut          = 22,
    IfxVmt_MbistSel_lmu0               = 23,
    IfxVmt_MbistSel_lmu1               = 24,
    IfxVmt_MbistSel_lmu4               = 25,
    IfxVmt_MbistSel_lmu5               = 26,
    IfxVmt_MbistSel_lmu6               = 27,
    IfxVmt_MbistSel_lmu2               = 32,
    IfxVmt_MbistSel_lmu3               = 33,
    IfxVmt_MbistSel_lmu7               = 34,
    IfxVmt_MbistSel_lmu8               = 35,
    IfxVmt_MbistSel_lmu9               = 36,
    IfxVmt_MbistSel_dma1               = 37,
    IfxVmt_MbistSel_mcds2pTbuf         = 38,
    IfxVmt_MbistSel_mcds2pLut          = 39,
    IfxVmt_MbistSel_eray0Obf           = 40,
    IfxVmt_MbistSel_eray1Obf           = 41,
    IfxVmt_MbistSel_eray0IbfTbf        = 42,
    IfxVmt_MbistSel_eray1IbfTbf        = 43,
    IfxVmt_MbistSel_eray0Mbf           = 44,
    IfxVmt_MbistSel_eray1Mbf           = 45,
    IfxVmt_MbistSel_psi5               = 46,
    IfxVmt_MbistSel_cpu3Dspr           = 47,
    IfxVmt_MbistSel_cpu3Dtag           = 48,
    IfxVmt_MbistSel_cpu3Pspr           = 49,
    IfxVmt_MbistSel_cpu3Ptag           = 50,
    IfxVmt_MbistSel_cpu3DlmuStby       = 51,
    IfxVmt_MbistSel_cpu4Dspr           = 52,
    IfxVmt_MbistSel_cpu4Dtag           = 53,
    IfxVmt_MbistSel_cpu4Pspr           = 54,
    IfxVmt_MbistSel_cpu4Ptag           = 55,
    IfxVmt_MbistSel_cpu4DlmuStby       = 56,
    IfxVmt_MbistSel_cpu5Dspr           = 57,
    IfxVmt_MbistSel_cpu5Dtag           = 58,
    IfxVmt_MbistSel_cpu5Pspr           = 59,
    IfxVmt_MbistSel_cpu5Ptag           = 60,
    IfxVmt_MbistSel_cpu5DlmuStby       = 61,
    IfxVmt_MbistSel_mod9               = 64,
    IfxVmt_MbistSel_mod10              = 321,
    IfxVmt_MbistSel_hsphyPcs0          = 66,
    IfxVmt_MbistSel_hsphyPcs1          = 67,
    IfxVmt_MbistSel_hsphyPcs2          = 68,
    IfxVmt_MbistSel_pcie0DmaRbuf       = 69,
    IfxVmt_MbistSel_pcie0RxDq          = 70,
    IfxVmt_MbistSel_pcie0RxHq          = 71,
    IfxVmt_MbistSel_pcie0RetryBuf      = 72,
    IfxVmt_MbistSel_pcie0CmplBuf       = 73,
    IfxVmt_MbistSel_ethermacAxi        = 74,
    IfxVmt_MbistSel_ethermacDmi        = 75,
    IfxVmt_MbistSel_ethermac0Gcl       = 76,
    IfxVmt_MbistSel_ethermac1Gcl       = 77,
    IfxVmt_MbistSel_ethermac0RxEven    = 78,
    IfxVmt_MbistSel_ethermac0RxOdd     = 79,
    IfxVmt_MbistSel_ethermac1RxEven    = 80,
    IfxVmt_MbistSel_ethermac1RxOdd     = 81,
    IfxVmt_MbistSel_ethermac0TxEven    = 82,
    IfxVmt_MbistSel_ethermac0TxOdd     = 83,
    IfxVmt_MbistSel_ethermac1TxEven    = 84,
    IfxVmt_MbistSel_ethermac1TxOdd     = 85,
    IfxVmt_MbistSel_pcie1DmaRbuf       = 86,
    IfxVmt_MbistSel_pcie1RxDq          = 87,
    IfxVmt_MbistSel_pcie1RxHq          = 88,
    IfxVmt_MbistSel_pcie1RetryBuf      = 89,
    IfxVmt_MbistSel_pcie1CmplBuf       = 90,
    IfxVmt_MbistSel_ppuIctag           = 96,
    IfxVmt_MbistSel_ppuIcdata          = 97,
    IfxVmt_MbistSel_ppuDctag           = 98,
    IfxVmt_MbistSel_ppuDcdata          = 99,
    IfxVmt_MbistSel_ppuBc              = 100,
    IfxVmt_MbistSel_ppuPt              = 101,
    IfxVmt_MbistSel_ppuRttint          = 102,
    IfxVmt_MbistSel_ppuVecmem0         = 103,
    IfxVmt_MbistSel_ppuVecmem1         = 104,
    IfxVmt_MbistSel_ppuLlmramXl        = 105,
    IfxVmt_MbistSel_csrmDspr           = 384,
    IfxVmt_MbistSel_csrmDtag           = 385,
    IfxVmt_MbistSel_csrmPspr           = 386,
    IfxVmt_MbistSel_csrmPtag           = 387,
    IfxVmt_MbistSel_mod8               = 389,
    IfxVmt_MbistSel_cdsp0Data          = 134,
    IfxVmt_MbistSel_cdsp0Prog          = 135,
    IfxVmt_MbistSel_canxl              = 160,
    IfxVmt_MbistSel_dreRam             = 161,
    IfxVmt_MbistSel_mcan0              = 162,
    IfxVmt_MbistSel_mcan1              = 163,
    IfxVmt_MbistSel_mcan2              = 164,
    IfxVmt_MbistSel_mcan3              = 165,
    IfxVmt_MbistSel_mcan4              = 166,
    IfxVmt_MbistSel_sdmmc              = 167,
    IfxVmt_MbistSel_leth0Port0TxFifo   = 168,
    IfxVmt_MbistSel_leth0Port1TxFifo   = 169,
    IfxVmt_MbistSel_leth0Port2TxFifo   = 170,
    IfxVmt_MbistSel_leth0Port3TxFifo   = 171,
    IfxVmt_MbistSel_leth0Port0RxFifo   = 172,
    IfxVmt_MbistSel_leth0Port1RxFifo   = 173,
    IfxVmt_MbistSel_leth0Port2RxFifo   = 174,
    IfxVmt_MbistSel_leth0Port3RxFifo   = 175,
    IfxVmt_MbistSel_leth0Port0RxParser = 176,
    IfxVmt_MbistSel_leth0Port1RxParser = 177,
    IfxVmt_MbistSel_leth0Port2RxParser = 178,
    IfxVmt_MbistSel_leth0Port3RxParser = 179,
    IfxVmt_MbistSel_leth0Port0Gcl      = 180,
    IfxVmt_MbistSel_leth0Port1Gcl      = 181,
    IfxVmt_MbistSel_leth0Port2Gcl      = 182,
    IfxVmt_MbistSel_leth0Port3Gcl      = 183,
    IfxVmt_MbistSel_scrXraml           = 192,
}IfxVmt_MbistSel;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \brief Describes physical parameters of a SRAM memory
 */
typedef struct
{
    uint8  numBlocks;      /**< \brief number of SRAM blocks */
    uint16 dataSize;       /**< \brief Data Size of each memory block */
    uint8  eccSize;        /**< \brief ECC Size of each memory block */
    uint8  eccInvPos0;     /**< \brief First ECC bit which needs to be inverted */
    uint8  eccInvPos1;     /**< \brief Second ECC bit which needs to be inverted */
} IfxVmt_SramItem;

/** \brief Describes SSH Selection Config
 */
typedef struct
{
    uint32 vmtId;             /**< \brief DMTU instance */
    IfxVmt_MbistSel mc;       /**< \brief SSH Instance */
} IfxVmt_SshSelectionConfig;

/** \brief Describes number of SSH
 */
typedef struct
{
    uint8 nosshConfig;            /**< \brief number of SSH instance */

} IfxVmt_NumberOfSsh;
/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/

IFX_EXTERN IFX_CONST IfxVmt_SramItem IfxVmt_sramTable[IFXVMT_NUM_MBIST_TABLE_ITEMS];

IFX_EXTERN const IfxVmt_SshSelectionConfig IfxVmt_sramListG1[];

IFX_EXTERN const IfxVmt_SshSelectionConfig IfxVmt_sramListG2_1[];

IFX_EXTERN const IfxVmt_SshSelectionConfig IfxVmt_sramListG2_2[];


IFX_EXTERN const IfxVmt_NumberOfSsh IfxVmt_G1Size;

IFX_EXTERN const IfxVmt_NumberOfSsh IfxVmt_G2_1Size;

IFX_EXTERN const IfxVmt_NumberOfSsh IfxVmt_G2_2Size;

#endif /* IFXVMT_CFG_H */
