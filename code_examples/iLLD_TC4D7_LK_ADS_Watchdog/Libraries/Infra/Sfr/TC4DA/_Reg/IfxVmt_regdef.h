/**
 * \file IfxVmt_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_VMT/V0.2.4.1.3
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Vmt_Registers Vmt Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Vmt_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Vmt_Registers
 * 
 * \defgroup IfxSfr_Vmt_Registers_union Register unions
 * \ingroup IfxSfr_Vmt_Registers
 * 
 * \defgroup IfxSfr_Vmt_Registers_struct Memory map
 * \ingroup IfxSfr_Vmt_Registers
 */
#ifndef IFXVMT_REGDEF_H
#define IFXVMT_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Vmt_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_VMT_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_VMT_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_VMT_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_VMT_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_VMT_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_VMT_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_VMT_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_VMT_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_VMT_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_VMT_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_VMT_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_VMT_ACCEN_WRB_FPI_Bits;

/** \brief Nominal SSH CE alarm register */
typedef struct _Ifx_VMT_CEALARM_Bits
{
    __I  Ifx_UReg_32Bit CEALM0:1;          /**< \brief [0:0] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM1:1;          /**< \brief [1:1] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM2:1;          /**< \brief [2:2] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM3:1;          /**< \brief [3:3] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM4:1;          /**< \brief [4:4] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM5:1;          /**< \brief [5:5] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM6:1;          /**< \brief [6:6] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM7:1;          /**< \brief [7:7] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM8:1;          /**< \brief [8:8] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM9:1;          /**< \brief [9:9] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM10:1;         /**< \brief [10:10] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM11:1;         /**< \brief [11:11] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM12:1;         /**< \brief [12:12] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM13:1;         /**< \brief [13:13] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM14:1;         /**< \brief [14:14] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM15:1;         /**< \brief [15:15] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM16:1;         /**< \brief [16:16] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM17:1;         /**< \brief [17:17] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM18:1;         /**< \brief [18:18] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM19:1;         /**< \brief [19:19] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM20:1;         /**< \brief [20:20] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM21:1;         /**< \brief [21:21] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM22:1;         /**< \brief [22:22] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM23:1;         /**< \brief [23:23] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM24:1;         /**< \brief [24:24] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM25:1;         /**< \brief [25:25] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM26:1;         /**< \brief [26:26] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM27:1;         /**< \brief [27:27] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM28:1;         /**< \brief [28:28] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM29:1;         /**< \brief [29:29] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM30:1;         /**< \brief [30:30] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM31:1;         /**< \brief [31:31] SSH CE Alarm Occurred (rh) */
} Ifx_VMT_CEALARM_Bits;

/** \brief Cyber-secure SSH CE alarm register */
typedef struct _Ifx_VMT_CEALARMCS_Bits
{
    __I  Ifx_UReg_32Bit CEALM0:1;          /**< \brief [0:0] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM1:1;          /**< \brief [1:1] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM2:1;          /**< \brief [2:2] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM3:1;          /**< \brief [3:3] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM4:1;          /**< \brief [4:4] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM5:1;          /**< \brief [5:5] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM6:1;          /**< \brief [6:6] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM7:1;          /**< \brief [7:7] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM8:1;          /**< \brief [8:8] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM9:1;          /**< \brief [9:9] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM10:1;         /**< \brief [10:10] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM11:1;         /**< \brief [11:11] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM12:1;         /**< \brief [12:12] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM13:1;         /**< \brief [13:13] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM14:1;         /**< \brief [14:14] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM15:1;         /**< \brief [15:15] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM16:1;         /**< \brief [16:16] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM17:1;         /**< \brief [17:17] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM18:1;         /**< \brief [18:18] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM19:1;         /**< \brief [19:19] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM20:1;         /**< \brief [20:20] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM21:1;         /**< \brief [21:21] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM22:1;         /**< \brief [22:22] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM23:1;         /**< \brief [23:23] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM24:1;         /**< \brief [24:24] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM25:1;         /**< \brief [25:25] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM26:1;         /**< \brief [26:26] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM27:1;         /**< \brief [27:27] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM28:1;         /**< \brief [28:28] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM29:1;         /**< \brief [29:29] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM30:1;         /**< \brief [30:30] SSH CE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit CEALM31:1;         /**< \brief [31:31] SSH CE Alarm Occurred (rh) */
} Ifx_VMT_CEALARMCS_Bits;

/** \brief Clock control register */
typedef struct _Ifx_VMT_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_VMT_CLC_Bits;

/** \brief Module identification register */
typedef struct _Ifx_VMT_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_VMT_ID_Bits;

/** \brief MCCS i Cyber-secure alarm sources configuration register */
typedef struct _Ifx_VMT_MCCS_ALMSRCS_Bits
{
    __IO Ifx_Strict_32Bit SBE:1;           /**< \brief [0:0] Single Bit Error Notification - SBE (rw) */
    __IO Ifx_Strict_32Bit DBE:1;           /**< \brief [1:1] Double Bit Error Notification Enable - DBE (rw) */
    __IO Ifx_Strict_32Bit ADDRE:1;         /**< \brief [2:2] Address Error Notification Enable - ADDRE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit OPENE:1;         /**< \brief [4:4] SSH Operational Error Notification Enable - OPENE (rw) */
    __IO Ifx_Strict_32Bit MISCE:1;         /**< \brief [5:5] SSH Miscellaneous Errors Notification Enable - MISCE (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_VMT_MCCS_ALMSRCS_Bits;

/** \brief MCCS i Cyber-secure configuration register 0 */
typedef struct _Ifx_VMT_MCCS_CONFIG0_Bits
{
    __IO Ifx_Strict_32Bit ACCSTYPE:8;      /**< \brief [7:0] Access type - ACCSTYPE (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [11:8] \internal Reserved */
    __IO Ifx_Strict_32Bit NUMACCS:4;       /**< \brief [15:12] Number of accesses per address - NUMACCS (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MCCS_CONFIG0_Bits;

/** \brief MCCS i Cyber-secure configuration register 1 */
typedef struct _Ifx_VMT_MCCS_CONFIG1_Bits
{
    __IO Ifx_Strict_32Bit ACCSPAT:8;       /**< \brief [7:0] Access Pattern - ACCSPAT (rw) */
    __IO Ifx_Strict_32Bit SELFASTB:4;      /**< \brief [11:8] Select Fast Bit - SELFASTB (rw) */
    __IO Ifx_Strict_32Bit AG_MOD:4;        /**< \brief [15:12] Address Generator Mode - AG_MOD (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MCCS_CONFIG1_Bits;

/** \brief MCCS i Cyber-secure memory ECC detection register */
typedef struct _Ifx_VMT_MCCS_ECCD_Bits
{
    __IO Ifx_Strict_32Bit SERR:1;          /**< \brief [0:0] Error Detected - SERR (rwh) */
    __IO Ifx_Strict_32Bit CERR:1;          /**< \brief [1:1] Correctable Error Alarm Occurred - CERR (rwh) */
    __IO Ifx_Strict_32Bit UCERR:1;         /**< \brief [2:2] Uncorrectable Error Alarm Occurred - UCERR (rwh) */
    __IO Ifx_Strict_32Bit MERR:1;          /**< \brief [3:3] Miscellaneous Error Alarm Occurred - MERR (rwh) */
    __O  Ifx_Strict_32Bit TRC:1;           /**< \brief [4:4] Tracking Clear - TRC (w) */
    __I  Ifx_Strict_32Bit VAL:1;           /**< \brief [5:5] Valid Bits - VAL (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_VMT_MCCS_ECCD_Bits;

/** \brief MCCS i Cyber-secure ECC safety register */
typedef struct _Ifx_VMT_MCCS_ECCS_Bits
{
    __IO Ifx_Strict_32Bit CENE:1;          /**< \brief [0:0] ECC Correction Event Alarm Notification Enable - CENE (rw) */
    __IO Ifx_Strict_32Bit UCENE:1;         /**< \brief [1:1] Uncorrectable Alarm Notification Enable - UCENE (rw) */
    __IO Ifx_Strict_32Bit MENE:1;          /**< \brief [2:2] Miscellaneous Alarm Notification Enable: MENE (rw) */
    __IO Ifx_Strict_32Bit ECE:1;           /**< \brief [3:3] Error Correction Enable - ECE (rw) */
    __IO Ifx_Strict_32Bit TRE:1;           /**< \brief [4:4] Tracking Enable - TRE (rw) */
    __IO Ifx_Strict_32Bit BFLE:1;          /**< \brief [5:5] Bit Flip Enable - BFLE (rw) */
    __IO Ifx_Strict_32Bit SFLE:1;          /**< \brief [6:6] Signature Bit Flip Enables - SFLE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit ECCMAP:2;        /**< \brief [9:8] ECC Bit Mapping Mode - ECCMAP (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [10:10] \internal Reserved */
    __IO Ifx_Strict_32Bit SFFD:1;          /**< \brief [11:11] Safety Flip-Flop Diagnostics - SFFD (rwh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_VMT_MCCS_ECCS_Bits;

/** \brief MCCS i Cyber-secure error information register */
typedef struct _Ifx_VMT_MCCS_ERRINFO_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __I  Ifx_Strict_32Bit DBERR:1;         /**< \brief [1:1] Double Bit Error Detected - DBERR (rh) */
    __I  Ifx_Strict_32Bit ADDRERR:1;       /**< \brief [2:2] Address Fault Detected - ADDRERR (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __I  Ifx_Strict_32Bit MBI:3;           /**< \brief [6:4] Memory Block Index of Error(i) - MBI (rh) */
    __I  Ifx_Strict_32Bit :25;             /**< \brief [31:7] \internal Reserved */
} Ifx_VMT_MCCS_ERRINFO_Bits;

/** \brief MCCS i Cyber-secure error tracking register */
typedef struct _Ifx_VMT_MCCS_ETRR_Bits
{
    __I  Ifx_Strict_32Bit ADDR:15;         /**< \brief [14:0] Address of Error - ADDR (rh) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [31:15] \internal Reserved */
} Ifx_VMT_MCCS_ETRR_Bits;

/** \brief MCCS i Cyber-secure SSH safety faults status register */
typedef struct _Ifx_VMT_MCCS_FAULTSTS_Bits
{
    __IO Ifx_Strict_32Bit OPERR:8;         /**< \brief [7:0] SSH Critical Operation Error Occurred - OPERR (rwh) */
    __IO Ifx_Strict_32Bit MISCERR:6;       /**< \brief [13:8] SSH Miscellaneous Error Status- MISCERR (rwh) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_VMT_MCCS_FAULTSTS_Bits;

/** \brief MCCS i  Cyber-secure MBIST control register */
typedef struct _Ifx_VMT_MCCS_MCONTROL_Bits
{
    __IO Ifx_Strict_32Bit START:1;         /**< \brief [0:0] START - START (rw) */
    __IO Ifx_Strict_32Bit RESUME:1;        /**< \brief [1:1] Resume failed test - RESUME (rwh) */
    __IO Ifx_Strict_32Bit ESTF:1;          /**< \brief [2:2] Enable Sticky Fail Bit - ESTF (rw) */
    __IO Ifx_Strict_32Bit DIR:1;           /**< \brief [3:3] Direction Select - DIR (rw) */
    __IO Ifx_Strict_32Bit DINIT:1;         /**< \brief [4:4] Data Initialization Enable - DINIT (rw) */
    __IO Ifx_Strict_32Bit RCADR:1;         /**< \brief [5:5] Fast Row / Fast Column Addressing Scheme Select - RCADR (rw) */
    __IO Ifx_Strict_32Bit ROWTOG:1;        /**< \brief [6:6] Row toggling - ROWTOG (rw) */
    __IO Ifx_Strict_32Bit BITTOG:1;        /**< \brief [7:7] Bit toggling - BITTOG (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [8:8] \internal Reserved */
    __IO Ifx_Strict_32Bit FAILDMP:1;       /**< \brief [9:9] Fail bit map dump - FAILDMP (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [10:10] \internal Reserved */
    __IO Ifx_Strict_32Bit INJERR:1;        /**< \brief [11:11] Inject Error - INJERR (rw) */
    __IO Ifx_Strict_32Bit INIT:1;          /**< \brief [12:12] Initialize (rw) */
    __IO Ifx_Strict_32Bit GATH:1;          /**< \brief [13:13] Gather (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [14:14] \internal Reserved */
    __IO Ifx_Strict_32Bit SRAM_CLR:1;      /**< \brief [15:15] Clear the SRAM - SRAM_CLR (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MCCS_MCONTROL_Bits;

/** \brief MCCS i Cyber-secure status register */
typedef struct _Ifx_VMT_MCCS_MSTATUS_Bits
{
    __I  Ifx_Strict_32Bit DONE:1;          /**< \brief [0:0] DONE (rh) */
    __I  Ifx_Strict_32Bit FAIL:1;          /**< \brief [1:1] FAIL (rh) */
    __I  Ifx_Strict_32Bit FDA:1;           /**< \brief [2:2] Fail Dump Available (rh) */
    __I  Ifx_Strict_32Bit SFAIL:1;         /**< \brief [3:3] Sticky Fail Bit (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [4:4] \internal Reserved */
    __I  Ifx_Strict_32Bit ADD_ERR:1;       /**< \brief [5:5] Address Error Detected During March Test (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_VMT_MCCS_MSTATUS_Bits;

/** \brief MCCS i Cyber-secure range register, single address mode */
typedef struct _Ifx_VMT_MCCS_RANGE_Bits
{
    __IO Ifx_Strict_32Bit ADDR:15;         /**< \brief [14:0] Address - ADDR (rw) */
    __IO Ifx_Strict_32Bit RAEN:1;          /**< \brief [15:15] Range Enable - RAEN (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MCCS_RANGE_Bits;

/** \brief MCCS i Cyber-secure read data and bit flip register 0 */
typedef struct _Ifx_VMT_MCCS_RDBFL_Bits
{
    __IO Ifx_Strict_32Bit WDATA:16;        /**< \brief [15:0] Word Data - WDATA (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MCCS_RDBFL_Bits;

/** \brief MCCS i  Cyber-secure revision ID register */
typedef struct _Ifx_VMT_MCCS_REVID_Bits
{
    __I  Ifx_Strict_32Bit REV_ID:16;       /**< \brief [15:0] Revision Identifier - REV_ID (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MCCS_REVID_Bits;

/** \brief MC i Nominal alarm sources configuration register */
typedef struct _Ifx_VMT_MC_ALMSRCS_Bits
{
    __IO Ifx_Strict_32Bit SBE:1;           /**< \brief [0:0] Single Bit Error Notification - SBE (rw) */
    __IO Ifx_Strict_32Bit DBE:1;           /**< \brief [1:1] Double Bit Error Notification Enable - DBE (rw) */
    __IO Ifx_Strict_32Bit ADDRE:1;         /**< \brief [2:2] Address Error Notification Enable - ADDRE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit OPENE:1;         /**< \brief [4:4] SSH Operational Error Notification Enable - OPENE (rw) */
    __IO Ifx_Strict_32Bit MISCE:1;         /**< \brief [5:5] SSH Miscellaneous Errors Notification Enable - MISCE (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_VMT_MC_ALMSRCS_Bits;

/** \brief MC i Nominal configuration register 0 */
typedef struct _Ifx_VMT_MC_CONFIG0_Bits
{
    __IO Ifx_Strict_32Bit ACCSTYPE:8;      /**< \brief [7:0] Access type - ACCSTYPE (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [11:8] \internal Reserved */
    __IO Ifx_Strict_32Bit NUMACCS:4;       /**< \brief [15:12] Number of accesses per address - NUMACCS (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MC_CONFIG0_Bits;

/** \brief MC i Nominal configuration register 1 */
typedef struct _Ifx_VMT_MC_CONFIG1_Bits
{
    __IO Ifx_Strict_32Bit ACCSPAT:8;       /**< \brief [7:0] Access Pattern - ACCSPAT (rw) */
    __IO Ifx_Strict_32Bit SELFASTB:4;      /**< \brief [11:8] Select Fast Bit - SELFASTB (rw) */
    __IO Ifx_Strict_32Bit AG_MOD:4;        /**< \brief [15:12] Address Generator Mode - AG_MOD (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MC_CONFIG1_Bits;

/** \brief MC i Nominal Memory ECC detection register */
typedef struct _Ifx_VMT_MC_ECCD_Bits
{
    __IO Ifx_Strict_32Bit SERR:1;          /**< \brief [0:0] Error Detected - SERR (rwh) */
    __IO Ifx_Strict_32Bit CERR:1;          /**< \brief [1:1] Correctable Error Alarm Occurred - CERR (rwh) */
    __IO Ifx_Strict_32Bit UCERR:1;         /**< \brief [2:2] Uncorrectable Error Alarm Occurred - UCERR (rwh) */
    __IO Ifx_Strict_32Bit MERR:1;          /**< \brief [3:3] Miscellaneous Error Alarm Occurred - MERR (rwh) */
    __O  Ifx_Strict_32Bit TRC:1;           /**< \brief [4:4] Tracking Clear - TRC (w) */
    __I  Ifx_Strict_32Bit VAL:1;           /**< \brief [5:5] Valid Bits - VAL (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_VMT_MC_ECCD_Bits;

/** \brief MC i Nominal ECC safety register */
typedef struct _Ifx_VMT_MC_ECCS_Bits
{
    __IO Ifx_Strict_32Bit CENE:1;          /**< \brief [0:0] ECC Correction Event Alarm Notification Enable - CENE (rw) */
    __IO Ifx_Strict_32Bit UCENE:1;         /**< \brief [1:1] Uncorrectable Alarm Notification Enable (rw) */
    __IO Ifx_Strict_32Bit MENE:1;          /**< \brief [2:2] Miscellaneous Alarm Notification Enable: MENE (rw) */
    __IO Ifx_Strict_32Bit ECE:1;           /**< \brief [3:3] Error Correction Enable - ECE (rw) */
    __IO Ifx_Strict_32Bit TRE:1;           /**< \brief [4:4] Tracking Enable - TRE (rw) */
    __IO Ifx_Strict_32Bit BFLE:1;          /**< \brief [5:5] Bit Flip Enable - BFLE (rw) */
    __IO Ifx_Strict_32Bit SFLE:1;          /**< \brief [6:6] Signature Bit Flip Enables - SFLE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit ECCMAP:2;        /**< \brief [9:8] ECC Bit Mapping Mode - ECCMAP (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [10:10] \internal Reserved */
    __IO Ifx_Strict_32Bit SFFD:1;          /**< \brief [11:11] Safety Flip-Flop Diagnostics - SFFD (rwh) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_VMT_MC_ECCS_Bits;

/** \brief MC i  Nominal error information register */
typedef struct _Ifx_VMT_MC_ERRINFO_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __I  Ifx_Strict_32Bit DBERR:1;         /**< \brief [1:1] Double Bit Error Detected - DBERR (rh) */
    __I  Ifx_Strict_32Bit ADDRERR:1;       /**< \brief [2:2] Address Fault Detected - ADDRERR (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __I  Ifx_Strict_32Bit MBI:3;           /**< \brief [6:4] Memory Block Index of Error - MBI (rh) */
    __I  Ifx_Strict_32Bit :25;             /**< \brief [31:7] \internal Reserved */
} Ifx_VMT_MC_ERRINFO_Bits;

/** \brief MC i Nominal error tracking register */
typedef struct _Ifx_VMT_MC_ETRR_Bits
{
    __I  Ifx_Strict_32Bit ADDR:15;         /**< \brief [14:0] Address of Error - ADDR (rh) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [31:15] \internal Reserved */
} Ifx_VMT_MC_ETRR_Bits;

/** \brief MC i  Nominal SSH safety faults status register */
typedef struct _Ifx_VMT_MC_FAULTSTS_Bits
{
    __IO Ifx_Strict_32Bit OPERR:8;         /**< \brief [7:0] SSH Critical Operation Error Status - OPERR (rwh) */
    __IO Ifx_Strict_32Bit MISCERR:6;       /**< \brief [13:8] SSH Miscellaneous Error Status - MISCERR (rwh) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_VMT_MC_FAULTSTS_Bits;

/** \brief MC i Nominal MBIST control register */
typedef struct _Ifx_VMT_MC_MCONTROL_Bits
{
    __IO Ifx_Strict_32Bit START:1;         /**< \brief [0:0] START - START (rw) */
    __IO Ifx_Strict_32Bit RESUME:1;        /**< \brief [1:1] Resume failed test - RESUME (rwh) */
    __IO Ifx_Strict_32Bit ESTF:1;          /**< \brief [2:2] Enable Sticky Fail Bit - ESTF (rw) */
    __IO Ifx_Strict_32Bit DIR:1;           /**< \brief [3:3] Direction Select - DIR (rw) */
    __IO Ifx_Strict_32Bit DINIT:1;         /**< \brief [4:4] Data Initialization Enable - DINIT (rw) */
    __IO Ifx_Strict_32Bit RCADR:1;         /**< \brief [5:5] Fast Row / Fast Column Addressing Scheme Select - RCADR (rw) */
    __IO Ifx_Strict_32Bit ROWTOG:1;        /**< \brief [6:6] Row toggling - ROWTOG (rw) */
    __IO Ifx_Strict_32Bit BITTOG:1;        /**< \brief [7:7] Bit toggling - BITTOG (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [8:8] \internal Reserved */
    __IO Ifx_Strict_32Bit FAILDMP:1;       /**< \brief [9:9] Fail bit map dump (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [10:10] \internal Reserved */
    __IO Ifx_Strict_32Bit INJERR:1;        /**< \brief [11:11] Inject Error - INJERR (rw) */
    __IO Ifx_Strict_32Bit INIT:1;          /**< \brief [12:12] Initialize (rw) */
    __IO Ifx_Strict_32Bit GATH:1;          /**< \brief [13:13] Gather (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [14:14] \internal Reserved */
    __IO Ifx_Strict_32Bit SRAM_CLR:1;      /**< \brief [15:15] Clear the SRAM - SRAM_CLR (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MC_MCONTROL_Bits;

/** \brief MC i Nominal status register */
typedef struct _Ifx_VMT_MC_MSTATUS_Bits
{
    __I  Ifx_Strict_32Bit DONE:1;          /**< \brief [0:0] DONE (rh) */
    __I  Ifx_Strict_32Bit FAIL:1;          /**< \brief [1:1] FAIL (rh) */
    __I  Ifx_Strict_32Bit FDA:1;           /**< \brief [2:2] Fail Dump Available (rh) */
    __I  Ifx_Strict_32Bit SFAIL:1;         /**< \brief [3:3] Sticky Fail Bit (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [4:4] \internal Reserved */
    __I  Ifx_Strict_32Bit ADD_ERR:1;       /**< \brief [5:5] Address Error Detected During March Test (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_VMT_MC_MSTATUS_Bits;

/** \brief MC i Nominal range register, single address mode */
typedef struct _Ifx_VMT_MC_RANGE_Bits
{
    __IO Ifx_Strict_32Bit ADDR:15;         /**< \brief [14:0] Address - ADDR (rw) */
    __IO Ifx_Strict_32Bit RAEN:1;          /**< \brief [15:15] Range Enable - RAEN (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MC_RANGE_Bits;

/** \brief MC i Nominal read data and bit flip register y */
typedef struct _Ifx_VMT_MC_RDBFL_Bits
{
    __IO Ifx_Strict_32Bit WDATA:16;        /**< \brief [15:0] Word Data - WDATA (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MC_RDBFL_Bits;

/** \brief MC i Nominal revision ID register */
typedef struct _Ifx_VMT_MC_REVID_Bits
{
    __I  Ifx_Strict_32Bit REV_ID:16;       /**< \brief [15:0] Revision Identifier - REV_ID (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_VMT_MC_REVID_Bits;

/** \brief Nominal SSH ME alarm register */
typedef struct _Ifx_VMT_MEALARM_Bits
{
    __I  Ifx_UReg_32Bit MEALM0:1;          /**< \brief [0:0] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM1:1;          /**< \brief [1:1] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM2:1;          /**< \brief [2:2] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM3:1;          /**< \brief [3:3] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM4:1;          /**< \brief [4:4] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM5:1;          /**< \brief [5:5] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM6:1;          /**< \brief [6:6] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM7:1;          /**< \brief [7:7] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM8:1;          /**< \brief [8:8] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM9:1;          /**< \brief [9:9] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM10:1;         /**< \brief [10:10] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM11:1;         /**< \brief [11:11] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM12:1;         /**< \brief [12:12] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM13:1;         /**< \brief [13:13] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM14:1;         /**< \brief [14:14] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM15:1;         /**< \brief [15:15] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM16:1;         /**< \brief [16:16] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM17:1;         /**< \brief [17:17] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM18:1;         /**< \brief [18:18] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM19:1;         /**< \brief [19:19] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM20:1;         /**< \brief [20:20] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM21:1;         /**< \brief [21:21] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM22:1;         /**< \brief [22:22] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM23:1;         /**< \brief [23:23] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM24:1;         /**< \brief [24:24] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM25:1;         /**< \brief [25:25] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM26:1;         /**< \brief [26:26] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM27:1;         /**< \brief [27:27] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM28:1;         /**< \brief [28:28] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM29:1;         /**< \brief [29:29] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM30:1;         /**< \brief [30:30] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM31:1;         /**< \brief [31:31] SSH ME Alarm Occurred (rh) */
} Ifx_VMT_MEALARM_Bits;

/** \brief Cyber-Secure SSH ME alarm register */
typedef struct _Ifx_VMT_MEALARMCS_Bits
{
    __I  Ifx_UReg_32Bit MEALM0:1;          /**< \brief [0:0] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM1:1;          /**< \brief [1:1] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM2:1;          /**< \brief [2:2] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM3:1;          /**< \brief [3:3] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM4:1;          /**< \brief [4:4] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM5:1;          /**< \brief [5:5] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM6:1;          /**< \brief [6:6] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM7:1;          /**< \brief [7:7] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM8:1;          /**< \brief [8:8] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM9:1;          /**< \brief [9:9] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM10:1;         /**< \brief [10:10] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM11:1;         /**< \brief [11:11] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM12:1;         /**< \brief [12:12] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM13:1;         /**< \brief [13:13] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM14:1;         /**< \brief [14:14] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM15:1;         /**< \brief [15:15] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM16:1;         /**< \brief [16:16] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM17:1;         /**< \brief [17:17] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM18:1;         /**< \brief [18:18] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM19:1;         /**< \brief [19:19] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM20:1;         /**< \brief [20:20] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM21:1;         /**< \brief [21:21] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM22:1;         /**< \brief [22:22] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM23:1;         /**< \brief [23:23] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM24:1;         /**< \brief [24:24] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM25:1;         /**< \brief [25:25] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM26:1;         /**< \brief [26:26] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM27:1;         /**< \brief [27:27] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM28:1;         /**< \brief [28:28] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM29:1;         /**< \brief [29:29] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM30:1;         /**< \brief [30:30] SSH ME Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit MEALM31:1;         /**< \brief [31:31] SSH ME Alarm Occurred (rh) */
} Ifx_VMT_MEALARMCS_Bits;

/** \brief Nominal memory test done status register */
typedef struct _Ifx_VMT_MEMDONE_Bits
{
    __I  Ifx_UReg_32Bit DONE0:1;           /**< \brief [0:0] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE1:1;           /**< \brief [1:1] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE2:1;           /**< \brief [2:2] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE3:1;           /**< \brief [3:3] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE4:1;           /**< \brief [4:4] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE5:1;           /**< \brief [5:5] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE6:1;           /**< \brief [6:6] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE7:1;           /**< \brief [7:7] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE8:1;           /**< \brief [8:8] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE9:1;           /**< \brief [9:9] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE10:1;          /**< \brief [10:10] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE11:1;          /**< \brief [11:11] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE12:1;          /**< \brief [12:12] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE13:1;          /**< \brief [13:13] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE14:1;          /**< \brief [14:14] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE15:1;          /**< \brief [15:15] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE16:1;          /**< \brief [16:16] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE17:1;          /**< \brief [17:17] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE18:1;          /**< \brief [18:18] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE19:1;          /**< \brief [19:19] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE20:1;          /**< \brief [20:20] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE21:1;          /**< \brief [21:21] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE22:1;          /**< \brief [22:22] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE23:1;          /**< \brief [23:23] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE24:1;          /**< \brief [24:24] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE25:1;          /**< \brief [25:25] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE26:1;          /**< \brief [26:26] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE27:1;          /**< \brief [27:27] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE28:1;          /**< \brief [28:28] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE29:1;          /**< \brief [29:29] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE30:1;          /**< \brief [30:30] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE31:1;          /**< \brief [31:31] Memory Test Done Status $n (rh) */
} Ifx_VMT_MEMDONE_Bits;

/** \brief Cyber-secure memory test done status register */
typedef struct _Ifx_VMT_MEMDONECS_Bits
{
    __I  Ifx_UReg_32Bit DONE0:1;           /**< \brief [0:0] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE1:1;           /**< \brief [1:1] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE2:1;           /**< \brief [2:2] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE3:1;           /**< \brief [3:3] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE4:1;           /**< \brief [4:4] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE5:1;           /**< \brief [5:5] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE6:1;           /**< \brief [6:6] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE7:1;           /**< \brief [7:7] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE8:1;           /**< \brief [8:8] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE9:1;           /**< \brief [9:9] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE10:1;          /**< \brief [10:10] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE11:1;          /**< \brief [11:11] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE12:1;          /**< \brief [12:12] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE13:1;          /**< \brief [13:13] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE14:1;          /**< \brief [14:14] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE15:1;          /**< \brief [15:15] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE16:1;          /**< \brief [16:16] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE17:1;          /**< \brief [17:17] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE18:1;          /**< \brief [18:18] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE19:1;          /**< \brief [19:19] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE20:1;          /**< \brief [20:20] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE21:1;          /**< \brief [21:21] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE22:1;          /**< \brief [22:22] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE23:1;          /**< \brief [23:23] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE24:1;          /**< \brief [24:24] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE25:1;          /**< \brief [25:25] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE26:1;          /**< \brief [26:26] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE27:1;          /**< \brief [27:27] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE28:1;          /**< \brief [28:28] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE29:1;          /**< \brief [29:29] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE30:1;          /**< \brief [30:30] Memory Test Done Status $n (rh) */
    __I  Ifx_UReg_32Bit DONE31:1;          /**< \brief [31:31] Memory Test Done Status $n (rh) */
} Ifx_VMT_MEMDONECS_Bits;

/** \brief Nominal memory test FDA status register */
typedef struct _Ifx_VMT_MEMFDA_Bits
{
    __I  Ifx_UReg_32Bit FDA0:1;            /**< \brief [0:0] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA1:1;            /**< \brief [1:1] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA2:1;            /**< \brief [2:2] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA3:1;            /**< \brief [3:3] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA4:1;            /**< \brief [4:4] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA5:1;            /**< \brief [5:5] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA6:1;            /**< \brief [6:6] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA7:1;            /**< \brief [7:7] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA8:1;            /**< \brief [8:8] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA9:1;            /**< \brief [9:9] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA10:1;           /**< \brief [10:10] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA11:1;           /**< \brief [11:11] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA12:1;           /**< \brief [12:12] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA13:1;           /**< \brief [13:13] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA14:1;           /**< \brief [14:14] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA15:1;           /**< \brief [15:15] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA16:1;           /**< \brief [16:16] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA17:1;           /**< \brief [17:17] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA18:1;           /**< \brief [18:18] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA19:1;           /**< \brief [19:19] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA20:1;           /**< \brief [20:20] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA21:1;           /**< \brief [21:21] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA22:1;           /**< \brief [22:22] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA23:1;           /**< \brief [23:23] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA24:1;           /**< \brief [24:24] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA25:1;           /**< \brief [25:25] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA26:1;           /**< \brief [26:26] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA27:1;           /**< \brief [27:27] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA28:1;           /**< \brief [28:28] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA29:1;           /**< \brief [29:29] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA30:1;           /**< \brief [30:30] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA31:1;           /**< \brief [31:31] Memory Test FDA Status (rh) */
} Ifx_VMT_MEMFDA_Bits;

/** \brief Cyber-secure memory test FDA status register */
typedef struct _Ifx_VMT_MEMFDACS_Bits
{
    __I  Ifx_UReg_32Bit FDA0:1;            /**< \brief [0:0] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA1:1;            /**< \brief [1:1] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA2:1;            /**< \brief [2:2] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA3:1;            /**< \brief [3:3] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA4:1;            /**< \brief [4:4] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA5:1;            /**< \brief [5:5] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA6:1;            /**< \brief [6:6] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA7:1;            /**< \brief [7:7] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA8:1;            /**< \brief [8:8] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA9:1;            /**< \brief [9:9] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA10:1;           /**< \brief [10:10] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA11:1;           /**< \brief [11:11] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA12:1;           /**< \brief [12:12] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA13:1;           /**< \brief [13:13] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA14:1;           /**< \brief [14:14] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA15:1;           /**< \brief [15:15] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA16:1;           /**< \brief [16:16] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA17:1;           /**< \brief [17:17] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA18:1;           /**< \brief [18:18] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA19:1;           /**< \brief [19:19] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA20:1;           /**< \brief [20:20] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA21:1;           /**< \brief [21:21] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA22:1;           /**< \brief [22:22] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA23:1;           /**< \brief [23:23] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA24:1;           /**< \brief [24:24] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA25:1;           /**< \brief [25:25] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA26:1;           /**< \brief [26:26] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA27:1;           /**< \brief [27:27] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA28:1;           /**< \brief [28:28] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA29:1;           /**< \brief [29:29] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA30:1;           /**< \brief [30:30] Memory Test FDA Status (rh) */
    __I  Ifx_UReg_32Bit FDA31:1;           /**< \brief [31:31] Memory Test FDA Status (rh) */
} Ifx_VMT_MEMFDACS_Bits;

/** \brief Nominal memory mapping enable register */
typedef struct _Ifx_VMT_MEMMAP_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Memory mapping $n (rwh) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Memory mapping $n (rwh) */
} Ifx_VMT_MEMMAP_Bits;

/** \brief Cyber-secure memory mapping enable register */
typedef struct _Ifx_VMT_MEMMAPCS_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Memory mapping n (rwh) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Memory mapping n (rwh) */
} Ifx_VMT_MEMMAPCS_Bits;

/** \brief Nominal memory status register */
typedef struct _Ifx_VMT_MEMSTAT_Bits
{
    __I  Ifx_UReg_32Bit AIU0:1;            /**< \brief [0:0] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU1:1;            /**< \brief [1:1] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU2:1;            /**< \brief [2:2] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU3:1;            /**< \brief [3:3] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU4:1;            /**< \brief [4:4] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU5:1;            /**< \brief [5:5] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU6:1;            /**< \brief [6:6] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU7:1;            /**< \brief [7:7] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU8:1;            /**< \brief [8:8] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU9:1;            /**< \brief [9:9] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU10:1;           /**< \brief [10:10] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU11:1;           /**< \brief [11:11] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU12:1;           /**< \brief [12:12] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU13:1;           /**< \brief [13:13] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU14:1;           /**< \brief [14:14] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU15:1;           /**< \brief [15:15] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU16:1;           /**< \brief [16:16] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU17:1;           /**< \brief [17:17] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU18:1;           /**< \brief [18:18] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU19:1;           /**< \brief [19:19] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU20:1;           /**< \brief [20:20] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU21:1;           /**< \brief [21:21] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU22:1;           /**< \brief [22:22] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU23:1;           /**< \brief [23:23] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU24:1;           /**< \brief [24:24] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU25:1;           /**< \brief [25:25] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU26:1;           /**< \brief [26:26] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU27:1;           /**< \brief [27:27] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU28:1;           /**< \brief [28:28] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU29:1;           /**< \brief [29:29] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU30:1;           /**< \brief [30:30] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU31:1;           /**< \brief [31:31] Partial Autoinitialization of Cache Partition Underway $n (rh) */
} Ifx_VMT_MEMSTAT_Bits;

/** \brief Cyber-secure memory status register */
typedef struct _Ifx_VMT_MEMSTATCS_Bits
{
    __I  Ifx_UReg_32Bit AIU0:1;            /**< \brief [0:0] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU1:1;            /**< \brief [1:1] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU2:1;            /**< \brief [2:2] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU3:1;            /**< \brief [3:3] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU4:1;            /**< \brief [4:4] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU5:1;            /**< \brief [5:5] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU6:1;            /**< \brief [6:6] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU7:1;            /**< \brief [7:7] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU8:1;            /**< \brief [8:8] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU9:1;            /**< \brief [9:9] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU10:1;           /**< \brief [10:10] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU11:1;           /**< \brief [11:11] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU12:1;           /**< \brief [12:12] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU13:1;           /**< \brief [13:13] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU14:1;           /**< \brief [14:14] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU15:1;           /**< \brief [15:15] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU16:1;           /**< \brief [16:16] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU17:1;           /**< \brief [17:17] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU18:1;           /**< \brief [18:18] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU19:1;           /**< \brief [19:19] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU20:1;           /**< \brief [20:20] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU21:1;           /**< \brief [21:21] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU22:1;           /**< \brief [22:22] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU23:1;           /**< \brief [23:23] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU24:1;           /**< \brief [24:24] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU25:1;           /**< \brief [25:25] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU26:1;           /**< \brief [26:26] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU27:1;           /**< \brief [27:27] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU28:1;           /**< \brief [28:28] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU29:1;           /**< \brief [29:29] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU30:1;           /**< \brief [30:30] Partial Autoinitialization of Cache Partition Underway $n (rh) */
    __I  Ifx_UReg_32Bit AIU31:1;           /**< \brief [31:31] Partial Autoinitialization of Cache Partition Underway $n (rh) */
} Ifx_VMT_MEMSTATCS_Bits;

/** \brief Nominal memory MBIST enable register */
typedef struct _Ifx_VMT_MEMTEST_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Enable/Disable SSH0 - EN0 (rwh) */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Enable/Disable SSH1 - EN1 (rwh) */
    __IO Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Enable/Disable SSH2 - EN2 (rwh) */
    __IO Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Enable/Disable SSH3 - EN3 (rwh) */
    __IO Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Enable/Disable SSH4 - EN4 (rwh) */
    __IO Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Enable/Disable SSH5 - EN5 (rwh) */
    __IO Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Enable/Disable SSH6 - EN6 (rwh) */
    __IO Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Enable/Disable SSH7 - EN7 (rwh) */
    __IO Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Enable/Disable SSH8 - EN8 (rwh) */
    __IO Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Enable/Disable SSH9 - EN9 (rwh) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Enable/Disable SSH10 - EN10 (rwh) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Enable/Disable SSH11 - EN11 (rwh) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Enable/Disable SSH12 - EN12 (rwh) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Enable/Disable SSH13 - EN13 (rwh) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Enable/Disable SSH14 - EN14 (rwh) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Enable/Disable SSH15 - EN15 (rwh) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Enable/Disable SSH16 - EN16 (rwh) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Enable/Disable SSH17 - EN17 (rwh) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Enable/Disable SSH18 - EN18 (rwh) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Enable/Disable SSH19 - EN19 (rwh) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Enable/Disable SSH20 - EN20 (rwh) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Enable/Disable SSH21 - EN21 (rwh) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Enable/Disable SSH22 - EN22 (rwh) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Enable/Disable SSH23 - EN23 (rwh) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Enable/Disable SSH24 - EN24 (rwh) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Enable/Disable SSH25 - EN25 (rwh) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Enable/Disable SSH26 - EN26 (rwh) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Enable/Disable SSH27 - EN27 (rwh) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Enable/Disable SSH28 - EN28 (rwh) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Enable/Disable SSH29 - EN29 (rwh) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Enable/Disable SSH30 - EN30 (rwh) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Enable/Disable SSH31 - EN31 (rwh) */
} Ifx_VMT_MEMTEST_Bits;

/** \brief Cyber-secure memory MBIST enable register */
typedef struct _Ifx_VMT_MEMTESTCS_Bits
{
    __IO Ifx_UReg_32Bit EN0:1;             /**< \brief [0:0] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN1:1;             /**< \brief [1:1] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN2:1;             /**< \brief [2:2] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN3:1;             /**< \brief [3:3] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN4:1;             /**< \brief [4:4] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN5:1;             /**< \brief [5:5] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN6:1;             /**< \brief [6:6] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN7:1;             /**< \brief [7:7] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN8:1;             /**< \brief [8:8] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN9:1;             /**< \brief [9:9] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Enable/Disable SSH (rwh) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Enable/Disable SSH (rwh) */
} Ifx_VMT_MEMTESTCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_VMT_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_VMT_PROT_Bits;

/** \brief Nominal SSH UCE alarm register */
typedef struct _Ifx_VMT_UCEALARM_Bits
{
    __I  Ifx_UReg_32Bit UCEALM0:1;         /**< \brief [0:0] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM1:1;         /**< \brief [1:1] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM2:1;         /**< \brief [2:2] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM3:1;         /**< \brief [3:3] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM4:1;         /**< \brief [4:4] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM5:1;         /**< \brief [5:5] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM6:1;         /**< \brief [6:6] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM7:1;         /**< \brief [7:7] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM8:1;         /**< \brief [8:8] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM9:1;         /**< \brief [9:9] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM10:1;        /**< \brief [10:10] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM11:1;        /**< \brief [11:11] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM12:1;        /**< \brief [12:12] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM13:1;        /**< \brief [13:13] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM14:1;        /**< \brief [14:14] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM15:1;        /**< \brief [15:15] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM16:1;        /**< \brief [16:16] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM17:1;        /**< \brief [17:17] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM18:1;        /**< \brief [18:18] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM19:1;        /**< \brief [19:19] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM20:1;        /**< \brief [20:20] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM21:1;        /**< \brief [21:21] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM22:1;        /**< \brief [22:22] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM23:1;        /**< \brief [23:23] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM24:1;        /**< \brief [24:24] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM25:1;        /**< \brief [25:25] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM26:1;        /**< \brief [26:26] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM27:1;        /**< \brief [27:27] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM28:1;        /**< \brief [28:28] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM29:1;        /**< \brief [29:29] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM30:1;        /**< \brief [30:30] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM31:1;        /**< \brief [31:31] SSH UCE Alarm Occurred (rh) */
} Ifx_VMT_UCEALARM_Bits;

/** \brief Cyber-secure SSH UCE alarm register */
typedef struct _Ifx_VMT_UCEALARMCS_Bits
{
    __I  Ifx_UReg_32Bit UCEALM0:1;         /**< \brief [0:0] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM1:1;         /**< \brief [1:1] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM2:1;         /**< \brief [2:2] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM3:1;         /**< \brief [3:3] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM4:1;         /**< \brief [4:4] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM5:1;         /**< \brief [5:5] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM6:1;         /**< \brief [6:6] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM7:1;         /**< \brief [7:7] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM8:1;         /**< \brief [8:8] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM9:1;         /**< \brief [9:9] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM10:1;        /**< \brief [10:10] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM11:1;        /**< \brief [11:11] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM12:1;        /**< \brief [12:12] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM13:1;        /**< \brief [13:13] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM14:1;        /**< \brief [14:14] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM15:1;        /**< \brief [15:15] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM16:1;        /**< \brief [16:16] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM17:1;        /**< \brief [17:17] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM18:1;        /**< \brief [18:18] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM19:1;        /**< \brief [19:19] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM20:1;        /**< \brief [20:20] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM21:1;        /**< \brief [21:21] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM22:1;        /**< \brief [22:22] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM23:1;        /**< \brief [23:23] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM24:1;        /**< \brief [24:24] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM25:1;        /**< \brief [25:25] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM26:1;        /**< \brief [26:26] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM27:1;        /**< \brief [27:27] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM28:1;        /**< \brief [28:28] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM29:1;        /**< \brief [29:29] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM30:1;        /**< \brief [30:30] SSH UCE Alarm Occurred (rh) */
    __I  Ifx_UReg_32Bit UCEALM31:1;        /**< \brief [31:31] SSH UCE Alarm Occurred (rh) */
} Ifx_VMT_UCEALARMCS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_vmt_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_VMT_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_VMT_ACCEN_WRB_FPI;

/** \brief Nominal SSH CE alarm register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_CEALARM_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_CEALARM;

/** \brief Cyber-secure SSH CE alarm register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_CEALARMCS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_CEALARMCS;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_VMT_CLC;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_VMT_ID;

/** \brief MCCS i Cyber-secure alarm sources configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_ALMSRCS_Bits B;           /**< \brief Bitfield access */
} Ifx_VMT_MCCS_ALMSRCS;

/** \brief MCCS i Cyber-secure configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_CONFIG0_Bits B;           /**< \brief Bitfield access */
} Ifx_VMT_MCCS_CONFIG0;

/** \brief MCCS i Cyber-secure configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_CONFIG1_Bits B;           /**< \brief Bitfield access */
} Ifx_VMT_MCCS_CONFIG1;

/** \brief MCCS i Cyber-secure memory ECC detection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_ECCD_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MCCS_ECCD;

/** \brief MCCS i Cyber-secure ECC safety register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_ECCS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MCCS_ECCS;

/** \brief MCCS i Cyber-secure error information register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_ERRINFO_Bits B;           /**< \brief Bitfield access */
} Ifx_VMT_MCCS_ERRINFO;

/** \brief MCCS i Cyber-secure error tracking register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_ETRR_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MCCS_ETRR;

/** \brief MCCS i Cyber-secure SSH safety faults status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_FAULTSTS_Bits B;          /**< \brief Bitfield access */
} Ifx_VMT_MCCS_FAULTSTS;

/** \brief MCCS i  Cyber-secure MBIST control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_MCONTROL_Bits B;          /**< \brief Bitfield access */
} Ifx_VMT_MCCS_MCONTROL;

/** \brief MCCS i Cyber-secure status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_MSTATUS_Bits B;           /**< \brief Bitfield access */
} Ifx_VMT_MCCS_MSTATUS;

/** \brief MCCS i Cyber-secure range register, single address mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_RANGE_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MCCS_RANGE;

/** \brief MCCS i Cyber-secure read data and bit flip register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_RDBFL_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MCCS_RDBFL;

/** \brief MCCS i  Cyber-secure revision ID register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MCCS_REVID_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MCCS_REVID;

/** \brief MC i Nominal alarm sources configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_ALMSRCS_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MC_ALMSRCS;

/** \brief MC i Nominal configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_CONFIG0_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MC_CONFIG0;

/** \brief MC i Nominal configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_CONFIG1_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MC_CONFIG1;

/** \brief MC i Nominal Memory ECC detection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_ECCD_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MC_ECCD;

/** \brief MC i Nominal ECC safety register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_ECCS_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MC_ECCS;

/** \brief MC i  Nominal error information register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_ERRINFO_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MC_ERRINFO;

/** \brief MC i Nominal error tracking register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_ETRR_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MC_ETRR;

/** \brief MC i  Nominal SSH safety faults status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_FAULTSTS_Bits B;            /**< \brief Bitfield access */
} Ifx_VMT_MC_FAULTSTS;

/** \brief MC i Nominal MBIST control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_MCONTROL_Bits B;            /**< \brief Bitfield access */
} Ifx_VMT_MC_MCONTROL;

/** \brief MC i Nominal status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_MSTATUS_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_MC_MSTATUS;

/** \brief MC i Nominal range register, single address mode   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_RANGE_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_MC_RANGE;

/** \brief MC i Nominal read data and bit flip register y   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_RDBFL_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_MC_RDBFL;

/** \brief MC i Nominal revision ID register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MC_REVID_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_MC_REVID;

/** \brief Nominal SSH ME alarm register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEALARM_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MEALARM;

/** \brief Cyber-Secure SSH ME alarm register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEALARMCS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MEALARMCS;

/** \brief Nominal memory test done status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMDONE_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MEMDONE;

/** \brief Cyber-secure memory test done status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMDONECS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MEMDONECS;

/** \brief Nominal memory test FDA status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMFDA_Bits B;                 /**< \brief Bitfield access */
} Ifx_VMT_MEMFDA;

/** \brief Cyber-secure memory test FDA status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMFDACS_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_MEMFDACS;

/** \brief Nominal memory mapping enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMMAP_Bits B;                 /**< \brief Bitfield access */
} Ifx_VMT_MEMMAP;

/** \brief Cyber-secure memory mapping enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMMAPCS_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_MEMMAPCS;

/** \brief Nominal memory status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MEMSTAT;

/** \brief Cyber-secure memory status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMSTATCS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MEMSTATCS;

/** \brief Nominal memory MBIST enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMTEST_Bits B;                /**< \brief Bitfield access */
} Ifx_VMT_MEMTEST;

/** \brief Cyber-secure memory MBIST enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_MEMTESTCS_Bits B;              /**< \brief Bitfield access */
} Ifx_VMT_MEMTESTCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_VMT_PROT;

/** \brief Nominal SSH UCE alarm register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_UCEALARM_Bits B;               /**< \brief Bitfield access */
} Ifx_VMT_UCEALARM;

/** \brief Cyber-secure SSH UCE alarm register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VMT_UCEALARMCS_Bits B;             /**< \brief Bitfield access */
} Ifx_VMT_UCEALARMCS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vmt_ACCENNOM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENNOM object */
typedef volatile struct _Ifx_VMT_ACCENNOM
{
       __IO Ifx_VMT_ACCEN_WRA                   WRA;                    /**< \brief 0, ACCENNOM write access enable register A*/
       __IO Ifx_VMT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, ACCENNOM write access enable register B*/
       __IO Ifx_VMT_ACCEN_RDA                   RDA;                    /**< \brief 8, ACCENNOM read access enable register A*/
       __IO Ifx_VMT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, ACCENNOM read access enable register B*/
       __IO Ifx_VMT_ACCEN_VM                    VM;                     /**< \brief 10, ACCENNOM VM access enable register*/
       __IO Ifx_VMT_ACCEN_PRS                   PRS;                    /**< \brief 14, ACCENNOM PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_VMT_ACCENNOM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vmt_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_VMT_ACCENCS
{
       __IO Ifx_VMT_ACCEN_WRA                   WRA;                    /**< \brief 0, ACCENCS write access enable register A*/
       __IO Ifx_VMT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, ACCENCS write access enable register B*/
       __IO Ifx_VMT_ACCEN_RDA                   RDA;                    /**< \brief 8, ACCENCS read access enable register A*/
       __IO Ifx_VMT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, ACCENCS read access enable register B*/
       __IO Ifx_VMT_ACCEN_VM                    VM;                     /**< \brief 10, ACCENCS VM access enable register*/
       __IO Ifx_VMT_ACCEN_PRS                   PRS;                    /**< \brief 14, ACCENCS PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_VMT_ACCENCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vmt_MC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief MC object */
typedef volatile struct _Ifx_VMT_MC
{
       __IO Ifx_VMT_MC_CONFIG0                  CONFIG0;                /**< \brief 0, MC i Nominal configuration register 0*/
       __IO Ifx_VMT_MC_CONFIG1                  CONFIG1;                /**< \brief 4, MC i Nominal configuration register 1*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_VMT_MC_MCONTROL                 MCONTROL;               /**< \brief C, MC i Nominal MBIST control register*/
       __I  Ifx_VMT_MC_MSTATUS                  MSTATUS;                /**< \brief 10, MC i Nominal status register*/
       __IO Ifx_VMT_MC_RANGE                    RANGE;                  /**< \brief 14, MC i Nominal range register, single address mode*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
       __I  Ifx_VMT_MC_REVID                    REVID;                  /**< \brief 1C, MC i Nominal revision ID register*/
       __IO Ifx_VMT_MC_ECCS                     ECCS;                   /**< \brief 20, MC i Nominal ECC safety register*/
       __IO Ifx_VMT_MC_ECCD                     ECCD;                   /**< \brief 24, MC i Nominal Memory ECC detection register*/
       __I  Ifx_VMT_MC_ETRR                     ETRR;                   /**< \brief 28, MC i Nominal error tracking register*/
       __I  Ifx_UReg_8Bit                       reserved_2C[84];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_VMT_MC_RDBFL                    RDBFL[80];              /**< \brief 80, MC i Nominal read data and bit flip register y*/
       __I  Ifx_UReg_8Bit                       reserved_1C0[16];       /**< \brief 1C0, \internal Reserved */
       __IO Ifx_VMT_MC_ALMSRCS                  ALMSRCS;                /**< \brief 1D0, MC i Nominal alarm sources configuration register*/
       __IO Ifx_VMT_MC_FAULTSTS                 FAULTSTS;               /**< \brief 1D4, MC i  Nominal SSH safety faults status register*/
       __I  Ifx_VMT_MC_ERRINFO                  ERRINFO;                /**< \brief 1D8, MC i  Nominal error information register*/
       __I  Ifx_UReg_8Bit                       reserved_1DC[36];       /**< \brief 1DC, \internal Reserved */
} Ifx_VMT_MC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vmt_MCCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief MCCS object */
typedef volatile struct _Ifx_VMT_MCCS
{
       __IO Ifx_VMT_MCCS_CONFIG0                CONFIG0;                /**< \brief 0, MCCS i Cyber-secure configuration register 0*/
       __IO Ifx_VMT_MCCS_CONFIG1                CONFIG1;                /**< \brief 4, MCCS i Cyber-secure configuration register 1*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_VMT_MCCS_MCONTROL               MCONTROL;               /**< \brief C, MCCS i  Cyber-secure MBIST control register*/
       __I  Ifx_VMT_MCCS_MSTATUS                MSTATUS;                /**< \brief 10, MCCS i Cyber-secure status register*/
       __IO Ifx_VMT_MCCS_RANGE                  RANGE;                  /**< \brief 14, MCCS i Cyber-secure range register, single address mode*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
       __I  Ifx_VMT_MCCS_REVID                  REVID;                  /**< \brief 1C, MCCS i  Cyber-secure revision ID register*/
       __IO Ifx_VMT_MCCS_ECCS                   ECCS;                   /**< \brief 20, MCCS i Cyber-secure ECC safety register*/
       __IO Ifx_VMT_MCCS_ECCD                   ECCD;                   /**< \brief 24, MCCS i Cyber-secure memory ECC detection register*/
       __I  Ifx_VMT_MCCS_ETRR                   ETRR;                   /**< \brief 28, MCCS i Cyber-secure error tracking register*/
       __I  Ifx_UReg_8Bit                       reserved_2C[84];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_VMT_MCCS_RDBFL                  RDBFL[80];              /**< \brief 80, MCCS i Cyber-secure read data and bit flip register 0*/
       __I  Ifx_UReg_8Bit                       reserved_1C0[16];       /**< \brief 1C0, \internal Reserved */
       __IO Ifx_VMT_MCCS_ALMSRCS                ALMSRCS;                /**< \brief 1D0, MCCS i Cyber-secure alarm sources configuration register*/
       __IO Ifx_VMT_MCCS_FAULTSTS               FAULTSTS;               /**< \brief 1D4, MCCS i Cyber-secure SSH safety faults status register*/
       __I  Ifx_VMT_MCCS_ERRINFO                ERRINFO;                /**< \brief 1D8, MCCS i Cyber-secure error information register*/
       __I  Ifx_UReg_8Bit                       reserved_1DC[36];       /**< \brief 1DC, \internal Reserved */
} Ifx_VMT_MCCS;

/******************************************************************************/
/** \addtogroup IfxSfr_Vmt_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief VMT object */
typedef volatile struct _Ifx_VMT
{
       __IO Ifx_VMT_CLC                         CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_VMT_ID                          ID;                     /**< \brief 8, Module identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[20];         /**< \brief C, \internal Reserved */
       __IO Ifx_VMT_PROT                        PROTE;                  /**< \brief 20, PROT register endinit*/
       __IO Ifx_VMT_PROT                        PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[4];         /**< \brief 28, \internal Reserved */
       __IO Ifx_VMT_PROT                        PROTCSP;                /**< \brief 2C, PROT register cyber-secure APU endinit*/
       __I  Ifx_UReg_8Bit                       reserved_30[16];        /**< \brief 30, \internal Reserved */
       __IO Ifx_VMT_ACCENNOM                    ACCENNOM;               /**< \brief 40, VMT APU for general non-secure resources*/
       __IO Ifx_VMT_ACCENCS                     ACCENCS;                /**< \brief 60, VMT APU for general cyber-secure resources*/
       __IO Ifx_VMT_MEMTEST                     MEMTEST;                /**< \brief 80, Nominal memory MBIST enable register*/
       __IO Ifx_VMT_MEMMAP                      MEMMAP;                 /**< \brief 84, Nominal memory mapping enable register*/
       __I  Ifx_VMT_MEMSTAT                     MEMSTAT;                /**< \brief 88, Nominal memory status register*/
       __I  Ifx_VMT_MEMDONE                     MEMDONE;                /**< \brief 8C, Nominal memory test done status register*/
       __I  Ifx_VMT_MEMFDA                      MEMFDA;                 /**< \brief 90, Nominal memory test FDA status register*/
       __I  Ifx_UReg_8Bit                       reserved_94[16];        /**< \brief 94, \internal Reserved */
       __I  Ifx_VMT_CEALARM                     CEALARM;                /**< \brief A4, Nominal SSH CE alarm register*/
       __I  Ifx_VMT_UCEALARM                    UCEALARM;               /**< \brief A8, Nominal SSH UCE alarm register*/
       __I  Ifx_VMT_MEALARM                     MEALARM;                /**< \brief AC, Nominal SSH ME alarm register*/
       __I  Ifx_UReg_8Bit                       reserved_B0[4];         /**< \brief B0, \internal Reserved */
       __IO Ifx_VMT_MEMTESTCS                   MEMTESTCS;              /**< \brief B4, Cyber-secure memory MBIST enable register*/
       __IO Ifx_VMT_MEMMAPCS                    MEMMAPCS;               /**< \brief B8, Cyber-secure memory mapping enable register*/
       __I  Ifx_VMT_MEMSTATCS                   MEMSTATCS;              /**< \brief BC, Cyber-secure memory status register*/
       __I  Ifx_VMT_MEMDONECS                   MEMDONECS;              /**< \brief C0, Cyber-secure memory test done status register*/
       __I  Ifx_VMT_MEMFDACS                    MEMFDACS;               /**< \brief C4, Cyber-secure memory test FDA status register*/
       __I  Ifx_UReg_8Bit                       reserved_C8[16];        /**< \brief C8, \internal Reserved */
       __I  Ifx_VMT_CEALARMCS                   CEALARMCS;              /**< \brief D8, Cyber-secure SSH CE alarm register*/
       __I  Ifx_VMT_UCEALARMCS                  UCEALARMCS;             /**< \brief DC, Cyber-secure SSH UCE alarm register*/
       __I  Ifx_VMT_MEALARMCS                   MEALARMCS;              /**< \brief E0, Cyber-Secure SSH ME alarm register*/
       __I  Ifx_UReg_8Bit                       reserved_E4[3868];      /**< \brief E4, \internal Reserved */
       __IO Ifx_VMT_MC                          MC[32];                 /**< \brief 1000, */
       __I  Ifx_UReg_8Bit                       reserved_5000[49152];    /**< \brief 5000, \internal Reserved */
       __IO Ifx_VMT_MCCS                        MCCS[32];               /**< \brief 11000, */
       __I  Ifx_UReg_8Bit                       reserved_15000[45056];    /**< \brief 15000, \internal Reserved */
} Ifx_VMT;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXVMT_REGDEF_H */
