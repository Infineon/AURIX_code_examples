/**
 * \file IfxScr_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SCR/V13.1.1.12.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scr_Registers Scr Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Scr_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Scr_Registers
 * 
 * \defgroup IfxSfr_Scr_Registers_union Register unions
 * \ingroup IfxSfr_Scr_Registers
 * 
 * \defgroup IfxSfr_Scr_Registers_struct Memory map
 * \ingroup IfxSfr_Scr_Registers
 */
#ifndef IFXSCR_REGDEF_H
#define IFXSCR_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Scr_Registers_Bitfields
 * \{  */
/** \brief Accumulator */
typedef struct _Ifx_SCR_ACC_Bits
{
    __IO Ifx_UReg_8Bit ACC:8;              /**< \brief [7:0] Accumulator value (rwh) */
} Ifx_SCR_ACC_Bits;

/** \brief ADCOMP control register */
typedef struct _Ifx_SCR_ADCOMP_CON_Bits
{
    __IO Ifx_UReg_8Bit EN_REQ:1;           /**< \brief [0:0] ADC comparator enable request (rw) */
    __IO Ifx_UReg_8Bit CHSEL:4;            /**< \brief [4:1] ADC channel select (rw) */
    __IO Ifx_UReg_8Bit STSEL:2;            /**< \brief [6:5] Sample time selection (rw) */
    __IO Ifx_UReg_8Bit SOC:1;              /**< \brief [7:7] ADC start of conversion request (rwh) */
} Ifx_SCR_ADCOMP_CON_Bits;

/** \brief ADCOMP result-high and status register */
typedef struct _Ifx_SCR_ADCOMP_RESHSTAT_Bits
{
    __I  Ifx_UReg_8Bit RES10_8:3;          /**< \brief [2:0] ADC conversion result (rh) */
    __I  Ifx_UReg_8Bit EN_STAT:1;          /**< \brief [3:3] ADC comparator enable status (rh) */
    __I  Ifx_UReg_8Bit EOC:1;              /**< \brief [4:4] ADC end of conversion / sampling indication (rh) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_ADCOMP_RESHSTAT_Bits;

/** \brief ADCOMP result-low register */
typedef struct _Ifx_SCR_ADCOMP_RESL_Bits
{
    __I  Ifx_UReg_8Bit RES7_0:8;           /**< \brief [7:0] ADC conversion result (rh) */
} Ifx_SCR_ADCOMP_RESL_Bits;

/** \brief B register */
typedef struct _Ifx_SCR_B_Bits
{
    __IO Ifx_UReg_8Bit B:8;                /**< \brief [7:0] B register value (rwh) */
} Ifx_SCR_B_Bits;

/** \brief Data pointer high byte */
typedef struct _Ifx_SCR_DPH_Bits
{
    __IO Ifx_UReg_8Bit DPH:8;              /**< \brief [7:0] Data pointer high byte value (rwh) */
} Ifx_SCR_DPH_Bits;

/** \brief Data pointer low byte */
typedef struct _Ifx_SCR_DPL_Bits
{
    __IO Ifx_UReg_8Bit DPL:8;              /**< \brief [7:0] Data pointer low byte value (rwh) */
} Ifx_SCR_DPL_Bits;

/** \brief Extended operation register */
typedef struct _Ifx_SCR_EO_Bits
{
    __IO Ifx_UReg_8Bit DPSEL:3;            /**< \brief [2:0] Data pointer select (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_8Bit TRAP_EN:1;          /**< \brief [4:4] TRAP enable (rw) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_EO_Bits;

/** \brief Slave address register */
typedef struct _Ifx_SCR_I2C_ADDR_Bits
{
    __IO Ifx_UReg_8Bit GCE:1;              /**< \brief [0:0] General call enable (rw) */
    __IO Ifx_UReg_8Bit SLA:7;              /**< \brief [7:1] Slave address (rw) */
} Ifx_SCR_I2C_ADDR_Bits;

/** \brief Extended slave address register */
typedef struct _Ifx_SCR_I2C_ADDRX_Bits
{
    __IO Ifx_UReg_8Bit SLAX:8;             /**< \brief [7:0] Extended slave address (rw) */
} Ifx_SCR_I2C_ADDRX_Bits;

/** \brief Baud rate control register [write mode] */
typedef struct _Ifx_SCR_I2C_BRCR_Bits
{
    __O  Ifx_UReg_8Bit PREDIV:3;           /**< \brief [2:0] Predivider for baud rate generation (w) */
    __O  Ifx_UReg_8Bit BRP:4;              /**< \brief [6:3] Baud rate prescaler (w) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_I2C_BRCR_Bits;

/** \brief I2C control register */
typedef struct _Ifx_SCR_I2C_CNTR_Bits
{
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_8Bit AAK:1;              /**< \brief [2:2] Assert acknowledge (rw) */
    __IO Ifx_UReg_8Bit IFLG:1;             /**< \brief [3:3] Interrupt flag (rw0ch) */
    __IO Ifx_UReg_8Bit STP:1;              /**< \brief [4:4] Master mode stop (rw1sh) */
    __IO Ifx_UReg_8Bit STA:1;              /**< \brief [5:5] Master Mode Start (rw1sh) */
    __IO Ifx_UReg_8Bit ENAB:1;             /**< \brief [6:6] I2C enable (rw) */
    __IO Ifx_UReg_8Bit IEN:1;              /**< \brief [7:7] Interrupt enable (rw) */
} Ifx_SCR_I2C_CNTR_Bits;

/** \brief Data register */
typedef struct _Ifx_SCR_I2C_DATA_Bits
{
    __IO Ifx_UReg_8Bit DATA:8;             /**< \brief [7:0] Data byte (rwh) */
} Ifx_SCR_I2C_DATA_Bits;

/** \brief Software reset register */
typedef struct _Ifx_SCR_I2C_SRST_Bits
{
    __O  Ifx_UReg_8Bit SRST:1;             /**< \brief [0:0] Software reset (w) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [1:1] \internal Reserved */
    __O  Ifx_UReg_8Bit SCLSEL_P:1;         /**< \brief [2:2] SCLSEL write protection (w) */
    __IO Ifx_UReg_8Bit SCLSEL:2;           /**< \brief [4:3] SCL selector (rw) */
    __O  Ifx_UReg_8Bit SDASEL_P:1;         /**< \brief [5:5] SDASEL write protection (w) */
    __IO Ifx_UReg_8Bit SDASEL:2;           /**< \brief [7:6] SDA selector (rw) */
} Ifx_SCR_I2C_SRST_Bits;

/** \brief Status register */
typedef struct _Ifx_SCR_I2C_STAT_Bits
{
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [2:0] \internal Reserved */
    __I  Ifx_UReg_8Bit STAT:5;             /**< \brief [7:3] Status code (r) */
} Ifx_SCR_I2C_STAT_Bits;

/** \brief Interrupt enable register 0 */
typedef struct _Ifx_SCR_IEN0_Bits
{
    __IO Ifx_UReg_8Bit EX0:1;              /**< \brief [0:0] Interrupt node XINTR0 enable (rw) */
    __IO Ifx_UReg_8Bit ET0:1;              /**< \brief [1:1] Interrupt node XINTR1 enable (rw) */
    __IO Ifx_UReg_8Bit EX1:1;              /**< \brief [2:2] Interrupt node XINTR2 enable (rw) */
    __IO Ifx_UReg_8Bit ET1:1;              /**< \brief [3:3] Interrupt node XINTR3 enable (rw) */
    __IO Ifx_UReg_8Bit ES:1;               /**< \brief [4:4] Interrupt node XINTR4 enable (rw) */
    __IO Ifx_UReg_8Bit ET2:1;              /**< \brief [5:5] Interrupt node XINTR5 enable (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [6:6] \internal Reserved */
    __IO Ifx_UReg_8Bit EA:1;               /**< \brief [7:7] Global interrupt mask (rw) */
} Ifx_SCR_IEN0_Bits;

/** \brief Interrupt enable register 1 */
typedef struct _Ifx_SCR_IEN1_Bits
{
    __IO Ifx_UReg_8Bit EWCAN:1;            /**< \brief [0:0] Interrupt node XINTR6 enable (rw) */
    __IO Ifx_UReg_8Bit ESSC:1;             /**< \brief [1:1] Interrupt node XINTR7 enable (rw) */
    __IO Ifx_UReg_8Bit EX2:1;              /**< \brief [2:2] Interrupt node XINTR8 enable (rw) */
    __IO Ifx_UReg_8Bit EXM:1;              /**< \brief [3:3] Interrupt node XINTR9 enable (rw) */
    __IO Ifx_UReg_8Bit ECCIP0:1;           /**< \brief [4:4] Interrupt node XINTR10 enable (rw) */
    __IO Ifx_UReg_8Bit ECCIP1:1;           /**< \brief [5:5] Interrupt node XINTR11 enable (rw) */
    __IO Ifx_UReg_8Bit ECCIP2:1;           /**< \brief [6:6] Interrupt node XINTR12 enable (rw) */
    __IO Ifx_UReg_8Bit ECCIP3:1;           /**< \brief [7:7] Interrupt node XINTR13 enable (rw) */
} Ifx_SCR_IEN1_Bits;

/** \brief Interrupt priority register */
typedef struct _Ifx_SCR_IP_Bits
{
    __IO Ifx_UReg_8Bit PX0:1;              /**< \brief [0:0] Priority level low bit for interrupt node XINTR0 (rw) */
    __IO Ifx_UReg_8Bit PT0:1;              /**< \brief [1:1] Priority level low bit for interrupt node XINTR1 (rw) */
    __IO Ifx_UReg_8Bit PX1:1;              /**< \brief [2:2] Priority level low bit for interrupt node XINTR2 (rw) */
    __IO Ifx_UReg_8Bit PT1:1;              /**< \brief [3:3] Priority level low bit for interrupt node XINTR3 (rw) */
    __IO Ifx_UReg_8Bit PS:1;               /**< \brief [4:4] Priority level low bit for interrupt node XINTR4 (rw) */
    __IO Ifx_UReg_8Bit PT2:1;              /**< \brief [5:5] Priority level low bit for interrupt node XINTR5 (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_IP_Bits;

/** \brief Interrupt priority 1 register */
typedef struct _Ifx_SCR_IP1_Bits
{
    __IO Ifx_UReg_8Bit PWCAN:1;            /**< \brief [0:0] Priority level low bit for interrupt node XINTR6 (rw) */
    __IO Ifx_UReg_8Bit PSSC:1;             /**< \brief [1:1] Priority level low bit for interrupt node XINTR7 (rw) */
    __IO Ifx_UReg_8Bit PX2:1;              /**< \brief [2:2] Priority level low bit for interrupt node XINTR8 (rw) */
    __IO Ifx_UReg_8Bit PXM:1;              /**< \brief [3:3] Priority level low bit for interrupt node XINTR9 (rw) */
    __IO Ifx_UReg_8Bit PCCIP0:1;           /**< \brief [4:4] Priority level low bit for interrupt node XINTR10 (rw) */
    __IO Ifx_UReg_8Bit PCCIP1:1;           /**< \brief [5:5] Priority level low bit for interrupt node XINTR11 (rw) */
    __IO Ifx_UReg_8Bit PCCIP2:1;           /**< \brief [6:6] Priority level low bit for interrupt node XINTR12 (rw) */
    __IO Ifx_UReg_8Bit PCCIP3:1;           /**< \brief [7:7] Priority level low bit for interrupt node XINTR13 (rw) */
} Ifx_SCR_IP1_Bits;

/** \brief Interrupt priority high register */
typedef struct _Ifx_SCR_IPH_Bits
{
    __IO Ifx_UReg_8Bit PX0H:1;             /**< \brief [0:0] Priority level high bit for interrupt node XINTR0 (rw) */
    __IO Ifx_UReg_8Bit PT0H:1;             /**< \brief [1:1] Priority level high bit for interrupt node XINTR1 (rw) */
    __IO Ifx_UReg_8Bit PX1H:1;             /**< \brief [2:2] Priority level high bit for interrupt node XINTR2 (rw) */
    __IO Ifx_UReg_8Bit PT1H:1;             /**< \brief [3:3] Priority level high bit for interrupt node XINTR3 (rw) */
    __IO Ifx_UReg_8Bit PSH:1;              /**< \brief [4:4] Priority level high bit for interrupt node XINTR4 (rw) */
    __IO Ifx_UReg_8Bit PT2H:1;             /**< \brief [5:5] Priority level high bit for interrupt node XINTR5 (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_IPH_Bits;

/** \brief Interrupt priority 1 high register */
typedef struct _Ifx_SCR_IPH1_Bits
{
    __IO Ifx_UReg_8Bit PWCANH:1;           /**< \brief [0:0] Priority level high bit for interrupt node XINTR6 (rw) */
    __IO Ifx_UReg_8Bit PSSCH:1;            /**< \brief [1:1] Priority level high bit for interrupt node XINTR7 (rw) */
    __IO Ifx_UReg_8Bit PX2H:1;             /**< \brief [2:2] Priority level high bit for interrupt node XINTR8 (rw) */
    __IO Ifx_UReg_8Bit PXMH:1;             /**< \brief [3:3] Priority level high bit for interrupt node XINTR9 (rw) */
    __IO Ifx_UReg_8Bit PCCIP0H:1;          /**< \brief [4:4] Priority level high bit for interrupt node XINTR10 (rw) */
    __IO Ifx_UReg_8Bit PCCIP1H:1;          /**< \brief [5:5] Priority level high bit for interrupt node XINTR11 (rw) */
    __IO Ifx_UReg_8Bit PCCIP2H:1;          /**< \brief [6:6] Priority level high bit for interrupt node XINTR12 (rw) */
    __IO Ifx_UReg_8Bit PCCIP3H:1;          /**< \brief [7:7] Priority level high bit for interrupt node XINTR13 (rw) */
} Ifx_SCR_IPH1_Bits;

/** \brief Interrupt request register 0 */
typedef struct _Ifx_SCR_IR_CON0_Bits
{
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_8Bit EXINT2:1;           /**< \brief [2:2] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT3:1;           /**< \brief [3:3] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT4:1;           /**< \brief [4:4] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT5:1;           /**< \brief [5:5] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT6:1;           /**< \brief [6:6] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT7:1;           /**< \brief [7:7] Interrupt flag for external interrupt x (rw0ch) */
} Ifx_SCR_IR_CON0_Bits;

/** \brief Interrupt request register 1 */
typedef struct _Ifx_SCR_IR_CON1_Bits
{
    __IO Ifx_UReg_8Bit EIR:1;              /**< \brief [0:0] Error interrupt flag for SSC (rw0ch) */
    __IO Ifx_UReg_8Bit TIR:1;              /**< \brief [1:1] Transmit interrupt flag for SSC (rw0ch) */
    __IO Ifx_UReg_8Bit RIR:1;              /**< \brief [2:2] Receive interrupt flag for SSC (rw0ch) */
    __IO Ifx_UReg_8Bit RFEIR:1;            /**< \brief [3:3] Receive FIFO empty interrupt flag for SSC (rw0ch) */
    __IO Ifx_UReg_8Bit RFFIR:1;            /**< \brief [4:4] Receive FIFO full interrupt flag for SSC (rw0ch) */
    __IO Ifx_UReg_8Bit ADCIR:1;            /**< \brief [5:5] Interrupt flag for ADCOMP unit (rw0ch) */
    __IO Ifx_UReg_8Bit CMP0IR:1;           /**< \brief [6:6] PMS RTC CMP0 OUT interrupt flag (rw0ch) */
    __IO Ifx_UReg_8Bit CMP1IR:1;           /**< \brief [7:7] PMS RTC CMP1 OUT interrupt flag (rw0ch) */
} Ifx_SCR_IR_CON1_Bits;

/** \brief Interrupt request register 2 */
typedef struct _Ifx_SCR_IR_CON2_Bits
{
    __IO Ifx_UReg_8Bit EXINT8:1;           /**< \brief [0:0] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT9:1;           /**< \brief [1:1] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT10:1;          /**< \brief [2:2] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT11:1;          /**< \brief [3:3] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT12:1;          /**< \brief [4:4] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT13:1;          /**< \brief [5:5] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT14:1;          /**< \brief [6:6] Interrupt flag for external interrupt x (rw0ch) */
    __IO Ifx_UReg_8Bit EXINT15:1;          /**< \brief [7:7] Interrupt flag for external interrupt x (rw0ch) */
} Ifx_SCR_IR_CON2_Bits;

/** \brief External interrupt control register 0 */
typedef struct _Ifx_SCR_IR_EXICON0_Bits
{
    __IO Ifx_UReg_8Bit EXINT0:2;           /**< \brief [1:0] External interrupt 0 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT1:2;           /**< \brief [3:2] External interrupt 1 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT2:2;           /**< \brief [5:4] External interrupt 2 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT3:2;           /**< \brief [7:6] External interrupt 3 trigger select (rw) */
} Ifx_SCR_IR_EXICON0_Bits;

/** \brief External interrupt control register 1 */
typedef struct _Ifx_SCR_IR_EXICON1_Bits
{
    __IO Ifx_UReg_8Bit EXINT4:2;           /**< \brief [1:0] External interrupt 4 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT5:2;           /**< \brief [3:2] External interrupt 5 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT6:2;           /**< \brief [5:4] External interrupt 6 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT7:2;           /**< \brief [7:6] External interrupt 7 trigger select (rw) */
} Ifx_SCR_IR_EXICON1_Bits;

/** \brief External interrupt control register 2 */
typedef struct _Ifx_SCR_IR_EXICON2_Bits
{
    __IO Ifx_UReg_8Bit EXINT8:2;           /**< \brief [1:0] External interrupt 8 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT9:2;           /**< \brief [3:2] External interrupt 9 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT10:2;          /**< \brief [5:4] External interrupt 10 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT11:2;          /**< \brief [7:6] External interrupt 11 trigger select (rw) */
} Ifx_SCR_IR_EXICON2_Bits;

/** \brief External interrupt control register 3 */
typedef struct _Ifx_SCR_IR_EXICON3_Bits
{
    __IO Ifx_UReg_8Bit EXINT12:2;          /**< \brief [1:0] External interrupt 12 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT13:2;          /**< \brief [3:2] External interrupt 13 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT14:2;          /**< \brief [5:4] External interrupt 14 trigger select (rw) */
    __IO Ifx_UReg_8Bit EXINT15:2;          /**< \brief [7:6] External interrupt 15 trigger select (rw) */
} Ifx_SCR_IR_EXICON3_Bits;

/** \brief Peripheral interrupt enable register */
typedef struct _Ifx_SCR_IR_MODIEN_Bits
{
    __IO Ifx_UReg_8Bit EIREN:1;            /**< \brief [0:0] SSC error interrupt enable (rw) */
    __IO Ifx_UReg_8Bit TIREN:1;            /**< \brief [1:1] SSC transmit interrupt enable (rw) */
    __IO Ifx_UReg_8Bit RIREN:1;            /**< \brief [2:2] SSC receive interrupt enable (rw) */
    __IO Ifx_UReg_8Bit RFEIEN:1;           /**< \brief [3:3] SSC receive FIFO empty interrupt enable (rw) */
    __IO Ifx_UReg_8Bit RFFIEN:1;           /**< \brief [4:4] SSC receive FIFO full interrupt enable (rw) */
    __IO Ifx_UReg_8Bit ADCIEN:1;           /**< \brief [5:5] ADC comparator interrupt enable (rw) */
    __IO Ifx_UReg_8Bit CMP0IEN:1;          /**< \brief [6:6] PMS RTC CMP0 OUT interrupt enable (rw) */
    __IO Ifx_UReg_8Bit CMP1IEN:1;          /**< \brief [7:7] PMS RTC CMP1 OUT interrupt enable (rw) */
} Ifx_SCR_IR_MODIEN_Bits;

/** \brief NMI control register */
typedef struct _Ifx_SCR_IR_NMICON_Bits
{
    __IO Ifx_UReg_8Bit NMIWDT:1;           /**< \brief [0:0] Watchdog timer NMI enable (rw) */
    __IO Ifx_UReg_8Bit NMIRAMECC:1;        /**< \brief [1:1] RAM double bit ECC error NMI enable (rw) */
    __IO Ifx_UReg_8Bit NMIEXTNMI:1;        /**< \brief [2:2] External NMI (via EXTNMI pin) NMI enable (rw) */
    __IO Ifx_UReg_8Bit NMIOCDS:1;          /**< \brief [3:3] OCDS NMI enable (rw) */
    __IO Ifx_UReg_8Bit NMIMAINC:1;         /**< \brief [4:4] Main controller NMI enable (rw) */
    __IO Ifx_UReg_8Bit NMIWKP:1;           /**< \brief [5:5] Wake-up NMI enable (rw) */
    __IO Ifx_UReg_8Bit SCRINTTC0:1;        /**< \brief [6:6] Main IR interrupt request 0 (rw1sh) */
    __IO Ifx_UReg_8Bit SCRINTTC1:1;        /**< \brief [7:7] Main IR interrupt request 1 (rw1sh) */
} Ifx_SCR_IR_NMICON_Bits;

/** \brief NMI status register */
typedef struct _Ifx_SCR_IR_NMISTAT_Bits
{
    __IO Ifx_UReg_8Bit FNMIWDT:1;          /**< \brief [0:0] Watchdog timer NMI flag (rw0ch) */
    __IO Ifx_UReg_8Bit FNMIRAMECC:1;       /**< \brief [1:1] RAM double bit ECC error NMI flag (rw0ch) */
    __IO Ifx_UReg_8Bit FNMIEXTNMI:1;       /**< \brief [2:2] External NMI (via EXTNMI pin) flag (rw0ch) */
    __IO Ifx_UReg_8Bit FNMIOCDS:1;         /**< \brief [3:3] OCDS NMI flag (rw0ch) */
    __IO Ifx_UReg_8Bit FNMIMAINC:1;        /**< \brief [4:4] Main controller NMI flag (rw0ch) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_8Bit FNMIWKP:1;          /**< \brief [6:6] Wake-up NMI flag (rw0ch) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_IR_NMISTAT_Bits;

/** \brief External interrupt input select register 0 */
typedef struct _Ifx_SCR_IR_PISEL0_Bits
{
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_8Bit EXINT0IS:2;         /**< \brief [3:2] External interrupt input 0 select (rw) */
    __IO Ifx_UReg_8Bit EXINT1IS:2;         /**< \brief [5:4] External interrupt input 1 select (rw) */
    __IO Ifx_UReg_8Bit EXINT2IS:2;         /**< \brief [7:6] External interrupt input 2 select (rw) */
} Ifx_SCR_IR_PISEL0_Bits;

/** \brief External interrupt input select register 1 */
typedef struct _Ifx_SCR_IR_PISEL1_Bits
{
    __IO Ifx_UReg_8Bit EXINT3_T2CCU0CH0_IS:2;    /**< \brief [1:0] External interrupt 3 / T2CCU0 capture channel 0 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT4_T2CCU0CH1_IS:2;    /**< \brief [3:2] External interrupt 4 / T2CCU0 capture channel 1 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT5_T2CCU0CH2_IS:2;    /**< \brief [5:4] External interrupt 5 / T2CCU0 capture channel 2 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT6_T2CCU0CH3_IS:2;    /**< \brief [7:6] External interrupt 6 / T2CCU0 capture channel 3 input select (rw) */
} Ifx_SCR_IR_PISEL1_Bits;

/** \brief External interrupt input select register 2 */
typedef struct _Ifx_SCR_IR_PISEL2_Bits
{
    __IO Ifx_UReg_8Bit EXINT8_T2CCU1CH0_IS:2;    /**< \brief [1:0] External interrupt 8 / T2CCU1 capture channel 0 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT9_T2CCU1CH1_IS:2;    /**< \brief [3:2] External interrupt 9 / T2CCU1 capture channel 1 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT10_T2CCU1CH2_IS:2;    /**< \brief [5:4] External interrupt 10 / T2CCU1 capture channel 2 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT11_T2CCU1CH3_IS:2;    /**< \brief [7:6] External interrupt 11 / T2CCU1 capture channel 3 input select (rw) */
} Ifx_SCR_IR_PISEL2_Bits;

/** \brief External interrupt input select register 3 */
typedef struct _Ifx_SCR_IR_PISEL3_Bits
{
    __IO Ifx_UReg_8Bit EXINT12IS:2;        /**< \brief [1:0] External interrupt 12 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT13IS:2;        /**< \brief [3:2] External interrupt 13 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT14IS:2;        /**< \brief [5:4] External interrupt 14 input select (rw) */
    __IO Ifx_UReg_8Bit EXINT15IS:2;        /**< \brief [7:6] External interrupt 15 input select (rw) */
} Ifx_SCR_IR_PISEL3_Bits;

/** \brief Baudrate control register */
typedef struct _Ifx_SCR_LIN_BCON_Bits
{
    __IO Ifx_UReg_8Bit R:1;                /**< \brief [0:0] Baudrate generator run control bit (rw) */
    __IO Ifx_UReg_8Bit BRPRE:3;            /**< \brief [3:1] Prescaler bit (rw) */
    __IO Ifx_UReg_8Bit BRDIS:1;            /**< \brief [4:4] Baudrate detection disable (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [5:5] \internal Reserved */
    __IO Ifx_UReg_8Bit BGSEL:2;            /**< \brief [7:6] Baudrate select for detection (rw) */
} Ifx_SCR_LIN_BCON_Bits;

/** \brief Baudrate timer/reload register, high byte */
typedef struct _Ifx_SCR_LIN_BGH_Bits
{
    __IO Ifx_UReg_8Bit BR_VALUE:8;         /**< \brief [7:0] Baudrate timer/reload value (rwh) */
} Ifx_SCR_LIN_BGH_Bits;

/** \brief Baudrate timer/reload register, low byte */
typedef struct _Ifx_SCR_LIN_BGL_Bits
{
    __IO Ifx_UReg_8Bit FD_SEL:5;           /**< \brief [4:0] Fractional divider selection (rw) */
    __IO Ifx_UReg_8Bit BR_VALUE:3;         /**< \brief [7:5] Baudrate timer/reload value (rwh) */
} Ifx_SCR_LIN_BGL_Bits;

/** \brief LIN status register */
typedef struct _Ifx_SCR_LIN_STAT_Bits
{
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_8Bit BRK:1;              /**< \brief [3:3] Break field flag (rwh) */
    __IO Ifx_UReg_8Bit EOFSYN:1;           /**< \brief [4:4] End of SYN byte interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit ERRSYN:1;           /**< \brief [5:5] SYN byte error interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit SYNEN:1;            /**< \brief [6:6] End of SYN byte and SYN byte error interrupts enable (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_LIN_STAT_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_SCR_PAGE_Bits
{
    __IO Ifx_UReg_8Bit PAGE:3;             /**< \brief [2:0] Page bits (rwh) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [3:3] \internal Reserved */
    __O  Ifx_UReg_8Bit STNR:2;             /**< \brief [5:4] Storage number (w) */
    __O  Ifx_UReg_8Bit OP:2;               /**< \brief [7:6] Operation (w) */
} Ifx_SCR_PAGE_Bits;

/** \brief Password register */
typedef struct _Ifx_SCR_PASSWD_Bits
{
    __IO Ifx_UReg_8Bit MODE:2;             /**< \brief [1:0] Bit-protection scheme control bit (rwh) */
    __I  Ifx_UReg_8Bit PROTECT_S:1;        /**< \brief [2:2] Bit-protection signal status bit (rh) */
    __O  Ifx_UReg_8Bit PASS:5;             /**< \brief [7:3] Password bits (w) */
} Ifx_SCR_PASSWD_Bits;

/** \brief Power control register */
typedef struct _Ifx_SCR_PCON_Bits
{
    __IO Ifx_UReg_8Bit IDLE:1;             /**< \brief [0:0] Idle mode enable (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_8Bit GF0:1;              /**< \brief [2:2] General purpose flag bit 0 (rw) */
    __IO Ifx_UReg_8Bit GF1:1;              /**< \brief [3:3] General purpose flag bit 1 (rw) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [6:4] \internal Reserved */
    __IO Ifx_UReg_8Bit SMOD:1;             /**< \brief [7:7] Double baud rate enable (rw) */
} Ifx_SCR_PCON_Bits;

/** \brief Program status word register */
typedef struct _Ifx_SCR_PSW_Bits
{
    __I  Ifx_UReg_8Bit P:1;                /**< \brief [0:0] Parity flag (rh) */
    __IO Ifx_UReg_8Bit F1:1;               /**< \brief [1:1] General purpose flag (rw) */
    __IO Ifx_UReg_8Bit OV:1;               /**< \brief [2:2] Overflow flag (rwh) */
    __IO Ifx_UReg_8Bit RS:2;               /**< \brief [4:3] Register bank select (rw) */
    __IO Ifx_UReg_8Bit F0:1;               /**< \brief [5:5] General purpose flag (rw) */
    __IO Ifx_UReg_8Bit AC:1;               /**< \brief [6:6] Auxiliary carry flag (rwh) */
    __IO Ifx_UReg_8Bit CY:1;               /**< \brief [7:7] Carry flag (rwh) */
} Ifx_SCR_PSW_Bits;

/** \brief Port Pn input register */
typedef struct _Ifx_SCR_P_IN_Bits
{
    __I  Ifx_UReg_8Bit P0:1;               /**< \brief [0:0] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P1:1;               /**< \brief [1:1] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P2:1;               /**< \brief [2:2] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P3:1;               /**< \brief [3:3] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P4:1;               /**< \brief [4:4] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P5:1;               /**< \brief [5:5] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P6:1;               /**< \brief [6:6] Port Pn input bit m (rh) */
    __I  Ifx_UReg_8Bit P7:1;               /**< \brief [7:7] Port Pn input bit m (rh) */
} Ifx_SCR_P_IN_Bits;

/** \brief Port Pn input/output control register m */
typedef struct _Ifx_SCR_P_IOCR_Bits
{
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_8Bit PC:5;               /**< \brief [7:3] Port control for port Pn pin m (rwh) */
} Ifx_SCR_P_IOCR_Bits;

/** \brief Port Pn output modification clear register */
typedef struct _Ifx_SCR_P_OMCR_Bits
{
    __O  Ifx_UReg_8Bit PCL0:1;             /**< \brief [0:0] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL1:1;             /**< \brief [1:1] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL2:1;             /**< \brief [2:2] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL3:1;             /**< \brief [3:3] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL4:1;             /**< \brief [4:4] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL5:1;             /**< \brief [5:5] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL6:1;             /**< \brief [6:6] Port Pn clear bit m (w) */
    __O  Ifx_UReg_8Bit PCL7:1;             /**< \brief [7:7] Port Pn clear bit m (w) */
} Ifx_SCR_P_OMCR_Bits;

/** \brief Port Pn output modification set register */
typedef struct _Ifx_SCR_P_OMSR_Bits
{
    __O  Ifx_UReg_8Bit PS0:1;              /**< \brief [0:0] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS1:1;              /**< \brief [1:1] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS2:1;              /**< \brief [2:2] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS3:1;              /**< \brief [3:3] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS4:1;              /**< \brief [4:4] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS5:1;              /**< \brief [5:5] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS6:1;              /**< \brief [6:6] Port Pn set bit m (w) */
    __O  Ifx_UReg_8Bit PS7:1;              /**< \brief [7:7] Port Pn set bit m (w) */
} Ifx_SCR_P_OMSR_Bits;

/** \brief Port Pn output modification toggle register */
typedef struct _Ifx_SCR_P_OMTR_Bits
{
    __O  Ifx_UReg_8Bit PTL0:1;             /**< \brief [0:0] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL1:1;             /**< \brief [1:1] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL2:1;             /**< \brief [2:2] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL3:1;             /**< \brief [3:3] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL4:1;             /**< \brief [4:4] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL5:1;             /**< \brief [5:5] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL6:1;             /**< \brief [6:6] Port Pn toggle bit m (w) */
    __O  Ifx_UReg_8Bit PTL7:1;             /**< \brief [7:7] Port Pn toggle bit m (w) */
} Ifx_SCR_P_OMTR_Bits;

/** \brief Port Pn output register */
typedef struct _Ifx_SCR_P_OUT_Bits
{
    __IO Ifx_UReg_8Bit P0:1;               /**< \brief [0:0] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P1:1;               /**< \brief [1:1] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P2:1;               /**< \brief [2:2] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P3:1;               /**< \brief [3:3] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P4:1;               /**< \brief [4:4] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P5:1;               /**< \brief [5:5] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P6:1;               /**< \brief [6:6] Port Pn output bit m (rwh) */
    __IO Ifx_UReg_8Bit P7:1;               /**< \brief [7:7] Port Pn output bit m (rwh) */
} Ifx_SCR_P_OUT_Bits;

/** \brief Port Pn pin function decision control register */
typedef struct _Ifx_SCR_P_PDISC_Bits
{
    __IO Ifx_UReg_8Bit PDIS0:1;            /**< \brief [0:0] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS1:1;            /**< \brief [1:1] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS2:1;            /**< \brief [2:2] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS3:1;            /**< \brief [3:3] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS4:1;            /**< \brief [4:4] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS5:1;            /**< \brief [5:5] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS6:1;            /**< \brief [6:6] Pin function decision control for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PDIS7:1;            /**< \brief [7:7] Pin function decision control for port Pn pin m (rw) */
} Ifx_SCR_P_PDISC_Bits;

/** \brief Port Pn pad driver mode 0 register */
typedef struct _Ifx_SCR_P_PDR0_Bits
{
    __IO Ifx_UReg_8Bit PD0:2;              /**< \brief [1:0] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL0:2;              /**< \brief [3:2] Pad level selection for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PD1:2;              /**< \brief [5:4] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL1:2;              /**< \brief [7:6] Pad level selection for port Pn pin m (rw) */
} Ifx_SCR_P_PDR0_Bits;

/** \brief Port Pn pad driver mode 2 register */
typedef struct _Ifx_SCR_P_PDR2_Bits
{
    __IO Ifx_UReg_8Bit PD2:2;              /**< \brief [1:0] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL2:2;              /**< \brief [3:2] Pad level selection for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PD3:2;              /**< \brief [5:4] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL3:2;              /**< \brief [7:6] Pad level selection for port Pn pin m (rw) */
} Ifx_SCR_P_PDR2_Bits;

/** \brief Port Pn pad driver mode 4 register */
typedef struct _Ifx_SCR_P_PDR4_Bits
{
    __IO Ifx_UReg_8Bit PD4:2;              /**< \brief [1:0] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL4:2;              /**< \brief [3:2] Pad level selection for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PD5:2;              /**< \brief [5:4] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL5:2;              /**< \brief [7:6] Pad level selection for port Pn pin m (rw) */
} Ifx_SCR_P_PDR4_Bits;

/** \brief Port Pn pad driver mode 6 register */
typedef struct _Ifx_SCR_P_PDR6_Bits
{
    __IO Ifx_UReg_8Bit PD6:2;              /**< \brief [1:0] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL6:2;              /**< \brief [3:2] Pad level selection for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PD7:2;              /**< \brief [5:4] Pad driver mode for port Pn pin m (rw) */
    __IO Ifx_UReg_8Bit PL7:2;              /**< \brief [7:6] Pad level selection for port Pn pin m (rw) */
} Ifx_SCR_P_PDR6_Bits;

/** \brief Count clock register 0 */
typedef struct _Ifx_SCR_RTC_CNT_Bits
{
    __IO Ifx_UReg_8Bit CNT_VAL:8;          /**< \brief [7:0] Real-time clock count value (rwh) */
} Ifx_SCR_RTC_CNT_Bits;

/** \brief Real-time clock control register */
typedef struct _Ifx_SCR_RTC_CON_Bits
{
    __IO Ifx_UReg_8Bit RTCC:1;             /**< \brief [0:0] Real-time clock start/stop control (rw) */
    __IO Ifx_UReg_8Bit RTCCLKSEL:2;        /**< \brief [2:1] Real-time clock input clock selection (rw) */
    __O  Ifx_UReg_8Bit RTCCLKSEL_P:1;      /**< \brief [3:3] RTCCLKSEL protection bit (w) */
    __IO Ifx_UReg_8Bit RTPBYP:1;           /**< \brief [4:4] Real-time clock 9-bit prescaler bypass (rw) */
    __IO Ifx_UReg_8Bit RTCCT:1;            /**< \brief [5:5] Real-time clock capture event trigger (rwh) */
    __IO Ifx_UReg_8Bit ECRTC:1;            /**< \brief [6:6] Real-time clock compare interrupt enable (rw) */
    __IO Ifx_UReg_8Bit CFRTC:1;            /**< \brief [7:7] Real-time clock compare flag (rwh) */
} Ifx_SCR_RTC_CON_Bits;

/** \brief Real-time clock compare/capture register 0 */
typedef struct _Ifx_SCR_RTC_CR_Bits
{
    __IO Ifx_UReg_8Bit CC_VAL:8;           /**< \brief [7:0] Compare/Capture value (rwh) */
} Ifx_SCR_RTC_CR_Bits;

/** \brief Clock control and status register */
typedef struct _Ifx_SCR_SCU_CLK_Bits
{
    __IO Ifx_UReg_8Bit DIV_REQ:4;          /**< \brief [3:0] Clock divider request (rwh) */
    __I  Ifx_UReg_8Bit DIV_STAT:4;         /**< \brief [7:4] Clock divider status (rh) */
} Ifx_SCR_SCU_CLK_Bits;

/** \brief Module suspend control register */
typedef struct _Ifx_SCR_SCU_DBG_MODSUSP_Bits
{
    __IO Ifx_UReg_8Bit WDTSUSP:1;          /**< \brief [0:0] SCU watchdog timer debug suspend bit (rw) */
    __IO Ifx_UReg_8Bit RTCSUSP:1;          /**< \brief [1:1] Real-time clock debug suspend bit (rw) */
    __IO Ifx_UReg_8Bit T2CCU0SUSP:1;       /**< \brief [2:2] T2CCU0 debug suspend bit (rw) */
    __IO Ifx_UReg_8Bit T2CCU1SUSP:1;       /**< \brief [3:3] T2CCU1 debug suspend bit (rw) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_SCU_DBG_MODSUSP_Bits;

/** \brief Peripheral input select register 0 */
typedef struct _Ifx_SCR_SCU_MODPISEL0_Bits
{
    __IO Ifx_UReg_8Bit URRIS:4;            /**< \brief [3:0] UART receiver input select (rw) */
    __IO Ifx_UReg_8Bit T0IS:2;             /**< \brief [5:4] Timer 0 input select (rw) */
    __IO Ifx_UReg_8Bit T1IS:2;             /**< \brief [7:6] Timer 1 input select (rw) */
} Ifx_SCR_SCU_MODPISEL0_Bits;

/** \brief Peripheral input select register 1 */
typedef struct _Ifx_SCR_SCU_MODPISEL1_Bits
{
    __IO Ifx_UReg_8Bit PINRSTIS:2;         /**< \brief [1:0] Reset pin input select (rw) */
    __IO Ifx_UReg_8Bit MIS:2;              /**< \brief [3:2] Master mode receive input select (rw) */
    __IO Ifx_UReg_8Bit SIS:2;              /**< \brief [5:4] Slave mode receive input select (rw) */
    __IO Ifx_UReg_8Bit CIS:2;              /**< \brief [7:6] Slave mode clock input select (rw) */
} Ifx_SCR_SCU_MODPISEL1_Bits;

/** \brief Main reset status register */
typedef struct _Ifx_SCR_SCU_MRSTSTAT_Bits
{
    __IO Ifx_UReg_8Bit SMURST:1;           /**< \brief [0:0] SMU reset status bit (rw0ch) */
    __IO Ifx_UReg_8Bit APPRST:1;           /**< \brief [1:1] Application reset status bit (rw0ch) */
    __I  Ifx_UReg_8Bit :6;                 /**< \brief [7:2] \internal Reserved */
} Ifx_SCR_SCU_MRSTSTAT_Bits;

/** \brief Peripheral management control register 0 */
typedef struct _Ifx_SCR_SCU_PMCON0_Bits
{
    __IO Ifx_UReg_8Bit SSC_DIS:1;          /**< \brief [0:0] SSC disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit RTC_DIS:1;          /**< \brief [1:1] RTC disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit WCAN_DIS:1;         /**< \brief [2:2] WCAN disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit WDT_DIS:1;          /**< \brief [3:3] Watchdog disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit LIN_DIS:1;          /**< \brief [4:4] LIN disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit T2CCU0_DIS:1;       /**< \brief [5:5] T2CCU0 disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit T2CCU1_DIS:1;       /**< \brief [6:6] T2CCU1 disable request (active high) (rw) */
    __IO Ifx_UReg_8Bit OCDS_DIS:1;         /**< \brief [7:7] OCDS disable request (active high) (rw) */
} Ifx_SCR_SCU_PMCON0_Bits;

/** \brief Peripheral management control register 1 */
typedef struct _Ifx_SCR_SCU_PMCON1_Bits
{
    __IO Ifx_UReg_8Bit I2C_DIS:1;          /**< \brief [0:0] I2C disable request (active high) (rw) */
    __I  Ifx_UReg_8Bit :7;                 /**< \brief [7:1] \internal Reserved */
} Ifx_SCR_SCU_PMCON1_Bits;

/** \brief Control for PMS DTS */
typedef struct _Ifx_SCR_SCU_PMSDTS_CON_Bits
{
    __O  Ifx_UReg_8Bit EN_START:1;         /**< \brief [0:0] DTS enable and start signal (w) */
    __I  Ifx_UReg_8Bit :7;                 /**< \brief [7:1] \internal Reserved */
} Ifx_SCR_SCU_PMSDTS_CON_Bits;

/** \brief Die temperature sensor result register - upper 4-bits */
typedef struct _Ifx_SCR_SCU_PMSDTS_RES11_8_Bits
{
    __I  Ifx_UReg_8Bit VAL:4;              /**< \brief [3:0] Temperature-sensing mode readout (rh) */
    __I  Ifx_UReg_8Bit RES_READY:1;        /**< \brief [4:4] DTS results ready status (rh) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_PMSDTS_RES11_8_Bits;

/** \brief Die temperature sensor result register - lower 8-bits */
typedef struct _Ifx_SCR_SCU_PMSDTS_RES7_0_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Temperature-sensing mode readout (rh) */
} Ifx_SCR_SCU_PMSDTS_RES7_0_Bits;

/** \brief Trimming register for PMS High Precision BandGap (HPBG) */
typedef struct _Ifx_SCR_SCU_PMSHPBG_BGTRIM_Bits
{
    __IO Ifx_UReg_8Bit VAL:7;              /**< \brief [6:0] BGTRIM[6:0] value (rwh) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_SCU_PMSHPBG_BGTRIM_Bits;

/** \brief SCR access to PMS_HPOSCCON1.OSCFTRIM[7:0] bits and update trigger for complete PMS_HPOSCCON1.OSCFTRIM */
typedef struct _Ifx_SCR_SCU_PMSHPOSC_FTRIM7_0_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] OSCFTRIM[7:0] value (rwh) */
} Ifx_SCR_SCU_PMSHPOSC_FTRIM7_0_Bits;

/** \brief SCR shadow register for PMS_HPOSCCON1.OSCFTRIM[8:8] bits */
typedef struct _Ifx_SCR_SCU_PMSHPOSC_FTRIM8_8_Bits
{
    __IO Ifx_UReg_8Bit VAL:1;              /**< \brief [0:0] OSCFTRIM[8:8] value (rwh) */
    __I  Ifx_UReg_8Bit :7;                 /**< \brief [7:1] \internal Reserved */
} Ifx_SCR_SCU_PMSHPOSC_FTRIM8_8_Bits;

/** \brief SCR shadow register for PMS_RTC_CMP1[15:8] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_CMP1_15_8_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] CMP1[15:8] value (rwh) */
} Ifx_SCR_SCU_PMSRTC_CMP1_15_8_Bits;

/** \brief SCR shadow register for PMS_RTC_CMP1[23:16] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_CMP1_23_16_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] CMP1[23:16] value (rwh) */
} Ifx_SCR_SCU_PMSRTC_CMP1_23_16_Bits;

/** \brief SCR shadow register for PMS_RTC_CMP1[31:24] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_CMP1_31_24_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] CMP1[31:24] value (rwh) */
} Ifx_SCR_SCU_PMSRTC_CMP1_31_24_Bits;

/** \brief SCR access to PMS_RTC_CMP1[7:0] bits and update trigger for complete PMS_RTC_CMP1 */
typedef struct _Ifx_SCR_SCU_PMSRTC_CMP1_7_0_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] CMP1[7:0] value (rwh) */
} Ifx_SCR_SCU_PMSRTC_CMP1_7_0_Bits;

/** \brief SCR access to PMS_RTC_CON2.MSIZE1 bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_MSIZE1_Bits
{
    __IO Ifx_UReg_8Bit VAL:5;              /**< \brief [4:0] MSIZE1 value (rwh) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_PMSRTC_MSIZE1_Bits;

/** \brief SCR access to PMS_RTC_CON2.MSTART1 bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_MSTART1_Bits
{
    __IO Ifx_UReg_8Bit VAL:5;              /**< \brief [4:0] MSTART1 value (rwh) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_PMSRTC_MSTART1_Bits;

/** \brief SCR shadow register for PMS_RTC_CON1.OFFSET[15:8] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_OFFSET15_8_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] OFFSET[15:8] value (rwh) */
} Ifx_SCR_SCU_PMSRTC_OFFSET15_8_Bits;

/** \brief SCR access to PMS_RTC_CON1.OFFSET[7:0] bits and update trigger for complete PMS_RTC_CON1.OFFSET */
typedef struct _Ifx_SCR_SCU_PMSRTC_OFFSET7_0_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] OFFSET[7:0] value (rwh) */
} Ifx_SCR_SCU_PMSRTC_OFFSET7_0_Bits;

/** \brief SCR access to PMS_RTC_TIM[15:8] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM15_8_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[15:8] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM15_8_Bits;

/** \brief SCR access to PMS_RTC_TIM[23:16] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM23_16_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[23:16] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM23_16_Bits;

/** \brief SCR access to PMS_RTC_TIM[31:24] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM31_24_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[31:24] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM31_24_Bits;

/** \brief SCR access to PMS_RTC_TIM[39:32] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM39_32_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[39:32] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM39_32_Bits;

/** \brief SCR access to PMS_RTC_TIM[47:40] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM47_40_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[47:40] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM47_40_Bits;

/** \brief SCR access to PMS_RTC_TIM[55:48] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM55_48_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[55:48] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM55_48_Bits;

/** \brief SCR access to PMS_RTC_TIM[63:56] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM63_56_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[63:56] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM63_56_Bits;

/** \brief SCR access to PMS_RTC_TIM[7:0] bits */
typedef struct _Ifx_SCR_SCU_PMSRTC_TIM7_0_Bits
{
    __I  Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] TIM[7:0] value (rh) */
} Ifx_SCR_SCU_PMSRTC_TIM7_0_Bits;

/** \brief Reset control register */
typedef struct _Ifx_SCR_SCU_RSTCON_Bits
{
    __IO Ifx_UReg_8Bit RAMECCRSTEN:1;      /**< \brief [0:0] Double bit ECC reset enable bit (rw) */
    __IO Ifx_UReg_8Bit WDTRSTEN:1;         /**< \brief [1:1] Watchdog reset enable bit (rw) */
    __IO Ifx_UReg_8Bit PINRSTEN:1;         /**< \brief [2:2] Pin reset enable bit (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_8Bit SWRSTREQ:1;         /**< \brief [4:4] Software reset request (rw1sh) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_RSTCON_Bits;

/** \brief SCR reset status register */
typedef struct _Ifx_SCR_SCU_RSTSTAT_Bits
{
    __IO Ifx_UReg_8Bit RAMECCRST:1;        /**< \brief [0:0] Double bit ECC reset indication bit (rw0ch) */
    __IO Ifx_UReg_8Bit WDTRST:1;           /**< \brief [1:1] Watchdog timer reset indication bit (rw0ch) */
    __IO Ifx_UReg_8Bit PINRST:1;           /**< \brief [2:2] Pin reset indication bit (rw0ch) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_8Bit SWRST:1;            /**< \brief [4:4] Software reset indication bit (rw0ch) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_RSTSTAT_Bits;

/** \brief SCR interrupt data exchange register */
typedef struct _Ifx_SCR_SCU_SCRINTEXCHG_Bits
{
    __IO Ifx_UReg_8Bit SCRINT:8;           /**< \brief [7:0] Data exchange from SCR to main controller (rw) */
} Ifx_SCR_SCU_SCRINTEXCHG_Bits;

/** \brief SCU status register */
typedef struct _Ifx_SCR_SCU_STBY_Bits
{
    __I  Ifx_UReg_8Bit STBYSTAT:1;         /**< \brief [0:0] System standby mode status (rh) */
    __I  Ifx_UReg_8Bit STBY0WKP:1;         /**< \brief [1:1] Standby0 wake-up flag (rh) */
    __I  Ifx_UReg_8Bit PMSRTCWKP:1;        /**< \brief [2:2] PMS RTC wake-up flag (rh) */
    __I  Ifx_UReg_8Bit PMS0WKP:1;          /**< \brief [3:3] PMS0 combined wake-up flags (rh) */
    __O  Ifx_UReg_8Bit PMSWKPCLR:1;        /**< \brief [4:4] Clear wake-up flags in PMS (w) */
    __IO Ifx_UReg_8Bit STBY0REQ:1;         /**< \brief [5:5] Request transition from STBY1 to STBY0 system state (can only be set during STBY1) (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_SCU_STBY_Bits;

/** \brief TriCore interrupt data exchange register */
typedef struct _Ifx_SCR_SCU_TCINTEXCHG_Bits
{
    __I  Ifx_UReg_8Bit TCINT:8;            /**< \brief [7:0] Data exchange from main controller to SCR (rh) */
} Ifx_SCR_SCU_TCINTEXCHG_Bits;

/** \brief Control register for system wake-up via SCR sources */
typedef struct _Ifx_SCR_SCU_WKPCON_Bits
{
    __IO Ifx_UReg_8Bit RTCWKPSEL:1;        /**< \brief [0:0] RTC wake-up select (rw) */
    __IO Ifx_UReg_8Bit WCANINTWKPSEL:1;    /**< \brief [1:1] WCAN interrupt wake-up select (rw) */
    __IO Ifx_UReg_8Bit WDTWKPSEL:1;        /**< \brief [2:2] WDT wake-up select (rw) */
    __IO Ifx_UReg_8Bit RAMECCWKPSEL:1;     /**< \brief [3:3] RAM ECC wake-up select (rw) */
    __IO Ifx_UReg_8Bit SWWKPREQ:1;         /**< \brief [4:4] Software wake-up request (rwh) */
    __I  Ifx_UReg_8Bit :3;                 /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_WKPCON_Bits;

/** \brief Stack pointer */
typedef struct _Ifx_SCR_SP_Bits
{
    __IO Ifx_UReg_8Bit SP:8;               /**< \brief [7:0] Stack pointer value (rwh) */
} Ifx_SCR_SP_Bits;

/** \brief Baud rate timer reload register high */
typedef struct _Ifx_SCR_SSC_BRH_Bits
{
    __IO Ifx_UReg_8Bit BR_VALUE:8;         /**< \brief [7:0] Baud rate timer reload register value, high byte (rw) */
} Ifx_SCR_SSC_BRH_Bits;

/** \brief Baud rate timer reload register low */
typedef struct _Ifx_SCR_SSC_BRL_Bits
{
    __IO Ifx_UReg_8Bit BR_VALUE:8;         /**< \brief [7:0] Baud rate timer reload register value, low byte (rw) */
} Ifx_SCR_SSC_BRL_Bits;

/** \brief Control register high [operation mode] */
typedef struct _Ifx_SCR_SSC_CONOH_Bits
{
    __IO Ifx_UReg_8Bit TE:1;               /**< \brief [0:0] Transmit error flag (rw0ch) */
    __IO Ifx_UReg_8Bit RE:1;               /**< \brief [1:1] Receive error flag (rw0ch) */
    __I  Ifx_UReg_8Bit RFE:1;              /**< \brief [2:2] Receive FIFO buffer empty flag (rh) */
    __IO Ifx_UReg_8Bit BE:1;               /**< \brief [3:3] Baudrate error flag (rw0ch) */
    __I  Ifx_UReg_8Bit BSY:1;              /**< \brief [4:4] Busy flag (rh) */
    __I  Ifx_UReg_8Bit RFF:1;              /**< \brief [5:5] Receive FIFO buffer full flag (rh) */
    __IO Ifx_UReg_8Bit MS:1;               /**< \brief [6:6] Master select (rw) */
    __IO Ifx_UReg_8Bit EN:1;               /**< \brief [7:7] Enable bit = 1 (needed for operating mode) (rw) */
} Ifx_SCR_SSC_CONOH_Bits;

/** \brief Control register low [operation mode] */
typedef struct _Ifx_SCR_SSC_CONOL_Bits
{
    __I  Ifx_UReg_8Bit BC:4;               /**< \brief [3:0] Bit count field (rh) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_SSC_CONOL_Bits;

/** \brief Control register high [programming mode] */
typedef struct _Ifx_SCR_SSC_CONPH_Bits
{
    __IO Ifx_UReg_8Bit TEN:1;              /**< \brief [0:0] Transmit error enable (rw) */
    __IO Ifx_UReg_8Bit REN:1;              /**< \brief [1:1] Receive error enable (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_8Bit BEN:1;              /**< \brief [3:3] Baudrate error enable (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [5:4] \internal Reserved */
    __IO Ifx_UReg_8Bit MS:1;               /**< \brief [6:6] Master select (rw) */
    __IO Ifx_UReg_8Bit EN:1;               /**< \brief [7:7] Enable bit = 0 (needed for programming mode) (rw) */
} Ifx_SCR_SSC_CONPH_Bits;

/** \brief Control register low [programming mode] */
typedef struct _Ifx_SCR_SSC_CONPL_Bits
{
    __IO Ifx_UReg_8Bit BM:3;               /**< \brief [2:0] Data width selection (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_8Bit HB:1;               /**< \brief [4:4] Heading control (rw) */
    __IO Ifx_UReg_8Bit PH:1;               /**< \brief [5:5] Clock phase control (rw) */
    __IO Ifx_UReg_8Bit PO:1;               /**< \brief [6:6] Clock polarity control (rw) */
    __IO Ifx_UReg_8Bit LB:1;               /**< \brief [7:7] Loop back control (rw) */
} Ifx_SCR_SSC_CONPL_Bits;

/** \brief Receiver buffer register */
typedef struct _Ifx_SCR_SSC_RBL_Bits
{
    __I  Ifx_UReg_8Bit RB_VALUE:8;         /**< \brief [7:0] Receive data register value (rh) */
} Ifx_SCR_SSC_RBL_Bits;

/** \brief Transmitter buffer register */
typedef struct _Ifx_SCR_SSC_TBL_Bits
{
    __IO Ifx_UReg_8Bit TB_VALUE:8;         /**< \brief [7:0] Transmit data register value (rw) */
} Ifx_SCR_SSC_TBL_Bits;

/** \brief System control register 0 */
typedef struct _Ifx_SCR_SYSCON0_Bits
{
    __IO Ifx_UReg_8Bit RMAP:1;             /**< \brief [0:0] Special function register map control (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_8Bit AMSEL:1;            /**< \brief [2:2] Active memory map select (rw0c) */
    __I  Ifx_UReg_8Bit :5;                 /**< \brief [7:3] \internal Reserved */
} Ifx_SCR_SYSCON0_Bits;

/** \brief Timer 0/1 control register */
typedef struct _Ifx_SCR_T01_TCON_Bits
{
    __IO Ifx_UReg_8Bit IT0:1;              /**< \brief [0:0] External interrupt 0 level/edge trigger control (rw) */
    __IO Ifx_UReg_8Bit IE0:1;              /**< \brief [1:1] External interrupt 0 flag (rwh) */
    __IO Ifx_UReg_8Bit IT1:1;              /**< \brief [2:2] External interrupt 1 level/edge trigger control (rw) */
    __IO Ifx_UReg_8Bit IE1:1;              /**< \brief [3:3] External interrupt 1 flag (rwh) */
    __IO Ifx_UReg_8Bit TR0:1;              /**< \brief [4:4] Timer 0 run control (rw) */
    __IO Ifx_UReg_8Bit TF0:1;              /**< \brief [5:5] Timer 0 overflow flag (rwh) */
    __IO Ifx_UReg_8Bit TR1:1;              /**< \brief [6:6] Timer 1 run control (rw) */
    __IO Ifx_UReg_8Bit TF1:1;              /**< \brief [7:7] Timer 1 overflow flag (rwh) */
} Ifx_SCR_T01_TCON_Bits;

/** \brief Timer 0 high byte */
typedef struct _Ifx_SCR_T01_TH0_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 0 high byte value (rwh) */
} Ifx_SCR_T01_TH0_Bits;

/** \brief Timer 1 high byte */
typedef struct _Ifx_SCR_T01_TH1_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 1 high byte value (rwh) */
} Ifx_SCR_T01_TH1_Bits;

/** \brief Timer 0 low byte */
typedef struct _Ifx_SCR_T01_TL0_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 0 low byte value (rwh) */
} Ifx_SCR_T01_TL0_Bits;

/** \brief Timer 1 low byte */
typedef struct _Ifx_SCR_T01_TL1_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 1 low byte value (rwh) */
} Ifx_SCR_T01_TL1_Bits;

/** \brief Timer mode register */
typedef struct _Ifx_SCR_T01_TMOD_Bits
{
    __IO Ifx_UReg_8Bit T0M:2;              /**< \brief [1:0] Timer 0 mode select bits (rw) */
    __IO Ifx_UReg_8Bit T0S:1;              /**< \brief [2:2] Timer 0 input selector (rw) */
    __IO Ifx_UReg_8Bit GATE0:1;            /**< \brief [3:3] Timer 0 gate control (rw) */
    __IO Ifx_UReg_8Bit T1M:2;              /**< \brief [5:4] Timer 1 mode select bits (rw) */
    __IO Ifx_UReg_8Bit T1S:1;              /**< \brief [6:6] Timer 1 input selector (rw) */
    __IO Ifx_UReg_8Bit GATE1:1;            /**< \brief [7:7] Timer 1 gate control (rw) */
} Ifx_SCR_T01_TMOD_Bits;

/** \brief T2CCU0 capture/compare register x high */
typedef struct _Ifx_SCR_T2CCU0_CC02_CCXH_Bits
{
    __IO Ifx_UReg_8Bit CCVALH:8;           /**< \brief [7:0] Capture/Compare high byte value for channel x (rwh) */
} Ifx_SCR_T2CCU0_CC02_CCXH_Bits;

/** \brief T2CCU0 capture/compare register x low */
typedef struct _Ifx_SCR_T2CCU0_CC02_CCXL_Bits
{
    __IO Ifx_UReg_8Bit CCVALL:8;           /**< \brief [7:0] Capture/Compare low byte value for channel x (rwh) */
} Ifx_SCR_T2CCU0_CC02_CCXL_Bits;

/** \brief T2CCU0 capture/compare register x high */
typedef struct _Ifx_SCR_T2CCU0_CC35_CCXH_Bits
{
    __IO Ifx_UReg_8Bit CCVALH:8;           /**< \brief [7:0] Capture/Compare high byte value for channel x (rwh) */
} Ifx_SCR_T2CCU0_CC35_CCXH_Bits;

/** \brief T2CCU0 capture/compare register x low */
typedef struct _Ifx_SCR_T2CCU0_CC35_CCXL_Bits
{
    __IO Ifx_UReg_8Bit CCVALL:8;           /**< \brief [7:0] Capture/Compare low byte value for channel x (rwh) */
} Ifx_SCR_T2CCU0_CC35_CCXL_Bits;

/** \brief T2CCU0 capture/compare enable register */
typedef struct _Ifx_SCR_T2CCU0_CCEN_Bits
{
    __IO Ifx_UReg_8Bit CCM0:2;             /**< \brief [1:0] Capture/Compare enable for channel 0 (rw) */
    __IO Ifx_UReg_8Bit CCM1:2;             /**< \brief [3:2] Capture/Compare enable for channel 1 (rw) */
    __IO Ifx_UReg_8Bit CCM2:2;             /**< \brief [5:4] Capture/Compare enable for channel 2 (rw) */
    __IO Ifx_UReg_8Bit CCM3:2;             /**< \brief [7:6] Capture/Compare enable for channel 3 (rw) */
} Ifx_SCR_T2CCU0_CCEN_Bits;

/** \brief T2CCU0 capture/compare time base select register */
typedef struct _Ifx_SCR_T2CCU0_CCTBSEL_Bits
{
    __IO Ifx_UReg_8Bit CCTB0:1;            /**< \brief [0:0] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB1:1;            /**< \brief [1:1] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB2:1;            /**< \brief [2:2] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB3:1;            /**< \brief [3:3] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB4:1;            /**< \brief [4:4] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB5:1;            /**< \brief [5:5] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTTOV:1;           /**< \brief [6:6] Trigger CCT timer overflow event (rwh) */
    __IO Ifx_UReg_8Bit CASC:1;             /**< \brief [7:7] Cascade timers (rw) */
} Ifx_SCR_T2CCU0_CCTBSEL_Bits;

/** \brief T2CCU0 capture/compare timer control register */
typedef struct _Ifx_SCR_T2CCU0_CCTCON_Bits
{
    __IO Ifx_UReg_8Bit CCTST:1;            /**< \brief [0:0] Capture/Compare timer start/stop control (rw) */
    __IO Ifx_UReg_8Bit TIMSYN:1;           /**< \brief [1:1] Enable synchronized timer starts (rw) */
    __IO Ifx_UReg_8Bit CCTOVEN:1;          /**< \brief [2:2] Capture/Compare timer overflow interrupt enable (rw) */
    __IO Ifx_UReg_8Bit CCTOVF:1;           /**< \brief [3:3] Capture/Compare timer overflow flag (rwh) */
    __IO Ifx_UReg_8Bit CCTPRE:4;           /**< \brief [7:4] Compare/Compare timer prescaler bitfield (rw) */
} Ifx_SCR_T2CCU0_CCTCON_Bits;

/** \brief T2CCU0 capture/compare timer dead-time control register high */
typedef struct _Ifx_SCR_T2CCU0_CCTDTCH_Bits
{
    __IO Ifx_UReg_8Bit DTE0:1;             /**< \brief [0:0] Dead-time enable for channel pair x (rw) */
    __IO Ifx_UReg_8Bit DTE1:1;             /**< \brief [1:1] Dead-time enable for channel pair x (rw) */
    __IO Ifx_UReg_8Bit DTE2:1;             /**< \brief [2:2] Dead-time enable for channel pair x (rw) */
    __IO Ifx_UReg_8Bit DTLEV:1;            /**< \brief [3:3] Dead-time level (rw) */
    __I  Ifx_UReg_8Bit DTR0:1;             /**< \brief [4:4] Dead-time run indication bits (rh) */
    __I  Ifx_UReg_8Bit DTR1:1;             /**< \brief [5:5] Dead-time run indication bits (rh) */
    __I  Ifx_UReg_8Bit DTR2:1;             /**< \brief [6:6] Dead-time run indication bits (rh) */
    __IO Ifx_UReg_8Bit DTRES:1;            /**< \brief [7:7] Reset dead-time counters (rwh) */
} Ifx_SCR_T2CCU0_CCTDTCH_Bits;

/** \brief T2CCU0 capture/compare timer dead-time control register low */
typedef struct _Ifx_SCR_T2CCU0_CCTDTCL_Bits
{
    __IO Ifx_UReg_8Bit DTM:8;              /**< \brief [7:0] Dead-time value (rw) */
} Ifx_SCR_T2CCU0_CCTDTCL_Bits;

/** \brief T2CCU0 capture/compare timer register high */
typedef struct _Ifx_SCR_T2CCU0_CCTH_Bits
{
    __IO Ifx_UReg_8Bit CCT:8;              /**< \brief [7:0] Capture/Compare timer high byte value [15:8] (rwh) */
} Ifx_SCR_T2CCU0_CCTH_Bits;

/** \brief T2CCU0 capture/compare timer register low */
typedef struct _Ifx_SCR_T2CCU0_CCTL_Bits
{
    __IO Ifx_UReg_8Bit CCT:8;              /**< \brief [7:0] Capture/Compare timer low byte value [7:0] (rwh) */
} Ifx_SCR_T2CCU0_CCTL_Bits;

/** \brief T2CCU0 capture/compare timer reload register high */
typedef struct _Ifx_SCR_T2CCU0_CCTRELH_Bits
{
    __IO Ifx_UReg_8Bit CCTREL:8;           /**< \brief [7:0] Capture/Compare timer high byte reload value [15:8] (rw) */
} Ifx_SCR_T2CCU0_CCTRELH_Bits;

/** \brief T2CCU0 capture/compare timer reload register low */
typedef struct _Ifx_SCR_T2CCU0_CCTRELL_Bits
{
    __IO Ifx_UReg_8Bit CCTREL:8;           /**< \brief [7:0] Capture/Compare timer low byte reload value [7:0] (rw) */
} Ifx_SCR_T2CCU0_CCTRELL_Bits;

/** \brief T2CCU0 compare control register */
typedef struct _Ifx_SCR_T2CCU0_COCON_Bits
{
    __IO Ifx_UReg_8Bit COMOD:2;            /**< \brief [1:0] Compare mode control (for compare channels) (rw) */
    __IO Ifx_UReg_8Bit POLA:1;             /**< \brief [2:2] Compare active level for channel group A (rw) */
    __IO Ifx_UReg_8Bit POLB:1;             /**< \brief [3:3] Compare active level for channel group B (rw) */
    __IO Ifx_UReg_8Bit CM4F:1;             /**< \brief [4:4] Compare channel 4 interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit CM5F:1;             /**< \brief [5:5] Compare channel 5 interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit CCM4:1;             /**< \brief [6:6] Compare enable for channel 4 (rw) */
    __IO Ifx_UReg_8Bit CCM5:1;             /**< \brief [7:7] Compare enable for channel 5 (rw) */
} Ifx_SCR_T2CCU0_COCON_Bits;

/** \brief T2CCU0 compare shadow register */
typedef struct _Ifx_SCR_T2CCU0_COSHDW_Bits
{
    __IO Ifx_UReg_8Bit COOUT0:1;           /**< \brief [0:0] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT1:1;           /**< \brief [1:1] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT2:1;           /**< \brief [2:2] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT3:1;           /**< \brief [3:3] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT4:1;           /**< \brief [4:4] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT5:1;           /**< \brief [5:5] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit TXOV:1;             /**< \brief [6:6] Enable shadow transfer on timer overflow (rw) */
    __IO Ifx_UReg_8Bit ENSHDW:1;           /**< \brief [7:7] Enable shadow transfer with COOUTx (rwh) */
} Ifx_SCR_T2CCU0_COSHDW_Bits;

/** \brief Timer 2 instance 0 control register */
typedef struct _Ifx_SCR_T2CCU0_T2_CON_Bits
{
    __IO Ifx_UReg_8Bit CP_RL2:1;           /**< \brief [0:0] Capture/Reload select (rw) */
    __IO Ifx_UReg_8Bit C_T2:1;             /**< \brief [1:1] Timer or counter select (rw) */
    __IO Ifx_UReg_8Bit TR2:1;              /**< \brief [2:2] Timer 2 run control (rwh) */
    __IO Ifx_UReg_8Bit EXEN2:1;            /**< \brief [3:3] Timer 2 external enable control (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [5:4] \internal Reserved */
    __IO Ifx_UReg_8Bit EXF2:1;             /**< \brief [6:6] Timer 2 external flag (rwh) */
    __IO Ifx_UReg_8Bit TF2:1;              /**< \brief [7:7] Timer 2 overflow/underflow flag (rwh) */
} Ifx_SCR_T2CCU0_T2_CON_Bits;

/** \brief Timer 2 instance 0 control register 1 */
typedef struct _Ifx_SCR_T2CCU0_T2_CON1_Bits
{
    __IO Ifx_UReg_8Bit EXF2EN:1;           /**< \brief [0:0] External interrupt enable (rw) */
    __IO Ifx_UReg_8Bit TF2EN:1;            /**< \brief [1:1] Overflow/Underflow interrupt enable (rw) */
    __IO Ifx_UReg_8Bit INSEL:2;            /**< \brief [3:2] Timer 2 instance 0 input select (rw) */
    __IO Ifx_UReg_8Bit EXTINSEL:4;         /**< \brief [7:4] Timer 2 instance 0 external input select (rw) */
} Ifx_SCR_T2CCU0_T2_CON1_Bits;

/** \brief Timer 2 instance 0 mode register */
typedef struct _Ifx_SCR_T2CCU0_T2_MOD_Bits
{
    __IO Ifx_UReg_8Bit DCEN:1;             /**< \brief [0:0] Up/Down counter enable (rw) */
    __IO Ifx_UReg_8Bit T2PRE:3;            /**< \brief [3:1] Timer 2 prescaler bit (rw) */
    __IO Ifx_UReg_8Bit PREN:1;             /**< \brief [4:4] Prescaler enable (rw) */
    __IO Ifx_UReg_8Bit EDGESEL:1;          /**< \brief [5:5] Edge select in capture mode/reload mode (rw) */
    __IO Ifx_UReg_8Bit T2RHEN:1;           /**< \brief [6:6] Timer 2 external start enable (rw) */
    __IO Ifx_UReg_8Bit T2REGS:1;           /**< \brief [7:7] Edge select for timer 2 external start (rw) */
} Ifx_SCR_T2CCU0_T2_MOD_Bits;

/** \brief Timer 2 instance 0 reload/capture register, high byte */
typedef struct _Ifx_SCR_T2CCU0_T2_RC2H_Bits
{
    __IO Ifx_UReg_8Bit RC2:8;              /**< \brief [7:0] Reload/Capture value [15:8] (rwh) */
} Ifx_SCR_T2CCU0_T2_RC2H_Bits;

/** \brief Timer 2 instance 0 reload/capture register, low byte */
typedef struct _Ifx_SCR_T2CCU0_T2_RC2L_Bits
{
    __IO Ifx_UReg_8Bit RC2:8;              /**< \brief [7:0] Reload/Capture value [7:0] (rwh) */
} Ifx_SCR_T2CCU0_T2_RC2L_Bits;

/** \brief Timer 2 instance 0, high byte */
typedef struct _Ifx_SCR_T2CCU0_T2_T2H_Bits
{
    __IO Ifx_UReg_8Bit THL2:8;             /**< \brief [7:0] Timer 2 value [15:8] (rwh) */
} Ifx_SCR_T2CCU0_T2_T2H_Bits;

/** \brief Timer 2 instance 0, low byte */
typedef struct _Ifx_SCR_T2CCU0_T2_T2L_Bits
{
    __IO Ifx_UReg_8Bit THL2:8;             /**< \brief [7:0] Timer 2 value [7:0] (rwh) */
} Ifx_SCR_T2CCU0_T2_T2L_Bits;

/** \brief T2CCU1 capture/compare register x high */
typedef struct _Ifx_SCR_T2CCU1_CC02_CCXH_Bits
{
    __IO Ifx_UReg_8Bit CCVALH:8;           /**< \brief [7:0] Capture/Compare high byte value for channel x (rwh) */
} Ifx_SCR_T2CCU1_CC02_CCXH_Bits;

/** \brief T2CCU1 capture/compare register x low */
typedef struct _Ifx_SCR_T2CCU1_CC02_CCXL_Bits
{
    __IO Ifx_UReg_8Bit CCVALL:8;           /**< \brief [7:0] Capture/Compare low byte value for channel x (rwh) */
} Ifx_SCR_T2CCU1_CC02_CCXL_Bits;

/** \brief T2CCU1 capture/compare register x high */
typedef struct _Ifx_SCR_T2CCU1_CC35_CCXH_Bits
{
    __IO Ifx_UReg_8Bit CCVALH:8;           /**< \brief [7:0] Capture/Compare high byte value for channel x (rwh) */
} Ifx_SCR_T2CCU1_CC35_CCXH_Bits;

/** \brief T2CCU1 capture/compare register x low */
typedef struct _Ifx_SCR_T2CCU1_CC35_CCXL_Bits
{
    __IO Ifx_UReg_8Bit CCVALL:8;           /**< \brief [7:0] Capture/Compare low byte value for channel x (rwh) */
} Ifx_SCR_T2CCU1_CC35_CCXL_Bits;

/** \brief T2CCU1 capture/compare enable register */
typedef struct _Ifx_SCR_T2CCU1_CCEN_Bits
{
    __IO Ifx_UReg_8Bit CCM0:2;             /**< \brief [1:0] Capture/Compare enable for channel 0 (rw) */
    __IO Ifx_UReg_8Bit CCM1:2;             /**< \brief [3:2] Capture/Compare enable for channel 1 (rw) */
    __IO Ifx_UReg_8Bit CCM2:2;             /**< \brief [5:4] Capture/Compare enable for channel 2 (rw) */
    __IO Ifx_UReg_8Bit CCM3:2;             /**< \brief [7:6] Capture/Compare enable for channel 3 (rw) */
} Ifx_SCR_T2CCU1_CCEN_Bits;

/** \brief T2CCU1 capture/compare time base select register */
typedef struct _Ifx_SCR_T2CCU1_CCTBSEL_Bits
{
    __IO Ifx_UReg_8Bit CCTB0:1;            /**< \brief [0:0] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB1:1;            /**< \brief [1:1] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB2:1;            /**< \brief [2:2] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB3:1;            /**< \brief [3:3] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB4:1;            /**< \brief [4:4] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTB5:1;            /**< \brief [5:5] Channel x time base select (rw) */
    __IO Ifx_UReg_8Bit CCTTOV:1;           /**< \brief [6:6] Trigger CCT timer overflow event (rwh) */
    __IO Ifx_UReg_8Bit CASC:1;             /**< \brief [7:7] Cascade timers (rw) */
} Ifx_SCR_T2CCU1_CCTBSEL_Bits;

/** \brief T2CCU1 capture/compare timer control register */
typedef struct _Ifx_SCR_T2CCU1_CCTCON_Bits
{
    __IO Ifx_UReg_8Bit CCTST:1;            /**< \brief [0:0] Capture/Compare timer start/stop control (rw) */
    __IO Ifx_UReg_8Bit TIMSYN:1;           /**< \brief [1:1] Enable synchronized timer starts (rw) */
    __IO Ifx_UReg_8Bit CCTOVEN:1;          /**< \brief [2:2] Capture/Compare timer overflow interrupt enable (rw) */
    __IO Ifx_UReg_8Bit CCTOVF:1;           /**< \brief [3:3] Capture/Compare timer overflow flag (rwh) */
    __IO Ifx_UReg_8Bit CCTPRE:4;           /**< \brief [7:4] Compare/Compare timer prescaler bitfield (rw) */
} Ifx_SCR_T2CCU1_CCTCON_Bits;

/** \brief T2CCU1 capture/compare timer dead-time control register high */
typedef struct _Ifx_SCR_T2CCU1_CCTDTCH_Bits
{
    __IO Ifx_UReg_8Bit DTE0:1;             /**< \brief [0:0] Dead-time enable for channel pair x (rw) */
    __IO Ifx_UReg_8Bit DTE1:1;             /**< \brief [1:1] Dead-time enable for channel pair x (rw) */
    __IO Ifx_UReg_8Bit DTE2:1;             /**< \brief [2:2] Dead-time enable for channel pair x (rw) */
    __IO Ifx_UReg_8Bit DTLEV:1;            /**< \brief [3:3] Dead-time level (rw) */
    __I  Ifx_UReg_8Bit DTR0:1;             /**< \brief [4:4] Dead-time run indication bits (rh) */
    __I  Ifx_UReg_8Bit DTR1:1;             /**< \brief [5:5] Dead-time run indication bits (rh) */
    __I  Ifx_UReg_8Bit DTR2:1;             /**< \brief [6:6] Dead-time run indication bits (rh) */
    __IO Ifx_UReg_8Bit DTRES:1;            /**< \brief [7:7] Reset dead-time counters (rwh) */
} Ifx_SCR_T2CCU1_CCTDTCH_Bits;

/** \brief T2CCU1 capture/compare timer dead-time control register low */
typedef struct _Ifx_SCR_T2CCU1_CCTDTCL_Bits
{
    __IO Ifx_UReg_8Bit DTM:8;              /**< \brief [7:0] Dead-time value (rw) */
} Ifx_SCR_T2CCU1_CCTDTCL_Bits;

/** \brief T2CCU1 capture/compare timer register high */
typedef struct _Ifx_SCR_T2CCU1_CCTH_Bits
{
    __IO Ifx_UReg_8Bit CCT:8;              /**< \brief [7:0] Capture/Compare timer high byte value [15:8] (rwh) */
} Ifx_SCR_T2CCU1_CCTH_Bits;

/** \brief T2CCU1 capture/compare timer register low */
typedef struct _Ifx_SCR_T2CCU1_CCTL_Bits
{
    __IO Ifx_UReg_8Bit CCT:8;              /**< \brief [7:0] Capture/Compare timer low byte value [7:0] (rwh) */
} Ifx_SCR_T2CCU1_CCTL_Bits;

/** \brief T2CCU1 capture/compare timer reload register high */
typedef struct _Ifx_SCR_T2CCU1_CCTRELH_Bits
{
    __IO Ifx_UReg_8Bit CCTREL:8;           /**< \brief [7:0] Capture/Compare timer high byte reload value [15:8] (rw) */
} Ifx_SCR_T2CCU1_CCTRELH_Bits;

/** \brief T2CCU1 capture/compare timer reload register low */
typedef struct _Ifx_SCR_T2CCU1_CCTRELL_Bits
{
    __IO Ifx_UReg_8Bit CCTREL:8;           /**< \brief [7:0] Capture/Compare timer low byte reload value [7:0] (rw) */
} Ifx_SCR_T2CCU1_CCTRELL_Bits;

/** \brief T2CCU1 compare control register */
typedef struct _Ifx_SCR_T2CCU1_COCON_Bits
{
    __IO Ifx_UReg_8Bit COMOD:2;            /**< \brief [1:0] Compare mode control (for compare channels) (rw) */
    __IO Ifx_UReg_8Bit POLA:1;             /**< \brief [2:2] Compare active level for channel group A (rw) */
    __IO Ifx_UReg_8Bit POLB:1;             /**< \brief [3:3] Compare active level for channel group B (rw) */
    __IO Ifx_UReg_8Bit CM4F:1;             /**< \brief [4:4] Compare channel 4 interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit CM5F:1;             /**< \brief [5:5] Compare channel 5 interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit CCM4:1;             /**< \brief [6:6] Compare enable for channel 4 (rw) */
    __IO Ifx_UReg_8Bit CCM5:1;             /**< \brief [7:7] Compare enable for channel 5 (rw) */
} Ifx_SCR_T2CCU1_COCON_Bits;

/** \brief T2CCU1 compare shadow register */
typedef struct _Ifx_SCR_T2CCU1_COSHDW_Bits
{
    __IO Ifx_UReg_8Bit COOUT0:1;           /**< \brief [0:0] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT1:1;           /**< \brief [1:1] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT2:1;           /**< \brief [2:2] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT3:1;           /**< \brief [3:3] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT4:1;           /**< \brief [4:4] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit COOUT5:1;           /**< \brief [5:5] Compare channel x output (rwh) */
    __IO Ifx_UReg_8Bit TXOV:1;             /**< \brief [6:6] Enable shadow transfer on timer overflow (rw) */
    __IO Ifx_UReg_8Bit ENSHDW:1;           /**< \brief [7:7] Enable shadow transfer with COOUTx (rwh) */
} Ifx_SCR_T2CCU1_COSHDW_Bits;

/** \brief Timer 2 instance 1 control register */
typedef struct _Ifx_SCR_T2CCU1_T2_CON_Bits
{
    __IO Ifx_UReg_8Bit CP_RL2:1;           /**< \brief [0:0] Capture/Reload select (rw) */
    __IO Ifx_UReg_8Bit C_T2:1;             /**< \brief [1:1] Timer or counter select (rw) */
    __IO Ifx_UReg_8Bit TR2:1;              /**< \brief [2:2] Timer 2 run control (rwh) */
    __IO Ifx_UReg_8Bit EXEN2:1;            /**< \brief [3:3] Timer 2 external enable control (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [5:4] \internal Reserved */
    __IO Ifx_UReg_8Bit EXF2:1;             /**< \brief [6:6] Timer 2 external flag (rwh) */
    __IO Ifx_UReg_8Bit TF2:1;              /**< \brief [7:7] Timer 2 overflow/underflow flag (rwh) */
} Ifx_SCR_T2CCU1_T2_CON_Bits;

/** \brief Timer 2 instance 1 control register 1 */
typedef struct _Ifx_SCR_T2CCU1_T2_CON1_Bits
{
    __IO Ifx_UReg_8Bit EXF2EN:1;           /**< \brief [0:0] External interrupt enable (rw) */
    __IO Ifx_UReg_8Bit TF2EN:1;            /**< \brief [1:1] Overflow/Underflow interrupt enable (rw) */
    __IO Ifx_UReg_8Bit INSEL:2;            /**< \brief [3:2] Timer 2 instance 1 input select (rw) */
    __IO Ifx_UReg_8Bit EXTINSEL:4;         /**< \brief [7:4] Timer 2 instance 1 external input select (rw) */
} Ifx_SCR_T2CCU1_T2_CON1_Bits;

/** \brief Timer 2 instance 1 mode register */
typedef struct _Ifx_SCR_T2CCU1_T2_MOD_Bits
{
    __IO Ifx_UReg_8Bit DCEN:1;             /**< \brief [0:0] Up/Down counter enable (rw) */
    __IO Ifx_UReg_8Bit T2PRE:3;            /**< \brief [3:1] Timer 2 prescaler bit (rw) */
    __IO Ifx_UReg_8Bit PREN:1;             /**< \brief [4:4] Prescaler enable (rw) */
    __IO Ifx_UReg_8Bit EDGESEL:1;          /**< \brief [5:5] Edge select in capture mode/reload mode (rw) */
    __IO Ifx_UReg_8Bit T2RHEN:1;           /**< \brief [6:6] Timer 2 external start enable (rw) */
    __IO Ifx_UReg_8Bit T2REGS:1;           /**< \brief [7:7] Edge select for timer 2 external start (rw) */
} Ifx_SCR_T2CCU1_T2_MOD_Bits;

/** \brief Timer 2 instance 1 reload/capture register, high byte */
typedef struct _Ifx_SCR_T2CCU1_T2_RC2H_Bits
{
    __IO Ifx_UReg_8Bit RC2:8;              /**< \brief [7:0] Reload/Capture value [15:8] (rwh) */
} Ifx_SCR_T2CCU1_T2_RC2H_Bits;

/** \brief Timer 2 instance 1 reload/capture register, low byte */
typedef struct _Ifx_SCR_T2CCU1_T2_RC2L_Bits
{
    __IO Ifx_UReg_8Bit RC2:8;              /**< \brief [7:0] Reload/Capture value [7:0] (rwh) */
} Ifx_SCR_T2CCU1_T2_RC2L_Bits;

/** \brief Timer 2 instance 1, high byte */
typedef struct _Ifx_SCR_T2CCU1_T2_T2H_Bits
{
    __IO Ifx_UReg_8Bit THL2:8;             /**< \brief [7:0] Timer 2 value [15:8] (rwh) */
} Ifx_SCR_T2CCU1_T2_T2H_Bits;

/** \brief Timer 2 instance 1, low byte */
typedef struct _Ifx_SCR_T2CCU1_T2_T2L_Bits
{
    __IO Ifx_UReg_8Bit THL2:8;             /**< \brief [7:0] Timer 2 value [7:0] (rwh) */
} Ifx_SCR_T2CCU1_T2_T2L_Bits;

/** \brief Serial data buffer */
typedef struct _Ifx_SCR_UART_SBUF_Bits
{
    __IO Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Serial interface buffer register (rwh) */
} Ifx_SCR_UART_SBUF_Bits;

/** \brief Serial channel control register */
typedef struct _Ifx_SCR_UART_SCON_Bits
{
    __IO Ifx_UReg_8Bit RI:1;               /**< \brief [0:0] Receive interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit TI:1;               /**< \brief [1:1] Transmit interrupt flag (rwh) */
    __IO Ifx_UReg_8Bit RB8:1;              /**< \brief [2:2] Serial port receiver bit 9 (rwh) */
    __IO Ifx_UReg_8Bit TB8:1;              /**< \brief [3:3] Serial port transmitter bit 9 (rw) */
    __IO Ifx_UReg_8Bit REN:1;              /**< \brief [4:4] Enable receiver of serial port (rw) */
    __IO Ifx_UReg_8Bit SM2:1;              /**< \brief [5:5] Enable serial port multiprocessor communication in modes 2 and 3 (rw) */
    __IO Ifx_UReg_8Bit SM01:2;             /**< \brief [7:6] Serial port operating mode selection (rw) */
} Ifx_SCR_UART_SCON_Bits;

/** \brief Bit timing logic 1 control register */
typedef struct _Ifx_SCR_WCAN_BTL1_CTRL_Bits
{
    __IO Ifx_UReg_8Bit TBIT:8;             /**< \brief [7:0] Number of time quanta in a bit time (rw) */
} Ifx_SCR_WCAN_BTL1_CTRL_Bits;

/** \brief Bit timing logic 2 control register */
typedef struct _Ifx_SCR_WCAN_BTL2_CTRL_Bits
{
    __IO Ifx_UReg_8Bit SP:6;               /**< \brief [5:0] Sample point position (rw) */
    __IO Ifx_UReg_8Bit BRP:2;              /**< \brief [7:6] Baudrate prescaler (rw) */
} Ifx_SCR_WCAN_BTL2_CTRL_Bits;

/** \brief CDR control register */
typedef struct _Ifx_SCR_WCAN_CDR_CTRL_Bits
{
    __IO Ifx_UReg_8Bit CDREN:1;            /**< \brief [0:0] Enable CDR (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_8Bit ESF:2;              /**< \brief [3:2] Error scaling factor (rw) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_CDR_CTRL_Bits;

/** \brief CDR lower limit control register */
typedef struct _Ifx_SCR_WCAN_CDR_LOWER_CTRL_Bits
{
    __IO Ifx_UReg_8Bit LOWER:8;            /**< \brief [7:0] CDR lower limit (rw) */
} Ifx_SCR_WCAN_CDR_LOWER_CTRL_Bits;

/** \brief CDR measured high register */
typedef struct _Ifx_SCR_WCAN_CDR_MEAS_HIGH_Bits
{
    __I  Ifx_UReg_8Bit HIGH:8;             /**< \brief [7:0] CDR internally measured high value (rh) */
} Ifx_SCR_WCAN_CDR_MEAS_HIGH_Bits;

/** \brief CDR measured low register */
typedef struct _Ifx_SCR_WCAN_CDR_MEAS_LOW_Bits
{
    __I  Ifx_UReg_8Bit LOW:6;              /**< \brief [5:0] CDR internally measured low value (rh) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_WCAN_CDR_MEAS_LOW_Bits;

/** \brief CDR upper limit control register */
typedef struct _Ifx_SCR_WCAN_CDR_UPPER_CTRL_Bits
{
    __IO Ifx_UReg_8Bit UPPER:8;            /**< \brief [7:0] CDR upper limit (rw) */
} Ifx_SCR_WCAN_CDR_UPPER_CTRL_Bits;

/** \brief Wake-Up CAN configuration register */
typedef struct _Ifx_SCR_WCAN_CFG_Bits
{
    __IO Ifx_UReg_8Bit WCAN_EN:1;          /**< \brief [0:0] WCAN enable (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_8Bit SELWK_EN:1;         /**< \brief [2:2] Selective wake-up enable (rwh) */
    __IO Ifx_UReg_8Bit CCE:1;              /**< \brief [3:3] Configuration change enable (rw) */
    __IO Ifx_UReg_8Bit WCANRXDIS:4;        /**< \brief [7:4] WCAN receiver input select (rw) */
} Ifx_SCR_WCAN_CFG_Bits;

/** \brief DATA control register 0 */
typedef struct _Ifx_SCR_WCAN_DATA_CTRL_Bits
{
    __IO Ifx_UReg_8Bit DATA:8;             /**< \brief [7:0] CAN Data Byte (rw) */
} Ifx_SCR_WCAN_DATA_CTRL_Bits;

/** \brief Message data length code control register */
typedef struct _Ifx_SCR_WCAN_DLC_CTRL_Bits
{
    __IO Ifx_UReg_8Bit DLC:4;              /**< \brief [3:0] Data length code (rw) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_DLC_CTRL_Bits;

/** \brief Wake-Up CAN FD control register */
typedef struct _Ifx_SCR_WCAN_FD_CTRL_Bits
{
    __IO Ifx_UReg_8Bit FDEN:1;             /**< \brief [0:0] CAN FD tolerant enable (rw) */
    __IO Ifx_UReg_8Bit FDFILT:3;           /**< \brief [3:1] CAN FD filter time (rw) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_FD_CTRL_Bits;

/** \brief Wake-Up CAN error counter register */
typedef struct _Ifx_SCR_WCAN_FRMERRCNT_Bits
{
    __I  Ifx_UReg_8Bit ECNT:6;             /**< \brief [5:0] SWK CAN frame error counter (rh) */
    __IO Ifx_UReg_8Bit FDEC_DIS:1;         /**< \brief [6:6] Error count disable on CAN FD Frame (rw) */
    __O  Ifx_UReg_8Bit ECNTCLR:1;          /**< \brief [7:7] Error counter clear bit (w) */
} Ifx_SCR_WCAN_FRMERRCNT_Bits;

/** \brief Message identifier control register 0 */
typedef struct _Ifx_SCR_WCAN_ID0_CTRL_Bits
{
    __IO Ifx_UReg_8Bit ID:8;               /**< \brief [7:0] CAN Identifier (rw) */
} Ifx_SCR_WCAN_ID0_CTRL_Bits;

/** \brief Message identifier control register 1 */
typedef struct _Ifx_SCR_WCAN_ID1_CTRL_Bits
{
    __IO Ifx_UReg_8Bit ID:8;               /**< \brief [7:0] CAN identifier (rw) */
} Ifx_SCR_WCAN_ID1_CTRL_Bits;

/** \brief Message identifier control register 2 */
typedef struct _Ifx_SCR_WCAN_ID2_CTRL_Bits
{
    __IO Ifx_UReg_8Bit ID:8;               /**< \brief [7:0] CAN identifier (rw) */
} Ifx_SCR_WCAN_ID2_CTRL_Bits;

/** \brief Message identifier control register 3 */
typedef struct _Ifx_SCR_WCAN_ID3_CTRL_Bits
{
    __IO Ifx_UReg_8Bit IDE:1;              /**< \brief [0:0] Identified extension bit (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_8Bit ID:5;               /**< \brief [6:2] CAN identifier (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_WCAN_ID3_CTRL_Bits;

/** \brief Wake-Up CAN interrupt and event status clear register 0 */
typedef struct _Ifx_SCR_WCAN_INTESCLR0_Bits
{
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [1:0] \internal Reserved */
    __O  Ifx_UReg_8Bit SYSERRCLR:1;        /**< \brief [2:2] CAN WUP system error clear bit (w) */
    __O  Ifx_UReg_8Bit CANTOCLR:1;         /**< \brief [3:3] CAN time-out detection clear bit (w) */
    __O  Ifx_UReg_8Bit ECOFLCLR:1;         /**< \brief [4:4] Error counter overflow clear bit (w) */
    __O  Ifx_UReg_8Bit MORCCLR:1;          /**< \brief [5:5] Message object register changed clear bit (w) */
    __O  Ifx_UReg_8Bit ERSELCLR:1;         /**< \brief [6:6] Error select clear bit (w) */
    __O  Ifx_UReg_8Bit WUPCLR:1;           /**< \brief [7:7] WUP clear bit (w) */
} Ifx_SCR_WCAN_INTESCLR0_Bits;

/** \brief Wake-Up CAN interrupt and event status clear register 1 */
typedef struct _Ifx_SCR_WCAN_INTESCLR1_Bits
{
    __O  Ifx_UReg_8Bit WUFCLR:1;           /**< \brief [0:0] Wake-up frame detection flag clear bit (w) */
    __O  Ifx_UReg_8Bit SYNCCLR:1;          /**< \brief [1:1] Synchronisation clear bit (w) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [2:2] \internal Reserved */
    __O  Ifx_UReg_8Bit CANSILCLR:1;        /**< \brief [3:3] CAN silent time during SWK operation clear bit (w) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_INTESCLR1_Bits;

/** \brief Wake-Up CAN interrupt and event status register 0 */
typedef struct _Ifx_SCR_WCAN_INTESTAT0_Bits
{
    __I  Ifx_UReg_8Bit SWACK:1;            /**< \brief [0:0] Selective wake-up enable acknowledge (rh) */
    __I  Ifx_UReg_8Bit MODE:1;             /**< \brief [1:1] WCAN mode of operation (rh) */
    __I  Ifx_UReg_8Bit SYSERR:1;           /**< \brief [2:2] CAN wake-up system error (rh) */
    __I  Ifx_UReg_8Bit CANTO:1;            /**< \brief [3:3] CAN time-out detection (rh) */
    __I  Ifx_UReg_8Bit ECOFL:1;            /**< \brief [4:4] Error counter overflow (rh) */
    __I  Ifx_UReg_8Bit MORC:1;             /**< \brief [5:5] Message object register changed (rh) */
    __I  Ifx_UReg_8Bit ERSEL:1;            /**< \brief [6:6] Error select (rh) */
    __I  Ifx_UReg_8Bit WUP:1;              /**< \brief [7:7] Wake-Up pattern detected (rh) */
} Ifx_SCR_WCAN_INTESTAT0_Bits;

/** \brief Wake-Up CAN interrupt and event status register 1 */
typedef struct _Ifx_SCR_WCAN_INTESTAT1_Bits
{
    __I  Ifx_UReg_8Bit WUF:1;              /**< \brief [0:0] Wake-Up frame detection (acc. ISO 11898-6) (rh) */
    __I  Ifx_UReg_8Bit SYNC:1;             /**< \brief [1:1] Synchronisation (at least one CAN frame without fail must have been received) (rh) */
    __I  Ifx_UReg_8Bit SWKSET:1;           /**< \brief [2:2] Selective wake activity (rh) */
    __I  Ifx_UReg_8Bit CANSIL:1;           /**< \brief [3:3] CAN bus silent time during selective wake operation (rh) */
    __I  Ifx_UReg_8Bit FDF:1;              /**< \brief [4:4] FD frame reception (rh) */
    __I  Ifx_UReg_8Bit RXDF:1;             /**< \brief [5:5] Filtered receive data input (rh) */
    __I  Ifx_UReg_8Bit RXDS:1;             /**< \brief [6:6] Sampled receive data input (rh) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_WCAN_INTESTAT1_Bits;

/** \brief Wake-Up CAN interrupt mask register */
typedef struct _Ifx_SCR_WCAN_INTMRSLT_Bits
{
    __IO Ifx_UReg_8Bit CANTOMASK:1;        /**< \brief [0:0] CAN time-out masking (rw) */
    __IO Ifx_UReg_8Bit ERRMASK:1;          /**< \brief [1:1] SYSERR masking (rw) */
    __IO Ifx_UReg_8Bit WUFMASK:1;          /**< \brief [2:2] Wake-Up frame interrupt masking (rw) */
    __IO Ifx_UReg_8Bit WUPMASK:1;          /**< \brief [3:3] Wake-Up pattern detected interrupt masking (rw) */
    __I  Ifx_UReg_8Bit :4;                 /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_INTMRSLT_Bits;

/** \brief Message identifier mask register 0 */
typedef struct _Ifx_SCR_WCAN_MASK_ID0_CTRL_Bits
{
    __IO Ifx_UReg_8Bit MID:8;              /**< \brief [7:0] Mask for message identifier (rw) */
} Ifx_SCR_WCAN_MASK_ID0_CTRL_Bits;

/** \brief Message identifier mask register 1 */
typedef struct _Ifx_SCR_WCAN_MASK_ID1_CTRL_Bits
{
    __IO Ifx_UReg_8Bit MID:8;              /**< \brief [7:0] Mask for message identifier (rw) */
} Ifx_SCR_WCAN_MASK_ID1_CTRL_Bits;

/** \brief Message identifier mask register 2 */
typedef struct _Ifx_SCR_WCAN_MASK_ID2_CTRL_Bits
{
    __IO Ifx_UReg_8Bit MID:8;              /**< \brief [7:0] Mask for message identifier (rw) */
} Ifx_SCR_WCAN_MASK_ID2_CTRL_Bits;

/** \brief Message identifier mask register 3 */
typedef struct _Ifx_SCR_WCAN_MASK_ID3_CTRL_Bits
{
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_8Bit MID:5;              /**< \brief [6:2] Mask for message identifier (rw) */
    __I  Ifx_UReg_8Bit :1;                 /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_WCAN_MASK_ID3_CTRL_Bits;

/** \brief Watchdog timer control register */
typedef struct _Ifx_SCR_WDT_CON_Bits
{
    __IO Ifx_UReg_8Bit WDTIN:1;            /**< \brief [0:0] Watchdog timer input frequency selection (rw) */
    __IO Ifx_UReg_8Bit WDTRS:1;            /**< \brief [1:1] WDT refresh start (rw1sh) */
    __IO Ifx_UReg_8Bit WDTEN:1;            /**< \brief [2:2] WDT enable (rw) */
    __IO Ifx_UReg_8Bit WDTCLK:1;           /**< \brief [3:3] Watchdog timer clock source selection (rw) */
    __I  Ifx_UReg_8Bit WDTPR:1;            /**< \brief [4:4] Watchdog prewarning mode flag (rh) */
    __IO Ifx_UReg_8Bit WINBEN:1;           /**< \brief [5:5] Watchdog window-boundary enable (rw) */
    __I  Ifx_UReg_8Bit :2;                 /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_WDT_CON_Bits;

/** \brief Watchdog timer high byte */
typedef struct _Ifx_SCR_WDT_H_Bits
{
    __I  Ifx_UReg_8Bit WDT:8;              /**< \brief [7:0] Watchdog timer current value, high byte (rh) */
} Ifx_SCR_WDT_H_Bits;

/** \brief Watchdog timer low byte */
typedef struct _Ifx_SCR_WDT_L_Bits
{
    __I  Ifx_UReg_8Bit WDT:8;              /**< \brief [7:0] Watchdog timer current value, low byte (rh) */
} Ifx_SCR_WDT_L_Bits;

/** \brief Watchdog timer reload register */
typedef struct _Ifx_SCR_WDT_REL_Bits
{
    __IO Ifx_UReg_8Bit WDTREL:8;           /**< \brief [7:0] Watchdog timer reload value (rw) */
} Ifx_SCR_WDT_REL_Bits;

/** \brief Watchdog window-boundary register */
typedef struct _Ifx_SCR_WDT_WINB_Bits
{
    __IO Ifx_UReg_8Bit WDTWINB:8;          /**< \brief [7:0] Watchdog window-boundary value (rw) */
} Ifx_SCR_WDT_WINB_Bits;

/** \brief On-chip XRAM address higher order */
typedef struct _Ifx_SCR_XADDRH_Bits
{
    __IO Ifx_UReg_8Bit ADDRH:8;            /**< \brief [7:0] Higher order of on-chip XRAM address (rw) */
} Ifx_SCR_XADDRH_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_scr_Registers_union
 * \{   */
/** \brief Accumulator   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ACC_Bits B;                    /**< \brief Bitfield access */
} Ifx_SCR_ACC;

/** \brief ADCOMP control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ADCOMP_CON_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_ADCOMP_CON;

/** \brief ADCOMP result-high and status register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ADCOMP_RESHSTAT_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_ADCOMP_RESHSTAT;

/** \brief ADCOMP result-low register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ADCOMP_RESL_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_ADCOMP_RESL;

/** \brief B register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_B_Bits B;                      /**< \brief Bitfield access */
} Ifx_SCR_B;

/** \brief Data pointer high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_DPH_Bits B;                    /**< \brief Bitfield access */
} Ifx_SCR_DPH;

/** \brief Data pointer low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_DPL_Bits B;                    /**< \brief Bitfield access */
} Ifx_SCR_DPL;

/** \brief Extended operation register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_EO_Bits B;                     /**< \brief Bitfield access */
} Ifx_SCR_EO;

/** \brief Slave address register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_ADDR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_I2C_ADDR;

/** \brief Extended slave address register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_ADDRX_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_I2C_ADDRX;

/** \brief Baud rate control register [write mode]   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_BRCR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_I2C_BRCR;

/** \brief I2C control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_CNTR_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_I2C_CNTR;

/** \brief Data register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_DATA_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_I2C_DATA;

/** \brief Software reset register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_SRST_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_I2C_SRST;

/** \brief Status register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_I2C_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_I2C_STAT;

/** \brief Interrupt enable register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IEN0_Bits B;                   /**< \brief Bitfield access */
} Ifx_SCR_IEN0;

/** \brief Interrupt enable register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IEN1_Bits B;                   /**< \brief Bitfield access */
} Ifx_SCR_IEN1;

/** \brief Interrupt priority register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IP_Bits B;                     /**< \brief Bitfield access */
} Ifx_SCR_IP;

/** \brief Interrupt priority 1 register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IP1_Bits B;                    /**< \brief Bitfield access */
} Ifx_SCR_IP1;

/** \brief Interrupt priority high register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IPH_Bits B;                    /**< \brief Bitfield access */
} Ifx_SCR_IPH;

/** \brief Interrupt priority 1 high register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IPH1_Bits B;                   /**< \brief Bitfield access */
} Ifx_SCR_IPH1;

/** \brief Interrupt request register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_CON0_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_IR_CON0;

/** \brief Interrupt request register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_CON1_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_IR_CON1;

/** \brief Interrupt request register 2   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_CON2_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_IR_CON2;

/** \brief External interrupt control register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_EXICON0_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_IR_EXICON0;

/** \brief External interrupt control register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_EXICON1_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_IR_EXICON1;

/** \brief External interrupt control register 2   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_EXICON2_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_IR_EXICON2;

/** \brief External interrupt control register 3   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_EXICON3_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_IR_EXICON3;

/** \brief Peripheral interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_MODIEN_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IR_MODIEN;

/** \brief NMI control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_NMICON_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IR_NMICON;

/** \brief NMI status register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_NMISTAT_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_IR_NMISTAT;

/** \brief External interrupt input select register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_PISEL0_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IR_PISEL0;

/** \brief External interrupt input select register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_PISEL1_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IR_PISEL1;

/** \brief External interrupt input select register 2   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_PISEL2_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IR_PISEL2;

/** \brief External interrupt input select register 3   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IR_PISEL3_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IR_PISEL3;

/** \brief Baudrate control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_LIN_BCON_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_LIN_BCON;

/** \brief Baudrate timer/reload register, high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_LIN_BGH_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_LIN_BGH;

/** \brief Baudrate timer/reload register, low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_LIN_BGL_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_LIN_BGL;

/** \brief LIN status register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_LIN_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_LIN_STAT;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PAGE_Bits B;                   /**< \brief Bitfield access */
} Ifx_SCR_PAGE;

/** \brief Password register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PASSWD_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_PASSWD;

/** \brief Power control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PCON_Bits B;                   /**< \brief Bitfield access */
} Ifx_SCR_PCON;

/** \brief Program status word register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PSW_Bits B;                    /**< \brief Bitfield access */
} Ifx_SCR_PSW;

/** \brief Port Pn input register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_IN_Bits B;                   /**< \brief Bitfield access */
} Ifx_SCR_P_IN;

/** \brief Port Pn input/output control register m   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_IOCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_IOCR;

/** \brief Port Pn output modification clear register   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OMCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_OMCR;

/** \brief Port Pn output modification set register   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OMSR_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_OMSR;

/** \brief Port Pn output modification toggle register   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OMTR_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_OMTR;

/** \brief Port Pn output register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OUT_Bits B;                  /**< \brief Bitfield access */
} Ifx_SCR_P_OUT;

/** \brief Port Pn pin function decision control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDISC_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_P_PDISC;

/** \brief Port Pn pad driver mode 0 register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR0_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_PDR0;

/** \brief Port Pn pad driver mode 2 register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR2_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_PDR2;

/** \brief Port Pn pad driver mode 4 register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR4_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_PDR4;

/** \brief Port Pn pad driver mode 6 register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR6_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_P_PDR6;

/** \brief Count clock register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_RTC_CNT_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_RTC_CNT;

/** \brief Real-time clock control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_RTC_CON_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_RTC_CON;

/** \brief Real-time clock compare/capture register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_RTC_CR_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_RTC_CR;

/** \brief Clock control and status register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_CLK_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SCU_CLK;

/** \brief Module suspend control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_DBG_MODSUSP_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_SCU_DBG_MODSUSP;

/** \brief Peripheral input select register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_MODPISEL0_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_SCU_MODPISEL0;

/** \brief Peripheral input select register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_MODPISEL1_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_SCU_MODPISEL1;

/** \brief Main reset status register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_MRSTSTAT_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_SCU_MRSTSTAT;

/** \brief Peripheral management control register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMCON0_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMCON0;

/** \brief Peripheral management control register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMCON1_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMCON1;

/** \brief Control for PMS DTS   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSDTS_CON_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSDTS_CON;

/** \brief Die temperature sensor result register - upper 4-bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSDTS_RES11_8_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSDTS_RES11_8;

/** \brief Die temperature sensor result register - lower 8-bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSDTS_RES7_0_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSDTS_RES7_0;

/** \brief Trimming register for PMS High Precision BandGap (HPBG)   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSHPBG_BGTRIM_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSHPBG_BGTRIM;

/** \brief SCR access to PMS_HPOSCCON1.OSCFTRIM[7:0] bits and update trigger for complete PMS_HPOSCCON1.OSCFTRIM   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSHPOSC_FTRIM7_0_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSHPOSC_FTRIM7_0;

/** \brief SCR shadow register for PMS_HPOSCCON1.OSCFTRIM[8:8] bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSHPOSC_FTRIM8_8_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSHPOSC_FTRIM8_8;

/** \brief SCR shadow register for PMS_RTC_CMP1[15:8] bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_CMP1_15_8_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_CMP1_15_8;

/** \brief SCR shadow register for PMS_RTC_CMP1[23:16] bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_CMP1_23_16_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_CMP1_23_16;

/** \brief SCR shadow register for PMS_RTC_CMP1[31:24] bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_CMP1_31_24_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_CMP1_31_24;

/** \brief SCR access to PMS_RTC_CMP1[7:0] bits and update trigger for complete PMS_RTC_CMP1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_CMP1_7_0_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_CMP1_7_0;

/** \brief SCR access to PMS_RTC_CON2.MSIZE1 bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_MSIZE1_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_MSIZE1;

/** \brief SCR access to PMS_RTC_CON2.MSTART1 bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_MSTART1_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_MSTART1;

/** \brief SCR shadow register for PMS_RTC_CON1.OFFSET[15:8] bits   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_OFFSET15_8_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_OFFSET15_8;

/** \brief SCR access to PMS_RTC_CON1.OFFSET[7:0] bits and update trigger for complete PMS_RTC_CON1.OFFSET   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_OFFSET7_0_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_OFFSET7_0;

/** \brief SCR access to PMS_RTC_TIM[15:8] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM15_8_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM15_8;

/** \brief SCR access to PMS_RTC_TIM[23:16] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM23_16_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM23_16;

/** \brief SCR access to PMS_RTC_TIM[31:24] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM31_24_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM31_24;

/** \brief SCR access to PMS_RTC_TIM[39:32] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM39_32_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM39_32;

/** \brief SCR access to PMS_RTC_TIM[47:40] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM47_40_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM47_40;

/** \brief SCR access to PMS_RTC_TIM[55:48] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM55_48_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM55_48;

/** \brief SCR access to PMS_RTC_TIM[63:56] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM63_56_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM63_56;

/** \brief SCR access to PMS_RTC_TIM[7:0] bits   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMSRTC_TIM7_0_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMSRTC_TIM7_0;

/** \brief Reset control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_RSTCON_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_SCU_RSTCON;

/** \brief SCR reset status register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_RSTSTAT_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_SCU_RSTSTAT;

/** \brief SCR interrupt data exchange register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_SCRINTEXCHG_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_SCU_SCRINTEXCHG;

/** \brief SCU status register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_STBY_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_SCU_STBY;

/** \brief TriCore interrupt data exchange register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_TCINTEXCHG_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SCU_TCINTEXCHG;

/** \brief Control register for system wake-up via SCR sources   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_WKPCON_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_SCU_WKPCON;

/** \brief Stack pointer   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SP_Bits B;                     /**< \brief Bitfield access */
} Ifx_SCR_SP;

/** \brief Baud rate timer reload register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_BRH_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SSC_BRH;

/** \brief Baud rate timer reload register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_BRL_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SSC_BRL;

/** \brief Control register high [operation mode]   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONOH_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONOH;

/** \brief Control register low [operation mode]   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONOL_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONOL;

/** \brief Control register high [programming mode]   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONPH_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONPH;

/** \brief Control register low [programming mode]   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONPL_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONPL;

/** \brief Receiver buffer register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_RBL_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SSC_RBL;

/** \brief Transmitter buffer register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_TBL_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SSC_TBL;

/** \brief System control register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SYSCON0_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SYSCON0;

/** \brief Timer 0/1 control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TCON_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_T01_TCON;

/** \brief Timer 0 high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TH0_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_T01_TH0;

/** \brief Timer 1 high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TH1_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_T01_TH1;

/** \brief Timer 0 low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TL0_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_T01_TL0;

/** \brief Timer 1 low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TL1_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_T01_TL1;

/** \brief Timer mode register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TMOD_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_T01_TMOD;

/** \brief T2CCU0 capture/compare register x high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CC02_CCXH_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CC02_CCXH;

/** \brief T2CCU0 capture/compare register x low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CC02_CCXL_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CC02_CCXL;

/** \brief T2CCU0 capture/compare register x high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CC35_CCXH_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CC35_CCXH;

/** \brief T2CCU0 capture/compare register x low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CC35_CCXL_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CC35_CCXL;

/** \brief T2CCU0 capture/compare enable register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCEN_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCEN;

/** \brief T2CCU0 capture/compare time base select register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTBSEL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTBSEL;

/** \brief T2CCU0 capture/compare timer control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTCON_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTCON;

/** \brief T2CCU0 capture/compare timer dead-time control register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTDTCH_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTDTCH;

/** \brief T2CCU0 capture/compare timer dead-time control register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTDTCL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTDTCL;

/** \brief T2CCU0 capture/compare timer register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTH_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTH;

/** \brief T2CCU0 capture/compare timer register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTL_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTL;

/** \brief T2CCU0 capture/compare timer reload register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTRELH_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTRELH;

/** \brief T2CCU0 capture/compare timer reload register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_CCTRELL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_CCTRELL;

/** \brief T2CCU0 compare control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_COCON_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_COCON;

/** \brief T2CCU0 compare shadow register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_COSHDW_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_COSHDW;

/** \brief Timer 2 instance 0 control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_CON_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_CON;

/** \brief Timer 2 instance 0 control register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_CON1_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_CON1;

/** \brief Timer 2 instance 0 mode register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_MOD_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_MOD;

/** \brief Timer 2 instance 0 reload/capture register, high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_RC2H_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_RC2H;

/** \brief Timer 2 instance 0 reload/capture register, low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_RC2L_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_RC2L;

/** \brief Timer 2 instance 0, high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_T2H_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_T2H;

/** \brief Timer 2 instance 0, low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU0_T2_T2L_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU0_T2_T2L;

/** \brief T2CCU1 capture/compare register x high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CC02_CCXH_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CC02_CCXH;

/** \brief T2CCU1 capture/compare register x low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CC02_CCXL_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CC02_CCXL;

/** \brief T2CCU1 capture/compare register x high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CC35_CCXH_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CC35_CCXH;

/** \brief T2CCU1 capture/compare register x low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CC35_CCXL_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CC35_CCXL;

/** \brief T2CCU1 capture/compare enable register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCEN_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCEN;

/** \brief T2CCU1 capture/compare time base select register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTBSEL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTBSEL;

/** \brief T2CCU1 capture/compare timer control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTCON_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTCON;

/** \brief T2CCU1 capture/compare timer dead-time control register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTDTCH_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTDTCH;

/** \brief T2CCU1 capture/compare timer dead-time control register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTDTCL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTDTCL;

/** \brief T2CCU1 capture/compare timer register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTH_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTH;

/** \brief T2CCU1 capture/compare timer register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTL_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTL;

/** \brief T2CCU1 capture/compare timer reload register high   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTRELH_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTRELH;

/** \brief T2CCU1 capture/compare timer reload register low   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_CCTRELL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_CCTRELL;

/** \brief T2CCU1 compare control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_COCON_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_COCON;

/** \brief T2CCU1 compare shadow register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_COSHDW_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_COSHDW;

/** \brief Timer 2 instance 1 control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_CON_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_CON;

/** \brief Timer 2 instance 1 control register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_CON1_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_CON1;

/** \brief Timer 2 instance 1 mode register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_MOD_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_MOD;

/** \brief Timer 2 instance 1 reload/capture register, high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_RC2H_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_RC2H;

/** \brief Timer 2 instance 1 reload/capture register, low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_RC2L_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_RC2L;

/** \brief Timer 2 instance 1, high byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_T2H_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_T2H;

/** \brief Timer 2 instance 1, low byte   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU1_T2_T2L_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T2CCU1_T2_T2L;

/** \brief Serial data buffer   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_SBUF_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_UART_SBUF;

/** \brief Serial channel control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_SCON_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_UART_SCON;

/** \brief Bit timing logic 1 control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_BTL1_CTRL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_BTL1_CTRL;

/** \brief Bit timing logic 2 control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_BTL2_CTRL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_BTL2_CTRL;

/** \brief CDR control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_CTRL;

/** \brief CDR lower limit control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_LOWER_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_LOWER_CTRL;

/** \brief CDR measured high register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_MEAS_HIGH_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_MEAS_HIGH;

/** \brief CDR measured low register   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_MEAS_LOW_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_MEAS_LOW;

/** \brief CDR upper limit control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_UPPER_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_UPPER_CTRL;

/** \brief Wake-Up CAN configuration register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CFG_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CFG;

/** \brief DATA control register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_DATA_CTRL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_DATA_CTRL;

/** \brief Message data length code control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_DLC_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_DLC_CTRL;

/** \brief Wake-Up CAN FD control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_FD_CTRL_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_WCAN_FD_CTRL;

/** \brief Wake-Up CAN error counter register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_FRMERRCNT_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_FRMERRCNT;

/** \brief Message identifier control register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID0_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID0_CTRL;

/** \brief Message identifier control register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID1_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID1_CTRL;

/** \brief Message identifier control register 2   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID2_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID2_CTRL;

/** \brief Message identifier control register 3   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID3_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID3_CTRL;

/** \brief Wake-Up CAN interrupt and event status clear register 0   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESCLR0_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESCLR0;

/** \brief Wake-Up CAN interrupt and event status clear register 1   */
typedef union
{
    __O  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __O  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESCLR1_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESCLR1;

/** \brief Wake-Up CAN interrupt and event status register 0   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESTAT0_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESTAT0;

/** \brief Wake-Up CAN interrupt and event status register 1   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESTAT1_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESTAT1;

/** \brief Wake-Up CAN interrupt mask register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTMRSLT_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTMRSLT;

/** \brief Message identifier mask register 0   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID0_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID0_CTRL;

/** \brief Message identifier mask register 1   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID1_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID1_CTRL;

/** \brief Message identifier mask register 2   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID2_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID2_CTRL;

/** \brief Message identifier mask register 3   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID3_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID3_CTRL;

/** \brief Watchdog timer control register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_CON_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_WDT_CON;

/** \brief Watchdog timer high byte   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_H_Bits B;                  /**< \brief Bitfield access */
} Ifx_SCR_WDT_H;

/** \brief Watchdog timer low byte   */
typedef union
{
    __I  Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __I  Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_L_Bits B;                  /**< \brief Bitfield access */
} Ifx_SCR_WDT_L;

/** \brief Watchdog timer reload register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_REL_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_WDT_REL;

/** \brief Watchdog window-boundary register   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_WINB_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_WDT_WINB;

/** \brief On-chip XRAM address higher order   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_XADDRH_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_XADDRH;

/** \}  */


/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXSCR_REGDEF_H */
