/**
 * \file IfxHssl_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_HSSL/V0.2.1.1.4
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Hssl_Registers Hssl Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Hssl_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Hssl_Registers
 * 
 * \defgroup IfxSfr_Hssl_Registers_union Register unions
 * \ingroup IfxSfr_Hssl_Registers
 * 
 * \defgroup IfxSfr_Hssl_Registers_struct Memory map
 * \ingroup IfxSfr_Hssl_Registers
 */
#ifndef IFXHSSL_REGDEF_H
#define IFXHSSL_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Hssl_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_HSSL_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_HSSL_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_HSSL_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_HSSL_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_HSSL_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_HSSL_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_HSSL_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_HSSL_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_HSSL_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_HSSL_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_HSSL_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_HSSL_ACCEN_WRB_FPI_Bits;

/** \brief Access Rules Register */
typedef struct _Ifx_HSSL_AR_Bits
{
    __IO Ifx_UReg_32Bit ARW0:2;            /**< \brief [1:0] Access Rule for Window 0 - ARW0 (rw) */
    __IO Ifx_UReg_32Bit ARW1:2;            /**< \brief [3:2] Access Rule for Window 1 - ARW1 (rw) */
    __IO Ifx_UReg_32Bit ARW2:2;            /**< \brief [5:4] Access Rule for Window 2 - ARW2 (rw) */
    __IO Ifx_UReg_32Bit ARW3:2;            /**< \brief [7:6] Access Rule for Window 3 - ARW3 (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit MAVCH:2;           /**< \brief [17:16] Memory Access Violation Channel - MAVCH (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_HSSL_AR_Bits;

/** \brief Access Window End Register 0 */
typedef struct _Ifx_HSSL_AW_AWEND_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit AWE:24;            /**< \brief [31:8] Access Window End Address - AWE (rw) */
} Ifx_HSSL_AW_AWEND_Bits;

/** \brief Access Window Start Register 0 */
typedef struct _Ifx_HSSL_AW_AWSTART_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit AWS:24;            /**< \brief [31:8] Access Window Start Address - AWS (rw) */
} Ifx_HSSL_AW_AWSTART_Bits;

/** \brief Configuration Register */
typedef struct _Ifx_HSSL_CFG_Bits
{
    __IO Ifx_UReg_32Bit PREDIV:14;         /**< \brief [13:0] Global Predivider - PREDIV (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit SMT:1;             /**< \brief [16:16] Streaming Mode Transmitter - SMT (rw) */
    __IO Ifx_UReg_32Bit SMR:1;             /**< \brief [17:17] Streaming Mode Receiver - SMR (rw) */
    __IO Ifx_UReg_32Bit SCM:1;             /**< \brief [18:18] Streaming Channel Mode - SCM (rw) */
    __IO Ifx_UReg_32Bit CCC:1;             /**< \brief [19:19] Channel Code Control - CCC (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_HSSL_CFG_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_HSSL_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_HSSL_CLC_Bits;

/** \brief CRC Control Register */
typedef struct _Ifx_HSSL_CRC_Bits
{
    __IO Ifx_UReg_32Bit XORMASK:16;        /**< \brief [15:0] Value to be XORed with the Calculated CRC - XORMASK (rw) */
    __IO Ifx_UReg_32Bit XEN:1;             /**< \brief [16:16] Enable the Error Injection via XORMASK - XEN (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_HSSL_CRC_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_HSSL_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUMBER (r) */
} Ifx_HSSL_ID_Bits;

/** \brief Initiator Stream Current Address Register */
typedef struct _Ifx_HSSL_IS_CA_Bits
{
    __I  Ifx_UReg_32Bit :5;                /**< \brief [4:0] \internal Reserved */
    __I  Ifx_UReg_32Bit CURR:27;           /**< \brief [31:5] Address of the Memory Location for the Current Transfer - CURR (rh) */
} Ifx_HSSL_IS_CA_Bits;

/** \brief Initiator Stream Frame Count Register */
typedef struct _Ifx_HSSL_IS_FC_Bits
{
    __IO Ifx_UReg_32Bit RELCOUNT:16;       /**< \brief [15:0] Reload Count Number - RELCOUNT (rw) */
    __I  Ifx_UReg_32Bit CURCOUNT:16;       /**< \brief [31:16] Current Count Number - CURCOUNT (rh) */
} Ifx_HSSL_IS_FC_Bits;

/** \brief Initiator Stream Start Address Register */
typedef struct _Ifx_HSSL_IS_SA_Bits
{
    __I  Ifx_UReg_32Bit :5;                /**< \brief [4:0] \internal Reserved */
    __IO Ifx_UReg_32Bit START:27;          /**< \brief [31:5] Start Address for the Memory Range - START (rw) */
} Ifx_HSSL_IS_SA_Bits;

/** \brief Initiator Control Data Register 0 */
typedef struct _Ifx_HSSL_I_ICON_Bits
{
    __O  Ifx_UReg_32Bit IDQ:1;             /**< \brief [0:0] Read ID Request - IDQ (w) */
    __O  Ifx_UReg_32Bit TQ:1;              /**< \brief [1:1] Trigger Request - TQ (w) */
    __I  Ifx_UReg_32Bit LETT:3;            /**< \brief [4:2] Last Error Transaction Tag - LETT (rh) */
    __I  Ifx_UReg_32Bit CETT:3;            /**< \brief [7:5] Currently Expected Transaction Tag - CETT (rh) */
    __I  Ifx_UReg_32Bit TOCV:8;            /**< \brief [15:8] Time Out Current Value - TOCV (rh) */
    __IO Ifx_UReg_32Bit DATLEN:2;          /**< \brief [17:16] Data Length - DATLEN (rw) */
    __IO Ifx_UReg_32Bit RWT:2;             /**< \brief [19:18] Read Write Trigger Command Type - RWT (rw) */
    __I  Ifx_UReg_32Bit BSY:1;             /**< \brief [20:20] Channel Busy - BSY (rh) */
    __I  Ifx_UReg_32Bit ITTAG:3;           /**< \brief [23:21] Initiator Transaction Tag - ITTAG (rh) */
    __IO Ifx_UReg_32Bit TOREL:8;           /**< \brief [31:24] Time Out Reload Value - TOREL (rw) */
} Ifx_HSSL_I_ICON_Bits;

/** \brief Initiator Read Data Register 0 */
typedef struct _Ifx_HSSL_I_IRD_Bits
{
    __I  Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data Delivered by a Read Response Frame - DATA (rh) */
} Ifx_HSSL_I_IRD_Bits;

/** \brief Initiator Read Write Address Register 0 */
typedef struct _Ifx_HSSL_I_IRWA_Bits
{
    __IO Ifx_UReg_32Bit ADDRESS:32;        /**< \brief [31:0] Address Part of the Payload of a Write Frame - ADDRESS (rw) */
} Ifx_HSSL_I_IRWA_Bits;

/** \brief Initiator Write Data Register 0 */
typedef struct _Ifx_HSSL_I_IWD_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] Data Part of the Payload of a Write Frame - DATA (rw) */
} Ifx_HSSL_I_IWD_Bits;

/** \brief Miscellaneous Flags Register */
typedef struct _Ifx_HSSL_MFLAGS_Bits
{
    __I  Ifx_UReg_32Bit NACK:4;            /**< \brief [3:0] Not Acknowledge Error - Target Error - NACK (rh) */
    __I  Ifx_UReg_32Bit TTE:4;             /**< \brief [7:4] Transaction Tag Error - TTE (rh) */
    __I  Ifx_UReg_32Bit TIMEOUT:4;         /**< \brief [11:8] Timeout Error - TIMEOUT (rh) */
    __I  Ifx_UReg_32Bit UNEXPECTED:4;      /**< \brief [15:12] Unexpected Type of Frame Error - UNEXPECTED (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TMB:1;             /**< \brief [18:18] Target Memory Block - TMB (rh) */
    __I  Ifx_UReg_32Bit IMB:1;             /**< \brief [19:19] Initiator Memory Block - IMB (rh) */
    __I  Ifx_UReg_32Bit ISB:1;             /**< \brief [20:20] Initiator Stream Block Request - ISB (rh) */
    __I  Ifx_UReg_32Bit MAV:1;             /**< \brief [21:21] Memory Access Violation - MAV (rh) */
    __I  Ifx_UReg_32Bit SRIE:1;            /**< \brief [22:22] SRI/SPB Bus Access Error - SRIE (rh) */
    __I  Ifx_UReg_32Bit PIE1:1;            /**< \brief [23:23] PHY Inconsistency Error 1(Channel Number Code Error) - PIE1 (rh) */
    __I  Ifx_UReg_32Bit PIE2:1;            /**< \brief [24:24] PHY Inconsistency Error 2(Data Length Error) - PIE2 (rh) */
    __I  Ifx_UReg_32Bit CRCE:1;            /**< \brief [25:25] CRC Error - CRCE (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __I  Ifx_UReg_32Bit TSE:1;             /**< \brief [28:28] Target Stream Enable - TSE (rh) */
    __I  Ifx_UReg_32Bit TEI:1;             /**< \brief [29:29] Transmit Enable Input - TEI (rh) */
    __I  Ifx_UReg_32Bit TEO:1;             /**< \brief [30:30] Transmit Enable Output - TEO (rh) */
    __I  Ifx_UReg_32Bit INI:1;             /**< \brief [31:31] Initialize Mode - INI (rh) */
} Ifx_HSSL_MFLAGS_Bits;

/** \brief Miscellaneous Flags Clear Register */
typedef struct _Ifx_HSSL_MFLAGSCL_Bits
{
    __O  Ifx_UReg_32Bit NACKC:4;           /**< \brief [3:0] NACK Flags Clear - NACKC (w) */
    __O  Ifx_UReg_32Bit TTEC:4;            /**< \brief [7:4] Transaction Tag Error Flags Clear - TTEC (w) */
    __O  Ifx_UReg_32Bit TIMEOUTC:4;        /**< \brief [11:8] Timeout Error Flags Clear - TIMEOUTC (w) */
    __O  Ifx_UReg_32Bit UNEXPECTEDC:4;     /**< \brief [15:12] Unexpected Error Flags Clear - UNEXPECTEDC (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __O  Ifx_UReg_32Bit TMBC:1;            /**< \brief [18:18] Target Memory Block Flag Clear - TMBC (w) */
    __O  Ifx_UReg_32Bit IMBC:1;            /**< \brief [19:19] Initiator Memory Block Flag Clear - IMBC (w) */
    __O  Ifx_UReg_32Bit ISBC:1;            /**< \brief [20:20] Initiator Stream Block Request Clear - ISBC (w) */
    __O  Ifx_UReg_32Bit MAVC:1;            /**< \brief [21:21] MAV Flag Clear - MAVC (w) */
    __O  Ifx_UReg_32Bit SRIEC:1;           /**< \brief [22:22] SRI/SPB Bus Access Error Flag Clear - SRIEC (w) */
    __O  Ifx_UReg_32Bit PIE1C:1;           /**< \brief [23:23] PIE1 Error Flag Clear - PIE1C (w) */
    __O  Ifx_UReg_32Bit PIE2C:1;           /**< \brief [24:24] PIE2 Error Flag Clear - PIE2C (w) */
    __O  Ifx_UReg_32Bit CRCEC:1;           /**< \brief [25:25] CRC Error Flag Clear - CRCEC (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __O  Ifx_UReg_32Bit TSEC:1;            /**< \brief [28:28] Target Stream Enable Flag Clear - TSEC (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __O  Ifx_UReg_32Bit TEOC:1;            /**< \brief [30:30] Transmit Enable Flag Clear - TEOC (w) */
    __O  Ifx_UReg_32Bit INIC:1;            /**< \brief [31:31] Initialize Mode Flag Clear - INIC (w) */
} Ifx_HSSL_MFLAGSCL_Bits;

/** \brief Flags Enable Register */
typedef struct _Ifx_HSSL_MFLAGSEN_Bits
{
    __IO Ifx_UReg_32Bit NACKEN:4;          /**< \brief [3:0] Not Acknowledge Error Enable Bits - NACKEN (rw) */
    __IO Ifx_UReg_32Bit TTEEN:4;           /**< \brief [7:4] Transaction Tag Error Enable Bits - TTEEN (rw) */
    __IO Ifx_UReg_32Bit TIMEOUTEN:4;       /**< \brief [11:8] Timeout Error Enable Bits - TIMEOUTEN (rw) */
    __IO Ifx_UReg_32Bit UNEXPECTEDEN:4;    /**< \brief [15:12] Unexpected Error Enable Bits - UNEXPECTEDEN (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [20:16] \internal Reserved */
    __IO Ifx_UReg_32Bit MAVEN:1;           /**< \brief [21:21] MAV Enable Bit - MAVEN (rw) */
    __IO Ifx_UReg_32Bit SRIEEN:1;          /**< \brief [22:22] SRI/SPB Bus Access Error Enable Bit - SRIEEN (rw) */
    __IO Ifx_UReg_32Bit PIE1EN:1;          /**< \brief [23:23] PIE1 Error Enable Bit - PIE1EN (rw) */
    __IO Ifx_UReg_32Bit PIE2EN:1;          /**< \brief [24:24] PIE2 Error Enable Bit - PIE2EN (rw) */
    __IO Ifx_UReg_32Bit CRCEEN:1;          /**< \brief [25:25] CRC Error Enable Bit - CRCEEN (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [28:26] \internal Reserved */
    __IO Ifx_UReg_32Bit TEIEN:1;           /**< \brief [29:29] TEI Enable Bit - TEIEN (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_HSSL_MFLAGSEN_Bits;

/** \brief Miscellaneous Flags Set Register */
typedef struct _Ifx_HSSL_MFLAGSSET_Bits
{
    __O  Ifx_UReg_32Bit NACKS:4;           /**< \brief [3:0] NACK Flags Set - NACKS (w) */
    __O  Ifx_UReg_32Bit TTES:4;            /**< \brief [7:4] Transaction Tag Error Flags Set - TTES (w) */
    __O  Ifx_UReg_32Bit TIMEOUTS:4;        /**< \brief [11:8] Timeout Error Flags Set - TIMEOUTS (w) */
    __O  Ifx_UReg_32Bit UNEXPECTEDS:4;     /**< \brief [15:12] Unexpected Error Flags Set - UNEXPECTEDS (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __O  Ifx_UReg_32Bit TMBS:1;            /**< \brief [18:18] Target Memory Block Flag Set - TMBS (w) */
    __O  Ifx_UReg_32Bit IMBS:1;            /**< \brief [19:19] Initiator Memory Block Flag Set - IMBS (w) */
    __O  Ifx_UReg_32Bit ISBS:1;            /**< \brief [20:20] Initiator Stream Block Request Set - ISBS (w) */
    __O  Ifx_UReg_32Bit MAVS:1;            /**< \brief [21:21] MAV Flag Set - MAVS (w) */
    __O  Ifx_UReg_32Bit SRIES:1;           /**< \brief [22:22] SRI/SPB Bus Access Error Flag Set - SRIES (w) */
    __O  Ifx_UReg_32Bit PIE1S:1;           /**< \brief [23:23] PIE1 Error Flag Set - PIE1S (w) */
    __O  Ifx_UReg_32Bit PIE2S:1;           /**< \brief [24:24] PIE2 Error Flag Set - PIE2S (w) */
    __O  Ifx_UReg_32Bit CRCES:1;           /**< \brief [25:25] CRC Error Flag Set - CRCES (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __O  Ifx_UReg_32Bit TSES:1;            /**< \brief [28:28] Target Stream Enable Flag Set - TSES (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __O  Ifx_UReg_32Bit TEOS:1;            /**< \brief [30:30] Transmit Enable Flag Set - TEOS (w) */
    __O  Ifx_UReg_32Bit INIS:1;            /**< \brief [31:31] Initialize Mode Flag Set - INIS (w) */
} Ifx_HSSL_MFLAGSSET_Bits;

/** \brief Multi Slave Control Register */
typedef struct _Ifx_HSSL_MSCR_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] Multi Slave Mode Enable - EN (rw) */
    __IO Ifx_UReg_32Bit SLAVETAG:2;        /**< \brief [2:1] Slave Tag - SLAVETAG (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [15:3] \internal Reserved */
    __IO Ifx_UReg_32Bit ITXSTOP:1;         /**< \brief [16:16] Initiator Transmission Stop - ITXSTOP (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_HSSL_MSCR_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_HSSL_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0/1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 Bus Select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_HSSL_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_HSSL_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_HSSL_PROT_Bits;

/** \brief Request Flags Register */
typedef struct _Ifx_HSSL_QFLAGS_Bits
{
    __I  Ifx_UReg_32Bit I:4;               /**< \brief [3:0] Request Flags for Initiated Commands - I (rh) */
    __I  Ifx_UReg_32Bit T:4;               /**< \brief [7:4] Request Flags for Commands Arrived at Target - T (rh) */
    __I  Ifx_UReg_32Bit R:4;               /**< \brief [11:8] Request Flags for Response Frames at the Target - R (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit E0:2;              /**< \brief [17:16] Expect Flags for Activated Timeout Timer 0 - E0 (rh) */
    __I  Ifx_UReg_32Bit E1:2;              /**< \brief [19:18] Expect Flags for Activated Timeout Timer 1 - E1 (rh) */
    __I  Ifx_UReg_32Bit E2:2;              /**< \brief [21:20] Expect Flags for Activated Timeout Timer 2 - E2 (rh) */
    __I  Ifx_UReg_32Bit E3:2;              /**< \brief [23:22] Expect Flags for Activated Timeout Timer 3 - E3 (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __I  Ifx_UReg_32Bit I_S:1;             /**< \brief [28:28] I Flag for Stream Frames - I_S (rh) */
    __I  Ifx_UReg_32Bit R_S:1;             /**< \brief [29:29] R Flag for Stream Frames - R_S (rh) */
    __I  Ifx_UReg_32Bit T_S:1;             /**< \brief [30:30] T Flag for Stream Frames - T_S (rh) */
    __I  Ifx_UReg_32Bit E_S:1;             /**< \brief [31:31] E Flag for Stream Frames - E_S (rh) */
} Ifx_HSSL_QFLAGS_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_HSSL_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_HSSL_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_HSSL_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_HSSL_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_HSSL_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_HSSL_RST_STAT_Bits;

/** \brief Security Control Register */
typedef struct _Ifx_HSSL_SEC_Bits
{
    __IO Ifx_UReg_32Bit LCK:1;             /**< \brief [0:0] Lock the HSSL Module - LCK (rw) */
    __IO Ifx_UReg_32Bit LAW:1;             /**< \brief [1:1] Lock the Address Windows Registers - LAW (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_HSSL_SEC_Bits;

/** \brief Stream FIFOs Status Flags Register */
typedef struct _Ifx_HSSL_SFSFLAGS_Bits
{
    __I  Ifx_UReg_32Bit RXFL:2;            /**< \brief [1:0] Stream RxFIFO Filling Level - RXFL (rh) */
    __I  Ifx_UReg_32Bit TXFL:2;            /**< \brief [3:2] Stream TxFIFO Filling Level - TXFL (rh) */
    __I  Ifx_UReg_32Bit EXFL:2;            /**< \brief [5:4] Stream Expect FIFO Filling Level - EXFL (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [14:6] \internal Reserved */
    __I  Ifx_UReg_32Bit ISF:1;             /**< \brief [15:15] Initiator Stream Frame Request - ISF (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_HSSL_SFSFLAGS_Bits;

/** \brief Target ID Address Register */
typedef struct _Ifx_HSSL_TIDADD_Bits
{
    __IO Ifx_UReg_32Bit A:32;              /**< \brief [31:0] Address Pointer - A (rw) */
} Ifx_HSSL_TIDADD_Bits;

/** \brief Target Status Register */
typedef struct _Ifx_HSSL_TSTAT_Bits
{
    __I  Ifx_UReg_32Bit LASTCC0:5;         /**< \brief [4:0] Last Command Code - LASTCC0 (rh) */
    __I  Ifx_UReg_32Bit LASTTT0:3;         /**< \brief [7:5] Last Transaction Tag - LASTTT0 (rh) */
    __I  Ifx_UReg_32Bit LASTCC1:5;         /**< \brief [12:8] Last Command Code - LASTCC1 (rh) */
    __I  Ifx_UReg_32Bit LASTTT1:3;         /**< \brief [15:13] Last Transaction Tag - LASTTT1 (rh) */
    __I  Ifx_UReg_32Bit LASTCC2:5;         /**< \brief [20:16] Last Command Code - LASTCC2 (rh) */
    __I  Ifx_UReg_32Bit LASTTT2:3;         /**< \brief [23:21] Last Transaction Tag - LASTTT2 (rh) */
    __I  Ifx_UReg_32Bit LASTCC3:5;         /**< \brief [28:24] Last Command Code - LASTCC3 (rh) */
    __I  Ifx_UReg_32Bit LASTTT3:3;         /**< \brief [31:29] Last Transaction Tag - LASTTT3 (rh) */
} Ifx_HSSL_TSTAT_Bits;

/** \brief Target Stream Current Address Register */
typedef struct _Ifx_HSSL_TS_CA_Bits
{
    __I  Ifx_UReg_32Bit :5;                /**< \brief [4:0] \internal Reserved */
    __I  Ifx_UReg_32Bit CURR:27;           /**< \brief [31:5] Address of the Memory Location for the Current Transfer - CURR (rh) */
} Ifx_HSSL_TS_CA_Bits;

/** \brief Target Stream Frame Count Register */
typedef struct _Ifx_HSSL_TS_FC_Bits
{
    __IO Ifx_UReg_32Bit RELCOUNT:16;       /**< \brief [15:0] Reload Count Number - RELCOUNT (rw) */
    __I  Ifx_UReg_32Bit CURCOUNT:16;       /**< \brief [31:16] Current Count Number - CURCOUNT (rh) */
} Ifx_HSSL_TS_FC_Bits;

/** \brief Target Stream Start Address Register 0 */
typedef struct _Ifx_HSSL_TS_SA_Bits
{
    __I  Ifx_UReg_32Bit :5;                /**< \brief [4:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:27;           /**< \brief [31:5] Start Address for the Memory Range - ADDR (rw) */
} Ifx_HSSL_TS_SA_Bits;

/** \brief Target Current Address Register 0 */
typedef struct _Ifx_HSSL_T_TCA_Bits
{
    __I  Ifx_UReg_32Bit A:32;              /**< \brief [31:0] Address Part of a Write or a Read Command or ID Frame -  of payload (rh) */
} Ifx_HSSL_T_TCA_Bits;

/** \brief Target Current Data Register 0 */
typedef struct _Ifx_HSSL_T_TCD_Bits
{
    __I  Ifx_UReg_32Bit D:32;              /**< \brief [31:0] Data Part of a WR Command Frame or RD Data of a RD Command Frame - D of payloa (rh) */
} Ifx_HSSL_T_TCD_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_hssl_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_HSSL_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_HSSL_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ACCEN_RDB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_HSSL_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_HSSL_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_HSSL_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ACCEN_WRB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_HSSL_ACCEN_WRB_FPI;

/** \brief Access Rules Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_AR_Bits B;                    /**< \brief Bitfield access */
} Ifx_HSSL_AR;

/** \brief Access Window End Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_AW_AWEND_Bits B;              /**< \brief Bitfield access */
} Ifx_HSSL_AW_AWEND;

/** \brief Access Window Start Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_AW_AWSTART_Bits B;            /**< \brief Bitfield access */
} Ifx_HSSL_AW_AWSTART;

/** \brief Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_CFG_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSSL_CFG;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSSL_CLC;

/** \brief CRC Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_CRC_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSSL_CRC;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_HSSL_ID;

/** \brief Initiator Stream Current Address Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_IS_CA_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_IS_CA;

/** \brief Initiator Stream Frame Count Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_IS_FC_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_IS_FC;

/** \brief Initiator Stream Start Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_IS_SA_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_IS_SA;

/** \brief Initiator Control Data Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_I_ICON_Bits B;                /**< \brief Bitfield access */
} Ifx_HSSL_I_ICON;

/** \brief Initiator Read Data Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_I_IRD_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_I_IRD;

/** \brief Initiator Read Write Address Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_I_IRWA_Bits B;                /**< \brief Bitfield access */
} Ifx_HSSL_I_IRWA;

/** \brief Initiator Write Data Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_I_IWD_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_I_IWD;

/** \brief Miscellaneous Flags Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_MFLAGS_Bits B;                /**< \brief Bitfield access */
} Ifx_HSSL_MFLAGS;

/** \brief Miscellaneous Flags Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_MFLAGSCL_Bits B;              /**< \brief Bitfield access */
} Ifx_HSSL_MFLAGSCL;

/** \brief Flags Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_MFLAGSEN_Bits B;              /**< \brief Bitfield access */
} Ifx_HSSL_MFLAGSEN;

/** \brief Miscellaneous Flags Set Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_MFLAGSSET_Bits B;             /**< \brief Bitfield access */
} Ifx_HSSL_MFLAGSSET;

/** \brief Multi Slave Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_MSCR_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSSL_MSCR;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_OCS_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSSL_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSSL_PROT;

/** \brief Request Flags Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_QFLAGS_Bits B;                /**< \brief Bitfield access */
} Ifx_HSSL_QFLAGS;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_HSSL_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_HSSL_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_HSSL_RST_STAT;

/** \brief Security Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_SEC_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSSL_SEC;

/** \brief Stream FIFOs Status Flags Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_SFSFLAGS_Bits B;              /**< \brief Bitfield access */
} Ifx_HSSL_SFSFLAGS;

/** \brief Target ID Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_TIDADD_Bits B;                /**< \brief Bitfield access */
} Ifx_HSSL_TIDADD;

/** \brief Target Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_TSTAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_TSTAT;

/** \brief Target Stream Current Address Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_TS_CA_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_TS_CA;

/** \brief Target Stream Frame Count Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_TS_FC_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_TS_FC;

/** \brief Target Stream Start Address Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_TS_SA_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_TS_SA;

/** \brief Target Current Address Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_T_TCA_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_T_TCA;

/** \brief Target Current Data Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSSL_T_TCD_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSSL_T_TCD;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_HSSL_RST
{
       __IO Ifx_HSSL_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_HSSL_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_HSSL_RST_STAT                   STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_HSSL_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_HSSL_ACCEN
{
       __IO Ifx_HSSL_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_HSSL_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_HSSL_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_HSSL_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_HSSL_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_HSSL_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_HSSL_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_I_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief I object */
typedef volatile struct _Ifx_HSSL_I
{
       __IO Ifx_HSSL_I_IWD                      IWD;                    /**< \brief 0, Initiator Write Data Register 0*/
       __IO Ifx_HSSL_I_ICON                     ICON;                   /**< \brief 4, Initiator Control Data Register 0*/
       __IO Ifx_HSSL_I_IRWA                     IRWA;                   /**< \brief 8, Initiator Read Write Address Register 0*/
       __I  Ifx_HSSL_I_IRD                      IRD;                    /**< \brief C, Initiator Read Data Register 0*/
} Ifx_HSSL_I;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_T_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief T object */
typedef volatile struct _Ifx_HSSL_T
{
       __I  Ifx_HSSL_T_TCD                      TCD;                    /**< \brief 0, Target Current Data Register 0*/
       __I  Ifx_HSSL_T_TCA                      TCA;                    /**< \brief 4, Target Current Address Register 0*/
} Ifx_HSSL_T;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_IS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief IS object */
typedef volatile struct _Ifx_HSSL_IS
{
       __IO Ifx_HSSL_IS_SA                      SA[2];                  /**< \brief 0, Initiator Stream Start Address Register*/
       __I  Ifx_HSSL_IS_CA                      CA;                     /**< \brief 8, Initiator Stream Current Address Register*/
       __IO Ifx_HSSL_IS_FC                      FC;                     /**< \brief C, Initiator Stream Frame Count Register*/
} Ifx_HSSL_IS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_TS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TS object */
typedef volatile struct _Ifx_HSSL_TS
{
       __IO Ifx_HSSL_TS_SA                      SA[2];                  /**< \brief 0, Target Stream Start Address Register 0*/
       __I  Ifx_HSSL_TS_CA                      CA;                     /**< \brief 8, Target Stream Current Address Register*/
       __IO Ifx_HSSL_TS_FC                      FC;                     /**< \brief C, Target Stream Frame Count Register*/
} Ifx_HSSL_TS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_AW_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief AW object */
typedef volatile struct _Ifx_HSSL_AW
{
       __IO Ifx_HSSL_AW_AWSTART                 AWSTART;                /**< \brief 0, Access Window Start Register 0*/
       __IO Ifx_HSSL_AW_AWEND                   AWEND;                  /**< \brief 4, Access Window End Register 0*/
} Ifx_HSSL_AW;

/******************************************************************************/
/** \addtogroup IfxSfr_Hssl_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief HSSL object */
typedef volatile struct _Ifx_HSSL
{
       __IO Ifx_HSSL_CLC                        CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_HSSL_OCS                        OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_HSSL_ID                         ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_HSSL_RST                        RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_HSSL_PROT                       PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_HSSL_PROT                       PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_HSSL_ACCEN                      ACCEN;                  /**< \brief 40, */
       __IO Ifx_HSSL_CRC                        CRC;                    /**< \brief 60, CRC Control Register*/
       __IO Ifx_HSSL_CFG                        CFG;                    /**< \brief 64, Configuration Register*/
       __I  Ifx_HSSL_QFLAGS                     QFLAGS;                 /**< \brief 68, Request Flags Register*/
       __I  Ifx_HSSL_MFLAGS                     MFLAGS;                 /**< \brief 6C, Miscellaneous Flags Register*/
       __O  Ifx_HSSL_MFLAGSSET                  MFLAGSSET;              /**< \brief 70, Miscellaneous Flags Set Register*/
       __O  Ifx_HSSL_MFLAGSCL                   MFLAGSCL;               /**< \brief 74, Miscellaneous Flags Clear Register*/
       __IO Ifx_HSSL_MFLAGSEN                   MFLAGSEN;               /**< \brief 78, Flags Enable Register*/
       __I  Ifx_HSSL_SFSFLAGS                   SFSFLAGS;               /**< \brief 7C, Stream FIFOs Status Flags Register*/
       __IO Ifx_HSSL_I                          I[4];                   /**< \brief 80, Initiator Read Data Register 0*/
       __IO Ifx_HSSL_T                          T[4];                   /**< \brief C0, Target Current Address Register 0*/
       __I  Ifx_HSSL_TSTAT                      TSTAT;                  /**< \brief E0, Target Status Register*/
       __IO Ifx_HSSL_TIDADD                     TIDADD;                 /**< \brief E4, Target ID Address Register*/
       __IO Ifx_HSSL_SEC                        SEC;                    /**< \brief E8, Security Control Register*/
       __IO Ifx_HSSL_MSCR                       MSCR;                   /**< \brief EC, Multi Slave Control Register*/
       __IO Ifx_HSSL_IS                         IS;                     /**< \brief F0, Initiator Stream Frame Count Register*/
       __IO Ifx_HSSL_TS                         TS;                     /**< \brief 100, Target Stream Frame Count Register*/
       __IO Ifx_HSSL_AW                         AW[4];                  /**< \brief 110, Access Window End Register 0*/
       __IO Ifx_HSSL_AR                         AR;                     /**< \brief 130, Access Rules Register*/
       __I  Ifx_UReg_8Bit                       reserved_134[715];      /**< \brief 134, \internal Reserved */
} Ifx_HSSL;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXHSSL_REGDEF_H */
