/**
 * \file IfxPort_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_Ports/V0.2.2.1.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_P_Registers P Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_P_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_P_Registers
 * 
 * \defgroup IfxSfr_P_Registers_union Register unions
 * \ingroup IfxSfr_P_Registers
 * 
 * \defgroup IfxSfr_P_Registers_struct Memory map
 * \ingroup IfxSfr_P_Registers
 */
#ifndef IFXPORT_REGDEF_H
#define IFXPORT_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_P_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_P_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_P_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_P_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG-ID q - ENq (rw) */
} Ifx_P_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_P_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_P_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_P_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_P_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_P_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG-ID q - ENq (rw) */
} Ifx_P_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_P_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_P_ACCEN_WRB_FPI_Bits;

/** \brief Pad Bandgap Trim Register */
typedef struct _Ifx_P_BGTRIM_Bits
{
    __IO Ifx_UReg_32Bit TRIM:4;            /**< \brief [3:0] Bandgap Trimming Bit (rwh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_P_BGTRIM_Bits;

/** \brief Port HWSEL status Register */
typedef struct _Ifx_P_HWSELSTAT_Bits
{
    __I  Ifx_UReg_32Bit STAT0:1;           /**< \brief [0:0] Status of HWSEL line for Pin 0 (rh) */
    __I  Ifx_UReg_32Bit STAT1:1;           /**< \brief [1:1] Status of HWSEL line for Pin 1 (rh) */
    __I  Ifx_UReg_32Bit STAT2:1;           /**< \brief [2:2] Status of HWSEL line for Pin 2 (rh) */
    __I  Ifx_UReg_32Bit STAT3:1;           /**< \brief [3:3] Status of HWSEL line for Pin 3 (rh) */
    __I  Ifx_UReg_32Bit STAT4:1;           /**< \brief [4:4] Status of HWSEL line for Pin 4 (rh) */
    __I  Ifx_UReg_32Bit STAT5:1;           /**< \brief [5:5] Status of HWSEL line for Pin 5 (rh) */
    __I  Ifx_UReg_32Bit STAT6:1;           /**< \brief [6:6] Status of HWSEL line for Pin 6 (rh) */
    __I  Ifx_UReg_32Bit STAT7:1;           /**< \brief [7:7] Status of HWSEL line for Pin 7 (rh) */
    __I  Ifx_UReg_32Bit STAT8:1;           /**< \brief [8:8] Status of HWSEL line for Pin 8 (rh) */
    __I  Ifx_UReg_32Bit STAT9:1;           /**< \brief [9:9] Status of HWSEL line for Pin 9 (rh) */
    __I  Ifx_UReg_32Bit STAT10:1;          /**< \brief [10:10] Status of HWSEL line for Pin 10 (rh) */
    __I  Ifx_UReg_32Bit STAT11:1;          /**< \brief [11:11] Status of HWSEL line for Pin 11 (rh) */
    __I  Ifx_UReg_32Bit STAT12:1;          /**< \brief [12:12] Status of HWSEL line for Pin 12 (rh) */
    __I  Ifx_UReg_32Bit STAT13:1;          /**< \brief [13:13] Status of HWSEL line for Pin 13 (rh) */
    __I  Ifx_UReg_32Bit STAT14:1;          /**< \brief [14:14] Status of HWSEL line for Pin 14 (rh) */
    __I  Ifx_UReg_32Bit STAT15:1;          /**< \brief [15:15] Status of HWSEL line for Pin 15 (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_HWSELSTAT_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_P_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number (r) */
} Ifx_P_ID_Bits;

/** \brief Port Input Register */
typedef struct _Ifx_P_IN_Bits
{
    __I  Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Input Bit 0 (rh) */
    __I  Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Input Bit 1 (rh) */
    __I  Ifx_UReg_32Bit P2:1;              /**< \brief [2:2] Input Bit 2 (rh) */
    __I  Ifx_UReg_32Bit P3:1;              /**< \brief [3:3] Input Bit 3 (rh) */
    __I  Ifx_UReg_32Bit P4:1;              /**< \brief [4:4] Input Bit 4 (rh) */
    __I  Ifx_UReg_32Bit P5:1;              /**< \brief [5:5] Input Bit 5 (rh) */
    __I  Ifx_UReg_32Bit P6:1;              /**< \brief [6:6] Input Bit 6 (rh) */
    __I  Ifx_UReg_32Bit P7:1;              /**< \brief [7:7] Input Bit 7 (rh) */
    __I  Ifx_UReg_32Bit P8:1;              /**< \brief [8:8] Input Bit 8 (rh) */
    __I  Ifx_UReg_32Bit P9:1;              /**< \brief [9:9] Input Bit 9 (rh) */
    __I  Ifx_UReg_32Bit P10:1;             /**< \brief [10:10] Input Bit 10 (rh) */
    __I  Ifx_UReg_32Bit P11:1;             /**< \brief [11:11] Input Bit 11 (rh) */
    __I  Ifx_UReg_32Bit P12:1;             /**< \brief [12:12] Input Bit 12 (rh) */
    __I  Ifx_UReg_32Bit P13:1;             /**< \brief [13:13] Input Bit 13 (rh) */
    __I  Ifx_UReg_32Bit P14:1;             /**< \brief [14:14] Input Bit 14 (rh) */
    __I  Ifx_UReg_32Bit P15:1;             /**< \brief [15:15] Input Bit 15 (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_IN_Bits;

/** \brief Port n LVDS Pad Control Register 0 */
typedef struct _Ifx_P_LPCR_LPCR_Bits
{
    __IO Ifx_UReg_32Bit REN_CTRL:1;        /**< \brief [0:0] LVDS RX_EN controller (rwh) */
    __IO Ifx_UReg_32Bit RX_EN:1;           /**< \brief [1:1] Enable Receive LVDS (rwh) */
    __IO Ifx_UReg_32Bit TERM:1;            /**< \brief [2:2] Select Receiver Termination Mode (rwh) */
    __IO Ifx_UReg_32Bit LRXTERM:3;         /**< \brief [5:3] LVDS RX Poly-resistor configuration value (rwh) */
    __IO Ifx_UReg_32Bit LVDSM:1;           /**< \brief [6:6] LVDS-M Mode (rwh) */
    __IO Ifx_UReg_32Bit PS:1;              /**< \brief [7:7] Pad Supply Selection (rwh) */
    __IO Ifx_UReg_32Bit TEN_CTRL:1;        /**< \brief [8:8] LVDS TX_EN controller (rwh) */
    __IO Ifx_UReg_32Bit TX_EN:1;           /**< \brief [9:9] Enable Transmit LVDS (rwh) */
    __IO Ifx_UReg_32Bit VDIFFADJ:2;        /**< \brief [11:10] LVDS Output Amplitude Tuning (rwh) */
    __IO Ifx_UReg_32Bit VOSDYN:1;          /**< \brief [12:12] Tune Bit of VOS Control Loop Static/Dynamic (rwh) */
    __IO Ifx_UReg_32Bit VOSEXT:1;          /**< \brief [13:13] Tune Bit of VOS Control Loop Internal/External (rwh) */
    __IO Ifx_UReg_32Bit TX_PD:1;           /**< \brief [14:14] LVDS Power Down (rwh) */
    __IO Ifx_UReg_32Bit TX_PWDPD:1;        /**< \brief [15:15] Enable TX Power down pull down. (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_LPCR_LPCR_Bits;

/** \brief Port n LVDS Pad Status Register 0 */
typedef struct _Ifx_P_LPCR_LPSR_Bits
{
    __I  Ifx_UReg_32Bit IN:1;              /**< \brief [0:0] Input value of LVDS receive pad (rh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_P_LPCR_LPSR_Bits;

/** \brief Port Output Modification Clear Register */
typedef struct _Ifx_P_OMCR_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __O  Ifx_UReg_32Bit PCL0:1;            /**< \brief [16:16] Clear Bit 0 (w) */
    __O  Ifx_UReg_32Bit PCL1:1;            /**< \brief [17:17] Clear Bit 1 (w) */
    __O  Ifx_UReg_32Bit PCL2:1;            /**< \brief [18:18] Clear Bit 2 (w) */
    __O  Ifx_UReg_32Bit PCL3:1;            /**< \brief [19:19] Clear Bit 3 (w) */
    __O  Ifx_UReg_32Bit PCL4:1;            /**< \brief [20:20] Clear Bit 4 (w) */
    __O  Ifx_UReg_32Bit PCL5:1;            /**< \brief [21:21] Clear Bit 5 (w) */
    __O  Ifx_UReg_32Bit PCL6:1;            /**< \brief [22:22] Clear Bit 6 (w) */
    __O  Ifx_UReg_32Bit PCL7:1;            /**< \brief [23:23] Clear Bit 7 (w) */
    __O  Ifx_UReg_32Bit PCL8:1;            /**< \brief [24:24] Clear Bit 8 (w) */
    __O  Ifx_UReg_32Bit PCL9:1;            /**< \brief [25:25] Clear Bit 9 (w) */
    __O  Ifx_UReg_32Bit PCL10:1;           /**< \brief [26:26] Clear Bit 10 (w) */
    __O  Ifx_UReg_32Bit PCL11:1;           /**< \brief [27:27] Clear Bit 11 (w) */
    __O  Ifx_UReg_32Bit PCL12:1;           /**< \brief [28:28] Clear Bit 12 (w) */
    __O  Ifx_UReg_32Bit PCL13:1;           /**< \brief [29:29] Clear Bit 13 (w) */
    __O  Ifx_UReg_32Bit PCL14:1;           /**< \brief [30:30] Clear Bit 14 (w) */
    __O  Ifx_UReg_32Bit PCL15:1;           /**< \brief [31:31] Clear Bit 15 (w) */
} Ifx_P_OMCR_Bits;

/** \brief Port n Output Modification Register */
typedef struct _Ifx_P_OMR_Bits
{
    __O  Ifx_UReg_32Bit PS0:1;             /**< \brief [0:0] Set Bit 0 (w) */
    __O  Ifx_UReg_32Bit PS1:1;             /**< \brief [1:1] Set Bit 1 (w) */
    __O  Ifx_UReg_32Bit PS2:1;             /**< \brief [2:2] Set Bit 2 (w) */
    __O  Ifx_UReg_32Bit PS3:1;             /**< \brief [3:3] Set Bit 3 (w) */
    __O  Ifx_UReg_32Bit PS4:1;             /**< \brief [4:4] Set Bit 4 (w) */
    __O  Ifx_UReg_32Bit PS5:1;             /**< \brief [5:5] Set Bit 5 (w) */
    __O  Ifx_UReg_32Bit PS6:1;             /**< \brief [6:6] Set Bit 6 (w) */
    __O  Ifx_UReg_32Bit PS7:1;             /**< \brief [7:7] Set Bit 7 (w) */
    __O  Ifx_UReg_32Bit PS8:1;             /**< \brief [8:8] Set Bit 8 (w) */
    __O  Ifx_UReg_32Bit PS9:1;             /**< \brief [9:9] Set Bit 9 (w) */
    __O  Ifx_UReg_32Bit PS10:1;            /**< \brief [10:10] Set Bit 10 (w) */
    __O  Ifx_UReg_32Bit PS11:1;            /**< \brief [11:11] Set Bit 11 (w) */
    __O  Ifx_UReg_32Bit PS12:1;            /**< \brief [12:12] Set Bit 12 (w) */
    __O  Ifx_UReg_32Bit PS13:1;            /**< \brief [13:13] Set Bit 13 (w) */
    __O  Ifx_UReg_32Bit PS14:1;            /**< \brief [14:14] Set Bit 14 (w) */
    __O  Ifx_UReg_32Bit PS15:1;            /**< \brief [15:15] Set Bit 15 (w) */
    __O  Ifx_UReg_32Bit PCL0:1;            /**< \brief [16:16] Clear Bit 0 (w) */
    __O  Ifx_UReg_32Bit PCL1:1;            /**< \brief [17:17] Clear Bit 1 (w) */
    __O  Ifx_UReg_32Bit PCL2:1;            /**< \brief [18:18] Clear Bit 2 (w) */
    __O  Ifx_UReg_32Bit PCL3:1;            /**< \brief [19:19] Clear Bit 3 (w) */
    __O  Ifx_UReg_32Bit PCL4:1;            /**< \brief [20:20] Clear Bit 4 (w) */
    __O  Ifx_UReg_32Bit PCL5:1;            /**< \brief [21:21] Clear Bit 5 (w) */
    __O  Ifx_UReg_32Bit PCL6:1;            /**< \brief [22:22] Clear Bit 6 (w) */
    __O  Ifx_UReg_32Bit PCL7:1;            /**< \brief [23:23] Clear Bit 7 (w) */
    __O  Ifx_UReg_32Bit PCL8:1;            /**< \brief [24:24] Clear Bit 8 (w) */
    __O  Ifx_UReg_32Bit PCL9:1;            /**< \brief [25:25] Clear Bit 9 (w) */
    __O  Ifx_UReg_32Bit PCL10:1;           /**< \brief [26:26] Clear Bit 10 (w) */
    __O  Ifx_UReg_32Bit PCL11:1;           /**< \brief [27:27] Clear Bit 11 (w) */
    __O  Ifx_UReg_32Bit PCL12:1;           /**< \brief [28:28] Clear Bit 12 (w) */
    __O  Ifx_UReg_32Bit PCL13:1;           /**< \brief [29:29] Clear Bit 13 (w) */
    __O  Ifx_UReg_32Bit PCL14:1;           /**< \brief [30:30] Clear Bit 14 (w) */
    __O  Ifx_UReg_32Bit PCL15:1;           /**< \brief [31:31] Clear Bit 15 (w) */
} Ifx_P_OMR_Bits;

/** \brief Port Output Modification Set Register */
typedef struct _Ifx_P_OMSR_Bits
{
    __O  Ifx_UReg_32Bit PS0:1;             /**< \brief [0:0] Set Bit 0 (w) */
    __O  Ifx_UReg_32Bit PS1:1;             /**< \brief [1:1] Set Bit 1 (w) */
    __O  Ifx_UReg_32Bit PS2:1;             /**< \brief [2:2] Set Bit 2 (w) */
    __O  Ifx_UReg_32Bit PS3:1;             /**< \brief [3:3] Set Bit 3 (w) */
    __O  Ifx_UReg_32Bit PS4:1;             /**< \brief [4:4] Set Bit 4 (w) */
    __O  Ifx_UReg_32Bit PS5:1;             /**< \brief [5:5] Set Bit 5 (w) */
    __O  Ifx_UReg_32Bit PS6:1;             /**< \brief [6:6] Set Bit 6 (w) */
    __O  Ifx_UReg_32Bit PS7:1;             /**< \brief [7:7] Set Bit 7 (w) */
    __O  Ifx_UReg_32Bit PS8:1;             /**< \brief [8:8] Set Bit 8 (w) */
    __O  Ifx_UReg_32Bit PS9:1;             /**< \brief [9:9] Set Bit 9 (w) */
    __O  Ifx_UReg_32Bit PS10:1;            /**< \brief [10:10] Set Bit 10 (w) */
    __O  Ifx_UReg_32Bit PS11:1;            /**< \brief [11:11] Set Bit 11 (w) */
    __O  Ifx_UReg_32Bit PS12:1;            /**< \brief [12:12] Set Bit 12 (w) */
    __O  Ifx_UReg_32Bit PS13:1;            /**< \brief [13:13] Set Bit 13 (w) */
    __O  Ifx_UReg_32Bit PS14:1;            /**< \brief [14:14] Set Bit 14 (w) */
    __O  Ifx_UReg_32Bit PS15:1;            /**< \brief [15:15] Set Bit 15 (w) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_OMSR_Bits;

/** \brief Port Output Register */
typedef struct _Ifx_P_OUT_Bits
{
    __IO Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Input Bit 0 (rwh) */
    __IO Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Input Bit 1 (rwh) */
    __IO Ifx_UReg_32Bit P2:1;              /**< \brief [2:2] Input Bit 2 (rwh) */
    __IO Ifx_UReg_32Bit P3:1;              /**< \brief [3:3] Input Bit 3 (rwh) */
    __IO Ifx_UReg_32Bit P4:1;              /**< \brief [4:4] Input Bit 4 (rwh) */
    __IO Ifx_UReg_32Bit P5:1;              /**< \brief [5:5] Input Bit 5 (rwh) */
    __IO Ifx_UReg_32Bit P6:1;              /**< \brief [6:6] Input Bit 6 (rwh) */
    __IO Ifx_UReg_32Bit P7:1;              /**< \brief [7:7] Input Bit 7 (rwh) */
    __IO Ifx_UReg_32Bit P8:1;              /**< \brief [8:8] Input Bit 8 (rwh) */
    __IO Ifx_UReg_32Bit P9:1;              /**< \brief [9:9] Input Bit 9 (rwh) */
    __IO Ifx_UReg_32Bit P10:1;             /**< \brief [10:10] Input Bit 10 (rwh) */
    __IO Ifx_UReg_32Bit P11:1;             /**< \brief [11:11] Input Bit 11 (rwh) */
    __IO Ifx_UReg_32Bit P12:1;             /**< \brief [12:12] Input Bit 12 (rwh) */
    __IO Ifx_UReg_32Bit P13:1;             /**< \brief [13:13] Input Bit 13 (rwh) */
    __IO Ifx_UReg_32Bit P14:1;             /**< \brief [14:14] Input Bit 14 (rwh) */
    __IO Ifx_UReg_32Bit P15:1;             /**< \brief [15:15] Input Bit 15 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_OUT_Bits;

/** \brief Port Pad Access Control Register for pad0 */
typedef struct _Ifx_P_PADCFG_ACCEN_Bits
{
    __IO Ifx_UReg_32Bit GRP:3;             /**< \brief [2:0] Access Protection Group selection (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_P_PADCFG_ACCEN_Bits;

/** \brief Port Pad configuration Control Register for pad0 */
typedef struct _Ifx_P_PADCFG_DRVCFG_Bits
{
    __IO Ifx_UReg_32Bit DIR:1;             /**< \brief [0:0] Pad Signal direction (rwh) */
    __IO Ifx_UReg_32Bit OD:1;              /**< \brief [1:1] Output Buffer configuration (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit MODE:4;            /**< \brief [7:4] Input configuration or Alternative Output signal selection (rwh) */
    __IO Ifx_UReg_32Bit PD:3;              /**< \brief [10:8] Pad drive mode (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit PL:3;              /**< \brief [14:12] Pad level selection (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit MODEX:2;           /**< \brief [17:16] Configuration of output driver for XSPI pad (rwh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_P_PADCFG_DRVCFG_Bits;

/** \brief Port GPIO Control Register for pin 0 */
typedef struct _Ifx_P_PADCFG_GPIO_Bits
{
    __I  Ifx_UReg_32Bit OUT:1;             /**< \brief [0:0] Output value (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __O  Ifx_UReg_32Bit SET:1;             /**< \brief [2:2] Set (w) */
    __O  Ifx_UReg_32Bit CLR:1;             /**< \brief [3:3] Clear (w) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __I  Ifx_UReg_32Bit IN:1;              /**< \brief [8:8] Read back Pin value (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_P_PADCFG_GPIO_Bits;

/** \brief Port Pad Safety and Security Control Register for pad0 */
typedef struct _Ifx_P_PADCFG_SAFSEC_Bits
{
    __IO Ifx_UReg_32Bit ESR_EN:1;          /**< \brief [0:0] Emergency Request Action Enable (rwh) */
    __IO Ifx_UReg_32Bit ESR_PPL:1;         /**< \brief [1:1] Emergency status Push-Pull level (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ESR_PD:2;          /**< \brief [5:4] Emergency status Pad configuration (rwh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_P_PADCFG_SAFSEC_Bits;

/** \brief Pad Test Register */
typedef struct _Ifx_P_PADTST_PADTST_Bits
{
    __IO Ifx_UReg_32Bit TSTCOMPEN:1;       /**< \brief [0:0] Pad Test Comparator enable (rwh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit TSTCOMPSTS:1;      /**< \brief [8:8] Pad Test Comparator Status (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_P_PADTST_PADTST_Bits;

/** \brief Selection Register for Module x Port Control */
typedef struct _Ifx_P_PCSRSEL_Bits
{
    __IO Ifx_UReg_32Bit PCSR0:1;           /**< \brief [0:0] Pad control selection 0 (rwh) */
    __IO Ifx_UReg_32Bit PCSR1:1;           /**< \brief [1:1] Pad control selection 1 (rwh) */
    __IO Ifx_UReg_32Bit PCSR2:1;           /**< \brief [2:2] Pad control selection 2 (rwh) */
    __IO Ifx_UReg_32Bit PCSR3:1;           /**< \brief [3:3] Pad control selection 3 (rwh) */
    __IO Ifx_UReg_32Bit PCSR4:1;           /**< \brief [4:4] Pad control selection 4 (rwh) */
    __IO Ifx_UReg_32Bit PCSR5:1;           /**< \brief [5:5] Pad control selection 5 (rwh) */
    __IO Ifx_UReg_32Bit PCSR6:1;           /**< \brief [6:6] Pad control selection 6 (rwh) */
    __IO Ifx_UReg_32Bit PCSR7:1;           /**< \brief [7:7] Pad control selection 7 (rwh) */
    __IO Ifx_UReg_32Bit PCSR8:1;           /**< \brief [8:8] Pad control selection 8 (rwh) */
    __IO Ifx_UReg_32Bit PCSR9:1;           /**< \brief [9:9] Pad control selection 9 (rwh) */
    __IO Ifx_UReg_32Bit PCSR10:1;          /**< \brief [10:10] Pad control selection 10 (rwh) */
    __IO Ifx_UReg_32Bit PCSR11:1;          /**< \brief [11:11] Pad control selection 11 (rwh) */
    __IO Ifx_UReg_32Bit PCSR12:1;          /**< \brief [12:12] Pad control selection 12 (rwh) */
    __IO Ifx_UReg_32Bit PCSR13:1;          /**< \brief [13:13] Pad control selection 13 (rwh) */
    __IO Ifx_UReg_32Bit PCSR14:1;          /**< \brief [14:14] Pad control selection 14 (rwh) */
    __IO Ifx_UReg_32Bit PCSR15:1;          /**< \brief [15:15] Pad control selection 15 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_PCSRSEL_Bits;

/** \brief Port n Pin Function Decision Control Register */
typedef struct _Ifx_P_PDISC_Bits
{
    __IO Ifx_UReg_32Bit PDIS0:1;           /**< \brief [0:0] Pin Function Decision Control for Pin 0 (rwh) */
    __IO Ifx_UReg_32Bit PDIS1:1;           /**< \brief [1:1] Pin Function Decision Control for Pin 1 (rwh) */
    __IO Ifx_UReg_32Bit PDIS2:1;           /**< \brief [2:2] Pin Function Decision Control for Pin 2 (rwh) */
    __IO Ifx_UReg_32Bit PDIS3:1;           /**< \brief [3:3] Pin Function Decision Control for Pin 3 (rwh) */
    __IO Ifx_UReg_32Bit PDIS4:1;           /**< \brief [4:4] Pin Function Decision Control for Pin 4 (rwh) */
    __IO Ifx_UReg_32Bit PDIS5:1;           /**< \brief [5:5] Pin Function Decision Control for Pin 5 (rwh) */
    __IO Ifx_UReg_32Bit PDIS6:1;           /**< \brief [6:6] Pin Function Decision Control for Pin 6 (rwh) */
    __IO Ifx_UReg_32Bit PDIS7:1;           /**< \brief [7:7] Pin Function Decision Control for Pin 7 (rwh) */
    __IO Ifx_UReg_32Bit PDIS8:1;           /**< \brief [8:8] Pin Function Decision Control for Pin 8 (rwh) */
    __IO Ifx_UReg_32Bit PDIS9:1;           /**< \brief [9:9] Pin Function Decision Control for Pin 9 (rwh) */
    __IO Ifx_UReg_32Bit PDIS10:1;          /**< \brief [10:10] Pin Function Decision Control for Pin 10 (rwh) */
    __IO Ifx_UReg_32Bit PDIS11:1;          /**< \brief [11:11] Pin Function Decision Control for Pin 11 (rwh) */
    __IO Ifx_UReg_32Bit PDIS12:1;          /**< \brief [12:12] Pin Function Decision Control for Pin 12 (rwh) */
    __IO Ifx_UReg_32Bit PDIS13:1;          /**< \brief [13:13] Pin Function Decision Control for Pin 13 (rwh) */
    __IO Ifx_UReg_32Bit PDIS14:1;          /**< \brief [14:14] Pin Function Decision Control for Pin 14 (rwh) */
    __IO Ifx_UReg_32Bit PDIS15:1;          /**< \brief [15:15] Pin Function Decision Control for Pin 15 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_PDISC_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_P_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_P_PROT_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_P_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for global module reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for global module reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for global module reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for global module reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_P_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_P_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel reset status clear - STATCLR (w) */
} Ifx_P_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_P_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_P_RST_STAT_Bits;

/** \brief Port Wake Enable Register */
typedef struct _Ifx_P_WKEN_Bits
{
    __IO Ifx_UReg_32Bit WKEN0:1;           /**< \brief [0:0] Wake Enable Bit 0 (rwh) */
    __IO Ifx_UReg_32Bit WKEN1:1;           /**< \brief [1:1] Wake Enable Bit 1 (rwh) */
    __IO Ifx_UReg_32Bit WKEN2:1;           /**< \brief [2:2] Wake Enable Bit 2 (rwh) */
    __IO Ifx_UReg_32Bit WKEN3:1;           /**< \brief [3:3] Wake Enable Bit 3 (rwh) */
    __IO Ifx_UReg_32Bit WKEN4:1;           /**< \brief [4:4] Wake Enable Bit 4 (rwh) */
    __IO Ifx_UReg_32Bit WKEN5:1;           /**< \brief [5:5] Wake Enable Bit 5 (rwh) */
    __IO Ifx_UReg_32Bit WKEN6:1;           /**< \brief [6:6] Wake Enable Bit 6 (rwh) */
    __IO Ifx_UReg_32Bit WKEN7:1;           /**< \brief [7:7] Wake Enable Bit 7 (rwh) */
    __IO Ifx_UReg_32Bit WKEN8:1;           /**< \brief [8:8] Wake Enable Bit 8 (rwh) */
    __IO Ifx_UReg_32Bit WKEN9:1;           /**< \brief [9:9] Wake Enable Bit 9 (rwh) */
    __IO Ifx_UReg_32Bit WKEN10:1;          /**< \brief [10:10] Wake Enable Bit 10 (rwh) */
    __IO Ifx_UReg_32Bit WKEN11:1;          /**< \brief [11:11] Wake Enable Bit 11 (rwh) */
    __IO Ifx_UReg_32Bit WKEN12:1;          /**< \brief [12:12] Wake Enable Bit 12 (rwh) */
    __IO Ifx_UReg_32Bit WKEN13:1;          /**< \brief [13:13] Wake Enable Bit 13 (rwh) */
    __IO Ifx_UReg_32Bit WKEN14:1;          /**< \brief [14:14] Wake Enable Bit 14 (rwh) */
    __IO Ifx_UReg_32Bit WKEN15:1;          /**< \brief [15:15] Wake Enable Bit 15 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_WKEN_Bits;

/** \brief Port Wake Enable Status Register */
typedef struct _Ifx_P_WKENSTS_Bits
{
    __I  Ifx_UReg_32Bit WKENS0:1;          /**< \brief [0:0] Wake Enable Status Bit 0 (rh) */
    __I  Ifx_UReg_32Bit WKENS1:1;          /**< \brief [1:1] Wake Enable Status Bit 1 (rh) */
    __I  Ifx_UReg_32Bit WKENS2:1;          /**< \brief [2:2] Wake Enable Status Bit 2 (rh) */
    __I  Ifx_UReg_32Bit WKENS3:1;          /**< \brief [3:3] Wake Enable Status Bit 3 (rh) */
    __I  Ifx_UReg_32Bit WKENS4:1;          /**< \brief [4:4] Wake Enable Status Bit 4 (rh) */
    __I  Ifx_UReg_32Bit WKENS5:1;          /**< \brief [5:5] Wake Enable Status Bit 5 (rh) */
    __I  Ifx_UReg_32Bit WKENS6:1;          /**< \brief [6:6] Wake Enable Status Bit 6 (rh) */
    __I  Ifx_UReg_32Bit WKENS7:1;          /**< \brief [7:7] Wake Enable Status Bit 7 (rh) */
    __I  Ifx_UReg_32Bit WKENS8:1;          /**< \brief [8:8] Wake Enable Status Bit 8 (rh) */
    __I  Ifx_UReg_32Bit WKENS9:1;          /**< \brief [9:9] Wake Enable Status Bit 9 (rh) */
    __I  Ifx_UReg_32Bit WKENS10:1;         /**< \brief [10:10] Wake Enable Status Bit 10 (rh) */
    __I  Ifx_UReg_32Bit WKENS11:1;         /**< \brief [11:11] Wake Enable Status Bit 11 (rh) */
    __I  Ifx_UReg_32Bit WKENS12:1;         /**< \brief [12:12] Wake Enable Status Bit 12 (rh) */
    __I  Ifx_UReg_32Bit WKENS13:1;         /**< \brief [13:13] Wake Enable Status Bit 13 (rh) */
    __I  Ifx_UReg_32Bit WKENS14:1;         /**< \brief [14:14] Wake Enable Status Bit 14 (rh) */
    __I  Ifx_UReg_32Bit WKENS15:1;         /**< \brief [15:15] Wake Enable Status Bit 15 (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_WKENSTS_Bits;

/** \brief Port Wake Status Clear Register */
typedef struct _Ifx_P_WKENSTSCLR_Bits
{
    __O  Ifx_UReg_32Bit WKENSC0:1;         /**< \brief [0:0] Wake Enable Status Clear Bit 0 (w) */
    __O  Ifx_UReg_32Bit WKENSC1:1;         /**< \brief [1:1] Wake Enable Status Clear Bit 1 (w) */
    __O  Ifx_UReg_32Bit WKENSC2:1;         /**< \brief [2:2] Wake Enable Status Clear Bit 2 (w) */
    __O  Ifx_UReg_32Bit WKENSC3:1;         /**< \brief [3:3] Wake Enable Status Clear Bit 3 (w) */
    __O  Ifx_UReg_32Bit WKENSC4:1;         /**< \brief [4:4] Wake Enable Status Clear Bit 4 (w) */
    __O  Ifx_UReg_32Bit WKENSC5:1;         /**< \brief [5:5] Wake Enable Status Clear Bit 5 (w) */
    __O  Ifx_UReg_32Bit WKENSC6:1;         /**< \brief [6:6] Wake Enable Status Clear Bit 6 (w) */
    __O  Ifx_UReg_32Bit WKENSC7:1;         /**< \brief [7:7] Wake Enable Status Clear Bit 7 (w) */
    __O  Ifx_UReg_32Bit WKENSC8:1;         /**< \brief [8:8] Wake Enable Status Clear Bit 8 (w) */
    __O  Ifx_UReg_32Bit WKENSC9:1;         /**< \brief [9:9] Wake Enable Status Clear Bit 9 (w) */
    __O  Ifx_UReg_32Bit WKENSC10:1;        /**< \brief [10:10] Wake Enable Status Clear Bit 10 (w) */
    __O  Ifx_UReg_32Bit WKENSC11:1;        /**< \brief [11:11] Wake Enable Status Clear Bit 11 (w) */
    __O  Ifx_UReg_32Bit WKENSC12:1;        /**< \brief [12:12] Wake Enable Status Clear Bit 12 (w) */
    __O  Ifx_UReg_32Bit WKENSC13:1;        /**< \brief [13:13] Wake Enable Status Clear Bit 13 (w) */
    __O  Ifx_UReg_32Bit WKENSC14:1;        /**< \brief [14:14] Wake Enable Status Clear Bit 14 (w) */
    __O  Ifx_UReg_32Bit WKENSC15:1;        /**< \brief [15:15] Wake Enable Status Clear Bit 15 (w) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_WKENSTSCLR_Bits;

/** \brief Port Wake Status Register */
typedef struct _Ifx_P_WKSTS_Bits
{
    __I  Ifx_UReg_32Bit WKSTS0:1;          /**< \brief [0:0] Wake Status Bit 0 (rh) */
    __I  Ifx_UReg_32Bit WKSTS1:1;          /**< \brief [1:1] Wake Status Bit 1 (rh) */
    __I  Ifx_UReg_32Bit WKSTS2:1;          /**< \brief [2:2] Wake Status Bit 2 (rh) */
    __I  Ifx_UReg_32Bit WKSTS3:1;          /**< \brief [3:3] Wake Status Bit 3 (rh) */
    __I  Ifx_UReg_32Bit WKSTS4:1;          /**< \brief [4:4] Wake Status Bit 4 (rh) */
    __I  Ifx_UReg_32Bit WKSTS5:1;          /**< \brief [5:5] Wake Status Bit 5 (rh) */
    __I  Ifx_UReg_32Bit WKSTS6:1;          /**< \brief [6:6] Wake Status Bit 6 (rh) */
    __I  Ifx_UReg_32Bit WKSTS7:1;          /**< \brief [7:7] Wake Status Bit 7 (rh) */
    __I  Ifx_UReg_32Bit WKSTS8:1;          /**< \brief [8:8] Wake Status Bit 8 (rh) */
    __I  Ifx_UReg_32Bit WKSTS9:1;          /**< \brief [9:9] Wake Status Bit 9 (rh) */
    __I  Ifx_UReg_32Bit WKSTS10:1;         /**< \brief [10:10] Wake Status Bit 10 (rh) */
    __I  Ifx_UReg_32Bit WKSTS11:1;         /**< \brief [11:11] Wake Status Bit 11 (rh) */
    __I  Ifx_UReg_32Bit WKSTS12:1;         /**< \brief [12:12] Wake Status Bit 12 (rh) */
    __I  Ifx_UReg_32Bit WKSTS13:1;         /**< \brief [13:13] Wake Status Bit 13 (rh) */
    __I  Ifx_UReg_32Bit WKSTS14:1;         /**< \brief [14:14] Wake Status Bit 14 (rh) */
    __I  Ifx_UReg_32Bit WKSTS15:1;         /**< \brief [15:15] Wake Status Bit 15 (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_P_WKSTS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_p_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN_PRS_Bits B;                /**< \brief Bitfield access */
} Ifx_P_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN_RDA_Bits B;                /**< \brief Bitfield access */
} Ifx_P_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN_RDB_FPI_Bits B;            /**< \brief Bitfield access */
} Ifx_P_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN_VM_Bits B;                 /**< \brief Bitfield access */
} Ifx_P_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN_WRA_Bits B;                /**< \brief Bitfield access */
} Ifx_P_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ACCEN_WRB_FPI_Bits B;            /**< \brief Bitfield access */
} Ifx_P_ACCEN_WRB_FPI;

/** \brief Pad Bandgap Trim Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_BGTRIM_Bits B;                   /**< \brief Bitfield access */
} Ifx_P_BGTRIM;

/** \brief Port HWSEL status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_HWSELSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_P_HWSELSTAT;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_ID_Bits B;                       /**< \brief Bitfield access */
} Ifx_P_ID;

/** \brief Port Input Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_IN_Bits B;                       /**< \brief Bitfield access */
} Ifx_P_IN;

/** \brief Port n LVDS Pad Control Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_LPCR_LPCR_Bits B;                /**< \brief Bitfield access */
} Ifx_P_LPCR_LPCR;

/** \brief Port n LVDS Pad Status Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_LPCR_LPSR_Bits B;                /**< \brief Bitfield access */
} Ifx_P_LPCR_LPSR;

/** \brief Port Output Modification Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMCR_Bits B;                     /**< \brief Bitfield access */
} Ifx_P_OMCR;

/** \brief Port n Output Modification Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMR_Bits B;                      /**< \brief Bitfield access */
} Ifx_P_OMR;

/** \brief Port Output Modification Set Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OMSR_Bits B;                     /**< \brief Bitfield access */
} Ifx_P_OMSR;

/** \brief Port Output Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_OUT_Bits B;                      /**< \brief Bitfield access */
} Ifx_P_OUT;

/** \brief Port Pad Access Control Register for pad0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PADCFG_ACCEN_Bits B;             /**< \brief Bitfield access */
} Ifx_P_PADCFG_ACCEN;

/** \brief Port Pad configuration Control Register for pad0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PADCFG_DRVCFG_Bits B;            /**< \brief Bitfield access */
} Ifx_P_PADCFG_DRVCFG;

/** \brief Port GPIO Control Register for pin 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PADCFG_GPIO_Bits B;              /**< \brief Bitfield access */
} Ifx_P_PADCFG_GPIO;

/** \brief Port Pad Safety and Security Control Register for pad0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PADCFG_SAFSEC_Bits B;            /**< \brief Bitfield access */
} Ifx_P_PADCFG_SAFSEC;

/** \brief Pad Test Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PADTST_PADTST_Bits B;            /**< \brief Bitfield access */
} Ifx_P_PADTST_PADTST;

/** \brief Selection Register for Module x Port Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PCSRSEL_Bits B;                  /**< \brief Bitfield access */
} Ifx_P_PCSRSEL;

/** \brief Port n Pin Function Decision Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PDISC_Bits B;                    /**< \brief Bitfield access */
} Ifx_P_PDISC;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_PROT_Bits B;                     /**< \brief Bitfield access */
} Ifx_P_PROT;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_RST_CTRLA_Bits B;                /**< \brief Bitfield access */
} Ifx_P_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_RST_CTRLB_Bits B;                /**< \brief Bitfield access */
} Ifx_P_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_RST_STAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_P_RST_STAT;

/** \brief Port Wake Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_WKEN_Bits B;                     /**< \brief Bitfield access */
} Ifx_P_WKEN;

/** \brief Port Wake Enable Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_WKENSTS_Bits B;                  /**< \brief Bitfield access */
} Ifx_P_WKENSTS;

/** \brief Port Wake Status Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_WKENSTSCLR_Bits B;               /**< \brief Bitfield access */
} Ifx_P_WKENSTSCLR;

/** \brief Port Wake Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_P_WKSTS_Bits B;                    /**< \brief Bitfield access */
} Ifx_P_WKSTS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_P_RST
{
       __IO Ifx_P_RST_CTRLA                     CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_P_RST_CTRLB                     CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_P_RST_STAT                      STAT;                   /**< \brief 8, Reset status register*/
} Ifx_P_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_LPCR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief LPCR object */
typedef volatile struct _Ifx_P_LPCR
{
       __I  Ifx_P_LPCR_LPSR                     LPSR;                   /**< \brief 0, Port n LVDS Pad Status Register 0*/
       __IO Ifx_P_LPCR_LPCR                     LPCR;                   /**< \brief 4, Port n LVDS Pad Control Register 0*/
} Ifx_P_LPCR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_PADTST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PADTST object */
typedef volatile struct _Ifx_P_PADTST
{
       __IO Ifx_P_PADTST_PADTST                 PADTST;                 /**< \brief 0, Pad Test Register*/
} Ifx_P_PADTST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_ACCGRP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCGRP object */
typedef volatile struct _Ifx_P_ACCGRP
{
       __IO Ifx_P_ACCEN_WRA                     WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_P_ACCEN_WRB_FPI                 WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_P_ACCEN_RDA                     RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_P_ACCEN_RDB_FPI                 RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_P_ACCEN_VM                      VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_P_ACCEN_PRS                     PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
       __IO Ifx_P_PROT                          PROTE;                  /**< \brief 1C, PROT Register Endinit*/
} Ifx_P_ACCGRP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_P_PADCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PADCFG object */
typedef volatile struct _Ifx_P_PADCFG
{
       __IO Ifx_P_PADCFG_GPIO                   GPIO;                   /**< \brief 0, Port GPIO Control Register for pin 0*/
       __IO Ifx_P_PADCFG_DRVCFG                 DRVCFG;                 /**< \brief 4, Port Pad configuration Control Register for pad0*/
       __IO Ifx_P_PADCFG_ACCEN                  ACCEN;                  /**< \brief 8, Port Pad Access Control Register for pad0*/
       __IO Ifx_P_PADCFG_SAFSEC                 SAFSEC;                 /**< \brief C, Port Pad Safety and Security Control Register for pad0*/
} Ifx_P_PADCFG;

/******************************************************************************/
/** \addtogroup IfxSfr_P_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief P object */
typedef volatile struct _Ifx_P
{
       __I  Ifx_P_ID                            ID;                     /**< \brief 0, Module Identification Register*/
       __IO Ifx_P_RST                           RST;                    /**< \brief 4, Reset status register*/
       __IO Ifx_P_WKEN                          WKEN;                   /**< \brief 10, Port Wake Enable Register*/
       __I  Ifx_P_WKSTS                         WKSTS;                  /**< \brief 14, Port Wake Status Register*/
       __I  Ifx_P_WKENSTS                       WKENSTS;                /**< \brief 18, Port Wake Enable Status Register*/
       __O  Ifx_P_WKENSTSCLR                    WKENSTSCLR;             /**< \brief 1C, Port Wake Status Clear Register*/
       __IO Ifx_P_OUT                           OUT;                    /**< \brief 20, Port Output Register*/
       __I  Ifx_P_IN                            IN;                     /**< \brief 24, Port Input Register*/
       __I  Ifx_P_HWSELSTAT                     HWSELSTAT;              /**< \brief 28, Port HWSEL status Register*/
       __IO Ifx_P_PDISC                         PDISC;                  /**< \brief 2C, Port n Pin Function Decision Control Register*/
       __IO Ifx_P_PROT                          PROTSE;                 /**< \brief 30, PROT Register Safe Endinit (SE)*/
       __IO Ifx_P_PCSRSEL                       PCSRSEL;                /**< \brief 34, Selection Register for Module x Port Control*/
       __IO Ifx_P_BGTRIM                        BGTRIM;                 /**< \brief 38, Pad Bandgap Trim Register*/
       __O  Ifx_P_OMR                           OMR;                    /**< \brief 3C, Port n Output Modification Register*/
       __O  Ifx_P_OMCR                          OMCR;                   /**< \brief 40, Port Output Modification Clear Register*/
       __O  Ifx_P_OMSR                          OMSR;                   /**< \brief 44, Port Output Modification Set Register*/
       __IO Ifx_P_LPCR                          LPCR[8];                /**< \brief 48, Port n LVDS Pad Control Register 0*/
       __IO Ifx_P_PADTST                        PADTST[1];              /**< \brief 88, Pad Test Register*/
       __I  Ifx_UReg_8Bit                       reserved_8C[4];         /**< \brief 8C, \internal Reserved */
       __IO Ifx_P_ACCGRP                        ACCGRP[8];              /**< \brief 90, PROT Register Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_190[368];      /**< \brief 190, \internal Reserved */
       __IO Ifx_P_PADCFG                        PADCFG[16];             /**< \brief 300, Grouping PAD registers together*/
} Ifx_P;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPORT_REGDEF_H */
