/**
 * \file IfxDre_Dre.h
 * \brief DRE DRE details
 * \ingroup IfxLld_Dre
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Dre_Dre_Usage How to use the DRE Interface driver?
 * \ingroup IfxLld_Dre
 *
 * The DRE interface driver provides a default configuration for various modes.
 *
 * In the following sections it will be described, how to integrate the driver into the application framework.
 *
 * \section IfxLld_Dre_Dre_Preparation Preparation
 * \subsection IfxLld_Dre_Dre_Include Include Files
 *
 * Include following header file into your C code:
 * \code
 *     #include <Dre/Dre/IfxDre_Dre.h>
 * \endcode
 *
 * \subsection IfxLld_Dre_Dre_Variables Variables
 *
 * Declare the DRE handles as global variables in your C code:
 * \code
 *
 *     // DRE handle
 *     IfxDre_Dre dre;
 *
 * \endcode
 *
 * \subsection IfxLld_Can_Can_Init Module Initialisation
 *
 * The module initialisation can be done as follows:
 * \code
 *     // create module configuration
 *     IfxDre_Dre_Config dreConfig;
 *     IfxDre_Dre_initModuleConfig(&dreConfig, &MODULE_DRE);
 *
 *     //Configuring CIBUF
 *     dreConfig.canInputBufferStartAddress = 0x100;
 *
 *     //Configuring COBUF
 *     dreConfig.canOutputBufferStartAddress = 0x180;
 *
 *     //Configuring Routing Tables.
 *     //Configure Routing Table 0
 *     dreConfig.rt0Config.address = 0x200;
 *     dreConfig.rt0Config.size = 1; //1 Filter and Routing Rule
 *
 *     //Configure other Routing tables similarly as required.
 *
 *     //Configure Stream Filters.
 *     //Configure Stream Filter 0.
 *     dreConfig.streamFilter0.enable = TRUE; //enables the corresponding filter
 *     dreConfig.streamFilter0.mode = IfxDre_StreamFilterMode_range;
 *     dreConfig.streamFilter0.routingTableIndex = 0; //Maps to Routing Table 0.
 *     dreConfig.streamFilter0.filter1LowerId = 0x0;
 *     dreConfig.streamFilter0.filter1HigherId = 0x10000000;
 *     dreConfig.streamFilter0.filter2LowerId = 0x0001FFFF;
 *     dreConfig.streamFilter0.filter2HigherId = 0x10000000;
 *
 *     //Configure other Stream Filters similarly as required.
 *
 *     //Optional: Configure Destination Memory as required.
 *     //Configuring 1st Destination Memory
 *     dreConfig.mem1Cfg.enable = TRUE;
 *     dreConfig.mem1Cfg.address = 0xF903A000; //Example. Check memory map of particular device.
 *     dreConfig.mem1Cfg.resourcePartitionIndex = 1;
 *     dreConfig.mem1Cfg.appendStatus = 1; //Status is appended to CAN Frame.
 *     dreConfig.mem1Cfg.appendTiming = 1; //Timing Header is appended to CAN Frame.
 *     dreConfig.mem1Cfg.interruptNodePointer = IfxDre_DMemInterruptLine_2; //Triggers Line 2.
 *     dreConfig.mem1Cfg.offsetAddress = 0x80;
 *     dreConfig.mem1Cfg.waterMarkLevel = 0; //Watermark is disabled.
 *     dreConfig.mem1Cfg.wrapAroundLevel = 10;
 *
 *     //Configure other Destination Memories similarly as required.
 *
 *
 *     //Configure Ethernet Output Buffers
 *     //Configuring EOBUF0
 *     dreConfig.ethernetOutputBuffer0.startAddress           = 0x500;
 *     dreConfig.ethernetOutputBuffer0.payloadLength          = 1484; //Max
 *     dreConfig.ethernetOutputBuffer0.destinationId          = IfxCan_DestinationId_Ethernet1;
 *     dreConfig.ethernetOutputBuffer0.headerEnable           = TRUE;
 *     dreConfig.ethernetOutputBuffer0.triggerMode            = IfxDre_TriggerMode_frameCount;
 *     dreConfig.ethernetOutputBuffer0.macDestinationAddress0 = 0x0000;
 *     dreConfig.ethernetOutputBuffer0.macDestinationAddress1 = 0x10000000;
 *     dreConfig.ethernetOutputBuffer0.macSourceAddress0      = 0x00000000;
 *     dreConfig.ethernetOutputBuffer0.macSourceAddress1      = 0x2000;
 *     dreConfig.ethernetOutputBuffer0.tpId                   = 0x8100; //Configure as 0x8100 for tagged ethernet frames
 *     dreConfig.ethernetOutputBuffer0.vlanTag                = 0xEFFF;
 *     dreConfig.ethernetOutputBuffer0.avtpEtherType          = 0x22F0; //Configure as 0x22F0 for AVTP frames
 *     dreConfig.ethernetOutputBuffer0.isStreamIdValid        = TRUE;
 *     dreConfig.ethernetOutputBuffer0.streamIdLower          = 0x00000000;
 *     dreConfig.ethernetOutputBuffer0.streamIdHigher         = 0x10000000;
 *     dreConfig.ethernetOutputBuffer0.bufferThreshold        = 0; //To use, set triggerMode to IfxDre_TriggerMode_bufferFillLevel.
 *     dreConfig.ethernetOutputBuffer0.triggerFillLevel       = 1; //To use, set triggerMode to IfxDre_TriggerMode_frameCount.
 *     dreConfig.ethernetOutputBuffer0.timer.timerPrescalar   = 10;
 *     dreConfig.ethernetOutputBuffer0.timer.timerReloadValue = 0x1000;
 *
 *     //Configure other Ethernet Output Buffers similarly as required.
 *     //2 buffers can have same Destination IDs (IfxCan_DestinationId_Ethernet1). BUF0 will be filled first and then BUF1 in this case.
 *
 *     //Configure Ethernet Input Buffers
 *     //Configuring EIBUF0
 *     dreConfig.ethernetInputBuffer0.bufferStartAddress = 0x700;
 *     dreConfig.ethernetInputBuffer0.ntscfStartAddress = 0x50;
 *     dreConfig.ethernetInputBuffer0.bufferSize = 1500; //Max size
 *
 *     //Configure other Ethernet Input Buffer similarly as required.
 *
 *
 *     // Initialize the module
 *     IfxDre_Dre_initModule(&dre, &dreConfig);
 * \endcode
 *
 *
 *
 * \subsection IfxLld_Dre_Dre_filter_and_routing Filter and Routing Configurations
 *
 * The filter and routing configuration for a particular Element in a Routing Table can be set as follows.
 *
 * \code
 *     // Configure the Destination Routing Rule and the acceptance filter element
 *     IfxDre_Dre_RoutingConfig config;
 *     //Either Multicast or Unicast to be configured.
 *     //Multicast routing configuration for 2 nodes
 *     config.routingType    = IfxDre_RoutingType_multicast;
 *     config.destinationId1 = IfxCan_DestinationId_Can1_Node0;
 *     config.destinationId2 = IfxCan_DestinationId_Can1_Node2;
 *     config.destinationId3 = IfxCan_DestinationId_none;
 *     config.destinationId4 = IfxCan_DestinationId_none;
 *     config.sourceId       = IfxCan_DestinationId_Can0_Node0;
 *
 *     //Unicast routing configuration
 *     config.routingType    = IfxDre_RoutingType_unicast;
 *     config.destinationId1 = IfxCan_DestinationId_Can1_Node1;
 *     config.sourceId       = IfxCan_DestinationId_Can0_Node0;
 *
 *     //Filter Configuration
 *     config.filterMode = IfxDre_FilterMode_dualId;
 *     config.canId1 = 0x050;
 *     config.canId2 = 0x051;
 *     config.xtdShiftLength = 0; //Applicable only for extended CAN frames.
 *
 *     uint8 tableIndex = 0; //Routing Table 0
 *     uint8 elementIndex = 0; //Element Index 0 (First element in the table)
 *
 *     IfxDre_Dre_setFilterAndRoutingElement(&dre, tableIndex, elementIndex, &config);
 *
 * \endcode
 *
 *
 * \subsection IfxLld_Dre_Dre_software_trigger Software Trigger for EOBUF
 * Call following API to set the Software Trigger to initiate Ethernet Frame when trigger mode is IfxDre_TriggerMode_software.
 *
 * \code
 *
 *     uint8 bufferIndex = 0; //Triggers Buffer 0
 *     IfxDre_Dre_setSoftwareTrigger(&dre, bufferIndex);
 *
 * \endcode
 *
 * \subsection IfxLld_Dre_Dre_Can_Address_Database_Config Configure the CAN Address Database Elements
 * Call following API required number of times to set the elements in Can Address Database.
 *
 *  \code
 *
 *     IfxDre_Dre_CADConfig cadElement;
 *     cadElement.creStartAddress = 0xF0301000; //Example Address
 *     cadElement.elementIndex = IfxDre_CAD_Index_0;
 *     IfxDre_Dre_setCanAddressDatabaseElement(&dre, &cadElement);
 *
 * \endcode
 *
 * \defgroup IfxLld_Dre_Dre DRE Interface Driver
 * \ingroup IfxLld_Dre
 * \defgroup IfxLld_Dre_Dre_Data_Structures Data Structures
 * \ingroup IfxLld_Dre_Dre
 * \defgroup IfxLld_Dre_Dre_Module_Initialize_Functions Module Initialize Functions
 * \ingroup IfxLld_Dre_Dre
 * \defgroup IfxLld_Dre_Dre_Trigger_Functions Transmission Trigger Functions
 * \ingroup IfxLld_Dre_Dre
 * \defgroup IfxLld_Dre_Dre_Filter_And_Routing_Functions Filter and Routing Configuration Functions
 * \ingroup IfxLld_Dre_Dre
 */

#ifndef IFXDRE_DRE_H
#define IFXDRE_DRE_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Dre/Std/IfxDre.h"

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Dre_Dre_Data_Structures
 * \{ */
/** \brief Module handle
 */
typedef struct
{
    Ifx_DRE *dre;       /**< \brief Specifies the pointer to the DRE registers */
} IfxDre_Dre;

/** \brief CAN Address Database Configuration
 */
typedef struct
{
    uint32           creStartAddress;       /**< \brief Absolute Start Address of the corresponding nodes's CRE RAM */
    IfxDre_CAD_Index elementIndex;          /**< \brief Can Node index in CAD */
} IfxDre_Dre_CADConfig;

/** \brief Configuration Structure of the Module
 */
typedef struct
{
    Ifx_DRE                       *dre;                         /**< \brief Specifies the pointer to the DRE registers */
    IfxDre_RoutingTableConfig      rt0Config;                   /**< \brief Configuration for Routing Table 0 */
    IfxDre_RoutingTableConfig      rt1Config;                   /**< \brief Configuration for Routing Table 1 */
    IfxDre_RoutingTableConfig      rt2Config;                   /**< \brief Configuration for Routing Table 2 */
    IfxDre_RoutingTableConfig      rt3Config;                   /**< \brief Configuration for Routing Table 3 */
    IfxDre_StreamIdConfig          streamFilter0;               /**< \brief Configuration for Stream ID Filter 0 */
    IfxDre_StreamIdConfig          streamFilter1;               /**< \brief Configuration for Stream ID Filter 1 */
    IfxDre_StreamIdConfig          streamFilter2;               /**< \brief Configuration for Stream ID Filter 2 */
    IfxDre_StreamIdConfig          streamFilter3;               /**< \brief Configuration for Stream ID Filter 3 */
    IfxDre_StreamIdConfig          streamFilter4;               /**< \brief Configuration for Stream ID Filter 4 */
    IfxDre_StreamIdConfig          streamFilter5;               /**< \brief Configuration for Stream ID Filter 5 */
    IfxDre_StreamIdConfig          streamFilter6;               /**< \brief Configuration for Stream ID Filter 6 */
    IfxDre_StreamIdConfig          streamFilter7;               /**< \brief Configuration for Stream ID Filter 7 */
    IfxDre_MemoryConfig            mem0Cfg;                     /**< \brief Configuration for Destination Memory 0, with DID of IfxCan_DestinationId_Memory1 */
    IfxDre_MemoryConfig            mem1Cfg;                     /**< \brief Configuration for Destination Memory 1, with DID of IfxCan_DestinationId_Memory2 */
    IfxDre_MemoryConfig            mem2Cfg;                     /**< \brief Configuration for Destination Memory 2, with DID of IfxCan_DestinationId_Memory3 */
    IfxDre_MemoryConfig            mem3Cfg;                     /**< \brief Configuration for Destination Memory 3, with DID of IfxCan_DestinationId_Memory4 */
    IfxDre_MemoryConfig            mem4Cfg;                     /**< \brief Configuration for Destination Memory 4, with DID of IfxCan_DestinationId_Memory5 */
    IfxDre_MemoryConfig            mem5Cfg;                     /**< \brief Configuration for Destination Memory 5, with DID of IfxCan_DestinationId_Memory6 */
    IfxDre_MemoryConfig            mem6Cfg;                     /**< \brief Configuration for Destination Memory 6, with DID of IfxCan_DestinationId_Memory7 */
    IfxDre_MemoryConfig            mem7Cfg;                     /**< \brief Configuration for Destination Memory 7, with DID of IfxCan_DestinationId_Memory8 */
    IfxDre_MemoryConfig            mem8Cfg;                     /**< \brief Configuration for Destination Memory 8, with DID of IfxCan_DestinationId_Memory9 */
    IfxDre_MemoryConfig            mem9Cfg;                     /**< \brief Configuration for Destination Memory 9, with DID of IfxCan_DestinationId_Memory10 */
    IfxDre_MemoryConfig            mem10Cfg;                    /**< \brief Configuration for Destination Memory 10, with DID of IfxCan_DestinationId_Memory11 */
    IfxDre_MemoryConfig            mem11Cfg;                    /**< \brief Configuration for Destination Memory 11, with DID of IfxCan_DestinationId_Memory12 */
    IfxDre_MemoryConfig            mem12Cfg;                    /**< \brief Configuration for Destination Memory 12, with DID of IfxCan_DestinationId_Memory13 */
    IfxDre_MemoryConfig            mem13Cfg;                    /**< \brief Configuration for Destination Memory 13, with DID of IfxCan_DestinationId_Memory14 */
    IfxDre_MemoryConfig            mem14Cfg;                    /**< \brief Configuration for Destination Memory 14, with DID of IfxCan_DestinationId_Memory15 */
    IfxDre_MemoryConfig            mem15Cfg;                    /**< \brief Configuration for Destination Memory 15, with DID of IfxCan_DestinationId_Memory16 */
    IfxDre_MemoryConfig            mem16Cfg;                    /**< \brief Configuration for Destination Memory 16, with DID of IfxCan_DestinationId_Memory17 */
    IfxDre_MemoryConfig            mem17Cfg;                    /**< \brief Configuration for Destination Memory 17, with DID of IfxCan_DestinationId_Memory18 */
    IfxDre_MemoryConfig            mem18Cfg;                    /**< \brief Configuration for Destination Memory 18, with DID of IfxCan_DestinationId_Memory19 */
    IfxDre_MemoryConfig            mem19Cfg;                    /**< \brief Configuration for Destination Memory 19, with DID of IfxCan_DestinationId_Memory20 */
    IfxDre_MemoryConfig            mem20Cfg;                    /**< \brief Configuration for Destination Memory 20, with DID of IfxCan_DestinationId_Memory21 */
    IfxDre_MemoryConfig            mem21Cfg;                    /**< \brief Configuration for Destination Memory 21, with DID of IfxCan_DestinationId_Memory22 */
    IfxDre_MemoryConfig            mem22Cfg;                    /**< \brief Configuration for Destination Memory 22, with DID of IfxCan_DestinationId_Memory23 */
    IfxDre_MemoryConfig            mem23Cfg;                    /**< \brief Configuration for Destination Memory 23, with DID of IfxCan_DestinationId_Memory24 */
    IfxDre_MemoryConfig            mem24Cfg;                    /**< \brief Configuration for Destination Memory 24, with DID of IfxCan_DestinationId_Memory25 */
    IfxDre_MemoryConfig            mem25Cfg;                    /**< \brief Configuration for Destination Memory 25, with DID of IfxCan_DestinationId_Memory26 */
    IfxDre_MemoryConfig            mem26Cfg;                    /**< \brief Configuration for Destination Memory 26, with DID of IfxCan_DestinationId_Memory27 */
    IfxDre_MemoryConfig            mem27Cfg;                    /**< \brief Configuration for Destination Memory 27, with DID of IfxCan_DestinationId_Memory28 */
    IfxDre_EthernetOutputBufConfig ethernetOutputBuffer0;       /**< \brief Configuration for EOBUF 0 */
    IfxDre_EthernetOutputBufConfig ethernetOutputBuffer1;       /**< \brief Configuration for EOBUF 1 */
    IfxDre_EthernetOutputBufConfig ethernetOutputBuffer2;       /**< \brief Configuration for EOBUF 2 */
    IfxDre_EthernetOutputBufConfig ethernetOutputBuffer3;       /**< \brief Configuration for EOBUF 3 */
    IfxDre_EthernetOutputBufConfig ethernetOutputBuffer4;       /**< \brief Configuration for EOBUF 4 */
    IfxDre_EthernetOutputBufConfig ethernetOutputBuffer5;       /**< \brief Configuration for EOBUF 5 */
    IfxDre_EthernetInputBufConfig  ethernetInputBuffer0;        /**< \brief Configuration for EIBUF 0 */
    IfxDre_EthernetInputBufConfig  ethernetInputBuffer1;        /**< \brief Configuration for EIBUF 1 */
    IfxDre_EthernetInputBufConfig  ethernetInputBuffer2;        /**< \brief Configuration for EIBUF 2 */
    IfxDre_EthernetInputBufConfig  ethernetInputBuffer3;        /**< \brief Configuration for EIBUF 3 */
    IfxDre_EthernetInputBufConfig  ethernetInputBuffer4;        /**< \brief Configuration for EIBUF 4 */
    IfxDre_EthernetInputBufConfig  ethernetInputBuffer5;        /**< \brief Configuration for EIBUF 5 */
    uint8                          numberOfEthRules;            /**< \brief 0:Disabled. 1-128: Number of ethernet forwarding rules in Eth Forwarding Table in RAM. Refer to FTCFG.NRULES */
    IfxDre_InterruptConfig         interruptCfg[16];            /**< \brief Configuration for 16 DRE Interrupt Nodes */
} IfxDre_Dre_Config;

/** \brief Destination Memory Parameter Configuration
 */
typedef struct
{
    IfxDre_DMemParamIndex elementIndex;               /**< \brief Index of Destination Memory Parameter Element */
    uint32                address;                    /**< \brief 64 bit aligned, 32 bit start address of Destination Memory Element */
    uint32                waterMarkLevelIndex;        /**< \brief Water mark level for DMEM[elementIndex]. Refer to DMEM_WM.WML for details */
    uint32                wrapAroundLevelIndex;       /**< \brief Wrap around level for DMEM[elementIndex]. Refer to DMEM_WA.WAL for details. */
} IfxDre_Dre_DMemParamConfig;

/** \brief Ethernet address database Configuration
 */
typedef struct
{
    IfxLeth_TxDmaChannel lethMac0TxChannelNumber;       /**< \brief LETH DMA Tx Channel Number assigned to LETH Mac0 */
    IfxLeth_RxDmaChannel lethMac0RxChannelNumber;       /**< \brief LETH DMA Rx Channel Number assigned to LETH Mac0 */
    IfxLeth_TxDmaChannel lethMac1TxChannelNumber;       /**< \brief LETH DMA Tx Channel Number assigned to LETH Mac1 */
    IfxLeth_RxDmaChannel lethMac1RxChannelNumber;       /**< \brief LETH DMA Rx Channel Number assigned to LETH Mac1 */
    IfxLeth_TxDmaChannel lethMac2TxChannelNumber;       /**< \brief LETH DMA Tx Channel Number assigned to LETH Mac2 */
    IfxLeth_RxDmaChannel lethMac2RxChannelNumber;       /**< \brief LETH DMA Rx Channel Number assigned to LETH Mac2 */
    IfxLeth_TxDmaChannel lethMac3TxChannelNumber;       /**< \brief LETH DMA Tx Channel Number assigned to LETH Mac3 */
    IfxLeth_RxDmaChannel lethMac3RxChannelNumber;       /**< \brief LETH DMA Rx Channel Number assigned to LETH Mac3 */
    IfxGeth_TxDmaChannel gethMac0TxChannelNumber;       /**< \brief GETH DMA Tx Channel Number assigned to GETH Mac0 */
    IfxGeth_RxDmaChannel gethMac0RxChannelNumber;       /**< \brief GETH DMA Rx Channel Number assigned to GETH Mac0 */
    IfxGeth_TxDmaChannel gethMac1TxChannelNumber;       /**< \brief GETH DMA Tx Channel Number assigned to GETH Mac1 */
    IfxGeth_RxDmaChannel gethMac1RxChannelNumber;       /**< \brief GETH DMA Rx Channel Number assigned to GETH Mac1 */
} IfxDre_Dre_EADConfig;

/** \brief Configuration for Eth Forwarding Element in Forwarding Table
 */
typedef struct
{
    uint32               forwardFilterId1;       /**< \brief Forward filter ID1 */
    uint32               forwardFilterId2;       /**< \brief Forward filter ID2 */
    IfxDre_EthFilterMode mode;                   /**< \brief Forwarding filter modes */
    uint8                castConfig : 6;         /**< \brief Unicast/Multicast Destination Selection. Bit encoded destination Tx descriptor list select. Refer to FT_FEj_FRULE.DSEL */
} IfxDre_Dre_FTConfig;

/** \brief Resource Partition Configurations. Refer to MODEr (r=0-7)
 */
typedef struct
{
    boolean         mode;                      /**< \brief Access mode. 0: User mode, 1: Supervisor mode */
    IfxApProt_VmId  vmId;                      /**< \brief Virtual Machine Id */
    boolean         vmEnable;                  /**< \brief Virtual Machine Enable. 0: Disabled, 1: Enabled */
    IfxApProt_PrsId protectionSet;             /**< \brief Protection Set Id */
    boolean         protectionSetEnable;       /**< \brief Protection Set Enable. 0: Disabled, 1: Enabled */
    boolean         tagOffset;                 /**< \brief Tag Offset for extended id */
} IfxDre_Dre_RPConfig;

/** \brief Destination and Filter Configuration
 */
typedef struct
{
    IfxCan_DestinationId destinationId1;       /**< \brief 1st Destination ID for Multicast Routing/ Destination ID for Unicast Routing, only CAN destinations to be used here. */
    IfxCan_DestinationId destinationId2;       /**< \brief 2nd Destination ID for Multicast Routing, only CAN destinations to be used here. */
    IfxCan_DestinationId destinationId3;       /**< \brief 3rd Destination ID for Multicast Routing, only CAN destinations to be used here. */
    IfxCan_DestinationId destinationId4;       /**< \brief 4th Destination ID for Multicast Routing, only CAN destinations to be used here. */
    IfxDre_FilterMode    filterMode;           /**< \brief DRE Filter Mode */
    uint16               canId1;               /**< \brief CAN Filter ID 1 */
    uint16               canId2;               /**< \brief CAN Filter ID 2 */
    uint8                xtdShiftLength;       /**< \brief Shift length for Extended messages */
    IfxDre_RoutingType   routingType;          /**< \brief Type of Routing Rule (Unicast/Multicast) */
} IfxDre_Dre_RoutingConfig;

/** \brief Rx Ethernet descriptor list control configuration
 */
typedef struct
{
    IfxDre_EthInterface  interface;                           /**< \brief Eth Interface */
    IfxDre_EthDmaChannel dmaChannel;                          /**< \brief DMA Channel assigned to MAC in respective ETH Interface for Rx */
    boolean              triggerType;                         /**< \brief DMA/IR Trigger Type. Refer to RETHDLi_CTRL.TRIG */
    boolean              interruptOnCompletion;               /**< \brief Interrupt on completion. Refer to RETHDLi_CTRL.IOC */
    boolean              fcsEnable;                           /**< \brief FCS Control. FALSE: the corresponding TDESCi_RD3.CPC bit-field is set to b0 (insertCrcAndPad), TRUE: TDESCi_RD3.CPC bit-field is set to b10 (crc insertion is disabled). Refer to RETHDLi_CTRL.FCS */
    uint8                descriptorPointer;                   /**< \brief Current descriptor pointer. By default, keep it to 0, valid values 0-3 */
    boolean              descriptorPointerConfigEnable;       /**< \brief Bypass configuring PTR (current descriptor pointer) using descriptorPointer. FALSE: PTR is not configured, TRUE: PTR is configured */
} IfxDre_Dre_RxEthConfig;

/** \brief Rx Ethernet descriptor list control configuration
 */
typedef struct
{
    IfxDre_EthDmaChannel         dmaChannel;                          /**< \brief DMA Channel assigned to MAC in respective ETH Interface for Tx */
    boolean                      triggerType;                         /**< \brief DMA/IR Trigger Type. Refer to TETHDLi_CTRL.TRIG */
    uint8                        slotNumber;                          /**< \brief Slot Number configuration. This bit is the static configuration for all Tx descriptors TDESi_RD3.SLOTNUM. */
    IfxGeth_SourceAddressControl sourceAddressInsertionControl;       /**< \brief Source Address Insertion Control. Values are equal for both GETH and LETH */
    boolean                      interruptOnCompletion;               /**< \brief Interrupt on completion. Refer to TETHDLi_CTRL.IOC */
    uint8                        descriptorPointer;                   /**< \brief Current descriptor pointer. By default, keep it to 0, valid values 0-3 */
    boolean                      descriptorPointerConfigEnable;       /**< \brief Bypass configuring PTR (current descriptor pointer) using descriptorPointer. FALSE: PTR is not configured, TRUE: PTR is configured */
} IfxDre_Dre_TxEthConfig;

/** \brief Can and Eth Watchdog Config
 */
typedef struct
{
    IfxDre_WatchDogConfig can;       /**< \brief Can Watchdog Config */
    IfxDre_WatchDogConfig eth;       /**< \brief Eth Watchdog Config */
} IfxDre_Dre_WdgConfig;

/** \} */

/** \addtogroup IfxLld_Dre_Dre_Module_Initialize_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Initialises the DRE Module
 * \param dre Specifies the module handle
 * \param config Configuration structure of the module
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_initModule(IfxDre_Dre *dre, IfxDre_Dre_Config *config);

/** \brief Fills the configuration structure of the DRE Module with default values
 * \param config Configuration structure to be filled with default values
 * \param dre Specifies the pointer to the DRE registers
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_initModuleConfig(IfxDre_Dre_Config *config, Ifx_DRE *dre);

/** \} */

/** \addtogroup IfxLld_Dre_Dre_Trigger_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Software Trigger to initiate Ethernet Frame.
 * \param dre Specifies the module handle
 * \param bufferIndex index of the Ethernet Output Buffer (0-1)
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setSoftwareTrigger(IfxDre_Dre *dre, uint8 bufferIndex);

/** \} */

/** \addtogroup IfxLld_Dre_Dre_Filter_And_Routing_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Sets the Filter and Routing Configurations for the given indexes.
 * \param dre Specifies the module handle
 * \param tableIndex index of the Routing Table (0-3)
 * \param elementIndex index of the element in the table (0-128)
 * \param config pointer to the filter and routing configuration
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setFilterAndRoutingElement(IfxDre_Dre *dre, uint8 tableIndex, uint8 elementIndex, IfxDre_Dre_RoutingConfig *config);

/** \brief Configures the Can Address Database Element for the given CAN Node in the DRE RAM.
 * To do: CE decision pending on static length. Currently only dynamic mode supported.
 * \param dre Specifies the module handle
 * \param config pointer to the CAD element configuration
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setCanAddressDatabaseElement(IfxDre_Dre *dre, IfxDre_Dre_CADConfig *config);

/** \brief Configures the DMEM Parameter Element for the given DMEM index in the DRE RAM.
 * \param dre Specifies the module handle
 * \param config pointer to the DMEM Parameter element configuration
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setDMemParameterElement(IfxDre_Dre *dre, IfxDre_Dre_DMemParamConfig *config);

/** \brief Configures the Ethernet Address Database in the DRE RAM.
 * \param dre Specifies the module handle
 * \param config pointer to the Ethernet DMA Channel configuration
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_initEthAddressDatabase(IfxDre_Dre *dre, IfxDre_Dre_EADConfig *config);

/** \brief Configures Resource Partition modes for given index.
 * \param dre Specifies the module handle
 * \param rpIndex index of the resource partition to be configured
 * \param config pointer to the Resource Partition Configurations
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setResourcePartition(IfxDre_Dre *dre, uint8 rpIndex, IfxDre_Dre_RPConfig *config);

/** \brief Assign Resource Partition index to given Can Interface
 * \param dre Specifies the module handle
 * \param rpIndex index of the resource partition to be configured
 * \param canInterfaceIndex index of the can interface
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_assignCanResourcePartition(IfxDre_Dre *dre, uint8 rpIndex, IfxDre_CanIndex canInterfaceIndex);

/** \brief Assign Resource Partition index to given Ethernet Interface
 * \param dre Specifies the module handle
 * \param rpIndex index of the resource partition to be configured
 * \param ethInterfaceIndex index of the eth interface
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_assignEthResourcePartition(IfxDre_Dre *dre, uint8 rpIndex, IfxDre_EthRPIndex ethInterfaceIndex);

/** \brief Configure Dre Watchdog for CAN and ETH
 * \param dre Specifies the module handle
 * \param config can and eth watchdog config
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setWatchdog(IfxDre_Dre *dre, IfxDre_Dre_WdgConfig *config);

/** \brief Initialise Ethernet Rx Descriptor List Control Configuration for a given index
 * \param dre Specifies the module handle
 * \param index of the RETHDL to be configured
 * \param config Rx Ethernet descriptor list configuration for the given index
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_initRxEthDescListControlConfig(IfxDre_Dre *dre, uint8 index, IfxDre_Dre_RxEthConfig *config);

/** \brief Initialise Ethernet Tx Descriptor List Control Configuration for a given index
 * \param dre Specifies the module handle
 * \param index of the TETHDL to be configured
 * \param config Tx Ethernet descriptor list configuration for the given index
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_initTxEthDescListControlConfig(IfxDre_Dre *dre, uint8 index, IfxDre_Dre_TxEthConfig *config);

/** \brief Configures the Ethernet Forwarding Element for the given index in the DRE RAM Forwarding Table.
 * \param dre Specifies the module handle
 * \param index index of the forwarding rule element to be configured, also take care to configure number of rules during initialization using numberOfEthRules (Refer to FTCFG.B.NRULES)
 * \param config pointer to the Ethernet Forwarding Element configuration
 * \return None
 */
IFX_EXTERN void IfxDre_Dre_setEthForwardingElement(IfxDre_Dre *dre, uint8 index, IfxDre_Dre_FTConfig *config);

/** \} */

#endif /* IFXDRE_DRE_H */
