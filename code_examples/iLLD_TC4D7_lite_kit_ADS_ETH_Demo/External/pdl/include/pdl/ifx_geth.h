/**********************************************************************************************************************
 * \file ifx_geth.h
 * \copyright Copyright (C) Infineon Technologies AG 2023
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef IFX_GETH_H
#define IFX_GETH_H

#include "ifx_macro.h"
#include "Ifx_Cfg.h"

#if defined(IFX_DEVICE_SERIES) && (IFX_DEVICE_SERIES != IFX_DEVICE_SERIES_TC45) && \
                                  (IFX_DEVICE_SERIES != IFX_DEVICE_SERIES_TC49N)

#include "Geth/Std/IfxGeth.h"
#include "IfxGeth_PinMap.h"

#ifdef __cplusplus
extern "C" {
#endif  /* __cplusplus */

#define GETH_TDES2_IOC      BIT(31)
#define GETH_TDES3_OWN      BIT(31)
#define GETH_TDES3_FD       BIT(29)
#define GETH_TDES3_LD       BIT(28)

#define GETH_RDES3_OWN      BIT(31)
#define GETH_RDES3_IOC      BIT(30)
#define GETH_RDES3_FD       BIT(29)
#define GETH_RDES3_LD       BIT(28)
#define GETH_RDES3_ES       BIT(15)
#define GETH_RDES3_PL       BITMASK(14, 0)

typedef struct
{
    IfxGeth_Mdc_Out *mdc;
    IfxGeth_Mdio_InOut *mdio;
} Ifx_GETH_MDIO_Pins;

typedef enum
{
    IfxGeth_Speed_2G5_GMII = 2,
    IfxGeth_Speed_1G_GMII = 3,
    IfxGeth_Speed_100M_MII = 4,
    IfxGeth_Speed_5G_XGMII = 5,
    IfxGeth_Speed_2G5_XGMII = 6,
    IfxGeth_Speed_10M_MII = 7,
} IfxGeth_Speed;

typedef enum
{
    IfxGeth_DmaStatus_TI = GENMASK(IFX_GETH_DMA_CH_STATUS_TI),
    IfxGeth_DmaStatus_TPS = GENMASK(IFX_GETH_DMA_CH_STATUS_TPS),
    IfxGeth_DmaStatus_TBU = GENMASK(IFX_GETH_DMA_CH_STATUS_TBU),
    IfxGeth_DmaStatus_RI = GENMASK(IFX_GETH_DMA_CH_STATUS_RI),
    IfxGeth_DmaStatus_RBU = GENMASK(IFX_GETH_DMA_CH_STATUS_RBU),
    IfxGeth_DmaStatus_RPS = GENMASK(IFX_GETH_DMA_CH_STATUS_RPS),
    IfxGeth_DmaStatus_DDE = GENMASK(IFX_GETH_DMA_CH_STATUS_DDE),
    IfxGeth_DmaStatus_FBE = GENMASK(IFX_GETH_DMA_CH_STATUS_FBE),
    IfxGeth_DmaStatus_CDE = GENMASK(IFX_GETH_DMA_CH_STATUS_CDE),
    IfxGeth_DmaStatus_AIS = GENMASK(IFX_GETH_DMA_CH_STATUS_AIS),
    IfxGeth_DmaStatus_NIS = GENMASK(IFX_GETH_DMA_CH_STATUS_NIS),
    IfxGeth_DmaStatus_TEB = GENMASK(IFX_GETH_DMA_CH_STATUS_TEB),
    IfxGeth_DmaStatus_REB = GENMASK(IFX_GETH_DMA_CH_STATUS_REB)
} IfxGeth_DmaStatus;

sint32 IfxGeth_Mdio_init(Ifx_GETH *gethSFR, IfxGeth_PortIndex port, const Ifx_GETH_MDIO_Pins *pins, uint32 csr_clk_rate);
void IfxGeth_Mdio_write(Ifx_GETH *gethSFR, IfxGeth_PortIndex portIndex, uint8 phyAddress, uint8 devAddress, uint16 regAddress, uint16 data);
uint16 IfxGeth_Mdio_read(Ifx_GETH *gethSFR, IfxGeth_PortIndex portIndex, uint8 phyAddress, uint8 devAddress, uint16 regAddress);

IFX_INLINE void IfxGeth_stopRx(Ifx_GETH *gethSFR, IfxGeth_PortIndex port)
{
    gethSFR->PORT[port].CORE.MAC_RX_CONFIGURATION.B.RE = FALSE;
}

IFX_INLINE void IfxGeth_startRx(Ifx_GETH *gethSFR, IfxGeth_PortIndex port)
{
    gethSFR->PORT[port].CORE.MAC_RX_CONFIGURATION.B.RE = TRUE;
}

IFX_INLINE void IfxGeth_stopTx(Ifx_GETH *gethSFR, IfxGeth_PortIndex port)
{
    gethSFR->PORT[port].CORE.MAC_TX_CONFIGURATION.B.TE = FALSE;
}

IFX_INLINE void IfxGeth_startTx(Ifx_GETH *gethSFR, IfxGeth_PortIndex port)
{
    gethSFR->PORT[port].CORE.MAC_TX_CONFIGURATION.B.TE = TRUE;
}

IFX_INLINE void IfxGeth_startRxDma(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channelId)
{
    gethSFR->DMA.CH[channelId].RX_CONTROL.B.SR = 1;
}

IFX_INLINE void IfxGeth_startTxDma(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channelId)
{
    gethSFR->DMA.CH[channelId].TX_CONTROL.B.ST = 1;
}

IFX_INLINE void IfxGeth_stopRxDma(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channelId)
{
    gethSFR->DMA.CH[channelId].RX_CONTROL.B.SR = 0;
}

IFX_INLINE void IfxGeth_stopTxDma(Ifx_GETH *gethSFR, IfxGeth_TxDmaChannel channelId)
{
    gethSFR->DMA.CH[channelId].TX_CONTROL.B.ST = 0;
}

IFX_INLINE void IfxGeth_setSpeed(Ifx_GETH *gethSFR, IfxGeth_PortIndex port, IfxGeth_Speed speed)
{
    gethSFR->PORT[port].CORE.MAC_TX_CONFIGURATION.B.SS = speed;
}

IFX_INLINE void IfxGeth_setDuplexMode(Ifx_GETH *gethSFR, IfxGeth_PortIndex port, IfxGeth_DuplexMode mode)
{
    gethSFR->PORT[port].CORE.MAC_EXTENDED_CONFIGURATION.B.HD = mode;
}

IFX_INLINE uint32 IfxGeth_getDmaStatus(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channelId)
{
    return gethSFR->DMA.CH[channelId].STATUS.U;
}

IFX_INLINE void IfxGeth_clearDmaStatus(Ifx_GETH *gethSFR, IfxGeth_RxDmaChannel channelId, uint32_t mask)
{
    gethSFR->DMA.CH[channelId].STATUS.U |= mask;
}

int IfxGeth_vlanFilterConfig(Ifx_GETH *gethSFR,
                             IfxGeth_PortIndex port,
                             const Ifx_GETH_PORT_CORE_MAC_VLAN_TAG_DATA *entries,
                             uint8 count);
#ifdef __cplusplus
}  // extern "C"
#endif  /* __cplusplus */

#endif

#endif
