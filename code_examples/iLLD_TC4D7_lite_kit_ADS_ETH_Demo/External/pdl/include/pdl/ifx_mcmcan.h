/**********************************************************************************************************************
 * \file ifx_mcmcan.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef IFX_MCMCAN_H
#define IFX_MCMCAN_H

#include "ifx_macro.h"
#include "Ifx_Cfg.h"

#if defined(IFX_DEVICE_SERIES) && (IFX_DEVICE_SERIES != IFX_DEVICE_SERIES_TC45)

#include "IfxCan_bf.h"
#include "Can/Std/IfxCan.h"

#ifdef __cplusplus
extern "C" {
#endif  /* __cplusplus */

typedef enum
{
    IfxCan_Node_Interrupt_RF0N = GENMASK(IFX_CAN_N_IR_RF0N),
    IfxCan_Node_Interrupt_RF0W = GENMASK(IFX_CAN_N_IR_RF0W),
    IfxCan_Node_Interrupt_RF0F = GENMASK(IFX_CAN_N_IR_RF0F),
    IfxCan_Node_Interrupt_RF0L = GENMASK(IFX_CAN_N_IR_RF0L),
    IfxCan_Node_Interrupt_RF1N = GENMASK(IFX_CAN_N_IR_RF1N),
    IfxCan_Node_Interrupt_RF1W = GENMASK(IFX_CAN_N_IR_RF1W),
    IfxCan_Node_Interrupt_RF1F = GENMASK(IFX_CAN_N_IR_RF1F),
    IfxCan_Node_Interrupt_RF1L = GENMASK(IFX_CAN_N_IR_RF1L),
    IfxCan_Node_Interrupt_HPM = GENMASK(IFX_CAN_N_IR_HPM),
    IfxCan_Node_Interrupt_TC = GENMASK(IFX_CAN_N_IR_TC),
    IfxCan_Node_Interrupt_TCF = GENMASK(IFX_CAN_N_IR_TCF),
    IfxCan_Node_Interrupt_TFE = GENMASK(IFX_CAN_N_IR_TFE),
    IfxCan_Node_Interrupt_TEFN = GENMASK(IFX_CAN_N_IR_TEFN),
    IfxCan_Node_Interrupt_TEFW = GENMASK(IFX_CAN_N_IR_TEFW),
    IfxCan_Node_Interrupt_TEFF = GENMASK(IFX_CAN_N_IR_TEFF),
    IfxCan_Node_Interrupt_TEFL = GENMASK(IFX_CAN_N_IR_TEFL),
    IfxCan_Node_Interrupt_TSW = GENMASK(IFX_CAN_N_IR_TSW),
    IfxCan_Node_Interrupt_MRAF = GENMASK(IFX_CAN_N_IR_MRAF),
    IfxCan_Node_Interrupt_TOO = GENMASK(IFX_CAN_N_IR_TOO),
    IfxCan_Node_Interrupt_DRX = GENMASK(IFX_CAN_N_IR_DRX),
    IfxCan_Node_Interrupt_ELO = GENMASK(IFX_CAN_N_IR_ELO),
    IfxCan_Node_Interrupt_EP = GENMASK(IFX_CAN_N_IR_EP),
    IfxCan_Node_Interrupt_EW = GENMASK(IFX_CAN_N_IR_EW),
    IfxCan_Node_Interrupt_BO = GENMASK(IFX_CAN_N_IR_BO),
    IfxCan_Node_Interrupt_WDI = GENMASK(IFX_CAN_N_IR_WDI),
    IfxCan_Node_Interrupt_PEA = GENMASK(IFX_CAN_N_IR_PEA),
    IfxCan_Node_Interrupt_PED = GENMASK(IFX_CAN_N_IR_PED)
} IfxCan_Node_Interrupt;

typedef enum
{
    IfxCan_Node_CreStatus_RBUF0I = GENMASK(IFX_CAN_N_CRE_IR_RBUF0I),
    IfxCan_Node_CreStatus_RBUF1I = GENMASK(IFX_CAN_N_CRE_IR_RBUF1I),
    IfxCan_Node_CreStatus_TBUF0I = GENMASK(IFX_CAN_N_CRE_IR_TBUF0I),
    IfxCan_Node_CreStatus_TBUF1I = GENMASK(IFX_CAN_N_CRE_IR_TBUF0I),
    IfxCan_Node_CreStatus_SFRMLI = GENMASK(IFX_CAN_N_CRE_IR_SFRMLI),
    IfxCan_Node_CreStatus_XFRMLI = GENMASK(IFX_CAN_N_CRE_IR_XFRMLI),
    IfxCan_Node_CreStatus_IRSI0 = GENMASK(IFX_CAN_N_CRE_IR_IRSI0),
    IfxCan_Node_CreStatus_IRSI1 = GENMASK(IFX_CAN_N_CRE_IR_IRSI1),
    IfxCan_Node_CreStatus_IWSI0 = GENMASK(IFX_CAN_N_CRE_IR_IWSI0),
    IfxCan_Node_CreStatus_IWSI1 = GENMASK(IFX_CAN_N_CRE_IR_IWSI1),
    IfxCan_Node_CreStatus_CRCI0 = GENMASK(IFX_CAN_N_CRE_IR_CRCI0),
    IfxCan_Node_CreStatus_CRCI1 = GENMASK(IFX_CAN_N_CRE_IR_CRCI1),
    IfxCan_Node_CreStatus_RWDTI0 = GENMASK(IFX_CAN_N_CRE_IR_RWDTI0),
    IfxCan_Node_CreStatus_RWDTI1 = GENMASK(IFX_CAN_N_CRE_IR_RWDTI1),
    IfxCan_Node_CreStatus_TWDTI0 = GENMASK(IFX_CAN_N_CRE_IR_TWDTI0),
    IfxCan_Node_CreStatus_TWDTI1 = GENMASK(IFX_CAN_N_CRE_IR_TWDTI1)
} IfxCan_Node_CreStatus;

/* Structure of CRE RAM */
typedef struct _Ifx_CRE_RAM
{
    Ifx_CAN_CRE params;
    Ifx_CAN_RHBUF rx_host_buffer[2];
    Ifx_CAN_THBUF tx_host_buffer[2];

} Ifx_CRE_RAM;

void IfxCan_Node_EnableExternalLoopBackMode(Ifx_CAN_N *node, boolean enable);
void IfxCan_Node_EnableInternalLoopBackMode(Ifx_CAN_N *node, boolean enable);
static inline uint32 IfxCan_Node_getCreInterrupt(Ifx_CAN_N *node);
static inline void IfxCan_Node_clearReceiveHostBufferRequest(Ifx_CAN_N *node, IfxCan_CreRxHostBufferIndex rxHostBufferIndex);
static inline uint32 IfxCan_Node_getReceiveHostBufferRequest(Ifx_CAN_N *node, IfxCan_CreRxHostBufferIndex rxHostBufferIndex);
static inline uint32 IfxCan_Node_getTransmitHostBufferRequest(Ifx_CAN_N *node, IfxCan_CreRxHostBufferIndex rxHostBufferIndex);

static inline uint32 IfxCan_Node_getInterrupt(Ifx_CAN_N *node)
{
    return node->IR.U;
}

static inline uint32 IfxCan_Node_clearInterrupt(Ifx_CAN_N *node, uint32 mask)
{
    return node->IR.U = mask;
}

static inline uint32 IfxCan_Node_getCreInterrupt(Ifx_CAN_N *node)
{
    return node->CRE.IR.U;
}

static inline uint32 IfxCan_Node_clearCreInterruptEx(Ifx_CAN_N *node, uint32 mask)
{
    return node->CRE.IR.U = mask;
}

static inline uint32 IfxCan_Node_getReceiveHostBufferRequest(Ifx_CAN_N *node, IfxCan_CreRxHostBufferIndex rxHostBufferIndex)
{
    return node->CRE.HBUF.RX[rxHostBufferIndex].STAT.B.RHREQ;
}

static inline void IfxCan_Node_clearReceiveHostBufferRequest(Ifx_CAN_N *node, IfxCan_CreRxHostBufferIndex rxHostBufferIndex)
{
    node->CRE.HBUF.RX[rxHostBufferIndex].STAT.B.RHREQ = 1;
}

static inline uint32 IfxCan_Node_getTransmitHostBufferRequest(Ifx_CAN_N *node, IfxCan_CreRxHostBufferIndex rxHostBufferIndex)
{
    return node->CRE.HBUF.TX[rxHostBufferIndex].STAT.B.THREQ;
}

#ifdef __cplusplus
}  // extern "C"
#endif  /* __cplusplus */

#endif

#endif // IFX_MCMCAN_H
