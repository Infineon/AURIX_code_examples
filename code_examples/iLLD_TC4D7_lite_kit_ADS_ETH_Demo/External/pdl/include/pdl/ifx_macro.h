/**********************************************************************************************************************
 * \file ifx_macro.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef IFX_MACRO_H
#define IFX_MACRO_H

#include <stdint.h>
#include <stddef.h>

#ifndef __SIZEOF_LONG__
#define __SIZEOF_LONG__         4
#endif

/* Device definitions  */
#define IFX_DEVICE_FAMILY_TC4       (4)

#define IFX_DEVICE_SERIES_TC45      (5)
#define IFX_DEVICE_SERIES_TC48      (8)
#define IFX_DEVICE_SERIES_TC49      (9)
#define IFX_DEVICE_SERIES_TC49N     (99)
#define IFX_DEVICE_SERIES_TC4D      (13)

#define IFX_KIT_TC4D7_LITE              ((IFX_DEVICE_SERIES_TC4D * 10) + 0)
#define IFX_KIT_TC4D9_COM_TRB           ((IFX_DEVICE_SERIES_TC4D * 10) + 1)
#define IFX_KIT_TC4D9_ZONE_GW_BTX_APP   ((IFX_DEVICE_SERIES_TC4D * 10) + 2)
#define IFX_KIT_TC4D9_ZONE_GW_BT1_APP   ((IFX_DEVICE_SERIES_TC4D * 10) + 3)
#define IFX_KIT_TC4D9_COM_VAL           ((IFX_DEVICE_SERIES_TC4D * 10) + 4)

#define IFX_KIT_TC499_COM_TRB           ((IFX_DEVICE_SERIES_TC49 * 10) + 0)
#define IFX_KIT_TC499_STD_TRB           ((IFX_DEVICE_SERIES_TC49 * 10) + 1)

#define IFX_KIT_TC499N_STD_TRB          ((IFX_DEVICE_SERIES_TC49N * 10) + 0)
#define IFX_KIT_TC499N_STD_VAL          ((IFX_DEVICE_SERIES_TC49N * 10) + 0)

#define IFX_KIT_TC489_COM_TRB           ((IFX_DEVICE_SERIES_TC48 * 10) + 0)
#define IFX_KIT_TC487_LITE              ((IFX_DEVICE_SERIES_TC48 * 10) + 1)

#define IFX_KIT_TC457_RDR_TRB           ((IFX_DEVICE_SERIES_TC45 * 10) + 0)

#define HTONS(n) (((((uint16_t)(n) & 0xff)) << 8) | \
                  ((((uint16_t)(n) & 0xff00)) >> 8))

#define HTONL(n) (((((uint32_t)(n) & 0xff)) << 24) | \
                  ((((uint32_t)(n) & 0xff00)) << 8) | \
                  ((((uint32_t)(n) & 0xff0000)) >> 8) | \
                  ((((uint32_t)(n) & 0xff000000)) >> 24))


#define BITS_PER_LONG           (__CHAR_BIT__ * __SIZEOF_LONG__)

#define BIT(n)                  (1UL << (n))

#define BITMASK(h, l) \
        (((~0UL) - (1UL << (l)) + 1) & (~0UL >> (BITS_PER_LONG - 1 - (h))))

#define LSB_GET(value)          ((value) & -(value))

#define FIELD_GET(mask, value)  (((value) & (mask)) / LSB_GET(mask))

#define GENMASK(field)          (field ## _MSK << field ## _OFF)

/**
  \brief   Mask and shift a bit field value for use in a register bit range.
  \param[in] field  Name of the register bit field.
  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
  \return           Masked and shifted value.
*/
#define VAL2FLD(field, value)    (((uint32_t)(value) & field ## _MSK) << field ## _OFF)

/**
  \brief     Mask and shift a register value to extract a bit filed value.
  \param[in] field  Name of the register bit field.
  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
  \return           Masked and shifted bit field value.
*/
#define FLD2VAL(field, value)    (((uint32_t)(value) >> field ## _OFF) & field ## _MSK)

/***************************************************************************************************
 * Macro Name: _BOOL2FLD
 ***********************************************************************************************//**
 *
 *  Returns a field mask if the value is not false.
 *  Returns 0, if the value is false.
 *
 **************************************************************************************************/
#define BOOL2FLD(field, value) (((value) != false) ? ((field ## _MSK) << (field ## _OFF)) : 0UL)


/***************************************************************************************************
 * Macro Name: _FLD2BOOL
 ***********************************************************************************************//**
 *
 *  Returns true, if the value includes the field mask.
 *  Returns false, if the value doesn't include the field mask.
 *
 **************************************************************************************************/
#define FLD2BOOL(field, value) (((value) & ((field ## _MSK) << (field ## _OFF))) != 0UL)


#define _CLR_SET_FLD32U(reg, field, value) \
    (((reg) & ((uint32_t)(~((field ## _MSK) << (field ## _OFF))))) | (VAL2FLD(field, value)))


/***************************************************************************************************
 * Macro Name: CY_REG32_CLR_SET
 ***********************************************************************************************//**
 *
 *  Uses _CLR_SET_FLD32U macro for providing get-clear-modify-write
 *  operations with a name field and value and writes a resulting value
 *  to the 32-bit register.
 *
 **************************************************************************************************/
#define REG32_CLR_SET(reg, field, value) ((reg) = _CLR_SET_FLD32U((reg), field, (value)))

#endif
