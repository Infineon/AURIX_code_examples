/**********************************************************************************************************************
 * \file ifx_dre.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef IFX_DRE_H
#define IFX_DRE_H

#include "ifx_macro.h"
#include "Ifx_Cfg.h"

#if defined(IFX_DEVICE_SERIES) && (IFX_DEVICE_SERIES != IFX_DEVICE_SERIES_TC45)

#include "Dre/Std/IfxDre.h"

#ifdef __cplusplus
extern "C" {
#endif  /* __cplusplus */

/*******************************************************************************
* Macros
*******************************************************************************/

#define DRE_EIBUF_SIZE (192 * 8)
#define DRE_EOBUF_SIZE (192 * 8)

#define DRE_FT_FE_EIF_GETH      0
#define DRE_FT_FE_EIF_LETH      1
#define DRE_FT_FE_MADRM_OFFSET  0
#define DRE_FT_FE_L3L4FM_OFFSET (DRE_FT_FE_MADRM_OFFSET + 8)
#define DRE_FT_FE_FRPLI_OFFSET  (DRE_FT_FE_L3L4FM_OFFSET + 3)
#define DRE_FT_FE_DMACH_OFFSET  (DRE_FT_FE_FRPLI_OFFSET + 8)
#define DRE_FT_FE_EIF_OFFSET    (DRE_FT_FE_DMACH_OFFSET + 3)

/*******************************************************************************
* Type definitions
*******************************************************************************/
/* Structure of DRE RAM */
/* It can be used to visualize in the debugger the DRE RAM contents */
typedef struct _Ifx_DRE_RAM
{
    Ifx_DRE_CAD_CAN cad[20];
    Ifx_DRE_CIBUF cibl[20];
    Ifx_DRE_COBUF cobl[64];
    Ifx_DRE_RT_RE rt[4][128];
    Ifx_DRE_EAD_LETH ead_leth[4];
    Ifx_DRE_EAD_GETH ead_geth[2];
    uint32 reserved[12];
    struct
    {
        uint8 eobuf[192*8];
        Ifx_DRE_TDESC tx_desc[4];
        Ifx_DRE_RDESC rx_desc[4];
        uint8 eibuf[192*8];
    } eth[6];
    Ifx_DRE_FT_FE ft[128];
    struct
    {
        Ifx_DRE_DMEM_SA start_addr;
        Ifx_DRE_DMEM_FDBI buffer_index;
        Ifx_DRE_DMEM_WM watermark_level;
        Ifx_DRE_DMEM_WA wraparound_level;
    } dmem[28];
} Ifx_DRE_RAM;


/*******************************************************************************
* Function Prototypes
*******************************************************************************/
void IfxDre_clearSram(void);

static inline uint32 IfxDre_getDMemStatus(Ifx_DRE *dre, uint8 index)
{
    return dre->DMEM[index].STATUS.U;
}

static inline void IfxDre_clearDMemStatus(Ifx_DRE *dre, uint8 index, uint32 mask)
{
    dre->DMEM[index].STATUS.U = mask;
}

static inline void IfxDre_enableDMemBuffer(Ifx_DRE *dre, uint8 index)
{
    dre->DMEM[index].CONFIG.B.EN1 = 1;
}

#ifdef __cplusplus
}  // extern "C"
#endif  /* __cplusplus */

#endif

#endif // IFX_DRE_H
