/**
 * \file IfxQspi_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_QSPI/V0.2.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Qspi_Registers Qspi Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Qspi_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Qspi_Registers
 * 
 * \defgroup IfxSfr_Qspi_Registers_union Register unions
 * \ingroup IfxSfr_Qspi_Registers
 * 
 * \defgroup IfxSfr_Qspi_Registers_struct Memory map
 * \ingroup IfxSfr_Qspi_Registers
 */
#ifndef IFXQSPI_REGDEF_H
#define IFXQSPI_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Qspi_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_QSPI_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_QSPI_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_QSPI_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_QSPI_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_QSPI_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_QSPI_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_QSPI_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_QSPI_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_QSPI_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_QSPI_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_QSPI_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_QSPI_ACCEN_WRB_FPI_Bits;

/** \brief Basic configuration register */
typedef struct _Ifx_QSPI_BACON_Bits
{
    __I  Ifx_UReg_32Bit LAST:1;            /**< \brief [0:0] Last Word in a Frame - LAST (rh) */
    __I  Ifx_UReg_32Bit IPRE:3;            /**< \brief [3:1] Prescaler for the Idle Delay - IPRE (rh) */
    __I  Ifx_UReg_32Bit IDLE:3;            /**< \brief [6:4] Idle Delay Length - IDLE (rh) */
    __I  Ifx_UReg_32Bit LPRE:3;            /**< \brief [9:7] Prescaler for the Leading Delay - LPRE (rh) */
    __I  Ifx_UReg_32Bit LEAD:3;            /**< \brief [12:10] Leading Delay Length - LEAD (rh) */
    __I  Ifx_UReg_32Bit TPRE:3;            /**< \brief [15:13] Prescaler for the Trailing Delay - TPRE (rh) */
    __I  Ifx_UReg_32Bit TRAIL:3;           /**< \brief [18:16] Trailing Delay Length - TRAIL (rh) */
    __I  Ifx_UReg_32Bit PARTYP:1;          /**< \brief [19:19] Parity Type - PARTYP (rh) */
    __I  Ifx_UReg_32Bit UINT:1;            /**< \brief [20:20] User Interrupt at the PT1 Event in the Subsequent Frames - UINT (rh) */
    __I  Ifx_UReg_32Bit MSB:1;             /**< \brief [21:21] Shift MSB or LSB First - MSB (rh) */
    __I  Ifx_UReg_32Bit BYTE:1;            /**< \brief [22:22] Byte - BYTE (rh) */
    __I  Ifx_UReg_32Bit DL:5;              /**< \brief [27:23] Data Length - DL (rh) */
    __I  Ifx_UReg_32Bit CS:4;              /**< \brief [31:28] Channel Select - CS (rh) */
} Ifx_QSPI_BACON_Bits;

/** \brief BACON_ENTRY register */
typedef struct _Ifx_QSPI_BACONENTRY_Bits
{
    __O  Ifx_UReg_32Bit LAST:1;            /**< \brief [0:0] Last Word in a Frame - LAST (w) */
    __O  Ifx_UReg_32Bit IPRE:3;            /**< \brief [3:1] Prescaler for the Idle Delay - IPRE (w) */
    __O  Ifx_UReg_32Bit IDLE:3;            /**< \brief [6:4] Idle Delay Length - IDLE (w) */
    __O  Ifx_UReg_32Bit LPRE:3;            /**< \brief [9:7] Prescaler for the Leading Delay - LPRE (w) */
    __O  Ifx_UReg_32Bit LEAD:3;            /**< \brief [12:10] Leading Delay Length - LEAD (w) */
    __O  Ifx_UReg_32Bit TPRE:3;            /**< \brief [15:13] Prescaler for the Trailing Delay - TPRE (w) */
    __O  Ifx_UReg_32Bit TRAIL:3;           /**< \brief [18:16] Trailing Delay Length - TRAIL (w) */
    __O  Ifx_UReg_32Bit PARTYP:1;          /**< \brief [19:19] Parity Type - PARTYP (w) */
    __O  Ifx_UReg_32Bit UINT:1;            /**< \brief [20:20] User Interrupt at the PT1 Event in the Subsequent Frames - UINT (w) */
    __O  Ifx_UReg_32Bit MSB:1;             /**< \brief [21:21] Shift MSB or LSB First - MSB (w) */
    __O  Ifx_UReg_32Bit BYTE:1;            /**< \brief [22:22] Byte - BYTE (w) */
    __O  Ifx_UReg_32Bit DL:5;              /**< \brief [27:23] Data Length - DL (w) */
    __O  Ifx_UReg_32Bit CS:4;              /**< \brief [31:28] Channel Select - CS (w) */
} Ifx_QSPI_BACONENTRY_Bits;

/** \brief Clock control register */
typedef struct _Ifx_QSPI_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module disable request bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module disable status bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep mode enable control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_QSPI_CLC_Bits;

/** \brief DATA_ENTRY register 0 */
typedef struct _Ifx_QSPI_DATAENTRY_Bits
{
    __O  Ifx_UReg_32Bit E:32;              /**< \brief [31:0] Entry Point to the TxFIFO - E (w) */
} Ifx_QSPI_DATAENTRY_Bits;

/** \brief Configuration extension 0 */
typedef struct _Ifx_QSPI_ECON_Bits
{
    __IO Ifx_UReg_32Bit Q:6;               /**< \brief [5:0] Time Quantum - Q (rw) */
    __IO Ifx_UReg_32Bit A:2;               /**< \brief [7:6] Bit Segment 1 - A (rw) */
    __IO Ifx_UReg_32Bit B:2;               /**< \brief [9:8] Bit Segment 2 - B (rw) */
    __IO Ifx_UReg_32Bit C:2;               /**< \brief [11:10] Bit Segment 3 - C (rw) */
    __IO Ifx_UReg_32Bit CPH:1;             /**< \brief [12:12] Clock Phase - CPH (rw) */
    __IO Ifx_UReg_32Bit CPOL:1;            /**< \brief [13:13] Clock Polarity - CPOL (rw) */
    __IO Ifx_UReg_32Bit PAREN:1;           /**< \brief [14:14] Enable Parity Check - PAREN (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit D:2;               /**< \brief [17:16] Bit Segment 4 - D (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [29:18] \internal Reserved */
    __IO Ifx_UReg_32Bit BE:2;              /**< \brief [31:30] Permutate bytes to / from Big Endian - BE (rw) */
} Ifx_QSPI_ECON_Bits;

/** \brief Flags clear register */
typedef struct _Ifx_QSPI_FLAGSCLEAR_Bits
{
    __O  Ifx_UReg_32Bit ERRORCLEARS:9;     /**< \brief [8:0] Write Only Bits for Clearing the Error Flags - ERRORCLEARS (w) */
    __O  Ifx_UReg_32Bit TXC:1;             /**< \brief [9:9] Transmit Event Flag Clear - TXC (w) */
    __O  Ifx_UReg_32Bit RXC:1;             /**< \brief [10:10] Receive Event Flag Clear - RXC (w) */
    __O  Ifx_UReg_32Bit PT1C:1;            /**< \brief [11:11] PT1 Event Flag Clear - PT1C (w) */
    __O  Ifx_UReg_32Bit PT2C:1;            /**< \brief [12:12] PT2 Event Flag Clear - PT2C (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [14:13] \internal Reserved */
    __O  Ifx_UReg_32Bit USRC:1;            /**< \brief [15:15] User Event Flag Clear - USRC (w) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_QSPI_FLAGSCLEAR_Bits;

/** \brief Global configuration register */
typedef struct _Ifx_QSPI_GLOBALCON_Bits
{
    __IO Ifx_UReg_32Bit TQ:8;              /**< \brief [7:0] Global Time Quantum Length - TQ (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [8:8] \internal Reserved */
    __IO Ifx_UReg_32Bit SI:1;              /**< \brief [9:9] Status Injection - SI (rw) */
    __IO Ifx_UReg_32Bit EXPECT:4;          /**< \brief [13:10] Time-Out Value for the Expect Phase - EXPECT (rw) */
    __IO Ifx_UReg_32Bit LB:1;              /**< \brief [14:14] Loop-Back Control - LB (rw) */
    __IO Ifx_UReg_32Bit DEL0:1;            /**< \brief [15:15] Delayed Mode - DEL0 (rw) */
    __IO Ifx_UReg_32Bit STROBE:5;          /**< \brief [20:16] Strobe Delay in Delayed Mode - STROBE (rw) */
    __IO Ifx_UReg_32Bit SRF:1;             /**< \brief [21:21] Stop on RxFIFO Full - SRF (rw) */
    __IO Ifx_UReg_32Bit STIP:1;            /**< \brief [22:22] Slave Transmit Idle State Polarity - STIP (rw) */
    __IO Ifx_UReg_32Bit HS:1;              /**< \brief [23:23] High Speed Mode (rw) */
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [24:24] Enable Bit - EN (rwh) */
    __IO Ifx_UReg_32Bit MS:2;              /**< \brief [26:25] Master Slave Mode - MS (rw) */
    __IO Ifx_UReg_32Bit AREN:1;            /**< \brief [27:27] Automatic Reset Enable - AREN (rw) */
    __IO Ifx_UReg_32Bit HWTREN:1;          /**< \brief [28:28] Hardware Trigger Enable (rw) */
    __IO Ifx_UReg_32Bit CLKSEL:1;          /**< \brief [29:29] Clock Select - CLKSEL (rw) */
    __O  Ifx_UReg_32Bit RESETS:2;          /**< \brief [31:30] Bits for resetting sub-modules per software - RESETS (w) */
} Ifx_QSPI_GLOBALCON_Bits;

/** \brief Global configuration register 1 */
typedef struct _Ifx_QSPI_GLOBALCON1_Bits
{
    __IO Ifx_UReg_32Bit ERRORENS:9;        /**< \brief [8:0] Error Enable Bits - ERRORENS (rw) */
    __IO Ifx_UReg_32Bit TXEN:1;            /**< \brief [9:9] Tx Interrupt Event Enable - TXEN (rw) */
    __IO Ifx_UReg_32Bit RXEN:1;            /**< \brief [10:10] RX Interrupt Event Enable - RXEN (rw) */
    __IO Ifx_UReg_32Bit PT1EN:1;           /**< \brief [11:11] Interrupt on PT1 Event Enable - PT1EN (rw) */
    __IO Ifx_UReg_32Bit PT2EN:1;           /**< \brief [12:12] Interrupt on PT2 Event Enable - PT2EN (rw) */
    __IO Ifx_UReg_32Bit FD:1;              /**< \brief [13:13] Freeze Data (rw) */
    __IO Ifx_UReg_32Bit HWTRSEL:1;         /**< \brief [14:14] Hardware trigger selection (rw) */
    __IO Ifx_UReg_32Bit USREN:1;           /**< \brief [15:15] Interrupt on USR Event Enable - USREN (rw) */
    __IO Ifx_UReg_32Bit TXFIFOINT:3;       /**< \brief [18:16] Transmit FIFO Interrupt Threshold - TXFIFOINT (rw) */
    __IO Ifx_UReg_32Bit RXFIFOINT:3;       /**< \brief [21:19] Receive FIFO Interrupt Threshold - RXFIFOINT (rw) */
    __IO Ifx_UReg_32Bit PT1:3;             /**< \brief [24:22] Phase Transition Event 1 - PT1 (rw) */
    __IO Ifx_UReg_32Bit PT2:3;             /**< \brief [27:25] Phase Transition Event 2 - PT2 (rw) */
    __IO Ifx_UReg_32Bit TXFM:2;            /**< \brief [29:28] TXFIFO Mode - TXFM (rw) */
    __IO Ifx_UReg_32Bit RXFM:2;            /**< \brief [31:30] RXFIFO Mode - RXFM (rw) */
} Ifx_QSPI_GLOBALCON1_Bits;

/** \brief Module identification register */
typedef struct _Ifx_QSPI_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number - MOD_NUM (r) */
} Ifx_QSPI_ID_Bits;

/** \brief Move counter register */
typedef struct _Ifx_QSPI_MC_Bits
{
    __IO Ifx_UReg_32Bit MCOUNT:16;         /**< \brief [15:0] Move Count - MCOUNT (rw) */
    __I  Ifx_UReg_32Bit CURRENT:16;        /**< \brief [31:16] Current Status of the Move Counter - CURRENT (rh) */
} Ifx_QSPI_MC_Bits;

/** \brief Move counter control register */
typedef struct _Ifx_QSPI_MCCON_Bits
{
    __IO Ifx_UReg_32Bit TPRE2:3;           /**< \brief [2:0] Prescaler for the Trailing Delay 2 - TPRE2 (rw) */
    __IO Ifx_UReg_32Bit TRAIL2:3;          /**< \brief [5:3] Last Trailing Delay - TRAIL2 (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __IO Ifx_UReg_32Bit IBLEN:1;           /**< \brief [16:16] Interrupt Before Last Enable - IBLEN (rw) */
    __I  Ifx_UReg_32Bit IBLF:1;            /**< \brief [17:17] Interrupt Before Last Flag - IBLF (rh) */
    __O  Ifx_UReg_32Bit IBLC:1;            /**< \brief [18:18] Clear Bit for IBLF - IBLC (w) */
    __O  Ifx_UReg_32Bit IBLS:1;            /**< \brief [19:19] Set Bit for IBLF - IBLS (w) */
    __IO Ifx_UReg_32Bit IALEN:1;           /**< \brief [20:20] Interrupt After Last Enable - IALEN (rw) */
    __I  Ifx_UReg_32Bit IALF:1;            /**< \brief [21:21] Interrupt After Last Flag - IALF (rh) */
    __O  Ifx_UReg_32Bit IALC:1;            /**< \brief [22:22] Clear Bit for IALF - IALC (w) */
    __O  Ifx_UReg_32Bit IALS:1;            /**< \brief [23:23] Set Bit for IALF - IALS (w) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [29:24] \internal Reserved */
    __IO Ifx_UReg_32Bit T2EN:1;            /**< \brief [30:30] TRAIL 2 Injection Enable - T2EN (rw) */
    __IO Ifx_UReg_32Bit MCEN:1;            /**< \brief [31:31] Move Counter Enable - MCEN (rw) */
} Ifx_QSPI_MCCON_Bits;

/** \brief MIX_ENTRY register */
typedef struct _Ifx_QSPI_MIXENTRY_Bits
{
    __O  Ifx_UReg_32Bit E:32;              /**< \brief [31:0] Entry Point to the TxFIFO - E (w) */
} Ifx_QSPI_MIXENTRY_Bits;

/** \brief Multiple slave select register */
typedef struct _Ifx_QSPI_MSSMUX_Bits
{
    __IO Ifx_UReg_32Bit MSSOUT0:4;         /**< \brief [3:0] Multiple Slave Select output mux 0 (rw) */
    __IO Ifx_UReg_32Bit MSSOUT1:4;         /**< \brief [7:4] Multiple Slave Select output mux 1 (rw) */
    __IO Ifx_UReg_32Bit MSSOUT2:4;         /**< \brief [11:8] Multiple Slave Select output mux 2 (rw) */
    __IO Ifx_UReg_32Bit MSSOUT3:4;         /**< \brief [15:12] Multiple Slave Select output mux 3 (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [27:16] \internal Reserved */
    __IO Ifx_UReg_32Bit MSSOUTS:4;         /**< \brief [31:28] Multiple Slave Select output mux strobe (rw) */
} Ifx_QSPI_MSSMUX_Bits;

/** \brief OCDS control and status register */
typedef struct _Ifx_QSPI_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS suspend control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS write protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend state - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_QSPI_OCS_Bits;

/** \brief Port input select register */
typedef struct _Ifx_QSPI_PISEL_Bits
{
    __IO Ifx_UReg_32Bit MRIS:3;            /**< \brief [2:0] Master Mode Receive Input Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit SRIS:3;            /**< \brief [6:4] Slave Mode Receive Input Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit SCIS:3;            /**< \brief [10:8] Slave Mode Clock Input Select (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit SLSIS:3;           /**< \brief [14:12] Slave Mode Slave Select Input Selection (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_QSPI_PISEL_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_QSPI_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_QSPI_PROT_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_QSPI_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for global module reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for global module reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for global module reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for global module reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_QSPI_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_QSPI_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel reset status clear - STATCLR (w) */
} Ifx_QSPI_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_QSPI_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_QSPI_RST_STAT_Bits;

/** \brief RX_EXIT register */
typedef struct _Ifx_QSPI_RXEXIT_Bits
{
    __I  Ifx_UReg_32Bit E:32;              /**< \brief [31:0] Read Point from the RxFIFO - E (rh) */
} Ifx_QSPI_RXEXIT_Bits;

/** \brief RX_EXIT debug register */
typedef struct _Ifx_QSPI_RXEXITD_Bits
{
    __I  Ifx_UReg_32Bit E:32;              /**< \brief [31:0] Read Point from the RxFIFO - E (rh) */
} Ifx_QSPI_RXEXITD_Bits;

/** \brief Slave select output control register */
typedef struct _Ifx_QSPI_SSOC_Bits
{
    __IO Ifx_UReg_32Bit AOL:16;            /**< \brief [15:0] Active Output Level for the SLSO Outputs - AOL (rw) */
    __IO Ifx_UReg_32Bit OEN:16;            /**< \brief [31:16] Enable Bits for the SLSO Outputs - OEN (rw) */
} Ifx_QSPI_SSOC_Bits;

/** \brief Status register */
typedef struct _Ifx_QSPI_STATUS_Bits
{
    __IO Ifx_UReg_32Bit ERRORFLAGS:9;      /**< \brief [8:0] Sticky Flags Signalling Errors - ERRORFLAGS (rw1sh) */
    __IO Ifx_UReg_32Bit TXF:1;             /**< \brief [9:9] Transmit Interrupt Request Flag - TXF (rwh) */
    __IO Ifx_UReg_32Bit RXF:1;             /**< \brief [10:10] Receive Interrupt Request Flag - RXF (rwh) */
    __IO Ifx_UReg_32Bit PT1F:1;            /**< \brief [11:11] Phase Transition 1 Flag - PT1F (rwh) */
    __IO Ifx_UReg_32Bit PT2F:1;            /**< \brief [12:12] Phase Transition 2 Flag - PT2F (rwh) */
    __I  Ifx_UReg_32Bit RPV:1;             /**< \brief [13:13] Received Parity Value - RPV (rh) */
    __I  Ifx_UReg_32Bit TPV:1;             /**< \brief [14:14] Transmitted Parity Value - TPV (rh) */
    __IO Ifx_UReg_32Bit USRF:1;            /**< \brief [15:15] User Interrupt Request Flag - USRF (rwh) */
    __I  Ifx_UReg_32Bit TXFIFOLEVEL:4;     /**< \brief [19:16] TXFIFO Filling Level - TXFIFOLEVEL (rh) */
    __I  Ifx_UReg_32Bit RXFIFOLEVEL:4;     /**< \brief [23:20] RXFIFO Filling Level - RXFIFOLEVEL (rh) */
    __I  Ifx_UReg_32Bit SLAVESEL:4;        /**< \brief [27:24] Currently Active Slave Select Flag - SLAVESEL (rh) */
    __I  Ifx_UReg_32Bit PHASE:4;           /**< \brief [31:28] Flags the ongoing phase - PHASE (rh) */
} Ifx_QSPI_STATUS_Bits;

/** \brief Status register 1 */
typedef struct _Ifx_QSPI_STATUS1_Bits
{
    __I  Ifx_UReg_32Bit BITCOUNT:8;        /**< \brief [7:0] Number of bits shifted out - BITCOUNT (r) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [27:8] \internal Reserved */
    __IO Ifx_UReg_32Bit BRDEN:1;           /**< \brief [28:28] Baud Rate Deviation Enable - BRDEN (rw) */
    __IO Ifx_UReg_32Bit BRD:1;             /**< \brief [29:29] Baud Rate Deviation Flag - BRD (rwh) */
    __IO Ifx_UReg_32Bit SPDEN:1;           /**< \brief [30:30] Spike Detection Enable - SPDEN (rw) */
    __IO Ifx_UReg_32Bit SPD:1;             /**< \brief [31:31] Spike Detection Flag - SPD (rwh) */
} Ifx_QSPI_STATUS1_Bits;

/** \brief Extra large data configuration register */
typedef struct _Ifx_QSPI_XXLCON_Bits
{
    __IO Ifx_UReg_32Bit XDL:16;            /**< \brief [15:0] Extended Data Length - XDL (rw) */
    __I  Ifx_UReg_32Bit BYTECOUNT:16;      /**< \brief [31:16] Extended Data Length - BYTECOUNT (rh) */
} Ifx_QSPI_XXLCON_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_qspi_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ACCEN_RDB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_QSPI_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_QSPI_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ACCEN_WRB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_QSPI_ACCEN_WRB_FPI;

/** \brief Basic configuration register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_BACON_Bits B;                 /**< \brief Bitfield access */
} Ifx_QSPI_BACON;

/** \brief BACON_ENTRY register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_BACONENTRY_Bits B;            /**< \brief Bitfield access */
} Ifx_QSPI_BACONENTRY;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_QSPI_CLC;

/** \brief DATA_ENTRY register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_DATAENTRY_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_DATAENTRY;

/** \brief Configuration extension 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ECON_Bits B;                  /**< \brief Bitfield access */
} Ifx_QSPI_ECON;

/** \brief Flags clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_FLAGSCLEAR_Bits B;            /**< \brief Bitfield access */
} Ifx_QSPI_FLAGSCLEAR;

/** \brief Global configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_GLOBALCON_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_GLOBALCON;

/** \brief Global configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_GLOBALCON1_Bits B;            /**< \brief Bitfield access */
} Ifx_QSPI_GLOBALCON1;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_QSPI_ID;

/** \brief Move counter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_MC_Bits B;                    /**< \brief Bitfield access */
} Ifx_QSPI_MC;

/** \brief Move counter control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_MCCON_Bits B;                 /**< \brief Bitfield access */
} Ifx_QSPI_MCCON;

/** \brief MIX_ENTRY register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_MIXENTRY_Bits B;              /**< \brief Bitfield access */
} Ifx_QSPI_MIXENTRY;

/** \brief Multiple slave select register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_MSSMUX_Bits B;                /**< \brief Bitfield access */
} Ifx_QSPI_MSSMUX;

/** \brief OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_OCS_Bits B;                   /**< \brief Bitfield access */
} Ifx_QSPI_OCS;

/** \brief Port input select register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_PISEL_Bits B;                 /**< \brief Bitfield access */
} Ifx_QSPI_PISEL;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_QSPI_PROT;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_QSPI_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_QSPI_RST_STAT;

/** \brief RX_EXIT register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_RXEXIT_Bits B;                /**< \brief Bitfield access */
} Ifx_QSPI_RXEXIT;

/** \brief RX_EXIT debug register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_RXEXITD_Bits B;               /**< \brief Bitfield access */
} Ifx_QSPI_RXEXITD;

/** \brief Slave select output control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_SSOC_Bits B;                  /**< \brief Bitfield access */
} Ifx_QSPI_SSOC;

/** \brief Status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_STATUS_Bits B;                /**< \brief Bitfield access */
} Ifx_QSPI_STATUS;

/** \brief Status register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_STATUS1_Bits B;               /**< \brief Bitfield access */
} Ifx_QSPI_STATUS1;

/** \brief Extra large data configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_QSPI_XXLCON_Bits B;                /**< \brief Bitfield access */
} Ifx_QSPI_XXLCON;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Qspi_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_QSPI_RST
{
       __IO Ifx_QSPI_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_QSPI_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_QSPI_RST_STAT                   STAT;                   /**< \brief 8, Reset status register*/
} Ifx_QSPI_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Qspi_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_QSPI_ACCEN
{
       __IO Ifx_QSPI_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_QSPI_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_QSPI_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_QSPI_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_QSPI_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_QSPI_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_QSPI_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Qspi_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief QSPI object */
typedef volatile struct _Ifx_QSPI
{
       __IO Ifx_QSPI_CLC                        CLC;                    /**< \brief 0, Clock control register*/
       __IO Ifx_QSPI_OCS                        OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_QSPI_ID                         ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_QSPI_RST                        RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_QSPI_PROT                       PROTE;                  /**< \brief 20, PROT register endinit*/
       __IO Ifx_QSPI_PROT                       PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_QSPI_ACCEN                      ACCEN;                  /**< \brief 40, */
       __I  Ifx_UReg_8Bit                       reserved_60[164];       /**< \brief 60, \internal Reserved */
       __IO Ifx_QSPI_PISEL                      PISEL;                  /**< \brief 104, Port input select register*/
       __I  Ifx_UReg_8Bit                       reserved_108[8];        /**< \brief 108, \internal Reserved */
       __IO Ifx_QSPI_GLOBALCON                  GLOBALCON;              /**< \brief 110, Global configuration register*/
       __IO Ifx_QSPI_GLOBALCON1                 GLOBALCON1;             /**< \brief 114, Global configuration register 1*/
       __I  Ifx_QSPI_BACON                      BACON;                  /**< \brief 118, Basic configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_11C[4];        /**< \brief 11C, \internal Reserved */
       __IO Ifx_QSPI_ECON                       ECON[8];                /**< \brief 120, Configuration extension 0*/
       __IO Ifx_QSPI_STATUS                     STATUS;                 /**< \brief 140, Status register*/
       __IO Ifx_QSPI_STATUS1                    STATUS1;                /**< \brief 144, Status register 1*/
       __IO Ifx_QSPI_SSOC                       SSOC;                   /**< \brief 148, Slave select output control register*/
       __I  Ifx_UReg_8Bit                       reserved_14C[4];        /**< \brief 14C, \internal Reserved */
       __O  Ifx_QSPI_FLAGSCLEAR                 FLAGSCLEAR;             /**< \brief 150, Flags clear register*/
       __IO Ifx_QSPI_XXLCON                     XXLCON;                 /**< \brief 154, Extra large data configuration register*/
       __O  Ifx_QSPI_MIXENTRY                   MIXENTRY;               /**< \brief 158, MIX_ENTRY register*/
       __O  Ifx_QSPI_BACONENTRY                 BACONENTRY;             /**< \brief 15C, BACON_ENTRY register*/
       __O  Ifx_QSPI_DATAENTRY                  DATAENTRY[8];           /**< \brief 160, DATA_ENTRY register 0*/
       __I  Ifx_QSPI_RXEXIT                     RXEXIT[8];              /**< \brief 180, MIRROR, RX_EXIT register*/
       __I  Ifx_QSPI_RXEXITD                    RXEXITD;                /**< \brief 1A0, RX_EXIT debug register*/
       __I  Ifx_UReg_8Bit                       reserved_1A4[16];       /**< \brief 1A4, \internal Reserved */
       __IO Ifx_QSPI_MC                         MC;                     /**< \brief 1B4, Move counter register*/
       __IO Ifx_QSPI_MCCON                      MCCON;                  /**< \brief 1B8, Move counter control register*/
       __IO Ifx_QSPI_MSSMUX                     MSSMUX;                 /**< \brief 1BC, Multiple slave select register*/
       __I  Ifx_UReg_8Bit                       reserved_1C0[64];       /**< \brief 1C0, \internal Reserved */
} Ifx_QSPI;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXQSPI_REGDEF_H */
