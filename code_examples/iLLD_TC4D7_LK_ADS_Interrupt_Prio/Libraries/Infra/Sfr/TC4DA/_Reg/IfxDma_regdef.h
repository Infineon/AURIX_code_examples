/**
 * \file IfxDma_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_DMA/V0.2.1.1.5
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Dma_Registers Dma Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Dma_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Dma_Registers
 * 
 * \defgroup IfxSfr_Dma_Registers_union Register unions
 * \ingroup IfxSfr_Dma_Registers
 * 
 * \defgroup IfxSfr_Dma_Registers_struct Memory map
 * \ingroup IfxSfr_Dma_Registers
 */
#ifndef IFXDMA_REGDEF_H
#define IFXDMA_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Dma_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_DMA_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMA_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_DMA_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_DMA_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_DMA_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_DMA_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_DMA_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMA_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_DMA_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_DMA_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_DMA_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_DMA_ACCEN_WRB_FPI_Bits;

/** \brief DMA channel 000 address and interrupt control register */
typedef struct _Ifx_DMA_CH_ADICR_Bits
{
    __IO Ifx_UReg_32Bit SMF:3;             /**< \brief [2:0] Source address modification factor (rwh) */
    __IO Ifx_UReg_32Bit INCS:1;            /**< \brief [3:3] Increment of source address (rwh) */
    __IO Ifx_UReg_32Bit DMF:3;             /**< \brief [6:4] Destination address modification factor (rwh) */
    __IO Ifx_UReg_32Bit INCD:1;            /**< \brief [7:7] Increment of destination address (rwh) */
    __IO Ifx_UReg_32Bit CBLS:4;            /**< \brief [11:8] Source circular buffer length (rwh) */
    __IO Ifx_UReg_32Bit CBLD:4;            /**< \brief [15:12] Destination circular buffer length (rwh) */
    __IO Ifx_UReg_32Bit SHCT:4;            /**< \brief [19:16] Shadow control (rwh) */
    __IO Ifx_UReg_32Bit SCBE:1;            /**< \brief [20:20] Source circular buffer enable (rwh) */
    __IO Ifx_UReg_32Bit DCBE:1;            /**< \brief [21:21] Destination circular buffer enable (rwh) */
    __IO Ifx_UReg_32Bit STAMP:1;           /**< \brief [22:22] Timestamp (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit WRPSE:1;           /**< \brief [24:24] Wrap source enable (rwh) */
    __IO Ifx_UReg_32Bit WRPDE:1;           /**< \brief [25:25] Wrap destination enable (rwh) */
    __IO Ifx_UReg_32Bit INTCT:2;           /**< \brief [27:26] Interrupt control (rwh) */
    __IO Ifx_UReg_32Bit IRDV:4;            /**< \brief [31:28] Interrupt raise detect value (rwh) */
} Ifx_DMA_CH_ADICR_Bits;

/** \brief DMA channel 000 configuration register */
typedef struct _Ifx_DMA_CH_CHCFGR_Bits
{
    __IO Ifx_UReg_32Bit TREL:14;           /**< \brief [13:0] Transfer reload value (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit BLKM:3;            /**< \brief [18:16] Block mode (rwh) */
    __IO Ifx_UReg_32Bit RROAT:1;           /**< \brief [19:19] Reset request only after transaction (rwh) */
    __IO Ifx_UReg_32Bit CHMODE:1;          /**< \brief [20:20] Channel operation mode (rwh) */
    __IO Ifx_UReg_32Bit CHDW:3;            /**< \brief [23:21] Channel data width (rwh) */
    __IO Ifx_UReg_32Bit PATSEL:3;          /**< \brief [26:24] Pattern select (rwh) */
    __IO Ifx_UReg_32Bit SWAP:1;            /**< \brief [27:27] Swap data CRC byte order (rwh) */
    __IO Ifx_UReg_32Bit PRSEL:1;           /**< \brief [28:28] Peripheral request select (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_DMA_CH_CHCFGR_Bits;

/** \brief DMA channel 000 control and status register */
typedef struct _Ifx_DMA_CH_CHCSR_Bits
{
    __I  Ifx_UReg_32Bit TCOUNT:14;         /**< \brief [13:0] Transfer count (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [14:14] \internal Reserved */
    __I  Ifx_UReg_32Bit LXO:1;             /**< \brief [15:15] Old value of pattern detection match status (rh) */
    __I  Ifx_UReg_32Bit WRPS:1;            /**< \brief [16:16] Wrap source buffer (rh) */
    __I  Ifx_UReg_32Bit WRPD:1;            /**< \brief [17:17] Wrap destination buffer (rh) */
    __I  Ifx_UReg_32Bit ICH:1;             /**< \brief [18:18] Interrupt from channel (rh) */
    __I  Ifx_UReg_32Bit IPM:1;             /**< \brief [19:19] Pattern detection from channel (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __I  Ifx_UReg_32Bit BUFFER:1;          /**< \brief [22:22] DMA double buffering active buffer (rh) */
    __IO Ifx_UReg_32Bit FROZEN:1;          /**< \brief [23:23] DMA double buffering frozen buffer (rwh) */
    __O  Ifx_UReg_32Bit SWB:1;             /**< \brief [24:24] DMA double buffering switch buffer (w) */
    __O  Ifx_UReg_32Bit CWRP:1;            /**< \brief [25:25] Clear wrap buffer interrupt (w) */
    __O  Ifx_UReg_32Bit CICH:1;            /**< \brief [26:26] Clear interrupt for DMA channel (w) */
    __O  Ifx_UReg_32Bit SIT:1;             /**< \brief [27:27] Set interrupt trigger for DMA channel (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [30:28] \internal Reserved */
    __O  Ifx_UReg_32Bit SCH:1;             /**< \brief [31:31] Set transaction request (w) */
} Ifx_DMA_CH_CHCSR_Bits;

/** \brief DMA channel 000 destination address register */
typedef struct _Ifx_DMA_CH_DADR_Bits
{
    __IO Ifx_UReg_32Bit DADR:32;           /**< \brief [31:0] Destination address (rwh) */
} Ifx_DMA_CH_DADR_Bits;

/** \brief DMA channel 000 read data CRC register */
typedef struct _Ifx_DMA_CH_RDCRCR_Bits
{
    __IO Ifx_UReg_32Bit RDCRC:32;          /**< \brief [31:0] Read data CRC (rwh) */
} Ifx_DMA_CH_RDCRCR_Bits;

/** \brief DMA channel 000 source address register */
typedef struct _Ifx_DMA_CH_SADR_Bits
{
    __IO Ifx_UReg_32Bit SADR:32;           /**< \brief [31:0] Source address (rwh) */
} Ifx_DMA_CH_SADR_Bits;

/** \brief DMA channel 000 source and destination address CRC register */
typedef struct _Ifx_DMA_CH_SDCRCR_Bits
{
    __IO Ifx_UReg_32Bit SDCRC:32;          /**< \brief [31:0] Source and destination address CRC (rwh) */
} Ifx_DMA_CH_SDCRCR_Bits;

/** \brief DMA channel 000 shadow address register */
typedef struct _Ifx_DMA_CH_SHADR_Bits
{
    __IO Ifx_UReg_32Bit SHADR:32;          /**< \brief [31:0] Shadowed address (rwh) */
} Ifx_DMA_CH_SHADR_Bits;

/** \brief Clock control register */
typedef struct _Ifx_DMA_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module disable request bit (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module disable status bit (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep mode enable control (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_DMA_CLC_Bits;

/** \brief DMA clear error register */
typedef struct _Ifx_DMA_CLRE_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __O  Ifx_UReg_32Bit CNRTRLER:1;        /**< \brief [16:16] Clear no resource partition TRL error (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __O  Ifx_UReg_32Bit COVFLER:1;         /**< \brief [18:18] Clear DMA error status overflow (w) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_DMA_CLRE_Bits;

/** \brief DMA error status register */
typedef struct _Ifx_DMA_ERRSR_Bits
{
    __I  Ifx_UReg_32Bit LEC:7;             /**< \brief [6:0] DMA last error channel (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [15:7] \internal Reserved */
    __I  Ifx_UReg_32Bit NRTRLER:1;         /**< \brief [16:16] No resource partition TRL error (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [17:17] \internal Reserved */
    __I  Ifx_UReg_32Bit OVFLER:1;          /**< \brief [18:18] DMA error status overflow (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_DMA_ERRSR_Bits;

/** \brief DMA channel 000 resource partition assignment register */
typedef struct _Ifx_DMA_HRR_Bits
{
    __IO Ifx_Strict_32Bit HRP:4;           /**< \brief [3:0] DMA channel resource partition assignment (rw) */
    __IO Ifx_Strict_32Bit HRPV:1;          /**< \brief [4:4] DMA channel resource partition assignment valid (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_DMA_HRR_Bits;

/** \brief Module identification register */
typedef struct _Ifx_DMA_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number (r) */
} Ifx_DMA_ID_Bits;

/** \brief  */
typedef struct _Ifx_DMA_LCLTEST_Bits
{
    __O  Ifx_UReg_32Bit LCLT:1;            /**< \brief [0:0] LCL lockstep test (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMA_LCLTEST_Bits;

/** \brief ME 0 channel address and interrupt control register */
typedef struct _Ifx_DMA_ME_ADICR_Bits
{
    __I  Ifx_UReg_32Bit SMF:3;             /**< \brief [2:0] Source address modification factor (rh) */
    __I  Ifx_UReg_32Bit INCS:1;            /**< \brief [3:3] Increment of source address (rh) */
    __I  Ifx_UReg_32Bit DMF:3;             /**< \brief [6:4] Destination address modification factor (rh) */
    __I  Ifx_UReg_32Bit INCD:1;            /**< \brief [7:7] Increment of destination address (rh) */
    __I  Ifx_UReg_32Bit CBLS:4;            /**< \brief [11:8] Source circular buffer length (rh) */
    __I  Ifx_UReg_32Bit CBLD:4;            /**< \brief [15:12] Destination circular buffer length (rh) */
    __I  Ifx_UReg_32Bit SHCT:4;            /**< \brief [19:16] Shadow control (rh) */
    __I  Ifx_UReg_32Bit SCBE:1;            /**< \brief [20:20] Source circular buffer enable (rh) */
    __I  Ifx_UReg_32Bit DCBE:1;            /**< \brief [21:21] Destination circular buffer enable (rh) */
    __I  Ifx_UReg_32Bit STAMP:1;           /**< \brief [22:22] Timestamp (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __I  Ifx_UReg_32Bit WRPSE:1;           /**< \brief [24:24] Wrap source enable (rh) */
    __I  Ifx_UReg_32Bit WRPDE:1;           /**< \brief [25:25] Wrap destination enable (rh) */
    __I  Ifx_UReg_32Bit INTCT:2;           /**< \brief [27:26] Interrupt control (rh) */
    __I  Ifx_UReg_32Bit IRDV:4;            /**< \brief [31:28] Interrupt raise detect value (rh) */
} Ifx_DMA_ME_ADICR_Bits;

/** \brief ME 0 channel control register */
typedef struct _Ifx_DMA_ME_CHCR_Bits
{
    __I  Ifx_UReg_32Bit TREL:14;           /**< \brief [13:0] Transfer reload value (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit BLKM:3;            /**< \brief [18:16] Block mode (rh) */
    __I  Ifx_UReg_32Bit RROAT:1;           /**< \brief [19:19] Reset request only after transaction (rh) */
    __I  Ifx_UReg_32Bit CHMODE:1;          /**< \brief [20:20] Channel operation mode (rh) */
    __I  Ifx_UReg_32Bit CHDW:3;            /**< \brief [23:21] Channel data width (rh) */
    __I  Ifx_UReg_32Bit PATSEL:3;          /**< \brief [26:24] Pattern select (rh) */
    __I  Ifx_UReg_32Bit SWAP:1;            /**< \brief [27:27] Swap data CRC byte order (rh) */
    __I  Ifx_UReg_32Bit PRSEL:1;           /**< \brief [28:28] Peripheral request select (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_DMA_ME_CHCR_Bits;

/** \brief ME 0 channel status register */
typedef struct _Ifx_DMA_ME_CHSR_Bits
{
    __I  Ifx_UReg_32Bit TCOUNT:14;         /**< \brief [13:0] Transfer count status (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [14:14] \internal Reserved */
    __I  Ifx_UReg_32Bit LXO:1;             /**< \brief [15:15] Old value of pattern detection (rh) */
    __I  Ifx_UReg_32Bit WRPS:1;            /**< \brief [16:16] Wrap source buffer (rh) */
    __I  Ifx_UReg_32Bit WRPD:1;            /**< \brief [17:17] Wrap destination buffer (rh) */
    __I  Ifx_UReg_32Bit ICH:1;             /**< \brief [18:18] Interrupt from channel (rh) */
    __I  Ifx_UReg_32Bit IPM:1;             /**< \brief [19:19] Pattern detection from channel (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __I  Ifx_UReg_32Bit BUFFER:1;          /**< \brief [22:22] DMA double buffering active buffer (rh) */
    __I  Ifx_UReg_32Bit FROZEN:1;          /**< \brief [23:23] DMA double buffering frozen buffer (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMA_ME_CHSR_Bits;

/** \brief ME 0 channel destination address register */
typedef struct _Ifx_DMA_ME_DADR_Bits
{
    __I  Ifx_UReg_32Bit DADR:32;           /**< \brief [31:0] Destination address (rh) */
} Ifx_DMA_ME_DADR_Bits;

/** \brief ME 0 channel read data CRC register */
typedef struct _Ifx_DMA_ME_RDCRC_Bits
{
    __I  Ifx_UReg_32Bit RDCRC:32;          /**< \brief [31:0] Read data CRC (rh) */
} Ifx_DMA_ME_RDCRC_Bits;

/** \brief ME 0 channel source address register */
typedef struct _Ifx_DMA_ME_SADR_Bits
{
    __I  Ifx_UReg_32Bit SADR:32;           /**< \brief [31:0] Source address (rh) */
} Ifx_DMA_ME_SADR_Bits;

/** \brief ME 0 channel source and destination address CRC register */
typedef struct _Ifx_DMA_ME_SDCRC_Bits
{
    __I  Ifx_UReg_32Bit SDCRC:32;          /**< \brief [31:0] Source and destination address CRC (rh) */
} Ifx_DMA_ME_SDCRC_Bits;

/** \brief ME 0 channel shadow address register */
typedef struct _Ifx_DMA_ME_SHADR_Bits
{
    __I  Ifx_UReg_32Bit SHADR:32;          /**< \brief [31:0] Shadowed address (rh) */
} Ifx_DMA_ME_SHADR_Bits;

/** \brief ME 0 status register */
typedef struct _Ifx_DMA_ME_SR_Bits
{
    __I  Ifx_UReg_32Bit RS:1;              /**< \brief [0:0] ME read status (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __I  Ifx_UReg_32Bit WS:1;              /**< \brief [4:4] ME write status (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __I  Ifx_UReg_32Bit CH:7;              /**< \brief [22:16] ME active channel (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_DMA_ME_SR_Bits;

/** \brief OCDS trigger set select */
typedef struct _Ifx_DMA_OTSS_Bits
{
    __IO Ifx_UReg_32Bit TGS:4;             /**< \brief [3:0] Trigger set for OTGB0 or OTGB1 (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [13:4] \internal Reserved */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [14:14] OTGB0 or OTGB1 bus select (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [15:15] TGS, TGB write protection (w) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_DMA_OTSS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_DMA_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_DMA_PROT_Bits;

/** \brief PROT register cyber-security endinit */
typedef struct _Ifx_DMA_PROTCSE_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit CSTAGOFF:3;        /**< \brief [10:8] CS asset tag offset (rw) */
    __IO Ifx_UReg_32Bit CSEN:1;            /**< \brief [11:11] Enable for CSTAGOFF reservation (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_DMA_PROTCSE_Bits;

/** \brief RP 0 clear error register */
typedef struct _Ifx_DMA_RP_CLRE_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __O  Ifx_UReg_32Bit CSER:1;            /**< \brief [16:16] Clear RP source error (w) */
    __O  Ifx_UReg_32Bit CDER:1;            /**< \brief [17:17] Clear RP destination error (w) */
    __O  Ifx_UReg_32Bit COVFLER:1;         /**< \brief [18:18] Clear RP error status overflow (w) */
    __O  Ifx_UReg_32Bit CTCSCER:1;         /**< \brief [19:19] Clear RP TCS configuration error (w) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __O  Ifx_UReg_32Bit CRAMER:1;          /**< \brief [24:24] Clear RAM error (w) */
    __O  Ifx_UReg_32Bit CCLLER:1;          /**< \brief [25:25] Clear CLL error (w) */
    __O  Ifx_UReg_32Bit CDLLER:1;          /**< \brief [26:26] Clear DLL error (w) */
    __O  Ifx_UReg_32Bit CDBTRLER:1;        /**< \brief [27:27] Clear double buffer TRL error (w) */
    __O  Ifx_UReg_32Bit CCBTRLER:1;        /**< \brief [28:28] Clear channel busy TRL error (w) */
    __O  Ifx_UReg_32Bit CCDTRLER:1;        /**< \brief [29:29] Clear channel disabled TRL error (w) */
    __O  Ifx_UReg_32Bit CDCTRLER:1;        /**< \brief [30:30] Clear daisy chain TRL error (w) */
    __O  Ifx_UReg_32Bit CIRTRLER:1;        /**< \brief [31:31] Clear invalid resource partition TRL error (w) */
} Ifx_DMA_RP_CLRE_Bits;

/** \brief RP 0 enable error register */
typedef struct _Ifx_DMA_RP_EER_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ESER:1;            /**< \brief [16:16] Enable RP source error (rw) */
    __IO Ifx_UReg_32Bit EDER:1;            /**< \brief [17:17] Enable RP destination error (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [25:18] \internal Reserved */
    __IO Ifx_UReg_32Bit ELER:1;            /**< \brief [26:26] Enable RP DMA linked list error (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [28:27] \internal Reserved */
    __IO Ifx_UReg_32Bit ECDTER:1;          /**< \brief [29:29] Enable RP channel disabled TRL error (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_DMA_RP_EER_Bits;

/** \brief RP 0 error interrupt set register */
typedef struct _Ifx_DMA_RP_ERRINTR_Bits
{
    __O  Ifx_UReg_32Bit SIT:1;             /**< \brief [0:0] Set error interrupt service request (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMA_RP_ERRINTR_Bits;

/** \brief RP 0 error status register */
typedef struct _Ifx_DMA_RP_ERRSR_Bits
{
    __I  Ifx_UReg_32Bit LEC:7;             /**< \brief [6:0] RP last error channel (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [15:7] \internal Reserved */
    __I  Ifx_UReg_32Bit SER:1;             /**< \brief [16:16] RP source error (rh) */
    __I  Ifx_UReg_32Bit DER:1;             /**< \brief [17:17] RP destination error (rh) */
    __I  Ifx_UReg_32Bit OVFLER:1;          /**< \brief [18:18] RP error status overflow (rh) */
    __I  Ifx_UReg_32Bit TCSCER:1;          /**< \brief [19:19] RP TCS configuration error (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __I  Ifx_UReg_32Bit RAMER:1;           /**< \brief [24:24] RP RAM error (rh) */
    __I  Ifx_UReg_32Bit CLLER:1;           /**< \brief [25:25] RP checked linked list error (rh) */
    __I  Ifx_UReg_32Bit DLLER:1;           /**< \brief [26:26] RP DMA linked list error (rh) */
    __I  Ifx_UReg_32Bit DBTRLER:1;         /**< \brief [27:27] Double buffer TRL error (rh) */
    __I  Ifx_UReg_32Bit CBTRLER:1;         /**< \brief [28:28] Channel busy TRL error (rh) */
    __I  Ifx_UReg_32Bit CDTRLER:1;         /**< \brief [29:29] Channel disabled TRL error (rh) */
    __I  Ifx_UReg_32Bit DCTRLER:1;         /**< \brief [30:30] Daisy chain TRL error (rh) */
    __I  Ifx_UReg_32Bit IRTRLER:1;         /**< \brief [31:31] Invalid resource partition TRL error (rh) */
} Ifx_DMA_RP_ERRSR_Bits;

/** \brief RP 0 mode register */
typedef struct _Ifx_DMA_RP_MODE_Bits
{
    __IO Ifx_Strict_32Bit MODE:1;          /**< \brief [0:0] Resource partition supervisor mode (rw) */
    __IO Ifx_Strict_32Bit CS:1;            /**< \brief [1:1] Cyber-security assignment (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [15:2] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine information (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine enable (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set information (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set enable (rw) */
    __IO Ifx_Strict_32Bit TAGOFF:3;        /**< \brief [26:24] Tag offset (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [30:27] \internal Reserved */
    __IO Ifx_Strict_32Bit VALID:1;         /**< \brief [31:31] Resource partition valid (rw) */
} Ifx_DMA_RP_MODE_Bits;

/** \brief RP 0 pattern read register 0 */
typedef struct _Ifx_DMA_RP_PRRA_Bits
{
    __IO Ifx_UReg_32Bit PAT00:8;           /**< \brief [7:0] Pattern data byte (rw) */
    __IO Ifx_UReg_32Bit PAT01:8;           /**< \brief [15:8] Pattern data byte (rw) */
    __IO Ifx_UReg_32Bit PAT02:8;           /**< \brief [23:16] Pattern data byte (rw) */
    __IO Ifx_UReg_32Bit PAT03:8;           /**< \brief [31:24] Pattern data byte (rw) */
} Ifx_DMA_RP_PRRA_Bits;

/** \brief RP 0 pattern read register 1 */
typedef struct _Ifx_DMA_RP_PRRB_Bits
{
    __IO Ifx_UReg_32Bit PAT10:8;           /**< \brief [7:0] Pattern data byte (rw) */
    __IO Ifx_UReg_32Bit PAT11:8;           /**< \brief [15:8] Pattern data byte (rw) */
    __IO Ifx_UReg_32Bit PAT12:8;           /**< \brief [23:16] Pattern data byte (rw) */
    __IO Ifx_UReg_32Bit PAT13:8;           /**< \brief [31:24] Pattern data byte (rw) */
} Ifx_DMA_RP_PRRB_Bits;

/** \brief DMA channel 000 suspend acknowledge register */
typedef struct _Ifx_DMA_SUSACR_Bits
{
    __I  Ifx_UReg_32Bit SUSAC:1;           /**< \brief [0:0] DMA channel suspend state or frozen state active for DMA channel (rh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMA_SUSACR_Bits;

/** \brief DMA channel 000 suspend enable register */
typedef struct _Ifx_DMA_SUSENR_Bits
{
    __IO Ifx_UReg_32Bit SUSEN:1;           /**< \brief [0:0] Channel suspend enable for DMA channel (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMA_SUSENR_Bits;

/** \brief DMA time register */
typedef struct _Ifx_DMA_TIME_Bits
{
    __IO Ifx_Strict_32Bit COUNT:32;        /**< \brief [31:0] Timestamp count (rwh) */
} Ifx_DMA_TIME_Bits;

/** \brief DMA time OCDS control and status register */
typedef struct _Ifx_DMA_TIMEOCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS suspend control (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS write protection (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend state (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_DMA_TIMEOCS_Bits;

/** \brief DMA channel 000 transaction state register */
typedef struct _Ifx_DMA_TSR_Bits
{
    __IO Ifx_UReg_32Bit RST:1;             /**< \brief [0:0] DMA channel reset (rw1sh) */
    __I  Ifx_UReg_32Bit HTRE:1;            /**< \brief [1:1] DMA channel hardware request enable (rh) */
    __I  Ifx_UReg_32Bit TRL:1;             /**< \brief [2:2] DMA channel transaction request lost (rh) */
    __I  Ifx_UReg_32Bit CH:1;              /**< \brief [3:3] DMA channel transaction request state (rh) */
    __IO Ifx_UReg_32Bit ETRL:1;            /**< \brief [4:4] Enable DMA channel transaction request lost interrupt (rw) */
    __IO Ifx_UReg_32Bit WWC:1;             /**< \brief [5:5] Wait for write completion (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit HLTREQ:1;          /**< \brief [8:8] DMA channel halt request (rw1sh) */
    __I  Ifx_UReg_32Bit HLTACK:1;          /**< \brief [9:9] DMA channel halt acknowledge (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __O  Ifx_UReg_32Bit ECH:1;             /**< \brief [16:16] Enable DMA channel hardware transaction request (w) */
    __O  Ifx_UReg_32Bit DCH:1;             /**< \brief [17:17] Disable DMA channel hardware transaction request (w) */
    __O  Ifx_UReg_32Bit CTL:1;             /**< \brief [18:18] Clear DMA channel transaction request lost (w) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [23:19] \internal Reserved */
    __O  Ifx_UReg_32Bit HLTCLR:1;          /**< \brief [24:24] Clear DMA channel halt request and acknowledge (w) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_DMA_TSR_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_dma_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_DMA_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_DMA_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_DMA_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_DMA_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_DMA_ACCEN_WRB_FPI;

/** \brief DMA channel 000 address and interrupt control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_ADICR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_CH_ADICR;

/** \brief DMA channel 000 configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_CHCFGR_Bits B;              /**< \brief Bitfield access */
} Ifx_DMA_CH_CHCFGR;

/** \brief DMA channel 000 control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_CHCSR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_CH_CHCSR;

/** \brief DMA channel 000 destination address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_DADR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_CH_DADR;

/** \brief DMA channel 000 read data CRC register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_RDCRCR_Bits B;              /**< \brief Bitfield access */
} Ifx_DMA_CH_RDCRCR;

/** \brief DMA channel 000 source address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_SADR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_CH_SADR;

/** \brief DMA channel 000 source and destination address CRC register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_SDCRCR_Bits B;              /**< \brief Bitfield access */
} Ifx_DMA_CH_SDCRCR;

/** \brief DMA channel 000 shadow address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CH_SHADR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_CH_SHADR;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_DMA_CLC;

/** \brief DMA clear error register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_CLRE_Bits B;                   /**< \brief Bitfield access */
} Ifx_DMA_CLRE;

/** \brief DMA error status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ERRSR_Bits B;                  /**< \brief Bitfield access */
} Ifx_DMA_ERRSR;

/** \brief DMA channel 000 resource partition assignment register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_HRR_Bits B;                    /**< \brief Bitfield access */
} Ifx_DMA_HRR;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_DMA_ID;

/** \brief    */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_LCLTEST_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_LCLTEST;

/** \brief ME 0 channel address and interrupt control register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_ADICR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_ME_ADICR;

/** \brief ME 0 channel control register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_CHCR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_ME_CHCR;

/** \brief ME 0 channel status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_CHSR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_ME_CHSR;

/** \brief ME 0 channel destination address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_DADR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_ME_DADR;

/** \brief ME 0 channel read data CRC register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_RDCRC_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_ME_RDCRC;

/** \brief ME 0 channel source address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_SADR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_ME_SADR;

/** \brief ME 0 channel source and destination address CRC register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_SDCRC_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_ME_SDCRC;

/** \brief ME 0 channel shadow address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_SHADR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_ME_SHADR;

/** \brief ME 0 status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_ME_SR_Bits B;                  /**< \brief Bitfield access */
} Ifx_DMA_ME_SR;

/** \brief OCDS trigger set select   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_OTSS_Bits B;                   /**< \brief Bitfield access */
} Ifx_DMA_OTSS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_DMA_PROT;

/** \brief PROT register cyber-security endinit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_PROTCSE_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_PROTCSE;

/** \brief RP 0 clear error register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_CLRE_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_RP_CLRE;

/** \brief RP 0 enable error register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_EER_Bits B;                 /**< \brief Bitfield access */
} Ifx_DMA_RP_EER;

/** \brief RP 0 error interrupt set register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_ERRINTR_Bits B;             /**< \brief Bitfield access */
} Ifx_DMA_RP_ERRINTR;

/** \brief RP 0 error status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_ERRSR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMA_RP_ERRSR;

/** \brief RP 0 mode register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_MODE_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_RP_MODE;

/** \brief RP 0 pattern read register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_PRRA_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_RP_PRRA;

/** \brief RP 0 pattern read register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_RP_PRRB_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_RP_PRRB;

/** \brief DMA channel 000 suspend acknowledge register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_SUSACR_Bits B;                 /**< \brief Bitfield access */
} Ifx_DMA_SUSACR;

/** \brief DMA channel 000 suspend enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_SUSENR_Bits B;                 /**< \brief Bitfield access */
} Ifx_DMA_SUSENR;

/** \brief DMA time register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_TIME_Bits B;                   /**< \brief Bitfield access */
} Ifx_DMA_TIME;

/** \brief DMA time OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_TIMEOCS_Bits B;                /**< \brief Bitfield access */
} Ifx_DMA_TIMEOCS;

/** \brief DMA channel 000 transaction state register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMA_TSR_Bits B;                    /**< \brief Bitfield access */
} Ifx_DMA_TSR;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dma_ME_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ME object */
typedef volatile struct _Ifx_DMA_ME
{
       __I  Ifx_UReg_8Bit                       reserved_0[16];         /**< \brief 0, \internal Reserved */
       __I  Ifx_DMA_ME_SR                       SR;                     /**< \brief 10, ME 0 status register*/
       __I  Ifx_UReg_8Bit                       reserved_14[76];        /**< \brief 14, \internal Reserved */
       __I  Ifx_DMA_ME_RDCRC                    RDCRC;                  /**< \brief 60, ME 0 channel read data CRC register*/
       __I  Ifx_DMA_ME_SDCRC                    SDCRC;                  /**< \brief 64, ME 0 channel source and destination address CRC register*/
       __I  Ifx_DMA_ME_SADR                     SADR;                   /**< \brief 68, ME 0 channel source address register*/
       __I  Ifx_DMA_ME_DADR                     DADR;                   /**< \brief 6C, ME 0 channel destination address register*/
       __I  Ifx_DMA_ME_ADICR                    ADICR;                  /**< \brief 70, ME 0 channel address and interrupt control register*/
       __I  Ifx_DMA_ME_CHCR                     CHCR;                   /**< \brief 74, ME 0 channel control register*/
       __I  Ifx_DMA_ME_SHADR                    SHADR;                  /**< \brief 78, ME 0 channel shadow address register*/
       __I  Ifx_DMA_ME_CHSR                     CHSR;                   /**< \brief 7C, ME 0 channel status register*/
} Ifx_DMA_ME;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dma_RP_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_DMA_RP_ACCEN
{
       __IO Ifx_DMA_ACCEN_WRA                   WRA;                    /**< \brief 0, RP 0 write access enable register A*/
       __IO Ifx_DMA_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, RP 0 write access enable register B*/
       __IO Ifx_DMA_ACCEN_RDA                   RDA;                    /**< \brief 8, RP 0 read access enable register A*/
       __IO Ifx_DMA_ACCEN_RDB_FPI               RDB;                    /**< \brief C, RP 0 read access enable register B*/
       __IO Ifx_DMA_ACCEN_VM                    VM;                     /**< \brief 10, RP 0 VM access enable register*/
       __IO Ifx_DMA_ACCEN_PRS                   PRS;                    /**< \brief 14, RP 0 PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_DMA_RP_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dma_RP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RP object */
typedef volatile struct _Ifx_DMA_RP
{
       __IO Ifx_DMA_RP_ACCEN                    ACCEN;                  /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_DMA_PROT                        PROT;                   /**< \brief 20, PROT register RP 0*/
       __I  Ifx_UReg_8Bit                       reserved_24[12];        /**< \brief 24, \internal Reserved */
       __IO Ifx_DMA_RP_MODE                     MODE;                   /**< \brief 30, RP 0 mode register*/
       __I  Ifx_UReg_8Bit                       reserved_34[4];         /**< \brief 34, \internal Reserved */
       __IO Ifx_DMA_RP_PRRA                     PRRA;                   /**< \brief 38, RP 0 pattern read register 0*/
       __IO Ifx_DMA_RP_PRRB                     PRRB;                   /**< \brief 3C, RP 0 pattern read register 1*/
       __O  Ifx_DMA_RP_ERRINTR                  ERRINTR;                /**< \brief 40, RP 0 error interrupt set register*/
       __IO Ifx_DMA_RP_EER                      EER;                    /**< \brief 44, RP 0 enable error register*/
       __I  Ifx_DMA_RP_ERRSR                    ERRSR;                  /**< \brief 48, RP 0 error status register*/
       __O  Ifx_DMA_RP_CLRE                     CLRE;                   /**< \brief 4C, RP 0 clear error register*/
       __I  Ifx_UReg_8Bit                       reserved_50[48];        /**< \brief 50, \internal Reserved */
} Ifx_DMA_RP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dma_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_DMA_CH
{
       __IO Ifx_DMA_CH_RDCRCR                   RDCRCR;                 /**< \brief 0, DMA channel 000 read data CRC register*/
       __IO Ifx_DMA_CH_SDCRCR                   SDCRCR;                 /**< \brief 4, DMA channel 000 source and destination address CRC register*/
       __IO Ifx_DMA_CH_SADR                     SADR;                   /**< \brief 8, DMA channel 000 source address register*/
       __IO Ifx_DMA_CH_DADR                     DADR;                   /**< \brief C, DMA channel 000 destination address register*/
       __IO Ifx_DMA_CH_ADICR                    ADICR;                  /**< \brief 10, DMA channel 000 address and interrupt control register*/
       __IO Ifx_DMA_CH_CHCFGR                   CHCFGR;                 /**< \brief 14, DMA channel 000 configuration register*/
       __IO Ifx_DMA_CH_SHADR                    SHADR;                  /**< \brief 18, DMA channel 000 shadow address register*/
       __IO Ifx_DMA_CH_CHCSR                    CHCSR;                  /**< \brief 1C, DMA channel 000 control and status register*/
} Ifx_DMA_CH;

/******************************************************************************/
/** \addtogroup IfxSfr_Dma_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief DMA object */
typedef volatile struct _Ifx_DMA
{
       __IO Ifx_DMA_CLC                         CLC;                    /**< \brief 0, Clock control register*/
       __IO Ifx_DMA_OTSS                        OTSS;                   /**< \brief 4, OCDS trigger set select*/
       __I  Ifx_DMA_ID                          ID;                     /**< \brief 8, Module identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[24];         /**< \brief C, \internal Reserved */
       __IO Ifx_DMA_PROT                        PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __IO Ifx_DMA_PROTCSE                     PROTCSE;                /**< \brief 28, PROT register cyber-security endinit*/
       __I  Ifx_UReg_8Bit                       reserved_2C[84];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_DMA_TIME                        TIME;                   /**< \brief 80, DMA time register*/
       __I  Ifx_DMA_ERRSR                       ERRSR;                  /**< \brief 84, DMA error status register*/
       __O  Ifx_DMA_CLRE                        CLRE;                   /**< \brief 88, DMA clear error register*/
       __IO Ifx_DMA_TIMEOCS                     TIMEOCS;                /**< \brief 8C, DMA time OCDS control and status register*/
       __O  Ifx_DMA_LCLTEST                     LCLTEST;                /**< \brief 90, DMA LCL test register*/
       __I  Ifx_UReg_8Bit                       reserved_94[876];       /**< \brief 94, \internal Reserved */
       __IO Ifx_DMA_ME                          ME0;                    /**< \brief 400, */
       __I  Ifx_UReg_8Bit                       reserved_480[384];      /**< \brief 480, \internal Reserved */
       __IO Ifx_DMA_ME                          ME1;                    /**< \brief 600, */
       __I  Ifx_UReg_8Bit                       reserved_680[2432];     /**< \brief 680, \internal Reserved */
       __IO Ifx_DMA_RP                          RP[16];                 /**< \brief 1000, */
       __IO Ifx_DMA_HRR                         HRR[128];               /**< \brief 1800, DMA channel 000 resource partition assignment register*/
       __IO Ifx_DMA_SUSENR                      SUSENR[128];            /**< \brief 1A00, DMA channel 000 suspend enable register*/
       __I  Ifx_DMA_SUSACR                      SUSACR[128];            /**< \brief 1C00, DMA channel 000 suspend acknowledge register*/
       __IO Ifx_DMA_TSR                         TSR[128];               /**< \brief 1E00, DMA channel 000 transaction state register*/
       __IO Ifx_DMA_CH                          CH[128];                /**< \brief 2000, */
       __I  Ifx_UReg_8Bit                       reserved_3000[4096];    /**< \brief 3000, \internal Reserved */
} Ifx_DMA;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXDMA_REGDEF_H */
