/**********************************************************************************************************************
 * \file spi.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SPI_H_
#define SPI_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"
#include "scr_irq_sdcc.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/

/* Enumeration describing data width selection */
typedef enum
{
    IfxScrSpi_Baudrate_152Baud  = 0xFFFF,   /* 152.59 Baud, deviation 0.0% */
    IfxScrSpi_Baudrate_100kBaud = 0x0063,   /* 100 kBaud, deviation 0.0% */
    IfxScrSpi_Baudrate_500kBaud = 0x0013,   /* 500 kBaud, deviation 0.0% */
    IfxScrSpi_Baudrate_1MBaud   = 0x0009,   /* 1 MBaud, deviation 0.0% */
    IfxScrSpi_Baudrate_2MBaud   = 0x0004    /* 2 MBaud (only master mode), deviation 0.0% */
} IfxScrSpi_Baudrate;

/* Enumeration describing SPI input/output select for MISO, MOSI, CLK and CS lines */
typedef enum
{
    IfxScrSpi_Invalid = 0,       /* No input/output selected */
    IfxScrSpi_IoSel_A = 1,       /* SPI input/output select A */
    IfxScrSpi_IoSel_B = 2,       /* SPI input/output select B */
    IfxScrSpi_IoSel_C = 3,       /* SPI input/output select C */
    IfxScrSpi_IoSel_D = 4        /* SPI input/output select D */
} IfxScrSpi_IoSel;

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
 
/* SPI configuration structure */
typedef struct
{
    IfxScrSpi_Baudrate  baudrate;               /* Baudrate (BRH, BRL as uint16 ) */
    IfxScrSpi_IoSel     sclkIo;                 /* Clock line (SCLK), Master OUT
                                                 *  SCLK_O: A = P33.2 / B = P33.7  / C = P33.9 / D = P33.11
                                                 */
    IfxScrSpi_IoSel     mosiIo;                 /* Master transmit, slave receive line (MTSR/MOSI), Master OUT
                                                 *  MTSR_O: A = P33.0 / B = P33.6  / C = P33.12
                                                 */
    IfxScrSpi_IoSel     misoIo;                 /* Master receive, slave transmit line (MRST/MISO), Master IN
                                                 *  MRST_I: A = P33.5 / B = P33.13 / C = P33.1
                                                 */
    IfxScrSpi_IoSel     csIo;                   /* Chip select line (CS), Master OUT
                                                 * (only limited by example code, can be any free pin)
                                                 *  CS: A = P33.3 / B = P33.4  / C = P33.9 / D = P33.10
                                                 */
} IfxScrSpi_Config;

/*********************************************************************************************************************/
/*--------------------------------------------Private Variables/Constants--------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void sscIsrHandler(void) __interrupt (XINTR7);

void Scr_spi_master_init(IfxScrSpi_Config * spiConfig);
void Scr_spi_master_transfer(uint8 __data * pTxBuffer, uint8 __data * pRxBuffer, uint8 size);

boolean Scr_spi_start_transfer(uint8 __data * pTxBuffer, uint8 __data * pRxBuffer, uint8 size);
boolean Scr_spi_is_busy(void);
void Scr_spi_stop_transfer(void);

#endif /* SPI_H_ */
