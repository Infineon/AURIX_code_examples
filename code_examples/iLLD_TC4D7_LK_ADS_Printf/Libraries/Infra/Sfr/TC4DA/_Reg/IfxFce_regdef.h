/**
 * \file IfxFce_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_FCE/V0.2.2.1.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Fce_Registers Fce Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Fce_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Fce_Registers
 * 
 * \defgroup IfxSfr_Fce_Registers_union Register unions
 * \ingroup IfxSfr_Fce_Registers
 * 
 * \defgroup IfxSfr_Fce_Registers_struct Memory map
 * \ingroup IfxSfr_Fce_Registers
 */
#ifndef IFXFCE_REGDEF_H
#define IFXFCE_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Fce_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_FCE_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_FCE_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_FCE_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_FCE_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_FCE_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_FCE_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_FCE_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_FCE_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_FCE_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_FCE_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_FCE_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_FCE_ACCEN_WRB_FPI_Bits;

/** \brief Channels status register */
typedef struct _Ifx_FCE_CHSTS_Bits
{
    __I  Ifx_UReg_32Bit CH0:1;             /**< \brief [0:0] Channel0 Status - CH0 (rh) */
    __I  Ifx_UReg_32Bit CH1:1;             /**< \brief [1:1] Channel1 Status - CH1 (rh) */
    __I  Ifx_UReg_32Bit CH2:1;             /**< \brief [2:2] Channel2 Status - CH2 (rh) */
    __I  Ifx_UReg_32Bit CH3:1;             /**< \brief [3:3] Channel3 Status - CH3 (rh) */
    __I  Ifx_UReg_32Bit CH4:1;             /**< \brief [4:4] Channel4 Status - CH4 (rh) */
    __I  Ifx_UReg_32Bit CH5:1;             /**< \brief [5:5] Channel5 Status - CH5 (rh) */
    __I  Ifx_UReg_32Bit CH6:1;             /**< \brief [6:6] Channel6 Status - CH6 (rh) */
    __I  Ifx_UReg_32Bit CH7:1;             /**< \brief [7:7] Channel7 Status - CH7 (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_FCE_CHSTS_Bits;

/** \brief Clock control register */
typedef struct _Ifx_FCE_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_FCE_CLC_Bits;

/** \brief Module identification register */
typedef struct _Ifx_FCE_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUMBER (r) */
} Ifx_FCE_ID_Bits;

/** \brief CRC configuration register 0 */
typedef struct _Ifx_FCE_IN_CFG_Bits
{
    __IO Ifx_UReg_32Bit CMI:1;             /**< \brief [0:0] CRC Mismatch Interrupt - CMI (rw) */
    __IO Ifx_UReg_32Bit CEI:1;             /**< \brief [1:1] Configuration Error Interrupt - CEI (rw) */
    __IO Ifx_UReg_32Bit LEI:1;             /**< \brief [2:2] Length Error Interrupt - LEI (rw) */
    __IO Ifx_UReg_32Bit BEI:1;             /**< \brief [3:3] Bus Error Interrupt - BEI (rw) */
    __IO Ifx_UReg_32Bit CCE:1;             /**< \brief [4:4] CRC Check Comparison - CCE (rw) */
    __IO Ifx_UReg_32Bit ALR:1;             /**< \brief [5:5] Automatic Length Reload - ALR (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit REFIN:1;           /**< \brief [8:8] IR Byte Wise Reflection - REFIN (rw) */
    __IO Ifx_UReg_32Bit REFOUT:1;          /**< \brief [9:9] CRC Bit Wise Reflection - REFOUT (rw) */
    __IO Ifx_UReg_32Bit XSEL:1;            /**< \brief [10:10] Selects the value to be XORed with the final CRC - XSEL (rw) */
    __IO Ifx_UReg_32Bit BYTESWAP:1;        /**< \brief [11:11] Swaps the order of the bytes in the IR input register. - BYTESWAP (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit KERNEL:4;          /**< \brief [19:16] Selects the CRC Kernel (Polynomial Engine) used by this channel. - KERNEL (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_FCE_IN_CFG_Bits;

/** \brief CRC check register 0 */
typedef struct _Ifx_FCE_IN_CHECK_Bits
{
    __IO Ifx_UReg_32Bit CHECK:32;          /**< \brief [31:0] CHECK Register - CHECK (rw) */
} Ifx_FCE_IN_CHECK_Bits;

/** \brief CRC register 0 */
typedef struct _Ifx_FCE_IN_CRC_Bits
{
    __IO Ifx_UReg_32Bit CRC:32;            /**< \brief [31:0] CRC Register - CRC (rwh) */
} Ifx_FCE_IN_CRC_Bits;

/** \brief CRC test register 0 */
typedef struct _Ifx_FCE_IN_CTR_Bits
{
    __IO Ifx_UReg_32Bit FCM:1;             /**< \brief [0:0] Force CRC Mismatch - FCM (rw) */
    __IO Ifx_UReg_32Bit FRM_CFG:1;         /**< \brief [1:1] Force CFG Register Mismatch - FRM_CFG (rw) */
    __IO Ifx_UReg_32Bit FRM_CHECK:1;       /**< \brief [2:2] Force Check Register Mismatch - FRM_CHECK (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_FCE_IN_CTR_Bits;

/** \brief Input register 0 */
typedef struct _Ifx_FCE_IN_IR_Bits
{
    __IO Ifx_UReg_32Bit IR:32;             /**< \brief [31:0] Input Register - IR (rw) */
} Ifx_FCE_IN_IR_Bits;

/** \brief CRC length register 0 */
typedef struct _Ifx_FCE_IN_LENGTH_Bits
{
    __IO Ifx_UReg_32Bit LENGTH:16;         /**< \brief [15:0] Message Length Register - LENGTH (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_FCE_IN_LENGTH_Bits;

/** \brief CRC result register 0 */
typedef struct _Ifx_FCE_IN_RES_Bits
{
    __I  Ifx_UReg_32Bit RES:32;            /**< \brief [31:0] Result Register - RES (rh) */
} Ifx_FCE_IN_RES_Bits;

/** \brief CRC status register 0 */
typedef struct _Ifx_FCE_IN_STS_Bits
{
    __IO Ifx_UReg_32Bit CMF:1;             /**< \brief [0:0] CRC Mismatch Flag - CMF (rw0ch) */
    __IO Ifx_UReg_32Bit CEF:1;             /**< \brief [1:1] Configuration Error Flag - CEF (rw0ch) */
    __IO Ifx_UReg_32Bit LEF:1;             /**< \brief [2:2] Length Error Flag - LEF (rw0ch) */
    __IO Ifx_UReg_32Bit BEF:1;             /**< \brief [3:3] Bus Error Flag - BEF (rw0ch) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_FCE_IN_STS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_FCE_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_FCE_PROT_Bits;

/** \brief Resource allocation register for FCE channels */
typedef struct _Ifx_FCE_RESALLOC_CH_Bits
{
    __IO Ifx_UReg_32Bit CH0:2;             /**< \brief [1:0] APU Assignment for FCE channel 0 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CH1:2;             /**< \brief [5:4] APU Assignment for FCE channel 1 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit CH2:2;             /**< \brief [9:8] APU Assignment for FCE channel 2 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit CH3:2;             /**< \brief [13:12] APU Assignment for FCE channel 3 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit CH4:2;             /**< \brief [17:16] APU Assignment for FCE channel 4 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [19:18] \internal Reserved */
    __IO Ifx_UReg_32Bit CH5:2;             /**< \brief [21:20] APU Assignment for FCE channel 5 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit CH6:2;             /**< \brief [25:24] APU Assignment for FCE channel 6 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [27:26] \internal Reserved */
    __IO Ifx_UReg_32Bit CH7:2;             /**< \brief [29:28] APU Assignment for FCE channel 7 (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_FCE_RESALLOC_CH_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_FCE_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_FCE_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_FCE_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_FCE_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_FCE_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_FCE_RST_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_fce_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_FCE_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_FCE_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_FCE_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_FCE_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_FCE_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_FCE_ACCEN_WRB_FPI;

/** \brief Channels status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_CHSTS_Bits B;                  /**< \brief Bitfield access */
} Ifx_FCE_CHSTS;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_FCE_CLC;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_FCE_ID;

/** \brief CRC configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_CFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_FCE_IN_CFG;

/** \brief CRC check register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_CHECK_Bits B;               /**< \brief Bitfield access */
} Ifx_FCE_IN_CHECK;

/** \brief CRC register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_CRC_Bits B;                 /**< \brief Bitfield access */
} Ifx_FCE_IN_CRC;

/** \brief CRC test register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_CTR_Bits B;                 /**< \brief Bitfield access */
} Ifx_FCE_IN_CTR;

/** \brief Input register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_IR_Bits B;                  /**< \brief Bitfield access */
} Ifx_FCE_IN_IR;

/** \brief CRC length register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_LENGTH_Bits B;              /**< \brief Bitfield access */
} Ifx_FCE_IN_LENGTH;

/** \brief CRC result register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_RES_Bits B;                 /**< \brief Bitfield access */
} Ifx_FCE_IN_RES;

/** \brief CRC status register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_IN_STS_Bits B;                 /**< \brief Bitfield access */
} Ifx_FCE_IN_STS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_FCE_PROT;

/** \brief Resource allocation register for FCE channels   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_RESALLOC_CH_Bits B;            /**< \brief Bitfield access */
} Ifx_FCE_RESALLOC_CH;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_FCE_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_FCE_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_FCE_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_FCE_RST_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Fce_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_FCE_RST
{
       __IO Ifx_FCE_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_FCE_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_FCE_RST_STAT                    STAT;                   /**< \brief 8, Reset status register*/
} Ifx_FCE_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Fce_RESALLOC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RESALLOC object */
typedef volatile struct _Ifx_FCE_RESALLOC
{
       __IO Ifx_FCE_RESALLOC_CH                 CH;                     /**< \brief 0, Resource allocation register for FCE channels*/
} Ifx_FCE_RESALLOC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Fce_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_FCE_ACCEN
{
       __IO Ifx_FCE_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable 0 register A*/
       __IO Ifx_FCE_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable 0 register B*/
       __IO Ifx_FCE_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable 0 register A*/
       __IO Ifx_FCE_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable 0 register B*/
       __IO Ifx_FCE_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable 0 register*/
       __IO Ifx_FCE_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable 0 register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_FCE_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Fce_IN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief IN object */
typedef volatile struct _Ifx_FCE_IN
{
       __IO Ifx_FCE_IN_IR                       IR;                     /**< \brief 0, Input register 0*/
       __I  Ifx_FCE_IN_RES                      RES;                    /**< \brief 4, CRC result register 0*/
       __IO Ifx_FCE_IN_CFG                      CFG;                    /**< \brief 8, CRC configuration register 0*/
       __IO Ifx_FCE_IN_STS                      STS;                    /**< \brief C, CRC status register 0*/
       __IO Ifx_FCE_IN_LENGTH                   LENGTH;                 /**< \brief 10, CRC length register 0*/
       __IO Ifx_FCE_IN_CHECK                    CHECK;                  /**< \brief 14, CRC check register 0*/
       __IO Ifx_FCE_IN_CRC                      CRC;                    /**< \brief 18, CRC register 0*/
       __IO Ifx_FCE_IN_CTR                      CTR;                    /**< \brief 1C, CRC test register 0*/
} Ifx_FCE_IN;

/******************************************************************************/
/** \addtogroup IfxSfr_Fce_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief FCE object */
typedef volatile struct _Ifx_FCE
{
       __IO Ifx_FCE_CLC                         CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_FCE_ID                          ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_FCE_RST                         RST;                    /**< \brief C, Reset status register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_FCE_PROT                        PROTE;                  /**< \brief 20, PROT register endinit*/
       __IO Ifx_FCE_PROT                        PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __IO Ifx_FCE_RESALLOC                    RESALLOC;               /**< \brief 28, Resource allocation register for FCE channels*/
       __I  Ifx_UReg_8Bit                       reserved_2C[24];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_FCE_ACCEN                       ACCEN[3];               /**< \brief 44, */
       __I  Ifx_UReg_8Bit                       reserved_A4[28];        /**< \brief A4, \internal Reserved */
       __I  Ifx_FCE_CHSTS                       CHSTS;                  /**< \brief C0, Channels status register*/
       __I  Ifx_UReg_8Bit                       reserved_C4[60];        /**< \brief C4, \internal Reserved */
       __IO Ifx_FCE_IN                          IN[8];                  /**< \brief 100, CRC test register 0*/
} Ifx_FCE;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXFCE_REGDEF_H */
