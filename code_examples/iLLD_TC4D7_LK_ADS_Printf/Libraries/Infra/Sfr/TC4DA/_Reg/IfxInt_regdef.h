/**
 * \file IfxInt_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_IR/V13.1.1.0.7
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Int_Registers Int Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Int_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Int_Registers
 * 
 * \defgroup IfxSfr_Int_Registers_union Register unions
 * \ingroup IfxSfr_Int_Registers
 * 
 * \defgroup IfxSfr_Int_Registers_struct Memory map
 * \ingroup IfxSfr_Int_Registers
 */
#ifndef IFXINT_REGDEF_H
#define IFXINT_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Int_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_INT_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_INT_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_INT_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_INT_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_INT_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_INT_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_INT_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_INT_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_INT_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_INT_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_INT_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_INT_ACCEN_WRB_FPI_Bits;

/** \brief SW control register for GPSRGxSRy */
typedef struct _Ifx_INT_GPSRG_SWC_Bits
{
    __IO Ifx_UReg_32Bit DATA:16;           /**< \brief [15:0] DATA (rw) */
    __O  Ifx_UReg_32Bit LOCKSET:1;         /**< \brief [16:16] Sets LOCK bit (w) */
    __O  Ifx_UReg_32Bit LOCKCLR:1;         /**< \brief [17:17] Clears LOCK bit (w) */
    __I  Ifx_UReg_32Bit LOCKSTAT:1;        /**< \brief [18:18] Status of DATA lock (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [26:19] \internal Reserved */
    __IO Ifx_UReg_32Bit BRDIS:1;           /**< \brief [27:27] Broadcast disable (rw) */
    __I  Ifx_UReg_32Bit SRR:1;             /**< \brief [28:28] Service request status (rh) */
    __O  Ifx_UReg_32Bit SETR:1;            /**< \brief [29:29] Service request set (w) */
    __I  Ifx_UReg_32Bit IOV:1;             /**< \brief [30:30] Service request interupt overflow status (rh) */
    __O  Ifx_UReg_32Bit IOVCLR:1;          /**< \brief [31:31] Service request interupt overflow clear (w) */
} Ifx_INT_GPSRG_SWC_Bits;

/** \brief GPRSGx_SWCy write access protection register */
typedef struct _Ifx_INT_GPSRG_SWCACCEN_Bits
{
    __IO Ifx_UReg_32Bit CPU0_D:1;          /**< \brief [0:0] Access enable for CPU0 DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU0_DS:1;         /**< \brief [1:1] Access enable for CPUz DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU1_D:1;          /**< \brief [2:2] Access enable for CPU1 DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU1_DS:1;         /**< \brief [3:3] Access enable for CPUz DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU2_D:1;          /**< \brief [4:4] Access enable for CPU2 DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU2_DS:1;         /**< \brief [5:5] Access enable for CPUz DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU3_D:1;          /**< \brief [6:6] Access enable for CPU3 DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU3_DS:1;         /**< \brief [7:7] Access enable for CPUz DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU4_D:1;          /**< \brief [8:8] Access enable for CPU4 DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU4_DS:1;         /**< \brief [9:9] Access enable for CPUz DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU5_D:1;          /**< \brief [10:10] Access enable for CPU5 DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPU5_DS:1;         /**< \brief [11:11] Access enable for CPUz DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPUCS_D:1;         /**< \brief [12:12] Access enable for CSRM_CPU DMI non-safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CPUCS_DS:1;        /**< \brief [13:13] Access enable for CSRM_CPU DMI Safe TAG-ID (rw) */
    __IO Ifx_UReg_32Bit CBS_IOCE:1;        /**< \brief [14:14] Access enable for Cerberus and IOCE TAG-ID (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit VM_PRS0:1;         /**< \brief [16:16] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS1:1;         /**< \brief [17:17] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS2:1;         /**< \brief [18:18] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS3:1;         /**< \brief [19:19] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS4:1;         /**< \brief [20:20] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS5:1;         /**< \brief [21:21] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS6:1;         /**< \brief [22:22] Access enable for VM or PRS encoding i (rw) */
    __IO Ifx_UReg_32Bit VM_PRS7:1;         /**< \brief [23:23] Access enable for VM or PRS encoding i (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [30:24] \internal Reserved */
    __IO Ifx_UReg_32Bit VM_PRS_CTRL:1;     /**< \brief [31:31] VM_PRS control bit (rw) */
} Ifx_INT_GPSRG_SWCACCEN_Bits;

/** \brief ICU error capture register */
typedef struct _Ifx_INT_ICU_ECR_Bits
{
    __I  Ifx_UReg_32Bit PN:8;              /**< \brief [7:0] Service request priority number (rh) */
    __I  Ifx_UReg_32Bit ECC:6;             /**< \brief [13:8] Received ECC information (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit ID:11;             /**< \brief [26:16] Service request node index number (rh) */
    __I  Ifx_UReg_32Bit CS:1;              /**< \brief [27:27] Cyber security information (rh) */
    __I  Ifx_UReg_32Bit VM:3;              /**< \brief [30:28] Virtual machine number (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_INT_ICU_ECR_Bits;

/** \brief ICU error control register */
typedef struct _Ifx_INT_ICU_ECTRL_Bits
{
    __I  Ifx_UReg_32Bit STAT:1;            /**< \brief [0:0] Error status bit (rh) */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [1:1] Error status bit (w) */
    __I  Ifx_UReg_32Bit EOV:1;             /**< \brief [2:2] Error overflow bit (rh) */
    __O  Ifx_UReg_32Bit EOVCLR:1;          /**< \brief [3:3] Error overflow bit (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_INT_ICU_ECTRL_Bits;

/** \brief ICU error generation register */
typedef struct _Ifx_INT_ICU_EGEN_Bits
{
    __IO Ifx_UReg_32Bit ID:11;             /**< \brief [10:0] Service request node ID (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [29:11] \internal Reserved */
    __IO Ifx_UReg_32Bit CS:1;              /**< \brief [30:30] Cyber security (rw) */
    __IO Ifx_UReg_32Bit AE:1;              /**< \brief [31:31] Activate error enable (rw) */
} Ifx_INT_ICU_EGEN_Bits;

/** \brief ICU Last acknowledged service request register */
typedef struct _Ifx_INT_ICU_LASR_Bits
{
    __I  Ifx_UReg_32Bit PN:8;              /**< \brief [7:0] Service request priority number (rh) */
    __I  Ifx_UReg_32Bit ECC:6;             /**< \brief [13:8] Received ECC information (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit ID:11;             /**< \brief [26:16] Service request node index number (rh) */
    __I  Ifx_UReg_32Bit CS:1;              /**< \brief [27:27] Cyber security information (rh) */
    __I  Ifx_UReg_32Bit VM:3;              /**< \brief [30:28] Virtual machine number (rh) */
    __I  Ifx_UReg_32Bit ENTER:1;           /**< \brief [31:31] ENTER signal state (rh) */
} Ifx_INT_ICU_LASR_Bits;

/** \brief ICU latest service request information signaled for VMy */
typedef struct _Ifx_INT_ICU_LWSR_Bits
{
    __I  Ifx_UReg_32Bit PN:8;              /**< \brief [7:0] Priority number information (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [11:8] \internal Reserved */
    __I  Ifx_UReg_32Bit VALID:1;           /**< \brief [12:12] Status of signaled VALID (rh) */
    __I  Ifx_UReg_32Bit INVALID:1;         /**< \brief [13:13] Status of signaled INVALID (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit ID:11;             /**< \brief [26:16] Index number information (rh) */
    __I  Ifx_UReg_32Bit CS:1;              /**< \brief [27:27] Cyber security enable (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [30:28] \internal Reserved */
    __I  Ifx_UReg_32Bit STAT:1;            /**< \brief [31:31] LWSR register status (rh) */
} Ifx_INT_ICU_LWSR_Bits;

/** \brief ICU VM control register */
typedef struct _Ifx_INT_ICU_VMEN_Bits
{
    __IO Ifx_UReg_32Bit VM0:1;             /**< \brief [0:0] VM0 control (rw) */
    __IO Ifx_UReg_32Bit VM1:1;             /**< \brief [1:1] VM1 control (rw) */
    __IO Ifx_UReg_32Bit VM2:1;             /**< \brief [2:2] VM2 control (rw) */
    __IO Ifx_UReg_32Bit VM3:1;             /**< \brief [3:3] VM3 control (rw) */
    __IO Ifx_UReg_32Bit VM4:1;             /**< \brief [4:4] VM4 control (rw) */
    __IO Ifx_UReg_32Bit VM5:1;             /**< \brief [5:5] VM5 control (rw) */
    __IO Ifx_UReg_32Bit VM6:1;             /**< \brief [6:6] VM6 control (rw) */
    __IO Ifx_UReg_32Bit VM7:1;             /**< \brief [7:7] VM7 control (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_INT_ICU_VMEN_Bits;

/** \brief Module identification register */
typedef struct _Ifx_INT_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_INT_ID_Bits;

/** \brief  */
typedef struct _Ifx_INT_LCLTEST_Bits
{
    __O  Ifx_UReg_32Bit LCLT:1;            /**< \brief [0:0] LCL Lockstep Test - LCLT (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_INT_LCLTEST_Bits;

/** \brief OCDS control and status register */
typedef struct _Ifx_INT_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0 and OTGB1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0 and OTGB1 Bus Select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_INT_OCS_Bits;

/** \brief OTGB IRQ trace */
typedef struct _Ifx_INT_OIT_Bits
{
    __IO Ifx_UReg_32Bit TOS0:4;            /**< \brief [3:0] Selection of the ISP for observation through OTGB0. (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [6:4] \internal Reserved */
    __IO Ifx_UReg_32Bit OE0:1;             /**< \brief [7:7] Output Enable for OTGB0 (rw) */
    __IO Ifx_UReg_32Bit TOS1:4;            /**< \brief [11:8] Selection of the ISP for observation through OTGB1. (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [14:12] \internal Reserved */
    __IO Ifx_UReg_32Bit OE1:1;             /**< \brief [15:15] Output Enable for OTGB1 (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_INT_OIT_Bits;

/** \brief OTGB IRQ MUX missed IRQ select */
typedef struct _Ifx_INT_OIXMS_Bits
{
    __IO Ifx_UReg_32Bit MIRQ:11;           /**< \brief [10:0] SRN Index for Missed Interrupt Trigger (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_INT_OIXMS_Bits;

/** \brief OTGB IRQ MUX select 0 */
typedef struct _Ifx_INT_OIXS0_Bits
{
    __IO Ifx_UReg_32Bit IRQ0:11;           /**< \brief [10:0] SRN Index for Interrupt Trigger 0 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit IRQ1:11;           /**< \brief [26:16] SRN Index for Interrupt Trigger 1 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_INT_OIXS0_Bits;

/** \brief OTGB IRQ MUX select 1 */
typedef struct _Ifx_INT_OIXS1_Bits
{
    __IO Ifx_UReg_32Bit IRQ2:11;           /**< \brief [10:0] SRN Index for Interrupt Trigger 2 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit IRQ3:11;           /**< \brief [26:16] SRN Index for Interrupt Trigger 3 (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_INT_OIXS1_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_INT_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_INT_PROT_Bits;

/** \brief Service request broadcast register x */
typedef struct _Ifx_INT_SRB_Bits
{
    __O  Ifx_UReg_32Bit TRIG0:1;           /**< \brief [0:0] General purpose service request trigger 0 (w) */
    __O  Ifx_UReg_32Bit TRIG1:1;           /**< \brief [1:1] General purpose service request trigger 1 (w) */
    __O  Ifx_UReg_32Bit TRIG2:1;           /**< \brief [2:2] General purpose service request trigger 2 (w) */
    __O  Ifx_UReg_32Bit TRIG3:1;           /**< \brief [3:3] General purpose service request trigger 3 (w) */
    __O  Ifx_UReg_32Bit TRIG4:1;           /**< \brief [4:4] General purpose service request trigger 4 (w) */
    __O  Ifx_UReg_32Bit TRIG5:1;           /**< \brief [5:5] General purpose service request trigger 5 (w) */
    __O  Ifx_UReg_32Bit TRIG6:1;           /**< \brief [6:6] General purpose service request trigger 6 (w) */
    __O  Ifx_UReg_32Bit TRIG7:1;           /**< \brief [7:7] General purpose service request trigger 7 (w) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_INT_SRB_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_int_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_INT_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_INT_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_INT_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_INT_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_INT_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_INT_ACCEN_WRB_FPI;

/** \brief SW control register for GPSRGxSRy   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_GPSRG_SWC_Bits B;              /**< \brief Bitfield access */
} Ifx_INT_GPSRG_SWC;

/** \brief GPRSGx_SWCy write access protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_GPSRG_SWCACCEN_Bits B;         /**< \brief Bitfield access */
} Ifx_INT_GPSRG_SWCACCEN;

/** \brief ICU error capture register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ICU_ECR_Bits B;                /**< \brief Bitfield access */
} Ifx_INT_ICU_ECR;

/** \brief ICU error control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ICU_ECTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_INT_ICU_ECTRL;

/** \brief ICU error generation register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ICU_EGEN_Bits B;               /**< \brief Bitfield access */
} Ifx_INT_ICU_EGEN;

/** \brief ICU Last acknowledged service request register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ICU_LASR_Bits B;               /**< \brief Bitfield access */
} Ifx_INT_ICU_LASR;

/** \brief ICU latest service request information signaled for VMy   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ICU_LWSR_Bits B;               /**< \brief Bitfield access */
} Ifx_INT_ICU_LWSR;

/** \brief ICU VM control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ICU_VMEN_Bits B;               /**< \brief Bitfield access */
} Ifx_INT_ICU_VMEN;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_INT_ID;

/** \brief    */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_LCLTEST_Bits B;                /**< \brief Bitfield access */
} Ifx_INT_LCLTEST;

/** \brief OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_INT_OCS;

/** \brief OTGB IRQ trace   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_OIT_Bits B;                    /**< \brief Bitfield access */
} Ifx_INT_OIT;

/** \brief OTGB IRQ MUX missed IRQ select   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_OIXMS_Bits B;                  /**< \brief Bitfield access */
} Ifx_INT_OIXMS;

/** \brief OTGB IRQ MUX select 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_OIXS0_Bits B;                  /**< \brief Bitfield access */
} Ifx_INT_OIXS0;

/** \brief OTGB IRQ MUX select 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_OIXS1_Bits B;                  /**< \brief Bitfield access */
} Ifx_INT_OIXS1;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_INT_PROT;

/** \brief Service request broadcast register x   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_INT_SRB_Bits B;                    /**< \brief Bitfield access */
} Ifx_INT_SRB;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_INT_ACCENCS
{
       __IO Ifx_INT_ACCEN_WRA                   WRA;                    /**< \brief 0, CS write access enable register A*/
       __IO Ifx_INT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, CS write access enable register B*/
       __IO Ifx_INT_ACCEN_RDA                   RDA;                    /**< \brief 8, CS read access enable register A*/
       __IO Ifx_INT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, CS read access enable register B*/
       __IO Ifx_INT_ACCEN_VM                    VM;                     /**< \brief 10, CS VM access enable register*/
       __IO Ifx_INT_ACCEN_PRS                   PRS;                    /**< \brief 14, CS PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_INT_ACCENCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_ACCENDBG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENDBG object */
typedef volatile struct _Ifx_INT_ACCENDBG
{
       __IO Ifx_INT_ACCEN_WRA                   WRA;                    /**< \brief 0, DBG write access enable register A*/
       __IO Ifx_INT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, DBG write access enable register B*/
       __IO Ifx_INT_ACCEN_RDA                   RDA;                    /**< \brief 8, DBG read access enable register A*/
       __IO Ifx_INT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, DBG read access enable register B*/
       __IO Ifx_INT_ACCEN_VM                    VM;                     /**< \brief 10, DBG VM access enable register*/
       __IO Ifx_INT_ACCEN_PRS                   PRS;                    /**< \brief 14, DGB PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_INT_ACCENDBG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_ACCENSRB_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENSRB object */
typedef volatile struct _Ifx_INT_ACCENSRB
{
       __IO Ifx_INT_ACCEN_WRA                   WRA;                    /**< \brief 0, SRBy write access enable register A*/
       __IO Ifx_INT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, SRBy write access enable register B*/
       __IO Ifx_INT_ACCEN_RDA                   RDA;                    /**< \brief 8, SRBy read access enable register A*/
       __IO Ifx_INT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, SRBy read access enable register B*/
       __IO Ifx_INT_ACCEN_VM                    VM;                     /**< \brief 10, SRBy VM access enable register*/
       __IO Ifx_INT_ACCEN_PRS                   PRS;                    /**< \brief 14, SRBy PRS access enable register*/
} Ifx_INT_ACCENSRB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_TOS_ACCENSCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENSCFG object */
typedef volatile struct _Ifx_INT_TOS_ACCENSCFG
{
       __IO Ifx_INT_ACCEN_WRA                   WRA;                    /**< \brief 0, SRC[15:0] write access enable register A for TOS=z*/
       __IO Ifx_INT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, SRC[15:0] write access enable register B for TOS=z*/
       __IO Ifx_INT_ACCEN_RDA                   RDA;                    /**< \brief 8, SRC[15:0] read access enable register A for TOS=z*/
       __IO Ifx_INT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, SRC[15:0] read access enable register B for TOS=z*/
       __IO Ifx_INT_ACCEN_VM                    VM;                     /**< \brief 10, SRC[15:0] VM access enable register for TOS=z*/
       __IO Ifx_INT_ACCEN_PRS                   PRS;                    /**< \brief 14, SRC[15:0] PRS access enable register for TOS=z*/
} Ifx_INT_TOS_ACCENSCFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_TOS_ACCENSCTRL_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENSCTRL object */
typedef volatile struct _Ifx_INT_TOS_ACCENSCTRL
{
       __IO Ifx_INT_ACCEN_WRA                   WRA;                    /**< \brief 0, SRC[31:16] write access enable register A for TOS=z*/
       __IO Ifx_INT_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, SRC[31:16] write access enable register B for TOS=z*/
       __IO Ifx_INT_ACCEN_RDA                   RDA;                    /**< \brief 8, SRC[31:16] read access enable register A for TOS=z*/
       __IO Ifx_INT_ACCEN_RDB_FPI               RDB;                    /**< \brief C, SRC[31:16] read access enable register B for TOS=z*/
       __IO Ifx_INT_ACCEN_VM                    VM;                     /**< \brief 10, SRC[31:16] VM access enable register for TOS=z*/
       __IO Ifx_INT_ACCEN_PRS                   PRS;                    /**< \brief 14, SRC[31:16] PRS access enable register for TOS=z*/
} Ifx_INT_TOS_ACCENSCTRL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_TOS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TOS object */
typedef volatile struct _Ifx_INT_TOS
{
       __IO Ifx_INT_TOS_ACCENSCFG               ACCENSCFG;              /**< \brief 0, Access enable registers covering SRCx[15:0] mapped to ICUz*/
       __IO Ifx_INT_TOS_ACCENSCTRL              ACCENSCTRL;             /**< \brief 18, Access enable registers covering SRCx[31:16] mapped to ICUz*/
} Ifx_INT_TOS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_GPSRG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief GPSRG object */
typedef volatile struct _Ifx_INT_GPSRG
{
       __IO Ifx_INT_GPSRG_SWCACCEN              SWCACCEN[8];            /**< \brief 0, GPRSGx_SWCy write access protection register*/
       __IO Ifx_INT_GPSRG_SWC                   SWC[8];                 /**< \brief 20, SW control register for GPSRGxSRy*/
} Ifx_INT_GPSRG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Int_ICU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ICU object */
typedef volatile struct _Ifx_INT_ICU
{
       __I  Ifx_INT_ICU_LWSR                    LWSR[8];                /**< \brief 0, ICU latest service request information signaled for VMy*/
       __I  Ifx_INT_ICU_LASR                    LASR;                   /**< \brief 20, ICU Last acknowledged service request register*/
       __I  Ifx_INT_ICU_ECR                     ECR;                    /**< \brief 24, ICU error capture register*/
       __IO Ifx_INT_ICU_ECTRL                   ECTRL;                  /**< \brief 28, ICU error control register*/
       __IO Ifx_INT_ICU_EGEN                    EGEN;                   /**< \brief 2C, ICU error generation register*/
       __IO Ifx_INT_ICU_VMEN                    VMEN;                   /**< \brief 30, ICU VM control register*/
} Ifx_INT_ICU;

/******************************************************************************/
/** \addtogroup IfxSfr_Int_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief INT object */
typedef volatile struct _Ifx_INT
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __IO Ifx_INT_OCS                         OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_INT_ID                          ID;                     /**< \brief 8, Module identification register*/
       __O  Ifx_INT_LCLTEST                     LCLTEST;                /**< \brief C, LCL test register*/
       __IO Ifx_INT_OIXMS                       OIXMS;                  /**< \brief 10, OTGB IRQ MUX missed IRQ select*/
       __IO Ifx_INT_OIXS0                       OIXS0;                  /**< \brief 14, OTGB IRQ MUX select 0*/
       __IO Ifx_INT_OIXS1                       OIXS1;                  /**< \brief 18, OTGB IRQ MUX select 1*/
       __IO Ifx_INT_OIT                         OIT;                    /**< \brief 1C, OTGB IRQ trace*/
       __IO Ifx_INT_PROT                        PROTSE;                 /**< \brief 20, PROT register safe endinit*/
       __IO Ifx_INT_PROT                        PROTCSE;                /**< \brief 24, PROT register cyber security endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[8];         /**< \brief 28, \internal Reserved */
       __IO Ifx_INT_PROT                        PROTTOS[16];            /**< \brief 30, PROT register for TOS=z*/
       __I  Ifx_UReg_8Bit                       reserved_70[16];        /**< \brief 70, \internal Reserved */
       __IO Ifx_INT_ACCENCS                     ACCENCS;                /**< \brief 80, */
       __IO Ifx_INT_ACCENDBG                    ACCENDBG;               /**< \brief A0, */
       __I  Ifx_UReg_8Bit                       reserved_C0[64];        /**< \brief C0, \internal Reserved */
       __IO Ifx_INT_ACCENSRB                    ACCENSRB[16];           /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_280[128];      /**< \brief 280, \internal Reserved */
       __IO Ifx_INT_TOS                         TOS[16];                /**< \brief 300, Access enable registers covering SRCx[31:16] mapped to ICUz*/
       __I  Ifx_UReg_8Bit                       reserved_600[256];      /**< \brief 600, \internal Reserved */
       __IO Ifx_INT_GPSRG                       GPSRG[16];              /**< \brief 700, */
       __O  Ifx_INT_SRB                         SRB[16];                /**< \brief B00, Service request broadcast register x*/
       __I  Ifx_UReg_8Bit                       reserved_B40[192];      /**< \brief B40, \internal Reserved */
       __IO Ifx_INT_ICU                         ICU[16];                /**< \brief C00, ICU VM control register*/
       __I  Ifx_UReg_8Bit                       reserved_F40[4288];     /**< \brief F40, \internal Reserved */
} Ifx_INT;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXINT_REGDEF_H */
