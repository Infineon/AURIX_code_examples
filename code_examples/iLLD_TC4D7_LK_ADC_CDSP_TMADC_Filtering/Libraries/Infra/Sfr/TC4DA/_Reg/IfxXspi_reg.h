/**
 * \file IfxXspi_reg.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_XSPI/V0.2.2.0.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Xspi_Registers_Cfg Xspi address
 * \ingroup IfxSfr_Xspi_Registers
 * 
 * \defgroup IfxSfr_Xspi_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Xspi_Registers_Cfg
 *
 * \defgroup IfxSfr_Xspi_Registers_Cfg_Xspi0 2-XSPI0
 * \ingroup IfxSfr_Xspi_Registers_Cfg
 *
 *
 */
#ifndef IFXXSPI_REG_H
#define IFXXSPI_REG_H 1
/******************************************************************************/
#include "IfxXspi_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Xspi_Registers_Cfg_BaseAddress
 * \{  */

/** \brief XSPI object */
#define MODULE_XSPI0 /*lint --e(923, 9078)*/ ((*(Ifx_XSPI*)0xF9040000u))
/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Xspi_Registers_Cfg_Xspi0
 * \{  */
/** \brief 0, Clock Control Register */
#define XSPI0_CLC /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_CLC*)0xF9040000u)

/** \brief 4, OCDS Control and Status Register */
#define XSPI0_OCS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_OCS*)0xF9040004u)

/** \brief 8, Module Identification Register */
#define XSPI0_ID /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ID*)0xF9040008u)

/** \brief C, Reset Control Register A */
#define XSPI0_RST_CTRLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RST_CTRLA*)0xF904000Cu)

/** \brief 10, Reset Control Register B */
#define XSPI0_RST_CTRLB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RST_CTRLB*)0xF9040010u)

/** \brief 14, Reset Status Register */
#define XSPI0_RST_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RST_STAT*)0xF9040014u)

/** \brief 20, PROT Register Endinit */
#define XSPI0_PROTE /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_PROT*)0xF9040020u)

/** \brief 24, PROT Register Safe Endinit */
#define XSPI0_PROTSE /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_PROT*)0xF9040024u)

/** \brief 40, Write access enable register A */
#define XSPI0_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF9040040u)

/** \brief 44, Write access enable register B */
#define XSPI0_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF9040044u)

/** \brief 48, Read access enable register A */
#define XSPI0_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF9040048u)

/** \brief 4C, Read access enable register B */
#define XSPI0_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF904004Cu)

/** \brief 50, VM access enable register */
#define XSPI0_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF9040050u)

/** \brief 54, PRS access enable register */
#define XSPI0_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF9040054u)

/** \brief 60, CH0 Write access enable register A */
#define XSPI0_RGN0_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF9040060u)

/** \brief 64, CH0 Write access enable register B */
#define XSPI0_RGN0_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF9040064u)

/** \brief 68, CH0 Read access enable register A */
#define XSPI0_RGN0_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF9040068u)

/** \brief 6C, CH0 Read access enable register B */
#define XSPI0_RGN0_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF904006Cu)

/** \brief 70, CH0 VM access enable register */
#define XSPI0_RGN0_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF9040070u)

/** \brief 74, CH0 PRS access enable register */
#define XSPI0_RGN0_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF9040074u)

/** \brief 78, CH0 RGN Lower address */
#define XSPI0_RGN0_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF9040078u)

/** \brief 7C, CH0 RGN upper address */
#define XSPI0_RGN0_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF904007Cu)

/** \brief 80, CH1 Write access enable register A */
#define XSPI0_RGN1_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF9040080u)

/** \brief 84, CH1 Write access enable register B */
#define XSPI0_RGN1_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF9040084u)

/** \brief 88, CH1 Read access enable register A */
#define XSPI0_RGN1_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF9040088u)

/** \brief 8C, CH1 Read access enable register B */
#define XSPI0_RGN1_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF904008Cu)

/** \brief 90, CH1 VM access enable register */
#define XSPI0_RGN1_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF9040090u)

/** \brief 94, CH1 PRS access enable register */
#define XSPI0_RGN1_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF9040094u)

/** \brief 98, CH1 RGN Lower address */
#define XSPI0_RGN1_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF9040098u)

/** \brief 9C, CH1 RGN upper address */
#define XSPI0_RGN1_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF904009Cu)

/** \brief A0, CH2 Write access enable register A */
#define XSPI0_RGN2_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF90400A0u)

/** \brief A4, CH2 Write access enable register B */
#define XSPI0_RGN2_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF90400A4u)

/** \brief A8, CH2 Read access enable register A */
#define XSPI0_RGN2_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF90400A8u)

/** \brief AC, CH2 Read access enable register B */
#define XSPI0_RGN2_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF90400ACu)

/** \brief B0, CH2 VM access enable register */
#define XSPI0_RGN2_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF90400B0u)

/** \brief B4, CH2 PRS access enable register */
#define XSPI0_RGN2_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF90400B4u)

/** \brief B8, CH2 RGN Lower address */
#define XSPI0_RGN2_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF90400B8u)

/** \brief BC, CH2 RGN upper address */
#define XSPI0_RGN2_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF90400BCu)

/** \brief C0, CH3 Write access enable register A */
#define XSPI0_RGN3_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF90400C0u)

/** \brief C4, CH3 Write access enable register B */
#define XSPI0_RGN3_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF90400C4u)

/** \brief C8, CH3 Read access enable register A */
#define XSPI0_RGN3_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF90400C8u)

/** \brief CC, CH3 Read access enable register B */
#define XSPI0_RGN3_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF90400CCu)

/** \brief D0, CH3 VM access enable register */
#define XSPI0_RGN3_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF90400D0u)

/** \brief D4, CH3 PRS access enable register */
#define XSPI0_RGN3_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF90400D4u)

/** \brief D8, CH3 RGN Lower address */
#define XSPI0_RGN3_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF90400D8u)

/** \brief DC, CH3 RGN upper address */
#define XSPI0_RGN3_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF90400DCu)

/** \brief E0, CH4 Write access enable register A */
#define XSPI0_RGN4_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF90400E0u)

/** \brief E4, CH4 Write access enable register B */
#define XSPI0_RGN4_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF90400E4u)

/** \brief E8, CH4 Read access enable register A */
#define XSPI0_RGN4_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF90400E8u)

/** \brief EC, CH4 Read access enable register B */
#define XSPI0_RGN4_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF90400ECu)

/** \brief F0, CH4 VM access enable register */
#define XSPI0_RGN4_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF90400F0u)

/** \brief F4, CH4 PRS access enable register */
#define XSPI0_RGN4_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF90400F4u)

/** \brief F8, CH4 RGN Lower address */
#define XSPI0_RGN4_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF90400F8u)

/** \brief FC, CH4 RGN upper address */
#define XSPI0_RGN4_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF90400FCu)

/** \brief 100, CH5 Write access enable register A */
#define XSPI0_RGN5_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF9040100u)

/** \brief 104, CH5 Write access enable register B */
#define XSPI0_RGN5_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF9040104u)

/** \brief 108, CH5 Read access enable register A */
#define XSPI0_RGN5_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF9040108u)

/** \brief 10C, CH5 Read access enable register B */
#define XSPI0_RGN5_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF904010Cu)

/** \brief 110, CH5 VM access enable register */
#define XSPI0_RGN5_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF9040110u)

/** \brief 114, CH5 PRS access enable register */
#define XSPI0_RGN5_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF9040114u)

/** \brief 118, CH5 RGN Lower address */
#define XSPI0_RGN5_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF9040118u)

/** \brief 11C, CH5 RGN upper address */
#define XSPI0_RGN5_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF904011Cu)

/** \brief 120, CH6 Write access enable register A */
#define XSPI0_RGN6_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF9040120u)

/** \brief 124, CH6 Write access enable register B */
#define XSPI0_RGN6_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF9040124u)

/** \brief 128, CH6 Read access enable register A */
#define XSPI0_RGN6_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF9040128u)

/** \brief 12C, CH6 Read access enable register B */
#define XSPI0_RGN6_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF904012Cu)

/** \brief 130, CH6 VM access enable register */
#define XSPI0_RGN6_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF9040130u)

/** \brief 134, CH6 PRS access enable register */
#define XSPI0_RGN6_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF9040134u)

/** \brief 138, CH6 RGN Lower address */
#define XSPI0_RGN6_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF9040138u)

/** \brief 13C, CH6 RGN upper address */
#define XSPI0_RGN6_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF904013Cu)

/** \brief 140, CH7 Write access enable register A */
#define XSPI0_RGN7_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRA*)0xF9040140u)

/** \brief 144, CH7 Write access enable register B */
#define XSPI0_RGN7_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_WRB_SRI*)0xF9040144u)

/** \brief 148, CH7 Read access enable register A */
#define XSPI0_RGN7_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDA*)0xF9040148u)

/** \brief 14C, CH7 Read access enable register B */
#define XSPI0_RGN7_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RDB_SRI*)0xF904014Cu)

/** \brief 150, CH7 VM access enable register */
#define XSPI0_RGN7_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_VM*)0xF9040150u)

/** \brief 154, CH7 PRS access enable register */
#define XSPI0_RGN7_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_PRS*)0xF9040154u)

/** \brief 158, CH7 RGN Lower address */
#define XSPI0_RGN7_ACCEN_RGNLA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNLA*)0xF9040158u)

/** \brief 15C, CH7 RGN upper address */
#define XSPI0_RGN7_ACCEN_RGNUA /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ACCEN_RGNUA*)0xF904015Cu)

/** \brief 160, Error handling control */
#define XSPI0_INTSTAT /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_INTSTAT*)0xF9040160u)

/** \brief 164, Error handling interrupt/alarm clear */
#define XSPI0_INTCLR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_INTCLR*)0xF9040164u)

/** \brief 168, Error handling interrupt/alarm mask */
#define XSPI0_INTMSK /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_INTMSK*)0xF9040168u)

/** \brief 16C, Control Register 2 */
#define XSPI0_CTRLR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_CTRLR2*)0xF904016Cu)

/** \brief 0, Control Register 0 */
#define XSPI0_CTRLR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_CTRLR0*)0xF9040200u)

/** \brief 4, Control Register 1 */
#define XSPI0_CTRLR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_CTRLR1*)0xF9040204u)

/** \brief 8, xSPI kernel Enable Register */
#define XSPI0_SSIENR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SSIENR*)0xF9040208u)

/** \brief 10, Slave Enable Register */
#define XSPI0_SER /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SER*)0xF9040210u)

/** \brief 14, Baud Rate Select */
#define XSPI0_BAUDR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_BAUDR*)0xF9040214u)

/** \brief 18, Transmit FIFO Threshold Level */
#define XSPI0_TXFTLR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_TXFTLR*)0xF9040218u)

/** \brief 1C, Receive FIFO Threshold Level */
#define XSPI0_RXFTLR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RXFTLR*)0xF904021Cu)

/** \brief 20, Transmit FIFO Level Register */
#define XSPI0_TXFLR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_TXFLR*)0xF9040220u)

/** \brief 24, Receive FIFO Level Register */
#define XSPI0_RXFLR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RXFLR*)0xF9040224u)

/** \brief 28, Status Register */
#define XSPI0_SR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SR*)0xF9040228u)

/** \brief 2C, Interrupt Mask Register */
#define XSPI0_IMR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_IMR*)0xF904022Cu)

/** \brief 30, Interrupt Status Register */
#define XSPI0_ISR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ISR*)0xF9040230u)

/** \brief 34, Raw Interrupt Status Register */
#define XSPI0_RISR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RISR*)0xF9040234u)

/** \brief 38, Transmit FIFO Error Interrupt Clear Register Register */
#define XSPI0_TXEICR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_TXEICR*)0xF9040238u)

/** \brief 3C, Receive FIFO Overflow Interrupt Clear Register */
#define XSPI0_RXOICR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RXOICR*)0xF904023Cu)

/** \brief 40, Receive FIFO Underflow Interrupt Clear Register */
#define XSPI0_RXUICR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RXUICR*)0xF9040240u)

/** \brief 44, Multi-Master Interrupt Clear Register */
#define XSPI0_MSTICR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_MSTICR*)0xF9040244u)

/** \brief 48, Interrupt Clear Register */
#define XSPI0_ICR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_ICR*)0xF9040248u)

/** \brief 4C, DMA Control Register */
#define XSPI0_DMACR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DMACR*)0xF904024Cu)

/** \brief 50, Destination Burst Length */
#define XSPI0_AXIAWLEN /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_AXIAWLEN*)0xF9040250u)

/** \brief 54, Source Burst Length */
#define XSPI0_AXIARLEN /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_AXIARLEN*)0xF9040254u)

/** \brief 5C, xSPI kernel  component version */
#define XSPI0_SSIC_VERSION_ID /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SSIC_VERSION_ID*)0xF904025Cu)

/** \brief 60, xSPI  Data Register 0  */
#define XSPI0_DR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040260u)

/** \brief 64, xSPI  Data Register 1  */
#define XSPI0_DR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040264u)

/** \brief 68, xSPI  Data Register 2  */
#define XSPI0_DR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040268u)

/** \brief 6C, xSPI  Data Register 3  */
#define XSPI0_DR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF904026Cu)

/** \brief 70, xSPI  Data Register 4  */
#define XSPI0_DR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040270u)

/** \brief 74, xSPI  Data Register 5  */
#define XSPI0_DR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040274u)

/** \brief 78, xSPI  Data Register 6  */
#define XSPI0_DR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040278u)

/** \brief 7C, xSPI  Data Register 7  */
#define XSPI0_DR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF904027Cu)

/** \brief 80, xSPI  Data Register 8  */
#define XSPI0_DR8 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040280u)

/** \brief 84, xSPI  Data Register 9  */
#define XSPI0_DR9 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040284u)

/** \brief 88, xSPI  Data Register 10  */
#define XSPI0_DR10 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040288u)

/** \brief 8C, xSPI  Data Register 11  */
#define XSPI0_DR11 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF904028Cu)

/** \brief 90, xSPI  Data Register 12  */
#define XSPI0_DR12 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040290u)

/** \brief 94, xSPI  Data Register 13  */
#define XSPI0_DR13 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040294u)

/** \brief 98, xSPI  Data Register 14  */
#define XSPI0_DR14 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF9040298u)

/** \brief 9C, xSPI  Data Register 15  */
#define XSPI0_DR15 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF904029Cu)

/** \brief A0, xSPI  Data Register 16  */
#define XSPI0_DR16 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402A0u)

/** \brief A4, xSPI  Data Register 17  */
#define XSPI0_DR17 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402A4u)

/** \brief A8, xSPI  Data Register 18  */
#define XSPI0_DR18 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402A8u)

/** \brief AC, xSPI  Data Register 19  */
#define XSPI0_DR19 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402ACu)

/** \brief B0, xSPI  Data Register 20  */
#define XSPI0_DR20 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402B0u)

/** \brief B4, xSPI  Data Register 21  */
#define XSPI0_DR21 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402B4u)

/** \brief B8, xSPI  Data Register 22  */
#define XSPI0_DR22 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402B8u)

/** \brief BC, xSPI  Data Register 23  */
#define XSPI0_DR23 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402BCu)

/** \brief C0, xSPI  Data Register 24  */
#define XSPI0_DR24 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402C0u)

/** \brief C4, xSPI  Data Register 25  */
#define XSPI0_DR25 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402C4u)

/** \brief C8, xSPI  Data Register 26  */
#define XSPI0_DR26 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402C8u)

/** \brief CC, xSPI  Data Register 27  */
#define XSPI0_DR27 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402CCu)

/** \brief D0, xSPI  Data Register 28  */
#define XSPI0_DR28 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402D0u)

/** \brief D4, xSPI  Data Register 29  */
#define XSPI0_DR29 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402D4u)

/** \brief D8, xSPI  Data Register 30  */
#define XSPI0_DR30 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402D8u)

/** \brief DC, xSPI  Data Register 31  */
#define XSPI0_DR31 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402DCu)

/** \brief E0, xSPI  Data Register 32  */
#define XSPI0_DR32 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402E0u)

/** \brief E4, xSPI  Data Register 33  */
#define XSPI0_DR33 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402E4u)

/** \brief E8, xSPI  Data Register 34  */
#define XSPI0_DR34 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402E8u)

/** \brief EC, xSPI  Data Register 35  */
#define XSPI0_DR35 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DR*)0xF90402ECu)

/** \brief F0, RX Sample Delay Register */
#define XSPI0_RX_SAMPLE_DELAY /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_RX_SAMPLE_DELAY*)0xF90402F0u)

/** \brief F4, SPI_CTRLR0 - SPI Control Register */
#define XSPI0_SPI_CTRLR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SPI_CTRLR0*)0xF90402F4u)

/** \brief F8, DDR_DRIVE_EDGE - Transmit Drive Edge Register */
#define XSPI0_DDR_DRIVE_EDGE /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DDR_DRIVE_EDGE*)0xF90402F8u)

/** \brief FC, eXecute in Place - Mode bits */
#define XSPI0_XIP_MODE_BITS /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_XIP_MODE_BITS*)0xF90402FCu)

/** \brief 100, XIP_INCR_INST - XIP INCR transfer opcode */
#define XSPI0_XIP_INCR_INST /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_XIP_INCR_INST*)0xF9040300u)

/** \brief 104, XIP WRAP transfer opcode */
#define XSPI0_XIP_WRAP_INST /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_XIP_WRAP_INST*)0xF9040304u)

/** \brief 114, XIP time out register for continuous transfers */
#define XSPI0_XIP_CNT_TIME_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_XIP_CNT_TIME_OUT*)0xF9040314u)

/** \brief 120, SPI Device Register */
#define XSPI0_SPIDR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SPIDR*)0xF9040320u)

/** \brief 124, SPI Device Address Register */
#define XSPI0_SPIAR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SPIAR*)0xF9040324u)

/** \brief 128, AXI Address Register 0 */
#define XSPI0_AXIAR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_AXIAR0*)0xF9040328u)

/** \brief 130, AXI Master Error Interrupt Clear Register */
#define XSPI0_AXIECR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_AXIECR*)0xF9040330u)

/** \brief 134, Transfer Done Clear Interrupt Clear Register */
#define XSPI0_DONECR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_DONECR*)0xF9040334u)

/** \brief 180, Safety Control register */
#define XSPI0_SAFETYCR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SAFETYCR*)0xF9040380u)

/** \brief 184, Slave interface Clock domain FSM time out register */
#define XSPI0_SLVIFFSMTOCR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SLVIFFSMTOCR*)0xF9040384u)

/** \brief 188, xSPI kernel Clock domain FSM time out register */
#define XSPI0_SSIFSMTOCR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SSIFSMTOCR*)0xF9040388u)

/** \brief 18C, AXI Clock domain FSM time out register */
#define XSPI0_AXIFSMTOCR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_AXIFSMTOCR*)0xF904038Cu)

/** \brief 1A0, Safety Interrupt Status Register */
#define XSPI0_SAFETYISR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SAFETYISR*)0xF90403A0u)

/** \brief 1A4, Safety Interrupt Clear Register */
#define XSPI0_SAFETYICR /*lint --e(923, 9078)*/ (*(volatile Ifx_XSPI_SAFETYICR*)0xF90403A4u)


/** \}  */

/******************************************************************************/

/******************************************************************************/

#endif /* IFXXSPI_REG_H */
