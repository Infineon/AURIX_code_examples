/**
 * \file IfxSmm_cfg.h
 * \brief SMM on-chip implementation data
 * \ingroup IfxLld_Smm
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2021 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Smm Smm
 * \ingroup IfxLld
 * \defgroup IfxLld_Smm_Impl Implementation
 * \ingroup IfxLld_Smm
 * \defgroup IfxLld_Smm_Std Standard Driver
 * \ingroup IfxLld_Smm
 */

#ifndef IFXSMM_CFG_H
#define IFXSMM_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Ifx_Cfg.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant to cut off the clock supply to desired modules by writing to their respective CLC.B.DISR or CLC.B.EDIS .It is used in IfxSmmSysMode_startSleepSequenceinFlash().
 * This macro is empty by default.For example:
 * Example usage:
 * #define IFXSMM_DISABLE_MODULES_DURING_SLEEP          \
 * ({                                                      \
 *         IfxAsclin_setDisableModuleRequest(&MODULE_ASCLIN0); \
 *   #if (IFX_PROT_ENABLED == 1U)                                                       \
 *   IfxApProt_setState((Ifx_PROT_PROT *)&MODULE_ASCLIN.PROT_E, IfxApProt_State_config); \
 *   #endif                                                    \
 *         MODULE_ASCLIN.CLC.B.EDIS = 0;                        \                     \
 *  #if (IFX_PROT_ENABLED == 1U)     \
 *        IfxApProt_setState((Ifx_PROT_PROT *)&MODULE_ASCLIN.PROT_E, IfxApProt_State_run);       \
 *  #endif   \
 * })
 */
#ifndef IFXSMM_DISABLE_MODULES_DURING_SLEEP
#define IFXSMM_DISABLE_MODULES_DURING_SLEEP
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant to disable other CPU watchdog apart from master CPU watchdog.It is used in IfxSmmSysMode_startSleepSequenceinFlash().
 * This macro is empty by default.For example:
 *   If the master CPU does not have the permission. Functionality should be handled through IPC mechanism.
 *
 *  Example usage:
 *    1. Disable watchdog for other cores using below API
 *       wdgPwd = IfxWtu_getCpuWatchdogPassword();
 *       IfxWtu_disableCpuWatchdog(wdgPwd);
 *    2. Place other CPU to idle state except master.
 *    --> If the master cpu has the permission to put other cores to idle
 *       IfxSmmSysMode_setAllIdleExceptMasterCpu(masterCpu);
 *    --> If the master cpu does not have the permission then through IPC mechanism call the below function from the respective core.
 *       IfxSmmSysMode_setCoreMode(cpu, IfxSmmSysMode_RqPwMd_idle);
 *
 *   #define IFXSMM_DISABLE_CPU_WATCHDOG          \
 *   ({                                                      \
 *    //Call below api from other cores to disable watchdog   \
 *    // wdgPwd = IfxWtu_getCpuWatchdogPassword(); \
 *    // IfxWtu_disableCpuWatchdog(wdgPwd);               \
 *    IfxSmmSysMode_setAllIdleExceptMasterCpu(masterCpu);   \
 *   })
 */
#ifndef IFXSMM_IDLE_CPU_DISABLE_WATCHDOG
#define IFXSMM_IDLE_CPU_DISABLE_WATCHDOG
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant for setting the clock divider.It is used in IfxSmmSysMode_startSleepSequenceinFlash().
 *  This macro is empty by default.
 *  If the master CPU does not have the permission. Functionality should be handled through IPC mechanism
 *
 *  Example usage:
 *    1. Disable(or not) SYSPLL and PERPLL depending on which modules are required to be kept active
 *       CLOCK_SYSPLLCON0.B.PLLPWR = 0u;
 *       CLOCK_PERPLLCON0.B.PLLPWR = 0u;
 *    2. Select clock source of certain communication peripherals to bypass the system PLL.
 *       CLOCK_PERCCUCON0.B.CLKSELMCAN = clocksource;
 *    3. Switch to low power mode
 *       IfxClock_switchToLowPowerMode(IfxClock_LowPowerDivRatio_divBy1);
 *    4.
 *  #define IFXSMM_CLOCK_REDUCTION          \
 *  ({
 *    #if (IFX_PROT_ENABLED == 1U)          \
 *      IfxApProt_setState((Ifx_PROT_PROT *) &MODULE_CLOCK.PROTSE, IfxApProt_State_config); \
 *    #endif                                                     \
 *       //Configure depending on modules                        \
 *       CLOCK_SYSPLLCON0.B.PLLPWR = 0u;                         \
 *       CLOCK_PERPLLCON0.B.PLLPWR = 0u;                          \
 *    #if (IFX_PROT_ENABLED == 1U)
 *       IfxApProt_setState((Ifx_PROT_PROT *)&MODULE_CLOCK.PROTSE, IfxApProt_State_run);
 *     #endif
 *       IfxClock_switchToLowPowerMode(IfxClock_LowPowerDivRatio_divBy1) \
 *  })\
 */
#ifndef IFXSMM_CLOCK_REDUCTION
#define IFXSMM_CLOCK_REDUCTION
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant to restore the clock supply to desired modules by writing to their respective CLC.B.DISR. This is used in IfxSmmSysMode_initiateWakeup(). Set respective module PROT to config restore the supply and set PROT state to run.
 *  This macro is empty by default.For example:
 *
 *  Example usage:
 *  #define IFXSMM_WAKEUP_MODULES         \
 *  {                                                      \
 *     #if (IFX_PROT_ENABLED == 1U)                        \
 *          IfxApProt_setState((Ifx_PROT_PROT *)&MODULE_ASCLIN.PROT_E, IfxApProt_State_config); \
 *     #endif                                                        \
 *      MODULE_ASCLIN.CLC.B.DISR = 0;                      \
 *           MODULE_EVADC.CLC.B.DISR = 0;                        \
 *           MODULE_EDSADC.CLC.B.DISR = 0;                       \
 *    #if (IFX_PROT_ENABLED == 1U)     \
 *         IfxApProt_setState((Ifx_PROT_PROT *)&&MODULE_ASCLIN.PROT_E), IfxApProt_State_run);       \
 *   #endif   \
 *  }
 */
#ifndef IFXSMM_WAKEUP_MODULES
#define IFXSMM_WAKEUP_MODULES
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant to contain any activity the application might need to do after wakeup.
 *  This can be done here in this macro or after the control returns from IfxSmmSysMode_initiateWakeup()
 *  This macro is empty by default.
 */
#ifndef IFXSMM_RESTART_EXECUTION
#define IFXSMM_RESTART_EXECUTION
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant for clock initialization.
 * It is used in IfxSmmSysMode_initiateWakeup().Example usage:
 * #define IFXSMM_WAKEUP_CLOCK_INIT          \
 * {                                                      \
 *   IfxClock_init(clockConfig) \
 * }\
 */
#ifndef IFXSMM_WAKEUP_CLOCK_INIT
#define IFXSMM_WAKEUP_CLOCK_INIT
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant for disabling the HOST and CSRM FLASH
 *  It is used in IfxSmmSysMode_continueSleepSequenceInRAM().
 *
 *   If the master CPU does not have the permission. Functionality should be handled through IPC mechanism
 *   This macro is empty by default.
 *   Example usage:
 *
 *  #define IFXSMM_DISABLE_FLASH          \
 *  ({                                        \
 *   //Disabling FLASH                         \
 *   volatile uint32  *sleepaddr = (volatile uint32 *)(0xF8080000U | 0xAA00U);  \
 *   *sleepaddr = 0x10FFFU;                                              \
 *                                                                       \
 *   //Waiting for PFLASH[0-5] and Host DFLASH to enter sleep mode           \
 *   while (!((DMU_HCI_SLEEP.U & 0x10FFFU) == 0x10FFFU))                \
 *   {}     \
 *              \
 *   //Disabling CSRM FLASH                 \
 *   volatile uint32  *csrmsleepaddr = (volatile uint32 *)(0xF80C0000U | 0xAA00U);  \
 *   *csrmsleepaddr =  0x60000U;                                    \
 *  })
 */
#ifndef IFXSMM_DISABLE_FLASH
#define IFXSMM_DISABLE_FLASH
#endif

/** \brief This macro is intended to be defined in Ifx_Cfg.h and is meant for enabling the HOST and CSRM FLASH
 * It is used in IfxSmmSysMode_initiateWakeup().
 *
 *  If the master CPU does not have the permission. Functionality should be handled through IPC mechanism
 *  This macro is empty by default.
 *  Example usage:
 *
 * #define IFXSMM_ENABLE_FLASH          \
 * ({                                        \
 *  //Enabling FLASH                         \
 *  volatile uint32  *sleepaddr = (volatile uint32 *)(0xF8080000U | 0xAAFBU);  \
 *  *sleepaddr = 0x10FFFU;                                              \                               \
 * })
 */
#ifndef IFXSMM_ENABLE_FLASH
#define IFXSMM_ENABLE_FLASH
#endif

#endif /* IFXSMM_CFG_H */
