/**
 * \file IfxPpu_reg.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_PPUC/V0.2.1.1.7
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Ppu_Registers_Cfg Ppu address
 * \ingroup IfxSfr_Ppu_Registers
 * 
 * \defgroup IfxSfr_Ppu_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Ppu_Registers_Cfg
 *
 * \defgroup IfxSfr_Ppu_Registers_Cfg_Ppu 2-PPU
 * \ingroup IfxSfr_Ppu_Registers_Cfg
 *
 *
 */
#ifndef IFXPPU_REG_H
#define IFXPPU_REG_H 1
/******************************************************************************/
#include "IfxPpu_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Ppu_Registers_Cfg_BaseAddress
 * \{  */

/** \brief PPU object */
#define MODULE_PPU /*lint --e(923, 9078)*/ ((*(Ifx_PPU*)0xE9800000u))
#define MODULE_PPU_STUDMI /*lint --e(923, 9078)*/ ((*(Ifx_PPU_STUDMI*)0xF9810000u))
#define MODULE_PPU_DEBUG /*lint --e(923, 9078)*/ ((*(Ifx_PPU_DEBUG*)0xF9820000u))
#define MODULE_PPU_SM /*lint --e(923, 9078)*/ ((*(Ifx_PPU_SM*)0xF9830000u))
#define MODULE_PPU_APU /*lint --e(923, 9078)*/ ((*(Ifx_PPU_APU*)0xF9840000u))
#define MODULE_PPU_CSMAP /*lint --e(923, 9078)*/ ((*(Ifx_PPU_CSMAP*)0xF9850000u))
#define MODULE_PPU_VMEMAP /*lint --e(923, 9078)*/ ((*(Ifx_PPU_VMEMAP*)0xF9860000u))
/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Ppu_Registers_Cfg_Ppu
 * \{  */
/** \brief 0, Clock control register */
#define PPU_CLC /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_CLC*)0xE9800000u)

/** \brief 4, OCDS suspend and trigger bus control */
#define PPU_OSTBC /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_OSTBC*)0xE9800004u)

/** \brief 8, Module identification register */
#define PPU_ID /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ID*)0xE9800008u)

/** \brief C, Reset control register A */
#define PPU_RST_CTRLA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_RST_CTRLA*)0xE980000Cu)

/** \brief 10, Reset control register B */
#define PPU_RST_CTRLB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_RST_CTRLB*)0xE9800010u)

/** \brief 14, Reset status register */
#define PPU_RST_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_RST_STAT*)0xE9800014u)

/** \brief 18, PROT register endinit for SFR */
#define PPU_SFR_PROT_E /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PROT*)0xE9800018u)

/** \brief 20, PROT register safe endinit for SFR */
#define PPU_SFR_PROT_SE /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PROT*)0xE9800020u)

/** \brief 28, PROT register for tag definition registers */
#define PPU_SFR_PROT_T /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PROT*)0xE9800028u)

/** \brief 40, Write access enable register A */
#define PPU_SFR_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRA*)0xE9800040u)

/** \brief 44, Write access enable register B */
#define PPU_SFR_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRB_SRI*)0xE9800044u)

/** \brief 48, Read access enable register A */
#define PPU_SFR_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDA*)0xE9800048u)

/** \brief 4C, Read access enable register B */
#define PPU_SFR_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDB_SRI*)0xE980004Cu)

/** \brief 50, VM access enable register */
#define PPU_SFR_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_VM*)0xE9800050u)

/** \brief 54, PRS access enable register */
#define PPU_SFR_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_PRS*)0xE9800054u)

/** \brief 60, PPU control register */
#define PPU_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_CTRL*)0xE9800060u)

/** \brief 64, Processor status register */
#define PPU_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STAT*)0xE9800064u)

/** \brief 68, PPU safety mechanism control register */
#define PPU_SMCTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_SMCTRL*)0xE9800068u)

/** \brief 6C, PPU interrupt status register */
#define PPU_IRQSTAT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_IRQSTAT*)0xE980006Cu)

/** \brief 70, Last captured service request register */
#define PPU_LCSR /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_LCSR*)0xE9800070u)

/** \brief 74, PPU interrupt vector base address configuration register */
#define PPU_VECBASE /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_VECBASE*)0xE9800074u)

/** \brief 78, OCDS AP0 trigger register */
#define PPU_OAP0T /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_OAP0T*)0xE9800078u)

/** \brief 7C, OCDS AP1 trigger register */
#define PPU_OAP1T /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_OAP1T*)0xE980007Cu)

/** \brief 80, Protection tag definiton for CBU interface */
#define PPU_PTAG_CBU /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PTAG_CBU*)0xE9800080u)

/** \brief 84, Protection tag definiton for STU interface */
#define PPU_PTAG_STU /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PTAG_STU*)0xE9800084u)

/** \brief 88, Protection tag definiton for LBU interface */
#define PPU_PTAG_LBU /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PTAG_LBU*)0xE9800088u)

/** \brief 0, PROT register for CSM_ACCEN */
#define PPU_CSM_PROT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PROT*)0xF9850000u)

/** \brief 20, Write access enable register A */
#define PPU_CSM_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRA*)0xF9850020u)

/** \brief 24, Write access enable register B */
#define PPU_CSM_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRB_SRI*)0xF9850024u)

/** \brief 28, Read access enable register A */
#define PPU_CSM_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDA*)0xF9850028u)

/** \brief 2C, Read access enable register B */
#define PPU_CSM_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDB_SRI*)0xF985002Cu)

/** \brief 30, VM access enable register */
#define PPU_CSM_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_VM*)0xF9850030u)

/** \brief 34, PRS access enable register */
#define PPU_CSM_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_PRS*)0xF9850034u)

/** \brief 0, PROT register for AP_ACCEN registers */
#define PPU_AP_PROT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PROT*)0xF9840000u)

/** \brief 20, Write access enable register A */
#define PPU_AP_ACCEN_SM_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRA*)0xF9840020u)

/** \brief 24, Write access enable register B */
#define PPU_AP_ACCEN_SM_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRB_SRI*)0xF9840024u)

/** \brief 28, Read access enable register A */
#define PPU_AP_ACCEN_SM_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDA*)0xF9840028u)

/** \brief 2C, Read access enable register B */
#define PPU_AP_ACCEN_SM_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDB_SRI*)0xF984002Cu)

/** \brief 30, VM access enable register */
#define PPU_AP_ACCEN_SM_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_VM*)0xF9840030u)

/** \brief 34, PRS access enable register */
#define PPU_AP_ACCEN_SM_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_PRS*)0xF9840034u)

/** \brief 40, Write access enable register A */
#define PPU_AP_ACCEN_STUDMI_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRA*)0xF9840040u)

/** \brief 44, Write access enable register B */
#define PPU_AP_ACCEN_STUDMI_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRB_SRI*)0xF9840044u)

/** \brief 48, Read access enable register A */
#define PPU_AP_ACCEN_STUDMI_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDA*)0xF9840048u)

/** \brief 4C, Read access enable register B */
#define PPU_AP_ACCEN_STUDMI_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDB_SRI*)0xF984004Cu)

/** \brief 50, VM access enable register */
#define PPU_AP_ACCEN_STUDMI_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_VM*)0xF9840050u)

/** \brief 54, PRS access enable register */
#define PPU_AP_ACCEN_STUDMI_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_PRS*)0xF9840054u)

/** \brief 60, Write access enable register A */
#define PPU_AP_ACCEN_DEBUG_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRA*)0xF9840060u)

/** \brief 64, Write access enable register B */
#define PPU_AP_ACCEN_DEBUG_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRB_SRI*)0xF9840064u)

/** \brief 68, Read access enable register A */
#define PPU_AP_ACCEN_DEBUG_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDA*)0xF9840068u)

/** \brief 6C, Read access enable register B */
#define PPU_AP_ACCEN_DEBUG_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDB_SRI*)0xF984006Cu)

/** \brief 70, VM access enable register */
#define PPU_AP_ACCEN_DEBUG_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_VM*)0xF9840070u)

/** \brief 74, PRS access enable register */
#define PPU_AP_ACCEN_DEBUG_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_PRS*)0xF9840074u)

/** \brief 0, STU BCR Register */
#define PPU_STU_BUILD /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_BUILD*)0xF9810000u)

/** \brief 4, STU Number of Entries Register */
#define PPU_STU_ENTRY_NUM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_ENTRY_NUM*)0xF9810004u)

/** \brief 8, STU Next Free Entry Register */
#define PPU_STU_NEXT_FREE /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_NEXT_FREE*)0xF9810008u)

/** \brief C, STU Free Entry Register */
#define PPU_STU_FREE_NUM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_FREE_NUM*)0xF981000Cu)

/** \brief 10, STU Next Free Entry Increase Register */
#define PPU_STU_NEXT_FREE_INC /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_NEXT_FREE_INC*)0xF9810010u)

/** \brief 14, STU Entry Select Register */
#define PPU_STU_ENTRY_SELECT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_ENTRY_SELECT*)0xF9810014u)

/** \brief 18, STU Entry Status Register */
#define PPU_STU_ENTRY_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_ENTRY_STAT*)0xF9810018u)

/** \brief 1C, STU Entry Data Structure Base Lower Address Register */
#define PPU_STU_BASE_L /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_BASE_L*)0xF981001Cu)

/** \brief 24, STU Weight Register */
#define PPU_STU_WEIGHT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_WEIGHT*)0xF9810024u)

/** \brief 28, STU Event Register */
#define PPU_STU_EVENT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_EVENT*)0xF9810028u)

/** \brief 2C, STU Done Interrupt Register */
#define PPU_STU_DONE_IRQ /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_DONE_IRQ*)0xF981002Cu)

/** \brief 30, STU Error Interrupt Register */
#define PPU_STU_ERR_IRQ /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_ERR_IRQ*)0xF9810030u)

/** \brief 34, STU Disable Recording Register */
#define PPU_STU_DISABLE_RECORD /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_STU_DISABLE_RECORD*)0xF9810034u)

/** \brief 0, HSSI Safety Error Status Register */
#define PPU_HSSI_SAFETY_ERROR /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_SAFETY_ERROR*)0xF9830000u)

/** \brief 4, HSSI CPU0 Error Status Register */
#define PPU_HSSI_CPU0_SAFETY_ERROR /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_CPU0_SAFETY_ERROR*)0xF9830004u)

/** \brief 24, Scalar Memory SBE Count Register */
#define PPU_HSSI_SBE_COUNTER_HS0 /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_SBE_COUNTER_HS0*)0xF9830024u)

/** \brief 34, Vector Memory SBE Counter Register */
#define PPU_HSSI_SBE_COUNTER_VISION0 /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_SBE_COUNTER_VISION0*)0xF9830034u)

/** \brief 54, Cluster Memory SBE Counter Register */
#define PPU_HSSI_CLUSTER_SBE_COUNTER /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_CLUSTER_SBE_COUNTER*)0xF9830054u)

/** \brief 58, Scalar ECC Error Status Register */
#define PPU_HSSI_ECC_ERROR_HS0 /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_ECC_ERROR_HS0*)0xF9830058u)

/** \brief 68, Vector Memory ECC Error Status Register */
#define PPU_HSSI_ECC_ERROR_VISION0 /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_ECC_ERROR_VISION0*)0xF9830068u)

/** \brief 88, Cluster ECC Error Status Register */
#define PPU_HSSI_CLUSTER_ECC_ERROR /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_HSSI_CLUSTER_ECC_ERROR*)0xF9830088u)

/** \brief 0, Debug Status Register */
#define PPU_DB_STATUS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_DB_STATUS*)0xF9820000u)

/** \brief 4, Debug Command Register */
#define PPU_DB_CMD /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_DB_CMD*)0xF9820004u)

/** \brief 8, Debug Address Register */
#define PPU_DB_ADDR /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_DB_ADDR*)0xF9820008u)

/** \brief C, Debug Data Register */
#define PPU_DB_DATA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_DB_DATA*)0xF982000Cu)

/** \brief 10, Debug Reset Register */
#define PPU_DB_RESET /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_DB_RESET*)0xF9820010u)

/** \brief 0, PROT register for VMEM_ACCEN */
#define PPU_VMEM_PROT /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_PROT*)0xF9860000u)

/** \brief 20, Write access enable register A */
#define PPU_VMEM_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRA*)0xF9860020u)

/** \brief 24, Write access enable register B */
#define PPU_VMEM_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_WRB_SRI*)0xF9860024u)

/** \brief 28, Read access enable register A */
#define PPU_VMEM_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDA*)0xF9860028u)

/** \brief 2C, Read access enable register B */
#define PPU_VMEM_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_RDB_SRI*)0xF986002Cu)

/** \brief 30, VM access enable register */
#define PPU_VMEM_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_VM*)0xF9860030u)

/** \brief 34, PRS access enable register */
#define PPU_VMEM_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_PPU_ACCEN_PRS*)0xF9860034u)


/** \}  */

/******************************************************************************/

/******************************************************************************/

#endif /* IFXPPU_REG_H */
