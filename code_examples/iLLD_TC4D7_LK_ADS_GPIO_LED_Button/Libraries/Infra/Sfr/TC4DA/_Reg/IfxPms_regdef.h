/**
 * \file IfxPms_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_PMS/V0.2.1.1.28
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Pms_Registers Pms Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Pms_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Pms_Registers
 * 
 * \defgroup IfxSfr_Pms_Registers_union Register unions
 * \ingroup IfxSfr_Pms_Registers
 * 
 * \defgroup IfxSfr_Pms_Registers_struct Memory map
 * \ingroup IfxSfr_Pms_Registers
 */
#ifndef IFXPMS_REGDEF_H
#define IFXPMS_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Pms_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_PMS_ACCEN_PRS_PMS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_ACCEN_PRS_PMS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_PMS_ACCEN_RDA_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_PMS_ACCEN_RDA_PMS_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_PMS_ACCEN_RDB_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_ACCEN_RDB_PMS_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_PMS_ACCEN_VM_PMS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_ACCEN_VM_PMS_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_PMS_ACCEN_WRA_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_PMS_ACCEN_WRA_PMS_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_PMS_ACCEN_WRB_PMS_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_ACCEN_WRB_PMS_Bits;

/** \brief Register to store user info in PMS2 domain and reset by cold PORST */
typedef struct _Ifx_PMS_CLDPORSTUSRINFO_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] User data (rw) */
} Ifx_PMS_CLDPORSTUSRINFO_Bits;

/** \brief Cold reset configuration register */
typedef struct _Ifx_PMS_CLDRSTCON_Bits
{
    __O  Ifx_UReg_32Bit CPTRIG:8;          /**< \brief [7:0] Cold PORST trigger (w) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_CLDRSTCON_Bits;

/** \brief Cold reset trigger register */
typedef struct _Ifx_PMS_CLDRSTRIG_Bits
{
    __I  Ifx_UReg_32Bit VDD:1;             /**< \brief [0:0] VDD primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDEXT:1;          /**< \brief [1:1] VDDEXT primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VSSDCHS:1;         /**< \brief [2:2] DCDC high-side supply primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDEXTDC:1;        /**< \brief [3:3] VDDEXTDC primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDDCLS:1;         /**< \brief [4:4] DCDC low-side supply primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDEVRSB:1;        /**< \brief [5:5] VDDEVRSB primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDM:1;            /**< \brief [6:6] VDDM primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY0:1;       /**< \brief [7:7] VDDPHPHY0 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY1:1;       /**< \brief [8:8] VDDPHPHY1 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY2:1;       /**< \brief [9:9] VDDPHPHY2 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDHSIF:1;         /**< \brief [10:10] VDDHSIF primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __I  Ifx_UReg_32Bit VDDPAD:1;          /**< \brief [12:12] VDDPAD primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDLMU0:1;         /**< \brief [13:13] VDDLMU0 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDLMU1:1;         /**< \brief [14:14] VDDLMU1 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPPU:1;          /**< \brief [15:15] VDDPPU primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [16:16] \internal Reserved */
    __I  Ifx_UReg_32Bit VDDPHY0:1;         /**< \brief [17:17] VDDPHY0 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHY1:1;         /**< \brief [18:18] VDDPHY1 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHY2:1;         /**< \brief [19:19] VDDPHY2 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit PORSTTO:1;         /**< \brief [20:20] Cold PORST reset triggered by a warm PORST time-out (rh) */
    __I  Ifx_UReg_32Bit LBTERM:1;          /**< \brief [21:21] LBIST was properly terminated for respective domains (rh) */
    __I  Ifx_UReg_32Bit LBPORST:1;         /**< \brief [22:22] LBIST termination due to warm PORST (rh) */
    __I  Ifx_UReg_32Bit PDCOLD:1;          /**< \brief [23:23] Cold reset due to VDDPDCLDUV threshold crossed (rh) */
    __I  Ifx_UReg_32Bit CPSWTRIG:1;        /**< \brief [24:24] Cold PORST software trigger (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_CLDRSTRIG_Bits;

/** \brief Cold reset last trigger register */
typedef struct _Ifx_PMS_CLDRSTRIGL_Bits
{
    __I  Ifx_UReg_32Bit VDD:1;             /**< \brief [0:0] VDD primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDEXT:1;          /**< \brief [1:1] VDDEXT primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VSSDCHS:1;         /**< \brief [2:2] DCDC high-side supply primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDEXTDC:1;        /**< \brief [3:3] VDDEXTDC primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDDCLS:1;         /**< \brief [4:4] DCDC low-side supply primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDEVRSB:1;        /**< \brief [5:5] VDDEVRSB primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDM:1;            /**< \brief [6:6] VDDM primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY0:1;       /**< \brief [7:7] VDDPHPHY0 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY1:1;       /**< \brief [8:8] VDDPHPHY1 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHPHY2:1;       /**< \brief [9:9] VDDPHPHY2 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDHSIF:1;         /**< \brief [10:10] VDDHSIF primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __I  Ifx_UReg_32Bit VDDPAD:1;          /**< \brief [12:12] VDDPAD primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDLMU0:1;         /**< \brief [13:13] VDDLMU0 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDLMU1:1;         /**< \brief [14:14] VDDLMU1 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPPU:1;          /**< \brief [15:15] VDDPPU primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [16:16] \internal Reserved */
    __I  Ifx_UReg_32Bit VDDPHY0:1;         /**< \brief [17:17] VDDPHY0 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHY1:1;         /**< \brief [18:18] VDDPHY1 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit VDDPHY2:1;         /**< \brief [19:19] VDDPHY2 primary monitor cold PORST indication (rh) */
    __I  Ifx_UReg_32Bit PORSTTO:1;         /**< \brief [20:20] Cold PORST reset triggered by a warm PORST time-out (rh) */
    __I  Ifx_UReg_32Bit LBTERM:1;          /**< \brief [21:21] LBIST was properly terminated for respective domains (rh) */
    __I  Ifx_UReg_32Bit LBPORST:1;         /**< \brief [22:22] LBIST termination due to warm PORST (rh) */
    __I  Ifx_UReg_32Bit PDCOLD:1;          /**< \brief [23:23] Cold reset due to VDDPDCLDUV threshold crossed (rh) */
    __I  Ifx_UReg_32Bit CPSWTRIG:1;        /**< \brief [24:24] Cold PORST software trigger (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_CLDRSTRIGL_Bits;

/** \brief Cold reset status register */
typedef struct _Ifx_PMS_CLDRSTSTAT_Bits
{
    __I  Ifx_UReg_32Bit LVDANA:1;          /**< \brief [0:0] LVD reset status for PMS0-Ana domain and PSSM0 (rh) */
    __I  Ifx_UReg_32Bit LVDPMS0:1;         /**< \brief [1:1] LVD reset status for PMS0 domain and PSSM0 (rh) */
    __I  Ifx_UReg_32Bit STBY0WKP:1;        /**< \brief [2:2] Transition from STANDBY0 to RUN mode for PSSM0 (rh) */
    __I  Ifx_UReg_32Bit LVDPMS1:1;         /**< \brief [3:3] LVD reset status for PMS1 domain and PSSM1 (rh) */
    __I  Ifx_UReg_32Bit LVDPMS2:1;         /**< \brief [4:4] LVD reset status for PMS2 domain (rh) */
    __I  Ifx_UReg_32Bit STBY1WKP:1;        /**< \brief [5:5] Transition from STANDBY1 to RUN mode for PSSM1 (rh) */
    __I  Ifx_UReg_32Bit CLDPORST:1;        /**< \brief [6:6] Cold PORST reset status (rh) */
    __I  Ifx_UReg_32Bit PDCLDRST:1;        /**< \brief [7:7] Power domain cold reset status (rh) */
    __I  Ifx_UReg_32Bit PORST:1;           /**< \brief [8:8] Warm PORST status (rh) */
    __I  Ifx_UReg_32Bit LBIST:1;           /**< \brief [9:9] LBIST status (rh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PMS_CLDRSTSTAT_Bits;

/** \brief Cold reset status clear register */
typedef struct _Ifx_PMS_CLDRSTSTATCLR_Bits
{
    __O  Ifx_UReg_32Bit CLEAR:1;           /**< \brief [0:0] Clear cold reset status bits (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PMS_CLDRSTSTATCLR_Bits;

/** \brief  */
typedef struct _Ifx_PMS_DRMONCON_Bits
{
    __IO Ifx_UReg_32Bit ENABLE:1;          /**< \brief [0:0] Enable/disable drift monitoring (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [3:1] \internal Reserved */
    __IO Ifx_UReg_32Bit FACTOR:4;          /**< \brief [7:4] Exponent of the downsampling factor R (rwh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_DRMONCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_DRMONSTAT_Bits
{
    __I  Ifx_UReg_32Bit VALUE:11;          /**< \brief [10:0] Accumulated filtered value (rh) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PMS_DRMONSTAT_Bits;

/** \brief Die temperature sensor control register */
typedef struct _Ifx_PMS_DTS_CON_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] DTS enable (rwh) */
    __IO Ifx_UReg_32Bit START:1;           /**< \brief [1:1] ADC conversion control (rwh) */
    __IO Ifx_UReg_32Bit WRNEN:1;           /**< \brief [2:2] Warning enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit PEAKDETRST:1;      /**< \brief [4:4] DTS peak temperature detector reset (rw1sh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit LOWERFILT:4;       /**< \brief [11:8] Temperature-sensing mode warning filter (rw) */
    __IO Ifx_UReg_32Bit UPPERFILT:4;       /**< \brief [15:12] Temperature-sensing mode warning filter (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PMS_DTS_CON_Bits;

/** \brief Die temperature sensor limit register 1 */
typedef struct _Ifx_PMS_DTS_LIM1_Bits
{
    __IO Ifx_UReg_32Bit LOWER:12;          /**< \brief [11:0] DTS lower warning threshold (rw) */
    __IO Ifx_UReg_32Bit LOWERHYST:3;       /**< \brief [14:12] Temperature-sensing mode warning hysteresis (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit UPPER:12;          /**< \brief [27:16] DTS upper warning threshold (rw) */
    __IO Ifx_UReg_32Bit UPPERHYST:3;       /**< \brief [30:28] Temperature-sensing mode warning hysteresis (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_PMS_DTS_LIM1_Bits;

/** \brief Die temperature sensor limit register 2 */
typedef struct _Ifx_PMS_DTS_LIM2_Bits
{
    __IO Ifx_UReg_32Bit TSDLIMIT:12;       /**< \brief [11:0] Temperature shut down warning threshold (rw) */
    __IO Ifx_UReg_32Bit TSDHYST:3;         /**< \brief [14:12] Temperature-sensing mode warning hysteresis (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit TSDFILT:4;         /**< \brief [19:16] Temperature-sensing mode warning filter (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PMS_DTS_LIM2_Bits;

/** \brief Die temperature sensor status register */
typedef struct _Ifx_PMS_DTS_STAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:12;         /**< \brief [11:0] DTS result (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit PEAK:12;           /**< \brief [27:16] DTS peak temperature result (rh) */
    __I  Ifx_UReg_32Bit LLU:1;             /**< \brief [28:28] Low temperature warning (rh) */
    __I  Ifx_UReg_32Bit UOF:1;             /**< \brief [29:29] High temperature warning (rh) */
    __I  Ifx_UReg_32Bit TSD:1;             /**< \brief [30:30] Thermal shutdown warning (rh) */
    __I  Ifx_UReg_32Bit DTSREADY:1;        /**< \brief [31:31] Ready indicator (rh) */
} Ifx_PMS_DTS_STAT_Bits;

/** \brief EVRC SD coefficient register 0 */
typedef struct _Ifx_PMS_EVRC_COEFF0_Bits
{
    __IO Ifx_UReg_32Bit SMCK1:4;           /**< \brief [3:0] Proportional coefficient for the voltage error in SMC (rw) */
    __IO Ifx_UReg_32Bit SMCK25V:4;         /**< \brief [7:4] Coefficient for the estimated current in SMC (5V and higher, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK35V:4;         /**< \brief [11:8] Coefficient for the integrator in SMC (5V and higher, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK2FRAC5V:3;     /**< \brief [14:12] Fractional coefficient for the estimated current in SMC (5V and higher, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK3FRAC5V:3;     /**< \brief [17:15] Fractional coefficient for the integrator in SMC (5V and higher, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK1FRAC5V:2;     /**< \brief [19:18] Fractional coefficient for the proportional coefficient for the voltage error in SMC (5V and higher, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK1FRAC3V3:2;    /**< \brief [21:20] Fractional coefficient for the proportional coefficient for the voltage error in SMC (3V3, nominal) (rw) */
    __IO Ifx_UReg_32Bit FBADCLPF:3;        /**< \brief [24:22] FBADC output filter coefficient (rw) */
    __IO Ifx_UReg_32Bit FFBLPF:3;          /**< \brief [27:25] Filter coefficient for voltage error (rw) */
    __IO Ifx_UReg_32Bit SMCDRIFTKP:4;      /**< \brief [31:28] Proportional term for the drift compensation loop (rw) */
} Ifx_PMS_EVRC_COEFF0_Bits;

/** \brief EVRC SD coefficient register 1 */
typedef struct _Ifx_PMS_EVRC_COEFF1_Bits
{
    __IO Ifx_UReg_32Bit SMCKRAMPFRAC:1;    /**< \brief [0:0] Fractional bit of artificial ramp coefficient (rw) */
    __IO Ifx_UReg_32Bit SMCKRAMP:3;        /**< \brief [3:1] Artificial ramp coefficient (rw) */
    __IO Ifx_UReg_32Bit SMCDRIFTKPFRAC:3;    /**< \brief [6:4] Fractional coefficient for the proportional term of the drift compensation loop (rw) */
    __IO Ifx_UReg_32Bit SMCDRIFTMOD:2;     /**< \brief [8:7] Drift compensation mode (rw) */
    __IO Ifx_UReg_32Bit SMCK3FRAC3V3:3;    /**< \brief [11:9] Fractional coefficient for the integrator in SMC (3V3, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK23V3:4;        /**< \brief [15:12] Coefficient for the estimated current in SMC (3V3, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK33V3:4;        /**< \brief [19:16] Coefficient for the integrator in SMC (3V3 and higher, nominal) (rw) */
    __IO Ifx_UReg_32Bit SMCK2FRAC3V3:3;    /**< \brief [22:20] Fractional coefficient for the estimated current in SMC (3V3, nominal) (rw) */
    __IO Ifx_UReg_32Bit CURRESTLPF:3;      /**< \brief [25:23] FBADC output filter coefficient only used in the current estimator (rw) */
    __IO Ifx_UReg_32Bit FFADCLPF:3;        /**< \brief [28:26] FFADC output filter coefficient (rw) */
    __IO Ifx_UReg_32Bit VERRLPF:3;         /**< \brief [31:29] FBADC output filter coefficient only used in the integrator (rw) */
} Ifx_PMS_EVRC_COEFF1_Bits;

/** \brief EVRC SD coefficient register 2 */
typedef struct _Ifx_PMS_EVRC_COEFF2_Bits
{
    __IO Ifx_UReg_32Bit DRV3V3PSTROFF:4;    /**< \brief [3:0] Strength setting  driver external PMOS (turn-off) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3PSTRON:4;    /**< \brief [7:4] Strength setting  driver external PMOS (turn-on) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3PSTRCLAMP:4;    /**< \brief [11:8] Strength setting  driver external PMOS (clamping phase) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTROFF:4;    /**< \brief [15:12] Strength setting  driver external NMOS (turn-off) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTRON:4;    /**< \brief [19:16] Strength setting  driver external NMOS (turn-on) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTRCLAMP:4;    /**< \brief [23:20] Strength setting  driver external NMOS (clamping phase) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NOVLFALL:4;    /**< \brief [27:24] Non-overlapping time (falling edge) between n-cmd and p-cmd (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NOVLRISE:4;    /**< \brief [31:28] Non-overlapping time (rising edge) between n-cmd and p-cmd (rw) */
} Ifx_PMS_EVRC_COEFF2_Bits;

/** \brief EVRC SD coefficient register 3 */
typedef struct _Ifx_PMS_EVRC_COEFF3_Bits
{
    __IO Ifx_UReg_32Bit DRV5VPSTROFF:4;    /**< \brief [3:0] Strength setting  driver external PMOS (turn-off) (rw) */
    __IO Ifx_UReg_32Bit DRV5VPSTRON:4;     /**< \brief [7:4] Strength setting  driver external PMOS (turn-on) (rw) */
    __IO Ifx_UReg_32Bit DRV5VPSTRCLAMP:4;    /**< \brief [11:8] Strength setting  driver external PMOS (clamping phase) (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTROFF:4;    /**< \brief [15:12] Strength setting  driver external NMOS (turn-off) (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTRON:4;     /**< \brief [19:16] Strength setting  driver external NMOS (turn-on) (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTRCLAMP:4;    /**< \brief [23:20] Strength setting  driver external NMOS (clamping phase) (rw) */
    __IO Ifx_UReg_32Bit DRV5VNOVLFALL:4;    /**< \brief [27:24] Non-overlapping time (falling edge) between n-cmd and p-cmd (rw) */
    __IO Ifx_UReg_32Bit DRV5VNOVLRISE:4;    /**< \brief [31:28] Non-overlapping time (rising edge) between n-cmd and p-cmd (rw) */
} Ifx_PMS_EVRC_COEFF3_Bits;

/** \brief EVRC SD coefficient register 4 */
typedef struct _Ifx_PMS_EVRC_COEFF4_Bits
{
    __IO Ifx_UReg_32Bit DRVPCLAMPDEL:4;    /**< \brief [3:0] Delay for clamping external PMOS (rw) */
    __IO Ifx_UReg_32Bit DRVNCLAMPDEL:4;    /**< \brief [7:4] Delay for clamping external NMOS (rw) */
    __IO Ifx_UReg_32Bit DRVFFTHRES:4;      /**< \brief [11:8] Driver feed-forward threshold (rw) */
    __IO Ifx_UReg_32Bit DRVFFHYS:4;        /**< \brief [15:12] Driver feed-forward hysteresis (rw) */
    __IO Ifx_UReg_32Bit MINTON:4;          /**< \brief [19:16] Minimum on time during PWM operation (rw) */
    __IO Ifx_UReg_32Bit MINTOFF:4;         /**< \brief [23:20] Minimum off time during PWM operation (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_EVRC_COEFF4_Bits;

/** \brief EVRC SD coefficient register 5 */
typedef struct _Ifx_PMS_EVRC_COEFF5_Bits
{
    __IO Ifx_UReg_32Bit DRV3V3PSTRBOOST:4;    /**< \brief [3:0] Strength setting  driver external PMOS (boost phase) (rw) */
    __IO Ifx_UReg_32Bit DRV3V3NSTRBOOST:4;    /**< \brief [7:4] Strength setting  driver external NMOS (boost phase) (rw) */
    __IO Ifx_UReg_32Bit DRV5VPSTRBOOST:4;    /**< \brief [11:8] Strength setting  driver external PMOS (boost phase) (rw) */
    __IO Ifx_UReg_32Bit DRV5VNSTRBOOST:4;    /**< \brief [15:12] Strength setting  driver external NMOS (boost phase) (rw) */
    __IO Ifx_UReg_32Bit DRVPBOOSTONDEL:2;    /**< \brief [17:16] Boosting-time of external PMOS (turn-on) (rw) */
    __IO Ifx_UReg_32Bit DRVPBOOSTOFFDEL:2;    /**< \brief [19:18] Boosting-time of external PMOS (turn-off) (rw) */
    __IO Ifx_UReg_32Bit DRVNBOOSTONDEL:2;    /**< \brief [21:20] Boosting-time of external NMOS (turn-on) (rw) */
    __IO Ifx_UReg_32Bit DRVNBOOSTOFFDEL:2;    /**< \brief [23:22] Boosting-time of external NMOS (turn-off) (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_EVRC_COEFF5_Bits;

/** \brief EVRC configuration register 0 */
typedef struct _Ifx_PMS_EVRC_CON0_Bits
{
    __IO Ifx_UReg_32Bit SDVOUTSEL:9;       /**< \brief [8:0] EVRC regulator output voltage target value (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [30:9] \internal Reserved */
    __IO Ifx_UReg_32Bit UP:1;              /**< \brief [31:31] Update request for SMPS register values (rw1sh) */
} Ifx_PMS_EVRC_CON0_Bits;

/** \brief EVRC configuration register 1 */
typedef struct _Ifx_PMS_EVRC_CON1_Bits
{
    __IO Ifx_UReg_32Bit SDFREQ:9;          /**< \brief [8:0] Regulator switching frequency (or oversampling factor in PWM mode) (rw) */
    __IO Ifx_UReg_32Bit SDFREQSPRD:8;      /**< \brief [16:9] Frequency spreading configuration (rw) */
    __IO Ifx_UReg_32Bit SYNCHYST:6;        /**< \brief [22:17] Lock and unlock hysteresis window (rw) */
    __IO Ifx_UReg_32Bit SYNCMAXDEV:7;      /**< \brief [29:23] Maximum deviation of the synchronization input frequency (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PMS_EVRC_CON1_Bits;

/** \brief EVRC configuration register 2 */
typedef struct _Ifx_PMS_EVRC_CON2_Bits
{
    __IO Ifx_UReg_32Bit SHHEN:1;           /**< \brief [0:0] Short-to-high detection enable (rw) */
    __IO Ifx_UReg_32Bit SHLEN:1;           /**< \brief [1:1] Short-to-low detection enable (rw) */
    __IO Ifx_UReg_32Bit SHOFFEN:1;         /**< \brief [2:2] Enable bit for EVRC switch-off upon short detection (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit SHHTHR:8;          /**< \brief [11:4] Short-to-high detection threshold (rw) */
    __IO Ifx_UReg_32Bit SHLTHR:8;          /**< \brief [19:12] Short-to-low detection threshold (rw) */
    __IO Ifx_UReg_32Bit SHHTIM:4;          /**< \brief [23:20] Timeout for short-to-high detection (rw) */
    __IO Ifx_UReg_32Bit SHLTIM:4;          /**< \brief [27:24] Timeout for short-to-low detection (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_EVRC_CON2_Bits;

/** \brief EVRC configuration register 3 */
typedef struct _Ifx_PMS_EVRC_CON3_Bits
{
    __IO Ifx_UReg_32Bit SYNCIN:1;          /**< \brief [0:0] EVRC input synchronization enable (rw) */
    __IO Ifx_UReg_32Bit SYNCOUT:1;         /**< \brief [1:1] EVRC DCDCSYNCO output synchronization enable (rw) */
    __IO Ifx_UReg_32Bit SYNCMUXSEL:2;      /**< \brief [3:2] Synchronisation input multiplexer (rw) */
    __IO Ifx_UReg_32Bit SYNCDIVFAC:3;      /**< \brief [6:4] Switching frequency division factor for external synchronization (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit VOLTOKTHR:4;       /**< \brief [11:8] Threshold level for the voltage OK logic (rw) */
    __IO Ifx_UReg_32Bit VOLTOKLPF:2;       /**< \brief [13:12] Filter coefficient for the voltage OK logic (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_PMS_EVRC_CON3_Bits;

/** \brief EVRC configuration register 4 */
typedef struct _Ifx_PMS_EVRC_CON4_Bits
{
    __IO Ifx_UReg_32Bit SKPLSEN:1;         /**< \brief [0:0] Enable skip pulse feature (rw) */
    __IO Ifx_UReg_32Bit RMPFFEN:1;         /**< \brief [1:1] Enable feed-forward correction of artificial ramp slope (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit SKPLSTHR:4;        /**< \brief [7:4] Skip pulse threshold (rw) */
    __IO Ifx_UReg_32Bit ZEROBIN:4;         /**< \brief [11:8] Zero-bin setting (rw) */
    __IO Ifx_UReg_32Bit INTGOFFS:4;        /**< \brief [15:12] Initial offset of the integrator (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PMS_EVRC_CON4_Bits;

/** \brief EVRC status register 0 */
typedef struct _Ifx_PMS_EVRC_STAT0_Bits
{
    __I  Ifx_UReg_32Bit EVRC:1;            /**< \brief [0:0] EVRC status (rh) */
    __I  Ifx_UReg_32Bit SYNCLCK:1;         /**< \brief [1:1] EVRC synchronization input locked status (rh) */
    __I  Ifx_UReg_32Bit EVRCSHLV:1;        /**< \brief [2:2] Short to ground (rh) */
    __I  Ifx_UReg_32Bit EVRCSHHV:1;        /**< \brief [3:3] Short to supply (rh) */
    __I  Ifx_UReg_32Bit VDDEXTDCLVL:1;     /**< \brief [4:4] VDDEXTDC external supply level status (rh) */
    __I  Ifx_UReg_32Bit SDVOK:1;           /**< \brief [5:5] EVRC regulator voltage OK status (rh) */
    __I  Ifx_UReg_32Bit SDFREQCFG:1;       /**< \brief [6:6] EVRC switching frequency configuration (rh) */
    __I  Ifx_UReg_32Bit SUPPLYCFG:2;       /**< \brief [8:7] EVRC supply configuration (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __I  Ifx_UReg_32Bit SETPOINT:9;        /**< \brief [24:16] EVRC target output voltage (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_EVRC_STAT0_Bits;

/** \brief EVRC status register 1 */
typedef struct _Ifx_PMS_EVRC_STAT1_Bits
{
    __I  Ifx_UReg_32Bit FFADCV:12;         /**< \brief [11:0] Feed-forward ADC value, after the LPF (rh) */
    __I  Ifx_UReg_32Bit FBADCV:9;          /**< \brief [20:12] Feedback ADC value, after the LPF (rh) */
    __I  Ifx_UReg_32Bit DUTYCYCLE:9;       /**< \brief [29:21] DPWM control output status (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PMS_EVRC_STAT1_Bits;

/** \brief HPBG trim register for dynamic trimming over temperature */
typedef struct _Ifx_PMS_HPBGTRIM_Bits
{
    __IO Ifx_UReg_32Bit TRIMEN:1;          /**< \brief [0:0] Enable dynamic trimming over temperature (rw) */
    __IO Ifx_UReg_32Bit TRIM0:3;           /**< \brief [3:1] Dynamic trim value for temperature range 0 (rw) */
    __IO Ifx_UReg_32Bit TRIM1:3;           /**< \brief [6:4] Dynamic trim value for temperature range 1 (rw) */
    __IO Ifx_UReg_32Bit TRIM2:3;           /**< \brief [9:7] Dynamic trim value for temperature range 2 (rw) */
    __IO Ifx_UReg_32Bit TRIM3:3;           /**< \brief [12:10] Dynamic trim value for temperature range 3 (rw) */
    __IO Ifx_UReg_32Bit TRIM4:3;           /**< \brief [15:13] Dynamic trim value for temperature range 4 (rw) */
    __IO Ifx_UReg_32Bit TRIM5:3;           /**< \brief [18:16] Dynamic trim value for temperature range 5 (rw) */
    __IO Ifx_UReg_32Bit TRIM6:3;           /**< \brief [21:19] Dynamic trim value for temperature range 6 (rw) */
    __IO Ifx_UReg_32Bit TRIM7:3;           /**< \brief [24:22] Dynamic trim value for temperature range 7 (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_HPBGTRIM_Bits;

/** \brief HPOSC configuration register 1 */
typedef struct _Ifx_PMS_HPOSCCON1_Bits
{
    __IO Ifx_UReg_32Bit OSCFTRIM:9;        /**< \brief [8:0] Back-up clock fine trim value (rwh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PMS_HPOSCCON1_Bits;

/** \brief HPOSC trim register for dynamic trimming over temperature */
typedef struct _Ifx_PMS_HPOSCTRIM_Bits
{
    __IO Ifx_UReg_32Bit TRIMEN:1;          /**< \brief [0:0] Enable dynamic trimming over temperature (rw) */
    __IO Ifx_UReg_32Bit TRIM0:3;           /**< \brief [3:1] Dynamic trim value for temperature range 0 (rw) */
    __IO Ifx_UReg_32Bit TRIM1:3;           /**< \brief [6:4] Dynamic trim value for temperature range 1 (rw) */
    __IO Ifx_UReg_32Bit TRIM2:3;           /**< \brief [9:7] Dynamic trim value for temperature range 2 (rw) */
    __IO Ifx_UReg_32Bit TRIM3:3;           /**< \brief [12:10] Dynamic trim value for temperature range 3 (rw) */
    __IO Ifx_UReg_32Bit TRIM4:3;           /**< \brief [15:13] Dynamic trim value for temperature range 4 (rw) */
    __IO Ifx_UReg_32Bit TRIM5:3;           /**< \brief [18:16] Dynamic trim value for temperature range 5 (rw) */
    __IO Ifx_UReg_32Bit TRIM6:3;           /**< \brief [21:19] Dynamic trim value for temperature range 6 (rw) */
    __IO Ifx_UReg_32Bit TRIM7:3;           /**< \brief [24:22] Dynamic trim value for temperature range 7 (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_HPOSCTRIM_Bits;

/** \brief Module identification register */
typedef struct _Ifx_PMS_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module revision (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module type (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module number (r) */
} Ifx_PMS_ID_Bits;

/** \brief Interrupt status clear register */
typedef struct _Ifx_PMS_INT_CLR_Bits
{
    __O  Ifx_UReg_32Bit RTCCMP0INTCLR:1;    /**< \brief [0:0] RTC CMP0 interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit RTCCMP1INTCLR:1;    /**< \brief [1:1] RTC CMP1 interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit WUTINTCLR:1;       /**< \brief [2:2] WUT interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit ESR0INTCLR:1;      /**< \brief [3:3] ESR0 interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit ESR1INTCLR:1;      /**< \brief [4:4] ESR1 interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit ESR2INTCLR:1;      /**< \brief [5:5] ESR2 interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINAINTCLR:1;      /**< \brief [6:6] PINA interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINBINTCLR:1;      /**< \brief [7:7] PINB interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINCINTCLR:1;      /**< \brief [8:8] PINC interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINSSBINTCLR:1;    /**< \brief [9:9] VDDEVRSB pins interrupt indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINSEXTINTCLR:1;    /**< \brief [10:10] VDDEXT pins interrupt indication flag clear (w) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PMS_INT_CLR_Bits;

/** \brief Interrupt configuration register 0 */
typedef struct _Ifx_PMS_INT_CON0_Bits
{
    __IO Ifx_UReg_32Bit OVVDDEVRSB:1;      /**< \brief [0:0] OVVDDEVRSB interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDEVRSB:1;      /**< \brief [1:1] UVVDDEVRSB interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDEXT:1;        /**< \brief [2:2] OVVDDEXT interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDEXT:1;        /**< \brief [3:3] UVVDDEXT interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDM:1;          /**< \brief [4:4] OVVDDM interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDM:1;          /**< \brief [5:5] UVVDDM interrupt enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit OVVDD:1;           /**< \brief [8:8] OVVDD interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDD:1;           /**< \brief [9:9] UVVDD interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPMS0:1;       /**< \brief [10:10] OVVDDPMS0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPMS0:1;       /**< \brief [11:11] UVVDDPMS0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPMS1:1;       /**< \brief [12:12] OVVDDPMS1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPMS1:1;       /**< \brief [13:13] UVVDDPMS1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPMS2:1;       /**< \brief [14:14] OVVDDPMS2 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPMS2:1;       /**< \brief [15:15] UVVDDPMS2 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDSBRAM:1;      /**< \brief [16:16] OVVDDSBRAM interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDSBRAM:1;      /**< \brief [17:17] UVVDDSBRAM interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPAD:1;        /**< \brief [18:18] OVVDDPAD interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPAD:1;        /**< \brief [19:19] UVVDDPAD interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDEXTDC:1;      /**< \brief [20:20] OVVDDEXTDC interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDEXTDC:1;      /**< \brief [21:21] UVVDDEXTDC interrupt enable (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_PMS_INT_CON0_Bits;

/** \brief Interrupt Configuration Register 1 */
typedef struct _Ifx_PMS_INT_CON1_Bits
{
    __IO Ifx_UReg_32Bit OVVDDPHPHY0:1;     /**< \brief [0:0] OVVDDPHPHY0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHPHY0:1;     /**< \brief [1:1] UVVDDPHPHY0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHPHY1:1;     /**< \brief [2:2] OVVDDPHPHY1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHPHY1:1;     /**< \brief [3:3] UVVDDPHPHY1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHPHY2:1;     /**< \brief [4:4] OVVDDPHPHY2 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHPHY2:1;     /**< \brief [5:5] UVVDDPHPHY2 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDHSIF:1;       /**< \brief [6:6] OVVDDHSIF interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDHSIF:1;       /**< \brief [7:7] UVVDDHSIF interrupt enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [9:8] \internal Reserved */
    __IO Ifx_UReg_32Bit OVVDDPHY0:1;       /**< \brief [10:10] OVVDDPHY0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHY0:1;       /**< \brief [11:11] UVVDDPHY0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHY1:1;       /**< \brief [12:12] OVVDDPHY1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHY1:1;       /**< \brief [13:13] UVVDDPHY1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPHY2:1;       /**< \brief [14:14] OVVDDPHY2 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPHY2:1;       /**< \brief [15:15] UVVDDPHY2 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDLMU0:1;       /**< \brief [16:16] OVVDDLMU0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDLMU0:1;       /**< \brief [17:17] UVVDDLMU0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDLMU1:1;       /**< \brief [18:18] OVVDDLMU1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDLMU1:1;       /**< \brief [19:19] UVVDDLMU1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit OVVDDPPU:1;        /**< \brief [20:20] OVVDDPPU interrupt enable (rw) */
    __IO Ifx_UReg_32Bit UVVDDPPU:1;        /**< \brief [21:21] UVVDDPPU interrupt enable (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_PMS_INT_CON1_Bits;

/** \brief Interrupt configuration register 2 */
typedef struct _Ifx_PMS_INT_CON2_Bits
{
    __IO Ifx_UReg_32Bit RTCCMP0:1;         /**< \brief [0:0] RTC CMP0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit RTCCMP1:1;         /**< \brief [1:1] RTC CMP1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit WUTWKP:1;          /**< \brief [2:2] WUTWKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit ESR0WKP:1;         /**< \brief [3:3] ESR0WKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit ESR1WKP:1;         /**< \brief [4:4] ESR1WKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit ESR2WKP:1;         /**< \brief [5:5] ESR2WKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit PINAWKP:1;         /**< \brief [6:6] PINAWKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit PINBWKP:1;         /**< \brief [7:7] PINBWKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit PINCWKP:1;         /**< \brief [8:8] PINCWKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit PINSSBWKP:1;       /**< \brief [9:9] PINSSBWKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit PINSEXTWKP:1;      /**< \brief [10:10] PINSEXTWKP interrupt enable (rw) */
    __IO Ifx_UReg_32Bit SCRINT0:1;         /**< \brief [11:11] SCRINT0 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit SCRINT1:1;         /**< \brief [12:12] SCRINT1 interrupt enable (rw) */
    __IO Ifx_UReg_32Bit SCRRST:1;          /**< \brief [13:13] SCRRST interrupt enable (rw) */
    __IO Ifx_UReg_32Bit SCRECC:1;          /**< \brief [14:14] SCRECC interrupt enable (rw) */
    __IO Ifx_UReg_32Bit SCRWDT:1;          /**< \brief [15:15] SCRWDT interrupt enable (rw) */
    __IO Ifx_UReg_32Bit SCRPINRST:1;       /**< \brief [16:16] SCRPINRST interrupt enable (rw) */
    __IO Ifx_UReg_32Bit DCDCVOK:1;         /**< \brief [17:17] SDVOK interrupt enable (rw) */
    __IO Ifx_UReg_32Bit DCDCSYNCLCK:1;     /**< \brief [18:18] EVRC SYNCLCK interrupt enable (rw) */
    __IO Ifx_UReg_32Bit VDDEXTDCLVL:1;     /**< \brief [19:19] VDDEXTDCLVL interrupt enable (rw) */
    __IO Ifx_UReg_32Bit FIFOFULL:1;        /**< \brief [20:20] FIFOFULL interrupt enable (rw) */
    __IO Ifx_UReg_32Bit FIFOEMPTY:1;       /**< \brief [21:21] FIFOEMPTY interrupt enable (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_PMS_INT_CON2_Bits;

/** \brief Interrupt status register */
typedef struct _Ifx_PMS_INT_STAT_Bits
{
    __IO Ifx_UReg_32Bit RTCCMP0:1;         /**< \brief [0:0] RTC CMP0 interrupt flag (rw1sh) */
    __IO Ifx_UReg_32Bit RTCCMP1:1;         /**< \brief [1:1] RTC CMP1 interrupt flag (rw1sh) */
    __I  Ifx_UReg_32Bit WUTWKP:1;          /**< \brief [2:2] WUTWKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit ESR0WKP:1;         /**< \brief [3:3] ESR0WKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit ESR1WKP:1;         /**< \brief [4:4] ESR1WKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit ESR2WKP:1;         /**< \brief [5:5] ESR2WKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit PINAWKP:1;         /**< \brief [6:6] PINAWKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit PINBWKP:1;         /**< \brief [7:7] PINBWKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit PINCWKP:1;         /**< \brief [8:8] PINCWKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit PINSSBWKP:1;       /**< \brief [9:9] PINSSBWKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit PINSEXTWKP:1;      /**< \brief [10:10] PINSEXTWKP interrupt flag (rh) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PMS_INT_STAT_Bits;

/** \brief Register to store user info in PMS1 domain and reset by LVDPMS1 */
typedef struct _Ifx_PMS_LVDPMS1USRINFO_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] User data (rw) */
} Ifx_PMS_LVDPMS1USRINFO_Bits;

/** \brief OCDS trigger set control 0 register */
typedef struct _Ifx_PMS_OTSC0_Bits
{
    __IO Ifx_UReg_32Bit B0PMS:8;           /**< \brief [7:0] OTGB0 PMS trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit B1PMS:8;           /**< \brief [23:16] OTGB1 PMS trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PMS_OTSC0_Bits;

/** \brief OCDS trigger set control 1 register */
typedef struct _Ifx_PMS_OTSC1_Bits
{
    __IO Ifx_UReg_32Bit B0EVRC:4;          /**< \brief [3:0] OTGB0 EVRC trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit B1EVRC:4;          /**< \brief [11:8] OTGB1 EVRC trigger set selection (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PMS_OTSC1_Bits;

/** \brief OCDS trigger set select register */
typedef struct _Ifx_PMS_OTSS_Bits
{
    __IO Ifx_UReg_32Bit OTGB0:2;           /**< \brief [1:0] Trigger set for OTGB0 (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit OTGB1:2;           /**< \brief [9:8] Trigger set for OTGB1 (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PMS_OTSS_Bits;

/** \brief Pad configuration register */
typedef struct _Ifx_PMS_PAD_CON_Bits
{
    __IO Ifx_UReg_32Bit ALLTRIST:1;        /**< \brief [0:0] Tristate enable for all pads (rwh) */
    __O  Ifx_UReg_32Bit ALLTRIST_P:1;      /**< \brief [1:1] Bit protection for ALLTRIST (w) */
    __IO Ifx_UReg_32Bit SBTRIST:1;         /**< \brief [2:2] Tristate enable for standby pads (rwh) */
    __O  Ifx_UReg_32Bit SBTRIST_P:1;       /**< \brief [3:3] Bit protection for SBTRIST (w) */
    __IO Ifx_UReg_32Bit ESR0PD:1;          /**< \brief [4:4] ESR0 pull-down enable (rw) */
    __IO Ifx_UReg_32Bit ESR2WKPRUNPD:1;    /**< \brief [5:5] ESR2 is pulled down in case of STBY to RUN transition (rw) */
    __IO Ifx_UReg_32Bit PORSTDFEN:2;       /**< \brief [7:6] PORST digital filter enable (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PMS_PAD_CON_Bits;

/** \brief ESR2 pad configuration register */
typedef struct _Ifx_PMS_PAD_ESR2CON_Bits
{
    __IO Ifx_UReg_32Bit ESR2ROEN:1;        /**< \brief [0:0] ESR reset output elongation in case of warm PORST enabled (rw) */
    __IO Ifx_UReg_32Bit ESR2ROAPP:1;       /**< \brief [1:1] ESR reset output elongation in case of application reset enabled (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit RSTECNT:12;        /**< \brief [27:16] Reload value for reset and ESR2 output elongation counter (rw) */
    __IO Ifx_UReg_32Bit CLKDIV:4;          /**< \brief [31:28] Clock divider for 100MHz base clock (rw) */
} Ifx_PMS_PAD_ESR2CON_Bits;

/** \brief Pad status register */
typedef struct _Ifx_PMS_PAD_STAT_Bits
{
    __I  Ifx_UReg_32Bit HWCFGEVRC0:1;      /**< \brief [0:0] EVRC internal hardware configuration 0 status (rh) */
    __I  Ifx_UReg_32Bit HWCFG1:1;          /**< \brief [1:1] Hardware configuration pin 1 status (rh) */
    __I  Ifx_UReg_32Bit HWCFG2:1;          /**< \brief [2:2] Hardware configuration pin 2 status (rh) */
    __I  Ifx_UReg_32Bit HWCFG3:1;          /**< \brief [3:3] Hardware configuration pin 3 status (rh) */
    __I  Ifx_UReg_32Bit HWCFG4:1;          /**< \brief [4:4] Hardware configuration pin 4 status (rh) */
    __I  Ifx_UReg_32Bit HWCFG5:1;          /**< \brief [5:5] Hardware configuration pin 5 status (rh) */
    __I  Ifx_UReg_32Bit ALLTRIST:1;        /**< \brief [6:6] Pad tristate / pull-up status (rh) */
    __I  Ifx_UReg_32Bit SBTRIST:1;         /**< \brief [7:7] Standby pad tristate / pull-up status (rh) */
    __I  Ifx_UReg_32Bit TESTMODE:1;        /**< \brief [8:8] TESTMODE pin status (rh) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PMS_PAD_STAT_Bits;

/** \brief Power domain configuration register 0 */
typedef struct _Ifx_PMS_PD_CON0_Bits
{
    __IO Ifx_UReg_32Bit LMU0PDEN:1;        /**< \brief [0:0] Enable to power down LMU0 power domain (power down enable) (rw) */
    __O  Ifx_UReg_32Bit LMU0PDEN_P:1;      /**< \brief [1:1] Bit protection for LMU0PDEN (w) */
    __IO Ifx_UReg_32Bit LMU1PDEN:1;        /**< \brief [2:2] Enable to power down LMU1 power domain (power down enable) (rw) */
    __O  Ifx_UReg_32Bit LMU1PDEN_P:1;      /**< \brief [3:3] Bit protection for LMU1PDEN (w) */
    __IO Ifx_UReg_32Bit PPUPDEN:1;         /**< \brief [4:4] Enable to power down PPU power domain (power down enable) (rw) */
    __O  Ifx_UReg_32Bit PPUPDEN_P:1;       /**< \brief [5:5] Bit protection for PPUPDEN (w) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKLMU:3;          /**< \brief [10:8] LMU power switch rate clock divider (rw) */
    __IO Ifx_UReg_32Bit CLKPPU:3;          /**< \brief [13:11] PPU power switch rate clock divider (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_PMS_PD_CON0_Bits;

/** \brief Power domain configuration register 1 */
typedef struct _Ifx_PMS_PD_CON1_Bits
{
    __IO Ifx_UReg_32Bit LMU0OFFREQ:1;      /**< \brief [0:0] Request LMU0 power domain switch off (rw) */
    __O  Ifx_UReg_32Bit LMU0OFFREQ_P:1;    /**< \brief [1:1] Bit protection for LMU0OFFREQ (w) */
    __IO Ifx_UReg_32Bit LMU1OFFREQ:1;      /**< \brief [2:2] Request LMU1 power domain switch off (rw) */
    __O  Ifx_UReg_32Bit LMU1OFFREQ_P:1;    /**< \brief [3:3] Bit protection for LMU1OFFREQ (w) */
    __IO Ifx_UReg_32Bit PPUOFFREQ:1;       /**< \brief [4:4] Request PPU power domain switch off (rw) */
    __O  Ifx_UReg_32Bit PPUOFFREQ_P:1;     /**< \brief [5:5] Bit protection for PPUOFFREQ (w) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PMS_PD_CON1_Bits;

/** \brief Power domain status register 0 */
typedef struct _Ifx_PMS_PD_STAT0_Bits
{
    __I  Ifx_UReg_32Bit LMU0REQ:1;         /**< \brief [0:0] LMU0 power domain switch off was requested after last cold PORST (rh) */
    __I  Ifx_UReg_32Bit LMU0SWSTAT:1;      /**< \brief [1:1] LMU0 switch status (rh) */
    __I  Ifx_UReg_32Bit LMU1REQ:1;         /**< \brief [2:2] LMU1 power domain switch off was requested after last cold PORST (rh) */
    __I  Ifx_UReg_32Bit LMU1SWSTAT:1;      /**< \brief [3:3] LMU1 switch status (rh) */
    __I  Ifx_UReg_32Bit PPUREQ:1;          /**< \brief [4:4] PPU power domain switch off was requested after last cold PORST (rh) */
    __I  Ifx_UReg_32Bit PPUSWSTAT:1;       /**< \brief [5:5] PPU switch status (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PMS_PD_STAT0_Bits;

/** \brief Trim register for PMS0 components */
typedef struct _Ifx_PMS_PMS0TRIM_Bits
{
    __IO Ifx_UReg_32Bit SBTRIM:3;          /**< \brief [2:0] VDDSBRAM integrated regulator trim value (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PMS_PMS0TRIM_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_PMS_PROT_PMS_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_PMS_PROT_PMS_Bits;

/** \brief  */
typedef struct _Ifx_PMS_PVDCON_Bits
{
    __IO Ifx_UReg_32Bit ENABLE:1;          /**< \brief [0:0] Enable/disable peak voltage detection for respective supply (rw) */
    __IO Ifx_UReg_32Bit THRESHOLD:11;      /**< \brief [11:1] Threshold value configured by sw for peak voltage detection (rw) */
    __IO Ifx_UReg_32Bit LPFENABLE:1;       /**< \brief [12:12] Enable/disable the low-pass filtering of the recorded peak values (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [30:13] \internal Reserved */
    __O  Ifx_UReg_32Bit RESET:1;           /**< \brief [31:31] SW reset bit for peak voltage detection (w) */
} Ifx_PMS_PVDCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_PVDHISTSTAT_Bits
{
    __I  Ifx_UReg_32Bit PEAKVOLT:11;       /**< \brief [10:0] Peak voltage detected value (rh) */
    __I  Ifx_UReg_32Bit THRESCOUNT:21;     /**< \brief [31:11] Detected sample count above configured threshold value (rh) */
} Ifx_PMS_PVDHISTSTAT_Bits;

/** \brief  */
typedef struct _Ifx_PMS_PVDSTAT_Bits
{
    __I  Ifx_UReg_32Bit PEAKVOLT:11;       /**< \brief [10:0] Peak voltage detected value (rh) */
    __I  Ifx_UReg_32Bit THRESCOUNT:21;     /**< \brief [31:11] Detected sample count above configured threshold value (rh) */
} Ifx_PMS_PVDSTAT_Bits;

/** \brief Register access status register */
typedef struct _Ifx_PMS_REGACCSTAT_Bits
{
    __I  Ifx_UReg_32Bit FIFOFULL:1;        /**< \brief [0:0] RAI FIFO full status (rh) */
    __I  Ifx_UReg_32Bit FIFOEMPTY:1;       /**< \brief [1:1] RAI FIFO empty status (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PMS_REGACCSTAT_Bits;

/** \brief RTC compare register 0 */
typedef struct _Ifx_PMS_RTC_CMP0_Bits
{
    __IO Ifx_UReg_32Bit CMPVAL0:32;        /**< \brief [31:0] Compare value [31:0] (rw) */
} Ifx_PMS_RTC_CMP0_Bits;

/** \brief RTC compare register 1 */
typedef struct _Ifx_PMS_RTC_CMP1_Bits
{
    __IO Ifx_UReg_32Bit CMPVAL1:32;        /**< \brief [31:0] Compare value [63:32] (rwh) */
} Ifx_PMS_RTC_CMP1_Bits;

/** \brief RTC configuration register 0 */
typedef struct _Ifx_PMS_RTC_CON0_Bits
{
    __IO Ifx_UReg_32Bit RTCOSCEN:1;        /**< \brief [0:0] RTC oscillator enable (rw) */
    __IO Ifx_UReg_32Bit REGEN:1;           /**< \brief [1:1] Amplitude regulation (rw) */
    __IO Ifx_UReg_32Bit GAINSEL:2;         /**< \brief [3:2] Gain control (rw) */
    __IO Ifx_UReg_32Bit HYSEN:1;           /**< \brief [4:4] Hysteresis enable (rw) */
    __IO Ifx_UReg_32Bit RTCCLKSEL:1;       /**< \brief [5:5] Clock source selection (rwh) */
    __IO Ifx_UReg_32Bit RTCEN:1;           /**< \brief [6:6] Clock enable for RTC digital module (rw) */
    __IO Ifx_UReg_32Bit RTCOUTSEL:2;       /**< \brief [8:7] RTC output to pins and timers (rw) */
    __IO Ifx_UReg_32Bit RTCWKPSEL:1;       /**< \brief [9:9] RTC wakeup selection (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PMS_RTC_CON0_Bits;

/** \brief RTC configuration register 1 */
typedef struct _Ifx_PMS_RTC_CON1_Bits
{
    __IO Ifx_UReg_32Bit DIV:16;            /**< \brief [15:0] Clock divider (rw) */
    __IO Ifx_UReg_32Bit OFFSET:16;         /**< \brief [31:16] Signed offset value (rwh) */
} Ifx_PMS_RTC_CON1_Bits;

/** \brief RTC configuration register 2 */
typedef struct _Ifx_PMS_RTC_CON2_Bits
{
    __IO Ifx_UReg_32Bit MSIZE0:5;          /**< \brief [4:0] Compare register size for CMP0 (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit MSTART0:5;         /**< \brief [12:8] Start bit location for CMP0 (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit MSIZE1:5;          /**< \brief [20:16] Compare register size for CMP1 (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit MSTART1:5;         /**< \brief [28:24] Start bit location for CMP1 (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PMS_RTC_CON2_Bits;

/** \brief RTC timer counter register 0 */
typedef struct _Ifx_PMS_RTC_TIM0_Bits
{
    __I  Ifx_UReg_32Bit TIMER:32;          /**< \brief [31:0] Timer[31:0] (rh) */
} Ifx_PMS_RTC_TIM0_Bits;

/** \brief RTC timer capture register */
typedef struct _Ifx_PMS_RTC_TIM1CAP_Bits
{
    __I  Ifx_UReg_32Bit TIMER:32;          /**< \brief [31:0] Timer[63:32] (rh) */
} Ifx_PMS_RTC_TIM1CAP_Bits;

/** \brief SCR configuration register 0 */
typedef struct _Ifx_PMS_SCR_CON0_Bits
{
    __IO Ifx_UReg_32Bit SCREN:1;           /**< \brief [0:0] Standby controller enable request (rw) */
    __O  Ifx_UReg_32Bit SCREN_P:1;         /**< \brief [1:1] Bit protection for SCREN (w) */
    __IO Ifx_UReg_32Bit PORSTREQ:1;        /**< \brief [2:2] SCR reset behavior on warm PORST in normal RUN / SLEEP mode (rw) */
    __O  Ifx_UReg_32Bit PORSTREQ_P:1;      /**< \brief [3:3] Bit protection for PORSTREQ (w) */
    __IO Ifx_UReg_32Bit SCRCLKSEL:1;       /**< \brief [4:4] Default SCR clock selection when SCR starts (rw) */
    __IO Ifx_UReg_32Bit PADLBIST:1;        /**< \brief [5:5] Control of standby pads during LBIST (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SCRCFG:3;          /**< \brief [18:16] Hardware configuration of the 8 bit SCR controller. - SCRCFG (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_PMS_SCR_CON0_Bits;

/** \brief SCR configuration register 1 */
typedef struct _Ifx_PMS_SCR_CON1_Bits
{
    __IO Ifx_UReg_32Bit TCINT:8;           /**< \brief [7:0] Data exchange from PMS main domain to standby controller (rw) */
    __IO Ifx_UReg_32Bit TCINTREQ:1;        /**< \brief [8:8] SW interrupt request from PMS to standby controller (rwh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit SCRSTREQ:1;        /**< \brief [16:16] Standby controller reset request (rwh) */
    __O  Ifx_UReg_32Bit SCRSTREQ_P:1;      /**< \brief [17:17] Standby controller reset request enable (w) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PMS_SCR_CON1_Bits;

/** \brief SCR status register */
typedef struct _Ifx_PMS_SCR_STAT_Bits
{
    __I  Ifx_UReg_32Bit SCRINT:8;          /**< \brief [7:0] Data exchange from standby controller to PMS main domain (rh) */
    __IO Ifx_UReg_32Bit SCRECC:1;          /**< \brief [8:8] SCR RAM ECC error / reset flag (rw0ch) */
    __IO Ifx_UReg_32Bit SCRWDT:1;          /**< \brief [9:9] SCR watchdog timer error / reset flag (rw0ch) */
    __IO Ifx_UReg_32Bit SCRPINRST:1;       /**< \brief [10:10] SCR pin reset flag (rw0ch) */
    __IO Ifx_UReg_32Bit SCRRST:1;          /**< \brief [11:11] SCR software reset flag (rw0ch) */
    __IO Ifx_UReg_32Bit SCRST:1;           /**< \brief [12:12] Standby controller reset indication flag (rw0ch) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PMS_SCR_STAT_Bits;

/** \brief Standby configuration register 0 */
typedef struct _Ifx_PMS_STANDBY_CON0_Bits
{
    __IO Ifx_UReg_32Bit SCRSTBY0EN:1;      /**< \brief [0:0] Enable that SCR can trigger a transition from STBY1 to STBY0 (rw) */
    __IO Ifx_UReg_32Bit VDDEXTSBEN:1;      /**< \brief [1:1] Standby entry on VDDEXT Supply ramp-down (rw) */
    __IO Ifx_UReg_32Bit ESR2DFEN:1;        /**< \brief [2:2] ESR2 digital filter enable (rw) */
    __IO Ifx_UReg_32Bit VDDEXTDCPWRDN:1;    /**< \brief [3:3] Enable powering down of VDDEXTDC during standby modes (rw) */
    __IO Ifx_UReg_32Bit ESR2SBEN:1;        /**< \brief [4:4] Standby entry on ESR2 trigger (rw) */
    __IO Ifx_UReg_32Bit OSCREGEN:1;        /**< \brief [5:5] Enable bit for the HPOSC pre-regulator during STANDBY0 and STANDBY1_70k (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __IO Ifx_UReg_32Bit SBRAMSEL:8;        /**< \brief [23:16] Standby RAM supply in Standby Mode (rw) */
    __IO Ifx_UReg_32Bit SCRRAMSEL:1;       /**< \brief [24:24] SCR RAM supply in STANDBY0 mode (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_STANDBY_CON0_Bits;

/** \brief Standby configuration register 1 */
typedef struct _Ifx_PMS_STANDBY_CON1_Bits
{
    __IO Ifx_UReg_32Bit SBMODSEL:1;        /**< \brief [0:0] Standby mode selection: STDBY0 or STBY1 state (rw) */
    __IO Ifx_UReg_32Bit VDDSBEN:1;         /**< \brief [1:1] Standby entry on VDD supply ramp-down (rw) */
    __IO Ifx_UReg_32Bit SWESRSBEN:1;       /**< \brief [2:2] Standby entry allowed by STBEV SW trigger on ESR events (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PMS_STANDBY_CON1_Bits;

/** \brief Voltage ID (VID) configuration register 0 */
typedef struct _Ifx_PMS_VID_CON0_Bits
{
    __IO Ifx_UReg_32Bit IDDLEAK:16;        /**< \brief [15:0] Leakage current at 127°C (rw) */
    __IO Ifx_UReg_32Bit VDDNOM:9;          /**< \brief [24:16] Nominal VDD voltage level (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PMS_VID_CON0_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONPCON_Bits
{
    __IO Ifx_UReg_32Bit UVVAL:11;          /**< \brief [10:0] Primary monitor alarm under-voltage threshold (rw) */
    __IO Ifx_UReg_32Bit UVENABLE:1;        /**< \brief [11:11] Primary monitor under-voltage alarm enable (rw) */
    __IO Ifx_UReg_32Bit FILTER:5;          /**< \brief [16:12] Primary monitor alarm spike filter (rw) */
    __IO Ifx_UReg_32Bit OVVAL:11;          /**< \brief [27:17] Primary monitor alarm over-voltage threshold (rw) */
    __IO Ifx_UReg_32Bit OVENABLE:1;        /**< \brief [28:28] Primary monitor over-voltage alarm enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PMS_VMONPCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONPRST_Bits
{
    __IO Ifx_UReg_32Bit RESETTRIM:11;      /**< \brief [10:0] Supply reset trim value (rw) */
    __IO Ifx_UReg_32Bit RESETPTRIM:4;      /**< \brief [14:11] Signed reset trim value (rw) */
    __IO Ifx_UReg_32Bit RESETHYS:8;        /**< \brief [22:15] Supply reset hysteresis trim value (rw) */
    __IO Ifx_UReg_32Bit RESETHYSEN:1;      /**< \brief [23:23] Reset release hysteresis enable (rw) */
    __IO Ifx_UReg_32Bit RESETOFF:1;        /**< \brief [24:24] Reset enable (rw) */
    __O  Ifx_UReg_32Bit RESETOFF_P:1;      /**< \brief [25:25] RESETOFF bit protection (w) */
    __IO Ifx_UReg_32Bit LPF:2;             /**< \brief [27:26] Primary monitor reset LPF coefficient (rw) */
    __IO Ifx_UReg_32Bit FILTER:4;          /**< \brief [31:28] Primary monitor reset spike filter (rw) */
} Ifx_PMS_VMONPRST_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONPSTAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:11;         /**< \brief [10:0] Primary monitor ADC conversion result (rh) */
    __I  Ifx_UReg_32Bit OV:1;              /**< \brief [11:11] Primary monitor over-voltage event flag (rh) */
    __I  Ifx_UReg_32Bit UV:1;              /**< \brief [12:12] Primary monitor under-voltage event flag (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit RESETVAL:11;       /**< \brief [26:16] Supply reset value status (rh) */
    __I  Ifx_UReg_32Bit RESETOFF:1;        /**< \brief [27:27] Reset enable status (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_VMONPSTAT_Bits;

/** \brief Tracking ADC trim register 0 */
typedef struct _Ifx_PMS_VMONP_TRKTRIM0_Bits
{
    __IO Ifx_UReg_32Bit VDDALARMLPF:2;     /**< \brief [1:0] VDD supply primary monitor alarm LPF coefficient (rw) */
    __IO Ifx_UReg_32Bit VDDEXTALARMLPF:2;    /**< \brief [3:2] VDDEXT supply primary monitor alarm LPF coefficient (rw) */
    __IO Ifx_UReg_32Bit VDDEXTDCALARMLPF:2;    /**< \brief [5:4] VDDEXTDC supply primary monitor alarm LPF coefficient (rw) */
    __IO Ifx_UReg_32Bit VSSDCHSALARMLPF:2;    /**< \brief [7:6] VSSDCHS supply primary monitor alarm LPF coefficient (rw) */
    __IO Ifx_UReg_32Bit VDDDCLSALARMLPF:2;    /**< \brief [9:8] VDDDCLS supply primary monitor alarm LPF coefficient (rw) */
    __IO Ifx_UReg_32Bit VDDEXTDCVMONSLPF:2;    /**< \brief [11:10] VDDEXTDC supply secondary monitor alarm LPF coefficient (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PMS_VMONP_TRKTRIM0_Bits;

/** \brief Power domain cold reset configuration register */
typedef struct _Ifx_PMS_VMONP_VDDCLDRST_Bits
{
    __IO Ifx_UReg_32Bit VDDPDCLDUV:11;     /**< \brief [10:0] Hard PD reset generation level (rw) */
    __IO Ifx_UReg_32Bit VDDPDCLDOFF:1;     /**< \brief [11:11] Reset disable bit for test and debug purpose (rw) */
    __O  Ifx_UReg_32Bit VDDPDCLDOFF_P:1;    /**< \brief [12:12] Bit protection for VDDPDCLDOFF (w) */
    __IO Ifx_UReg_32Bit FILTER:5;          /**< \brief [17:13] Primary monitor reset spike filter (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PMS_VMONP_VDDCLDRST_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONSCON_Bits
{
    __IO Ifx_UReg_32Bit UVVAL:11;          /**< \brief [10:0] Secondary monitor under-voltage threshold (rw) */
    __IO Ifx_UReg_32Bit UVMOD:2;           /**< \brief [12:11] Under-voltage monitoring mode (rw) */
    __IO Ifx_UReg_32Bit OVVAL:11;          /**< \brief [23:13] Secondary monitor over-voltage threshold (rw) */
    __IO Ifx_UReg_32Bit OVMOD:2;           /**< \brief [25:24] Over-voltage monitoring mode (rw) */
    __IO Ifx_UReg_32Bit FILTER:4;          /**< \brief [29:26] Secondary ADC supply filter (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PMS_VMONSCON_Bits;

/** \brief  */
typedef struct _Ifx_PMS_VMONSSTAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:11;         /**< \brief [10:0] Secondary ADC conversion result (unfiltered) (rh) */
    __I  Ifx_UReg_32Bit OV:1;              /**< \brief [11:11] Secondary monitor over-voltage event flag after filtering (rh) */
    __I  Ifx_UReg_32Bit UV:1;              /**< \brief [12:12] Secondary monitor under-voltage event flag after filtering (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [25:13] \internal Reserved */
    __I  Ifx_UReg_32Bit ACTIVITY:6;        /**< \brief [31:26] Secondary monitor activity counter (rh) */
} Ifx_PMS_VMONSSTAT_Bits;

/** \brief Secondary monitor level selection register */
typedef struct _Ifx_PMS_VMONS_LVLSEL_Bits
{
    __IO Ifx_UReg_32Bit VDDMLVLSEL:9;      /**< \brief [8:0] VDDM level select (rw) */
    __IO Ifx_UReg_32Bit VDDEXTLVLSEL:9;    /**< \brief [17:9] VDDEXT level select (rw) */
    __I  Ifx_UReg_32Bit NVMMINSEL:9;       /**< \brief [26:18] Minimum voltage level for stable NVM operation (r) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_PMS_VMONS_LVLSEL_Bits;

/** \brief Secondary monitor level selection status register */
typedef struct _Ifx_PMS_VMONS_LVLSTAT_Bits
{
    __I  Ifx_UReg_32Bit VDDMLVL:1;         /**< \brief [0:0] VDDM level status (rh) */
    __I  Ifx_UReg_32Bit VDDEXTLVL:1;       /**< \brief [1:1] VDDEXT level status (rh) */
    __I  Ifx_UReg_32Bit NVMMIN:1;          /**< \brief [2:2] VDDEXT voltage level status for NVM operation (rh) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PMS_VMONS_LVLSTAT_Bits;

/** \brief Standby and wake-up status clear register 0 */
typedef struct _Ifx_PMS_WAKEUP_CLR0_Bits
{
    __O  Ifx_UReg_32Bit ESR2WKPCLR:1;      /**< \brief [0:0] ESR2 wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINBWKPCLR:1;      /**< \brief [1:1] PINB wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINCWKPCLR:1;      /**< \brief [2:2] PINC wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINSEXTWKPCLR:1;    /**< \brief [3:3] VDDEXT pins wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINSSBWKPCLR:1;    /**< \brief [4:4] VDDEVRSB pins wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit RTCWKPCLR:1;       /**< \brief [5:5] RTC wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit WUTWKPCLR:1;       /**< \brief [6:6] WUT wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PWRWKPCLR:1;       /**< \brief [7:7] PWRWKP wake-up indication flag clear (w) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __O  Ifx_UReg_32Bit ESR2OVRUNCLR:1;    /**< \brief [16:16] ESR2 overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINBOVRUNCLR:1;    /**< \brief [17:17] PINB overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINCOVRUNCLR:1;    /**< \brief [18:18] PINC overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit RTCOVRUNCLR:1;     /**< \brief [19:19] RTC overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit WUTOVRUNCLR:1;     /**< \brief [20:20] WUT overrun status indication flag clear (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_CLR0_Bits;

/** \brief Standby and wake-up status clear register 1 */
typedef struct _Ifx_PMS_WAKEUP_CLR1_Bits
{
    __O  Ifx_UReg_32Bit ESR0WKPCLR:1;      /**< \brief [0:0] ESR0 wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit ESR1WKPCLR:1;      /**< \brief [1:1] ESR1 wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINAWKPCLR:1;      /**< \brief [2:2] PINA wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit SCRWKPCLR:1;       /**< \brief [3:3] SCR wake-up indication flag clear (w) */
    __O  Ifx_UReg_32Bit PORSTWKPCLR:1;     /**< \brief [4:4] PORST wake-up indication flag clear (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __O  Ifx_UReg_32Bit ESR0OVRUNCLR:1;    /**< \brief [16:16] ESR0 overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit ESR1OVRUNCLR:1;    /**< \brief [17:17] ESR1 overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit PINAOVRUNCLR:1;    /**< \brief [18:18] PINA overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit SCROVRUNCLR:1;     /**< \brief [19:19] SCR overrun status indication flag clear (w) */
    __O  Ifx_UReg_32Bit PORSTOVRUNCLR:1;    /**< \brief [20:20] PORST overrun status indication flag clear (w) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_CLR1_Bits;

/** \brief Wake-up configuration register 0 */
typedef struct _Ifx_PMS_WAKEUP_CON0_Bits
{
    __IO Ifx_UReg_32Bit ESR2WKEN:2;        /**< \brief [1:0] ESR2 wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit ESR2DFEN:1;        /**< \brief [2:2] ESR2 digital filter enable (rw) */
    __IO Ifx_UReg_32Bit ESR2EDCON:2;       /**< \brief [4:3] ESR2 edge detection control (rw) */
    __IO Ifx_UReg_32Bit PINBWKEN:2;        /**< \brief [6:5] Pin B wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit PINBDFEN:1;        /**< \brief [7:7] PINB digital filter enable (rw) */
    __IO Ifx_UReg_32Bit PINBEDCON:2;       /**< \brief [9:8] PINB edge detection control (rw) */
    __IO Ifx_UReg_32Bit PINCWKEN:2;        /**< \brief [11:10] Pin C wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit PINCDFEN:1;        /**< \brief [12:12] PINC digital filter enable (rw) */
    __IO Ifx_UReg_32Bit PINCEDCON:2;       /**< \brief [14:13] PINC edge detection control (rw) */
    __IO Ifx_UReg_32Bit PINSEXTWKEN:1;     /**< \brief [15:15] VDDEXT pins wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit PINSSBWKEN:1;      /**< \brief [16:16] VDDEVRSB pins wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit RTCWKEN:2;         /**< \brief [18:17] RTC wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit WUTWKEN:2;         /**< \brief [20:19] WUT wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit PWRWKEN:2;         /**< \brief [22:21] Standby wake-up enable on VDDEXT supply ramp-up (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [27:23] \internal Reserved */
    __IO Ifx_UReg_32Bit BLNKFIL:4;         /**< \brief [31:28] Blanking filter delay for wake-up (rw) */
} Ifx_PMS_WAKEUP_CON0_Bits;

/** \brief Wake-up configuration register 1 */
typedef struct _Ifx_PMS_WAKEUP_CON1_Bits
{
    __IO Ifx_UReg_32Bit ESR0WKEN:1;        /**< \brief [0:0] ESR0 wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit ESR0DFEN:1;        /**< \brief [1:1] ESR0 digital filter enable (rw) */
    __IO Ifx_UReg_32Bit ESR0EDCON:2;       /**< \brief [3:2] ESR0 edge detection control (rw) */
    __IO Ifx_UReg_32Bit ESR1WKEN:1;        /**< \brief [4:4] ESR1 wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit ESR1DFEN:1;        /**< \brief [5:5] ESR1 digital filter enable (rw) */
    __IO Ifx_UReg_32Bit ESR1EDCON:2;       /**< \brief [7:6] ESR1 edge detection control (rw) */
    __IO Ifx_UReg_32Bit PINAWKEN:1;        /**< \brief [8:8] Pin A wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit PINADFEN:1;        /**< \brief [9:9] PINA digital filter enable (rw) */
    __IO Ifx_UReg_32Bit PINAEDCON:2;       /**< \brief [11:10] PINA edge detection control (rw) */
    __IO Ifx_UReg_32Bit SCRWKEN:1;         /**< \brief [12:12] Standby controller wake-up enable from standby (rw) */
    __IO Ifx_UReg_32Bit PORSTWKEN:1;       /**< \brief [13:13] PORST pin wake-up enable from standby (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_PMS_WAKEUP_CON1_Bits;

/** \brief Wake-up status register 0 */
typedef struct _Ifx_PMS_WAKEUP_STAT0_Bits
{
    __I  Ifx_UReg_32Bit ESR2WKP:1;         /**< \brief [0:0] ESR2 wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PINBWKP:1;         /**< \brief [1:1] Pin B wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PINCWKP:1;         /**< \brief [2:2] Pin C wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PINSEXTWKP:1;      /**< \brief [3:3] VDDEXT pins wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PINSSBWKP:1;       /**< \brief [4:4] VDDEVRSB pins wake-up flag (rh) */
    __I  Ifx_UReg_32Bit RTCWKP:1;          /**< \brief [5:5] RTC wake-up flag (rh) */
    __I  Ifx_UReg_32Bit WUTWKP:1;          /**< \brief [6:6] WUT wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PWRWKP:1;          /**< \brief [7:7] Wake-up event on VDDEXT supply ramp-up (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit ESR2OVRUN:1;       /**< \brief [16:16] ESR2 overrun status flag (rh) */
    __I  Ifx_UReg_32Bit PINBOVRUN:1;       /**< \brief [17:17] Pin B overrun status flag (rh) */
    __I  Ifx_UReg_32Bit PINCOVRUN:1;       /**< \brief [18:18] Pin C overrun status flag (rh) */
    __I  Ifx_UReg_32Bit RTCOVRUN:1;        /**< \brief [19:19] RTC overrun status flag (rh) */
    __I  Ifx_UReg_32Bit WUTOVRUN:1;        /**< \brief [20:20] WUT overrun status flag (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_STAT0_Bits;

/** \brief Wake-up status register 1 */
typedef struct _Ifx_PMS_WAKEUP_STAT1_Bits
{
    __I  Ifx_UReg_32Bit ESR0WKP:1;         /**< \brief [0:0] ESR0 wake-up flag (rh) */
    __I  Ifx_UReg_32Bit ESR1WKP:1;         /**< \brief [1:1] ESR1 wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PINAWKP:1;         /**< \brief [2:2] Pin wake-up flag (rh) */
    __I  Ifx_UReg_32Bit SCRWKP:1;          /**< \brief [3:3] SCR wake-up flag (rh) */
    __I  Ifx_UReg_32Bit PORSTWKP:1;        /**< \brief [4:4] PORST wake-up flag (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __I  Ifx_UReg_32Bit ESR0OVRUN:1;       /**< \brief [16:16] ESR0 overrun status flag (rh) */
    __I  Ifx_UReg_32Bit ESR1OVRUN:1;       /**< \brief [17:17] ESR1 overrun status flag (rh) */
    __I  Ifx_UReg_32Bit PINAOVRUN:1;       /**< \brief [18:18] Pin A overrun status flag (rh) */
    __I  Ifx_UReg_32Bit SCROVRUN:1;        /**< \brief [19:19] SCR overrun status flag (rh) */
    __I  Ifx_UReg_32Bit PORSTOVRUN:1;      /**< \brief [20:20] PORST overrun status flag (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_PMS_WAKEUP_STAT1_Bits;

/** \brief Register to store user info in PMS2 domain and reset by warm PORST */
typedef struct _Ifx_PMS_WRMPORSTUSRINFO_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] User data (rw) */
} Ifx_PMS_WRMPORSTUSRINFO_Bits;

/** \brief Wake-up timer configuration register */
typedef struct _Ifx_PMS_WUT_CON_Bits
{
    __IO Ifx_UReg_32Bit RELOAD:24;         /**< \brief [23:0] WUT reload value (rw) */
    __IO Ifx_UReg_32Bit ENABLE:1;          /**< \brief [24:24] WUT enable (rw) */
    __IO Ifx_UReg_32Bit DIV:1;             /**< \brief [25:25] WUT clock divider (rw) */
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [27:26] WUT mode selection (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_WUT_CON_Bits;

/** \brief Wake-up timer status register */
typedef struct _Ifx_PMS_WUT_STAT_Bits
{
    __I  Ifx_UReg_32Bit COUNTER:24;        /**< \brief [23:0] WUT counter value (rh) */
    __I  Ifx_UReg_32Bit ENABLE:1;          /**< \brief [24:24] WUT enable status (rh) */
    __I  Ifx_UReg_32Bit RUN:1;             /**< \brief [25:25] WUT run status (rh) */
    __I  Ifx_UReg_32Bit MODE:2;            /**< \brief [27:26] WUT mode status (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PMS_WUT_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_pms_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_PRS_PMS_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_PRS_PMS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_RDA_PMS_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_RDA_PMS;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_RDB_PMS_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_RDB_PMS;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_VM_PMS_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_VM_PMS;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_WRA_PMS_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_WRA_PMS;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ACCEN_WRB_PMS_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_ACCEN_WRB_PMS;

/** \brief Register to store user info in PMS2 domain and reset by cold PORST   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDPORSTUSRINFO_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_CLDPORSTUSRINFO;

/** \brief Cold reset configuration register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTCON_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTCON;

/** \brief Cold reset trigger register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTRIG_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTRIG;

/** \brief Cold reset last trigger register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTRIGL_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTRIGL;

/** \brief Cold reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTSTAT_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTSTAT;

/** \brief Cold reset status clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_CLDRSTSTATCLR_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_CLDRSTSTATCLR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DRMONCON_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_DRMONCON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DRMONSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_DRMONSTAT;

/** \brief Die temperature sensor control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_CON_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_DTS_CON;

/** \brief Die temperature sensor limit register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_LIM1_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_DTS_LIM1;

/** \brief Die temperature sensor limit register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_LIM2_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_DTS_LIM2;

/** \brief Die temperature sensor status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_DTS_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_DTS_STAT;

/** \brief EVRC SD coefficient register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF0_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF0;

/** \brief EVRC SD coefficient register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF1_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF1;

/** \brief EVRC SD coefficient register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF2_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF2;

/** \brief EVRC SD coefficient register 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF3_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF3;

/** \brief EVRC SD coefficient register 4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF4_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF4;

/** \brief EVRC SD coefficient register 5   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_COEFF5_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_EVRC_COEFF5;

/** \brief EVRC configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON0_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON0;

/** \brief EVRC configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON1_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON1;

/** \brief EVRC configuration register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON2_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON2;

/** \brief EVRC configuration register 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON3_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON3;

/** \brief EVRC configuration register 4   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_CON4_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_EVRC_CON4;

/** \brief EVRC status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_STAT0_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_EVRC_STAT0;

/** \brief EVRC status register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_EVRC_STAT1_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_EVRC_STAT1;

/** \brief HPBG trim register for dynamic trimming over temperature   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_HPBGTRIM_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_HPBGTRIM;

/** \brief HPOSC configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_HPOSCCON1_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_HPOSCCON1;

/** \brief HPOSC trim register for dynamic trimming over temperature   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_HPOSCTRIM_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_HPOSCTRIM;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_PMS_ID;

/** \brief Interrupt status clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CLR_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_INT_CLR;

/** \brief Interrupt configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CON0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_INT_CON0;

/** \brief Interrupt Configuration Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CON1_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_INT_CON1;

/** \brief Interrupt configuration register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_CON2_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_INT_CON2;

/** \brief Interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_INT_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_INT_STAT;

/** \brief Register to store user info in PMS1 domain and reset by LVDPMS1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_LVDPMS1USRINFO_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_LVDPMS1USRINFO;

/** \brief OCDS trigger set control 0 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_OTSC0_Bits B;                  /**< \brief Bitfield access */
} Ifx_PMS_OTSC0;

/** \brief OCDS trigger set control 1 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_OTSC1_Bits B;                  /**< \brief Bitfield access */
} Ifx_PMS_OTSC1;

/** \brief OCDS trigger set select register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_OTSS_Bits B;                   /**< \brief Bitfield access */
} Ifx_PMS_OTSS;

/** \brief Pad configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PAD_CON_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_PAD_CON;

/** \brief ESR2 pad configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PAD_ESR2CON_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_PAD_ESR2CON;

/** \brief Pad status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PAD_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_PAD_STAT;

/** \brief Power domain configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PD_CON0_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_PD_CON0;

/** \brief Power domain configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PD_CON1_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_PD_CON1;

/** \brief Power domain status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PD_STAT0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_PD_STAT0;

/** \brief Trim register for PMS0 components   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PMS0TRIM_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_PMS0TRIM;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PROT_PMS_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_PROT_PMS;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PVDCON_Bits B;                 /**< \brief Bitfield access */
} Ifx_PMS_PVDCON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PVDHISTSTAT_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_PVDHISTSTAT;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_PVDSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_PVDSTAT;

/** \brief Register access status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_REGACCSTAT_Bits B;             /**< \brief Bitfield access */
} Ifx_PMS_REGACCSTAT;

/** \brief RTC compare register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CMP0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_RTC_CMP0;

/** \brief RTC compare register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CMP1_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_RTC_CMP1;

/** \brief RTC configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CON0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_RTC_CON0;

/** \brief RTC configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CON1_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_RTC_CON1;

/** \brief RTC configuration register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_CON2_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_RTC_CON2;

/** \brief RTC timer counter register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_TIM0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_RTC_TIM0;

/** \brief RTC timer capture register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_RTC_TIM1CAP_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_RTC_TIM1CAP;

/** \brief SCR configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_SCR_CON0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_SCR_CON0;

/** \brief SCR configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_SCR_CON1_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_SCR_CON1;

/** \brief SCR status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_SCR_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_SCR_STAT;

/** \brief Standby configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_STANDBY_CON0_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_STANDBY_CON0;

/** \brief Standby configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_STANDBY_CON1_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_STANDBY_CON1;

/** \brief Voltage ID (VID) configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VID_CON0_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_VID_CON0;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONPCON_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_VMONPCON;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONPRST_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_VMONPRST;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONPSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_VMONPSTAT;

/** \brief Tracking ADC trim register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONP_TRKTRIM0_Bits B;         /**< \brief Bitfield access */
} Ifx_PMS_VMONP_TRKTRIM0;

/** \brief Power domain cold reset configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONP_VDDCLDRST_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_VMONP_VDDCLDRST;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONSCON_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_VMONSCON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONSSTAT_Bits B;              /**< \brief Bitfield access */
} Ifx_PMS_VMONSSTAT;

/** \brief Secondary monitor level selection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONS_LVLSEL_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_VMONS_LVLSEL;

/** \brief Secondary monitor level selection status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_VMONS_LVLSTAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PMS_VMONS_LVLSTAT;

/** \brief Standby and wake-up status clear register 0   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CLR0_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CLR0;

/** \brief Standby and wake-up status clear register 1   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CLR1_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CLR1;

/** \brief Wake-up configuration register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CON0_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CON0;

/** \brief Wake-up configuration register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_CON1_Bits B;            /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_CON1;

/** \brief Wake-up status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_STAT0_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_STAT0;

/** \brief Wake-up status register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WAKEUP_STAT1_Bits B;           /**< \brief Bitfield access */
} Ifx_PMS_WAKEUP_STAT1;

/** \brief Register to store user info in PMS2 domain and reset by warm PORST   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WRMPORSTUSRINFO_Bits B;        /**< \brief Bitfield access */
} Ifx_PMS_WRMPORSTUSRINFO;

/** \brief Wake-up timer configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WUT_CON_Bits B;                /**< \brief Bitfield access */
} Ifx_PMS_WUT_CON;

/** \brief Wake-up timer status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PMS_WUT_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_PMS_WUT_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PMS_ACCEN
{
       __IO Ifx_PMS_ACCEN_WRA_PMS               WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PMS_ACCEN_WRB_PMS               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PMS_ACCEN_RDA_PMS               RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PMS_ACCEN_RDB_PMS               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PMS_ACCEN_VM_PMS                VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PMS_ACCEN_PRS_PMS               PRS;                    /**< \brief 14, PRS access enable register*/
} Ifx_PMS_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_ACCENCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCS object */
typedef volatile struct _Ifx_PMS_ACCENCS
{
       __IO Ifx_PMS_ACCEN_WRA_PMS               WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PMS_ACCEN_WRB_PMS               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PMS_ACCEN_RDA_PMS               RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PMS_ACCEN_RDB_PMS               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PMS_ACCEN_VM_PMS                VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PMS_ACCEN_PRS_PMS               PRS;                    /**< \brief 14, PRS access enable register*/
} Ifx_PMS_ACCENCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_VMONP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VMONP object */
typedef volatile struct _Ifx_PMS_VMONP
{
       __IO Ifx_PMS_VMONPCON                    VDDCON;                 /**< \brief 0, VDD primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDRST;                 /**< \brief 4, VDD primary voltage monitor reset configuration register*/
       __IO Ifx_PMS_VMONP_VDDCLDRST             VDDCLDRST;              /**< \brief 8, Power domain cold reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDSTAT;                /**< \brief C, VDD primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDEXTCON;              /**< \brief 10, VDDEXT primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDEXTRST;              /**< \brief 14, VDDEXT primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDEXTSTAT;             /**< \brief 18, VDDEXT primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VSSDCHSCON;             /**< \brief 1C, Primary voltage monitor configuration register for the (VDDEXTDC - VSSDCHS) voltage difference*/
       __IO Ifx_PMS_VMONPRST                    VSSDCHSRST;             /**< \brief 20, Primary voltage monitor reset configuration register for the (VDDEXTDC - VSSDCHS) voltage difference*/
       __I  Ifx_PMS_VMONPSTAT                   VSSDCHSSTAT;            /**< \brief 24, Primary voltage monitor status register  for the (VDDEXTDC - VSSDCHS) voltage difference*/
       __IO Ifx_PMS_VMONPCON                    VDDEXTDCCON;            /**< \brief 28, VDDEXTDC primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDEXTDCRST;            /**< \brief 2C, VDDEXTDC primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDEXTDCSTAT;           /**< \brief 30, VDDEXTDC primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDDCLSCON;             /**< \brief 34, VDDDCLS primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDDCLSRST;             /**< \brief 38, VDDDCLS primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDDCLSSTAT;            /**< \brief 3C, VDDDCLS primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDEVRSBCON;            /**< \brief 40, VDDEVRSB primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDEVRSBRST;            /**< \brief 44, VDDEVRSB primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDEVRSBSTAT;           /**< \brief 48, VDDEVRSB primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDMCON;                /**< \brief 4C, VDDM primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDMRST;                /**< \brief 50, VDDM primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDMSTAT;               /**< \brief 54, VDDM primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHPHY0CON;           /**< \brief 58, VDDPHPHY0 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHPHY0RST;           /**< \brief 5C, VDDPHPHY0 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHPHY0STAT;          /**< \brief 60, VDDPHPHY0 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHPHY1CON;           /**< \brief 64, VDDPHPHY1 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHPHY1RST;           /**< \brief 68, VDDPHPHY1 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHPHY1STAT;          /**< \brief 6C, VDDPHPHY1 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHPHY2CON;           /**< \brief 70, VDDPHPHY2 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHPHY2RST;           /**< \brief 74, VDDPHPHY2 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHPHY2STAT;          /**< \brief 78, VDDPHPHY2 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDHSIFCON;             /**< \brief 7C, VDDHSIF primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDHSIFRST;             /**< \brief 80, VDDHSIF primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDHSIFSTAT;            /**< \brief 84, VDDHSIF primary voltage monitor status register*/
       __I  Ifx_UReg_8Bit                       reserved_88[12];        /**< \brief 88, \internal Reserved */
       __IO Ifx_PMS_VMONPCON                    VDDPADCON;              /**< \brief 94, VDDPAD primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPADRST;              /**< \brief 98, VDDPAD primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPADSTAT;             /**< \brief 9C, VDDPAD primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDLMU0CON;             /**< \brief A0, VDDLMU0 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDLMU0RST;             /**< \brief A4, VDDLMU0 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDLMU0STAT;            /**< \brief A8, VDDLMU0 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDLMU1CON;             /**< \brief AC, VDDLMU1 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDLMU1RST;             /**< \brief B0, VDDLMU1 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDLMU1STAT;            /**< \brief B4, VDDLMU1 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDPPUCON;              /**< \brief B8, VDDPPU primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPPURST;              /**< \brief BC, VDDPPU primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPPUSTAT;             /**< \brief C0, VDDPPU primary voltage monitor status register*/
       __I  Ifx_UReg_8Bit                       reserved_C4[12];        /**< \brief C4, \internal Reserved */
       __IO Ifx_PMS_VMONPCON                    VDDPHY0CON;             /**< \brief D0, VDDPHY0 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHY0RST;             /**< \brief D4, VDDPHY0 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHY0STAT;            /**< \brief D8, VDDPHY0 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHY1CON;             /**< \brief DC, VDDPHY1 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHY1RST;             /**< \brief E0, VDDPHY1 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHY1STAT;            /**< \brief E4, VDDPHY1 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONPCON                    VDDPHY2CON;             /**< \brief E8, VDDPHY2 primary voltage monitor configuration register*/
       __IO Ifx_PMS_VMONPRST                    VDDPHY2RST;             /**< \brief EC, VDDPHY2 primary voltage monitor reset configuration register*/
       __I  Ifx_PMS_VMONPSTAT                   VDDPHY2STAT;            /**< \brief F0, VDDPHY2 primary voltage monitor status register*/
       __IO Ifx_PMS_VMONP_TRKTRIM0              TRKTRIM0;               /**< \brief F4, Tracking ADC trim register 0*/
} Ifx_PMS_VMONP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_VMONS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VMONS object */
typedef volatile struct _Ifx_PMS_VMONS
{
       __IO Ifx_PMS_VMONSCON                    VDDEVRSBCON;            /**< \brief 0, VDDEVRSB secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDEVRSBSTAT;           /**< \brief 4, VDDEVRSB secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDEXTCON;              /**< \brief 8, VDDEXT secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDEXTSTAT;             /**< \brief C, VDDEXT secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDMCON;                /**< \brief 10, VDDM secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDMSTAT;               /**< \brief 14, VDDM secondary monitor status register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_PMS_VMONSCON                    VDDCON;                 /**< \brief 20, VDD secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDSTAT;                /**< \brief 24, VDD secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPMS0CON;             /**< \brief 28, VDDPMS0 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPMS0STAT;            /**< \brief 2C, VDDPMS0 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPMS1CON;             /**< \brief 30, VDDPMS1 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPMS1STAT;            /**< \brief 34, VDDPMS1 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPMS2CON;             /**< \brief 38, VDDPMS2 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPMS2STAT;            /**< \brief 3C, VDDPMS2 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDSBRAMCON;            /**< \brief 40, VDDSBRAM secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDSBRAMSTAT;           /**< \brief 44, VDDSBRAM secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPADCON;              /**< \brief 48, VDDPAD secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPADSTAT;             /**< \brief 4C, VDDPAD secondary monitor status register*/
       __I  Ifx_UReg_8Bit                       reserved_50[8];         /**< \brief 50, \internal Reserved */
       __IO Ifx_PMS_VMONSCON                    VDDPHPHY0CON;           /**< \brief 58, VDDPHPHY0 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHPHY0STAT;          /**< \brief 5C, VDDPHPHY0 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHPHY1CON;           /**< \brief 60, VDDPHPHY1 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHPHY1STAT;          /**< \brief 64, VDDPHPHY1 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHPHY2CON;           /**< \brief 68, VDDPHPHY2 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHPHY2STAT;          /**< \brief 6C, VDDPHPHY2 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDHSIFCON;             /**< \brief 70, VDDHSIF secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDHSIFSTAT;            /**< \brief 74, VDDHSIF secondary monitor status register*/
       __I  Ifx_UReg_8Bit                       reserved_78[8];         /**< \brief 78, \internal Reserved */
       __IO Ifx_PMS_VMONSCON                    VDDPHY0CON;             /**< \brief 80, VDDPHY0 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHY0STAT;            /**< \brief 84, VDDPHY0 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHY1CON;             /**< \brief 88, VDDPHY1 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHY1STAT;            /**< \brief 8C, VDDPHY1 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPHY2CON;             /**< \brief 90, VDDPHY2 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPHY2STAT;            /**< \brief 94, VDDPHY2 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDLMU0CON;             /**< \brief 98, VDDLMU0 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDLMU0STAT;            /**< \brief 9C, VDDLMU0 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDLMU1CON;             /**< \brief A0, VDDLMU1 secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDLMU1STAT;            /**< \brief A4, VDDLMU1 secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDPPUCON;              /**< \brief A8, VDDPPU secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDPPUSTAT;             /**< \brief AC, VDDPPU secondary monitor status register*/
       __IO Ifx_PMS_VMONSCON                    VDDEXTDCCON;            /**< \brief B0, VDDEXTDC secondary monitor configuration register*/
       __I  Ifx_PMS_VMONSSTAT                   VDDEXTDCSTAT;           /**< \brief B4, VDDEXTDC secondary monitor status register*/
       __IO Ifx_PMS_VMONS_LVLSEL                LVLSEL;                 /**< \brief B8, Secondary monitor level selection register*/
       __I  Ifx_PMS_VMONS_LVLSTAT               LVLSTAT;                /**< \brief BC, Secondary monitor level selection status register*/
} Ifx_PMS_VMONS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_PEAK_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PEAK object */
typedef volatile struct _Ifx_PMS_PEAK
{
       __IO Ifx_PMS_PVDCON                      VDD;                    /**< \brief 0, VDD peak voltage detection configuration register*/
       __IO Ifx_PMS_PVDCON                      VDDEXT;                 /**< \brief 4, VDDEXT peak voltage detection configuration register*/
       __IO Ifx_PMS_PVDCON                      VDDEXTDC;               /**< \brief 8, VDDEXTDC peak voltage detection configuration register*/
       __I  Ifx_PMS_PVDSTAT                     VDDSTAT;                /**< \brief C, VDD peak voltage detection status register*/
       __I  Ifx_PMS_PVDSTAT                     VDDEXTSTAT;             /**< \brief 10, VDDEXT peak voltage detection status register*/
       __I  Ifx_PMS_PVDSTAT                     VDDEXTDCSTAT;           /**< \brief 14, VDDEXTDC peak voltage detection status register*/
       __I  Ifx_PMS_PVDHISTSTAT                 VDDHISTSTAT;            /**< \brief 18, VDD peak voltage detection history status register*/
       __I  Ifx_PMS_PVDHISTSTAT                 VDDEXTHISTSTAT;         /**< \brief 1C, VDDEXT peak voltage detection history status register*/
       __I  Ifx_PMS_PVDHISTSTAT                 VDDEXTDCHISTSTAT;       /**< \brief 20, VDDEXTDC peak voltage detection history status register*/
} Ifx_PMS_PEAK;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_DRMON_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DRMON object */
typedef volatile struct _Ifx_PMS_DRMON
{
       __IO Ifx_PMS_DRMONCON                    VDD;                    /**< \brief 0, VDD drift monitoring configuration register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDSTAT;                /**< \brief 4, VDD drift monitor status register*/
       __IO Ifx_PMS_DRMONCON                    VDDEXT;                 /**< \brief 8, VDDEXT drift monitoring configuration register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDEXTSTAT;             /**< \brief C, VDDEXT drift monitor status register*/
       __IO Ifx_PMS_DRMONCON                    VDDEXTDC;               /**< \brief 10, VDDEXTDC drift monitoring configuration register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDEXTDCSTAT;           /**< \brief 14, VDDEXTDC drift monitor status register*/
       __IO Ifx_PMS_DRMONCON                    VDDM;                   /**< \brief 18, VDDM drift monitoring configuration register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDMSTAT;               /**< \brief 1C, VDDM drift monitor status register*/
       __IO Ifx_PMS_DRMONCON                    VDDPMS0;                /**< \brief 20, VDDPMS0 drift monitoring configuration register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDPMS0STAT;            /**< \brief 24, VDDPMS0 drift monitor status register*/
       __IO Ifx_PMS_DRMONCON                    VDDPMS2;                /**< \brief 28, VDDPMS2 drift monitoring configuration register*/
       __I  Ifx_PMS_DRMONSTAT                   VDDPMS2STAT;            /**< \brief 2C, VDDPMS2 drift monitor status register*/
} Ifx_PMS_DRMON;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_VID_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VID object */
typedef volatile struct _Ifx_PMS_VID
{
       __IO Ifx_PMS_VID_CON0                    CON0;                   /**< \brief 0, Voltage ID (VID) configuration register 0*/
} Ifx_PMS_VID;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_PD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PD object */
typedef volatile struct _Ifx_PMS_PD
{
       __IO Ifx_PMS_PD_CON0                     CON0;                   /**< \brief 0, Power domain configuration register 0*/
       __IO Ifx_PMS_PD_CON1                     CON1;                   /**< \brief 4, Power domain configuration register 1*/
       __I  Ifx_PMS_PD_STAT0                    STAT0;                  /**< \brief 8, Power domain status register 0*/
} Ifx_PMS_PD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_INT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief INT object */
typedef volatile struct _Ifx_PMS_INT
{
       __IO Ifx_PMS_INT_CON0                    CON0;                   /**< \brief 0, Interrupt configuration register 0*/
       __IO Ifx_PMS_INT_CON1                    CON1;                   /**< \brief 4, Interrupt Configuration Register 1*/
       __IO Ifx_PMS_INT_CON2                    CON2;                   /**< \brief 8, Interrupt configuration register 2*/
       __IO Ifx_PMS_INT_STAT                    STAT;                   /**< \brief C, Interrupt status register*/
       __O  Ifx_PMS_INT_CLR                     CLR;                    /**< \brief 10, Interrupt status clear register*/
} Ifx_PMS_INT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_PAD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PAD object */
typedef volatile struct _Ifx_PMS_PAD
{
       __IO Ifx_PMS_PAD_CON                     CON;                    /**< \brief 0, Pad configuration register*/
       __I  Ifx_PMS_PAD_STAT                    STAT;                   /**< \brief 4, Pad status register*/
       __IO Ifx_PMS_PAD_ESR2CON                 ESR2CON;                /**< \brief 8, ESR2 pad configuration register*/
} Ifx_PMS_PAD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_WAKEUP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WAKEUP object */
typedef volatile struct _Ifx_PMS_WAKEUP
{
       __IO Ifx_PMS_WAKEUP_CON0                 CON0;                   /**< \brief 0, Wake-up configuration register 0*/
       __I  Ifx_PMS_WAKEUP_STAT0                STAT0;                  /**< \brief 4, Wake-up status register 0*/
       __O  Ifx_PMS_WAKEUP_CLR0                 CLR0;                   /**< \brief 8, Standby and wake-up status clear register 0*/
       __IO Ifx_PMS_WAKEUP_CON1                 CON1;                   /**< \brief C, Wake-up configuration register 1*/
       __I  Ifx_PMS_WAKEUP_STAT1                STAT1;                  /**< \brief 10, Wake-up status register 1*/
       __O  Ifx_PMS_WAKEUP_CLR1                 CLR1;                   /**< \brief 14, Standby and wake-up status clear register 1*/
} Ifx_PMS_WAKEUP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_STANDBY_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief STANDBY object */
typedef volatile struct _Ifx_PMS_STANDBY
{
       __IO Ifx_PMS_STANDBY_CON0                CON0;                   /**< \brief 0, Standby configuration register 0*/
       __IO Ifx_PMS_STANDBY_CON1                CON1;                   /**< \brief 4, Standby configuration register 1*/
} Ifx_PMS_STANDBY;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_WUT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief WUT object */
typedef volatile struct _Ifx_PMS_WUT
{
       __IO Ifx_PMS_WUT_CON                     CON;                    /**< \brief 0, Wake-up timer configuration register*/
       __I  Ifx_PMS_WUT_STAT                    STAT;                   /**< \brief 4, Wake-up timer status register*/
} Ifx_PMS_WUT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_SCR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SCR object */
typedef volatile struct _Ifx_PMS_SCR
{
       __IO Ifx_PMS_SCR_CON0                    CON0;                   /**< \brief 0, SCR configuration register 0*/
       __IO Ifx_PMS_SCR_CON1                    CON1;                   /**< \brief 4, SCR configuration register 1*/
       __IO Ifx_PMS_SCR_STAT                    STAT;                   /**< \brief 8, SCR status register*/
} Ifx_PMS_SCR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_EVRC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EVRC object */
typedef volatile struct _Ifx_PMS_EVRC
{
       __I  Ifx_PMS_EVRC_STAT0                  STAT0;                  /**< \brief 0, EVRC status register 0*/
       __I  Ifx_PMS_EVRC_STAT1                  STAT1;                  /**< \brief 4, EVRC status register 1*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __IO Ifx_PMS_EVRC_CON0                   CON0;                   /**< \brief C, EVRC configuration register 0*/
       __IO Ifx_PMS_EVRC_CON1                   CON1;                   /**< \brief 10, EVRC configuration register 1*/
       __IO Ifx_PMS_EVRC_CON2                   CON2;                   /**< \brief 14, EVRC configuration register 2*/
       __IO Ifx_PMS_EVRC_CON3                   CON3;                   /**< \brief 18, EVRC configuration register 3*/
       __IO Ifx_PMS_EVRC_CON4                   CON4;                   /**< \brief 1C, EVRC configuration register 4*/
       __IO Ifx_PMS_EVRC_COEFF0                 COEFF0;                 /**< \brief 20, EVRC SD coefficient register 0*/
       __IO Ifx_PMS_EVRC_COEFF1                 COEFF1;                 /**< \brief 24, EVRC SD coefficient register 1*/
       __IO Ifx_PMS_EVRC_COEFF2                 COEFF2;                 /**< \brief 28, EVRC SD coefficient register 2*/
       __IO Ifx_PMS_EVRC_COEFF3                 COEFF3;                 /**< \brief 2C, EVRC SD coefficient register 3*/
       __IO Ifx_PMS_EVRC_COEFF4                 COEFF4;                 /**< \brief 30, EVRC SD coefficient register 4*/
       __IO Ifx_PMS_EVRC_COEFF5                 COEFF5;                 /**< \brief 34, EVRC SD coefficient register 5*/
} Ifx_PMS_EVRC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_RTC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RTC object */
typedef volatile struct _Ifx_PMS_RTC
{
       __IO Ifx_PMS_RTC_CON0                    CON0;                   /**< \brief 0, RTC configuration register 0*/
       __IO Ifx_PMS_RTC_CON1                    CON1;                   /**< \brief 4, RTC configuration register 1*/
       __IO Ifx_PMS_RTC_CON2                    CON2;                   /**< \brief 8, RTC configuration register 2*/
       __IO Ifx_PMS_RTC_CMP0                    CMP0;                   /**< \brief C, RTC compare register 0*/
       __IO Ifx_PMS_RTC_CMP1                    CMP1;                   /**< \brief 10, RTC compare register 1*/
       __I  Ifx_PMS_RTC_TIM0                    TIM0;                   /**< \brief 14, RTC timer counter register 0*/
       __I  Ifx_PMS_RTC_TIM1CAP                 TIM1CAP;                /**< \brief 18, RTC timer capture register*/
} Ifx_PMS_RTC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pms_DTS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DTS object */
typedef volatile struct _Ifx_PMS_DTS
{
       __IO Ifx_PMS_DTS_CON                     CON;                    /**< \brief 0, Die temperature sensor control register*/
       __IO Ifx_PMS_DTS_LIM1                    LIM1;                   /**< \brief 4, Die temperature sensor limit register 1*/
       __IO Ifx_PMS_DTS_LIM2                    LIM2;                   /**< \brief 8, Die temperature sensor limit register 2*/
       __I  Ifx_PMS_DTS_STAT                    STAT;                   /**< \brief C, Die temperature sensor status register*/
} Ifx_PMS_DTS;

/******************************************************************************/
/** \addtogroup IfxSfr_Pms_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PMS object */
typedef volatile struct _Ifx_PMS
{
       Ifx_UReg_32Bit                      XRAM[8192];            /**< \brief 0, Standby controller extension RAM*/
       __I  Ifx_UReg_8Bit                       reserved_8000[4096];    /**< \brief 8000, \internal Reserved */
       __IO Ifx_PMS_PROT_PMS                    PROTE;                  /**< \brief 9000, PROT register endinit*/
       __IO Ifx_PMS_PROT_PMS                    PROTSE;                 /**< \brief 9004, PROT register safe endinit*/
       __I  Ifx_PMS_ID                          ID;                     /**< \brief 9008, Module identification register*/
       __IO Ifx_PMS_ACCEN                       ACCEN;                  /**< \brief 900C, */
       __I  Ifx_PMS_REGACCSTAT                  REGACCSTAT;             /**< \brief 9024, Register access status register*/
       __IO Ifx_PMS_PROT_PMS                    PROTCSE;                /**< \brief 9028, PROT register cyber security endinit*/
       __IO Ifx_PMS_ACCENCS                     ACCENCS;                /**< \brief 902C, */
       __IO Ifx_PMS_VMONP                       VMONP;                  /**< \brief 9044, */
       __I  Ifx_UReg_8Bit                       reserved_913C[8];       /**< \brief 913C, \internal Reserved */
       __IO Ifx_PMS_VMONS                       VMONS;                  /**< \brief 9144, */
       __IO Ifx_PMS_PEAK                        PEAK;                   /**< \brief 9204, */
       __IO Ifx_PMS_DRMON                       DRMON;                  /**< \brief 9228, */
       __IO Ifx_PMS_VID                         VID;                    /**< \brief 9258, Voltage ID (VID) configuration register 1*/
       __I  Ifx_UReg_8Bit                       reserved_925C[4];       /**< \brief 925C, \internal Reserved */
       __IO Ifx_PMS_PD                          PD;                     /**< \brief 9260, Power domain status register 0*/
       __IO Ifx_PMS_INT                         INT;                    /**< \brief 926C, Interrupt status clear register*/
       __IO Ifx_PMS_PAD                         PAD;                    /**< \brief 9280, */
       __I  Ifx_UReg_8Bit                       reserved_928C[8];       /**< \brief 928C, \internal Reserved */
       __IO Ifx_PMS_HPOSCCON1                   HPOSCCON1;              /**< \brief 9294, HPOSC configuration register 1*/
       __I  Ifx_UReg_8Bit                       reserved_9298[4];       /**< \brief 9298, \internal Reserved */
       __IO Ifx_PMS_HPOSCTRIM                   HPOSCTRIM;              /**< \brief 929C, HPOSC trim register for dynamic trimming over temperature*/
       __IO Ifx_PMS_HPBGTRIM                    HPBGTRIM;               /**< \brief 92A0, HPBG trim register for dynamic trimming over temperature*/
       __I  Ifx_UReg_8Bit                       reserved_92A4[4];       /**< \brief 92A4, \internal Reserved */
       __IO Ifx_PMS_PMS0TRIM                    PMS0TRIM;               /**< \brief 92A8, Trim register for PMS0 components*/
       __IO Ifx_PMS_WAKEUP                      WAKEUP;                 /**< \brief 92AC, Standby and wake-up status clear register 1*/
       __IO Ifx_PMS_STANDBY                     STANDBY;                /**< \brief 92C4, */
       __IO Ifx_PMS_WUT                         WUT;                    /**< \brief 92CC, Wake-up timer status register*/
       __IO Ifx_PMS_SCR                         SCR;                    /**< \brief 92D4, SCR status register*/
       __IO Ifx_PMS_EVRC                        EVRC;                   /**< \brief 92E0, */
       __IO Ifx_PMS_RTC                         RTC;                    /**< \brief 9318, */
       __IO Ifx_PMS_DTS                         DTS;                    /**< \brief 9334, Die temperature sensor trim register*/
       __I  Ifx_UReg_8Bit                       reserved_9344[12];      /**< \brief 9344, \internal Reserved */
       __O  Ifx_PMS_CLDRSTCON                   CLDRSTCON;              /**< \brief 9350, Cold reset configuration register*/
       __I  Ifx_PMS_CLDRSTSTAT                  CLDRSTSTAT;             /**< \brief 9354, Cold reset status register*/
       __I  Ifx_PMS_CLDRSTRIG                   CLDRSTRIG;              /**< \brief 9358, Cold reset trigger register*/
       __I  Ifx_PMS_CLDRSTRIGL                  CLDRSTRIGL;             /**< \brief 935C, Cold reset last trigger register*/
       __O  Ifx_PMS_CLDRSTSTATCLR               CLDRSTSTATCLR;          /**< \brief 9360, Cold reset status clear register*/
       __IO Ifx_PMS_OTSS                        OTSS;                   /**< \brief 9364, OCDS trigger set select register*/
       __IO Ifx_PMS_OTSC0                       OTSC0;                  /**< \brief 9368, OCDS trigger set control 0 register*/
       __IO Ifx_PMS_OTSC1                       OTSC1;                  /**< \brief 936C, OCDS trigger set control 1 register*/
       __IO Ifx_PMS_LVDPMS1USRINFO              LVDPMS1USRINFO;         /**< \brief 9370, Register to store user info in PMS1 domain and reset by LVDPMS1*/
       __IO Ifx_PMS_CLDPORSTUSRINFO             CLDPORSTUSRINFO;        /**< \brief 9374, Register to store user info in PMS2 domain and reset by cold PORST*/
       __IO Ifx_PMS_WRMPORSTUSRINFO             WRMPORSTUSRINFO;        /**< \brief 9378, Register to store user info in PMS2 domain and reset by warm PORST*/
       __I  Ifx_UReg_8Bit                       reserved_937C[3204];    /**< \brief 937C, \internal Reserved */
} Ifx_PMS;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPMS_REGDEF_H */
