/**
 * \file IfxHsphy_Mp8g.h
 * \brief HSPHY MP8G details
 * \ingroup IfxLld_Hsphy
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Hsphy_Mp8g MP8G
 * \ingroup IfxLld_Hsphy
 * \defgroup IfxLld_Hsphy_Mp8g_Enumerations Enumerations
 * \ingroup IfxLld_Hsphy_Mp8g
 * \defgroup IfxLld_Hsphy_Mp8g_Data Structures Data Structures
 * \ingroup IfxLld_Hsphy_Mp8g
 * \defgroup IfxLld_Hsphy_Mp8g_Config Variable Config Variable
 * \ingroup IfxLld_Hsphy_Mp8g
 * \defgroup IfxLld_Hsphy_Mp8g_Functions Functions
 * \ingroup IfxLld_Hsphy_Mp8g
 */

#ifndef IFXHSPHY_MP8G_H
#define IFXHSPHY_MP8G_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Hsphy/Std/IfxHsphy.h"

/** \addtogroup IfxLld_Hsphy_Mp8g_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Reset HSPHY module
 * \param hsphyRegPtr HPSHY register pointer
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_Mp8g_resetModule(Ifx_HSPHY *hsphyRegPtr);

/** \brief Select the PHY reference clock for data transfer operation
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \param device Target device
 * \return TRUE: PHY ref clock selection successful
 */
IFX_EXTERN boolean IfxHsphy_Mp8g_setPhyRefClockSel(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex, IfxHsphy_TrgtDevice device);

/** \brief Select the function of operation
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \param device Target device
 * \return TRUE: Function selection successful
 *  FALSE: Function selection not succesful
 */
IFX_EXTERN boolean IfxHsphy_Mp8g_selFunction(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex, IfxHsphy_TrgtDevice device);

/** \brief Check if the PHY is ready after reset
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \return TRUE: PHY ready	FALSE:Error
 */
IFX_EXTERN boolean IfxHsphy_Mp8g_isPhyReady(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex);

/** \brief Check if the external loading of the application iinto SRAM is complete
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \return TRUE: Application SRAM loading complete	FALSE:Error
 */
IFX_EXTERN boolean IfxHsphy_Mp8g_setExtLdDone(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex);

/** \brief Power Down PHY
 * \param hsphySFR HPSHY pointer
 * \param phyIndex PHY index
 * \param phyPowerMode 0: PHY power up 1: PHY power down
 * \return None
 */
IFX_EXTERN void IfxHsphy_Mp8g_PowerDownReset(Ifx_HSPHY *hsphySFR, IfxHsphy_PhyIndex phyIndex, IfxHsphy_PhyPowerMode phyPowerMode);

/** \} */

#endif /* IFXHSPHY_MP8G_H */
