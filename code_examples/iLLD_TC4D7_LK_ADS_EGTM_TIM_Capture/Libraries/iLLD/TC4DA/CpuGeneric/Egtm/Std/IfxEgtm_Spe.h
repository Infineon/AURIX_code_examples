/**
 * \file IfxEgtm_Spe.h
 * \brief EGTM  basic functionality
 * \ingroup IfxLld_Egtm
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * This Module provides the standard interfaces to manipulate and read SPE sub-module registers in EGTM.
 * This Module can be used to abstract the register names and addressing from higher layer software code.
 *
 * \defgroup IfxLld_Egtm_Std_Spe Spe Basic Functionality
 * \ingroup IfxLld_Egtm_Std
 * \defgroup IfxLld_Egtm_Std_Spe_SPEDataStructures SPE Data Structures
 * \ingroup IfxLld_Egtm_Std_Spe
 * \defgroup IfxLld_Egtm_Std_Spe_SPEEnumerations SPE Enumerations
 * \ingroup IfxLld_Egtm_Std_Spe
 * \defgroup IfxLld_Egtm_Std_Spe_SPEFunctions SPE Functions
 * \ingroup IfxLld_Egtm_Std_Spe
 */

#ifndef IFXEGTM_SPE_H
#define IFXEGTM_SPE_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxEgtm_cfg.h"
#if !defined(IFX_ILLD_PPU_USAGE)
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#endif
#if defined(IFX_ILLD_PPU_USAGE)
#include "Cpu/Std/IfxPpu_Intrinsics.h"
#endif
#include "IfxEgtm_bf.h"
#include "IfxEgtm.h"
#include "Src/Std/IfxSrc.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Macro to get the TRIG_SEL value in CTRL_STAT register.
 * Input(x): Enum value of IfxEgtm_Spe_TriggerSource
 */
#define IFXEGTM_SPE_GET_TRIGSEL(x)                                    ((uint32)((uint32)x & (uint32)3u))

/** \brief Macro to get the ETRIG_SEL value in CTRL_STAT register.
 * Input(x): Enum value of IfxEgtm_Spe_TriggerSource
 */
#define IFXEGTM_SPE_GET_ETRIG(x)                                      ((uint32)(((uint32)x & (uint32)4u) >> 2u))

/** \brief sets a single input pattern into the SPE_PAT register.
 */
#define IFXEGTM_SPE_SETSINGLEPATTERN(spepat_temp, pattern, pat_index) ((spepat_temp | ((uint32)0xFu << ((uint32)pat_index * 4U))) & ((uint32)pattern << ((uint32)pat_index * 4U)))

/** \brief sets all the input patterns specified into the SPE_PAT register.
 * This can be used to derive SPE_PAT from pattern array specified by user.
 */
#define IFXEGTM_SPE_GETALLPATTERNS(pat_ptr) \
    ((pat_ptr->U) |                         \
     ((pat_ptr + 1u)->U << 4u) |            \
     ((pat_ptr + 2u)->U << 8u) |            \
     ((pat_ptr + 3u)->U << 12u) |           \
     ((pat_ptr + 4u)->U << 16u) |           \
     ((pat_ptr + 5u)->U << 20u) |           \
     ((pat_ptr + 6u)->U << 24u) |           \
     ((pat_ptr + 7u)->U << 28u))

/** \brief macro used to set a single channel output into the SPE OUT PAT register.
 */
#define IFXEGTM_SPE_SETCHANNELOUTPUT(speoutpat, output, ch)           ((speoutpat | ((uint32)0x3u << (ch * 2u))) & ((uint32)output << (ch * 2u)))

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Egtm_Std_Spe_SPEEnumerations
 * \{ */
/** \brief enumeration containing TOM channel output types possible from SPE.
 * Used to specify the Channel outputs in individual SPE_OUT_PAT registers.
 */
typedef enum
{
    IfxEgtm_Spe_ChannelOutputType_tomCh0Sour = 0,  /**< \brief set output to TOM Channel 0 SOUR output */
    IfxEgtm_Spe_ChannelOutputType_tomCh1Sour = 1,  /**< \brief set output to TOM Channel 1 SOUR output */
    IfxEgtm_Spe_ChannelOutputType_0          = 2,  /**< \brief set output to 0 */
    IfxEgtm_Spe_ChannelOutputType_1          = 3   /**< \brief set output to 1 */
} IfxEgtm_Spe_ChannelOutputType;

/** \brief Specifies the type of control command which selects the output pattern register(OUT_PAT) used to udpate OUT_CTRL.
 * Used to fill in the SPE_CTRL_CMD field in SPE_CMD register.
 */
typedef enum
{
    IfxEgtm_Spe_ControlCommand_patPtr    = 0,  /**< \brief use SPE_PAT_PTR to select OUT_PAT */
    IfxEgtm_Spe_ControlCommand_bwdPatPtr = 1,  /**< \brief Use SPE_PAT_PTR_BWD to select OUT_PAT */
    IfxEgtm_Spe_ControlCommand_outPat6   = 2,  /**< \brief Select OUT_PAT_6 directly. */
    IfxEgtm_Spe_ControlCommand_outPat7   = 3   /**< \brief Select OUT_PAT_7 directly. */
} IfxEgtm_Spe_ControlCommand;

/** \brief Describes the rotation direction of the input signal patterns.
 */
typedef enum
{
    IfxEgtm_Spe_Direction_fwd = 0,  /**< \brief Rotation direction is forward (Incrementing pattern) */
    IfxEgtm_Spe_Direction_bwd = 1   /**< \brief Rotation direction is backwards (decrementing Pattern) */
} IfxEgtm_Spe_Direction;

/** \brief Input signal which is mapped from TIMj_CH(48)
 * Used to set EGTM.SPE.CTRL_STAT.B.SIEx
 */
typedef enum
{
    IfxEgtm_Spe_InputSignal_chX = 0,  /**< \brief Select for CHx */
    IfxEgtm_Spe_InputSignal_chY = 1,  /**< \brief select for CHy */
    IfxEgtm_Spe_InputSignal_chZ = 2   /**< \brief select for CHz */
} IfxEgtm_Spe_InputSignal;

/** \brief mode of interrupt - used to specify the IRQ_MODE register.
 */
typedef enum
{
    IfxEgtm_Spe_InterruptMode_level       = 0,  /**< \brief level mode */
    IfxEgtm_Spe_InterruptMode_pulse       = 1,  /**< \brief Pulse mode */
    IfxEgtm_Spe_InterruptMode_pulseNotify = 2,  /**< \brief Pulse Notify mode */
    IfxEgtm_Spe_InterruptMode_singlePulse = 3   /**< \brief Single Pulse Mode */
} IfxEgtm_Spe_InterruptMode;

/** \brief Enumeration containing interrupt signals from SPE.
 * This is used to manipulate and retrieve interrupt flags from Interrupt control registers in SPE.
 */
typedef enum
{
    IfxEgtm_Spe_InterruptSignal_nipd  = 0, /**< \brief new input pattern detected interrupt */
    IfxEgtm_Spe_InterruptSignal_dchg  = 1, /**< \brief direction change interrupt */
    IfxEgtm_Spe_InterruptSignal_perr  = 2, /**< \brief Pattern error: invalid input pattern interrupt */
    IfxEgtm_Spe_InterruptSignal_bis   = 3, /**< \brief Bouncing Input signal interrupt */
    IfxEgtm_Spe_InterruptSignal_rcmp  = 4, /**< \brief Revolution compare match interrupt */
    IfxEgtm_Spe_InterruptSignal_count = 5  /**< \brief Number of interrupt signals from SPE. */
} IfxEgtm_Spe_InterruptSignal;

/** \brief SPE module output channel number.
 */
typedef enum
{
    IfxEgtm_Spe_OutChannel_0,     /**< \brief SPE output channel 0  */
    IfxEgtm_Spe_OutChannel_1,     /**< \brief SPE output channel 1  */
    IfxEgtm_Spe_OutChannel_2,     /**< \brief SPE output channel 2  */
    IfxEgtm_Spe_OutChannel_3,     /**< \brief SPE output channel 3  */
    IfxEgtm_Spe_OutChannel_4,     /**< \brief SPE output channel 4  */
    IfxEgtm_Spe_OutChannel_5,     /**< \brief SPE output channel 5  */
    IfxEgtm_Spe_OutChannel_6,     /**< \brief SPE output channel 6  */
    IfxEgtm_Spe_OutChannel_7      /**< \brief SPE output channel 7  */
} IfxEgtm_Spe_OutChannel;

/** \brief Pattern Index Number of the  valid Input sequence to the SPE.
 * range from 0-7.
 */
typedef enum
{
    IfxEgtm_Spe_PatternIndex_0,     /**< \brief SPE Pattern Index 0  */
    IfxEgtm_Spe_PatternIndex_1,     /**< \brief SPE Pattern Index 1  */
    IfxEgtm_Spe_PatternIndex_2,     /**< \brief SPE Pattern Index 2  */
    IfxEgtm_Spe_PatternIndex_3,     /**< \brief SPE Pattern Index 3  */
    IfxEgtm_Spe_PatternIndex_4,     /**< \brief SPE Pattern Index 4  */
    IfxEgtm_Spe_PatternIndex_5,     /**< \brief SPE Pattern Index 5  */
    IfxEgtm_Spe_PatternIndex_6,     /**< \brief SPE Pattern Index 6  */
    IfxEgtm_Spe_PatternIndex_7      /**< \brief SPE Pattern Index 7  */
} IfxEgtm_Spe_PatternIndex;

/** \} */

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Egtm_Std_Spe_SPEDataStructures
 * \{ */
/** \brief specifies the output pattern structure.
 */
typedef struct
{
    Ifx_UReg_32Bit CH0 : 2;     /**< \brief output from Channel 0 */
    Ifx_UReg_32Bit CH1 : 2;     /**< \brief output from Channel 0 */
    Ifx_UReg_32Bit CH2 : 2;     /**< \brief output from Channel 2 */
    Ifx_UReg_32Bit CH3 : 2;     /**< \brief output from Channel 3 */
    Ifx_UReg_32Bit CH4 : 2;     /**< \brief output from Channel 4 */
    Ifx_UReg_32Bit CH5 : 2;     /**< \brief output from Channel 5 */
    Ifx_UReg_32Bit CH6 : 2;     /**< \brief output from Channel 6 */
    Ifx_UReg_32Bit CH7 : 2;     /**< \brief output from Channel 7 */
} IfxEgtm_Spe_ChannelOutputs;

/** \brief Struct describing the individual input signals in the pattern
 */
typedef struct
{
    Ifx_UReg_32Bit valid : 1;       /**< \brief validity of the specified Pattern */
    Ifx_UReg_32Bit pattern : 3;
} IfxEgtm_Spe_PatternSignal;

/** \} */

/** \addtogroup IfxLld_Egtm_Std_Spe_SPEDataStructures
 * \{ */
/** \brief Struct describing the pattern of Input signal to the SPE submodule.
 */
typedef union
{
    IfxEgtm_Spe_PatternSignal Signal;       /**< \brief Individual Pattern Signals. */
    uint32                    U;            /**< \brief read pattern as word */
} IfxEgtm_Spe_InputPattern;

/** \brief specifies the output pattern to be given to the TOM output from given SPE.
 * Union implementation can be read in word or individual channel output units.
 */
typedef union
{
    IfxEgtm_Spe_ChannelOutputs Outputs;       /**< \brief Structure containing individual channel outputs. */
    uint32                     U;             /**< \brief word */
} IfxEgtm_Spe_OutputPattern;

/** \} */

/** \addtogroup IfxLld_Egtm_Std_Spe_SPEFunctions
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief clears all the Interrupts
 * \param spe pointer to the spe device.
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_clearAllInterrupts(Ifx_EGTM_CLS_SPE *spe);

/** \brief clears the specific interrupt flag.
 * \param spe pointer to the spe device.
 * \param interrupt interrupt signal
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_clearInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt);

/** \brief disables the SPE interrupt of specified type.
 * \param spe pointer to the spe device
 * \param interrupt interrupt signal
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_disableInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt);

/** \brief enables the error interrupt of the specified type.
 * \param spe pointer to the spe device
 * \param interrupt interrupt signal
 * \param enabled interrupt enable status
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_enableErrorInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt, boolean enabled);

/** \brief enables/disables the input to sPE from the selected input signal source.
 * \param spe pointer to spe device
 * \param inputSignal Input signal
 * \param enabled enable signal
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_enableInput(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InputSignal inputSignal, boolean enabled);

/** \brief enables the SPE interrupt of specified type.
 * \param spe pointer to the spe device
 * \param interrupt interrupt signal
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_enableInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt);

/** \brief enables/disables the SPE module based on boolean input.
 * \param spe pointer to spe device.
 * \param enabled enable status for SPE sub module
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_enableModule(Ifx_EGTM_CLS_SPE *spe, boolean enabled);

/** \brief returns the actual input pattern as a word format.
 * \param spe pointer to the spe device.
 * \return actual input pattern
 */
IFX_INLINE uint32 IfxEgtm_Spe_getActualInputPat(Ifx_EGTM_CLS_SPE *spe);

/** \brief sets the actual input pattern
 * \param spe pointer to the spe device.
 * \param pattern actual input pattern
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setActualInputPat(Ifx_EGTM_CLS_SPE *spe, uint8 pattern);

/** \brief returns the backwards pattern pointer.
 * \param spe pointer to the spe device.
 * \return current pattern pointer
 */
IFX_INLINE uint32 IfxEgtm_Spe_getBwdPatternPtr(Ifx_EGTM_CLS_SPE *spe);

/** \brief retrieves the Control command used to select Pattern pointer which selects OUT_PAT.
 * \param spe pointer to the spe device.
 * \return control command selection
 */
IFX_INLINE IfxEgtm_Spe_ControlCommand IfxEgtm_Spe_getControlCommand(Ifx_EGTM_CLS_SPE *spe);

/** \brief gets the actual rotation direction of the input signals.
 * \param spe pointer to the spe device.
 * \return Direction
 */
IFX_INLINE IfxEgtm_Spe_Direction IfxEgtm_Spe_getDir(Ifx_EGTM_CLS_SPE *spe);

/** \brief return fast shutoff level.
 * \param spe pointer to the spe device.
 * \param channel TOM[x] output channel
 * \return fast shutoff level
 */
IFX_INLINE uint32 IfxEgtm_Spe_getFastShutoffLevel(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_OutChannel channel);

/** \brief returns the interrupt status of specified interrupt signal
 * \param spe pointer to the spe device
 * \param interrupt interrupt signal
 * \return interrupt status
 */
IFX_INLINE boolean IfxEgtm_Spe_getInterruptStatus(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt);

/** \brief gets the new input pattern in word format.
 * \param spe pointer to the spe device.
 * \return new input pattern
 */
IFX_INLINE uint32 IfxEgtm_Spe_getNewInputPat(Ifx_EGTM_CLS_SPE *spe);

/** \brief gets the output control register (OUT_CTRL) as a whole word to read the curent output patttern.
 * \param spe pointer to the spe device
 * \return output control register as whole word
 */
IFX_INLINE uint32 IfxEgtm_Spe_getOutputCtrl(Ifx_EGTM_CLS_SPE *spe);

/** \brief returns the output pattern for the specified index as a whole word.
 * \param spe pointer to the spe device
 * \param patIndex step or index number of the pattern specified.
 * \return output pattern as whole word
 */
IFX_INLINE uint32 IfxEgtm_Spe_getOutputPattern(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_PatternIndex patIndex);

/** \brief returns the pattern pointer which indicates the currently pointed SPE_OUT_PAT register.
 * \param spe pointer to the spe device.
 * \return current pattern pointer
 */
IFX_INLINE uint32 IfxEgtm_Spe_getPatternPtr(Ifx_EGTM_CLS_SPE *spe);

/** \brief gets the previous rotation direction.
 * \param spe pointer to the spe device.
 * \return Previous Direction
 */
IFX_INLINE IfxEgtm_Spe_Direction IfxEgtm_Spe_getPrevDir(Ifx_EGTM_CLS_SPE *spe);

/** \brief gets the previous input pattern in word format.
 * \param spe pointer to the spe device.
 * \return previous input pattern
 */
IFX_INLINE uint32 IfxEgtm_Spe_getPreviousInputPat(Ifx_EGTM_CLS_SPE *spe);

/** \brief sets the previous input pattern
 * \param spe pointer to the spe device.
 * \param pattern previous input pattern
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setPreviousInputPat(Ifx_EGTM_CLS_SPE *spe, uint8 pattern);

/** \brief returns the step counter compare value as a 32 bit word.
 * \param spe pointer to the spe device
 * \return step counter
 */
IFX_INLINE uint32 IfxEgtm_Spe_getRevCompare(Ifx_EGTM_CLS_SPE *spe);

/** \brief returns the step counter as a 32 bit word
 * \param spe pointer to the spe device
 * \return step counter
 */
IFX_INLINE uint32 IfxEgtm_Spe_getRevCounter(Ifx_EGTM_CLS_SPE *spe);

/** \brief Get the Pointer to the Interrupt Request Node of specified SPE object.
 * \param spe Spe Index Number
 * \return SRC pointer
 */
IFX_INLINE volatile Ifx_SRC_SRCR *IfxEgtm_Spe_getSrcPointer(IfxEgtm_Spe spe);

/** \brief selects the Tim Input Channels to give input to the SPE submodule.
 * \param spe pointer to the spe device.
 * \param timInput TIM input signal to be selected
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_selectTimInput(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_TimInput timInput);

/** \brief selects the source which will trigger the spe control output.a
 * \param spe pointer to spe device
 * \param trigger trigger source
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_selectTrigger(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_TriggerSource trigger);

/** \brief sets all the specified input patterns into the SPE_PAT register
 * \param spe pointer to the spe device
 * \param patPtr pointer to the pattern specified
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setAllInputPatterns(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InputPattern *patPtr);

/** \brief sets the Backward pattern pointer to the CTRL_STAT2 register. This will be used to command if control command is set to backwards in CTRL_CMD register.
 * \param spe pointer to the spe device
 * \param patIndex pattern index number
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setBwdPatternPtr(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_PatternIndex patIndex);

/** \brief set the CTRL_CMD field to select which pattern pointer is used to select OUT_PAT.
 * \param spe pointer to the spe device.
 * \param cmd control command selection
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setControlCommand(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_ControlCommand cmd);

/** \brief Used to set the Fast shutoff Mode.
 * True: Enable Fast Shutoff
 * False: Disable Fast Shutoff
 * \param spe pointer to the spe device
 * \param enabled status of Fast shutoff
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setFastShutoff(Ifx_EGTM_CLS_SPE *spe, boolean enabled);

/** \brief writes SPE[i]_PAT with the individual pattern specified according to the pattern index.
 * \param spe pointer to the spe device
 * \param patPtr pointer to the pattern specified
 * \param patIndex step or index number of the pattern specified.
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setInputPattern(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InputPattern *patPtr, IfxEgtm_Spe_PatternIndex patIndex);

/** \brief forces the interrupt of specified type by software
 * \param spe pointer to the spe device
 * \param interrupt interrupt signal
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt);

/** \brief sets the desired mode as the interrupt mode from SPE submodule.
 * \param spe pointer to the spe device
 * \param mode interrupt mode
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setInterruptMode(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptMode mode);

/** \brief writes into the out_ctrl register with the specified output pattern.
 * \param spe pointer to the spe device
 * \param patPtr pointer to the output pattern
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setOutputCtrl(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_OutputPattern *patPtr);

/** \brief sets the output pattern from pointer to the corresponding SPE_OUT_PAT register specified by the index.
 * \param spe pointer to the spe device
 * \param patPtr pointer to the output pattern
 * \param patIndex step or index number of the pattern specified.
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setOutputPattern(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_OutputPattern *patPtr, IfxEgtm_Spe_PatternIndex patIndex);

/** \brief sets the Pattern Index into the CTRL_STAT register, which will in turn point to the corresponding SPE_OUT_PAT register.
 * \param spe pointer to the spe device
 * \param patIndex pattern index number
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setPatternPtr(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_PatternIndex patIndex);

/** \brief sets the step compare count to the specified value.
 * \param spe pointer to the spe device
 * \param count step counter value.
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setRevCompare(Ifx_EGTM_CLS_SPE *spe, uint32 count);

/** \brief sets the step counter to a specific value.
 * \param spe pointer to the spe device
 * \param count step counter value.
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_setRevCounter(Ifx_EGTM_CLS_SPE *spe, uint32 count);

/** \brief Trigger the update of OUT_CTRL register with the OUT_PAT selected by Control Command.
 * \param spe pointer to the spe device.
 * \return None
 */
IFX_INLINE void IfxEgtm_Spe_triggerUpdate(Ifx_EGTM_CLS_SPE *spe);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxEgtm_Spe_clearAllInterrupts(Ifx_EGTM_CLS_SPE *spe)
{
    spe->IRQ_NOTIFY.U |= (uint32)0x1Fu;
}


IFX_INLINE void IfxEgtm_Spe_clearInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt)
{
    spe->IRQ_NOTIFY.U |= ((uint32)1u << (uint32)interrupt);
}


IFX_INLINE void IfxEgtm_Spe_disableInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt)
{
    uint32 irqen_temp = spe->IRQ_EN.U;
    irqen_temp    = (irqen_temp ^ ((uint32)1u << (uint8)interrupt));
    spe->IRQ_EN.U = irqen_temp;
}


IFX_INLINE void IfxEgtm_Spe_enableErrorInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt, boolean enabled)
{
    uint32 irqen_temp = spe->EIRQ_EN.U;
    irqen_temp     = (irqen_temp | ((uint32)1u << (uint8)interrupt)) & ((uint32)enabled << (uint8)interrupt);
    spe->EIRQ_EN.U = irqen_temp;
}


IFX_INLINE void IfxEgtm_Spe_enableInput(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InputSignal inputSignal, boolean enabled)
{
    if (enabled == TRUE)
    {
        spe->CTRL_STAT.U |= ((uint32)enabled << ((uint32)inputSignal + IFX_EGTM_CLS_SPE_CTRL_STAT_SIE0_OFF));
    }
    else
    {
        spe->CTRL_STAT.U &= ~((uint32)(!enabled) << ((uint32)inputSignal + IFX_EGTM_CLS_SPE_CTRL_STAT_SIE0_OFF));
    }
}


IFX_INLINE void IfxEgtm_Spe_enableInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt)
{
    uint32 irqen_temp = spe->IRQ_EN.U;
    irqen_temp    = (irqen_temp | ((uint32)1u << (uint8)interrupt));
    spe->IRQ_EN.U = irqen_temp;
}


IFX_INLINE void IfxEgtm_Spe_enableModule(Ifx_EGTM_CLS_SPE *spe, boolean enabled)
{
    spe->CTRL_STAT.B.EN = (uint8)enabled;
}


IFX_INLINE uint32 IfxEgtm_Spe_getActualInputPat(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->CTRL_STAT.B.AIP);
}


IFX_INLINE void IfxEgtm_Spe_setActualInputPat(Ifx_EGTM_CLS_SPE *spe, uint8 pattern)
{
    spe->CTRL_STAT.B.AIP = pattern;
}


IFX_INLINE uint32 IfxEgtm_Spe_getBwdPatternPtr(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->CTRL_STAT2.B.SPE_PAT_PTR_BWD);
}


IFX_INLINE IfxEgtm_Spe_ControlCommand IfxEgtm_Spe_getControlCommand(Ifx_EGTM_CLS_SPE *spe)
{
    return (IfxEgtm_Spe_ControlCommand)(spe->CMD.B.SPE_CTRL_CMD);
}


IFX_INLINE IfxEgtm_Spe_Direction IfxEgtm_Spe_getDir(Ifx_EGTM_CLS_SPE *spe)
{
    return (IfxEgtm_Spe_Direction)(spe->CTRL_STAT.B.ADIR);
}


IFX_INLINE uint32 IfxEgtm_Spe_getFastShutoffLevel(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_OutChannel channel)
{
    uint32 fsol_temp = (uint32)(spe->CTRL_STAT.B.FSOL);
    fsol_temp = (fsol_temp & (uint32)((uint32)1u << (uint32)channel)) >> (uint32)channel;
    return (uint32)fsol_temp;
}


IFX_INLINE boolean IfxEgtm_Spe_getInterruptStatus(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt)
{
    boolean status;
    status = ((((spe->IRQ_NOTIFY.U) >> (uint8)interrupt) & (uint32)1u) == (uint32)1u) ? TRUE : FALSE;
    return status;
}


IFX_INLINE uint32 IfxEgtm_Spe_getNewInputPat(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->CTRL_STAT.B.NIP);
}


IFX_INLINE uint32 IfxEgtm_Spe_getOutputCtrl(Ifx_EGTM_CLS_SPE *spe)
{
    return spe->OUT_CTRL.U;
}


IFX_INLINE uint32 IfxEgtm_Spe_getOutputPattern(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_PatternIndex patIndex)
{
    return (uint32)spe->OUT_PAT[patIndex].U;
}


IFX_INLINE uint32 IfxEgtm_Spe_getPatternPtr(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->CTRL_STAT.B.SPE_PAT_PTR);
}


IFX_INLINE IfxEgtm_Spe_Direction IfxEgtm_Spe_getPrevDir(Ifx_EGTM_CLS_SPE *spe)
{
    return (IfxEgtm_Spe_Direction)(spe->CTRL_STAT.B.PDIR);
}


IFX_INLINE uint32 IfxEgtm_Spe_getPreviousInputPat(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->CTRL_STAT.B.PIP);
}


IFX_INLINE void IfxEgtm_Spe_setPreviousInputPat(Ifx_EGTM_CLS_SPE *spe, uint8 pattern)
{
    spe->CTRL_STAT.B.PIP = pattern;
}


IFX_INLINE uint32 IfxEgtm_Spe_getRevCompare(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->REV_CMP.B.REV_CMP);
}


IFX_INLINE uint32 IfxEgtm_Spe_getRevCounter(Ifx_EGTM_CLS_SPE *spe)
{
    return (uint32)(spe->REV_CNT.B.REV_CNT);
}


IFX_INLINE volatile Ifx_SRC_SRCR *IfxEgtm_Spe_getSrcPointer(IfxEgtm_Spe spe)
{
    return (volatile Ifx_SRC_SRCR *)(&(MODULE_SRC.EGTM.SPEIRQ[spe]));
}


IFX_INLINE void IfxEgtm_Spe_selectTimInput(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_TimInput timInput)
{
    spe->CTRL_STAT.B.TIM_SEL = (uint8)((uint32)timInput & (uint32)1u);
}


IFX_INLINE void IfxEgtm_Spe_selectTrigger(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_TriggerSource trigger)
{
    Ifx_EGTM_CLS_SPE_CTRL_STAT ctrl_stat;
    ctrl_stat.U           = spe->CTRL_STAT.U;

    ctrl_stat.B.TRIG_SEL  = (uint8)IFXEGTM_SPE_GET_TRIGSEL(trigger);
    ctrl_stat.B.ETRIG_SEL = (uint8)IFXEGTM_SPE_GET_ETRIG(trigger);

    spe->CTRL_STAT.U      = ctrl_stat.U;
}


IFX_INLINE void IfxEgtm_Spe_setAllInputPatterns(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InputPattern *patPtr)
{
    uint32 spepat_temp = spe->PAT.U;

    spepat_temp = IFXEGTM_SPE_GETALLPATTERNS(patPtr);

    spe->PAT.U  = spepat_temp;
}


IFX_INLINE void IfxEgtm_Spe_setBwdPatternPtr(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_PatternIndex patIndex)
{
    spe->CTRL_STAT2.B.SPE_PAT_PTR_BWD = (uint8)patIndex;
}


IFX_INLINE void IfxEgtm_Spe_setControlCommand(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_ControlCommand cmd)
{
    spe->CMD.B.SPE_CTRL_CMD = (uint8)cmd;
}


IFX_INLINE void IfxEgtm_Spe_setFastShutoff(Ifx_EGTM_CLS_SPE *spe, boolean enabled)
{
    spe->CTRL_STAT.B.FSOM = (uint8)enabled;
}


IFX_INLINE void IfxEgtm_Spe_setInputPattern(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InputPattern *patPtr, IfxEgtm_Spe_PatternIndex patIndex)
{
    uint32 pattern = patPtr->U;
    spe->PAT.U |= ((uint32)(pattern & 0xFu) << ((uint32)patIndex * (IFX_EGTM_CLS_SPE_PAT_IP1_PAT_OFF - IFX_EGTM_CLS_SPE_PAT_IP0_PAT_OFF)));
}


IFX_INLINE void IfxEgtm_Spe_setInterrupt(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptSignal interrupt)
{
    uint32 forceirq_temp = spe->IRQ_FORCINT.U;
    forceirq_temp      = (forceirq_temp | ((uint32)1 << (uint8)interrupt));
    spe->IRQ_FORCINT.U = forceirq_temp;
}


IFX_INLINE void IfxEgtm_Spe_setInterruptMode(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_InterruptMode mode)
{
    spe->IRQ_MODE.B.IRQ_MODE = (uint8)mode;
}


IFX_INLINE void IfxEgtm_Spe_setOutputCtrl(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_OutputPattern *patPtr)
{
    spe->OUT_CTRL.U = patPtr->U;
}


IFX_INLINE void IfxEgtm_Spe_setOutputPattern(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_OutputPattern *patPtr, IfxEgtm_Spe_PatternIndex patIndex)
{
    spe->OUT_PAT[patIndex].U = patPtr->U;
}


IFX_INLINE void IfxEgtm_Spe_setPatternPtr(Ifx_EGTM_CLS_SPE *spe, IfxEgtm_Spe_PatternIndex patIndex)
{
    spe->CTRL_STAT.B.SPE_PAT_PTR = (uint8)patIndex;
}


IFX_INLINE void IfxEgtm_Spe_setRevCompare(Ifx_EGTM_CLS_SPE *spe, uint32 count)
{
    spe->REV_CMP.B.REV_CMP = count;
}


IFX_INLINE void IfxEgtm_Spe_setRevCounter(Ifx_EGTM_CLS_SPE *spe, uint32 count)
{
    spe->REV_CNT.B.REV_CNT = count;
}


IFX_INLINE void IfxEgtm_Spe_triggerUpdate(Ifx_EGTM_CLS_SPE *spe)
{
    spe->CMD.B.SPE_UPD_TRIG = (uint8)1;
}


#endif /* IFXEGTM_SPE_H */
