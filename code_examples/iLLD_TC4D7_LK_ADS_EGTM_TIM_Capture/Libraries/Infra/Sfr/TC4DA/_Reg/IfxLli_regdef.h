/**
 * \file IfxLli_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_LLI/V0.2.1.1.5
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Lli_Registers Lli Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Lli_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Lli_Registers
 * 
 * \defgroup IfxSfr_Lli_Registers_union Register unions
 * \ingroup IfxSfr_Lli_Registers
 * 
 * \defgroup IfxSfr_Lli_Registers_struct Memory map
 * \ingroup IfxSfr_Lli_Registers
 */
#ifndef IFXLLI_REGDEF_H
#define IFXLLI_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Lli_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_LLI_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_LLI_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_LLI_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_LLI_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_LLI_ACCEN_RDB_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_LLI_ACCEN_RDB_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_LLI_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_LLI_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_LLI_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_LLI_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_LLI_ACCEN_WRB_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_LLI_ACCEN_WRB_Bits;

/** \brief Alarm clear */
typedef struct _Ifx_LLI_ALCLR_Bits
{
    __IO Ifx_Strict_32Bit WPMS2L:1;        /**< \brief [0:0] Clear alarm event status for LLI master port connected to S2L bridge (rwh) */
    __IO Ifx_Strict_32Bit WPMPPU:1;        /**< \brief [1:1] Clear alarm event status for LLI master port connected to PPU LBU (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [4:2] \internal Reserved */
    __IO Ifx_Strict_32Bit WPSTUDMI:1;      /**< \brief [5:5] Clear alarm event status for LLI slave port connected to PPU STUDMI (rwh) */
    __IO Ifx_Strict_32Bit WPSPPUD:1;       /**< \brief [6:6] Clear alarm event status for LLI slave port connected to PPU debug (rwh) */
    __IO Ifx_Strict_32Bit WPSPPUSFR:1;     /**< \brief [7:7] Clear alarm event status for LLI slave port connected to PPU SFRs (rwh) */
    __IO Ifx_Strict_32Bit WPSPPUS:1;       /**< \brief [8:8] Clear alarm event status for LLI slave port connected to PPU safety (rwh) */
    __IO Ifx_Strict_32Bit MS2L:1;          /**< \brief [9:9] Clear alarm event status for AXI master interface on S2L bridge (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [12:10] \internal Reserved */
    __IO Ifx_Strict_32Bit SPPUD:1;         /**< \brief [13:13] Clear alarm event status for AXI slave interface on PPU debug (rwh) */
    __IO Ifx_Strict_32Bit SPPUSFR:1;       /**< \brief [14:14] Clear alarm event status for AXI slave interface on PPU SFRs (rwh) */
    __IO Ifx_Strict_32Bit SPPUSM:1;        /**< \brief [15:15] Clear alarm event status for AXI slave interface on PPU safety monitors (rwh) */
    __IO Ifx_Strict_32Bit OW:1;            /**< \brief [16:16] Clear overflow bit in register ALEV (rwh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [29:17] \internal Reserved */
    __IO Ifx_Strict_32Bit WPSDEF:1;        /**< \brief [30:30] Clear alarm event status for LLI slave port to default slave (rwh) */
    __IO Ifx_Strict_32Bit SDEF:1;          /**< \brief [31:31] Clear alarm event status for AXI slave interface on default slave (rwh) */
} Ifx_LLI_ALCLR_Bits;

/** \brief Alarm event */
typedef struct _Ifx_LLI_ALEV_Bits
{
    __I  Ifx_Strict_32Bit WPMS2L:1;        /**< \brief [0:0] Alarm event for LLI master port connected to S2L bridge (rh) */
    __I  Ifx_Strict_32Bit WPMPPU:1;        /**< \brief [1:1] Alarm event for LLI master port connected to PPU LBU (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [4:2] \internal Reserved */
    __I  Ifx_Strict_32Bit WPSTUDMI:1;      /**< \brief [5:5] Alarm event for LLI slave port connected to PPU STUDMI interface (rh) */
    __I  Ifx_Strict_32Bit WPSPPUD:1;       /**< \brief [6:6] Alarm event for LLI slave port connected to PPU debug interface (rh) */
    __I  Ifx_Strict_32Bit WPSPPUSFR:1;     /**< \brief [7:7] Alarm event for LLI slave port connected to PPU SFRs (rh) */
    __I  Ifx_Strict_32Bit WPSPPUS:1;       /**< \brief [8:8] Alarm event for LLI slave port connected to PPU safety interface (rh) */
    __I  Ifx_Strict_32Bit MS2L:1;          /**< \brief [9:9] Alarm event for AXI master interface on S2L bridge (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [12:10] \internal Reserved */
    __I  Ifx_Strict_32Bit SPPUD:1;         /**< \brief [13:13] Alarm event for AXI slave interface on PPU debug (rh) */
    __I  Ifx_Strict_32Bit SPPUSFR:1;       /**< \brief [14:14] Alarm event for AXI slave interface on PPU SFRs (rh) */
    __I  Ifx_Strict_32Bit SPPUSM:1;        /**< \brief [15:15] Alarm event for AXI slave interface on PPU safety monitors (rh) */
    __I  Ifx_Strict_32Bit OW:1;            /**< \brief [16:16] Overflow bit (rh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [29:17] \internal Reserved */
    __I  Ifx_Strict_32Bit WPSDEF:1;        /**< \brief [30:30] Alarm event for LLI slave port connected to default slave (rh) */
    __I  Ifx_Strict_32Bit SDEF:1;          /**< \brief [31:31] Alarm event for AXI slave interface on default slave (rh) */
} Ifx_LLI_ALEV_Bits;

/** \brief Identification register */
typedef struct _Ifx_LLI_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module revision number - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module number value - MOD_NUM (r) */
} Ifx_LLI_ID_Bits;

/** \brief Error injection from S2L master interface */
typedef struct _Ifx_LLI_MEGEN_Bits
{
    __IO Ifx_Strict_32Bit WPAR:1;          /**< \brief [0:0] Error Injection for LLI wrapper EDC error on AR channel (rwh) */
    __IO Ifx_Strict_32Bit WPAW:1;          /**< \brief [1:1] Error injection for LLI wrapper EDC error on AW channel (rwh) */
    __IO Ifx_Strict_32Bit WPW:1;           /**< \brief [2:2] Error injection for LLI wrapper EDC error on W channel (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [5:3] \internal Reserved */
    __IO Ifx_Strict_32Bit ARVALID:1;       /**< \brief [6:6] Error injection for parity error on ARVALID signal (rwh) */
    __IO Ifx_Strict_32Bit ARCTRL1:1;       /**< \brief [7:7] Error injection for parity error on ARID signal (rwh) */
    __IO Ifx_Strict_32Bit ARCTRL2:1;       /**< \brief [8:8] Error injection for parity error on ARLEN signal (rwh) */
    __IO Ifx_Strict_32Bit ARCTRL3:1;       /**< \brief [9:9] Error injection for parity error on ARBURST, ARLOCK, ARSIZE signal (rwh) */
    __IO Ifx_Strict_32Bit ARCTRL4:1;       /**< \brief [10:10] Error injection for parity error on ARCACHE, ARPROT signal (rwh) */
    __IO Ifx_Strict_32Bit ARADDR1:1;       /**< \brief [11:11] Error injection for parity error on ARADDR[7:0] (rwh) */
    __IO Ifx_Strict_32Bit ARADDR2:1;       /**< \brief [12:12] Error injection for parity error on ARADDR[15:8] (rwh) */
    __IO Ifx_Strict_32Bit ARADDR3:1;       /**< \brief [13:13] Error injection for parity error on ARADDR[23:16] (rwh) */
    __IO Ifx_Strict_32Bit ARADDR4:1;       /**< \brief [14:14] Error injection for parity error on ARADDR[31:24] (rwh) */
    __IO Ifx_Strict_32Bit AWCTRL1:1;       /**< \brief [15:15] Error injection for parity error on AWID signal (rwh) */
    __IO Ifx_Strict_32Bit AWCTRL2:1;       /**< \brief [16:16] Error injection for parity error on AWLEN signal (rwh) */
    __IO Ifx_Strict_32Bit AWCTRL3:1;       /**< \brief [17:17] Error injection for parity err on AWBURST, AWLOCK, AWSIZE signal (rwh) */
    __IO Ifx_Strict_32Bit AWCTRL4:1;       /**< \brief [18:18] Error injection for parity error on AWCACHE, AWPROT signal (rwh) */
    __IO Ifx_Strict_32Bit AWADDR1:1;       /**< \brief [19:19] Error injection for parity error on AWADDR[7:0] (rwh) */
    __IO Ifx_Strict_32Bit AWADDR2:1;       /**< \brief [20:20] Error injection for parity error on AWADDR[15:8] (rwh) */
    __IO Ifx_Strict_32Bit AWADDR3:1;       /**< \brief [21:21] Error injection for parity error on AWADDR[23:16] (rwh) */
    __IO Ifx_Strict_32Bit AWADDR4:1;       /**< \brief [22:22] Error injection for parity error on AWADDR[31:24] (rwh) */
    __IO Ifx_Strict_32Bit WCTRL1:1;        /**< \brief [23:23] Error injection for parity error on WID signal (rwh) */
    __IO Ifx_Strict_32Bit WCTRL2:1;        /**< \brief [24:24] Error injection for parity error on WSTRB signal (rwh) */
    __IO Ifx_Strict_32Bit WCTRL3:1;        /**< \brief [25:25] Error injection for parity error on WLAST signal (rwh) */
    __IO Ifx_Strict_32Bit AWVALID:1;       /**< \brief [26:26] Error injection for parity error on AWVALID signal (rwh) */
    __IO Ifx_Strict_32Bit RREADY:1;        /**< \brief [27:27] Error injection for parity error on RREADY signal (rwh) */
    __IO Ifx_Strict_32Bit BREADY:1;        /**< \brief [28:28] Error injection for parity error on BREADY signal (rwh) */
    __IO Ifx_Strict_32Bit WVALID:1;        /**< \brief [29:29] Error injection for parity error on WVALID signal (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [30:30] \internal Reserved */
    __IO Ifx_Strict_32Bit WDATA:1;         /**< \brief [31:31] Error injection for ECC error on WDATA signal (rwh) */
} Ifx_LLI_MEGEN_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_LLI_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_LLI_PROT_Bits;

/** \brief Error injection from PPU.SFR slave interface */
typedef struct _Ifx_LLI_SEGEN_Bits
{
    __IO Ifx_Strict_32Bit WPR:1;           /**< \brief [0:0] Error Injection for EDC error on R channel (rwh) */
    __IO Ifx_Strict_32Bit WPWR:1;          /**< \brief [1:1] Error Injection for EDC error on WR channel (rwh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [5:2] \internal Reserved */
    __IO Ifx_Strict_32Bit ARREADY:1;       /**< \brief [6:6] Error injection for parity error on ARREADY signal (rwh) */
    __IO Ifx_Strict_32Bit AWREADY:1;       /**< \brief [7:7] Error injection for parity error on AWREADY signal (rwh) */
    __IO Ifx_Strict_32Bit WREADY:1;        /**< \brief [8:8] Error injection for parity error on WREADY signal (rwh) */
    __IO Ifx_Strict_32Bit RVALID:1;        /**< \brief [9:9] Error injection for parity error on RVALID signal (rwh) */
    __IO Ifx_Strict_32Bit BVALID:1;        /**< \brief [10:10] Error injection for parity error on BVALID signal (rwh) */
    __IO Ifx_Strict_32Bit RCTRL1:1;        /**< \brief [11:11] Error injection for parity error on RID signal (rw) */
    __IO Ifx_Strict_32Bit RCTRL2:1;        /**< \brief [12:12] Error injection for parity error on RRESP, RLAST signal (rw) */
    __IO Ifx_Strict_32Bit BCTRL1:1;        /**< \brief [13:13] Error injection for parity error on BID signal (rw) */
    __IO Ifx_Strict_32Bit BCTRL2:1;        /**< \brief [14:14] Error injection for parity error on BRESP signal (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [18:15] \internal Reserved */
    __IO Ifx_Strict_32Bit RDATA:1;         /**< \brief [19:19] Error injection for ECC error on RDATA signal (rwh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_LLI_SEGEN_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_lli_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_LLI_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_LLI_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ACCEN_RDB_Bits B;              /**< \brief Bitfield access */
} Ifx_LLI_ACCEN_RDB;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_LLI_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_LLI_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ACCEN_WRB_Bits B;              /**< \brief Bitfield access */
} Ifx_LLI_ACCEN_WRB;

/** \brief Alarm clear   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ALCLR_Bits B;                  /**< \brief Bitfield access */
} Ifx_LLI_ALCLR;

/** \brief Alarm event   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ALEV_Bits B;                   /**< \brief Bitfield access */
} Ifx_LLI_ALEV;

/** \brief Identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_LLI_ID;

/** \brief Error injection from S2L master interface   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_MEGEN_Bits B;                  /**< \brief Bitfield access */
} Ifx_LLI_MEGEN;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_LLI_PROT;

/** \brief Error injection from PPU.SFR slave interface   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LLI_SEGEN_Bits B;                  /**< \brief Bitfield access */
} Ifx_LLI_SEGEN;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Lli_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_LLI_ACCEN
{
       __IO Ifx_LLI_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_LLI_ACCEN_WRB                   WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_LLI_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_LLI_ACCEN_RDB                   RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_LLI_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_LLI_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_LLI_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Lli_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief LLI object */
typedef volatile struct _Ifx_LLI
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_LLI_ID                          ID;                     /**< \brief 8, Identification register*/
       __I  Ifx_LLI_ALEV                        ALEV;                   /**< \brief C, Alarm event*/
       __IO Ifx_LLI_ALCLR                       ALCLR;                  /**< \brief 10, Alarm clear*/
       __IO Ifx_LLI_MEGEN                       MEGEN;                  /**< \brief 14, Error injection from S2L master interface*/
       __IO Ifx_LLI_SEGEN                       SEGEN;                  /**< \brief 18, Error injection from PPU.SFR slave interface*/
       __IO Ifx_LLI_PROT                        PROTSE;                 /**< \brief 1C, Resource protection register*/
       __IO Ifx_LLI_ACCEN                       ACCEN;                  /**< \brief 20, */
       __I  Ifx_UReg_8Bit                       reserved_3C[32708];     /**< \brief 3C, \internal Reserved */
} Ifx_LLI;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXLLI_REGDEF_H */
