/**
 * \file IfxScr_reg.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SCR/V13.1.1.12.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scr_Registers_Cfg Scr address
 * \ingroup IfxSfr_Scr_Registers
 * 
 * \defgroup IfxSfr_Scr_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Scr_Registers_Cfg
 *
 * \defgroup IfxSfr_Scr_Registers_Cfg_Scr 2-SCR
 * \ingroup IfxSfr_Scr_Registers_Cfg
 *
 *
 */
#ifndef IFXSCR_REG_H
#define IFXSCR_REG_H 1
/******************************************************************************/
#include "IfxScr_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Scr_Registers_Cfg_BaseAddress
 * \{  */

/** \brief SCR object */
/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scr_Registers_Cfg_Scr
 * \{  */
/** \brief 81, Timer 2 instance 0 control register */
#define SCR_T2CCU0_T2_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_CON*)0x81u)

/** \brief 81, T2CCU0 capture/compare enable register */
#define SCR_T2CCU0_CCEN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCEN*)0x81u)

/** \brief 81, T2CCU0 compare shadow register */
#define SCR_T2CCU0_COSHDW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_COSHDW*)0x81u)

/** \brief 81, T2CCU0 compare control register */
#define SCR_T2CCU0_COCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_COCON*)0x81u)

/** \brief 82, Timer 2 instance 0 mode register */
#define SCR_T2CCU0_T2_MOD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_MOD*)0x82u)

/** \brief 82, T2CCU0 capture/compare time base select register */
#define SCR_T2CCU0_CCTBSEL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTBSEL*)0x82u)

/** \brief 82, T2CCU0 capture/compare register x low */
#define SCR_T2CCU0_CC020_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC02_CCXL*)0x82u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC020_CCXL */
#define SCR_T2CCU0_CC0L (SCR_T2CCU0_CC020_CCXL)

/** \brief 82, T2CCU0 capture/compare register x low */
#define SCR_T2CCU0_CC353_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC35_CCXL*)0x82u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC353_CCXL */
#define SCR_T2CCU0_CC3L (SCR_T2CCU0_CC353_CCXL)

/** \brief 83, Timer 2 instance 0 reload/capture register, low byte */
#define SCR_T2CCU0_T2_RC2L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_RC2L*)0x83u)

/** \brief 83, T2CCU0 capture/compare timer reload register low */
#define SCR_T2CCU0_CCTRELL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTRELL*)0x83u)

/** \brief 83, T2CCU0 capture/compare register x high */
#define SCR_T2CCU0_CC020_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC02_CCXH*)0x83u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC020_CCXH */
#define SCR_T2CCU0_CC0H (SCR_T2CCU0_CC020_CCXH)

/** \brief 83, T2CCU0 capture/compare register x high */
#define SCR_T2CCU0_CC353_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC35_CCXH*)0x83u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC353_CCXH */
#define SCR_T2CCU0_CC3H (SCR_T2CCU0_CC353_CCXH)

/** \brief 83, T2CCU0 capture/compare timer dead-time control register low */
#define SCR_T2CCU0_CCTDTCL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTDTCL*)0x83u)

/** \brief 84, Timer 2 instance 0 reload/capture register, high byte */
#define SCR_T2CCU0_T2_RC2H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_RC2H*)0x84u)

/** \brief 84, T2CCU0 capture/compare timer reload register high */
#define SCR_T2CCU0_CCTRELH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTRELH*)0x84u)

/** \brief 84, T2CCU0 capture/compare register x low */
#define SCR_T2CCU0_CC021_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC02_CCXL*)0x84u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC021_CCXL */
#define SCR_T2CCU0_CC1L (SCR_T2CCU0_CC021_CCXL)

/** \brief 84, T2CCU0 capture/compare register x low */
#define SCR_T2CCU0_CC354_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC35_CCXL*)0x84u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC354_CCXL */
#define SCR_T2CCU0_CC4L (SCR_T2CCU0_CC354_CCXL)

/** \brief 84, T2CCU0 capture/compare timer dead-time control register high */
#define SCR_T2CCU0_CCTDTCH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTDTCH*)0x84u)

/** \brief 85, Timer 2 instance 0, low byte */
#define SCR_T2CCU0_T2_T2L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_T2L*)0x85u)

/** \brief 85, T2CCU0 capture/compare timer register low */
#define SCR_T2CCU0_CCTL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTL*)0x85u)

/** \brief 85, T2CCU0 capture/compare register x high */
#define SCR_T2CCU0_CC021_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC02_CCXH*)0x85u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC021_CCXH */
#define SCR_T2CCU0_CC1H (SCR_T2CCU0_CC021_CCXH)

/** \brief 85, T2CCU0 capture/compare register x high */
#define SCR_T2CCU0_CC354_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC35_CCXH*)0x85u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC354_CCXH */
#define SCR_T2CCU0_CC4H (SCR_T2CCU0_CC354_CCXH)

/** \brief 86, Timer 2 instance 0, high byte */
#define SCR_T2CCU0_T2_T2H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_T2H*)0x86u)

/** \brief 86, T2CCU0 capture/compare timer register high */
#define SCR_T2CCU0_CCTH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTH*)0x86u)

/** \brief 86, T2CCU0 capture/compare register x low */
#define SCR_T2CCU0_CC022_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC02_CCXL*)0x86u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC022_CCXL */
#define SCR_T2CCU0_CC2L (SCR_T2CCU0_CC022_CCXL)

/** \brief 86, T2CCU0 capture/compare register x low */
#define SCR_T2CCU0_CC355_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC35_CCXL*)0x86u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC355_CCXL */
#define SCR_T2CCU0_CC5L (SCR_T2CCU0_CC355_CCXL)

/** \brief 87, Timer 2 instance 0 control register 1 */
#define SCR_T2CCU0_T2_CON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_T2_CON1*)0x87u)

/** \brief 87, T2CCU0 capture/compare timer control register */
#define SCR_T2CCU0_CCTCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CCTCON*)0x87u)

/** \brief 87, T2CCU0 capture/compare register x high */
#define SCR_T2CCU0_CC022_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC02_CCXH*)0x87u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC022_CCXH */
#define SCR_T2CCU0_CC2H (SCR_T2CCU0_CC022_CCXH)

/** \brief 87, T2CCU0 capture/compare register x high */
#define SCR_T2CCU0_CC355_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU0_CC35_CCXH*)0x87u)
/** Alias (User Manual Name) for SCR_T2CCU0_CC355_CCXH */
#define SCR_T2CCU0_CC5H (SCR_T2CCU0_CC355_CCXH)

/** \brief 88, Page register for T2CCU0 */
#define SCR_T2CCU0_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PAGE*)0x88u)

/** \brief 89, Control register low [programming mode] */
#define SCR_SSC_CONPL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONPL*)0x89u)

/** \brief 89, Control register low [operation mode] */
#define SCR_SSC_CONOL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONOL*)0x89u)

/** \brief 8A, Control register high [programming mode] */
#define SCR_SSC_CONPH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONPH*)0x8Au)

/** \brief 8A, Control register high [operation mode] */
#define SCR_SSC_CONOH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONOH*)0x8Au)

/** \brief 8B, Transmitter buffer register */
#define SCR_SSC_TBL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_TBL*)0x8Bu)

/** \brief 8C, Receiver buffer register */
#define SCR_SSC_RBL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_RBL*)0x8Cu)

/** \brief 8D, Baud rate timer reload register low */
#define SCR_SSC_BRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_BRL*)0x8Du)

/** \brief 8E, Baud rate timer reload register high */
#define SCR_SSC_BRH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_BRH*)0x8Eu)

/** \brief 8F, Page register for port SFRs */
#define SCR_IO_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PAGE*)0x8Fu)

/** \brief 90, Port Pn output register */
#define SCR_P0_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OUT*)0x90u)

/** \brief 90, Port Pn input/output control register m */
#define SCR_P0_IOCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x90u)

/** \brief 90, Port Pn pad driver mode 0 register */
#define SCR_P0_PDR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR0*)0x90u)

/** \brief 91, Port Pn input register */
#define SCR_P0_IN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IN*)0x91u)

/** \brief 91, Port Pn input/output control register m */
#define SCR_P0_IOCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x91u)

/** \brief 91, Port Pn pad driver mode 2 register */
#define SCR_P0_PDR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR2*)0x91u)

/** \brief 92, Port Pn output modification set register */
#define SCR_P0_OMSR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMSR*)0x92u)

/** \brief 92, Port Pn input/output control register m */
#define SCR_P0_IOCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x92u)

/** \brief 92, Port Pn pad driver mode 4 register */
#define SCR_P0_PDR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR4*)0x92u)

/** \brief 93, Port Pn output modification clear register */
#define SCR_P0_OMCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMCR*)0x93u)

/** \brief 93, Port Pn input/output control register m */
#define SCR_P0_IOCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x93u)

/** \brief 93, Port Pn pad driver mode 6 register */
#define SCR_P0_PDR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR6*)0x93u)

/** \brief 94, Port Pn output modification toggle register */
#define SCR_P0_OMTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMTR*)0x94u)

/** \brief 94, Port Pn input/output control register m */
#define SCR_P0_IOCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x94u)

/** \brief 95, Port Pn input/output control register m */
#define SCR_P0_IOCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x95u)

/** \brief 95, Port Pn pin function decision control register */
#define SCR_P0_PDISC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDISC*)0x95u)

/** \brief 96, Port Pn input/output control register m */
#define SCR_P0_IOCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x96u)

/** \brief 97, Port Pn input/output control register m */
#define SCR_P0_IOCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x97u)

/** \brief 98, Port Pn output register */
#define SCR_P1_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OUT*)0x98u)

/** \brief 98, Port Pn input/output control register m */
#define SCR_P1_IOCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x98u)

/** \brief 98, Port Pn pad driver mode 0 register */
#define SCR_P1_PDR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR0*)0x98u)

/** \brief 99, Port Pn input register */
#define SCR_P1_IN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IN*)0x99u)

/** \brief 99, Port Pn input/output control register m */
#define SCR_P1_IOCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x99u)

/** \brief 99, Port Pn pad driver mode 2 register */
#define SCR_P1_PDR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR2*)0x99u)

/** \brief 9A, Port Pn output modification set register */
#define SCR_P1_OMSR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMSR*)0x9Au)

/** \brief 9A, Port Pn input/output control register m */
#define SCR_P1_IOCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x9Au)

/** \brief 9A, Port Pn pad driver mode 4 register */
#define SCR_P1_PDR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR4*)0x9Au)

/** \brief 9B, Port Pn output modification clear register */
#define SCR_P1_OMCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMCR*)0x9Bu)

/** \brief 9B, Port Pn input/output control register m */
#define SCR_P1_IOCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x9Bu)

/** \brief 9B, Port Pn pad driver mode 6 register */
#define SCR_P1_PDR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR6*)0x9Bu)

/** \brief 9C, Port Pn output modification toggle register */
#define SCR_P1_OMTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMTR*)0x9Cu)

/** \brief 9C, Port Pn input/output control register m */
#define SCR_P1_IOCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x9Cu)

/** \brief 9D, Port Pn input/output control register m */
#define SCR_P1_IOCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x9Du)

/** \brief 9D, Port Pn pin function decision control register */
#define SCR_P1_PDISC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDISC*)0x9Du)

/** \brief 9E, Port Pn input/output control register m */
#define SCR_P1_IOCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x9Eu)

/** \brief 9F, Port Pn input/output control register m */
#define SCR_P1_IOCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0x9Fu)

/** \brief A0, Port Pn output register */
#define SCR_P2_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OUT*)0xA0u)

/** \brief A0, Port Pn input/output control register m */
#define SCR_P2_IOCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA0u)

/** \brief A0, Port Pn pad driver mode 0 register */
#define SCR_P2_PDR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR0*)0xA0u)

/** \brief A1, Port Pn input register */
#define SCR_P2_IN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IN*)0xA1u)

/** \brief A1, Port Pn input/output control register m */
#define SCR_P2_IOCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA1u)

/** \brief A1, Port Pn pad driver mode 2 register */
#define SCR_P2_PDR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR2*)0xA1u)

/** \brief A2, Port Pn output modification set register */
#define SCR_P2_OMSR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMSR*)0xA2u)

/** \brief A2, Port Pn input/output control register m */
#define SCR_P2_IOCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA2u)

/** \brief A2, Port Pn pad driver mode 4 register */
#define SCR_P2_PDR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR4*)0xA2u)

/** \brief A3, Port Pn output modification clear register */
#define SCR_P2_OMCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMCR*)0xA3u)

/** \brief A3, Port Pn input/output control register m */
#define SCR_P2_IOCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA3u)

/** \brief A3, Port Pn pad driver mode 6 register */
#define SCR_P2_PDR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR6*)0xA3u)

/** \brief A4, Port Pn output modification toggle register */
#define SCR_P2_OMTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMTR*)0xA4u)

/** \brief A4, Port Pn input/output control register m */
#define SCR_P2_IOCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA4u)

/** \brief A5, Port Pn input/output control register m */
#define SCR_P2_IOCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA5u)

/** \brief A5, Port Pn pin function decision control register */
#define SCR_P2_PDISC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDISC*)0xA5u)

/** \brief A6, Port Pn input/output control register m */
#define SCR_P2_IOCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA6u)

/** \brief A7, Port Pn input/output control register m */
#define SCR_P2_IOCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA7u)

/** \brief A8, Port Pn output register */
#define SCR_P3_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OUT*)0xA8u)

/** \brief A8, Port Pn input/output control register m */
#define SCR_P3_IOCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA8u)

/** \brief A8, Port Pn pad driver mode 0 register */
#define SCR_P3_PDR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR0*)0xA8u)

/** \brief A9, Port Pn input register */
#define SCR_P3_IN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IN*)0xA9u)

/** \brief A9, Port Pn input/output control register m */
#define SCR_P3_IOCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xA9u)

/** \brief A9, Port Pn pad driver mode 2 register */
#define SCR_P3_PDR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR2*)0xA9u)

/** \brief AA, Port Pn output modification set register */
#define SCR_P3_OMSR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMSR*)0xAAu)

/** \brief AA, Port Pn input/output control register m */
#define SCR_P3_IOCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xAAu)

/** \brief AA, Port Pn pad driver mode 4 register */
#define SCR_P3_PDR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR4*)0xAAu)

/** \brief AB, Port Pn output modification clear register */
#define SCR_P3_OMCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMCR*)0xABu)

/** \brief AB, Port Pn input/output control register m */
#define SCR_P3_IOCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xABu)

/** \brief AB, Port Pn pad driver mode 6 register */
#define SCR_P3_PDR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR6*)0xABu)

/** \brief AC, Port Pn output modification toggle register */
#define SCR_P3_OMTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMTR*)0xACu)

/** \brief AC, Port Pn input/output control register m */
#define SCR_P3_IOCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xACu)

/** \brief AD, Port Pn input/output control register m */
#define SCR_P3_IOCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xADu)

/** \brief AD, Port Pn pin function decision control register */
#define SCR_P3_PDISC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDISC*)0xADu)

/** \brief AE, Port Pn input/output control register m */
#define SCR_P3_IOCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xAEu)

/** \brief AF, Port Pn input/output control register m */
#define SCR_P3_IOCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)0xAFu)

/** \brief B0, Wake-Up CAN configuration register */
#define SCR_WCAN_CFG /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CFG*)0xB0u)

/** \brief B0, Wake-Up CAN interrupt and event status register 0 */
#define SCR_WCAN_INTESTAT0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESTAT0*)0xB0u)

/** \brief B0, Message identifier control register 0 */
#define SCR_WCAN_ID0_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID0_CTRL*)0xB0u)

/** \brief B0, DATA control register 0 */
#define SCR_WCAN_DATA0_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB0u)

/** \brief B1, Wake-Up CAN interrupt mask register */
#define SCR_WCAN_INTMRSLT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTMRSLT*)0xB1u)

/** \brief B1, Wake-Up CAN interrupt and event status register 1 */
#define SCR_WCAN_INTESTAT1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESTAT1*)0xB1u)

/** \brief B1, Message identifier control register 1 */
#define SCR_WCAN_ID1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID1_CTRL*)0xB1u)

/** \brief B1, DATA control register 1 */
#define SCR_WCAN_DATA1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB1u)

/** \brief B2, CDR control register */
#define SCR_WCAN_CDR_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_CTRL*)0xB2u)

/** \brief B2, Wake-Up CAN error counter register */
#define SCR_WCAN_FRMERRCNT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_FRMERRCNT*)0xB2u)

/** \brief B2, Message identifier control register 2 */
#define SCR_WCAN_ID2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID2_CTRL*)0xB2u)

/** \brief B2, DATA control register 2 */
#define SCR_WCAN_DATA2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB2u)

/** \brief B3, CDR upper limit control register */
#define SCR_WCAN_CDR_UPPER_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_UPPER_CTRL*)0xB3u)

/** \brief B3, Wake-Up CAN interrupt and event status clear register 0 */
#define SCR_WCAN_INTESCLR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESCLR0*)0xB3u)

/** \brief B3, Message identifier control register 3 */
#define SCR_WCAN_ID3_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID3_CTRL*)0xB3u)

/** \brief B3, DATA control register 3 */
#define SCR_WCAN_DATA3_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB3u)

/** \brief B4, CDR lower limit control register */
#define SCR_WCAN_CDR_LOWER_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_LOWER_CTRL*)0xB4u)

/** \brief B4, Wake-Up CAN interrupt and event status clear register 1 */
#define SCR_WCAN_INTESCLR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESCLR1*)0xB4u)

/** \brief B4, Message identifier mask register 0 */
#define SCR_WCAN_MASK_ID0_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID0_CTRL*)0xB4u)

/** \brief B4, DATA control register 4 */
#define SCR_WCAN_DATA4_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB4u)

/** \brief B5, CDR measured high register */
#define SCR_WCAN_CDR_MEAS_HIGH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_MEAS_HIGH*)0xB5u)

/** \brief B5, Bit timing logic 1 control register */
#define SCR_WCAN_BTL1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_BTL1_CTRL*)0xB5u)

/** \brief B5, Message identifier mask register 1 */
#define SCR_WCAN_MASK_ID1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID1_CTRL*)0xB5u)

/** \brief B5, DATA control register 5 */
#define SCR_WCAN_DATA5_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB5u)

/** \brief B6, CDR measured low register */
#define SCR_WCAN_CDR_MEAS_LOW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_MEAS_LOW*)0xB6u)

/** \brief B6, Bit timing logic 2 control register */
#define SCR_WCAN_BTL2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_BTL2_CTRL*)0xB6u)

/** \brief B6, Message identifier mask register 2 */
#define SCR_WCAN_MASK_ID2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID2_CTRL*)0xB6u)

/** \brief B6, DATA control register 6 */
#define SCR_WCAN_DATA6_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB6u)

/** \brief B7, Wake-Up CAN FD control register */
#define SCR_WCAN_FD_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_FD_CTRL*)0xB7u)

/** \brief B7, Message data length code control register */
#define SCR_WCAN_DLC_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DLC_CTRL*)0xB7u)

/** \brief B7, Message identifier mask register 3 */
#define SCR_WCAN_MASK_ID3_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID3_CTRL*)0xB7u)

/** \brief B7, DATA control register 7 */
#define SCR_WCAN_DATA7_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DATA_CTRL*)0xB7u)

/** \brief B8, Page register for WCAN */
#define SCR_WCAN_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PAGE*)0xB8u)

/** \brief B9, Serial channel control register */
#define SCR_UART_SCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_SCON*)0xB9u)

/** \brief BA, Serial data buffer */
#define SCR_UART_SBUF /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_SBUF*)0xBAu)

/** \brief BB, Baudrate timer/reload register, low byte */
#define SCR_LIN_BGL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_LIN_BGL*)0xBBu)

/** \brief BC, Baudrate control register */
#define SCR_LIN_BCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_LIN_BCON*)0xBCu)

/** \brief BD, LIN status register */
#define SCR_LIN_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_LIN_STAT*)0xBDu)

/** \brief BE, Baudrate timer/reload register, high byte */
#define SCR_LIN_BGH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_LIN_BGH*)0xBEu)

/** \brief BF, Timer 2 instance 1 control register */
#define SCR_T2CCU1_T2_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_CON*)0xBFu)

/** \brief BF, T2CCU1 capture/compare enable register */
#define SCR_T2CCU1_CCEN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCEN*)0xBFu)

/** \brief BF, T2CCU1 compare shadow register */
#define SCR_T2CCU1_COSHDW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_COSHDW*)0xBFu)

/** \brief BF, T2CCU1 compare control register */
#define SCR_T2CCU1_COCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_COCON*)0xBFu)

/** \brief C0, Timer 2 instance 1 mode register */
#define SCR_T2CCU1_T2_MOD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_MOD*)0xC0u)

/** \brief C0, T2CCU1 capture/compare time base select register */
#define SCR_T2CCU1_CCTBSEL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTBSEL*)0xC0u)

/** \brief C0, T2CCU1 capture/compare register x low */
#define SCR_T2CCU1_CC020_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC02_CCXL*)0xC0u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC020_CCXL */
#define SCR_T2CCU1_CC0L (SCR_T2CCU1_CC020_CCXL)

/** \brief C0, T2CCU1 capture/compare register x low */
#define SCR_T2CCU1_CC353_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC35_CCXL*)0xC0u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC353_CCXL */
#define SCR_T2CCU1_CC3L (SCR_T2CCU1_CC353_CCXL)

/** \brief C1, Timer 2 instance 1 reload/capture register, low byte */
#define SCR_T2CCU1_T2_RC2L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_RC2L*)0xC1u)

/** \brief C1, T2CCU1 capture/compare timer reload register low */
#define SCR_T2CCU1_CCTRELL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTRELL*)0xC1u)

/** \brief C1, T2CCU1 capture/compare register x high */
#define SCR_T2CCU1_CC020_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC02_CCXH*)0xC1u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC020_CCXH */
#define SCR_T2CCU1_CC0H (SCR_T2CCU1_CC020_CCXH)

/** \brief C1, T2CCU1 capture/compare register x high */
#define SCR_T2CCU1_CC353_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC35_CCXH*)0xC1u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC353_CCXH */
#define SCR_T2CCU1_CC3H (SCR_T2CCU1_CC353_CCXH)

/** \brief C1, T2CCU1 capture/compare timer dead-time control register low */
#define SCR_T2CCU1_CCTDTCL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTDTCL*)0xC1u)

/** \brief C2, Timer 2 instance 1 reload/capture register, high byte */
#define SCR_T2CCU1_T2_RC2H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_RC2H*)0xC2u)

/** \brief C2, T2CCU1 capture/compare timer reload register high */
#define SCR_T2CCU1_CCTRELH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTRELH*)0xC2u)

/** \brief C2, T2CCU1 capture/compare register x low */
#define SCR_T2CCU1_CC021_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC02_CCXL*)0xC2u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC021_CCXL */
#define SCR_T2CCU1_CC1L (SCR_T2CCU1_CC021_CCXL)

/** \brief C2, T2CCU1 capture/compare register x low */
#define SCR_T2CCU1_CC354_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC35_CCXL*)0xC2u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC354_CCXL */
#define SCR_T2CCU1_CC4L (SCR_T2CCU1_CC354_CCXL)

/** \brief C2, T2CCU1 capture/compare timer dead-time control register high */
#define SCR_T2CCU1_CCTDTCH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTDTCH*)0xC2u)

/** \brief C3, Timer 2 instance 1, low byte */
#define SCR_T2CCU1_T2_T2L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_T2L*)0xC3u)

/** \brief C3, T2CCU1 capture/compare timer register low */
#define SCR_T2CCU1_CCTL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTL*)0xC3u)

/** \brief C3, T2CCU1 capture/compare register x high */
#define SCR_T2CCU1_CC021_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC02_CCXH*)0xC3u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC021_CCXH */
#define SCR_T2CCU1_CC1H (SCR_T2CCU1_CC021_CCXH)

/** \brief C3, T2CCU1 capture/compare register x high */
#define SCR_T2CCU1_CC354_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC35_CCXH*)0xC3u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC354_CCXH */
#define SCR_T2CCU1_CC4H (SCR_T2CCU1_CC354_CCXH)

/** \brief C4, Timer 2 instance 1, high byte */
#define SCR_T2CCU1_T2_T2H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_T2H*)0xC4u)

/** \brief C4, T2CCU1 capture/compare timer register high */
#define SCR_T2CCU1_CCTH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTH*)0xC4u)

/** \brief C4, T2CCU1 capture/compare register x low */
#define SCR_T2CCU1_CC022_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC02_CCXL*)0xC4u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC022_CCXL */
#define SCR_T2CCU1_CC2L (SCR_T2CCU1_CC022_CCXL)

/** \brief C4, T2CCU1 capture/compare register x low */
#define SCR_T2CCU1_CC355_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC35_CCXL*)0xC4u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC355_CCXL */
#define SCR_T2CCU1_CC5L (SCR_T2CCU1_CC355_CCXL)

/** \brief C5, Timer 2 instance 1 control register 1 */
#define SCR_T2CCU1_T2_CON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_T2_CON1*)0xC5u)

/** \brief C5, T2CCU1 capture/compare timer control register */
#define SCR_T2CCU1_CCTCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CCTCON*)0xC5u)

/** \brief C5, T2CCU1 capture/compare register x high */
#define SCR_T2CCU1_CC022_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC02_CCXH*)0xC5u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC022_CCXH */
#define SCR_T2CCU1_CC2H (SCR_T2CCU1_CC022_CCXH)

/** \brief C5, T2CCU1 capture/compare register x high */
#define SCR_T2CCU1_CC355_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU1_CC35_CCXH*)0xC5u)
/** Alias (User Manual Name) for SCR_T2CCU1_CC355_CCXH */
#define SCR_T2CCU1_CC5H (SCR_T2CCU1_CC355_CCXH)

/** \brief C6, Page register for T2CCU1 */
#define SCR_T2CCU1_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PAGE*)0xC6u)

/** \brief C7, ADCOMP control register */
#define SCR_ADCOMP_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ADCOMP_CON*)0xC7u)

/** \brief C8, ADCOMP result-low register */
#define SCR_ADCOMP_RESL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ADCOMP_RESL*)0xC8u)

/** \brief C9, ADCOMP result-high and status register */
#define SCR_ADCOMP_RESHSTAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ADCOMP_RESHSTAT*)0xC9u)

/** \brief CA, Timer 0/1 control register */
#define SCR_T01_TCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TCON*)0xCAu)

/** \brief CB, Timer mode register */
#define SCR_T01_TMOD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TMOD*)0xCBu)

/** \brief CC, Timer 0 low byte */
#define SCR_T01_TL0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TL0*)0xCCu)

/** \brief CD, Timer 1 low byte */
#define SCR_T01_TL1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TL1*)0xCDu)

/** \brief CE, Timer 0 high byte */
#define SCR_T01_TH0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TH0*)0xCEu)

/** \brief CF, Timer 1 high byte */
#define SCR_T01_TH1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TH1*)0xCFu)

/** \brief D0, Program status word register */
#define SCR_PSW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PSW*)0xD0u)

/** \brief D1, Interrupt enable register 1 */
#define SCR_IEN1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IEN1*)0xD1u)

/** \brief D2, Interrupt priority high register */
#define SCR_IPH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IPH*)0xD2u)

/** \brief D3, Interrupt priority 1 high register */
#define SCR_IPH1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IPH1*)0xD3u)

/** \brief D4, Stack pointer */
#define SCR_SP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SP*)0xD4u)

/** \brief D5, Data pointer low byte */
#define SCR_DPL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DPL*)0xD5u)

/** \brief D6, Data pointer high byte */
#define SCR_DPH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DPH*)0xD6u)

/** \brief D7, Extended operation register */
#define SCR_EO /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_EO*)0xD7u)

/** \brief D8, Interrupt enable register 0 */
#define SCR_IEN0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IEN0*)0xD8u)

/** \brief D9, Power control register */
#define SCR_PCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PCON*)0xD9u)

/** \brief DA, B register */
#define SCR_B /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_B*)0xDAu)

/** \brief DB, Interrupt priority register */
#define SCR_IP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IP*)0xDBu)

/** \brief DC, Interrupt priority 1 register */
#define SCR_IP1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IP1*)0xDCu)

/** \brief DD, Password register */
#define SCR_PASSWD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PASSWD*)0xDDu)

/** \brief DE, On-chip XRAM address higher order */
#define SCR_XADDRH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_XADDRH*)0xDEu)

/** \brief DF, System control register 0 */
#define SCR_SYSCON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SYSCON0*)0xDFu)

/** \brief E0, Accumulator */
#define SCR_ACC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ACC*)0xE0u)

/** \brief E1, Real-time clock control register */
#define SCR_RTC_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CON*)0xE1u)

/** \brief E2, Count clock register 0 */
#define SCR_RTC_CNT0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)0xE2u)

/** \brief E3, Count clock register 1 */
#define SCR_RTC_CNT1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)0xE3u)

/** \brief E4, Count clock register 2 */
#define SCR_RTC_CNT2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)0xE4u)

/** \brief E5, Count clock register 3 */
#define SCR_RTC_CNT3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)0xE5u)

/** \brief E6, Real-time clock compare/capture register 0 */
#define SCR_RTC_CR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)0xE6u)

/** \brief E7, Real-time clock compare/capture register 1 */
#define SCR_RTC_CR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)0xE7u)

/** \brief E8, Real-time clock compare/capture register 2 */
#define SCR_RTC_CR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)0xE8u)

/** \brief E9, Real-time clock compare/capture register 3 */
#define SCR_RTC_CR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)0xE9u)

/** \brief EA, Watchdog timer control register */
#define SCR_WDT_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_CON*)0xEAu)

/** \brief EB, Watchdog timer reload register */
#define SCR_WDT_REL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_REL*)0xEBu)

/** \brief EC, Watchdog window-boundary register */
#define SCR_WDT_WINB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_WINB*)0xECu)

/** \brief ED, Watchdog timer low byte */
#define SCR_WDT_L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_L*)0xEDu)

/** \brief EE, Watchdog timer high byte */
#define SCR_WDT_H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_H*)0xEEu)

/** \brief EF, Page register for SCU */
#define SCR_SCU_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PAGE*)0xEFu)

/** \brief F0, Reset control register */
#define SCR_SCU_RSTCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_RSTCON*)0xF0u)

/** \brief F0, SCR interrupt data exchange register */
#define SCR_SCU_SCRINTEXCHG /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_SCRINTEXCHG*)0xF0u)

/** \brief F0, Peripheral input select register 0 */
#define SCR_SCU_MODPISEL0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_MODPISEL0*)0xF0u)

/** \brief F0, SCR access to PMS_RTC_CON1.OFFSET[7:0] bits and update trigger for complete PMS_RTC_CON1.OFFSET */
#define SCR_SCU_PMSRTC_OFFSET7_0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_OFFSET7_0*)0xF0u)

/** \brief F0, SCR access to PMS_RTC_CMP1[7:0] bits and update trigger for complete PMS_RTC_CMP1 */
#define SCR_SCU_PMSRTC_CMP1_7_0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_CMP1_7_0*)0xF0u)

/** \brief F0, Control for PMS DTS */
#define SCR_SCU_PMSDTS_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSDTS_CON*)0xF0u)

/** \brief F1, SCR reset status register */
#define SCR_SCU_RSTSTAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_RSTSTAT*)0xF1u)

/** \brief F1, TriCore interrupt data exchange register */
#define SCR_SCU_TCINTEXCHG /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_TCINTEXCHG*)0xF1u)

/** \brief F1, Peripheral input select register 1 */
#define SCR_SCU_MODPISEL1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_MODPISEL1*)0xF1u)

/** \brief F1, SCR shadow register for PMS_RTC_CON1.OFFSET[15:8] bits */
#define SCR_SCU_PMSRTC_OFFSET15_8 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_OFFSET15_8*)0xF1u)

/** \brief F1, SCR shadow register for PMS_RTC_CMP1[15:8] bits */
#define SCR_SCU_PMSRTC_CMP1_15_8 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_CMP1_15_8*)0xF1u)

/** \brief F1, Die temperature sensor result register - lower 8-bits */
#define SCR_SCU_PMSDTS_RES7_0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSDTS_RES7_0*)0xF1u)

/** \brief F1, Module suspend control register */
#define SCR_SCU_DBG_MODSUSP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_DBG_MODSUSP*)0xF1u)

/** \brief F2, Main reset status register */
#define SCR_SCU_MRSTSTAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_MRSTSTAT*)0xF2u)

/** \brief F2, SCR access to PMS_RTC_TIM[39:32] bits */
#define SCR_SCU_PMSRTC_TIM39_32 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM39_32*)0xF2u)

/** \brief F2, SCR access to PMS_RTC_TIM[7:0] bits */
#define SCR_SCU_PMSRTC_TIM7_0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM7_0*)0xF2u)

/** \brief F2, SCR shadow register for PMS_RTC_CMP1[23:16] bits */
#define SCR_SCU_PMSRTC_CMP1_23_16 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_CMP1_23_16*)0xF2u)

/** \brief F2, Die temperature sensor result register - upper 4-bits */
#define SCR_SCU_PMSDTS_RES11_8 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSDTS_RES11_8*)0xF2u)

/** \brief F3, SCU status register */
#define SCR_SCU_STBY /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_STBY*)0xF3u)

/** \brief F3, Peripheral management control register 0 */
#define SCR_SCU_PMCON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMCON0*)0xF3u)

/** \brief F3, SCR access to PMS_RTC_TIM[47:40] bits */
#define SCR_SCU_PMSRTC_TIM47_40 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM47_40*)0xF3u)

/** \brief F3, SCR access to PMS_RTC_TIM[15:8] bits */
#define SCR_SCU_PMSRTC_TIM15_8 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM15_8*)0xF3u)

/** \brief F3, SCR shadow register for PMS_RTC_CMP1[31:24] bits */
#define SCR_SCU_PMSRTC_CMP1_31_24 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_CMP1_31_24*)0xF3u)

/** \brief F3, SCR access to PMS_HPOSCCON1.OSCFTRIM[7:0] bits and update trigger for complete PMS_HPOSCCON1.OSCFTRIM */
#define SCR_SCU_PMSHPOSC_FTRIM7_0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSHPOSC_FTRIM7_0*)0xF3u)

/** \brief F4, Clock control and status register */
#define SCR_SCU_CLK /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_CLK*)0xF4u)

/** \brief F4, Peripheral management control register 1 */
#define SCR_SCU_PMCON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMCON1*)0xF4u)

/** \brief F4, SCR access to PMS_RTC_TIM[55:48] bits */
#define SCR_SCU_PMSRTC_TIM55_48 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM55_48*)0xF4u)

/** \brief F4, SCR access to PMS_RTC_TIM[23:16] bits */
#define SCR_SCU_PMSRTC_TIM23_16 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM23_16*)0xF4u)

/** \brief F4, SCR access to PMS_RTC_CON2.MSIZE1 bits */
#define SCR_SCU_PMSRTC_MSIZE1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_MSIZE1*)0xF4u)

/** \brief F4, SCR shadow register for PMS_HPOSCCON1.OSCFTRIM[8:8] bits */
#define SCR_SCU_PMSHPOSC_FTRIM8_8 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSHPOSC_FTRIM8_8*)0xF4u)

/** \brief F5, Control register for system wake-up via SCR sources */
#define SCR_SCU_WKPCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_WKPCON*)0xF5u)

/** \brief F5, SCR access to PMS_RTC_TIM[63:56] bits */
#define SCR_SCU_PMSRTC_TIM63_56 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM63_56*)0xF5u)

/** \brief F5, SCR access to PMS_RTC_TIM[31:24] bits */
#define SCR_SCU_PMSRTC_TIM31_24 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_TIM31_24*)0xF5u)

/** \brief F5, SCR access to PMS_RTC_CON2.MSTART1 bits */
#define SCR_SCU_PMSRTC_MSTART1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSRTC_MSTART1*)0xF5u)

/** \brief F5, Trimming register for PMS High Precision BandGap (HPBG) */
#define SCR_SCU_PMSHPBG_BGTRIM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMSHPBG_BGTRIM*)0xF5u)

/** \brief F6, Page register for SFRs */
#define SCR_IR_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PAGE*)0xF6u)

/** \brief F7, Interrupt request register 0 */
#define SCR_IR_CON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_CON0*)0xF7u)

/** \brief F7, NMI control register */
#define SCR_IR_NMICON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_NMICON*)0xF7u)

/** \brief F7, External interrupt control register 0 */
#define SCR_IR_EXICON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_EXICON0*)0xF7u)

/** \brief F7, External interrupt control register 3 */
#define SCR_IR_EXICON3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_EXICON3*)0xF7u)

/** \brief F7, External interrupt input select register 0 */
#define SCR_IR_PISEL0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_PISEL0*)0xF7u)

/** \brief F7, External interrupt input select register 3 */
#define SCR_IR_PISEL3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_PISEL3*)0xF7u)

/** \brief F8, Interrupt request register 1 */
#define SCR_IR_CON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_CON1*)0xF8u)

/** \brief F8, NMI status register */
#define SCR_IR_NMISTAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_NMISTAT*)0xF8u)

/** \brief F8, External interrupt control register 1 */
#define SCR_IR_EXICON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_EXICON1*)0xF8u)

/** \brief F8, External interrupt input select register 1 */
#define SCR_IR_PISEL1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_PISEL1*)0xF8u)

/** \brief F9, Interrupt request register 2 */
#define SCR_IR_CON2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_CON2*)0xF9u)

/** \brief F9, Peripheral interrupt enable register */
#define SCR_IR_MODIEN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_MODIEN*)0xF9u)

/** \brief F9, External interrupt control register 2 */
#define SCR_IR_EXICON2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_EXICON2*)0xF9u)

/** \brief F9, External interrupt input select register 2 */
#define SCR_IR_PISEL2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IR_PISEL2*)0xF9u)

/** \brief FA, I2C control register */
#define SCR_I2C_CNTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_CNTR*)0xFAu)

/** \brief FB, Data register */
#define SCR_I2C_DATA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_DATA*)0xFBu)

/** \brief FC, Status register */
#define SCR_I2C_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_STAT*)0xFCu)

/** \brief FC, Baud rate control register [write mode] */
#define SCR_I2C_BRCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_BRCR*)0xFCu)

/** \brief FD, Software reset register */
#define SCR_I2C_SRST /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_SRST*)0xFDu)

/** \brief FE, Slave address register */
#define SCR_I2C_ADDR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_ADDR*)0xFEu)

/** \brief FF, Extended slave address register */
#define SCR_I2C_ADDRX /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_I2C_ADDRX*)0xFFu)


/** \}  */

/******************************************************************************/

/******************************************************************************/

#endif /* IFXSCR_REG_H */
