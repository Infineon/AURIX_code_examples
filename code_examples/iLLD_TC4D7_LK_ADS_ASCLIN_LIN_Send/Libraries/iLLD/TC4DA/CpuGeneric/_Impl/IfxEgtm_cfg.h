/**
 * \file IfxEgtm_cfg.h
 * \brief EGTM on-chip implementation data
 * \ingroup IfxLld_Egtm
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Egtm EGTM
 * \ingroup IfxLld
 * \defgroup IfxLld_Egtm_Impl Implementation
 * \ingroup IfxLld_Egtm
 * \defgroup IfxLld_Egtm_Std Standard Driver
 * \ingroup IfxLld_Egtm
 * \defgroup IfxLld_Egtm_Atom Atom Interface Drivers
 * \ingroup IfxLld_Egtm
 * \defgroup IfxLld_Egtm_Tom Tom Interface Drivers
 * \ingroup IfxLld_Egtm
 * \defgroup IfxLld_Egtm_Tim Tim Interface Drivers
 * \ingroup IfxLld_Egtm
 * \defgroup IfxLld_Egtm_Impl_Enumerations Enumerations
 * \ingroup IfxLld_Egtm_Impl
 * \defgroup IfxLld_Egtm_Impl_Data_Structures Data Structures
 * \ingroup IfxLld_Egtm_Impl
 * \defgroup IfxLld_Egtm_Impl_Default Union
 * \ingroup IfxLld_Egtm_Impl
 */

#ifndef IFXEGTM_CFG_H
#define IFXEGTM_CFG_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Cpu/Std/Ifx_Types.h"
#include "Ifx_Cfg.h"
#include "IfxEgtm_reg.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Number of TIM (Timer Input Module) Objects
 */
#define IFXEGTM_NUM_TIM_OBJECTS          (3)

/** \brief Number of TOM (Timer Output Module) Objects
 */
#define IFXEGTM_NUM_TOM_OBJECTS          (3)

/** \brief Number of ATOM (ARU-connected Timer Output Module) Objects
 */
#define IFXEGTM_NUM_ATOM_OBJECTS         (3)

/** \brief Number of Cluster Configuration Modules
 */
#define IFXEGTM_NUM_CCM_OBJECTS          (3)

/** \brief Number of Sensor Pattern Evaluation Modules
 */
#define IFXEGTM_NUM_SPE_OBJECTS          (3)

/** \brief Number of Modules
 */
#define IFXEGTM_NUM_MODULES              (1)

/** \brief Number of ATOM (ARU-connected Timer Output Module) Channels
 */
#define IFXEGTM_NUM_ATOM_CHANNELS        (8)

/** \brief Number of TOM (Timer Output Module) Channels
 */
#define IFXEGTM_NUM_TOM_CHANNELS         (16)

/** \brief Number of TIM (Timer Input Module) Channels
 */
#define IFXEGTM_NUM_TIM_CHANNELS         (8)

/** \brief Number of DTM (Dead Time Module) Channels
 */
#define IFXEGTM_NUM_DTM_CHANNELS         (4)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK0
 */
#define IFXEGTM_CMU_CLKEN_CLK0           (0x00000002)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK1
 */
#define IFXEGTM_CMU_CLKEN_CLK1           (0x00000008)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK2
 */
#define IFXEGTM_CMU_CLKEN_CLK2           (0x00000020)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK3
 */
#define IFXEGTM_CMU_CLKEN_CLK3           (0x00000080)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK4
 */
#define IFXEGTM_CMU_CLKEN_CLK4           (0x00000200)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK5
 */
#define IFXEGTM_CMU_CLKEN_CLK5           (0x00000800)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK6
 */
#define IFXEGTM_CMU_CLKEN_CLK6           (0x00002000)

/** \brief Mask for CMU_CLK_EN register (Enable): CLK7
 */
#define IFXEGTM_CMU_CLKEN_CLK7           (0x00008000)

/** \brief Mask for CMU_CLK_EN register (Enable): ECLK0
 */
#define IFXEGTM_CMU_CLKEN_ECLK0          (0x00020000)

/** \brief Mask for CMU_CLK_EN register (Enable): ECLK1
 */
#define IFXEGTM_CMU_CLKEN_ECLK1          (0x00080000)

/** \brief Mask for CMU_CLK_EN register (Enable): ECLK2
 */
#define IFXEGTM_CMU_CLKEN_ECLK2          (0x00200000)

/** \brief Mask for CMU_CLK_EN register (Enable): FXCLK
 */
#define IFXEGTM_CMU_CLKEN_FXCLK          (0x00800000)

/** \brief Mask for CMU_CLK_EN register (Enable): ALL clocks
 */
#define IFXEGTM_CMU_CLKEN_ALL            (0x00AAAAAA)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK0
 */
#define IFXEGTM_CMU_CLKDIS_CLK0          (0x00000001)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK1
 */
#define IFXEGTM_CMU_CLKDIS_CLK1          (0x00000004)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK2
 */
#define IFXEGTM_CMU_CLKDIS_CLK2          (0x00000010)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK3
 */
#define IFXEGTM_CMU_CLKDIS_CLK3          (0x00000040)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK4
 */
#define IFXEGTM_CMU_CLKDIS_CLK4          (0x00000100)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK5
 */
#define IFXEGTM_CMU_CLKDIS_CLK5          (0x00000400)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK6
 */
#define IFXEGTM_CMU_CLKDIS_CLK6          (0x00001000)

/** \brief Mask for CMU_CLK_EN register (Disable): CLK7
 */
#define IFXEGTM_CMU_CLKDIS_CLK7          (0x00004000)

/** \brief Mask for CMU_CLK_EN register (Disable): ECLK0
 */
#define IFXEGTM_CMU_CLKDIS_ECLK0         (0x00010000)

/** \brief Mask for CMU_CLK_EN register (Disable): ECLK1
 */
#define IFXEGTM_CMU_CLKDIS_ECLK1         (0x00040000)

/** \brief Mask for CMU_CLK_EN register (Disable): ECLK2
 */
#define IFXEGTM_CMU_CLKDIS_ECLK2         (0x00100000)

/** \brief Mask for CMU_CLK_EN register (Disable): FXCLK
 */
#define IFXEGTM_CMU_CLKDIS_FXCLK         (0x00400000)

/** \brief Mask for CMU_CLK_EN register (Disable): ALL clocks
 */
#define IFXEGTM_CMU_CLKDIS_ALL           (0x00555555)

/** \brief Number of Cluster Dead Time Modules
 */
#define IFXEGTM_NUM_CDTM_OBJECTS         (3)

/** \brief Number of Dead Time Modules in each cluster
 */
#define IFXEGTM_NUM_DTM_PER_CDTM_OBJECTS (6)

/** \brief FIFO RAM size is 1024 * 29 bit words.
 */
#define IFXEGTM_PSM_FIFORAMSIZE          (1024u)

/** \brief FIFO word width is 29 bits.
 */
#define IFXEGTM_PSM_FIFOWORDWIDTH        (29u)

/** \brief Macro to create a unique entry in trigger table
 */
#define IFXEGTM_CFG_GETTRIGENTRY(cluster, source, channel)       ((uint16)cluster << 12 | (uint16)source << 8 | (uint16)channel)

/** \brief Number of MSC Alt inputs
 */
#define IFXEGTM_CFG_NUMMSCALTINPUT       (4)

/** \brief Macro to create a unique entry in input table
 */
#define IFXEGTM_CFG_GETINPUTENTRY(cluster, channel, source, sel) ((uint32)cluster << 24 | (uint32)channel << 16 | (uint32)source << 8 | (uint32)sel)

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \brief Enum for ATOM objects
 */
typedef enum
{
    IfxEgtm_Atom_0 = 0,  /**< \brief ATOM object 0 */
    IfxEgtm_Atom_1 = 1,  /**< \brief ATOM object 1 */
    IfxEgtm_Atom_2 = 2   /**< \brief ATOM object 2 */
} IfxEgtm_Atom;

/** \brief Enum for ATOM channels
 */
typedef enum
{
    IfxEgtm_Atom_Ch_0 = 0,  /**< \brief ATOM channel 0 */
    IfxEgtm_Atom_Ch_1 = 1,  /**< \brief ATOM channel 1 */
    IfxEgtm_Atom_Ch_2 = 2,  /**< \brief ATOM channel 2 */
    IfxEgtm_Atom_Ch_3 = 3,  /**< \brief ATOM channel 3 */
    IfxEgtm_Atom_Ch_4 = 4,  /**< \brief ATOM channel 4 */
    IfxEgtm_Atom_Ch_5 = 5,  /**< \brief ATOM channel 5 */
    IfxEgtm_Atom_Ch_6 = 6,  /**< \brief ATOM channel 6 */
    IfxEgtm_Atom_Ch_7 = 7   /**< \brief ATOM channel 7 */
} IfxEgtm_Atom_Ch;

/** \brief Enum for CLUSTER objects
 */
typedef enum
{
    IfxEgtm_Cluster_0 = 0,  /**< \brief CLUSTER object 0 */
    IfxEgtm_Cluster_1 = 1,  /**< \brief CLUSTER object 1 */
    IfxEgtm_Cluster_2 = 2   /**< \brief CLUSTER object 2 */
} IfxEgtm_Cluster;

/** \brief Enum for DTM channels
 */
typedef enum
{
    IfxEgtm_Dtm_Ch_0 = 0,  /**< \brief DTM channel 0 */
    IfxEgtm_Dtm_Ch_1 = 1,  /**< \brief DTM channel 1 */
    IfxEgtm_Dtm_Ch_2 = 2,  /**< \brief DTM channel 2 */
    IfxEgtm_Dtm_Ch_3 = 3   /**< \brief DTM channel 3 */
} IfxEgtm_Dtm_Ch;

/** \brief Enum for SPE objects
 */
typedef enum
{
    IfxEgtm_Spe_0 = 0,  /**< \brief SPE object 0 */
    IfxEgtm_Spe_1 = 1,  /**< \brief SPE object 1 */
    IfxEgtm_Spe_2 = 2   /**< \brief SPE object 2 */
} IfxEgtm_Spe;

/** \brief Enum for TIM objects
 */
typedef enum
{
    IfxEgtm_Tim_0 = 0,  /**< \brief TIM object 0 */
    IfxEgtm_Tim_1 = 1,  /**< \brief TIM object 1 */
    IfxEgtm_Tim_2 = 2   /**< \brief TIM object 2 */
} IfxEgtm_Tim;

/** \brief Enum for TIM channels
 */
typedef enum
{
    IfxEgtm_Tim_Ch_0 = 0,  /**< \brief TIM channel 0 */
    IfxEgtm_Tim_Ch_1 = 1,  /**< \brief TIM channel 1 */
    IfxEgtm_Tim_Ch_2 = 2,  /**< \brief TIM channel 2 */
    IfxEgtm_Tim_Ch_3 = 3,  /**< \brief TIM channel 3 */
    IfxEgtm_Tim_Ch_4 = 4,  /**< \brief TIM channel 4 */
    IfxEgtm_Tim_Ch_5 = 5,  /**< \brief TIM channel 5 */
    IfxEgtm_Tim_Ch_6 = 6,  /**< \brief TIM channel 6 */
    IfxEgtm_Tim_Ch_7 = 7   /**< \brief TIM channel 7 */
} IfxEgtm_Tim_Ch;

/** \brief Enum for TOM objects
 */
typedef enum
{
    IfxEgtm_Tom_0 = 0,  /**< \brief TOM object 0 */
    IfxEgtm_Tom_1 = 1,  /**< \brief TOM object 1 */
    IfxEgtm_Tom_2 = 2   /**< \brief TOM object 2 */
} IfxEgtm_Tom;

/** \brief Enum for TOM channels
 */
typedef enum
{
    IfxEgtm_Tom_Ch_0  = 0,   /**< \brief TOM channel 0 */
    IfxEgtm_Tom_Ch_1  = 1,   /**< \brief TOM channel 1 */
    IfxEgtm_Tom_Ch_2  = 2,   /**< \brief TOM channel 2 */
    IfxEgtm_Tom_Ch_3  = 3,   /**< \brief TOM channel 3 */
    IfxEgtm_Tom_Ch_4  = 4,   /**< \brief TOM channel 4 */
    IfxEgtm_Tom_Ch_5  = 5,   /**< \brief TOM channel 5 */
    IfxEgtm_Tom_Ch_6  = 6,   /**< \brief TOM channel 6 */
    IfxEgtm_Tom_Ch_7  = 7,   /**< \brief TOM channel 7 */
    IfxEgtm_Tom_Ch_8  = 8,   /**< \brief TOM channel 8 */
    IfxEgtm_Tom_Ch_9  = 9,   /**< \brief TOM channel 9 */
    IfxEgtm_Tom_Ch_10 = 10,  /**< \brief TOM channel 10 */
    IfxEgtm_Tom_Ch_11 = 11,  /**< \brief TOM channel 11 */
    IfxEgtm_Tom_Ch_12 = 12,  /**< \brief TOM channel 12 */
    IfxEgtm_Tom_Ch_13 = 13,  /**< \brief TOM channel 13 */
    IfxEgtm_Tom_Ch_14 = 14,  /**< \brief TOM channel 14 */
    IfxEgtm_Tom_Ch_15 = 15   /**< \brief TOM channel 15 */
} IfxEgtm_Tom_Ch;

/** \addtogroup IfxLld_Egtm_Impl_Enumerations
 * \{ */
/** \brief Enum for CDTM objects
 */
typedef enum
{
    IfxEgtm_Cdtm_none = -1, /**< \brief No DTM object */
    IfxEgtm_Cdtm_0,         /**< \brief DTM object 0  */
    IfxEgtm_Cdtm_1,         /**< \brief DTM object 1  */
    IfxEgtm_Cdtm_2          /**< \brief DTM object 2  */
} IfxEgtm_Cdtm;

/** \brief Enum for Dpll subincrements
 */
typedef enum
{
    IfxEgtm_Dpll_SubInc_1 = 0,      /**< \brief subincrement1  */
    IfxEgtm_Dpll_SubInc_2           /**< \brief subincrement2  */
} IfxEgtm_Dpll_SubInc;

/** \brief Enum for DTM objects
 */
typedef enum
{
    IfxEgtm_Dtm_none = -1, /**< \brief No DTM object */
    IfxEgtm_Dtm_0,         /**< \brief DTM object 0  */
    IfxEgtm_Dtm_1,         /**< \brief DTM object 1  */
    IfxEgtm_Dtm_2,         /**< \brief DTM object 2  */
    IfxEgtm_Dtm_3,         /**< \brief DTM object 3  */
    IfxEgtm_Dtm_4,         /**< \brief DTM object 4  */
    IfxEgtm_Dtm_5          /**< \brief DTM object 5  */
} IfxEgtm_Dtm;

/** \brief Enum Enable disable feature control
 */
typedef enum
{
    IfxEgtm_FeatureControl_disabled = 0,  /**< \brief disabled */
    IfxEgtm_FeatureControl_disable  = 1,  /**< \brief disable */
    IfxEgtm_FeatureControl_enable   = 2,  /**< \brief enable */
    IfxEgtm_FeatureControl_enabled  = 3   /**< \brief enabled */
} IfxEgtm_FeatureControl;

/** \brief Specifies the TIM inputs to the SPE submodule instances.
 * Two possible input sources are present per SPE for CHx,y,z
 * Choose the appropriate input source as per the used SPE.
 *
 * sed to set: EGTM.SPE.CTRL_STAT.TIM_SEL
 */
typedef enum
{
    IfxEgtm_Spe_TimInput_spe0Tim0Ch0to2 = 0,   /**< \brief SPE0: select TIM 0 Channel 0-2 */
    IfxEgtm_Spe_TimInput_spe0Tim1Ch0to2 = 1,   /**< \brief SPE0: Select TIM 1 Channel 0 to 2 */
    IfxEgtm_Spe_TimInput_spe1Tim0Ch3to5 = 2,   /**< \brief SPE1: select TIM 0 Channel 3 to 5 */
    IfxEgtm_Spe_TimInput_spe1Tim1Ch3to5 = 3,   /**< \brief SPE1: Select TIM 1 Channel 3 to 5 */
    IfxEgtm_Spe_TimInput_spe2Tim2Ch0to2 = 4,   /**< \brief SPE2: Select TIM 2 Channel 0 to 2 */
    IfxEgtm_Spe_TimInput_spe2Tim3Ch0to2 = 5,   /**< \brief SPE2: Select TIM 3 Channel 0 to 2 */
    IfxEgtm_Spe_TimInput_spe3Tim2Ch3to5 = 6,   /**< \brief SPE3: Select TIM 2 Channel 3 to 5 */
    IfxEgtm_Spe_TimInput_spe3Tim3Ch3to5 = 7,   /**< \brief SPE3: Select TIM 3 Channel 3 to 5 */
    IfxEgtm_Spe_TimInput_spe4Tim4Ch0to2 = 8,   /**< \brief SPE4: Select TIM 4 channel 0 to 2 */
    IfxEgtm_Spe_TimInput_spe4Tim5Ch0to2 = 9,   /**< \brief SPE4: Select TIM 5 Channel 0 to 2 */
    IfxEgtm_Spe_TimInput_spe5Tim4Ch3to5 = 10,  /**< \brief SPE5: Select TIM 4 Channel 3 to 5 */
    IfxEgtm_Spe_TimInput_spe5Tim5Ch3to5 = 11   /**< \brief SPE5: Select TIM 5 Channel 3 to 5 */
} IfxEgtm_Spe_TimInput;

/** \brief selects the source of trigger to control command output from SPE.
 */
typedef enum
{
    IfxEgtm_Spe_TriggerSource_speNipd    = 0,  /**< \brief select NIPD as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh0Ccu0 = 1,  /**< \brief select TOM channl 0 CCU0 as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh0Ccu1 = 2,  /**< \brief select TOM channl 0 CCU1 as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh2Ccu1 = 3,  /**< \brief select TOM channl 2 CCU1 as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh6Ccu1 = 4,  /**< \brief select TOM channl 6 CCU1 as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh7Ccu1 = 5,  /**< \brief select TOM channl 7 CCU1 as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh8Ccu1 = 6,  /**< \brief select TOM channl 8 CCU1 as trigger */
    IfxEgtm_Spe_TriggerSource_tomCh9Ccu1 = 7   /**< \brief select TOM channl 9 CCU1 as trigger */
} IfxEgtm_Spe_TriggerSource;

/** \brief Enum for TOM global channel control units
 */
typedef enum
{
    IfxEgtm_Tom_Tgc_0,     /**< \brief TOM global channel control unit0  */
    IfxEgtm_Tom_Tgc_1      /**< \brief TOM global channel control unit1  */
} IfxEgtm_Tom_Tgc;

/** \brief Specifies trigger channels present in trigger source
 */
typedef enum
{
    IfxEgtm_TrigChannel_0 = 0,
    IfxEgtm_TrigChannel_1,
    IfxEgtm_TrigChannel_2,
    IfxEgtm_TrigChannel_3,
    IfxEgtm_TrigChannel_4,
    IfxEgtm_TrigChannel_5,
    IfxEgtm_TrigChannel_6,
    IfxEgtm_TrigChannel_7,
    IfxEgtm_TrigChannel_8,
    IfxEgtm_TrigChannel_9,
    IfxEgtm_TrigChannel_10,
    IfxEgtm_TrigChannel_11,
    IfxEgtm_TrigChannel_12,
    IfxEgtm_TrigChannel_13,
    IfxEgtm_TrigChannel_14,
    IfxEgtm_TrigChannel_15
} IfxEgtm_TrigChannel;

/** \brief Specifies trigger sources present in egtm
 */
typedef enum
{
    IfxEgtm_TrigSource_atom = 0,  /**< \brief Atom is selected as egtm trigger source */
    IfxEgtm_TrigSource_tom  = 1   /**< \brief Tom is selected as egtm trigger source */
} IfxEgtm_TrigSource;

/** \} */

/** \brief Enum for DTM AUX Inputs
 * Each of the CDTMn_DTMx modules of the GTM-IP has two external auxiliary signal inputs
 */
typedef enum
{
    IfxEgtm_DtmAuxInput_0,  /**< \brief DTMAUX_IN0 */
    IfxEgtm_DtmAuxInput_1   /**< \brief DTMAUX_IN1 */
} IfxEgtm_DtmAuxInput;

/** \brief Enum for HRPWM objects
 */
typedef enum
{
    IfxEgtm_Hrpwm_none = -1,  /**< \brief Not Selected */
    IfxEgtm_Hrpwm_0,          /**< \brief HRPWM object 0 */
    IfxEgtm_Hrpwm_1,          /**< \brief HRPWM object 1 */
    IfxEgtm_Hrpwm_2           /**< \brief HRPWM object 2 */
} IfxEgtm_Hrpwm;

/** \brief Enum for HRPWM channels
 */
typedef enum
{
    IfxEgtm_Hrpwm_Ch_none = -1,  /**< \brief Not Selected */
    IfxEgtm_Hrpwm_Ch_0,          /**< \brief HRPWM channel 0 */
    IfxEgtm_Hrpwm_Ch_1,          /**< \brief HRPWM channel 1 */
    IfxEgtm_Hrpwm_Ch_2,          /**< \brief HRPWM channel 2 */
    IfxEgtm_Hrpwm_Ch_3,          /**< \brief HRPWM channel 3 */
    IfxEgtm_Hrpwm_Ch_4,          /**< \brief HRPWM channel 4 */
    IfxEgtm_Hrpwm_Ch_5,          /**< \brief HRPWM channel 5 */
    IfxEgtm_Hrpwm_Ch_6,          /**< \brief HRPWM channel 6 */
    IfxEgtm_Hrpwm_Ch_7           /**< \brief HRPWM channel 7 */
} IfxEgtm_Hrpwm_Ch;

/** \brief Enumeration listing the F2A objects
 */
typedef enum
{
    IfxEgtm_Psm_F2a_0,   /**< \brief PSM F2a 0  */
    IfxEgtm_Psm_F2a_1,   /**< \brief PSM F2a 1  */
    IfxEgtm_Psm_F2a_2    /**< \brief PSM F2a 2 */
} IfxEgtm_Psm_F2a;

/** \brief Enumeration listing the Fifo Channels.
 */
typedef enum
{
    IfxEgtm_Psm_Fifo_0,   /**< \brief PSM Fifo 0  */
    IfxEgtm_Psm_Fifo_1,   /**< \brief PSM Fifo 1  */
    IfxEgtm_Psm_Fifo_2    /**< \brief PSM Fifo 2 */
} IfxEgtm_Psm_Fifo;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Egtm_Impl_Data_Structures
 * \{ */
/** \brief Structure for EGTM trigger information
 */
typedef struct
{
    uint16 channel : 8;      /**< \brief [7:0] channel within the egtmsource */
    uint16 source : 4;       /**< \brief [11:8]Trigger source selected (Atom or Tom) */
    uint16 cluster : 4;      /**< \brief [15:12]cluster of EGTM which contains the trigger source */
} IfxEgtm_Cfg_TriggerEntryBits;

/** \} */

/** \brief EGTM trigger selection
 */
typedef union
{
    uint16                       U;
    IfxEgtm_Cfg_TriggerEntryBits B;
} IfxEgtm_Cfg_TriggerEntry;

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/

/** \brief Table containing the address and index of SPE Objects.
 */
IFX_EXTERN IFX_CONST IfxModule_IndexMap IfxEgtm_spe_indexMap[IFXEGTM_NUM_SPE_OBJECTS];

/******************************************************************************/
/*--------------------------------EGTM TABLES---------------------------------*/
/******************************************************************************/

/******************************************************************************/
/*----------------------------------For ADC-----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_ADCSEL0to3_NUMVALUES  (24)

#define IFXEGTM_CFG_ADCSEL4to7_NUMVALUES  (24)

#define IFXEGTM_CFG_ADCSEL8to11_NUMVALUES (24)

#define IFXEGTM_CFG_NUMADCTRIGGERSIGNALS  (12)

typedef enum
{
    IfxEgtm_Cfg_AdcTriggerSignal_0,
    IfxEgtm_Cfg_AdcTriggerSignal_1,
    IfxEgtm_Cfg_AdcTriggerSignal_2,
    IfxEgtm_Cfg_AdcTriggerSignal_3,
    IfxEgtm_Cfg_AdcTriggerSignal_4,
    IfxEgtm_Cfg_AdcTriggerSignal_5,
    IfxEgtm_Cfg_AdcTriggerSignal_6,
    IfxEgtm_Cfg_AdcTriggerSignal_7,
    IfxEgtm_Cfg_AdcTriggerSignal_8,
    IfxEgtm_Cfg_AdcTriggerSignal_9,
    IfxEgtm_Cfg_AdcTriggerSignal_10,
    IfxEgtm_Cfg_AdcTriggerSignal_11
} IfxEgtm_Cfg_AdcTriggerSignal;

IFX_EXTERN uint16  IfxEgtm_Cfg_AdcTriggerSel0to3[IFXEGTM_CFG_ADCSEL0to3_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_AdcTriggerSel4to7[IFXEGTM_CFG_ADCSEL4to7_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_AdcTriggerSel8to11[IFXEGTM_CFG_ADCSEL8to11_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_AdcTriggerTable[IFXEGTM_CFG_NUMADCTRIGGERSIGNALS];

/******************************************************************************/
/*----------------------------------For SENT----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_SENTSEL0_NUMVALUES    (24)

#define IFXEGTM_CFG_SENTSEL1_NUMVALUES    (24)

#define IFXEGTM_CFG_SENTSEL2_NUMVALUES    (24)

#define IFXEGTM_CFG_NUMSENTTRIGGERSIGNALS (3)

typedef enum
{
    IfxEgtm_Cfg_SentTriggerSignal_0,
    IfxEgtm_Cfg_SentTriggerSignal_1,
    IfxEgtm_Cfg_SentTriggerSignal_2
} IfxEgtm_Cfg_SentTriggerSignal;

typedef enum
{
    IfxEgtm_Cfg_SentTriggerModules_0,
    IfxEgtm_Cfg_SentTriggerModules_1
} IfxEgtm_Cfg_SentTriggerModules;

IFX_EXTERN uint16  IfxEgtm_Cfg_SentTriggerSel0[IFXEGTM_CFG_SENTSEL0_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_SentTriggerSel1[IFXEGTM_CFG_SENTSEL1_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_SentTriggerSel2[IFXEGTM_CFG_SENTSEL2_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_SentTriggerTable[IFXEGTM_CFG_NUMSENTTRIGGERSIGNALS];

/******************************************************************************/
/*----------------------------------For PSI5----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_PSI5SEL0to5_NUMVALUES (12)

#define IFXEGTM_CFG_NUMPSI5TRIGGERSIGNALS (6)

typedef enum
{
    IfxEgtm_Cfg_Psi5TriggerSignal_0,
    IfxEgtm_Cfg_Psi5TriggerSignal_1,
    IfxEgtm_Cfg_Psi5TriggerSignal_2,
    IfxEgtm_Cfg_Psi5TriggerSignal_3,
    IfxEgtm_Cfg_Psi5TriggerSignal_4,
    IfxEgtm_Cfg_Psi5TriggerSignal_5
} IfxEgtm_Cfg_Psi5TriggerSignal;

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5TriggerSel0to5[IFXEGTM_CFG_PSI5SEL0to5_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_Psi5TriggerTable[IFXEGTM_CFG_NUMPSI5TRIGGERSIGNALS];

/******************************************************************************/
/*---------------------------------For PSI5S----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_PSI5SSEL0_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL1_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL2_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL3_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL4_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL5_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL6_NUMVALUES    (6)

#define IFXEGTM_CFG_PSI5SSEL7_NUMVALUES    (6)

#define IFXEGTM_CFG_NUMPSI5STRIGGERSIGNALS (8)

typedef enum
{
    IfxEgtm_Cfg_Psi5sTriggerSignal_0,
    IfxEgtm_Cfg_Psi5sTriggerSignal_1,
    IfxEgtm_Cfg_Psi5sTriggerSignal_2,
    IfxEgtm_Cfg_Psi5sTriggerSignal_3,
    IfxEgtm_Cfg_Psi5sTriggerSignal_4,
    IfxEgtm_Cfg_Psi5sTriggerSignal_5,
    IfxEgtm_Cfg_Psi5sTriggerSignal_6,
    IfxEgtm_Cfg_Psi5sTriggerSignal_7
} IfxEgtm_Cfg_Psi5sTriggerSignal;

typedef enum
{
    IfxEgtm_Cfg_Psi5sTriggerModules_0,
    IfxEgtm_Cfg_Psi5sTriggerModules_1
} IfxEgtm_Cfg_Psi5sTriggerModules;

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel0[IFXEGTM_CFG_PSI5SSEL0_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel1[IFXEGTM_CFG_PSI5SSEL1_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel2[IFXEGTM_CFG_PSI5SSEL2_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel3[IFXEGTM_CFG_PSI5SSEL3_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel4[IFXEGTM_CFG_PSI5SSEL4_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel5[IFXEGTM_CFG_PSI5SSEL5_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel6[IFXEGTM_CFG_PSI5SSEL6_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Psi5sTriggerSel7[IFXEGTM_CFG_PSI5SSEL7_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_Psi5sTriggerTable[IFXEGTM_CFG_NUMPSI5STRIGGERSIGNALS];

/******************************************************************************/
/*----------------------------------For QSPI----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_QSPI0TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI1TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI2TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI3TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI4TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI5TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI6TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_QSPI7TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_NUMQSPITRIGGERSIGNALS  (8)

typedef enum
{
    IfxEgtm_Cfg_QspiTriggerSignal_0,
    IfxEgtm_Cfg_QspiTriggerSignal_1,
    IfxEgtm_Cfg_QspiTriggerSignal_2,
    IfxEgtm_Cfg_QspiTriggerSignal_3,
    IfxEgtm_Cfg_QspiTriggerSignal_4,
    IfxEgtm_Cfg_QspiTriggerSignal_5,
    IfxEgtm_Cfg_QspiTriggerSignal_6,
    IfxEgtm_Cfg_QspiTriggerSignal_7
} IfxEgtm_Cfg_QspiTriggerSignal;

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi0Trigger[IFXEGTM_CFG_QSPI0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi1Trigger[IFXEGTM_CFG_QSPI1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi2Trigger[IFXEGTM_CFG_QSPI2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi3Trigger[IFXEGTM_CFG_QSPI3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi4Trigger[IFXEGTM_CFG_QSPI4TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi5Trigger[IFXEGTM_CFG_QSPI5TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi6Trigger[IFXEGTM_CFG_QSPI6TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Qspi7Trigger[IFXEGTM_CFG_QSPI7TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_QspiTriggerTable[IFXEGTM_CFG_NUMQSPITRIGGERSIGNALS];

/******************************************************************************/
/*---------------------------------For ASCLIN---------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_ASCLIN0TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN1TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN2TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN3TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN4TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN5TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN6TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN7TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN8TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN9TRIGGER_NUMVALUES  (12)

#define IFXEGTM_CFG_ASCLIN10TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN11TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN12TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN13TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN14TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN15TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN16TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN17TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN18TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN19TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN20TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN21TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN22TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN23TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN24TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN25TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN26TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_ASCLIN27TRIGGER_NUMVALUES (12)

#define IFXEGTM_CFG_NUMASCLINTRIGGERSIGNALS   (28)

typedef enum
{
    IfxEgtm_Cfg_AsclinTriggerSignal_0,
    IfxEgtm_Cfg_AsclinTriggerSignal_1,
    IfxEgtm_Cfg_AsclinTriggerSignal_2,
    IfxEgtm_Cfg_AsclinTriggerSignal_3,
    IfxEgtm_Cfg_AsclinTriggerSignal_4,
    IfxEgtm_Cfg_AsclinTriggerSignal_5,
    IfxEgtm_Cfg_AsclinTriggerSignal_6,
    IfxEgtm_Cfg_AsclinTriggerSignal_7,
    IfxEgtm_Cfg_AsclinTriggerSignal_8,
    IfxEgtm_Cfg_AsclinTriggerSignal_9,
    IfxEgtm_Cfg_AsclinTriggerSignal_10,
    IfxEgtm_Cfg_AsclinTriggerSignal_11,
    IfxEgtm_Cfg_AsclinTriggerSignal_12,
    IfxEgtm_Cfg_AsclinTriggerSignal_13,
    IfxEgtm_Cfg_AsclinTriggerSignal_14,
    IfxEgtm_Cfg_AsclinTriggerSignal_15,
    IfxEgtm_Cfg_AsclinTriggerSignal_16,
    IfxEgtm_Cfg_AsclinTriggerSignal_17,
    IfxEgtm_Cfg_AsclinTriggerSignal_18,
    IfxEgtm_Cfg_AsclinTriggerSignal_19,
    IfxEgtm_Cfg_AsclinTriggerSignal_20,
    IfxEgtm_Cfg_AsclinTriggerSignal_21,
    IfxEgtm_Cfg_AsclinTriggerSignal_22,
    IfxEgtm_Cfg_AsclinTriggerSignal_23,
    IfxEgtm_Cfg_AsclinTriggerSignal_24,
    IfxEgtm_Cfg_AsclinTriggerSignal_25,
    IfxEgtm_Cfg_AsclinTriggerSignal_26,
    IfxEgtm_Cfg_AsclinTriggerSignal_27
} IfxEgtm_Cfg_AsclinTriggerSignal;

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin0Trigger[IFXEGTM_CFG_ASCLIN0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin1Trigger[IFXEGTM_CFG_ASCLIN1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin2Trigger[IFXEGTM_CFG_ASCLIN2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin3Trigger[IFXEGTM_CFG_ASCLIN3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin4Trigger[IFXEGTM_CFG_ASCLIN4TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin5Trigger[IFXEGTM_CFG_ASCLIN5TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin6Trigger[IFXEGTM_CFG_ASCLIN6TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin7Trigger[IFXEGTM_CFG_ASCLIN7TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin8Trigger[IFXEGTM_CFG_ASCLIN8TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin9Trigger[IFXEGTM_CFG_ASCLIN9TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin10Trigger[IFXEGTM_CFG_ASCLIN10TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin11Trigger[IFXEGTM_CFG_ASCLIN11TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin12Trigger[IFXEGTM_CFG_ASCLIN12TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin13Trigger[IFXEGTM_CFG_ASCLIN13TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin14Trigger[IFXEGTM_CFG_ASCLIN14TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin15Trigger[IFXEGTM_CFG_ASCLIN15TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin16Trigger[IFXEGTM_CFG_ASCLIN16TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin17Trigger[IFXEGTM_CFG_ASCLIN17TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin18Trigger[IFXEGTM_CFG_ASCLIN18TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin19Trigger[IFXEGTM_CFG_ASCLIN19TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin20Trigger[IFXEGTM_CFG_ASCLIN20TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin21Trigger[IFXEGTM_CFG_ASCLIN21TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin22Trigger[IFXEGTM_CFG_ASCLIN22TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin23Trigger[IFXEGTM_CFG_ASCLIN23TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin24Trigger[IFXEGTM_CFG_ASCLIN24TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin25Trigger[IFXEGTM_CFG_ASCLIN25TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin26Trigger[IFXEGTM_CFG_ASCLIN26TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Asclin27Trigger[IFXEGTM_CFG_ASCLIN27TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_AsclinTriggerTable[IFXEGTM_CFG_NUMASCLINTRIGGERSIGNALS];

/******************************************************************************/
/*----------------------------------For CAN-----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_CAN0N0TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN0N1TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN0N2TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN0N3TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN1N0TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN1N1TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN1N2TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN1N3TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN2N0TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN2N1TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN2N2TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN2N3TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN3N0TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN3N1TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN3N2TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN3N3TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN4N0TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN4N1TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN4N2TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN4N3TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN5N0TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN5N1TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN5N2TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_CAN5N3TRIGGER_NUMVALUES (6)

#define IFXEGTM_CFG_NUMCANTRIGGERSIGNALS    (24)

typedef enum
{
    IfxEgtm_Cfg_CanTriggerSignal_0,
    IfxEgtm_Cfg_CanTriggerSignal_1,
    IfxEgtm_Cfg_CanTriggerSignal_2,
    IfxEgtm_Cfg_CanTriggerSignal_3,
    IfxEgtm_Cfg_CanTriggerSignal_4,
    IfxEgtm_Cfg_CanTriggerSignal_5,
    IfxEgtm_Cfg_CanTriggerSignal_6,
    IfxEgtm_Cfg_CanTriggerSignal_7,
    IfxEgtm_Cfg_CanTriggerSignal_8,
    IfxEgtm_Cfg_CanTriggerSignal_9,
    IfxEgtm_Cfg_CanTriggerSignal_10,
    IfxEgtm_Cfg_CanTriggerSignal_11,
    IfxEgtm_Cfg_CanTriggerSignal_12,
    IfxEgtm_Cfg_CanTriggerSignal_13,
    IfxEgtm_Cfg_CanTriggerSignal_14,
    IfxEgtm_Cfg_CanTriggerSignal_15,
    IfxEgtm_Cfg_CanTriggerSignal_16,
    IfxEgtm_Cfg_CanTriggerSignal_17,
    IfxEgtm_Cfg_CanTriggerSignal_18,
    IfxEgtm_Cfg_CanTriggerSignal_19,
    IfxEgtm_Cfg_CanTriggerSignal_20,
    IfxEgtm_Cfg_CanTriggerSignal_21,
    IfxEgtm_Cfg_CanTriggerSignal_22,
    IfxEgtm_Cfg_CanTriggerSignal_23
} IfxEgtm_Cfg_CanTriggerSignal;

IFX_EXTERN uint16  IfxEgtm_Cfg_Can0Node0Trigger[IFXEGTM_CFG_CAN0N0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can0Node1Trigger[IFXEGTM_CFG_CAN0N1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can0Node2Trigger[IFXEGTM_CFG_CAN0N2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can0Node3Trigger[IFXEGTM_CFG_CAN0N3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can1Node0Trigger[IFXEGTM_CFG_CAN1N0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can1Node1Trigger[IFXEGTM_CFG_CAN1N1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can1Node2Trigger[IFXEGTM_CFG_CAN1N2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can1Node3Trigger[IFXEGTM_CFG_CAN1N3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can2Node0Trigger[IFXEGTM_CFG_CAN2N0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can2Node1Trigger[IFXEGTM_CFG_CAN2N1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can2Node2Trigger[IFXEGTM_CFG_CAN2N2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can2Node3Trigger[IFXEGTM_CFG_CAN2N3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can3Node0Trigger[IFXEGTM_CFG_CAN3N0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can3Node1Trigger[IFXEGTM_CFG_CAN3N1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can3Node2Trigger[IFXEGTM_CFG_CAN3N2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can3Node3Trigger[IFXEGTM_CFG_CAN3N3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can4Node0Trigger[IFXEGTM_CFG_CAN4N0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can4Node1Trigger[IFXEGTM_CFG_CAN4N1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can4Node2Trigger[IFXEGTM_CFG_CAN4N2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can4Node3Trigger[IFXEGTM_CFG_CAN4N3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can5Node0Trigger[IFXEGTM_CFG_CAN5N0TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can5Node1Trigger[IFXEGTM_CFG_CAN5N1TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can5Node2Trigger[IFXEGTM_CFG_CAN5N2TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_Can5Node3Trigger[IFXEGTM_CFG_CAN5N3TRIGGER_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_CanTriggerTable[IFXEGTM_CFG_NUMCANTRIGGERSIGNALS];

/******************************************************************************/
/*----------------------------------For MSC-----------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_MSCSET0_NUMVALUES (32)

#define IFXEGTM_CFG_MSCSET1_NUMVALUES (24)

#define IFXEGTM_CFG_MSCSET2_NUMVALUES (16)

#define IFXEGTM_CFG_MSCSET3_NUMVALUES (24)

#define IFXEGTM_CFG_NUMMSCSET         (4)

#define IFXEGTM_CFG_NUMMSCSETSIGNALS  (16)

#define IFXEGTM_CFG_NUMMSCSELECT      (2)

typedef enum
{
    IfxEgtm_Cfg_MscSet_0,
    IfxEgtm_Cfg_MscSet_1,
    IfxEgtm_Cfg_MscSet_2,
    IfxEgtm_Cfg_MscSet_3
} IfxEgtm_Cfg_MscSet;

typedef enum
{
    IfxEgtm_Cfg_MscSetSignal_0,
    IfxEgtm_Cfg_MscSetSignal_1,
    IfxEgtm_Cfg_MscSetSignal_2,
    IfxEgtm_Cfg_MscSetSignal_3,
    IfxEgtm_Cfg_MscSetSignal_4,
    IfxEgtm_Cfg_MscSetSignal_5,
    IfxEgtm_Cfg_MscSetSignal_6,
    IfxEgtm_Cfg_MscSetSignal_7,
    IfxEgtm_Cfg_MscSetSignal_8,
    IfxEgtm_Cfg_MscSetSignal_9,
    IfxEgtm_Cfg_MscSetSignal_10,
    IfxEgtm_Cfg_MscSetSignal_11,
    IfxEgtm_Cfg_MscSetSignal_12,
    IfxEgtm_Cfg_MscSetSignal_13,
    IfxEgtm_Cfg_MscSetSignal_14,
    IfxEgtm_Cfg_MscSetSignal_15
} IfxEgtm_Cfg_MscSetSignal;

typedef enum
{
    IfxEgtm_Cfg_MscModule_0
} IfxEgtm_Cfg_MscModule;

typedef enum
{
    IfxEgtm_Cfg_MscSelect_0,
    IfxEgtm_Cfg_MscSelect_1
} IfxEgtm_Cfg_MscSelect;

IFX_EXTERN uint16  IfxEgtm_Cfg_MscSet0[IFXEGTM_CFG_MSCSET0_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_MscSet1[IFXEGTM_CFG_MSCSET1_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_MscSet2[IFXEGTM_CFG_MSCSET2_NUMVALUES + 1];

IFX_EXTERN uint16  IfxEgtm_Cfg_MscSet3[IFXEGTM_CFG_MSCSET3_NUMVALUES + 1];

IFX_EXTERN uint16 *IfxEgtm_Cfg_MscSetTable[IFXEGTM_CFG_NUMMSCSET];

IFX_EXTERN uint8   IfxEgtm_Cfg_Msc0AltInput[IFXEGTM_CFG_NUMMSCALTINPUT][4];

IFX_EXTERN uint8   IfxEgtm_Cfg_Msc1AltInput[IFXEGTM_CFG_NUMMSCALTINPUT][4];

IFX_EXTERN uint8  *IfxEgtm_Cfg_MscAltInputTable[IFXEGTM_CFG_NUMMSCSELECT];

/******************************************************************************/
/*--------------------------------For TIMINSEL--------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_NUM_ADC_TIM_INPUT_SIGNALS   (28)

#define IFXEGTM_CFG_NUM_PMS_TIM_INPUT_SIGNALS   (5)

#define IFXEGTM_CFG_NUM_SCU_TIM_INPUT_SIGNALS   (10)

#define IFXEGTM_CFG_NUM_CAN_TIM_INPUT_SIGNALS   (29)

#define IFXEGTM_CFG_NUM_GETH_TIM_INPUT_SIGNALS  (5)

#define IFXEGTM_CFG_NUM_ERAY_TIM_INPUT_SIGNALS  (3)

#define IFXEGTM_CFG_NUM_LETH_TIM_INPUT_SIGNALS  (4)

#define IFXEGTM_CFG_NUM_CANXL_TIM_INPUT_SIGNALS (4)

typedef enum
{
    IfxEgtm_AdcTimInput_GTBF0OUT0,
    IfxEgtm_AdcTimInput_GTBF0OUT1,
    IfxEgtm_AdcTimInput_GTBF0OUT2_4,
    IfxEgtm_AdcTimInput_GTBF0OUT3_5,
    IfxEgtm_AdcTimInput_GTBF1OUT0,
    IfxEgtm_AdcTimInput_GTBF1OUT1,
    IfxEgtm_AdcTimInput_GTBF1OUT2_4,
    IfxEgtm_AdcTimInput_GTBF1OUT3_5,
    IfxEgtm_AdcTimInput_GTBF2OUT0,
    IfxEgtm_AdcTimInput_GTBF2OUT1,
    IfxEgtm_AdcTimInput_GTBF2OUT2_4,
    IfxEgtm_AdcTimInput_GTBF2OUT3_5,
    IfxEgtm_AdcTimInput_TMADC0SR0,
    IfxEgtm_AdcTimInput_TMADC1SR0,
    IfxEgtm_AdcTimInput_TMADC2SR0,
    IfxEgtm_AdcTimInput_TMADC3SR0
} IfxEgtm_AdcTimInput;

typedef enum
{
    IfxEgtm_PmsTimInput_DCDC_SYNC,
    IfxEgtm_PmsTimInput_RTCMUX,
    IfxEgtm_PmsTimInput_WUTUFLOW
} IfxEgtm_PmsTimInput;

typedef enum
{
    IfxEgtm_ScuTimInput_PDOUT0,
    IfxEgtm_ScuTimInput_PDOUT1,
    IfxEgtm_ScuTimInput_PDOUT2,
    IfxEgtm_ScuTimInput_PDOUT3,
    IfxEgtm_ScuTimInput_PDOUT4,
    IfxEgtm_ScuTimInput_PDOUT5,
    IfxEgtm_ScuTimInput_PDOUT6,
    IfxEgtm_ScuTimInput_PDOUT7
} IfxEgtm_ScuTimInput;

typedef enum
{
    IfxEgtm_CanTimInput_CAN0_INT12 = (12u << 3u) | 0u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN0_INT13 = (13u << 3u) | 0u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN0_INT14 = (14u << 3u) | 0u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN0_INT15 = (15u << 3u) | 0u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN1_INT12 = (12u << 3u) | 1u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN1_INT13 = (13u << 3u) | 1u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN1_INT14 = (14u << 3u) | 1u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN1_INT15 = (15u << 3u) | 1u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN2_INT12 = (12u << 3u) | 2u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN2_INT13 = (13u << 3u) | 2u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN2_INT14 = (14u << 3u) | 2u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN2_INT15 = (15u << 3u) | 2u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN3_INT12 = (12u << 3u) | 3u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN3_INT13 = (13u << 3u) | 3u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN3_INT14 = (14u << 3u) | 3u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN3_INT15 = (15u << 3u) | 3u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN4_INT12 = (12u << 3u) | 4u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN4_INT13 = (13u << 3u) | 4u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN4_INT14 = (14u << 3u) | 4u,       /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
    IfxEgtm_CanTimInput_CAN4_INT15 = (15u << 3u) | 4u        /**< \brief Last 3 bits: CAN module number. Rest 5 bits: INT number */
} IfxEgtm_CanTimInput;

typedef enum
{
    IfxEgtm_GethTimInput_GETHPPS0,
    IfxEgtm_GethTimInput_GETHPPS1,
    IfxEgtm_GethTimInput_GETHPPS2,
    IfxEgtm_GethTimInput_GETHPPS3
} IfxEgtm_GethTimInput;

typedef enum
{
    IfxEgtm_ErayTimInput_MT0,
    IfxEgtm_ErayTimInput_MT1
} IfxEgtm_ErayTimInput;

typedef enum
{
    IfxEgtm_LethTimInput_LETHPPS0,
    IfxEgtm_LethTimInput_LETHPPS1,
    IfxEgtm_LethTimInput_LETHPPS2,
    IfxEgtm_LethTimInput_LETHPPS3
} IfxEgtm_LethTimInput;

typedef enum
{
    IfxEgtm_CanxlTimInput_CANXL_MTI_INT0,
    IfxEgtm_CanxlTimInput_CANXL_MTI_INT1,
    IfxEgtm_CanxlTimInput_CANXL_MTI_INT2,
    IfxEgtm_CanxlTimInput_CANXL_MTI_INT3
} IfxEgtm_CanxlTimInput;

IFX_EXTERN uint32 IfxEgtm_Cfg_AdcTimInputSel[IFXEGTM_CFG_NUM_ADC_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_PmsTimInputSel[IFXEGTM_CFG_NUM_PMS_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_ScuTimInputSel[IFXEGTM_CFG_NUM_SCU_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_CanTimInputSel[IFXEGTM_CFG_NUM_CAN_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_GethTimInputSel[IFXEGTM_CFG_NUM_GETH_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_ErayTimInputSel[IFXEGTM_CFG_NUM_ERAY_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_LethTimInputSel[IFXEGTM_CFG_NUM_LETH_TIM_INPUT_SIGNALS + 1];

IFX_EXTERN uint32 IfxEgtm_Cfg_CanxlTimInputSel[IFXEGTM_CFG_NUM_CANXL_TIM_INPUT_SIGNALS + 1];

/******************************************************************************/
/*---------------------------------For DTMAUX---------------------------------*/
/******************************************************************************/

#define IFXEGTM_CFG_NUM_ADC_DTMAUX_INPUT_SIGNALS (18)

typedef enum
{
    IfxEgtm_AdcDtmAuxInput_GTBF0OUT0,
    IfxEgtm_AdcDtmAuxInput_GTBF0OUT1,
    IfxEgtm_AdcDtmAuxInput_GTBF0OUT2_4,
    IfxEgtm_AdcDtmAuxInput_GTBF0OUT3_5,
    IfxEgtm_AdcDtmAuxInput_GTBF1OUT0,
    IfxEgtm_AdcDtmAuxInput_GTBF1OUT1,
    IfxEgtm_AdcDtmAuxInput_GTBF1OUT2_4,
    IfxEgtm_AdcDtmAuxInput_GTBF1OUT3_5,
    IfxEgtm_AdcDtmAuxInput_GTBF2OUT0,
    IfxEgtm_AdcDtmAuxInput_GTBF2OUT1,
    IfxEgtm_AdcDtmAuxInput_GTBF2OUT2_4,
    IfxEgtm_AdcDtmAuxInput_GTBF2OUT3_5
} IfxEgtm_AdcDtmAuxInput;

IFX_EXTERN uint32 IfxEgtm_Cfg_AdcDtmAuxInputSel[IFXEGTM_CFG_NUM_ADC_DTMAUX_INPUT_SIGNALS + 1];

#endif /* IFXEGTM_CFG_H */
