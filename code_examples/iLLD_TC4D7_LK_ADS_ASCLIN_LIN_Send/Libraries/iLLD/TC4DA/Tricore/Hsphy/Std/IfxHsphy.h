/**
 * \file IfxHsphy.h
 * \brief HSPHY  basic functionality
 * \ingroup IfxLld_Hsphy
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2025 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Hsphy_Std_Default Enumerations
 * \ingroup IfxLld_Hsphy_Std
 * \defgroup IfxLld_Hsphy_Std_Default Data Structures
 * \ingroup IfxLld_Hsphy_Std
 * \defgroup IfxLld_Hsphy_Std_Default Functions
 * \ingroup IfxLld_Hsphy_Std
 * \defgroup IfxLld_Hsphy_Std_Default Config Variable
 * \ingroup IfxLld_Hsphy_Std
 */

#ifndef IFXHSPHY_H
#define IFXHSPHY_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxHsphy_cfg.h"
#include "_Impl/IfxPcie_cfg.h"
#include "_Impl/IfxGeth_cfg.h"
#include "_PinMap/IfxGeth_PinMap.h"
#include "_PinMap/IfxXspi_PinMap.h"
#include "Ap/Std/IfxApProt.h"
#include "Ap/Std/IfxApApu.h"

/******************************************************************************/
/*-----------------------------------Macros-----------------------------------*/
/******************************************************************************/

/** \brief Sets the value given for respective bit field
 */
#define IFXHSPHY_SET_FIELD_VALUE(Reg, bitfield, value) (((value) & (IFX_HSPHY_##Reg##_##bitfield##_MSK)))

/** \brief defines the Max time out for the wait
 */
#ifndef IFXHSPHY_MAX_TIMEOUT
#define IFXHSPHY_MAX_TIMEOUT ((uint32)(1000000u))
#endif

/** \brief time out logic for the wait / delay
 * param timeOutValue time out value for wait
 * param timeOutStatus return status for time out error
 */
#define IFXHSPHY_LOOP_TIMEOUT_CHECK(timeOutValue, timeOutStatus) \
    {                                                            \
        if (((uint32)--timeOutValue) <= 0)                       \
        {                                                        \
            timeOutStatus = (uint8)1;                            \
            break;                                               \
        }                                                        \
        else                                                     \
        {                                                        \
        }                                                        \
    }

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Hsphy_Std_Default
 * \{ */
/** \brief dll voltage selection
 */
typedef enum
{
    IfxHsphy_DllOutputVoltage_1P8V = 0,  /**< \brief dll voltage selection for 1.8volts */
    IfxHsphy_DllOutputVoltage_3V         /**< \brief dll voltage selection for 3 volts */
} IfxHsphy_DllOutputVoltage;

/** \brief Dll skew index
 */
typedef enum
{
    IfxHsphy_DllSkew_0 = 0,      /**< \brief Skew index number  */
    IfxHsphy_DllSkew_1,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_2,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_3,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_4,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_5,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_6,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_7,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_8,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_9,          /**< \brief Skew index number  */
    IfxHsphy_DllSkew_10,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_11,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_12,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_13,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_14,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_15,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_16,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_17,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_18,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_19,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_20,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_21,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_22,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_23,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_24,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_25,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_26,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_27,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_28,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_29,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_30,         /**< \brief Skew index number  */
    IfxHsphy_DllSkew_31          /**< \brief Skew index number  */
} IfxHsphy_DllSkew;

/** \brief dll ref clk selection
 */
typedef enum
{
    IfxHsphy_Geth_DllRefClkSel_gRef,   /**< \brief dll ref clk selection for gref */
    IfxHsphy_Geth_DllRefClkSel_perPll  /**< \brief dll ref clk selection perpll */
} IfxHsphy_Geth_DllRefClkSel;

/** \brief Interface Pad selection for target devices to be used
 */
typedef enum
{
    IfxHsphy_PadNativeInterface_usxsgmii = 0,  /**< \brief Pad Interface selection for usxsgmii */
    IfxHsphy_PadNativeInterface_sgmii,         /**< \brief Pad Interface selection for sgmii */
    IfxHsphy_PadNativeInterface_pcie,          /**< \brief Pad Interface selection for  pcie */
    IfxHsphy_PadNativeInterface_sgbt,          /**< \brief Pad Interface selection for sgbt */
    IfxHsphy_PadNativeInterface_rgmiiPads,     /**< \brief Pad Interface selection for rgmiipads */
    IfxHsphy_PadNativeInterface_rmiiPads,      /**< \brief Pad Interface selection for rmiipads */
    IfxHsphy_PadNativeInterface_miiPads,       /**< \brief Pad Interface selection for miipads */
    IfxHsphy_PadNativeInterface_xspiPads       /**< \brief Pad Interface selection for xspipads */
} IfxHsphy_PadNativeInterface;

/** \brief PHY index in HPSHY
 */
typedef enum
{
    IfxHsphy_PhyIndex_0    = 0, /**< \brief PHY index 0 */
    IfxHsphy_PhyIndex_1    = 1, /**< \brief PHY index 1 */
    IfxHsphy_PhyIndex_2    = 2, /**< \brief PHY index 2 */
    IfxHsphy_PhyIndex_none = 3  /**< \brief PHY index none */
} IfxHsphy_PhyIndex;

/** \brief PHY reference Clock selections
 */
typedef enum
{
    IfxHsphy_PhyRefClkSel_padClk = 0,  /**< \brief PSD clock select used for UPCS interfaces */
    IfxHsphy_PhyRefClkSel_altClk       /**< \brief Alternate clock selection used for XPCS interfaces */
} IfxHsphy_PhyRefClkSel;

/** \brief SGMII speed selection
 */
typedef enum
{
    IfxHsphy_SgmiiSpeed_0P1G          = 0,  /**< \brief SGMII 100M speed selection */
    IfxHsphy_SgmiiSpeed_1G            = 1,  /**< \brief SGMII 1G speed selection */
    IfxHsphy_SgmiiSpeed_2P5G          = 2,  /**< \brief SGMII 2P5G speed selection */
    IfxHsphy_SgmiiSpeed_5G            = 3,  /**< \brief SGMII 5G speed selection */
    IfxHsphy_SgmiiSpeed_0P1G_1P25gbps = 4,  /**< \brief SGMII 100M 1.25 gbps speed selection */
    IfxHsphy_SgmiiSpeed_0P1G_125mbps  = 5,  /**< \brief SGMII 100M 125mbps speed selection */
    IfxHsphy_SgmiiSpeed_max           = 6   /**< \brief max SGMII speed selection */
} IfxHsphy_SgmiiSpeed;

/** \brief TPCS index
 */
typedef enum
{
    IfxHsphy_TpcsIndex_0 = 0,      /**< \brief "TPCS index "+str(x)  */
} IfxHsphy_TpcsIndex;

/** \brief Target device
 */
typedef enum
{
    IfxHsphy_TrgtDevice_xgmac = 0,  /**< \brief XGAMC dvice */
    IfxHsphy_TrgtDevice_pcie,       /**< \brief PCIE device */
    IfxHsphy_TrgtDevice_xspi,       /**< \brief XSPI device */
    IfxHsphy_TrgtDevice_trace       /**< \brief TRACE device */
} IfxHsphy_TrgtDevice;

/** \brief Target device speed selection
 */
typedef enum
{
    IfxHsphy_TrgtDeviceSpeed_0P01G        = 0,  /**< \brief Target device speed selection for 10M mode */
    IfxHsphy_TrgtDeviceSpeed_0P1G         = 1,  /**< \brief Target device speed selection for 100M mode.(alias to 100M 125mbps mode) */
    IfxHsphy_TrgtDeviceSpeed_0P1G_125mbps = 1,  /**< \brief Target device speed selection for 100M with 125mbps mode */
    IfxHsphy_TrgtDeviceSpeed_0P4G,              /**< \brief Target device speed selection for 400M mode */
    IfxHsphy_TrgtDeviceSpeed_1G,                /**< \brief Target device speed selection for  1G mode */
    IfxHsphy_TrgtDeviceSpeed_2P5G,              /**< \brief Target device speed selection for 2.5G mode */
    IfxHsphy_TrgtDeviceSpeed_5G,                /**< \brief Target device speed selection for 5G mode */
    IfxHsphy_TrgtDeviceSpeed_8G,                /**< \brief Target device speed selection for 8G mode */
    IfxHsphy_TrgtDeviceSpeed_0P1G_1P25gbps = 7  /**< \brief Target device speed selection for serial 100M with 1.25gbps mode */
} IfxHsphy_TrgtDeviceSpeed;

/** \brief Target interface
 */
typedef enum
{
    IfxHsphy_TrgtInterface_xpcs = 0,  /**< \brief XPCS interface */
    IfxHsphy_TrgtInterface_upcs,      /**< \brief UPCS interface */
    IfxHsphy_TrgtInterface_tpcs       /**< \brief TPCS interface */
} IfxHsphy_TrgtInterface;

/** \brief UPCS indexes
 */
typedef enum
{
    IfxHsphy_UpcsIndex_0 = 0,    /**< \brief "UPCS index "+str(x)  */
    IfxHsphy_UpcsIndex_max       /**< \brief Max value of UPCS index */
} IfxHsphy_UpcsIndex;

/** \brief XPCS indexing
 */
typedef enum
{
    IfxHsphy_XpcsIndex_0   = 0, /**< \brief XPCS index 0 */
    IfxHsphy_XpcsIndex_1   = 1, /**< \brief XPCS index 1 */
    IfxHsphy_XpcsIndex_max = 2  /**< \brief Max value of XPCS index */
} IfxHsphy_XpcsIndex;

/** \brief XPCS power up sequence states
 */
typedef enum
{
    IfxHsphy_XpcsPowerUpSeqState_waitForAckHigh0 = 0,  /**< \brief XPCS wait for ack high 0 power up seq state */
    IfxHsphy_XpcsPowerUpSeqState_waitForAckLow0  = 1,  /**< \brief XPCS wait for ack low 0 power up seq state */
    IfxHsphy_XpcsPowerUpSeqState_waitForAckHigh1 = 2,  /**< \brief XPCS wait for ack high 1 power up seq state */
    IfxHsphy_XpcsPowerUpSeqState_waitForAckLow1,       /**< \brief XPCS wait for ack low 1 power up seq state */
    IfxHsphy_XpcsPowerUpSeqState_powerGood,            /**< \brief XPCS power good seq state */
    IfxHsphy_XpcsPowerUpSeqState_powerSave,            /**< \brief XPCS power save seq state */
    IfxHsphy_XpcsPowerUpSeqState_powerDown             /**< \brief XPCS power down seq state */
} IfxHsphy_XpcsPowerUpSeqState;

/** \} */

/** \brief DLL clock selection
 */
typedef enum
{
    IfxHsphy_DllCfgPmode_Clock_diffClk = 0,  /**< \brief Dll differential clock selection */
    IfxHsphy_DllCfgPmode_Clock_singleClk     /**< \brief dll single edge clock selection */
} IfxHsphy_DllCfgPmode_Clock;

/** \brief DLL clock selection
 */
typedef enum
{
    IfxHsphy_DllCfgPmode_Pads_gpioPads      = 0, /**< \brief dll gpio pads selection */
    IfxHsphy_DllCfgPmode_Pads_xspiRgmiiPads = 1  /**< \brief Dll xspi-rgmii pads selection */
} IfxHsphy_DllCfgPmode_Pads;

/** \brief Rx Sample Selection
 * Definition in DLL.CFG.B.RXSAMPLESEL
 */
typedef enum
{
    IfxHsphy_DllCfgRx_Sample_Select_rwds     = 0, /**< \brief select RWDS */
    IfxHsphy_DllCfgRx_Sample_Select_loopback = 1  /**< \brief select clock loop back */
} IfxHsphy_DllCfgRx_Sample_Select;

/** \brief Selection for External ethernet PHY
 * Definition in CTRL.ETH.B.EPR
 */
typedef enum
{
    IfxHsphy_EthCtrlExtPhySel_mii     = 0,  /**< \brief selects the external PHY for Mii */
    IfxHsphy_EthCtrlExtPhySel_rgmii   = 1,  /**< \brief selects the external PHY for rgmii */
    IfxHsphy_EthCtrlExtPhySel_rmii    = 2,  /**< \brief selects the external PHY for  rmii */
    IfxHsphy_EthCtrlExtPhySel_usxgmii = 4,  /**< \brief selects the external PHY for usxgmii */
    IfxHsphy_EthCtrlExtPhySel_sgmii   = 4   /**< \brief selects the external PHY for sgmii */
} IfxHsphy_EthCtrlExtPhySel;

/** \brief ETH index in HPSHY
 */
typedef enum
{
    IfxHsphy_EthIndex_0    = 0, /**< \brief ETH index 0 */
    IfxHsphy_EthIndex_1    = 1, /**< \brief ETH index 1 */
    IfxHsphy_EthIndex_max  = 2, /**< \brief Max index for ETH */
    IfxHsphy_EthIndex_none = 3  /**< \brief None */
} IfxHsphy_EthIndex;

/** \brief Selection for Geth or xspi
 */
typedef enum
{
    IfxHsphy_EthSelCtrlRgmiiPad_eth = 0,  /**< \brief selects geth */
    IfxHsphy_EthSelCtrlRgmiiPad_xspi      /**< \brief selects xspi mode over eth */
} IfxHsphy_EthSelCtrlRgmiiPad;

/** \brief dll rx clock selection
 */
typedef enum
{
    IfxHsphy_Geth_DllRxClk_disable = 0,  /**< \brief dll rx clock selection disable */
    IfxHsphy_Geth_DllRxClk_enable        /**< \brief dll rx clock selection enable */
} IfxHsphy_Geth_DllRxClk;

/** \brief geth dll tx clock
 */
typedef enum
{
    IfxHsphy_Geth_DllTxClk_disable = 0,  /**< \brief geth dll tx clock disable */
    IfxHsphy_Geth_DllTxClk_enable        /**< \brief geth dll tx clock enable */
} IfxHsphy_Geth_DllTxClk;

/** \brief Enum for status return from IfxHsphy_Geth_setSgmiiSpeedMode API
 */
typedef enum
{
    IfxHsphy_Geth_SgmiiSpeedConfigStatus_success            = 0, /**< \brief Enum element for successful return */
    IfxHsphy_Geth_SgmiiSpeedConfigStatus_timeOutError       = 1, /**< \brief Enum for Time out Error return */
    IfxHsphy_Geth_SgmiiSpeedConfigStatus_invalidConfigError = 2  /**< \brief Enum for Invalid configuration return */
} IfxHsphy_Geth_SgmiiSpeedConfigStatus;

/** \brief Port Index for MDIO
 */
typedef enum
{
    IfxHsphy_Mdio_PortIndex_0 = 0,  /**< \brief port index  for mdio0 */
    IfxHsphy_Mdio_PortIndex_1 = 1   /**< \brief port index for mdio1 */
} IfxHsphy_Mdio_PortIndex;

/** \brief Pcs Type selection
 */
typedef enum
{
    IfxHsphy_PcsTypeSel_10GBASE_R  = 0,   /**< \brief Pcs Type selection for 10GBASE_R */
    IfxHsphy_PcsTypeSel_10GBASE_X  = 1,   /**< \brief Pcs Type selection for 10GBASE_X */
    IfxHsphy_PcsTypeSel_2P5GBASE_X = 14,  /**< \brief Pcs Type selection for 2P5GBASE_X */
    IfxHsphy_PcsTypeSel_5GBASE_R   = 15   /**< \brief Pcs Type selection for 5GBASE_R */
} IfxHsphy_PcsTypeSel;

/** \brief PHY power down/up mode
 */
typedef enum
{
    IfxHsphy_PhyPowerMode_down = 0,  /**< \brief PHY power mode down */
    IfxHsphy_PhyPowerMode_up   = 1   /**< \brief PHY power mode up */
} IfxHsphy_PhyPowerMode;

/** \brief ref clock selection
 */
typedef enum
{
    IfxHsphy_RgmiiRefClkSel_gRef = 0,  /**< \brief gref clock selection */
    IfxHsphy_RgmiiRefClkSel_perPll     /**< \brief perpll selection */
} IfxHsphy_RgmiiRefClkSel;

/** \brief SGMII param index selection
 */
typedef enum
{
    IfxHsphy_SgmiiParamIndex_mpllaMultiplier = 0,    /**< \brief Param selection for mplla multiplier */
    IfxHsphy_SgmiiParamIndex_mpllaTxClkDiv,          /**< \brief param selection for mplla Tx clock div */
    IfxHsphy_SgmiiParamIndex_mpllaDiv16P5ClkEnable,  /**< \brief param selection for mplla div 16.5 clock enable */
    IfxHsphy_SgmiiParamIndex_cpProp,                 /**< \brief param selection for cp prop */
    IfxHsphy_SgmiiParamIndex_cpInt,                  /**< \brief param selection for cp int */
    IfxHsphy_SgmiiParamIndex_cpPropGs,               /**< \brief param selection for  cp prop gs */
    IfxHsphy_SgmiiParamIndex_mpllaFrancCtrl,         /**< \brief param selection for  mplla franc ctrl */
    IfxHsphy_SgmiiParamIndex_vcoLdVal_0,             /**< \brief param selection for  vcol ld val 0 */
    IfxHsphy_SgmiiParamIndex_vcoRefLd_0,             /**< \brief param selection for  vco ref ld 0 */
    IfxHsphy_SgmiiParamIndex_supMisc,                /**< \brief param selection for  sup misc */
    IfxHsphy_SgmiiParamIndex_rxDiv16P5ClkEn_0,       /**< \brief param selection for  rx div by 16.5 clock enable 0 */
    IfxHsphy_SgmiiParamIndex_rx125MhzClkEn_0,        /**< \brief param selection for  rx 125 MHz clock enable */
    IfxHsphy_SgmiiParamIndex_tx0Rate,                /**< \brief param selection for  Tx rate 0 */
    IfxHsphy_SgmiiParamIndex_rx0Rate,                /**< \brief param selection for   Rx rate 0 */
    IfxHsphy_SgmiiParamIndex_rx0Misc,                /**< \brief param selection for   Rx 0 Misc */
    IfxHsphy_SgmiiParamIndex_tx0Width,               /**< \brief param selection for  tx 0 width */
    IfxHsphy_SgmiiParamIndex_rx0Width,               /**< \brief param selection for   rx 0 width */
    IfxHsphy_SgmiiParamIndex_tx0Iboost,              /**< \brief param selection for   tx 0 lboost */
    IfxHsphy_SgmiiParamIndex_vBoostEn_0,             /**< \brief param selection for   vboost enable 0 */
    IfxHsphy_SgmiiParamIndex_maxParamIndex           /**< \brief max number of param */
} IfxHsphy_SgmiiParamIndex;

/** \brief sgmii ref clock selection bits
 */
typedef enum
{
    IfxHsphy_SgmiiRefClkBits_refMpllaDiv2 = 0,  /**< \brief sgmii ref clock selection refMpllaDiv2 bits */
    IfxHsphy_SgmiiRefClkBits_refClKDiv2,        /**< \brief sgmii ref clock selection refClKDiv2 bits */
    IfxHsphy_SgmiiRefClkBits_refRange,          /**< \brief sgmii ref clock selection refRange bits */
    IfxHsphy_SgmiiRefClkBits_max                /**< \brief max number of  params */
} IfxHsphy_SgmiiRefClkBits;

/** \brief USXGMII param index selection
 */
typedef enum
{
    IfxHsphy_UsxgmiiParamIndex_mpllaMultiplier = 0,    /**< \brief Param selection for mplla multiplier */
    IfxHsphy_UsxgmiiParamIndex_mpllaTxClkDiv,          /**< \brief param selection for mplla Tx clock div */
    IfxHsphy_UsxgmiiParamIndex_mpllaDiv16P5ClkEnable,  /**< \brief param selection for mplla div 16.5 clock enable */
    IfxHsphy_UsxgmiiParamIndex_cpProp,                 /**< \brief param selection for cp prop */
    IfxHsphy_UsxgmiiParamIndex_cpInt,                  /**< \brief param selection for cp int */
    IfxHsphy_UsxgmiiParamIndex_cpPropGs,               /**< \brief param selection for  cp prop gs */
    IfxHsphy_UsxgmiiParamIndex_mpllaFrancCtrl,         /**< \brief param selection for  mplla franc ctrl */
    IfxHsphy_UsxgmiiParamIndex_vcoLdVal_0,             /**< \brief param selection for vco ld val 0 */
    IfxHsphy_UsxgmiiParamIndex_vcoRefLd_0,             /**< \brief param selection for vco ref ld 0 */
    IfxHsphy_UsxgmiiParamIndex_supMisc,                /**< \brief param selection for sup misc */
    IfxHsphy_UsxgmiiParamIndex_rxDiv16P5ClkEn_0,       /**< \brief param selection for rx div 16.5 clock enable 0 */
    IfxHsphy_UsxgmiiParamIndex_rx125MhzClkEn_0,        /**< \brief param selection for rx 125 Mhz clcok enable 0 */
    IfxHsphy_UsxgmiiParamIndex_tx0Rate,                /**< \brief param selection for tx 0 rate */
    IfxHsphy_UsxgmiiParamIndex_rx0Rate,                /**< \brief param selection for rx 0 rate */
    IfxHsphy_UsxgmiiParamIndex_rx0Misc,                /**< \brief param selection for rx 0 misc */
    IfxHsphy_UsxgmiiParamIndex_tx0Width,               /**< \brief param selection for tx 0 width */
    IfxHsphy_UsxgmiiParamIndex_rx0Width,               /**< \brief param selection for rx 0 width */
    IfxHsphy_UsxgmiiParamIndex_tx0Iboost,              /**< \brief param selection for tx 0 lboost */
    IfxHsphy_UsxgmiiParamIndex_vBoostEn_0,             /**< \brief param selection for v boost enable 0 */
    IfxHsphy_UsxgmiiParamIndex_maxParamIndex           /**< \brief max number of param */
} IfxHsphy_UsxgmiiParamIndex;

/** \brief USXGMII speed selection
 */
typedef enum
{
    IfxHsphy_UsxgmiiSpeed_1G   = 0,  /**< \brief USXGMII 1G speed selection */
    IfxHsphy_UsxgmiiSpeed_2P5G = 1,  /**< \brief USXGMII 2P5G speed selection */
    IfxHsphy_UsxgmiiSpeed_5G   = 2,  /**< \brief USXGMII 5G speed selection */
    IfxHsphy_UsxgmiiSpeed_max  = 3   /**< \brief max USXGMII speed selection */
} IfxHsphy_UsxgmiiSpeed;

/** \brief xpsc ref clock selection
 */
typedef enum
{
    IfxHsphy_XpcsRefClk_25Mhz = 0,  /**< \brief xpcs ref clock selection for 25Mhz */
    IfxHsphy_XpcsRefClk_40Mhz,      /**< \brief xpcs ref clock selection for 40Mhz */
    IfxHsphy_XpcsRefClk_100Mhz,     /**< \brief xpcs ref clock selection for 100Mhz */
    IfxHsphy_XpcsRefClk_max         /**< \brief max number of params */
} IfxHsphy_XpcsRefClk;

/** \brief xspi clock selection for diff/single edge clock
 */
typedef enum
{
    IfxHsphy_Xspi_DllClkMode_diffClk = 0,  /**< \brief xspi clock selection for diff clock */
    IfxHsphy_Xspi_DllClkMode_singleClk     /**< \brief xspi clock selection for single edge clock */
} IfxHsphy_Xspi_DllClkMode;

/** \brief dll freq selection for below above 166Mhz
 */
typedef enum
{
    IfxHsphy_Xspi_DllFreqMode_below166Mhz = 0,  /**< \brief dll freq selection for below 166Mhz */
    IfxHsphy_Xspi_DllFreqMode_above166Mhz       /**< \brief dll freq selection for above 166Mhz */
} IfxHsphy_Xspi_DllFreqMode;

/** \brief Hsphy init module status
 */
typedef enum
{
    IfxHsphy_status_failure            = 0,
    IfxHsphy_status_success            = 1,
    IfxHsphy_status_timeOutError       = 2,
    IfxHsphy_status_invalidConfigError = 3
} IfxHsphy_status;

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Hsphy_Std_Default
 * \{ */
/** \brief struct for rmii pins
 */
typedef struct
{
    IfxGeth_Crsdv_In   *crsDiv;       /**< \brief crsdiv pin reference for rmii */
    IfxGeth_Refclk_In  *refClk;       /**< \brief ref clock pin reference for rmii */
    IfxGeth_Rxd_In     *rxd0;         /**< \brief rxd0 pin reference for rmii */
    IfxGeth_Rxd_In     *rxd1;         /**< \brief rxd1 pin reference for rmii */
    IfxGeth_Txd_Out    *txd0;         /**< \brief txd0 pin reference for rmii */
    IfxGeth_Mdc_Out    *mdc;          /**< \brief mdc pin reference for rmii */
    IfxGeth_Txd_Out    *txd1;         /**< \brief txd1 pin reference for rmii */
    IfxGeth_Txen_Out   *txEn;         /**< \brief txEn pin reference for rmii */
    IfxGeth_Mdio_InOut *mdio;         /**< \brief mdio pin reference for rmii */
} IfxHsphy_Geth_RmiiPins;

/** \} */

/** \brief geth dll control block
 */
typedef struct
{
    IfxHsphy_DllOutputVoltage  dllOutputVolt;          /**< \brief dll output voltage for sel for geth */
    IfxHsphy_Geth_DllRefClkSel dllRefClkSel;           /**< \brief dll ref clock sel for geth */
    IfxHsphy_Geth_DllTxClk     dllTxClk;               /**< \brief dll tx clock sel for geth */
    IfxHsphy_Geth_DllRxClk     dllRxClk;               /**< \brief dll Rx clock sel for geth */
    IfxHsphy_DllSkew           rxClkSkew;              /**< \brief rx skew sel */
    IfxHsphy_DllSkew           txClkSkew;              /**< \brief tx skew sel */
    IfxHsphy_DllCfgPmode_Pads  dllCfgPmodePads;        /**< \brief xspi-rgmi pads selection */
    IfxHsphy_DllCfgPmode_Clock dllCfgPmodeClock;       /**< \brief single/ differential clock selection */
} IfxHsphy_Geth_DllCtlBlkConfig;

/** \brief geth mii pins references
 */
typedef struct
{
    IfxGeth_Crs_In     *crs;         /**< \brief crs pin reference for mii */
    IfxGeth_Col_In     *col;         /**< \brief col pin reference for mii */
    IfxGeth_Txclk_In   *txClk;       /**< \brief txclk pin reference for mii */
    IfxGeth_Rxclk_In   *rxClk;       /**< \brief rxclk pin reference for mii */
    IfxGeth_Rxdv_In    *rxDv;        /**< \brief rx div pin reference for mii */
    IfxGeth_Rxer_In    *rxEr;        /**< \brief rx er pin reference for mii */
    IfxGeth_Rxd_In     *rxd0;        /**< \brief rx d0 pin reference for mii */
    IfxGeth_Rxd_In     *rxd1;        /**< \brief rxd1 pin reference for mii */
    IfxGeth_Rxd_In     *rxd2;        /**< \brief rxd2 pin reference for mii */
    IfxGeth_Rxd_In     *rxd3;        /**< \brief rxd3 pin reference for mii */
    IfxGeth_Txen_Out   *txEn;        /**< \brief txen pin reference for mii */
    IfxGeth_Txer_Out   *txEr;        /**< \brief txer pin reference for mii */
    IfxGeth_Txd_Out    *txd0;        /**< \brief txd0 pin reference for mii */
    IfxGeth_Txd_Out    *txd1;        /**< \brief txd1 pin reference for mii */
    IfxGeth_Txd_Out    *txd2;        /**< \brief txd2 pin reference for mii */
    IfxGeth_Txd_Out    *txd3;        /**< \brief txd3 pin reference for mii */
    IfxGeth_Mdc_Out    *mdc;         /**< \brief mdc pin reference for mii */
    IfxGeth_Mdio_InOut *mdio;        /**< \brief mdio pin reference for mii for MAC */
} IfxHsphy_Geth_MiiPins;

/** \brief Pins for rgmii
 */
typedef struct
{
    IfxGeth_Txclk_Out  *txClk;         /**< \brief txclk pin sel for rgmii */
    IfxGeth_Txd_Out    *txd0;          /**< \brief txd0 pin sel for rgmii */
    IfxGeth_Txd_Out    *txd1;          /**< \brief tx1 pin sel for rgmii */
    IfxGeth_Txd_Out    *txd2;          /**< \brief tx2 pin sel for rgmii */
    IfxGeth_Txd_Out    *txd3;          /**< \brief txd3 pin sel for rgmii */
    IfxGeth_Txctl_Out  *txCtl;         /**< \brief txctl pin sel for rgmii */
    IfxGeth_Rxclk_In   *rxClk;         /**< \brief rxclk pin sel for rgmii */
    IfxGeth_Rxd_In     *rxd0;          /**< \brief rxd0 pin sel for rgmii */
    IfxGeth_Rxd_In     *rxd1;          /**< \brief rxd1 pin sel for rgmii */
    IfxGeth_Rxd_In     *rxd2;          /**< \brief rxd2 pin sel for rgmii */
    IfxGeth_Rxd_In     *rxd3;          /**< \brief rxd3 pin sel for rgmii */
    IfxGeth_Rxctl_In   *rxCtl;         /**< \brief rxctl pin sel for rgmii */
    IfxGeth_Mdc_Out    *mdc;           /**< \brief mdc pin sel for rgmii */
    IfxGeth_Mdio_InOut *mdio;          /**< \brief mdio pin reference for rgmii for MAC */
    IfxGeth_Grefclk_In *grefClk;       /**< \brief grefclk pin sel for rgmii */
} IfxHsphy_Geth_RgmiiPins;

/** \brief xspi control block
 */
typedef struct
{
    IfxHsphy_DllOutputVoltage       dllOutputVolt;          /**< \brief xspi output  voltage sel for 3 or 1.8 volts */
    IfxHsphy_Xspi_DllClkMode        dllClkMode;             /**< \brief ref clock sel for xspi */
    IfxHsphy_Xspi_DllFreqMode       dllFreqMode;            /**< \brief dll freq mode for xspi */
    IfxHsphy_DllSkew                rxClkSkew;              /**< \brief skew rate sel */
    IfxHsphy_DllSkew                txClkSkew;              /**< \brief skew rate sel */
    IfxHsphy_DllCfgPmode_Pads       dllCfgPmodePads;        /**< \brief xspi-rgmi pads selection */
    IfxHsphy_DllCfgPmode_Clock      dllCfgPmodeClock;       /**< \brief single/ differential clock selection */
    IfxHsphy_DllCfgRx_Sample_Select rxSampleSel;            /**< \brief rx sample select */
} IfxHsphy_Xspi_DllCtlBlkConfig;

/** \brief xspi pins
 */
typedef struct
{
    IfxXspi_Clk_Out    *clk;         /**< \brief clk pin sel for xspi */
    IfxXspi_Clk_Out    *clk_n;       /**< \brief Inverted clk pin sel for xspi */
    IfxXspi_Cs_Out     *cs;          /**< \brief cs  pin sel for xspi */
    IfxXspi_Txd0_InOut *txd0;        /**< \brief txd0  pin sel for xspi */
    IfxXspi_Txd1_InOut *txd1;        /**< \brief txd1  pin sel for xspi */
    IfxXspi_Txd2_InOut *txd2;        /**< \brief txd2  pin sel for xspi */
    IfxXspi_Txd3_InOut *txd3;        /**< \brief txd3  pin sel for xspi */
    IfxXspi_Txd4_InOut *txd4;        /**< \brief txd4  pin sel for xspi */
    IfxXspi_Txd5_InOut *txd5;        /**< \brief txd5  pin sel for xspi */
    IfxXspi_Txd6_InOut *txd6;        /**< \brief txd6  pin sel for xspi */
    IfxXspi_Txd7_InOut *txd7;        /**< \brief txd7  pin sel for xspi */
    IfxXspi_Dm_InOut   *txdm;        /**< \brief rwds  pin sel for xspi */
} IfxHsphy_Xspi_XspiPins;

/** \addtogroup IfxLld_Hsphy_Std_Default
 * \{ */
/** \brief Access protection config
 */
typedef struct
{
    IfxApProt_ProtConfig proteConfig;           /**< \brief PROTE configurations */
    IfxApProt_ProtConfig protseConfig;          /**< \brief PROTSE configuration */
    IfxApApu_ApuConfig   apuConfig;             /**< \brief APU configuration */
    IfxApApu_ApuConfig   apuGlobalConfig;       /**< \brief Global APU configurations */
    IfxApApu_ApuConfig   apuCh0Config;          /**< \brief Channel 0 APU configuration */
    IfxApApu_ApuConfig   apuCh1Config;          /**< \brief Channel 1 APU configurations */
} IfxHsphy_ApConfig;

/** \} */

/** \brief geth xpcs params
 */
typedef struct
{
    IfxHsphy_XpcsIndex  xpcsIndex;        /**< \brief xpcs index */
    IfxHsphy_XpcsRefClk xpcsRefClk;       /**< \brief xpcs ref clock */
    IfxHsphy_EthIndex   ethIdx;           /**< \brief ETH index in HSPHY */
} IfxHsphy_GethXpcsParams;

/** \brief MDC, MDIO pins only
 */
typedef struct
{
    IfxGeth_Mdc_Out        *mdc;             /**< \brief mdc pin reference */
    IfxGeth_Mdio_InOut     *mdio;            /**< \brief mdio pin reference */
    IfxHsphy_Mdio_PortIndex portIndex;       /**< \brief mdio pin reference for Port0/Port1 */
} IfxHsphy_Geth_MdioPins;

/** \brief struct for mii dll/ pins config
 */
typedef struct
{
    IFX_CONST IfxHsphy_Geth_MiiPins *miiPins;       /**< \brief reference for mii pins */
    IfxHsphy_EthIndex                ethIdx;        /**< \brief ETH index in HSPHY */
} IfxHsphy_Geth_MiiCfg;

/** \brief geth rgmii config
 */
typedef struct
{
    IfxHsphy_Geth_DllCtlBlkConfig      dllCfg;          /**< \brief dll config */
    IfxHsphy_EthIndex                  ethIdx;          /**< \brief ETH index in HSPHY */
    IFX_CONST IfxHsphy_Geth_RgmiiPins *rgmiiPins;       /**< \brief reference for rgmii pins */
} IfxHsphy_Geth_RgmiiCfg;

/** \brief struct for rmii config
 */
typedef struct
{
    IFX_CONST IfxHsphy_Geth_RmiiPins *rmiiPins;       /**< \brief reference  for rmii pins */
    IfxHsphy_EthIndex                 ethIdx;         /**< \brief ETH index in HSPHY */
} IfxHsphy_Geth_RmiiCfg;

/** \brief struct for xspi config
 */
typedef struct
{
    IfxHsphy_Xspi_DllCtlBlkConfig     dllCfg;         /**< \brief dll config for xspi */
    IFX_CONST IfxHsphy_Xspi_XspiPins *xspiPins;       /**< \brief reference for xspi pins */
} IfxHsphy_Xspi_XspiCfg;

/** \addtogroup IfxLld_Hsphy_Std_Default
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief API for configuring the speed selected
 * \param hsphyRegPtr hsphy register pointer
 * \param trgtSpeed target device speed selected
 * \param xpcs xpcs reference
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_Geth_setUsxgmiiSpeedMode(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_TrgtDeviceSpeed trgtSpeed, const IfxHsphy_GethXpcsParams *xpcs);

/** \} */

/** \addtogroup IfxLld_Hsphy_Std_Default
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Check if the module is enabled
 * \param hsphyRegPtr HPSHY register pointer
 * \return TRUE: Enabled	FALSE: Disabled
 */
IFX_INLINE boolean IfxHsphy_isModuleEnabled(Ifx_HSPHY *hsphyRegPtr);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Enable HSPHY module
 * \param hsphyRegPtr HPSHY register pointer
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_enableModule(Ifx_HSPHY *hsphyRegPtr);

/** \brief returns base addr for hsphy module
 * \param hsphy Resource index of the HSPHY
 * \return HSPHY module register address
 */
IFX_EXTERN Ifx_HSPHY *IfxHsphy_getHsphyAddress(IfxHsphy_hsphyIndex hsphy);

/** \brief API to get the resource index of the HSCT specified.
 * \param hsphyRegPtr HPSHY register pointer
 * \return Resource index of the HSPHY
 */
IFX_EXTERN IfxHsphy_hsphyIndex IfxHsphy_getHsphyIndex(Ifx_HSPHY *hsphyRegPtr);

/** \brief Reset HSPHY module
 * \param hsphyRegPtr HPSHY register pointer
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_resetModule(Ifx_HSPHY *hsphyRegPtr);

/** \brief Select the PHY reference clock for data transfer operation
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \param device Target device
 * \return TRUE: PHY ref clock selection successful
 * FALSE: Error
 */
IFX_EXTERN boolean IfxHsphy_setPhyRefClockSel(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex, IfxHsphy_TrgtDevice device);

/** \brief Select the function of operation
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \param device Device
 * \return TRUE: Function selection successful
 * FALSE: Function selection not succesful
 */
IFX_EXTERN boolean IfxHsphy_selFunction(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex, IfxHsphy_TrgtDevice device);

/** \brief Check if the PHY is ready after reset
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \return TRUE: PHY ready	FALSE:Error
 */
IFX_EXTERN boolean IfxHsphy_isPhyReady(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex);

/** \brief Check if the external loading of the application iinto SRAM is complete
 * \param hsphyRegPtr HPSHY register pointer
 * \param phyIndex PHY index
 * \return TRUE: Application SRAM loading complete	FALSE:Error
 */
IFX_EXTERN boolean IfxHsphy_setExtLdDone(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIndex);

/** \brief Initialize the PROTs and APUs with default configuration
 * \param config Configuration pointer for the Access Protection
 * \return None
 */
IFX_EXTERN void IfxHsphy_initApConfig(IfxHsphy_ApConfig *config);

/** \brief Initialize the PORTs and APU
 * \param hsphyRegPtr HPSHY register pointer
 * \param config Configuration pointer for the Access Protection
 * \return None
 */
IFX_EXTERN void IfxHsphy_initAp(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_ApConfig *config);

/** \brief Disable HPSHY module
 * \param hsphyRegPtr HPSHY register pointer
 * \return None
 */
IFX_EXTERN void IfxHsphy_disableModule(Ifx_HSPHY *hsphyRegPtr);

/** \} */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Disables the SGMII MPLL
 * \param hsphyRegPtr HPSHY register pointer
 * \param xpcsIndex XPCS index
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_sgmiiMpllDisable(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_XpcsIndex xpcsIndex);

/** \brief Enable/Bring-up MPLL
 * \param hsphyRegPtr HPSHY register pointer
 * \param xpcsIndex XPCS index
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_sgmiiMpllEnable(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_XpcsIndex xpcsIndex);

/** \brief Initialize XPCS data path
 * \param hsphyRegPtr HPSHY register pointer
 * \param xpcsIndex XPCS index
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_sgmiiXpcsDataPathInit(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_XpcsIndex xpcsIndex);

/** \brief Resets the xpcs
 * \param hsphyRegPtr HSPHY pointer
 * \param xpcs Target device id
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_resetXpcs(Ifx_HSPHY *hsphyRegPtr, const IfxHsphy_GethXpcsParams *xpcs);

/** \brief API for configuring the speed selected
 * \param hsphyRegPtr hsphy register pointer
 * \param trgtSpeed target device speed selected
 * \param xpcs xpcs reference
 * \return returns the status as success/ time out /invalid config error
 */
IFX_EXTERN IfxHsphy_Geth_SgmiiSpeedConfigStatus IfxHsphy_Geth_setSgmiiSpeedMode(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_TrgtDeviceSpeed trgtSpeed, const IfxHsphy_GethXpcsParams *xpcs);

/** \brief rgmii init api
 * \param hsphyRegPtr hsphy register pointer
 * \param config config for rgmii
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_Geth_rgmiiInit(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_Geth_RgmiiCfg *config);

/** \brief rmii ouput pin configuration
 * \param hsphyRegPtr hsphy register pointer
 * \param rmiiPins rmii config Note : Atleast one pin needs to be configured in this param before invoking the API
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupRmiiOutputPins(Ifx_HSPHY *hsphyRegPtr, const IfxHsphy_Geth_RmiiPins *rmiiPins);

/** \brief Xspi deinit API
 * \param hsphyRegPtr hsphyRegPtr hsphy register pointer
 * \return None
 */
IFX_EXTERN void IfxHsphy_Xspi_deInit(Ifx_HSPHY *hsphyRegPtr);

/** \brief Xspi init API
 * \param hsphyRegPtr hsphy register pointer
 * \param config Xspi config reference pointer
 * \return returns True if time out error occurs
 */
IFX_EXTERN boolean IfxHsphy_Xspi_xspiInit(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_Xspi_XspiCfg *config);

/** \brief Xspi pins mapping API
 * Note : Atleast one pin needs to be configured in the config->xspiPins param before invoking the API
 * \param hsphyRegPtr hsphy register pointer
 * \param config Xspi config reference
 * \return None
 */
IFX_EXTERN void IfxHsphy_Xspi_setXspiPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_Xspi_XspiCfg *config);

/** \brief rgmii output pin mapping API
 * \param hsphyRegPtr hsphy register pointer
 * \param rgmiiPins Rgmii Pin reference pointer Note : Atleast one pin needs to be configured in this param before invoking the API
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupRgmiiOutputPins(Ifx_HSPHY *hsphyRegPtr, const IfxHsphy_Geth_RgmiiPins *rgmiiPins);

/** \brief Mii output pin mapping API
 * \param hsphyRegPtr hsphy register pointer
 * \param miiPins Mii reference pin pointer Note : Atleast one pin needs to be configured in this param before invoking the API
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupMiiOutputPins(Ifx_HSPHY *hsphyRegPtr, const IfxHsphy_Geth_MiiPins *miiPins);

/** \brief API to read the external PHY register contents
 * \param hsphyRegPtr hsphy register pointer
 * \param phyIdx configure the phy index
 * \param regAddr configure the externl PHY register addr to be read
 * \param pdata configure the pointer variable to store the read data
 * \return True: Fail timeout error occured   False: Success
 */
IFX_EXTERN boolean IfxHsphy_Phy_readMDIORegister(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIdx, uint32 regAddr, uint32 *pdata);

/** \brief API to write to the external PHY register
 * \param hsphyRegPtr hsphy register pointer
 * \param phyIdx configure the phy index
 * \param regAddr configure the externl PHY register addr to be written
 * \param data configure the data to be written
 * \return True: Fail timeout error occured   False: Success
 */
IFX_EXTERN boolean IfxHsphy_Phy_writeMDIORegister(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_PhyIndex phyIdx, uint32 regAddr, uint32 data);

/** \brief Pps ouput pin configuration
 * \param hsphyRegPtr hsphy register pointer
 * \param ppsPin Pps pin config
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupPpsOutputPin(Ifx_HSPHY *hsphyRegPtr, IfxGeth_Pps_Out *ppsPin);

/** \brief API to set MDIO pins only
 * \param hsphyRegPtr hsphy register pointer
 * \param mdioPins API to set MDC, MDIO only pins
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setMdioOnlyPins(Ifx_HSPHY *hsphyRegPtr, const IfxHsphy_Geth_MdioPins *mdioPins);

/** \brief Configures access to all masters to HSPHY in the device
 * \param apConfig config pointer to configuration structure
 * \return None
 */
IFX_EXTERN void IfxHsphy_configureAccessToHsphy(IfxApApu_ApuConfig *apConfig);

/** \brief rmii pins configuration
 * \param hsphyRegPtr hsphy register pointer
 * \param config rmii config
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setRgmiiPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, IfxHsphy_Geth_RgmiiCfg *config);

/**
 * \param hsphyRegPtr hsphy register pointer
 * \param config mii config
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setMiiPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, IfxHsphy_Geth_MiiCfg *config);

/** \brief rmii pins configuration
 * \param hsphyRegPtr hsphy register pointer
 * \param config rmii config
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setRmiiPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, IfxHsphy_Geth_RmiiCfg *config);

/** \brief rmii input pin config
 * \param hsphyRegPtr hsphy register pointer
 * \param rmiiPins rmii pins reference Note : Atleast one pin needs to be configured in this param before invoking the API
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupRmiiInputPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, const IfxHsphy_Geth_RmiiPins *rmiiPins);

/** \brief Rgmii input Pin mapping API
 * \param hsphyRegPtr hsphy register pointer
 * \param rgmiiPins rgmii pin reference pointer Note : Atleast one pin needs to be configured in this param before invoking the API
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupRgmiiInputPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, const IfxHsphy_Geth_RgmiiPins *rgmiiPins);

/** \brief Mii pin mapping API
 * \param hsphyRegPtr hsphy register pointer
 * \param miiPins mii pin reference pointer Note : Atleast one pin needs to be configured in this param before invoking the API
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setupMiiInputPins(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, const IfxHsphy_Geth_MiiPins *miiPins);

/** \brief API to set/reset the ETH[].B.MDIOEN bit field
 * \param hsphyRegPtr hsphy register pointer
 * \param ethIndex Configuration for ethIndex values
 * \param mdioEnable TRUE: MDIOEN bit is set to 1 (MDIO pins are enabled) FALSE: MDIOEN bit is set to 0 (MDIO pins are disabled)
 * \return None
 */
IFX_EXTERN void IfxHsphy_Geth_setMdioPinsEnable(Ifx_HSPHY *hsphyRegPtr, IfxHsphy_EthIndex ethIndex, boolean *mdioEnable);
/** \addtogroup IfxLld_Hsphy_Std_Default
 * \{ */

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/
/** \brief Contents the value used for programming of the SGMII freq related value like freq multiply,divisor etc.
 */
IFX_EXTERN IFX_CONST uint32 IfxHsphy_Sgmii_paramConfig[IfxHsphy_SgmiiSpeed_max][IfxHsphy_XpcsRefClk_max][IfxHsphy_SgmiiParamIndex_maxParamIndex];

/** \} */

/******************************************************************************/
/*-------------------Global Exported Variables/Constants----------------------*/
/******************************************************************************/
/** \brief contents reference values for ref clock configuration for 25Mhz,40Mhz,100Mhz resp
 */
IFX_EXTERN IFX_CONST uint32 IfxHsphy_Sgmii_refClkConfig[IfxHsphy_XpcsRefClk_max][IfxHsphy_SgmiiRefClkBits_max];

/** \brief Contents the value used for programming of the USXGMII freq related value like freq multiply,divisor etc.
 */
IFX_EXTERN IFX_CONST uint32 IfxHsphy_Usxgmii_paramConfig[][IfxHsphy_XpcsRefClk_max][IfxHsphy_UsxgmiiParamIndex_maxParamIndex];

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE boolean IfxHsphy_isModuleEnabled(Ifx_HSPHY *hsphyRegPtr)
{
    return (hsphyRegPtr->CLC.B.DISS == 0) ? 1 : 0;
}


#endif /* IFXHSPHY_H */
