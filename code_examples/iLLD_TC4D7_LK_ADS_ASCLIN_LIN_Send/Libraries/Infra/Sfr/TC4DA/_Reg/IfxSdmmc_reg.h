/**
 * \file IfxSdmmc_reg.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SDMMC/V0.2.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Sdmmc_Registers_Cfg Sdmmc address
 * \ingroup IfxSfr_Sdmmc_Registers
 * 
 * \defgroup IfxSfr_Sdmmc_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Sdmmc_Registers_Cfg
 *
 * \defgroup IfxSfr_Sdmmc_Registers_Cfg_Sdmmc0 2-SDMMC0
 * \ingroup IfxSfr_Sdmmc_Registers_Cfg
 *
 *
 */
#ifndef IFXSDMMC_REG_H
#define IFXSDMMC_REG_H 1
/******************************************************************************/
#include "IfxSdmmc_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Sdmmc_Registers_Cfg_BaseAddress
 * \{  */

/** \brief SDMMC object */
#define MODULE_SDMMC0 /*lint --e(923, 9078)*/ ((*(Ifx_SDMMC*)0xF46B0000u))
/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Sdmmc_Registers_Cfg_Sdmmc0
 * \{  */
/** \brief 0, Clock control register */
#define SDMMC0_CLC /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CLC*)0xF46B0000u)

/** \brief 4, OCDS control and status register */
#define SDMMC0_OCS /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_OCS*)0xF46B0004u)

/** \brief 8, Module identification register */
#define SDMMC0_ID /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ID*)0xF46B0008u)

/** \brief C, Reset control register A */
#define SDMMC0_RST_CTRLA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RST_CTRLA*)0xF46B000Cu)

/** \brief 10, Reset control register B */
#define SDMMC0_RST_CTRLB /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RST_CTRLB*)0xF46B0010u)

/** \brief 14, Reset status register */
#define SDMMC0_RST_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RST_STAT*)0xF46B0014u)

/** \brief 20, PROT register endinit */
#define SDMMC0_PROTE /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PROT*)0xF46B0020u)

/** \brief 24, PROT register safe endinit */
#define SDMMC0_PROTSE /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PROT*)0xF46B0024u)

/** \brief 40, Write access enable register A */
#define SDMMC0_ACCEN_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ACCEN_WRA*)0xF46B0040u)

/** \brief 44, Write access enable register B */
#define SDMMC0_ACCEN_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ACCEN_WRB_FPI*)0xF46B0044u)

/** \brief 48, Read access enable register A */
#define SDMMC0_ACCEN_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ACCEN_RDA*)0xF46B0048u)

/** \brief 4C, Read access enable register B */
#define SDMMC0_ACCEN_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ACCEN_RDB_FPI*)0xF46B004Cu)

/** \brief 50, VM access enable register */
#define SDMMC0_ACCEN_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ACCEN_VM*)0xF46B0050u)

/** \brief 54, PRS access enable register */
#define SDMMC0_ACCEN_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ACCEN_PRS*)0xF46B0054u)

/** \brief 400, SDMA system address register */
#define SDMMC0_SDMASA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_SDMASA*)0xF46B0400u)

/** \brief 404, Block size register */
#define SDMMC0_BLOCKSIZE /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_BLOCKSIZE*)0xF46B0404u)

/** \brief 406, 16-bit block count register */
#define SDMMC0_BLOCKCOUNT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_BLOCKCOUNT*)0xF46B0406u)

/** \brief 408, Argument register */
#define SDMMC0_ARGUMENT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ARGUMENT*)0xF46B0408u)

/** \brief 40C, Transfer mode register */
#define SDMMC0_XFER_MODE /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_XFER_MODE*)0xF46B040Cu)

/** \brief 40E, Command register */
#define SDMMC0_CMD /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CMD*)0xF46B040Eu)

/** \brief 410, Response register 01 */
#define SDMMC0_RESP01 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RESP01*)0xF46B0410u)

/** \brief 414, Response register 23 */
#define SDMMC0_RESP23 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RESP23*)0xF46B0414u)

/** \brief 418, Response register 45 */
#define SDMMC0_RESP45 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RESP45*)0xF46B0418u)

/** \brief 41C, Response register 67 */
#define SDMMC0_RESP67 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_RESP67*)0xF46B041Cu)

/** \brief 420, Buffer data port register */
#define SDMMC0_BUF_DATA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_BUF_DATA*)0xF46B0420u)

/** \brief 424, Present state register */
#define SDMMC0_PSTATE_REG /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PSTATE_REG*)0xF46B0424u)

/** \brief 428, Host control 1 register */
#define SDMMC0_HOST_CTRL1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_HOST_CTRL1*)0xF46B0428u)

/** \brief 429, Power control register */
#define SDMMC0_PWR_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PWR_CTRL*)0xF46B0429u)

/** \brief 42A, Block gap control register */
#define SDMMC0_BGAP_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_BGAP_CTRL*)0xF46B042Au)

/** \brief 42B, Wakeup control register */
#define SDMMC0_WUP_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_WUP_CTRL*)0xF46B042Bu)

/** \brief 42C, Clock control kernel register */
#define SDMMC0_CLK_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CLK_CTRL*)0xF46B042Cu)

/** \brief 42E, Timeout control register */
#define SDMMC0_TOUT_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_TOUT_CTRL*)0xF46B042Eu)

/** \brief 42F, Software reset register */
#define SDMMC0_SW_RST /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_SW_RST*)0xF46B042Fu)

/** \brief 430, Normal interrupt status register */
#define SDMMC0_NORMAL_INT_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_NORMAL_INT_STAT*)0xF46B0430u)

/** \brief 432, Error interrupt status register */
#define SDMMC0_ERROR_INT_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ERROR_INT_STAT*)0xF46B0432u)

/** \brief 434, Normal interrupt status enable register */
#define SDMMC0_NORMAL_INT_STAT_EN /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_NORMAL_INT_STAT_EN*)0xF46B0434u)

/** \brief 436, Error interrupt status enable register */
#define SDMMC0_ERROR_INT_STAT_EN /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ERROR_INT_STAT_EN*)0xF46B0436u)

/** \brief 438, Normal interrupt signal enable register */
#define SDMMC0_NORMAL_INT_SIGNAL_EN /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_NORMAL_INT_SIGNAL_EN*)0xF46B0438u)

/** \brief 43A, Error interrupt signal enable register */
#define SDMMC0_ERROR_INT_SIGNAL_EN /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ERROR_INT_SIGNAL_EN*)0xF46B043Au)

/** \brief 43C, Auto CMD status register */
#define SDMMC0_AUTO_CMD_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_AUTO_CMD_STAT*)0xF46B043Cu)

/** \brief 43E, Host control 2 register */
#define SDMMC0_HOST_CTRL2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_HOST_CTRL2*)0xF46B043Eu)

/** \brief 440, Capabilities 1 register 0 to 31 */
#define SDMMC0_CAPABILITIES1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CAPABILITIES1*)0xF46B0440u)

/** \brief 444, Capabilities register 32 to 63 */
#define SDMMC0_CAPABILITIES2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CAPABILITIES2*)0xF46B0444u)

/** \brief 448, Maximum current capabilities register 0 to 31 */
#define SDMMC0_CURR_CAPABILITIES1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CURR_CAPABILITIES1*)0xF46B0448u)

/** \brief 44C, Maximum current capabilities register 32 to 63 */
#define SDMMC0_CURR_CAPABILITIES2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_CURR_CAPABILITIES2*)0xF46B044Cu)

/** \brief 450, Force event register for auto CMD error status register */
#define SDMMC0_FORCE_AUTO_CMD_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_FORCE_AUTO_CMD_STAT*)0xF46B0450u)

/** \brief 452, Force event register for error interrupt status */
#define SDMMC0_FORCE_ERROR_INT_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_FORCE_ERROR_INT_STAT*)0xF46B0452u)

/** \brief 454, ADMA error status register */
#define SDMMC0_ADMA_ERR_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ADMA_ERR_STAT*)0xF46B0454u)

/** \brief 458, ADMA system address register low */
#define SDMMC0_ADMA_SA_LOW /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ADMA_SA_LOW*)0xF46B0458u)

/** \brief 460, Preset value for initialization */
#define SDMMC0_PRESET_INIT /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PRESET_INIT*)0xF46B0460u)

/** \brief 462, Preset value for default speed */
#define SDMMC0_PRESET_DS /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PRESET_DS*)0xF46B0462u)

/** \brief 464, Preset value for high speed */
#define SDMMC0_PRESET_HS /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_PRESET_HS*)0xF46B0464u)

/** \brief 478, ADMA3 integrated descriptor address register - low */
#define SDMMC0_ADMA_ID_LOW /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_ADMA_ID_LOW*)0xF46B0478u)

/** \brief 4E8, Pointer for vendor specific area 1 */
#define SDMMC0_P_VENDOR_SPECIFIC_AREA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_P_VENDOR_SPECIFIC_AREA*)0xF46B04E8u)

/** \brief 4EA, Pointer for vendor specific area 2 */
#define SDMMC0_P_VENDOR2_SPECIFIC_AREA /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_P_VENDOR2_SPECIFIC_AREA*)0xF46B04EAu)

/** \brief 4FC, Slot interrupt status register */
#define SDMMC0_SLOT_INTR_STATUS /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_SLOT_INTR_STATUS*)0xF46B04FCu)

/** \brief 4FE, Host controller version */
#define SDMMC0_HOST_CNTRL_VERS /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_HOST_CNTRL_VERS*)0xF46B04FEu)

/** \brief 580, MSHC version */
#define SDMMC0_MSHC_VER_ID /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_MSHC_VER_ID*)0xF46B0580u)

/** \brief 584, MSHC version type */
#define SDMMC0_MSHC_VER_TYPE /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_MSHC_VER_TYPE*)0xF46B0584u)

/** \brief 590, DMA burst control register */
#define SDMMC0_MBIU_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_MBIU_CTRL*)0xF46B0590u)

/** \brief 5AC, eMMC control register */
#define SDMMC0_EMMC_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_EMMC_CTRL*)0xF46B05ACu)

/** \brief 5AE, eMMC boot control register */
#define SDMMC0_BOOT_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_BOOT_CTRL*)0xF46B05AEu)

/** \brief 680, Embedded control register */
#define SDMMC0_EMBEDDED_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SDMMC_EMBEDDED_CTRL*)0xF46B0680u)


/** \}  */

/******************************************************************************/

/******************************************************************************/

#endif /* IFXSDMMC_REG_H */
