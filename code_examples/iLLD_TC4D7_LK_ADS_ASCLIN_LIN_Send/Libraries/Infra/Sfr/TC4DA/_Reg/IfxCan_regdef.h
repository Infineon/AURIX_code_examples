/**
 * \file IfxCan_regdef.h
 * \brief
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_MCMCAN/V0.2.2.1.1
 * Specification: latest @ 2023-12-03 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET : V13.1.1.1.17
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Can_Registers Can Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Can_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Can_Registers
 * 
 * \defgroup IfxSfr_Can_Registers_union Register unions
 * \ingroup IfxSfr_Can_Registers
 * 
 * \defgroup IfxSfr_Can_Registers_struct Memory map
 * \ingroup IfxSfr_Can_Registers
 */
#ifndef IFXCAN_REGDEF_H
#define IFXCAN_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Can_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_CAN_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CAN_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CAN_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CAN_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CAN_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CAN_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CAN_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CAN_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CAN_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CAN_ACCEN_WRB_FPI_Bits;

/** \brief Buffer receive address and transmit address */
typedef struct _Ifx_CAN_BUFADR_Bits
{
    __IO Ifx_UReg_32Bit TXBUF:14;          /**< \brief [13:0] Transmit Buffer start address - TXBUF (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit RXBUF:14;          /**< \brief [29:16] Receive Buffer start address - RXBUF (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CAN_BUFADR_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_CAN_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CAN_CLC_Bits;

/** \brief CRE abort sequence register */
typedef struct _Ifx_CAN_CRE_ABORT_SEQ_Bits
{
    __IO Ifx_UReg_32Bit CRHBUF0:1;         /**< \brief [0:0] Cancel Rx Host Buffer 0 sequence (rwh) */
    __IO Ifx_UReg_32Bit CRHBUF1:1;         /**< \brief [1:1] Cancel Rx Host Buffer 1 sequence (rwh) */
    __IO Ifx_UReg_32Bit CTHBUF0:1;         /**< \brief [2:2] Cancel Tx Host Buffer 0 sequence (rwh) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_CAN_CRE_ABORT_SEQ_Bits;

/** \brief  */
typedef struct _Ifx_CAN_DB_Bits
{
    __IO Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rwh) */
} Ifx_CAN_DB_Bits;

/** \brief Filter Element 0 */
typedef struct _Ifx_CAN_EXTMSG_F0_Bits
{
    __IO Ifx_UReg_32Bit EFID1:29;          /**< \brief [28:0] Extended Filter ID 1 (rw) */
    __IO Ifx_UReg_32Bit EFEC:3;            /**< \brief [31:29] Extended Filter Element Configuration (rw) */
} Ifx_CAN_EXTMSG_F0_Bits;

/** \brief Filter Element 1 */
typedef struct _Ifx_CAN_EXTMSG_F1_Bits
{
    __IO Ifx_UReg_32Bit EFID2:29;          /**< \brief [28:0] Extended Filter ID 2 (rw) */
    __IO Ifx_UReg_32Bit ESYNC:1;           /**< \brief [29:29] Extended Sync Message (rwh) */
    __IO Ifx_UReg_32Bit EFT:2;             /**< \brief [31:30] Extended Filter Type (rw) */
} Ifx_CAN_EXTMSG_F1_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_CAN_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_CAN_ID_Bits;

/** \brief Module Control Register */
typedef struct _Ifx_CAN_MCR_Bits
{
    __IO Ifx_UReg_32Bit CLKSEL0:2;         /**< \brief [1:0] Clock Select 0 - CLKSEL0 (rw) */
    __IO Ifx_UReg_32Bit CLKSEL1:2;         /**< \brief [3:2] Clock Select 1 - CLKSEL1 (rw) */
    __IO Ifx_UReg_32Bit CLKSEL2:2;         /**< \brief [5:4] Clock Select 2 - CLKSEL2 (rw) */
    __IO Ifx_UReg_32Bit CLKSEL3:2;         /**< \brief [7:6] Clock Select 3 - CLKSEL3 (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [23:8] \internal Reserved */
    __IO Ifx_UReg_32Bit NODE:3;            /**< \brief [26:24] Node - NODE (rw) */
    __IO Ifx_UReg_32Bit DXCM:1;            /**< \brief [27:27] Debug Over CAN Messages Enable - DXCM (rw) */
    __I  Ifx_UReg_32Bit RBUSY:1;           /**< \brief [28:28] RAM BUSY - RBUSY (rh) */
    __IO Ifx_UReg_32Bit RINIT:1;           /**< \brief [29:29] RAM Init - RINIT (rw) */
    __IO Ifx_UReg_32Bit CI:1;              /**< \brief [30:30] Change Init - CI (rw) */
    __IO Ifx_UReg_32Bit CCCE:1;            /**< \brief [31:31] Clock and RAM Change Enable - CCCE (rw) */
} Ifx_CAN_MCR_Bits;

/** \brief Measure Control Register */
typedef struct _Ifx_CAN_MECR_Bits
{
    __IO Ifx_UReg_32Bit TH:16;             /**< \brief [15:0] Threshold - TH (rw) */
    __IO Ifx_UReg_32Bit INP:4;             /**< \brief [19:16] Interrupt Node Pointer - INP (rw) */
    __IO Ifx_UReg_32Bit NODE:3;            /**< \brief [22:20] Node - NODE (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit ANYED:1;           /**< \brief [24:24] Any Edge - ANYED (rw) */
    __IO Ifx_UReg_32Bit CAPEIE:1;          /**< \brief [25:25] Capture Event Interrupt Enable - CAPEIE (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [26:26] \internal Reserved */
    __IO Ifx_UReg_32Bit DEPTH:3;           /**< \brief [29:27] Digital Glitch Filter Depth - DEPTH (rw) */
    __IO Ifx_UReg_32Bit SOF:1;             /**< \brief [30:30] Start Of Frame - SOF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_CAN_MECR_Bits;

/** \brief Measure Status Register */
typedef struct _Ifx_CAN_MESTAT_Bits
{
    __I  Ifx_UReg_32Bit CAPT:16;           /**< \brief [15:0] Captured Timer - CAPT (rh) */
    __I  Ifx_UReg_32Bit CAPRED:1;          /**< \brief [16:16] Captured Rising Edge - CAPRED (rh) */
    __IO Ifx_UReg_32Bit CAPE:1;            /**< \brief [17:17] Capture Event - CAPE (rwh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_CAN_MESTAT_Bits;

/** \brief Node 0 CC Control Register */
typedef struct _Ifx_CAN_N_CCCR_Bits
{
    __IO Ifx_UReg_32Bit INIT:1;            /**< \brief [0:0] Initialization - INIT (rwh) */
    __IO Ifx_UReg_32Bit CCE:1;             /**< \brief [1:1] Configuration Change Enable - CCE (rw) */
    __IO Ifx_UReg_32Bit ASM:1;             /**< \brief [2:2] Restricted Operation Mode - ASM (rwh) */
    __I  Ifx_UReg_32Bit CSA:1;             /**< \brief [3:3] Clock Stop Acknowledge - CSA (rh) */
    __IO Ifx_UReg_32Bit CSR:1;             /**< \brief [4:4] Clock Stop Request - CSR (rw) */
    __IO Ifx_UReg_32Bit MON:1;             /**< \brief [5:5] Bus Monitoring Mode - MON (rwh) */
    __IO Ifx_UReg_32Bit DAR:1;             /**< \brief [6:6] Disable Automatic Retransmission - DAR (rw) */
    __IO Ifx_UReg_32Bit TEST:1;            /**< \brief [7:7] Test Mode Enable - TEST (rw) */
    __IO Ifx_UReg_32Bit FDOE:1;            /**< \brief [8:8] FD Operation Enable - FDOE (rw) */
    __IO Ifx_UReg_32Bit BRSE:1;            /**< \brief [9:9] Bit Rate Switch Enable - BRSE (rw) */
    __IO Ifx_UReg_32Bit UTSU:1;            /**< \brief [10:10] Use Timestamping register (rw) */
    __IO Ifx_UReg_32Bit WMM:1;             /**< \brief [11:11] Wide Message Marker (rw) */
    __IO Ifx_UReg_32Bit PXHD:1;            /**< \brief [12:12] Protocol Exception Handling Disable - PXHD (rw) */
    __IO Ifx_UReg_32Bit EFBI:1;            /**< \brief [13:13] Edge Filtering during Bus Integration - EFBI (rw) */
    __IO Ifx_UReg_32Bit TXP:1;             /**< \brief [14:14] Transmit Pause - TXP (rw) */
    __IO Ifx_UReg_32Bit NISO:1;            /**< \brief [15:15] Non ISO Operation - NISO (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_CCCR_Bits;

/** \brief Node 0 Core Release Register */
typedef struct _Ifx_CAN_N_CREL_Bits
{
    __I  Ifx_UReg_32Bit DAY:8;             /**< \brief [7:0] Time Stamp Day (r) */
    __I  Ifx_UReg_32Bit MON:8;             /**< \brief [15:8] Time Stamp Month (r) */
    __I  Ifx_UReg_32Bit YEAR:4;            /**< \brief [19:16] Time Stamp Year (r) */
    __I  Ifx_UReg_32Bit SUBSTEP:4;         /**< \brief [23:20] Sub-step of Core Release - SUBSTEP (r) */
    __I  Ifx_UReg_32Bit STEP:4;            /**< \brief [27:24] Step of Core Release - STEP (r) */
    __I  Ifx_UReg_32Bit REL:4;             /**< \brief [31:28] Core Release - REL (r) */
} Ifx_CAN_N_CREL_Bits;

/** \brief Node 0 CRE Configuration Register */
typedef struct _Ifx_CAN_N_CRE_CONFIG_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] Enable (rw) */
    __IO Ifx_UReg_32Bit REN:1;             /**< \brief [1:1] Routing Enable (rw) */
    __IO Ifx_UReg_32Bit IDMUEN:1;          /**< \brief [2:2] IDMU Enable (rw) */
    __IO Ifx_UReg_32Bit DEN:1;             /**< \brief [3:3] Destination Enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __I  Ifx_UReg_32Bit ID:6;              /**< \brief [13:8] Unique ID (r) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_CAN_N_CRE_CONFIG_Bits;

/** \brief Node 0 CRE Configuration Start Address */
typedef struct _Ifx_CAN_N_CRE_CONFIGADR_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SA:14;             /**< \brief [15:2] Start Address (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_CRE_CONFIGADR_Bits;

/** \brief Node 0 Receive Host Buffer 0  Configuration */
typedef struct _Ifx_CAN_N_CRE_HBUF_RX_CONFIG_Bits
{
    __IO Ifx_UReg_32Bit LRM:1;             /**< \brief [0:0] Last Read Mode (rw) */
    __IO Ifx_UReg_32Bit LEN:6;             /**< \brief [6:1] Fixed Data Length (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit TRIGEN:1;          /**< \brief [8:8] Enable Trigger (rw) */
    __IO Ifx_UReg_32Bit INTEN:1;           /**< \brief [9:9] Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit CRCEN:1;           /**< \brief [10:10] CRC calculation enable (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_CAN_N_CRE_HBUF_RX_CONFIG_Bits;

/** \brief Node 0 Receive Host Buffer 0  Status */
typedef struct _Ifx_CAN_N_CRE_HBUF_RX_STAT_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __I  Ifx_UReg_32Bit VRH:1;             /**< \brief [2:2] Valid Routing Header (rh) */
    __IO Ifx_UReg_32Bit RHREQ:1;           /**< \brief [3:3] New Receive Host Buffer 0 Transfer Request (rwh) */
    __I  Ifx_UReg_32Bit VTH:1;             /**< \brief [4:4] Valid Timing Header (rh) */
    __IO Ifx_UReg_32Bit SWTRIG:1;          /**< \brief [5:5] Software DRE Tigger (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit INDEX:6;           /**< \brief [13:8] RxFIFOz Index (rh) */
    __IO Ifx_UReg_32Bit WEG:2;             /**< \brief [15:14] Watchdog Event Group (rwh) */
    __IO Ifx_UReg_32Bit COUNT:8;           /**< \brief [23:16] Counter (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_CRE_HBUF_RX_STAT_Bits;

/** \brief Node 0 Transmit Host Buffer 0 Configuration */
typedef struct _Ifx_CAN_N_CRE_HBUF_TX_CONFIG_Bits
{
    __IO Ifx_UReg_32Bit LWM:1;             /**< \brief [0:0] Last Write Mode (rw) */
    __IO Ifx_UReg_32Bit LEN:6;             /**< \brief [6:1] Fixed Data Length (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [8:7] \internal Reserved */
    __IO Ifx_UReg_32Bit INTEN:1;           /**< \brief [9:9] Interrupt or Trigger Enable (rw) */
    __IO Ifx_UReg_32Bit CRCEN:1;           /**< \brief [10:10] CRC calculation enable (rw) */
    __IO Ifx_UReg_32Bit CRCG:1;            /**< \brief [11:11] CRC gate (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CAN_N_CRE_HBUF_TX_CONFIG_Bits;

/** \brief Node 0 Transmit Host Buffer 0 Status */
typedef struct _Ifx_CAN_N_CRE_HBUF_TX_STAT_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __IO Ifx_UReg_32Bit THREQ:1;           /**< \brief [3:3] Free Transmit Host Buffer 0 (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SWTRIG:1;          /**< \brief [5:5] Software DRE Tigger (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit INDEX:6;           /**< \brief [13:8] TxFIFO/Queue Index (rh) */
    __IO Ifx_UReg_32Bit WEG:2;             /**< \brief [15:14] Watchdog Event Group (rwh) */
    __IO Ifx_UReg_32Bit COUNT:8;           /**< \brief [23:16] Counter (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_CRE_HBUF_TX_STAT_Bits;

/** \brief Node 0 CRE Interrupt Register */
typedef struct _Ifx_CAN_N_CRE_IR_Bits
{
    __IO Ifx_UReg_32Bit RBUF0I:1;          /**< \brief [0:0] Node 0  Rx Host Buffer 0 interrupt flag (rwh) */
    __IO Ifx_UReg_32Bit RBUF1I:1;          /**< \brief [1:1] Node 0  Rx Host Buffer 1 interrupt flag (rwh) */
    __IO Ifx_UReg_32Bit TBUF0I:1;          /**< \brief [2:2] Node 0  Tx Host Buffer 0 interrupt flag (rwh) */
    __IO Ifx_UReg_32Bit TBUF1I:1;          /**< \brief [3:3] Node 0  Tx Host Buffer 1 interrupt flag (rwh) */
    __IO Ifx_UReg_32Bit SFRMLI:1;          /**< \brief [4:4] Node 0 STD ID Frame measure lost interrupt flag (rwh) */
    __IO Ifx_UReg_32Bit XFRMLI:1;          /**< \brief [5:5] Node 0 XTD ID Frame measure lost interrupt flag (rwh) */
    __IO Ifx_UReg_32Bit IRSI0:1;           /**< \brief [6:6] Node 0 Incorrect read sequence error interrupt 0 (rwh) */
    __IO Ifx_UReg_32Bit IRSI1:1;           /**< \brief [7:7] Node 0 Incorrect read sequence error interrupt 1 (rwh) */
    __IO Ifx_UReg_32Bit IWSI0:1;           /**< \brief [8:8] Node 0 Incorrect write sequence error interrupt 0 (rwh) */
    __IO Ifx_UReg_32Bit IWSI1:1;           /**< \brief [9:9] Node 0 Incorrect write sequence error interrupt 1 (rwh) */
    __IO Ifx_UReg_32Bit CRCI0:1;           /**< \brief [10:10] Node 0 CRC error interrupt 0 (rwh) */
    __IO Ifx_UReg_32Bit CRCI1:1;           /**< \brief [11:11] Node 0 CRC error interrupt 1 (rwh) */
    __IO Ifx_UReg_32Bit RWDTI0:1;          /**< \brief [12:12] Node 0 RHBUF0 watchdog timeout error interrupt 0 (rwh) */
    __IO Ifx_UReg_32Bit RWDTI1:1;          /**< \brief [13:13] Node 0 RHBUF1 watchdog timeout error interrupt 1 (rwh) */
    __IO Ifx_UReg_32Bit TWDTI0:1;          /**< \brief [14:14] Node 0 THBUF0 watchdog timeout error interrupt 0 (rwh) */
    __IO Ifx_UReg_32Bit TWDTI1:1;          /**< \brief [15:15] Node 0 THBUF1 watchdog timeout error interrupt 1 (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_CRE_IR_Bits;

/** \brief Node 0 Data Bit Timing & Prescaler Register */
typedef struct _Ifx_CAN_N_DBTP_Bits
{
    __IO Ifx_UReg_32Bit DSJW:4;            /**< \brief [3:0] Data (Re) Synchronization Jump Width - DSJW (rw) */
    __IO Ifx_UReg_32Bit DTSEG2:4;          /**< \brief [7:4] Data time segment after sample point - DTSEG2 (rw) */
    __IO Ifx_UReg_32Bit DTSEG1:5;          /**< \brief [12:8] Data time segment before sample point - DTSEG1 (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit DBRP:5;            /**< \brief [20:16] Data Baud Rate Prescaler - DBRP (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [22:21] \internal Reserved */
    __IO Ifx_UReg_32Bit TDC:1;             /**< \brief [23:23] Transmitter Delay Compensation - TDC (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_DBTP_Bits;

/** \brief Node 0 Error Counter Register */
typedef struct _Ifx_CAN_N_ECR_Bits
{
    __I  Ifx_UReg_32Bit TEC:8;             /**< \brief [7:0] Transmit Error Counter - TEC (rh) */
    __I  Ifx_UReg_32Bit REC:7;             /**< \brief [14:8] Receive Error Counter - REC (rh) */
    __I  Ifx_UReg_32Bit RP:1;              /**< \brief [15:15] Receive Error Passive - RP (rh) */
    __I  Ifx_UReg_32Bit CEL:8;             /**< \brief [23:16] CAN Error Logging - CEL (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_ECR_Bits;

/** \brief Node 0 End Address */
typedef struct _Ifx_CAN_N_ENDADR_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit PROT_RANGE_END:14;    /**< \brief [15:2] Message RAM end - END (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_ENDADR_Bits;

/** \brief Node 0 Endian Register */
typedef struct _Ifx_CAN_N_ENDN_Bits
{
    __I  Ifx_UReg_32Bit ETV:32;            /**< \brief [31:0] Endianness Test Value - ETV (r) */
} Ifx_CAN_N_ENDN_Bits;

/** \brief Node 0 CRE Error control register */
typedef struct _Ifx_CAN_N_ERRCTRL_Bits
{
    __IO Ifx_UReg_32Bit WDG1:1;            /**< \brief [0:0] Enable bit for watchdog timeout monitoring event group 1 (rwh) */
    __IO Ifx_UReg_32Bit WDG2:1;            /**< \brief [1:1] Enable bit for watchdog timeout monitoring event group 2 (rwh) */
    __IO Ifx_UReg_32Bit WDG3:1;            /**< \brief [2:2] Enable bit for watchdog timeout monitoring event group 3 (rwh) */
    __IO Ifx_UReg_32Bit RWD0IE:1;          /**< \brief [3:3] Receive watchdog timeout 0 interrupt enable (rwh) */
    __IO Ifx_UReg_32Bit RWD1IE:1;          /**< \brief [4:4] Receive watchdog timeout 1 interrupt enable (rwh) */
    __IO Ifx_UReg_32Bit CRCIE:1;           /**< \brief [5:5] CRC error interrupt enable (rwh) */
    __IO Ifx_UReg_32Bit IRSIE:1;           /**< \brief [6:6] Incorrect read sequence error interrupt enable (rwh) */
    __IO Ifx_UReg_32Bit IWSIE:1;           /**< \brief [7:7] Incorrect write sequence error interrupt enable (rwh) */
    __IO Ifx_UReg_32Bit TWD0IE:1;          /**< \brief [8:8] Transmit watchdog timeout 0 interrupt enable (rwh) */
    __IO Ifx_UReg_32Bit TWD1IE:1;          /**< \brief [9:9] Transmit watchdog timeout 1 interrupt enable (rwh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_CAN_N_ERRCTRL_Bits;

/** \brief Node 0 Interrupt routing for Group 0 */
typedef struct _Ifx_CAN_N_G0INTR_Bits
{
    __IO Ifx_UReg_32Bit TEFIFO:4;          /**< \brief [3:0] Transmit Event FIFO Incidents - TEFIFO (rw) */
    __IO Ifx_UReg_32Bit HPE:4;             /**< \brief [7:4] High Priority Events - HPE (rw) */
    __IO Ifx_UReg_32Bit WATI:4;            /**< \brief [11:8] Watermark interrupts - WATI (rw) */
    __IO Ifx_UReg_32Bit ALRT:4;            /**< \brief [15:12] ALERTS - ALRT (rw) */
    __IO Ifx_UReg_32Bit MOER:4;            /**< \brief [19:16] Module errors - MOER (rw) */
    __IO Ifx_UReg_32Bit SAFE:4;            /**< \brief [23:20] Safety counter overflow - SAFE (rw) */
    __IO Ifx_UReg_32Bit BOFF:4;            /**< \brief [27:24] Bus Off has been reached - BOFF (rw) */
    __IO Ifx_UReg_32Bit LOI:4;             /**< \brief [31:28] Last Error Interrupts - LOI (rw) */
} Ifx_CAN_N_G0INTR_Bits;

/** \brief Node 0 Interrupt routing for Group 1 */
typedef struct _Ifx_CAN_N_G1INTR_Bits
{
    __IO Ifx_UReg_32Bit REINT:4;           /**< \brief [3:0] Message stored in dedicated receive buffer interrupt (Ni_IR.DRX) - REINT (rw) */
    __IO Ifx_UReg_32Bit RXF1F:4;           /**< \brief [7:4] IR.RF1F - RxF1F (rw) */
    __IO Ifx_UReg_32Bit RXF0F:4;           /**< \brief [11:8] IR.RF0F - RxF0F (rw) */
    __IO Ifx_UReg_32Bit RXF1N:4;           /**< \brief [15:12] IR.RF1N - RxF1N (rw) */
    __IO Ifx_UReg_32Bit RXF0N:4;           /**< \brief [19:16] IR.RF0N - RxF0N (rw) */
    __IO Ifx_UReg_32Bit RETI:4;            /**< \brief [23:20] Receive Timeouts - RETI (rw) */
    __IO Ifx_UReg_32Bit TRAQ:4;            /**< \brief [27:24] Transmission Queue Events - TRAQ (rw) */
    __IO Ifx_UReg_32Bit TRACO:4;           /**< \brief [31:28] Interrupts of the transmission control - TRACO (rw) */
} Ifx_CAN_N_G1INTR_Bits;

/** \brief Node 0 Interrupt routing for Group 2 */
typedef struct _Ifx_CAN_N_G2INTR_Bits
{
    __IO Ifx_UReg_32Bit RXHBUF0:4;         /**< \brief [3:0] CRE Rx host buffer 0 interrupt (rw) */
    __IO Ifx_UReg_32Bit RXHBUF1:4;         /**< \brief [7:4] CRE Rx host buffer 1 interrupt (rw) */
    __IO Ifx_UReg_32Bit TXHBUF0:4;         /**< \brief [11:8] CRE Tx host buffer interrupt (rw) */
    __IO Ifx_UReg_32Bit TXHBUF1:4;         /**< \brief [15:12] CRE Tx host buffer interrupt (rw) */
    __IO Ifx_UReg_32Bit IDMU:4;            /**< \brief [19:16] IDMU relevant interrupts (rw) */
    __IO Ifx_UReg_32Bit CEI:4;             /**< \brief [23:20] CRE error interrupts (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_G2INTR_Bits;

/** \brief Node 0 Global Filter Configuration */
typedef struct _Ifx_CAN_N_GFC_Bits
{
    __IO Ifx_UReg_32Bit RRFE:1;            /**< \brief [0:0] Reject Remote Frames Extended - RRFE (rw) */
    __IO Ifx_UReg_32Bit RRFS:1;            /**< \brief [1:1] Reject Remote Frames Standard - RRFS (rw) */
    __IO Ifx_UReg_32Bit ANFE:2;            /**< \brief [3:2] Accept Non-matching Frames Extended - ANFE (rw) */
    __IO Ifx_UReg_32Bit ANFS:2;            /**< \brief [5:4] Accept Non-matching Frames Standard - ANFS (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_CAN_N_GFC_Bits;

/** \brief Node 0 High Priority Message Status */
typedef struct _Ifx_CAN_N_HPMS_Bits
{
    __I  Ifx_UReg_32Bit BIDX:6;            /**< \brief [5:0] Buffer Index - BIDX (rh) */
    __I  Ifx_UReg_32Bit MSI:2;             /**< \brief [7:6] Message Storage Indicator - MSI (rh) */
    __I  Ifx_UReg_32Bit FIDX:7;            /**< \brief [14:8] Filter Index - FIDX (rh) */
    __I  Ifx_UReg_32Bit FLST:1;            /**< \brief [15:15] Filter List - FLST (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_HPMS_Bits;

/** \brief Node 0 Frame Rate Measure Table Configuration */
typedef struct _Ifx_CAN_N_IDMU_FRTCONFIG_Bits
{
    __IO Ifx_UReg_32Bit STDLOCK:1;         /**< \brief [0:0] Lock STD ID Frame Rate Measures (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit INTEN0:1;          /**< \brief [2:2] STD ID Frame rate measure Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit XTDLOCK:1;         /**< \brief [8:8] Lock XTD ID Frame Rate Measures (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __IO Ifx_UReg_32Bit INTEN1:1;          /**< \brief [10:10] XTD ID Frame rate measure Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_CAN_N_IDMU_FRTCONFIG_Bits;

/** \brief Node 0 Rx Throughput Measure configuration */
typedef struct _Ifx_CAN_N_IDMU_RXTPCFG_Bits
{
    __IO Ifx_UReg_32Bit TP:16;             /**< \brief [15:0] Rx Throughput Measure (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_IDMU_RXTPCFG_Bits;

/** \brief Node 0 Interrupt Enable */
typedef struct _Ifx_CAN_N_IE_Bits
{
    __IO Ifx_UReg_32Bit RF0NE:1;           /**< \brief [0:0] Rx FIFO 0 New Message Interrupt Enable - RF0NE (rw) */
    __IO Ifx_UReg_32Bit RF0WE:1;           /**< \brief [1:1] Rx FIFO 0 Watermark Reached Interrupt Enable - RF0WE (rw) */
    __IO Ifx_UReg_32Bit RF0FE:1;           /**< \brief [2:2] Rx FIFO 0 Full Interrupt Enable - RF0FE (rw) */
    __IO Ifx_UReg_32Bit RF0LE:1;           /**< \brief [3:3] Rx FIFO 0 Message Lost Interrupt Enable - RF0LE (rw) */
    __IO Ifx_UReg_32Bit RF1NE:1;           /**< \brief [4:4] Rx FIFO 1 New Message Interrupt Enable - RF1NE (rw) */
    __IO Ifx_UReg_32Bit RF1WE:1;           /**< \brief [5:5] Rx FIFO 1 Watermark Reached Interrupt Enable - RF1WE (rw) */
    __IO Ifx_UReg_32Bit RF1FE:1;           /**< \brief [6:6] Rx FIFO 1 Full Interrupt Enable - RF1FE (rw) */
    __IO Ifx_UReg_32Bit RF1LE:1;           /**< \brief [7:7] Rx FIFO 1 Message Lost Interrupt Enable - RF1LE (rw) */
    __IO Ifx_UReg_32Bit HPME:1;            /**< \brief [8:8] High Priority Message Interrupt Enable - HPME (rw) */
    __IO Ifx_UReg_32Bit TCE:1;             /**< \brief [9:9] Transmission Completed Interrupt Enable - TCE (rw) */
    __IO Ifx_UReg_32Bit TCFE:1;            /**< \brief [10:10] Transmission Cancellation Finished Interrupt Enable - TCFE (rw) */
    __IO Ifx_UReg_32Bit TFEE:1;            /**< \brief [11:11] Tx FIFO Empty Interrupt Enable - TFEE (rw) */
    __IO Ifx_UReg_32Bit TEFNE:1;           /**< \brief [12:12] Tx Event FIFO New Entry Interrupt Enable - TEFNE (rw) */
    __IO Ifx_UReg_32Bit TEFWE:1;           /**< \brief [13:13] Tx Event FIFO Watermark Reached Interrupt Enable - TEFWE (rw) */
    __IO Ifx_UReg_32Bit TEFFE:1;           /**< \brief [14:14] Tx Event FIFO Full Interrupt Enable - TEFFE (rw) */
    __IO Ifx_UReg_32Bit TEFLE:1;           /**< \brief [15:15] Tx Event FIFO Element Lost Interrupt Enable - TEFLE (rw) */
    __IO Ifx_UReg_32Bit TSWE:1;            /**< \brief [16:16] Timestamp Wraparound Interrupt Enable - TSWE (rw) */
    __IO Ifx_UReg_32Bit MRAFE:1;           /**< \brief [17:17] Message RAM Access Failure Interrupt Enable - MRAFE (rw) */
    __IO Ifx_UReg_32Bit TOOE:1;            /**< \brief [18:18] Timeout Occurred Interrupt Enable - TOOE (rw) */
    __IO Ifx_UReg_32Bit DRXE:1;            /**< \brief [19:19] Message stored to Dedicated Rx Buffer Interrupt Enable - DRXE (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __IO Ifx_UReg_32Bit ELOE:1;            /**< \brief [22:22] Error Logging Overflow Interrupt Enable - ELOE (rw) */
    __IO Ifx_UReg_32Bit EPE:1;             /**< \brief [23:23] Error Passive Interrupt Enable - EPE (rw) */
    __IO Ifx_UReg_32Bit EWE:1;             /**< \brief [24:24] Warning Status Interrupt Enable - EWE (rw) */
    __IO Ifx_UReg_32Bit BOE:1;             /**< \brief [25:25] Bus_Off Status Interrupt Enable - BOE (rw) */
    __IO Ifx_UReg_32Bit WDIE:1;            /**< \brief [26:26] Watchdog Interrupt Enable - WDIE (rw) */
    __IO Ifx_UReg_32Bit PEAE:1;            /**< \brief [27:27] Protocol Error in Arbitration Phase Enable - PEAE (rw) */
    __IO Ifx_UReg_32Bit PEDE:1;            /**< \brief [28:28] Protocol Error in Data Phase Enable - PEDE (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_CAN_N_IE_Bits;

/** \brief Node 0 Interrupt Signalling Register */
typedef struct _Ifx_CAN_N_INTRSIG_Bits
{
    __I  Ifx_UReg_32Bit REINT:1;           /**< \brief [0:0] A message stored in a receive buffer interrupt - REINT (rh) */
    __I  Ifx_UReg_32Bit RXF1F:1;           /**< \brief [1:1] Receive FIFO1 is full interrupt - RxF1F (rh) */
    __I  Ifx_UReg_32Bit RXF0F:1;           /**< \brief [2:2] Receive FIFO0 is full interrupt - RxF0F (rh) */
    __I  Ifx_UReg_32Bit RXF1N:1;           /**< \brief [3:3] Receive FIFO1 got a new message interrupt - RxF1N (rh) */
    __I  Ifx_UReg_32Bit RXF0N:1;           /**< \brief [4:4] Receive FIFO0 got a new message interrupt - RxF0N (rh) */
    __I  Ifx_UReg_32Bit RETI:1;            /**< \brief [5:5] A receive timeout event interrupt - RETI (rh) */
    __I  Ifx_UReg_32Bit TRAQ:1;            /**< \brief [6:6] A transmission queue event interrupt - TRAQ (rh) */
    __I  Ifx_UReg_32Bit TRACO:1;           /**< \brief [7:7] A transmission control event interrupt - TRACO (rh) */
    __I  Ifx_UReg_32Bit TEFIFO:1;          /**< \brief [8:8] A Transmit Event FIFO Incident interrupt - TEFIFO (rh) */
    __I  Ifx_UReg_32Bit HPE:1;             /**< \brief [9:9] A high priority event interrupt - HPE (rh) */
    __I  Ifx_UReg_32Bit WATI:1;            /**< \brief [10:10] A watermark interrupt has been reached - WATI (rh) */
    __I  Ifx_UReg_32Bit ALRT:1;            /**< \brief [11:11] An alert interrupt - ALRT (rh) */
    __I  Ifx_UReg_32Bit MOER:1;            /**< \brief [12:12] Module error interrupt - MOER (rh) */
    __I  Ifx_UReg_32Bit SAFE:1;            /**< \brief [13:13] The safety counter interrupt ELO - SAFE (rh) */
    __I  Ifx_UReg_32Bit BOFF:1;            /**< \brief [14:14] Bus Off Interrupt - BOFF (rh) */
    __I  Ifx_UReg_32Bit LOI:1;             /**< \brief [15:15] Last Error Interrupt - LOI (rh) */
    __I  Ifx_UReg_32Bit RXHBUF0:1;         /**< \brief [16:16] CRE Rx Host Buffer 0 interrupt (rh) */
    __I  Ifx_UReg_32Bit RXHBUF1:1;         /**< \brief [17:17] CRE Rx Host Buffer 1 interrupt (rh) */
    __I  Ifx_UReg_32Bit TXHBUF0:1;         /**< \brief [18:18] CRE Tx Host Buffer 0 interrupt (rh) */
    __I  Ifx_UReg_32Bit TXHBUF1:1;         /**< \brief [19:19] CRE Tx Host Buffer 1 interrupt (rh) */
    __I  Ifx_UReg_32Bit IDMU:1;            /**< \brief [20:20] IDMU interrupts (rh) */
    __I  Ifx_UReg_32Bit CEI:1;             /**< \brief [21:21] CRE error interrupts (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_CAN_N_INTRSIG_Bits;

/** \brief Node 0 Interrupt Register */
typedef struct _Ifx_CAN_N_IR_Bits
{
    __IO Ifx_UReg_32Bit RF0N:1;            /**< \brief [0:0] Rx FIFO 0 New Message - RF0N (rwh) */
    __IO Ifx_UReg_32Bit RF0W:1;            /**< \brief [1:1] Rx FIFO 0 Watermark Reached - RF0W (rwh) */
    __IO Ifx_UReg_32Bit RF0F:1;            /**< \brief [2:2] Rx FIFO 0 Full - RF0F (rwh) */
    __IO Ifx_UReg_32Bit RF0L:1;            /**< \brief [3:3] Rx FIFO 0 Message Lost - RF0L (rwh) */
    __IO Ifx_UReg_32Bit RF1N:1;            /**< \brief [4:4] Rx FIFO 1 New Message - RF1N (rwh) */
    __IO Ifx_UReg_32Bit RF1W:1;            /**< \brief [5:5] Rx FIFO 1 Watermark Reached - RF1W (rwh) */
    __IO Ifx_UReg_32Bit RF1F:1;            /**< \brief [6:6] Rx FIFO 1 Full - RF1F (rwh) */
    __IO Ifx_UReg_32Bit RF1L:1;            /**< \brief [7:7] Rx FIFO 1 Message Lost - RF1L (rwh) */
    __IO Ifx_UReg_32Bit HPM:1;             /**< \brief [8:8] High Priority Message - HPM (rwh) */
    __IO Ifx_UReg_32Bit TC:1;              /**< \brief [9:9] Transmission Completed - TC (rwh) */
    __IO Ifx_UReg_32Bit TCF:1;             /**< \brief [10:10] Transmission Cancellation Finished - TCF (rwh) */
    __IO Ifx_UReg_32Bit TFE:1;             /**< \brief [11:11] Tx FIFO Empty - TFE (rwh) */
    __IO Ifx_UReg_32Bit TEFN:1;            /**< \brief [12:12] Tx Event FIFO New Entry - TEFN (rwh) */
    __IO Ifx_UReg_32Bit TEFW:1;            /**< \brief [13:13] Tx Event FIFO Watermark Reached - TEFW (rwh) */
    __IO Ifx_UReg_32Bit TEFF:1;            /**< \brief [14:14] Tx Event FIFO Full - TEFF (rwh) */
    __IO Ifx_UReg_32Bit TEFL:1;            /**< \brief [15:15] Tx Event FIFO Element Lost - TEFL (rwh) */
    __IO Ifx_UReg_32Bit TSW:1;             /**< \brief [16:16] Timestamp Wraparound - TSW (rwh) */
    __IO Ifx_UReg_32Bit MRAF:1;            /**< \brief [17:17] Message RAM Access Failure - MRAF (rwh) */
    __IO Ifx_UReg_32Bit TOO:1;             /**< \brief [18:18] Timeout Occurred - TOO (rwh) */
    __IO Ifx_UReg_32Bit DRX:1;             /**< \brief [19:19] Message stored to Dedicated Rx Buffer - DRX (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __IO Ifx_UReg_32Bit ELO:1;             /**< \brief [22:22] Error Logging Overflow - ELO (rwh) */
    __IO Ifx_UReg_32Bit EP:1;              /**< \brief [23:23] Error Passive - EP (rwh) */
    __IO Ifx_UReg_32Bit EW:1;              /**< \brief [24:24] Warning Status - EW (rwh) */
    __IO Ifx_UReg_32Bit BO:1;              /**< \brief [25:25] Bus_Off Status - BO (rwh) */
    __IO Ifx_UReg_32Bit WDI:1;             /**< \brief [26:26] Watchdog Interrupt - WDI (rwh) */
    __IO Ifx_UReg_32Bit PEA:1;             /**< \brief [27:27] Protocol Error in Arbitration Phase - PEA (rwh) */
    __IO Ifx_UReg_32Bit PED:1;             /**< \brief [28:28] Protocol Error in Data Phase - PED (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_CAN_N_IR_Bits;

/** \brief Node 0 Nominal Bit Timing & Prescaler Register */
typedef struct _Ifx_CAN_N_NBTP_Bits
{
    __IO Ifx_UReg_32Bit NTSEG2:7;          /**< \brief [6:0] Nominal Time segment after sample point - NTSEG2 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit NTSEG1:8;          /**< \brief [15:8] Nominal Time segment before sample point - NTSEG1 (rw) */
    __IO Ifx_UReg_32Bit NBRP:9;            /**< \brief [24:16] Baud Rate Prescaler - NBRP (rw) */
    __IO Ifx_UReg_32Bit NSJW:7;            /**< \brief [31:25] (Re) Synchronization Jump Width - NSJW (rw) */
} Ifx_CAN_N_NBTP_Bits;

/** \brief Node 0 New Data 1 */
typedef struct _Ifx_CAN_N_NDAT1_Bits
{
    __IO Ifx_UReg_32Bit ND0:1;             /**< \brief [0:0] New Data in Rx Buffer 0 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND1:1;             /**< \brief [1:1] New Data in Rx Buffer 1 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND2:1;             /**< \brief [2:2] New Data in Rx Buffer 2 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND3:1;             /**< \brief [3:3] New Data in Rx Buffer 3 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND4:1;             /**< \brief [4:4] New Data in Rx Buffer 4 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND5:1;             /**< \brief [5:5] New Data in Rx Buffer 5 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND6:1;             /**< \brief [6:6] New Data in Rx Buffer 6 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND7:1;             /**< \brief [7:7] New Data in Rx Buffer 7 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND8:1;             /**< \brief [8:8] New Data in Rx Buffer 8 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND9:1;             /**< \brief [9:9] New Data in Rx Buffer 9 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND10:1;            /**< \brief [10:10] New Data in Rx Buffer 10 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND11:1;            /**< \brief [11:11] New Data in Rx Buffer 11 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND12:1;            /**< \brief [12:12] New Data in Rx Buffer 12 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND13:1;            /**< \brief [13:13] New Data in Rx Buffer 13 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND14:1;            /**< \brief [14:14] New Data in Rx Buffer 14 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND15:1;            /**< \brief [15:15] New Data in Rx Buffer 15 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND16:1;            /**< \brief [16:16] New Data in Rx Buffer 16 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND17:1;            /**< \brief [17:17] New Data in Rx Buffer 17 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND18:1;            /**< \brief [18:18] New Data in Rx Buffer 18 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND19:1;            /**< \brief [19:19] New Data in Rx Buffer 19 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND20:1;            /**< \brief [20:20] New Data in Rx Buffer 20 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND21:1;            /**< \brief [21:21] New Data in Rx Buffer 21 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND22:1;            /**< \brief [22:22] New Data in Rx Buffer 22 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND23:1;            /**< \brief [23:23] New Data in Rx Buffer 23 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND24:1;            /**< \brief [24:24] New Data in Rx Buffer 24 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND25:1;            /**< \brief [25:25] New Data in Rx Buffer 25 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND26:1;            /**< \brief [26:26] New Data in Rx Buffer 26 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND27:1;            /**< \brief [27:27] New Data in Rx Buffer 27 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND28:1;            /**< \brief [28:28] New Data in Rx Buffer 28 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND29:1;            /**< \brief [29:29] New Data in Rx Buffer 29 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND30:1;            /**< \brief [30:30] New Data in Rx Buffer 30 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND31:1;            /**< \brief [31:31] New Data in Rx Buffer 31 - ND (rwh) */
} Ifx_CAN_N_NDAT1_Bits;

/** \brief Node 0 New Data 2 */
typedef struct _Ifx_CAN_N_NDAT2_Bits
{
    __IO Ifx_UReg_32Bit ND32:1;            /**< \brief [0:0] New Data in Rx Buffer 32 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND33:1;            /**< \brief [1:1] New Data in Rx Buffer 33 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND34:1;            /**< \brief [2:2] New Data in Rx Buffer 34 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND35:1;            /**< \brief [3:3] New Data in Rx Buffer 35 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND36:1;            /**< \brief [4:4] New Data in Rx Buffer 36 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND37:1;            /**< \brief [5:5] New Data in Rx Buffer 37 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND38:1;            /**< \brief [6:6] New Data in Rx Buffer 38 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND39:1;            /**< \brief [7:7] New Data in Rx Buffer 39 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND40:1;            /**< \brief [8:8] New Data in Rx Buffer 40 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND41:1;            /**< \brief [9:9] New Data in Rx Buffer 41 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND42:1;            /**< \brief [10:10] New Data in Rx Buffer 42 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND43:1;            /**< \brief [11:11] New Data in Rx Buffer 43 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND44:1;            /**< \brief [12:12] New Data in Rx Buffer 44 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND45:1;            /**< \brief [13:13] New Data in Rx Buffer 45 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND46:1;            /**< \brief [14:14] New Data in Rx Buffer 46 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND47:1;            /**< \brief [15:15] New Data in Rx Buffer 47 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND48:1;            /**< \brief [16:16] New Data in Rx Buffer 48 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND49:1;            /**< \brief [17:17] New Data in Rx Buffer 49 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND50:1;            /**< \brief [18:18] New Data in Rx Buffer 50 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND51:1;            /**< \brief [19:19] New Data in Rx Buffer 51 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND52:1;            /**< \brief [20:20] New Data in Rx Buffer 52 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND53:1;            /**< \brief [21:21] New Data in Rx Buffer 53 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND54:1;            /**< \brief [22:22] New Data in Rx Buffer 54 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND55:1;            /**< \brief [23:23] New Data in Rx Buffer 55 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND56:1;            /**< \brief [24:24] New Data in Rx Buffer 56 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND57:1;            /**< \brief [25:25] New Data in Rx Buffer 57 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND58:1;            /**< \brief [26:26] New Data in Rx Buffer 58 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND59:1;            /**< \brief [27:27] New Data in Rx Buffer 59 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND60:1;            /**< \brief [28:28] New Data in Rx Buffer 60 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND61:1;            /**< \brief [29:29] New Data in Rx Buffer 61 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND62:1;            /**< \brief [30:30] New Data in Rx Buffer 62 - ND (rwh) */
    __IO Ifx_UReg_32Bit ND63:1;            /**< \brief [31:31] New Data in Rx Buffer 63 - ND (rwh) */
} Ifx_CAN_N_NDAT2_Bits;

/** \brief Node 0 Port Control Register */
typedef struct _Ifx_CAN_N_PORTCTRL_Bits
{
    __IO Ifx_UReg_32Bit RXSEL:3;           /**< \brief [2:0] Receive Select - RXSEL (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit LBM:1;             /**< \brief [8:8] Loop-Back Mode - LBM (rw) */
    __IO Ifx_UReg_32Bit LOUT:1;            /**< \brief [9:9] Loop Back Mode Out - LOUT (rw) */
    __IO Ifx_UReg_32Bit DELE:1;            /**< \brief [10:10] Enable destructive read on Ni_ECR.CEL (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_CAN_N_PORTCTRL_Bits;

/** \brief Node 0 Protocol Status Register */
typedef struct _Ifx_CAN_N_PSR_Bits
{
    __I  Ifx_UReg_32Bit LEC:3;             /**< \brief [2:0] Last Error Code - LEC (rh) */
    __I  Ifx_UReg_32Bit ACT:2;             /**< \brief [4:3] Activity - ACT (rh) */
    __I  Ifx_UReg_32Bit EP:1;              /**< \brief [5:5] Error Passive - EP (rh) */
    __I  Ifx_UReg_32Bit EW:1;              /**< \brief [6:6] Warning Status - EW (rh) */
    __I  Ifx_UReg_32Bit BO:1;              /**< \brief [7:7] Bus_Off Status - BO (rh) */
    __I  Ifx_UReg_32Bit DLEC:3;            /**< \brief [10:8] Data Phase Last Error Code - DLEC (rh) */
    __I  Ifx_UReg_32Bit RESI:1;            /**< \brief [11:11] ESI flag of last received CAN FD Message - RESI (rh) */
    __I  Ifx_UReg_32Bit RBRS:1;            /**< \brief [12:12] BRS flag of last received CAN FD Message - RBRS (rh) */
    __I  Ifx_UReg_32Bit RFDF:1;            /**< \brief [13:13] Received a CAN FD Message - RFDF (rh) */
    __I  Ifx_UReg_32Bit PXE:1;             /**< \brief [14:14] Protocol Exception Event - PXE (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit TDCV:7;            /**< \brief [22:16] Transmitter Delay Compensation Value - TDCV (r) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_CAN_N_PSR_Bits;

/** \brief Node 0 RAM Watchdog */
typedef struct _Ifx_CAN_N_RWD_Bits
{
    __IO Ifx_UReg_32Bit WDC:8;             /**< \brief [7:0] Watchdog Configuration - WDC (rw) */
    __I  Ifx_UReg_32Bit WDV:8;             /**< \brief [15:8] Watchdog Value - WDV (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_RWD_Bits;

/** \brief Node 0 Rx Buffer Configuration */
typedef struct _Ifx_CAN_N_RX_BC_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RBSA:14;           /**< \brief [15:2] Rx Buffer Start Address - RBSA (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_RX_BC_Bits;

/** \brief Node 0 Rx Buffer/FIFO Element Size Configuration */
typedef struct _Ifx_CAN_N_RX_ESC_Bits
{
    __IO Ifx_UReg_32Bit F0DS:3;            /**< \brief [2:0] Rx FIFO 0 Data Field Size - F0DS (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit F1DS:3;            /**< \brief [6:4] Rx FIFO 1 Data Field Size - F1DS (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit RBDS:3;            /**< \brief [10:8] Rx Buffer Data Field Size - RBDS (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_CAN_N_RX_ESC_Bits;

/** \brief Node 0 Rx FIFO 0 Acknowledge */
typedef struct _Ifx_CAN_N_RX_F0A_Bits
{
    __IO Ifx_UReg_32Bit F0AI:6;            /**< \brief [5:0] Rx FIFO 0 Acknowledge Index - F0AI (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_CAN_N_RX_F0A_Bits;

/** \brief Node 0 Rx FIFO 0 Configuration */
typedef struct _Ifx_CAN_N_RX_F0C_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit F0SA:14;           /**< \brief [15:2] Rx FIFO 0 Start Address - F0SA (rw) */
    __IO Ifx_UReg_32Bit F0S:7;             /**< \brief [22:16] Rx FIFO 0 Size - F0S (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit F0WM:7;            /**< \brief [30:24] Rx FIFO 0 Watermark - F0WM (rw) */
    __IO Ifx_UReg_32Bit F0OM:1;            /**< \brief [31:31] FIFO 0 Operation Mode - F0OM (rw) */
} Ifx_CAN_N_RX_F0C_Bits;

/** \brief Node 0 Rx FIFO 0 Status */
typedef struct _Ifx_CAN_N_RX_F0S_Bits
{
    __I  Ifx_UReg_32Bit F0FL:7;            /**< \brief [6:0] Rx FIFO 0 Fill Level - F0FL (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __I  Ifx_UReg_32Bit F0GI:6;            /**< \brief [13:8] Rx FIFO 0 Get Index - F0GI (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit F0PI:6;            /**< \brief [21:16] Rx FIFO 0 Put Index - F0PI (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __I  Ifx_UReg_32Bit F0F:1;             /**< \brief [24:24] Rx FIFO 0 Full - F0F (rh) */
    __I  Ifx_UReg_32Bit RF0L:1;            /**< \brief [25:25] Rx FIFO 0 Message Lost - RF0L (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_CAN_N_RX_F0S_Bits;

/** \brief Node 0 Rx FIFO 1 Acknowledge */
typedef struct _Ifx_CAN_N_RX_F1A_Bits
{
    __IO Ifx_UReg_32Bit F1AI:6;            /**< \brief [5:0] Rx FIFO 1 Acknowledge Index - F1AI (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_CAN_N_RX_F1A_Bits;

/** \brief Node 0 Rx FIFO 1 Configuration */
typedef struct _Ifx_CAN_N_RX_F1C_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit F1SA:14;           /**< \brief [15:2] Rx FIFO 1 Start Address - F1SA (rw) */
    __IO Ifx_UReg_32Bit F1S:7;             /**< \brief [22:16] Rx FIFO 1 Size - F1S (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit F1WM:7;            /**< \brief [30:24] Rx FIFO 1 Watermark - F1WM (rw) */
    __IO Ifx_UReg_32Bit F1OM:1;            /**< \brief [31:31] FIFO 1 Operation Mode - F1OM (rw) */
} Ifx_CAN_N_RX_F1C_Bits;

/** \brief Node 0 Rx FIFO 1 Status */
typedef struct _Ifx_CAN_N_RX_F1S_Bits
{
    __I  Ifx_UReg_32Bit F1FL:7;            /**< \brief [6:0] Rx FIFO 1 Fill Level - F1FL (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __I  Ifx_UReg_32Bit F1GI:6;            /**< \brief [13:8] Rx FIFO 1 Get Index - F1GI (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit F1PI:6;            /**< \brief [21:16] Rx FIFO 1 Put Index - F1PI (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __I  Ifx_UReg_32Bit F1F:1;             /**< \brief [24:24] Rx FIFO 1 Full - F1F (rh) */
    __I  Ifx_UReg_32Bit RF1L:1;            /**< \brief [25:25] Rx FIFO 1 Message Lost - RF1L (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_CAN_N_RX_F1S_Bits;

/** \brief Node 0 Standard ID Filter Configuration */
typedef struct _Ifx_CAN_N_SIDFC_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit FLSSA:14;          /**< \brief [15:2] Filter List Standard Start Address - FLSSA (rw) */
    __IO Ifx_UReg_32Bit LSS:8;             /**< \brief [23:16] List Size Standard - LSS (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_SIDFC_Bits;

/** \brief Node 0 Start Address */
typedef struct _Ifx_CAN_N_STARTADR_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit PROT_RANGE_START:14;    /**< \brief [15:2] Message RAM start - START (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_STARTADR_Bits;

/** \brief Node 0 Transmitter Delay Compensation Register */
typedef struct _Ifx_CAN_N_TDCR_Bits
{
    __IO Ifx_UReg_32Bit TDCF:7;            /**< \brief [6:0] Transmitter Delay Compensation Filter Window Length - TDCF (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit TDCO:7;            /**< \brief [14:8] Transmitter Delay Compensation Offset - TDCO (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_CAN_N_TDCR_Bits;

/** \brief Node 0 Test Register */
typedef struct _Ifx_CAN_N_TEST_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit LBCK:1;            /**< \brief [4:4] Loop Back Mode - LBCK (rwh) */
    __IO Ifx_UReg_32Bit TX:2;              /**< \brief [6:5] Control of Transmit Pin - TX (rwh) */
    __I  Ifx_UReg_32Bit RX:1;              /**< \brief [7:7] Receive Pin - RX (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CAN_N_TEST_Bits;

/** \brief Node 0 Timer Clock Control Register */
typedef struct _Ifx_CAN_N_TIMER_CCR_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TPSC:4;            /**< \brief [11:8] Timer Prescaler - TPSC (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [13:12] \internal Reserved */
    __IO Ifx_UReg_32Bit STRESET:1;         /**< \brief [14:14] Stamping Reset - STRESET (rw) */
    __IO Ifx_UReg_32Bit STSTART:1;         /**< \brief [15:15] Stamping Start - STSTART (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __IO Ifx_UReg_32Bit TRIGSRC:3;         /**< \brief [20:18] Trigger Source - TRIGSRC (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_CAN_N_TIMER_CCR_Bits;

/** \brief Node 0 Timer Receive Timeout Register */
typedef struct _Ifx_CAN_N_TIMER_RXTOUT_Bits
{
    __IO Ifx_UReg_32Bit RELOAD:16;         /**< \brief [15:0] Reload Value - RELOAD (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [21:16] \internal Reserved */
    __IO Ifx_UReg_32Bit TEIE:1;            /**< \brief [22:22] Timer Event Interrupt Enable - TEIE (rw) */
    __IO Ifx_UReg_32Bit TE:1;              /**< \brief [23:23] Timer Event - TE (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_N_TIMER_RXTOUT_Bits;

/** \brief Node 0 Timer Transmit Trigger 0 Register */
typedef struct _Ifx_CAN_N_TIMER_TXTRIG0_Bits
{
    __IO Ifx_UReg_32Bit RELOAD:16;         /**< \brief [15:0] Reload Value - RELOAD (rw) */
    __I  Ifx_UReg_32Bit TXMO:8;            /**< \brief [23:16] Transmit Message Object - TXMO (r) */
    __IO Ifx_UReg_32Bit STRT:1;            /**< \brief [24:24] Timer Start - STRT (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_CAN_N_TIMER_TXTRIG0_Bits;

/** \brief Node 0 Timer Transmit Trigger 1 Register */
typedef struct _Ifx_CAN_N_TIMER_TXTRIG1_Bits
{
    __IO Ifx_UReg_32Bit RELOAD:16;         /**< \brief [15:0] Reload Value - RELOAD (rw) */
    __I  Ifx_UReg_32Bit TXMO:8;            /**< \brief [23:16] Transmit Message Object - TXMO (r) */
    __IO Ifx_UReg_32Bit STRT:1;            /**< \brief [24:24] Timer Start - STRT (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_CAN_N_TIMER_TXTRIG1_Bits;

/** \brief Node 0 Timer Transmit Trigger 2 Register */
typedef struct _Ifx_CAN_N_TIMER_TXTRIG2_Bits
{
    __IO Ifx_UReg_32Bit RELOAD:16;         /**< \brief [15:0] Reload Value - RELOAD (rw) */
    __I  Ifx_UReg_32Bit TXMO:8;            /**< \brief [23:16] Transmit Message Object - TXMO (r) */
    __IO Ifx_UReg_32Bit STRT:1;            /**< \brief [24:24] Timer Start - STRT (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_CAN_N_TIMER_TXTRIG2_Bits;

/** \brief Node 0 Timeout Counter Configuration */
typedef struct _Ifx_CAN_N_TOCC_Bits
{
    __IO Ifx_UReg_32Bit ETOC:1;            /**< \brief [0:0] Enable Timeout Counter - ETOC (rw) */
    __IO Ifx_UReg_32Bit TOS:2;             /**< \brief [2:1] Timeout Select - TOS (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [15:3] \internal Reserved */
    __IO Ifx_UReg_32Bit TOP:16;            /**< \brief [31:16] Timeout Period - TOP (rw) */
} Ifx_CAN_N_TOCC_Bits;

/** \brief Node 0 Timeout Counter Value */
typedef struct _Ifx_CAN_N_TOCV_Bits
{
    __IO Ifx_UReg_32Bit TOC:16;            /**< \brief [15:0] Timeout Counter - TOC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_TOCV_Bits;

/** \brief Node 0 Timestamp Counter Configuration */
typedef struct _Ifx_CAN_N_TSCC_Bits
{
    __IO Ifx_UReg_32Bit TSS:2;             /**< \brief [1:0] Time segment before sample point - TSS (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit TCP:4;             /**< \brief [19:16] Timestamp Counter Prescaler - TCP (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_CAN_N_TSCC_Bits;

/** \brief Node 0 Timestamp Counter Value */
typedef struct _Ifx_CAN_N_TSCV_Bits
{
    __IO Ifx_UReg_32Bit TSC:16;            /**< \brief [15:0] Timestamp Counter - TSC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_TSCV_Bits;

/** \brief Node 0 Actual Timebase */
typedef struct _Ifx_CAN_N_TSU_ATB_Bits
{
    __IO Ifx_UReg_32Bit TB:32;             /**< \brief [31:0] Timebase for timestamp generation (rwh) */
} Ifx_CAN_N_TSU_ATB_Bits;

/** \brief Node 0 TSU Core Release Register */
typedef struct _Ifx_CAN_N_TSU_CREL_Bits
{
    __I  Ifx_UReg_32Bit DAY:8;             /**< \brief [7:0] Time Stamp Day (r) */
    __I  Ifx_UReg_32Bit MON:8;             /**< \brief [15:8] Time Stamp Month (r) */
    __I  Ifx_UReg_32Bit YEAR:4;            /**< \brief [19:16] Time Stamp Year (r) */
    __I  Ifx_UReg_32Bit SUBSTEP:4;         /**< \brief [23:20] Sub-step of Core Release - SUBSTEP (r) */
    __I  Ifx_UReg_32Bit STEP:4;            /**< \brief [27:24] Step of Core Release - STEP (r) */
    __I  Ifx_UReg_32Bit REL:4;             /**< \brief [31:28] Core Release - REL (r) */
} Ifx_CAN_N_TSU_CREL_Bits;

/** \brief Node 0 Timestamp 0 */
typedef struct _Ifx_CAN_N_TSU_TS_Bits
{
    __I  Ifx_UReg_32Bit TS:32;             /**< \brief [31:0] Reference Timestamp generated by TSU (rh) */
} Ifx_CAN_N_TSU_TS_Bits;

/** \brief Node 0 Timestamp Configuration */
typedef struct _Ifx_CAN_N_TSU_TSCFG_Bits
{
    __IO Ifx_UReg_32Bit TSUE:1;            /**< \brief [0:0] Timestamp Unit Enable - TSUE (rw) */
    __IO Ifx_UReg_32Bit TBCS:1;            /**< \brief [1:1] Timebase Counter Select - TBCS (rw) */
    __IO Ifx_UReg_32Bit SCP:1;             /**< \brief [2:2] Select Capturing Position - SCP (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit TBPRE:8;           /**< \brief [15:8] Timebase Prescaler - TBPRE (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_TSU_TSCFG_Bits;

/** \brief Node 0 Timestamp Status 1 */
typedef struct _Ifx_CAN_N_TSU_TSS1_Bits
{
    __I  Ifx_UReg_32Bit TSN0:1;            /**< \brief [0:0] Timestamp New 0 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN1:1;            /**< \brief [1:1] Timestamp New 1 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN2:1;            /**< \brief [2:2] Timestamp New 2 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN3:1;            /**< \brief [3:3] Timestamp New 3 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN4:1;            /**< \brief [4:4] Timestamp New 4 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN5:1;            /**< \brief [5:5] Timestamp New 5 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN6:1;            /**< \brief [6:6] Timestamp New 6 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN7:1;            /**< \brief [7:7] Timestamp New 7 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN8:1;            /**< \brief [8:8] Timestamp New 8 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN9:1;            /**< \brief [9:9] Timestamp New 9 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN10:1;           /**< \brief [10:10] Timestamp New 10 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN11:1;           /**< \brief [11:11] Timestamp New 11 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN12:1;           /**< \brief [12:12] Timestamp New 12 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN13:1;           /**< \brief [13:13] Timestamp New 13 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN14:1;           /**< \brief [14:14] Timestamp New 14 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSN15:1;           /**< \brief [15:15] Timestamp New 15 - TSN (rh) */
    __I  Ifx_UReg_32Bit TSL0:1;            /**< \brief [16:16] Timestamp Lost 0 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL1:1;            /**< \brief [17:17] Timestamp Lost 1 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL2:1;            /**< \brief [18:18] Timestamp Lost 2 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL3:1;            /**< \brief [19:19] Timestamp Lost 3 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL4:1;            /**< \brief [20:20] Timestamp Lost 4 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL5:1;            /**< \brief [21:21] Timestamp Lost 5 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL6:1;            /**< \brief [22:22] Timestamp Lost 6 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL7:1;            /**< \brief [23:23] Timestamp Lost 7 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL8:1;            /**< \brief [24:24] Timestamp Lost 8 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL9:1;            /**< \brief [25:25] Timestamp Lost 9 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL10:1;           /**< \brief [26:26] Timestamp Lost 10 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL11:1;           /**< \brief [27:27] Timestamp Lost 11 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL12:1;           /**< \brief [28:28] Timestamp Lost 12 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL13:1;           /**< \brief [29:29] Timestamp Lost 13 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL14:1;           /**< \brief [30:30] Timestamp Lost 14 - TSL (rh) */
    __I  Ifx_UReg_32Bit TSL15:1;           /**< \brief [31:31] Timestamp Lost 15 - TSL (rh) */
} Ifx_CAN_N_TSU_TSS1_Bits;

/** \brief Node 0 Timestamp Status 2 */
typedef struct _Ifx_CAN_N_TSU_TSS2_Bits
{
    __I  Ifx_UReg_32Bit TSP:4;             /**< \brief [3:0] Timestamp Counter TSP (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [11:4] \internal Reserved */
    __I  Ifx_UReg_32Bit NTSG:2;            /**< \brief [13:12] Number of Timestamps Generic NTSG (r) */
    __I  Ifx_UReg_32Bit ITBG:2;            /**< \brief [15:14] Internal Timebase and SOF select Generic ITBG (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_N_TSU_TSS2_Bits;

/** \brief Node 0 Tx Buffer Add Request */
typedef struct _Ifx_CAN_N_TX_BAR_Bits
{
    __IO Ifx_UReg_32Bit AR0:1;             /**< \brief [0:0] Add Request Tx Buffer 0 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR1:1;             /**< \brief [1:1] Add Request Tx Buffer 1 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR2:1;             /**< \brief [2:2] Add Request Tx Buffer 2 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR3:1;             /**< \brief [3:3] Add Request Tx Buffer 3 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR4:1;             /**< \brief [4:4] Add Request Tx Buffer 4 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR5:1;             /**< \brief [5:5] Add Request Tx Buffer 5 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR6:1;             /**< \brief [6:6] Add Request Tx Buffer 6 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR7:1;             /**< \brief [7:7] Add Request Tx Buffer 7 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR8:1;             /**< \brief [8:8] Add Request Tx Buffer 8 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR9:1;             /**< \brief [9:9] Add Request Tx Buffer 9 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR10:1;            /**< \brief [10:10] Add Request Tx Buffer 10 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR11:1;            /**< \brief [11:11] Add Request Tx Buffer 11 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR12:1;            /**< \brief [12:12] Add Request Tx Buffer 12 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR13:1;            /**< \brief [13:13] Add Request Tx Buffer 13 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR14:1;            /**< \brief [14:14] Add Request Tx Buffer 14 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR15:1;            /**< \brief [15:15] Add Request Tx Buffer 15 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR16:1;            /**< \brief [16:16] Add Request Tx Buffer 16 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR17:1;            /**< \brief [17:17] Add Request Tx Buffer 17 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR18:1;            /**< \brief [18:18] Add Request Tx Buffer 18 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR19:1;            /**< \brief [19:19] Add Request Tx Buffer 19 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR20:1;            /**< \brief [20:20] Add Request Tx Buffer 20 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR21:1;            /**< \brief [21:21] Add Request Tx Buffer 21 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR22:1;            /**< \brief [22:22] Add Request Tx Buffer 22 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR23:1;            /**< \brief [23:23] Add Request Tx Buffer 23 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR24:1;            /**< \brief [24:24] Add Request Tx Buffer 24 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR25:1;            /**< \brief [25:25] Add Request Tx Buffer 25 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR26:1;            /**< \brief [26:26] Add Request Tx Buffer 26 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR27:1;            /**< \brief [27:27] Add Request Tx Buffer 27 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR28:1;            /**< \brief [28:28] Add Request Tx Buffer 28 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR29:1;            /**< \brief [29:29] Add Request Tx Buffer 29 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR30:1;            /**< \brief [30:30] Add Request Tx Buffer 30 - AR (rwh) */
    __IO Ifx_UReg_32Bit AR31:1;            /**< \brief [31:31] Add Request Tx Buffer 31 - AR (rwh) */
} Ifx_CAN_N_TX_BAR_Bits;

/** \brief Node 0 Tx Buffer Configuration */
typedef struct _Ifx_CAN_N_TX_BC_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TBSA:14;           /**< \brief [15:2] Tx Buffers Start Address - TBSA (rw) */
    __IO Ifx_UReg_32Bit NDTB:6;            /**< \brief [21:16] Number of Dedicated Transmit Buffers - NDTB (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit TFQS:6;            /**< \brief [29:24] Transmit FIFO/Queue Size - TFQS (rw) */
    __IO Ifx_UReg_32Bit TFQM:1;            /**< \brief [30:30] Tx FIFO/Queue Mode - TFQM (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_CAN_N_TX_BC_Bits;

/** \brief Node 0 Tx Buffer Cancellation Finished */
typedef struct _Ifx_CAN_N_TX_BCF_Bits
{
    __I  Ifx_UReg_32Bit CF0:1;             /**< \brief [0:0] Cancellation Finished Tx Buffer 0 - CF (rh) */
    __I  Ifx_UReg_32Bit CF1:1;             /**< \brief [1:1] Cancellation Finished Tx Buffer 1 - CF (rh) */
    __I  Ifx_UReg_32Bit CF2:1;             /**< \brief [2:2] Cancellation Finished Tx Buffer 2 - CF (rh) */
    __I  Ifx_UReg_32Bit CF3:1;             /**< \brief [3:3] Cancellation Finished Tx Buffer 3 - CF (rh) */
    __I  Ifx_UReg_32Bit CF4:1;             /**< \brief [4:4] Cancellation Finished Tx Buffer 4 - CF (rh) */
    __I  Ifx_UReg_32Bit CF5:1;             /**< \brief [5:5] Cancellation Finished Tx Buffer 5 - CF (rh) */
    __I  Ifx_UReg_32Bit CF6:1;             /**< \brief [6:6] Cancellation Finished Tx Buffer 6 - CF (rh) */
    __I  Ifx_UReg_32Bit CF7:1;             /**< \brief [7:7] Cancellation Finished Tx Buffer 7 - CF (rh) */
    __I  Ifx_UReg_32Bit CF8:1;             /**< \brief [8:8] Cancellation Finished Tx Buffer 8 - CF (rh) */
    __I  Ifx_UReg_32Bit CF9:1;             /**< \brief [9:9] Cancellation Finished Tx Buffer 9 - CF (rh) */
    __I  Ifx_UReg_32Bit CF10:1;            /**< \brief [10:10] Cancellation Finished Tx Buffer 10 - CF (rh) */
    __I  Ifx_UReg_32Bit CF11:1;            /**< \brief [11:11] Cancellation Finished Tx Buffer 11 - CF (rh) */
    __I  Ifx_UReg_32Bit CF12:1;            /**< \brief [12:12] Cancellation Finished Tx Buffer 12 - CF (rh) */
    __I  Ifx_UReg_32Bit CF13:1;            /**< \brief [13:13] Cancellation Finished Tx Buffer 13 - CF (rh) */
    __I  Ifx_UReg_32Bit CF14:1;            /**< \brief [14:14] Cancellation Finished Tx Buffer 14 - CF (rh) */
    __I  Ifx_UReg_32Bit CF15:1;            /**< \brief [15:15] Cancellation Finished Tx Buffer 15 - CF (rh) */
    __I  Ifx_UReg_32Bit CF16:1;            /**< \brief [16:16] Cancellation Finished Tx Buffer 16 - CF (rh) */
    __I  Ifx_UReg_32Bit CF17:1;            /**< \brief [17:17] Cancellation Finished Tx Buffer 17 - CF (rh) */
    __I  Ifx_UReg_32Bit CF18:1;            /**< \brief [18:18] Cancellation Finished Tx Buffer 18 - CF (rh) */
    __I  Ifx_UReg_32Bit CF19:1;            /**< \brief [19:19] Cancellation Finished Tx Buffer 19 - CF (rh) */
    __I  Ifx_UReg_32Bit CF20:1;            /**< \brief [20:20] Cancellation Finished Tx Buffer 20 - CF (rh) */
    __I  Ifx_UReg_32Bit CF21:1;            /**< \brief [21:21] Cancellation Finished Tx Buffer 21 - CF (rh) */
    __I  Ifx_UReg_32Bit CF22:1;            /**< \brief [22:22] Cancellation Finished Tx Buffer 22 - CF (rh) */
    __I  Ifx_UReg_32Bit CF23:1;            /**< \brief [23:23] Cancellation Finished Tx Buffer 23 - CF (rh) */
    __I  Ifx_UReg_32Bit CF24:1;            /**< \brief [24:24] Cancellation Finished Tx Buffer 24 - CF (rh) */
    __I  Ifx_UReg_32Bit CF25:1;            /**< \brief [25:25] Cancellation Finished Tx Buffer 25 - CF (rh) */
    __I  Ifx_UReg_32Bit CF26:1;            /**< \brief [26:26] Cancellation Finished Tx Buffer 26 - CF (rh) */
    __I  Ifx_UReg_32Bit CF27:1;            /**< \brief [27:27] Cancellation Finished Tx Buffer 27 - CF (rh) */
    __I  Ifx_UReg_32Bit CF28:1;            /**< \brief [28:28] Cancellation Finished Tx Buffer 28 - CF (rh) */
    __I  Ifx_UReg_32Bit CF29:1;            /**< \brief [29:29] Cancellation Finished Tx Buffer 29 - CF (rh) */
    __I  Ifx_UReg_32Bit CF30:1;            /**< \brief [30:30] Cancellation Finished Tx Buffer 30 - CF (rh) */
    __I  Ifx_UReg_32Bit CF31:1;            /**< \brief [31:31] Cancellation Finished Tx Buffer 31 - CF (rh) */
} Ifx_CAN_N_TX_BCF_Bits;

/** \brief Node 0 Tx Buffer Cancellation Finished Interrupt Enable */
typedef struct _Ifx_CAN_N_TX_BCIE_Bits
{
    __IO Ifx_UReg_32Bit CFIE0:1;           /**< \brief [0:0] Cancellation Finished Interrupt Enable Tx Buffer 0 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE1:1;           /**< \brief [1:1] Cancellation Finished Interrupt Enable Tx Buffer 1 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE2:1;           /**< \brief [2:2] Cancellation Finished Interrupt Enable Tx Buffer 2 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE3:1;           /**< \brief [3:3] Cancellation Finished Interrupt Enable Tx Buffer 3 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE4:1;           /**< \brief [4:4] Cancellation Finished Interrupt Enable Tx Buffer 4 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE5:1;           /**< \brief [5:5] Cancellation Finished Interrupt Enable Tx Buffer 5 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE6:1;           /**< \brief [6:6] Cancellation Finished Interrupt Enable Tx Buffer 6 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE7:1;           /**< \brief [7:7] Cancellation Finished Interrupt Enable Tx Buffer 7 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE8:1;           /**< \brief [8:8] Cancellation Finished Interrupt Enable Tx Buffer 8 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE9:1;           /**< \brief [9:9] Cancellation Finished Interrupt Enable Tx Buffer 9 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE10:1;          /**< \brief [10:10] Cancellation Finished Interrupt Enable Tx Buffer 10 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE11:1;          /**< \brief [11:11] Cancellation Finished Interrupt Enable Tx Buffer 11 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE12:1;          /**< \brief [12:12] Cancellation Finished Interrupt Enable Tx Buffer 12 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE13:1;          /**< \brief [13:13] Cancellation Finished Interrupt Enable Tx Buffer 13 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE14:1;          /**< \brief [14:14] Cancellation Finished Interrupt Enable Tx Buffer 14 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE15:1;          /**< \brief [15:15] Cancellation Finished Interrupt Enable Tx Buffer 15 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE16:1;          /**< \brief [16:16] Cancellation Finished Interrupt Enable Tx Buffer 16 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE17:1;          /**< \brief [17:17] Cancellation Finished Interrupt Enable Tx Buffer 17 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE18:1;          /**< \brief [18:18] Cancellation Finished Interrupt Enable Tx Buffer 18 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE19:1;          /**< \brief [19:19] Cancellation Finished Interrupt Enable Tx Buffer 19 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE20:1;          /**< \brief [20:20] Cancellation Finished Interrupt Enable Tx Buffer 20 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE21:1;          /**< \brief [21:21] Cancellation Finished Interrupt Enable Tx Buffer 21 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE22:1;          /**< \brief [22:22] Cancellation Finished Interrupt Enable Tx Buffer 22 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE23:1;          /**< \brief [23:23] Cancellation Finished Interrupt Enable Tx Buffer 23 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE24:1;          /**< \brief [24:24] Cancellation Finished Interrupt Enable Tx Buffer 24 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE25:1;          /**< \brief [25:25] Cancellation Finished Interrupt Enable Tx Buffer 25 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE26:1;          /**< \brief [26:26] Cancellation Finished Interrupt Enable Tx Buffer 26 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE27:1;          /**< \brief [27:27] Cancellation Finished Interrupt Enable Tx Buffer 27 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE28:1;          /**< \brief [28:28] Cancellation Finished Interrupt Enable Tx Buffer 28 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE29:1;          /**< \brief [29:29] Cancellation Finished Interrupt Enable Tx Buffer 29 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE30:1;          /**< \brief [30:30] Cancellation Finished Interrupt Enable Tx Buffer 30 - CFIE (rw) */
    __IO Ifx_UReg_32Bit CFIE31:1;          /**< \brief [31:31] Cancellation Finished Interrupt Enable Tx Buffer 31 - CFIE (rw) */
} Ifx_CAN_N_TX_BCIE_Bits;

/** \brief Node 0 Tx Buffer Cancellation Request */
typedef struct _Ifx_CAN_N_TX_BCR_Bits
{
    __IO Ifx_UReg_32Bit CR0:1;             /**< \brief [0:0] Cancellation Request Tx Buffer 0 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR1:1;             /**< \brief [1:1] Cancellation Request Tx Buffer 1 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR2:1;             /**< \brief [2:2] Cancellation Request Tx Buffer 2 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR3:1;             /**< \brief [3:3] Cancellation Request Tx Buffer 3 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR4:1;             /**< \brief [4:4] Cancellation Request Tx Buffer 4 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR5:1;             /**< \brief [5:5] Cancellation Request Tx Buffer 5 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR6:1;             /**< \brief [6:6] Cancellation Request Tx Buffer 6 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR7:1;             /**< \brief [7:7] Cancellation Request Tx Buffer 7 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR8:1;             /**< \brief [8:8] Cancellation Request Tx Buffer 8 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR9:1;             /**< \brief [9:9] Cancellation Request Tx Buffer 9 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR10:1;            /**< \brief [10:10] Cancellation Request Tx Buffer 10 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR11:1;            /**< \brief [11:11] Cancellation Request Tx Buffer 11 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR12:1;            /**< \brief [12:12] Cancellation Request Tx Buffer 12 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR13:1;            /**< \brief [13:13] Cancellation Request Tx Buffer 13 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR14:1;            /**< \brief [14:14] Cancellation Request Tx Buffer 14 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR15:1;            /**< \brief [15:15] Cancellation Request Tx Buffer 15 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR16:1;            /**< \brief [16:16] Cancellation Request Tx Buffer 16 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR17:1;            /**< \brief [17:17] Cancellation Request Tx Buffer 17 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR18:1;            /**< \brief [18:18] Cancellation Request Tx Buffer 18 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR19:1;            /**< \brief [19:19] Cancellation Request Tx Buffer 19 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR20:1;            /**< \brief [20:20] Cancellation Request Tx Buffer 20 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR21:1;            /**< \brief [21:21] Cancellation Request Tx Buffer 21 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR22:1;            /**< \brief [22:22] Cancellation Request Tx Buffer 22 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR23:1;            /**< \brief [23:23] Cancellation Request Tx Buffer 23 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR24:1;            /**< \brief [24:24] Cancellation Request Tx Buffer 24 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR25:1;            /**< \brief [25:25] Cancellation Request Tx Buffer 25 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR26:1;            /**< \brief [26:26] Cancellation Request Tx Buffer 26 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR27:1;            /**< \brief [27:27] Cancellation Request Tx Buffer 27 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR28:1;            /**< \brief [28:28] Cancellation Request Tx Buffer 28 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR29:1;            /**< \brief [29:29] Cancellation Request Tx Buffer 29 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR30:1;            /**< \brief [30:30] Cancellation Request Tx Buffer 30 - CR (rwh) */
    __IO Ifx_UReg_32Bit CR31:1;            /**< \brief [31:31] Cancellation Request Tx Buffer 31 - CR (rwh) */
} Ifx_CAN_N_TX_BCR_Bits;

/** \brief Node 0 Tx Buffer Request Pending */
typedef struct _Ifx_CAN_N_TX_BRP_Bits
{
    __I  Ifx_UReg_32Bit TRP0:1;            /**< \brief [0:0] Transmission Request Pending Tx  Buffer 0 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP1:1;            /**< \brief [1:1] Transmission Request Pending Tx  Buffer 1 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP2:1;            /**< \brief [2:2] Transmission Request Pending Tx  Buffer 2 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP3:1;            /**< \brief [3:3] Transmission Request Pending Tx  Buffer 3 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP4:1;            /**< \brief [4:4] Transmission Request Pending Tx  Buffer 4 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP5:1;            /**< \brief [5:5] Transmission Request Pending Tx  Buffer 5 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP6:1;            /**< \brief [6:6] Transmission Request Pending Tx  Buffer 6 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP7:1;            /**< \brief [7:7] Transmission Request Pending Tx  Buffer 7 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP8:1;            /**< \brief [8:8] Transmission Request Pending Tx  Buffer 8 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP9:1;            /**< \brief [9:9] Transmission Request Pending Tx  Buffer 9 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP10:1;           /**< \brief [10:10] Transmission Request Pending Tx  Buffer 10 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP11:1;           /**< \brief [11:11] Transmission Request Pending Tx  Buffer 11 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP12:1;           /**< \brief [12:12] Transmission Request Pending Tx  Buffer 12 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP13:1;           /**< \brief [13:13] Transmission Request Pending Tx  Buffer 13 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP14:1;           /**< \brief [14:14] Transmission Request Pending Tx  Buffer 14 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP15:1;           /**< \brief [15:15] Transmission Request Pending Tx  Buffer 15 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP16:1;           /**< \brief [16:16] Transmission Request Pending Tx  Buffer 16 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP17:1;           /**< \brief [17:17] Transmission Request Pending Tx  Buffer 17 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP18:1;           /**< \brief [18:18] Transmission Request Pending Tx  Buffer 18 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP19:1;           /**< \brief [19:19] Transmission Request Pending Tx  Buffer 19 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP20:1;           /**< \brief [20:20] Transmission Request Pending Tx  Buffer 20 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP21:1;           /**< \brief [21:21] Transmission Request Pending Tx  Buffer 21 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP22:1;           /**< \brief [22:22] Transmission Request Pending Tx  Buffer 22 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP23:1;           /**< \brief [23:23] Transmission Request Pending Tx  Buffer 23 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP24:1;           /**< \brief [24:24] Transmission Request Pending Tx  Buffer 24 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP25:1;           /**< \brief [25:25] Transmission Request Pending Tx  Buffer 25 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP26:1;           /**< \brief [26:26] Transmission Request Pending Tx  Buffer 26 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP27:1;           /**< \brief [27:27] Transmission Request Pending Tx  Buffer 27 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP28:1;           /**< \brief [28:28] Transmission Request Pending Tx  Buffer 28 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP29:1;           /**< \brief [29:29] Transmission Request Pending Tx  Buffer 29 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP30:1;           /**< \brief [30:30] Transmission Request Pending Tx  Buffer 30 - TRP (rh) */
    __I  Ifx_UReg_32Bit TRP31:1;           /**< \brief [31:31] Transmission Request Pending Tx  Buffer 31 - TRP (rh) */
} Ifx_CAN_N_TX_BRP_Bits;

/** \brief Node 0 Tx Buffer Transmission Interrupt Enable */
typedef struct _Ifx_CAN_N_TX_BTIE_Bits
{
    __IO Ifx_UReg_32Bit TIE0:1;            /**< \brief [0:0] Transmission Interrupt Enable Tx Buffer 0 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE1:1;            /**< \brief [1:1] Transmission Interrupt Enable Tx Buffer 1 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE2:1;            /**< \brief [2:2] Transmission Interrupt Enable Tx Buffer 2 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE3:1;            /**< \brief [3:3] Transmission Interrupt Enable Tx Buffer 3 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE4:1;            /**< \brief [4:4] Transmission Interrupt Enable Tx Buffer 4 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE5:1;            /**< \brief [5:5] Transmission Interrupt Enable Tx Buffer 5 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE6:1;            /**< \brief [6:6] Transmission Interrupt Enable Tx Buffer 6 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE7:1;            /**< \brief [7:7] Transmission Interrupt Enable Tx Buffer 7 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE8:1;            /**< \brief [8:8] Transmission Interrupt Enable Tx Buffer 8 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE9:1;            /**< \brief [9:9] Transmission Interrupt Enable Tx Buffer 9 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE10:1;           /**< \brief [10:10] Transmission Interrupt Enable Tx Buffer 10 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE11:1;           /**< \brief [11:11] Transmission Interrupt Enable Tx Buffer 11 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE12:1;           /**< \brief [12:12] Transmission Interrupt Enable Tx Buffer 12 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE13:1;           /**< \brief [13:13] Transmission Interrupt Enable Tx Buffer 13 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE14:1;           /**< \brief [14:14] Transmission Interrupt Enable Tx Buffer 14 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE15:1;           /**< \brief [15:15] Transmission Interrupt Enable Tx Buffer 15 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE16:1;           /**< \brief [16:16] Transmission Interrupt Enable Tx Buffer 16 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE17:1;           /**< \brief [17:17] Transmission Interrupt Enable Tx Buffer 17 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE18:1;           /**< \brief [18:18] Transmission Interrupt Enable Tx Buffer 18 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE19:1;           /**< \brief [19:19] Transmission Interrupt Enable Tx Buffer 19 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE20:1;           /**< \brief [20:20] Transmission Interrupt Enable Tx Buffer 20 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE21:1;           /**< \brief [21:21] Transmission Interrupt Enable Tx Buffer 21 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE22:1;           /**< \brief [22:22] Transmission Interrupt Enable Tx Buffer 22 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE23:1;           /**< \brief [23:23] Transmission Interrupt Enable Tx Buffer 23 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE24:1;           /**< \brief [24:24] Transmission Interrupt Enable Tx Buffer 24 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE25:1;           /**< \brief [25:25] Transmission Interrupt Enable Tx Buffer 25 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE26:1;           /**< \brief [26:26] Transmission Interrupt Enable Tx Buffer 26 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE27:1;           /**< \brief [27:27] Transmission Interrupt Enable Tx Buffer 27 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE28:1;           /**< \brief [28:28] Transmission Interrupt Enable Tx Buffer 28 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE29:1;           /**< \brief [29:29] Transmission Interrupt Enable Tx Buffer 29 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE30:1;           /**< \brief [30:30] Transmission Interrupt Enable Tx Buffer 30 - TIE (rw) */
    __IO Ifx_UReg_32Bit TIE31:1;           /**< \brief [31:31] Transmission Interrupt Enable Tx Buffer 31 - TIE (rw) */
} Ifx_CAN_N_TX_BTIE_Bits;

/** \brief Node 0 Tx Buffer Transmission Occurred */
typedef struct _Ifx_CAN_N_TX_BTO_Bits
{
    __I  Ifx_UReg_32Bit TO0:1;             /**< \brief [0:0] Transmission Occurred Tx Buffer 0 - TO (rh) */
    __I  Ifx_UReg_32Bit TO1:1;             /**< \brief [1:1] Transmission Occurred Tx Buffer 1 - TO (rh) */
    __I  Ifx_UReg_32Bit TO2:1;             /**< \brief [2:2] Transmission Occurred Tx Buffer 2 - TO (rh) */
    __I  Ifx_UReg_32Bit TO3:1;             /**< \brief [3:3] Transmission Occurred Tx Buffer 3 - TO (rh) */
    __I  Ifx_UReg_32Bit TO4:1;             /**< \brief [4:4] Transmission Occurred Tx Buffer 4 - TO (rh) */
    __I  Ifx_UReg_32Bit TO5:1;             /**< \brief [5:5] Transmission Occurred Tx Buffer 5 - TO (rh) */
    __I  Ifx_UReg_32Bit TO6:1;             /**< \brief [6:6] Transmission Occurred Tx Buffer 6 - TO (rh) */
    __I  Ifx_UReg_32Bit TO7:1;             /**< \brief [7:7] Transmission Occurred Tx Buffer 7 - TO (rh) */
    __I  Ifx_UReg_32Bit TO8:1;             /**< \brief [8:8] Transmission Occurred Tx Buffer 8 - TO (rh) */
    __I  Ifx_UReg_32Bit TO9:1;             /**< \brief [9:9] Transmission Occurred Tx Buffer 9 - TO (rh) */
    __I  Ifx_UReg_32Bit TO10:1;            /**< \brief [10:10] Transmission Occurred Tx Buffer 10 - TO (rh) */
    __I  Ifx_UReg_32Bit TO11:1;            /**< \brief [11:11] Transmission Occurred Tx Buffer 11 - TO (rh) */
    __I  Ifx_UReg_32Bit TO12:1;            /**< \brief [12:12] Transmission Occurred Tx Buffer 12 - TO (rh) */
    __I  Ifx_UReg_32Bit TO13:1;            /**< \brief [13:13] Transmission Occurred Tx Buffer 13 - TO (rh) */
    __I  Ifx_UReg_32Bit TO14:1;            /**< \brief [14:14] Transmission Occurred Tx Buffer 14 - TO (rh) */
    __I  Ifx_UReg_32Bit TO15:1;            /**< \brief [15:15] Transmission Occurred Tx Buffer 15 - TO (rh) */
    __I  Ifx_UReg_32Bit TO16:1;            /**< \brief [16:16] Transmission Occurred Tx Buffer 16 - TO (rh) */
    __I  Ifx_UReg_32Bit TO17:1;            /**< \brief [17:17] Transmission Occurred Tx Buffer 17 - TO (rh) */
    __I  Ifx_UReg_32Bit TO18:1;            /**< \brief [18:18] Transmission Occurred Tx Buffer 18 - TO (rh) */
    __I  Ifx_UReg_32Bit TO19:1;            /**< \brief [19:19] Transmission Occurred Tx Buffer 19 - TO (rh) */
    __I  Ifx_UReg_32Bit TO20:1;            /**< \brief [20:20] Transmission Occurred Tx Buffer 20 - TO (rh) */
    __I  Ifx_UReg_32Bit TO21:1;            /**< \brief [21:21] Transmission Occurred Tx Buffer 21 - TO (rh) */
    __I  Ifx_UReg_32Bit TO22:1;            /**< \brief [22:22] Transmission Occurred Tx Buffer 22 - TO (rh) */
    __I  Ifx_UReg_32Bit TO23:1;            /**< \brief [23:23] Transmission Occurred Tx Buffer 23 - TO (rh) */
    __I  Ifx_UReg_32Bit TO24:1;            /**< \brief [24:24] Transmission Occurred Tx Buffer 24 - TO (rh) */
    __I  Ifx_UReg_32Bit TO25:1;            /**< \brief [25:25] Transmission Occurred Tx Buffer 25 - TO (rh) */
    __I  Ifx_UReg_32Bit TO26:1;            /**< \brief [26:26] Transmission Occurred Tx Buffer 26 - TO (rh) */
    __I  Ifx_UReg_32Bit TO27:1;            /**< \brief [27:27] Transmission Occurred Tx Buffer 27 - TO (rh) */
    __I  Ifx_UReg_32Bit TO28:1;            /**< \brief [28:28] Transmission Occurred Tx Buffer 28 - TO (rh) */
    __I  Ifx_UReg_32Bit TO29:1;            /**< \brief [29:29] Transmission Occurred Tx Buffer 29 - TO (rh) */
    __I  Ifx_UReg_32Bit TO30:1;            /**< \brief [30:30] Transmission Occurred Tx Buffer 30 - TO (rh) */
    __I  Ifx_UReg_32Bit TO31:1;            /**< \brief [31:31] Transmission Occurred Tx Buffer 31 - TO (rh) */
} Ifx_CAN_N_TX_BTO_Bits;

/** \brief Node 0 Tx Event FIFO Acknowledge */
typedef struct _Ifx_CAN_N_TX_EFA_Bits
{
    __IO Ifx_UReg_32Bit EFAI:5;            /**< \brief [4:0] Event FIFO Acknowledge Index - EFAI (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_CAN_N_TX_EFA_Bits;

/** \brief Node 0 Tx Event FIFO Configuration */
typedef struct _Ifx_CAN_N_TX_EFC_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit EFSA:14;           /**< \brief [15:2] Event FIFO Start Address - EFSA (rw) */
    __IO Ifx_UReg_32Bit EFS:6;             /**< \brief [21:16] Event FIFO Size - EFS (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit EFWM:6;            /**< \brief [29:24] Event FIFO Watermark - EFWM (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CAN_N_TX_EFC_Bits;

/** \brief Node 0 Tx Event FIFO Status */
typedef struct _Ifx_CAN_N_TX_EFS_Bits
{
    __I  Ifx_UReg_32Bit EFFL:6;            /**< \brief [5:0] Event FIFO Fill Level - EFFL (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit EFGI:5;            /**< \brief [12:8] Event FIFO Get Index - EFGI (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit EFPI:5;            /**< \brief [20:16] Event FIFO Put Index - EFPI (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __I  Ifx_UReg_32Bit EFF:1;             /**< \brief [24:24] Event FIFO Full - EFF (rh) */
    __I  Ifx_UReg_32Bit TEFL:1;            /**< \brief [25:25] Tx Event FIFO Element Lost - TEFL (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_CAN_N_TX_EFS_Bits;

/** \brief Node 0 Tx Buffer Element Size Configuration */
typedef struct _Ifx_CAN_N_TX_ESC_Bits
{
    __IO Ifx_UReg_32Bit TBDS:3;            /**< \brief [2:0] Tx Buffer Data Field Size - TBDS (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_CAN_N_TX_ESC_Bits;

/** \brief Node 0 Tx FIFO/Queue Status */
typedef struct _Ifx_CAN_N_TX_FQS_Bits
{
    __I  Ifx_UReg_32Bit TFFL:6;            /**< \brief [5:0] Tx FIFO Free Level - TFFL (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __I  Ifx_UReg_32Bit TFGI:5;            /**< \brief [12:8] Tx FIFO Get Index - TFGI (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit TFQPI:5;           /**< \brief [20:16] Tx FIFO/Queue Put Index - TFQPI (rh) */
    __I  Ifx_UReg_32Bit TFQF:1;            /**< \brief [21:21] Tx FIFO/Queue Full - TFQF (rh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_CAN_N_TX_FQS_Bits;

/** \brief Node 0 Extended ID AND Mask */
typedef struct _Ifx_CAN_N_XIDAM_Bits
{
    __IO Ifx_UReg_32Bit EIDM:29;           /**< \brief [28:0] Extended ID Mask - EIDM (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_CAN_N_XIDAM_Bits;

/** \brief Node 0 Extended ID Filter Configuration */
typedef struct _Ifx_CAN_N_XIDFC_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit FLESA:14;          /**< \brief [15:2] Filter List Extended Start Address - FLESA (rw) */
    __IO Ifx_UReg_32Bit LSE:7;             /**< \brief [22:16] List Size Extended - LSE (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_CAN_N_XIDFC_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_CAN_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0/1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 Bus Select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CAN_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_CAN_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_CAN_PROT_Bits;

/** \brief CRE computed CRC */
typedef struct _Ifx_CAN_RHBUF_CRC_Bits
{
    __IO Ifx_UReg_32Bit CRC:16;            /**< \brief [15:0] CRC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_RHBUF_CRC_Bits;

/** \brief Long PDU header 0 */
typedef struct _Ifx_CAN_RHBUF_LPDUH0_Bits
{
    __IO Ifx_UReg_32Bit TYP:3;             /**< \brief [2:0] PDU Header type (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [27:3] \internal Reserved */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [31:28] Data Length Code (rwh) */
} Ifx_CAN_RHBUF_LPDUH0_Bits;

/** \brief Long PDU header 1 */
typedef struct _Ifx_CAN_RHBUF_LPDUH1_Bits
{
    __IO Ifx_UReg_32Bit ID:32;             /**< \brief [31:0] PDU ID (rwh) */
} Ifx_CAN_RHBUF_LPDUH1_Bits;

/** \brief Multi-cast Routing Header 0 */
typedef struct _Ifx_CAN_RHBUF_MCRH_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines type of routing (rw) */
    __IO Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] ID of Source node receiving CAN Frame (rw) */
    __IO Ifx_UReg_32Bit DID0:6;            /**< \brief [13:8] 1st Destination of Recieved CAN Frame (rw) */
    __IO Ifx_UReg_32Bit DID1:6;            /**< \brief [19:14] 2nd Destination of Recieved CAN Frame (rw) */
    __IO Ifx_UReg_32Bit DID2:6;            /**< \brief [25:20] 3rd Destination of Recieved CAN Frame (rw) */
    __IO Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] 4th Destination of Recieved CAN Frame (rw) */
} Ifx_CAN_RHBUF_MCRH_Bits;

/** \brief RHBUF 0 Register 0 */
typedef struct _Ifx_CAN_RHBUF_R0_Bits
{
    __IO Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] Identifier (rwh) */
    __IO Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rwh) */
    __IO Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rwh) */
    __IO Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rwh) */
} Ifx_CAN_RHBUF_R0_Bits;

/** \brief RHBUF 0 Register 1 */
typedef struct _Ifx_CAN_RHBUF_R1_Bits
{
    __IO Ifx_UReg_32Bit RXTS:16;           /**< \brief [15:0] Rx Timestamp (rwh) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit FIDX:7;            /**< \brief [30:24] Filter Index (rwh) */
    __IO Ifx_UReg_32Bit ANMF:1;            /**< \brief [31:31] Accepted Non-matching Frame (rwh) */
} Ifx_CAN_RHBUF_R1_Bits;

/** \brief Short PDU header */
typedef struct _Ifx_CAN_RHBUF_SPDUH_Bits
{
    __IO Ifx_UReg_32Bit TYP:3;             /**< \brief [2:0] PDU Header type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit ID:24;             /**< \brief [27:4] PDU ID (rwh) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [31:28] Data Length Code (rwh) */
} Ifx_CAN_RHBUF_SPDUH_Bits;

/** \brief Timing Header 0 Intrusion Detection Information */
typedef struct _Ifx_CAN_RHBUF_THEAD_INTRD_Bits
{
    __IO Ifx_UReg_32Bit IAM:28;            /**< \brief [27:0] Inter Arrival Measure (rwh) */
    __IO Ifx_UReg_32Bit TSC:1;             /**< \brief [28:28] Timestamp Captured (rwh) */
    __IO Ifx_UReg_32Bit TSCLEN:1;          /**< \brief [29:29] Timestamp Captured Length (rwh) */
    __IO Ifx_UReg_32Bit IAMSTAT:1;         /**< \brief [30:30] Inter Arrival Measure Status (rwh) */
    __IO Ifx_UReg_32Bit TSL:1;             /**< \brief [31:31] Timestamp lost (rwh) */
} Ifx_CAN_RHBUF_THEAD_INTRD_Bits;

/** \brief Timing Header 0 Rx Timestamp */
typedef struct _Ifx_CAN_RHBUF_THEAD_RXTS_Bits
{
    __IO Ifx_UReg_32Bit RXTS:32;           /**< \brief [31:0] External Timestamp (rwh) */
} Ifx_CAN_RHBUF_THEAD_RXTS_Bits;

/** \brief Uni-cast Routing Header 0 */
typedef struct _Ifx_CAN_RHBUF_UCRH_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines type of routing (rw) */
    __IO Ifx_UReg_32Bit SID:6;             /**< \brief [7:2] ID of Source node receiving CAN Frame (rw) */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [13:8] Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_CAN_RHBUF_UCRH_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_CAN_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CAN_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_CAN_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_CAN_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_CAN_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CAN_RST_STAT_Bits;

/** \brief Data Byte m */
typedef struct _Ifx_CAN_RXMSG_DB_Bits
{
    __IO Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rwh) */
} Ifx_CAN_RXMSG_DB_Bits;

/** \brief Register 0 */
typedef struct _Ifx_CAN_RXMSG_R0_Bits
{
    __IO Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] Identifier (rwh) */
    __IO Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rwh) */
    __IO Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rwh) */
    __IO Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rwh) */
} Ifx_CAN_RXMSG_R0_Bits;

/** \brief Register 1 A */
typedef struct _Ifx_CAN_RXMSG_R1A_Bits
{
    __IO Ifx_UReg_32Bit RXTS:16;           /**< \brief [15:0] Rx Timestamp (rwh) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit FIDX:7;            /**< \brief [30:24] Filter Index (rwh) */
    __IO Ifx_UReg_32Bit ANMF:1;            /**< \brief [31:31] Accepted Non-matching Frame (rwh) */
} Ifx_CAN_RXMSG_R1A_Bits;

/** \brief Register 1 B */
typedef struct _Ifx_CAN_RXMSG_R1B_Bits
{
    __IO Ifx_UReg_32Bit RXTSP:4;           /**< \brief [3:0] Rx Timestamp Pointer (rwh) */
    __IO Ifx_UReg_32Bit TSC:1;             /**< \brief [4:4] Timestamp Captured (rwh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] Frame Data Format (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit FIDX:7;            /**< \brief [30:24] Filter Index (rwh) */
    __IO Ifx_UReg_32Bit ANMF:1;            /**< \brief [31:31] Accepted Non-matching Frame (rwh) */
} Ifx_CAN_RXMSG_R1B_Bits;

/** \brief Standard ID Frame Rate Measure */
typedef struct _Ifx_CAN_SFR_FR_Bits
{
    __IO Ifx_UReg_32Bit FR1:16;            /**< \brief [15:0] Frame Rate Measure 1 (rwh) */
    __IO Ifx_UReg_32Bit FR2:16;            /**< \brief [31:16] Frame Rate Measure 2 (rwh) */
} Ifx_CAN_SFR_FR_Bits;

/** \brief Standard routing table Multi-cast Rule */
typedef struct _Ifx_CAN_SRT_MCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines the type of the routing (rw) */
    __IO Ifx_UReg_32Bit DID0:6;            /**< \brief [7:2] 1st Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [9:8] \internal Reserved */
    __IO Ifx_UReg_32Bit DID1:6;            /**< \brief [15:10] 2nd Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __IO Ifx_UReg_32Bit DID2:6;            /**< \brief [23:18] 3rd Destination of Recieved CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [25:24] \internal Reserved */
    __IO Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] 4th Destination of Recieved CAN Frame (rw) */
} Ifx_CAN_SRT_MCR_Bits;

/** \brief Standard routing table PDU Routing Rule */
typedef struct _Ifx_CAN_SRT_PR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines the type of the routing (rw) */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [7:2] Destination ID of system memory (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [12:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TYP:3;             /**< \brief [15:13] PDU Header type (rw) */
    __IO Ifx_UReg_32Bit MD:16;             /**< \brief [31:16] Metadata (rw) */
} Ifx_CAN_SRT_PR_Bits;

/** \brief Standard routing table Uni-cast Rule */
typedef struct _Ifx_CAN_SRT_UCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines the type of the routing (rw) */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [7:2] Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [9:8] \internal Reserved */
    __O  Ifx_UReg_32Bit FDFM:1;            /**< \brief [10:10] CAN Frame Format Modifier enable bit (w) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [11:11] Indicates if Received Frames is Classical or CAN-FD Frame (rw) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [15:12] Indicates modification of Data Length Code of received frame (rw) */
    __IO Ifx_UReg_32Bit IDXOR:11;          /**< \brief [26:16] CAN Frame ID modifier (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_CAN_SRT_UCR_Bits;

/** \brief Standard Message 0 */
typedef struct _Ifx_CAN_STDMSG_S0_Bits
{
    __IO Ifx_UReg_32Bit SFID2:11;          /**< \brief [10:0] Standard Filter ID 2 (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __IO Ifx_UReg_32Bit SSYNC:1;           /**< \brief [15:15] Standard Sync Message (rwh) */
    __IO Ifx_UReg_32Bit SFID1:11;          /**< \brief [26:16] Standard Filter ID 1 (rw) */
    __IO Ifx_UReg_32Bit SFEC:3;            /**< \brief [29:27] Standard Filter Element Configuration (rw) */
    __IO Ifx_UReg_32Bit SFT:2;             /**< \brief [31:30] Standard Filter Type (rw) */
} Ifx_CAN_STDMSG_S0_Bits;

/** \brief Standard ID Reference Timestamp */
typedef struct _Ifx_CAN_STSD_RTS_Bits
{
    __IO Ifx_UReg_32Bit TS:32;             /**< \brief [31:0] Reference Timestamp (rwh) */
} Ifx_CAN_STSD_RTS_Bits;

/** \brief  */
typedef struct _Ifx_CAN_TABLE_CONFIG_Bits
{
    __IO Ifx_UReg_32Bit SA:14;             /**< \brief [13:0] Start address of the table (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit SIZE:8;            /**< \brief [23:16] Size of the table (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CAN_TABLE_CONFIG_Bits;

/** \brief Tx Host Buffer CRC */
typedef struct _Ifx_CAN_THBUF_CRC_Bits
{
    __IO Ifx_UReg_32Bit CRC:16;            /**< \brief [15:0] CRC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_THBUF_CRC_Bits;

/** \brief Transmit Host Buffer Data Byte m */
typedef struct _Ifx_CAN_THBUF_DB_Bits
{
    __IO Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rw) */
} Ifx_CAN_THBUF_DB_Bits;

/** \brief Transmit Host Buffer Word 0 */
typedef struct _Ifx_CAN_THBUF_T0_Bits
{
    __IO Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] Identifier (rw) */
    __IO Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rw) */
    __IO Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rw) */
    __IO Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rw) */
} Ifx_CAN_THBUF_T0_Bits;

/** \brief Transmit Host Buffer Word 1 */
typedef struct _Ifx_CAN_THBUF_T1_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit MM1:8;             /**< \brief [15:8] Message Marker (rw) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rw) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switching (rw) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] FD Format (rw) */
    __IO Ifx_UReg_32Bit TSCE:1;            /**< \brief [22:22] Timestamp Capture Enable for TSU (rw) */
    __IO Ifx_UReg_32Bit EFC:1;             /**< \brief [23:23] Event FIFO Control (rw) */
    __IO Ifx_UReg_32Bit MM:8;              /**< \brief [31:24] Message Marker (rw) */
} Ifx_CAN_THBUF_T1_Bits;

/** \brief Event 0 */
typedef struct _Ifx_CAN_TXEVENT_E0_Bits
{
    __IO Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] Identifier (rwh) */
    __IO Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rwh) */
    __IO Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rwh) */
    __IO Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rwh) */
} Ifx_CAN_TXEVENT_E0_Bits;

/** \brief Event 1A */
typedef struct _Ifx_CAN_TXEVENT_E1A_Bits
{
    __IO Ifx_UReg_32Bit TXTS:16;           /**< \brief [15:0] Tx Timestamp (rwh) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] FD Format (rwh) */
    __IO Ifx_UReg_32Bit ET:2;              /**< \brief [23:22] Event Type (rwh) */
    __IO Ifx_UReg_32Bit MM:8;              /**< \brief [31:24] Message Marker (rwh) */
} Ifx_CAN_TXEVENT_E1A_Bits;

/** \brief Event 1B */
typedef struct _Ifx_CAN_TXEVENT_E1B_Bits
{
    __IO Ifx_UReg_32Bit TXTSP:4;           /**< \brief [3:0] Tx Timestamp Pointer (rwh) */
    __IO Ifx_UReg_32Bit TSC:1;             /**< \brief [4:4] Timestamp Captured (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit MM1:8;             /**< \brief [15:8] Message Marker (rw) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rwh) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switch (rwh) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] FD Format (rwh) */
    __IO Ifx_UReg_32Bit ET:2;              /**< \brief [23:22] Event Type (rwh) */
    __IO Ifx_UReg_32Bit MM0:8;             /**< \brief [31:24] Message Marker (rwh) */
} Ifx_CAN_TXEVENT_E1B_Bits;

/** \brief Data Byte m */
typedef struct _Ifx_CAN_TXMSG_DB_Bits
{
    __IO Ifx_UReg_8Bit DB:8;               /**< \brief [7:0] Data Byte m (rw) */
} Ifx_CAN_TXMSG_DB_Bits;

/** \brief Transmit Buffer 0 */
typedef struct _Ifx_CAN_TXMSG_T0_Bits
{
    __IO Ifx_UReg_32Bit ID:29;             /**< \brief [28:0] Identifier (rw) */
    __IO Ifx_UReg_32Bit RTR:1;             /**< \brief [29:29] Remote Transmission Request (rw) */
    __IO Ifx_UReg_32Bit XTD:1;             /**< \brief [30:30] Extended Identifier (rw) */
    __IO Ifx_UReg_32Bit ESI:1;             /**< \brief [31:31] Error State Indicator (rw) */
} Ifx_CAN_TXMSG_T0_Bits;

/** \brief Transmit Buffer 1 */
typedef struct _Ifx_CAN_TXMSG_T1_Bits
{
    __I  Ifx_UReg_32Bit :8;                /**< \brief [7:0] \internal Reserved */
    __IO Ifx_UReg_32Bit MM1:8;             /**< \brief [15:8] Message Marker (rw) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [19:16] Data Length Code (rw) */
    __IO Ifx_UReg_32Bit BRS:1;             /**< \brief [20:20] Bit Rate Switching (rw) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [21:21] FD Format (rw) */
    __IO Ifx_UReg_32Bit TSCE:1;            /**< \brief [22:22] Time Stamp Captuer Enable for TSU (rw) */
    __IO Ifx_UReg_32Bit EFC:1;             /**< \brief [23:23] Event FIFO Control (rw) */
    __IO Ifx_UReg_32Bit MM0:8;             /**< \brief [31:24] Message Marker (rw) */
} Ifx_CAN_TXMSG_T1_Bits;

/** \brief CRE Watchdog timer register */
typedef struct _Ifx_CAN_WDT_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] Enable watchdog (rw) */
    __IO Ifx_UReg_32Bit FWDP:15;           /**< \brief [15:1] Fast Watchdog prescaler (rw) */
    __IO Ifx_UReg_32Bit SWDP:16;           /**< \brief [31:16] Slow Watchdog prescaler (rwh) */
} Ifx_CAN_WDT_Bits;

/** \brief Extended ID Frame Rate Measure */
typedef struct _Ifx_CAN_XFR_FR_Bits
{
    __IO Ifx_UReg_32Bit FR1:16;            /**< \brief [15:0] Frame Rate Measure 1 (rwh) */
    __IO Ifx_UReg_32Bit FR2:16;            /**< \brief [31:16] Frame Rate Measure 2 (rwh) */
} Ifx_CAN_XFR_FR_Bits;

/** \brief Extended routing table Multi-cast Rule */
typedef struct _Ifx_CAN_XRT_MCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Definition of type of routing table (rw) */
    __IO Ifx_UReg_32Bit DID0:6;            /**< \brief [7:2] 1st Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [9:8] \internal Reserved */
    __IO Ifx_UReg_32Bit DID1:6;            /**< \brief [15:10] 2nd Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [17:16] \internal Reserved */
    __IO Ifx_UReg_32Bit DID2:6;            /**< \brief [23:18] 3rd Destination of Received CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [25:24] \internal Reserved */
    __IO Ifx_UReg_32Bit DID3:6;            /**< \brief [31:26] 4th Destination of Received CAN Frame (rw) */
} Ifx_CAN_XRT_MCR_Bits;

/** \brief Extended ID routing table PDU Routing Rule */
typedef struct _Ifx_CAN_XRT_PR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines the type of the routing (rw) */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [7:2] Destination ID of system memory (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [12:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TYP:3;             /**< \brief [15:13] PDU Header type (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_CAN_XRT_PR_Bits;

/** \brief Extended routing table Uni-cast Rule */
typedef struct _Ifx_CAN_XRT_UCR_Bits
{
    __IO Ifx_UReg_32Bit MODE:2;            /**< \brief [1:0] Defines the type of routing table (rw) */
    __IO Ifx_UReg_32Bit DID:6;             /**< \brief [7:2] Destination of Recieved CAN Frame (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [9:8] \internal Reserved */
    __O  Ifx_UReg_32Bit FDFM:1;            /**< \brief [10:10] CAN Frame Format Modifier enable bit (w) */
    __IO Ifx_UReg_32Bit FDF:1;             /**< \brief [11:11] Indicates if recieved Frame is Classical or FD Format (rw) */
    __IO Ifx_UReg_32Bit DLC:4;             /**< \brief [15:12] Data Length Code (rw) */
    __IO Ifx_UReg_32Bit IDXOR:11;          /**< \brief [26:16] CAN Frame ID modifier (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [28:27] \internal Reserved */
    __IO Ifx_UReg_32Bit IDSHIFT:3;         /**< \brief [31:29] CAN Frame ID Modifier (rw) */
} Ifx_CAN_XRT_UCR_Bits;

/** \brief Extended ID Reference Timestamp */
typedef struct _Ifx_CAN_XTSD_RTS_Bits
{
    __IO Ifx_UReg_32Bit TS:32;             /**< \brief [31:0] Reference Timestamp (rwh) */
} Ifx_CAN_XTSD_RTS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_can_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_CAN_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_CAN_ACCEN_WRB_FPI;

/** \brief Buffer receive address and transmit address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_BUFADR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_BUFADR;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_CAN_CLC;

/** \brief CRE abort sequence register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_CRE_ABORT_SEQ_Bits B;          /**< \brief Bitfield access */
} Ifx_CAN_CRE_ABORT_SEQ;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_CAN_DB_Bits B;                     /**< \brief Bitfield access */
} Ifx_CAN_DB;

/** \brief Filter Element 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_EXTMSG_F0_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_EXTMSG_F0;

/** \brief Filter Element 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_EXTMSG_F1_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_EXTMSG_F1;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_CAN_ID;

/** \brief Module Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_MCR_Bits B;                    /**< \brief Bitfield access */
} Ifx_CAN_MCR;

/** \brief Measure Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_MECR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CAN_MECR;

/** \brief Measure Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_MESTAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_MESTAT;

/** \brief Node 0 CC Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CCCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_CCCR;

/** \brief Node 0 Core Release Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CREL_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_CREL;

/** \brief Node 0 CRE Configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_CONFIG_Bits B;           /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_CONFIG;

/** \brief Node 0 CRE Configuration Start Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_CONFIGADR_Bits B;        /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_CONFIGADR;

/** \brief Node 0 Receive Host Buffer 0  Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_HBUF_RX_CONFIG_Bits B;    /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_HBUF_RX_CONFIG;

/** \brief Node 0 Receive Host Buffer 0  Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_HBUF_RX_STAT_Bits B;     /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_HBUF_RX_STAT;

/** \brief Node 0 Transmit Host Buffer 0 Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_HBUF_TX_CONFIG_Bits B;    /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_HBUF_TX_CONFIG;

/** \brief Node 0 Transmit Host Buffer 0 Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_HBUF_TX_STAT_Bits B;     /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_HBUF_TX_STAT;

/** \brief Node 0 CRE Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_CRE_IR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_CRE_IR;

/** \brief Node 0 Data Bit Timing & Prescaler Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_DBTP_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_DBTP;

/** \brief Node 0 Error Counter Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_ECR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CAN_N_ECR;

/** \brief Node 0 End Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_ENDADR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_ENDADR;

/** \brief Node 0 Endian Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_ENDN_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_ENDN;

/** \brief Node 0 CRE Error control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_ERRCTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_N_ERRCTRL;

/** \brief Node 0 Interrupt routing for Group 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_G0INTR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_G0INTR;

/** \brief Node 0 Interrupt routing for Group 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_G1INTR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_G1INTR;

/** \brief Node 0 Interrupt routing for Group 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_G2INTR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_G2INTR;

/** \brief Node 0 Global Filter Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_GFC_Bits B;                  /**< \brief Bitfield access */
} Ifx_CAN_N_GFC;

/** \brief Node 0 High Priority Message Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_HPMS_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_HPMS;

/** \brief Node 0 Frame Rate Measure Table Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_IDMU_FRTCONFIG_Bits B;       /**< \brief Bitfield access */
} Ifx_CAN_N_IDMU_FRTCONFIG;

/** \brief Node 0 Rx Throughput Measure configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_IDMU_RXTPCFG_Bits B;         /**< \brief Bitfield access */
} Ifx_CAN_N_IDMU_RXTPCFG;

/** \brief Node 0 Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_IE_Bits B;                   /**< \brief Bitfield access */
} Ifx_CAN_N_IE;

/** \brief Node 0 Interrupt Signalling Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_INTRSIG_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_N_INTRSIG;

/** \brief Node 0 Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_IR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CAN_N_IR;

/** \brief Node 0 Nominal Bit Timing & Prescaler Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_NBTP_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_NBTP;

/** \brief Node 0 New Data 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_NDAT1_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_NDAT1;

/** \brief Node 0 New Data 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_NDAT2_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_NDAT2;

/** \brief Node 0 Port Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_PORTCTRL_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_N_PORTCTRL;

/** \brief Node 0 Protocol Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_PSR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CAN_N_PSR;

/** \brief Node 0 RAM Watchdog   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RWD_Bits B;                  /**< \brief Bitfield access */
} Ifx_CAN_N_RWD;

/** \brief Node 0 Rx Buffer Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_BC_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_RX_BC;

/** \brief Node 0 Rx Buffer/FIFO Element Size Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_ESC_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_ESC;

/** \brief Node 0 Rx FIFO 0 Acknowledge   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_F0A_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_F0A;

/** \brief Node 0 Rx FIFO 0 Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_F0C_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_F0C;

/** \brief Node 0 Rx FIFO 0 Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_F0S_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_F0S;

/** \brief Node 0 Rx FIFO 1 Acknowledge   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_F1A_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_F1A;

/** \brief Node 0 Rx FIFO 1 Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_F1C_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_F1C;

/** \brief Node 0 Rx FIFO 1 Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_RX_F1S_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_RX_F1S;

/** \brief Node 0 Standard ID Filter Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_SIDFC_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_SIDFC;

/** \brief Node 0 Start Address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_STARTADR_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_N_STARTADR;

/** \brief Node 0 Transmitter Delay Compensation Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TDCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_TDCR;

/** \brief Node 0 Test Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TEST_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_TEST;

/** \brief Node 0 Timer Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TIMER_CCR_Bits B;            /**< \brief Bitfield access */
} Ifx_CAN_N_TIMER_CCR;

/** \brief Node 0 Timer Receive Timeout Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TIMER_RXTOUT_Bits B;         /**< \brief Bitfield access */
} Ifx_CAN_N_TIMER_RXTOUT;

/** \brief Node 0 Timer Transmit Trigger 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TIMER_TXTRIG0_Bits B;        /**< \brief Bitfield access */
} Ifx_CAN_N_TIMER_TXTRIG0;

/** \brief Node 0 Timer Transmit Trigger 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TIMER_TXTRIG1_Bits B;        /**< \brief Bitfield access */
} Ifx_CAN_N_TIMER_TXTRIG1;

/** \brief Node 0 Timer Transmit Trigger 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TIMER_TXTRIG2_Bits B;        /**< \brief Bitfield access */
} Ifx_CAN_N_TIMER_TXTRIG2;

/** \brief Node 0 Timeout Counter Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TOCC_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_TOCC;

/** \brief Node 0 Timeout Counter Value   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TOCV_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_TOCV;

/** \brief Node 0 Timestamp Counter Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSCC_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_TSCC;

/** \brief Node 0 Timestamp Counter Value   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSCV_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_N_TSCV;

/** \brief Node 0 Actual Timebase   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSU_ATB_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_N_TSU_ATB;

/** \brief Node 0 TSU Core Release Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSU_CREL_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_N_TSU_CREL;

/** \brief Node 0 Timestamp 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSU_TS_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TSU_TS;

/** \brief Node 0 Timestamp Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSU_TSCFG_Bits B;            /**< \brief Bitfield access */
} Ifx_CAN_N_TSU_TSCFG;

/** \brief Node 0 Timestamp Status 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSU_TSS1_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_N_TSU_TSS1;

/** \brief Node 0 Timestamp Status 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TSU_TSS2_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_N_TSU_TSS2;

/** \brief Node 0 Tx Buffer Add Request   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BAR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BAR;

/** \brief Node 0 Tx Buffer Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BC_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BC;

/** \brief Node 0 Tx Buffer Cancellation Finished   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BCF_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BCF;

/** \brief Node 0 Tx Buffer Cancellation Finished Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BCIE_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BCIE;

/** \brief Node 0 Tx Buffer Cancellation Request   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BCR_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BCR;

/** \brief Node 0 Tx Buffer Request Pending   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BRP_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BRP;

/** \brief Node 0 Tx Buffer Transmission Interrupt Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BTIE_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BTIE;

/** \brief Node 0 Tx Buffer Transmission Occurred   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_BTO_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_BTO;

/** \brief Node 0 Tx Event FIFO Acknowledge   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_EFA_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_EFA;

/** \brief Node 0 Tx Event FIFO Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_EFC_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_EFC;

/** \brief Node 0 Tx Event FIFO Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_EFS_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_EFS;

/** \brief Node 0 Tx Buffer Element Size Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_ESC_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_ESC;

/** \brief Node 0 Tx FIFO/Queue Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_TX_FQS_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_N_TX_FQS;

/** \brief Node 0 Extended ID AND Mask   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_XIDAM_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_XIDAM;

/** \brief Node 0 Extended ID Filter Configuration   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_N_XIDFC_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_N_XIDFC;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_CAN_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CAN_PROT;

/** \brief CRE computed CRC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_CRC_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_CRC;

/** \brief Long PDU header 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_LPDUH0_Bits B;           /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_LPDUH0;

/** \brief Long PDU header 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_LPDUH1_Bits B;           /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_LPDUH1;

/** \brief Multi-cast Routing Header 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_MCRH_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_MCRH;

/** \brief RHBUF 0 Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_R0_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_R0;

/** \brief RHBUF 0 Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_R1_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_R1;

/** \brief Short PDU header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_SPDUH_Bits B;            /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_SPDUH;

/** \brief Timing Header 0 Intrusion Detection Information   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_THEAD_INTRD_Bits B;      /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_THEAD_INTRD;

/** \brief Timing Header 0 Rx Timestamp   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_THEAD_RXTS_Bits B;       /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_THEAD_RXTS;

/** \brief Uni-cast Routing Header 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RHBUF_UCRH_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_RHBUF_UCRH;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_RST_STAT;

/** \brief Data Byte m   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_CAN_RXMSG_DB_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_RXMSG_DB;

/** \brief Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RXMSG_R0_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_RXMSG_R0;

/** \brief Register 1 A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RXMSG_R1A_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_RXMSG_R1A;

/** \brief Register 1 B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_RXMSG_R1B_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_RXMSG_R1B;

/** \brief Standard ID Frame Rate Measure   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_SFR_FR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_SFR_FR;

/** \brief Standard routing table Multi-cast Rule   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_SRT_MCR_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_SRT_MCR;

/** \brief Standard routing table PDU Routing Rule   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_SRT_PR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_SRT_PR;

/** \brief Standard routing table Uni-cast Rule   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_SRT_UCR_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_SRT_UCR;

/** \brief Standard Message 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_STDMSG_S0_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_STDMSG_S0;

/** \brief Standard ID Reference Timestamp   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_STSD_RTS_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_STSD_RTS;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_TABLE_CONFIG_Bits B;           /**< \brief Bitfield access */
} Ifx_CAN_TABLE_CONFIG;

/** \brief Tx Host Buffer CRC   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_THBUF_CRC_Bits B;              /**< \brief Bitfield access */
} Ifx_CAN_THBUF_CRC;

/** \brief Transmit Host Buffer Data Byte m   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_CAN_THBUF_DB_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_THBUF_DB;

/** \brief Transmit Host Buffer Word 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_THBUF_T0_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_THBUF_T0;

/** \brief Transmit Host Buffer Word 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_THBUF_T1_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_THBUF_T1;

/** \brief Event 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_TXEVENT_E0_Bits B;             /**< \brief Bitfield access */
} Ifx_CAN_TXEVENT_E0;

/** \brief Event 1A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_TXEVENT_E1A_Bits B;            /**< \brief Bitfield access */
} Ifx_CAN_TXEVENT_E1A;

/** \brief Event 1B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_TXEVENT_E1B_Bits B;            /**< \brief Bitfield access */
} Ifx_CAN_TXEVENT_E1B;

/** \brief Data Byte m   */
typedef union
{
    __IO Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    __IO Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_CAN_TXMSG_DB_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_TXMSG_DB;

/** \brief Transmit Buffer 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_TXMSG_T0_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_TXMSG_T0;

/** \brief Transmit Buffer 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_TXMSG_T1_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_TXMSG_T1;

/** \brief CRE Watchdog timer register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_WDT_Bits B;                    /**< \brief Bitfield access */
} Ifx_CAN_WDT;

/** \brief Extended ID Frame Rate Measure   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_XFR_FR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_XFR_FR;

/** \brief Extended routing table Multi-cast Rule   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_XRT_MCR_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_XRT_MCR;

/** \brief Extended ID routing table PDU Routing Rule   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_XRT_PR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CAN_XRT_PR;

/** \brief Extended routing table Uni-cast Rule   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_XRT_UCR_Bits B;                /**< \brief Bitfield access */
} Ifx_CAN_XRT_UCR;

/** \brief Extended ID Reference Timestamp   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CAN_XTSD_RTS_Bits B;               /**< \brief Bitfield access */
} Ifx_CAN_XTSD_RTS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_CAN_RST
{
       __IO Ifx_CAN_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_CAN_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_CAN_RST_STAT                    STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_CAN_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_CAN_ACCEN
{
       __IO Ifx_CAN_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_CAN_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_CAN_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_CAN_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_CAN_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_CAN_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CAN_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_CAN_N_ACCEN
{
       __IO Ifx_CAN_ACCEN_WRA                   WRA;                    /**< \brief 0, Node 0 Write access enable register A*/
       __IO Ifx_CAN_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Node 0 Write access enable register B*/
       __IO Ifx_CAN_ACCEN_RDA                   RDA;                    /**< \brief 8, Node 0 Read access enable register A*/
       __IO Ifx_CAN_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Node 0 Read access enable register B*/
       __IO Ifx_CAN_ACCEN_VM                    VM;                     /**< \brief 10, Node 0 VM access enable register*/
       __IO Ifx_CAN_ACCEN_PRS                   PRS;                    /**< \brief 14, Node 0 PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CAN_N_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_TIMER_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief TIMER object */
typedef volatile struct _Ifx_CAN_N_TIMER
{
       __IO Ifx_CAN_N_TIMER_CCR                 CCR;                    /**< \brief 0, Node 0 Timer Clock Control Register*/
       __IO Ifx_CAN_N_TIMER_TXTRIG0             TXTRIG0;                /**< \brief 4, Node 0 Timer Transmit Trigger 0 Register*/
       __IO Ifx_CAN_N_TIMER_TXTRIG1             TXTRIG1;                /**< \brief 8, Node 0 Timer Transmit Trigger 1 Register*/
       __IO Ifx_CAN_N_TIMER_TXTRIG2             TXTRIG2;                /**< \brief C, Node 0 Timer Transmit Trigger 2 Register*/
       __IO Ifx_CAN_N_TIMER_RXTOUT              RXTOUT;                 /**< \brief 10, Node 0 Timer Receive Timeout Register*/
} Ifx_CAN_N_TIMER;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_CRE_HBUF_RX_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief RX object */
typedef volatile struct _Ifx_CAN_N_CRE_HBUF_RX
{
       __IO Ifx_CAN_N_CRE_HBUF_RX_CONFIG        CONFIG;                 /**< \brief 0, Node 0 Receive Host Buffer 0  Configuration*/
       __IO Ifx_CAN_N_CRE_HBUF_RX_STAT          STAT;                   /**< \brief 4, Node 0 Receive Host Buffer 0  Status*/
} Ifx_CAN_N_CRE_HBUF_RX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_CRE_HBUF_TX_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief TX object */
typedef volatile struct _Ifx_CAN_N_CRE_HBUF_TX
{
       __IO Ifx_CAN_N_CRE_HBUF_TX_CONFIG        CONFIG;                 /**< \brief 0, Node 0 Transmit Host Buffer 0 Configuration*/
       __IO Ifx_CAN_N_CRE_HBUF_TX_STAT          STAT;                   /**< \brief 4, Node 0 Transmit Host Buffer 0 Status*/
} Ifx_CAN_N_CRE_HBUF_TX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_CRE_HBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief HBUF object */
typedef volatile struct _Ifx_CAN_N_CRE_HBUF
{
       __IO Ifx_CAN_N_CRE_HBUF_RX               RX[2];                  /**< \brief 0, RX Host buffer 0*/
       __IO Ifx_CAN_N_CRE_HBUF_TX               TX[2];                  /**< \brief 10, */
} Ifx_CAN_N_CRE_HBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_CRE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CRE object */
typedef volatile struct _Ifx_CAN_N_CRE
{
       __IO Ifx_CAN_N_CRE_CONFIG                CONFIG;                 /**< \brief 0, Node 0 CRE Configuration Register*/
       __IO Ifx_CAN_N_CRE_CONFIGADR             CONFIGADR;              /**< \brief 4, Node 0 CRE Configuration Start Address*/
       __IO Ifx_CAN_N_CRE_HBUF                  HBUF;                   /**< \brief 8, Node 0 CRE Host buffer settings*/
       __I  Ifx_UReg_8Bit                       reserved_28[20];        /**< \brief 28, \internal Reserved */
       __IO Ifx_CAN_N_CRE_IR                    IR;                     /**< \brief 3C, Node 0 CRE Interrupt Register*/
} Ifx_CAN_N_CRE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_IDMU_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief IDMU object */
typedef volatile struct _Ifx_CAN_N_IDMU
{
       __IO Ifx_CAN_N_IDMU_FRTCONFIG            FRTCONFIG;              /**< \brief 0, Node 0 Frame Rate Measure Table Configuration*/
       __IO Ifx_CAN_N_IDMU_RXTPCFG              RXTPCFG;                /**< \brief 4, Node 0 Rx Throughput Measure configuration*/
} Ifx_CAN_N_IDMU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_RX_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RX object */
typedef volatile struct _Ifx_CAN_N_RX
{
       __IO Ifx_CAN_N_RX_F0C                    F0C;                    /**< \brief 0, Node 0 Rx FIFO 0 Configuration*/
       __I  Ifx_CAN_N_RX_F0S                    F0S;                    /**< \brief 4, Node 0 Rx FIFO 0 Status*/
       __IO Ifx_CAN_N_RX_F0A                    F0A;                    /**< \brief 8, Node 0 Rx FIFO 0 Acknowledge*/
       __IO Ifx_CAN_N_RX_BC                     BC;                     /**< \brief C, Node 0 Rx Buffer Configuration*/
       __IO Ifx_CAN_N_RX_F1C                    F1C;                    /**< \brief 10, Node 0 Rx FIFO 1 Configuration*/
       __I  Ifx_CAN_N_RX_F1S                    F1S;                    /**< \brief 14, Node 0 Rx FIFO 1 Status*/
       __IO Ifx_CAN_N_RX_F1A                    F1A;                    /**< \brief 18, Node 0 Rx FIFO 1 Acknowledge*/
       __IO Ifx_CAN_N_RX_ESC                    ESC;                    /**< \brief 1C, Node 0 Rx Buffer/FIFO Element Size Configuration*/
} Ifx_CAN_N_RX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_TX_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief TX object */
typedef volatile struct _Ifx_CAN_N_TX
{
       __IO Ifx_CAN_N_TX_BC                     BC;                     /**< \brief 0, Node 0 Tx Buffer Configuration*/
       __I  Ifx_CAN_N_TX_FQS                    FQS;                    /**< \brief 4, Node 0 Tx FIFO/Queue Status*/
       __IO Ifx_CAN_N_TX_ESC                    ESC;                    /**< \brief 8, Node 0 Tx Buffer Element Size Configuration*/
       __I  Ifx_CAN_N_TX_BRP                    BRP;                    /**< \brief C, Node 0 Tx Buffer Request Pending*/
       __IO Ifx_CAN_N_TX_BAR                    BAR;                    /**< \brief 10, Node 0 Tx Buffer Add Request*/
       __IO Ifx_CAN_N_TX_BCR                    BCR;                    /**< \brief 14, Node 0 Tx Buffer Cancellation Request*/
       __I  Ifx_CAN_N_TX_BTO                    BTO;                    /**< \brief 18, Node 0 Tx Buffer Transmission Occurred*/
       __I  Ifx_CAN_N_TX_BCF                    BCF;                    /**< \brief 1C, Node 0 Tx Buffer Cancellation Finished*/
       __IO Ifx_CAN_N_TX_BTIE                   BTIE;                   /**< \brief 20, Node 0 Tx Buffer Transmission Interrupt Enable*/
       __IO Ifx_CAN_N_TX_BCIE                   BCIE;                   /**< \brief 24, Node 0 Tx Buffer Cancellation Finished Interrupt Enable*/
       __I  Ifx_UReg_8Bit                       reserved_28[8];         /**< \brief 28, \internal Reserved */
       __IO Ifx_CAN_N_TX_EFC                    EFC;                    /**< \brief 30, Node 0 Tx Event FIFO Configuration*/
       __I  Ifx_CAN_N_TX_EFS                    EFS;                    /**< \brief 34, Node 0 Tx Event FIFO Status*/
       __IO Ifx_CAN_N_TX_EFA                    EFA;                    /**< \brief 38, Node 0 Tx Event FIFO Acknowledge*/
       __I  Ifx_UReg_8Bit                       reserved_3C[4];         /**< \brief 3C, \internal Reserved */
} Ifx_CAN_N_TX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_TSU_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief TSU object */
typedef volatile struct _Ifx_CAN_N_TSU
{
       __I  Ifx_CAN_N_TSU_CREL                  CREL;                   /**< \brief 0, Node 0 TSU Core Release Register*/
       __IO Ifx_CAN_N_TSU_TSCFG                 TSCFG;                  /**< \brief 4, Node 0 Timestamp Configuration*/
       __I  Ifx_CAN_N_TSU_TSS1                  TSS1;                   /**< \brief 8, Node 0 Timestamp Status 1*/
       __I  Ifx_CAN_N_TSU_TSS2                  TSS2;                   /**< \brief C, Node 0 Timestamp Status 2*/
       __I  Ifx_CAN_N_TSU_TS                    TS[16];                 /**< \brief 10, Node 0 Timestamp 0*/
       __IO Ifx_CAN_N_TSU_ATB                   ATB;                    /**< \brief 50, Node 0 Actual Timebase*/
       __I  Ifx_UReg_8Bit                       reserved_54[76];        /**< \brief 54, \internal Reserved */
} Ifx_CAN_N_TSU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_N_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief N object */
typedef volatile struct _Ifx_CAN_N
{
       __IO Ifx_CAN_N_ACCEN                     ACCEN;                  /**< \brief 0, */
       __IO Ifx_CAN_N_STARTADR                  STARTADR;               /**< \brief 20, Node 0 Start Address*/
       __IO Ifx_CAN_N_ENDADR                    ENDADR;                 /**< \brief 24, Node 0 End Address*/
       __I  Ifx_CAN_N_INTRSIG                   INTRSIG;                /**< \brief 28, Node 0 Interrupt Signalling Register*/
       __IO Ifx_CAN_N_G0INTR                    G0INTR;                 /**< \brief 2C, Node 0 Interrupt routing for Group 0*/
       __IO Ifx_CAN_N_G1INTR                    G1INTR;                 /**< \brief 30, Node 0 Interrupt routing for Group 1*/
       __IO Ifx_CAN_N_G2INTR                    G2INTR;                 /**< \brief 34, Node 0 Interrupt routing for Group 2*/
       __IO Ifx_CAN_N_TIMER                     TIMER;                  /**< \brief 38, */
       __IO Ifx_CAN_N_PORTCTRL                  PORTCTRL;               /**< \brief 4C, Node 0 Port Control Register*/
       __IO Ifx_CAN_N_CRE                       CRE;                    /**< \brief 50, */
       __IO Ifx_CAN_N_IDMU                      IDMU;                   /**< \brief 90, IDMU registers*/
       __IO Ifx_CAN_N_ERRCTRL                   ERRCTRL;                /**< \brief 98, Node 0 CRE Error control register*/
       __I  Ifx_UReg_8Bit                       reserved_9C[100];       /**< \brief 9C, \internal Reserved */
       __I  Ifx_CAN_N_CREL                      CREL;                   /**< \brief 100, Node 0 Core Release Register*/
       __I  Ifx_CAN_N_ENDN                      ENDN;                   /**< \brief 104, Node 0 Endian Register*/
       __I  Ifx_UReg_8Bit                       reserved_108[4];        /**< \brief 108, \internal Reserved */
       __IO Ifx_CAN_N_DBTP                      DBTP;                   /**< \brief 10C, Node 0 Data Bit Timing & Prescaler Register*/
       __IO Ifx_CAN_N_TEST                      TEST;                   /**< \brief 110, Node 0 Test Register*/
       __IO Ifx_CAN_N_RWD                       RWD;                    /**< \brief 114, Node 0 RAM Watchdog*/
       __IO Ifx_CAN_N_CCCR                      CCCR;                   /**< \brief 118, Node 0 CC Control Register*/
       __IO Ifx_CAN_N_NBTP                      NBTP;                   /**< \brief 11C, Node 0 Nominal Bit Timing & Prescaler Register*/
       __IO Ifx_CAN_N_TSCC                      TSCC;                   /**< \brief 120, Node 0 Timestamp Counter Configuration*/
       __IO Ifx_CAN_N_TSCV                      TSCV;                   /**< \brief 124, Node 0 Timestamp Counter Value*/
       __IO Ifx_CAN_N_TOCC                      TOCC;                   /**< \brief 128, Node 0 Timeout Counter Configuration*/
       __IO Ifx_CAN_N_TOCV                      TOCV;                   /**< \brief 12C, Node 0 Timeout Counter Value*/
       __I  Ifx_UReg_8Bit                       reserved_130[16];       /**< \brief 130, \internal Reserved */
       __I  Ifx_CAN_N_ECR                       ECR;                    /**< \brief 140, Node 0 Error Counter Register*/
       __I  Ifx_CAN_N_PSR                       PSR;                    /**< \brief 144, Node 0 Protocol Status Register*/
       __IO Ifx_CAN_N_TDCR                      TDCR;                   /**< \brief 148, Node 0 Transmitter Delay Compensation Register*/
       __I  Ifx_UReg_8Bit                       reserved_14C[4];        /**< \brief 14C, \internal Reserved */
       __IO Ifx_CAN_N_IR                        IR;                     /**< \brief 150, Node 0 Interrupt Register*/
       __IO Ifx_CAN_N_IE                        IE;                     /**< \brief 154, Node 0 Interrupt Enable*/
       __I  Ifx_UReg_8Bit                       reserved_158[40];       /**< \brief 158, \internal Reserved */
       __IO Ifx_CAN_N_GFC                       GFC;                    /**< \brief 180, Node 0 Global Filter Configuration*/
       __IO Ifx_CAN_N_SIDFC                     SIDFC;                  /**< \brief 184, Node 0 Standard ID Filter Configuration*/
       __IO Ifx_CAN_N_XIDFC                     XIDFC;                  /**< \brief 188, Node 0 Extended ID Filter Configuration*/
       __I  Ifx_UReg_8Bit                       reserved_18C[4];        /**< \brief 18C, \internal Reserved */
       __IO Ifx_CAN_N_XIDAM                     XIDAM;                  /**< \brief 190, Node 0 Extended ID AND Mask*/
       __I  Ifx_CAN_N_HPMS                      HPMS;                   /**< \brief 194, Node 0 High Priority Message Status*/
       __IO Ifx_CAN_N_NDAT1                     NDAT1;                  /**< \brief 198, Node 0 New Data 1*/
       __IO Ifx_CAN_N_NDAT2                     NDAT2;                  /**< \brief 19C, Node 0 New Data 2*/
       __IO Ifx_CAN_N_RX                        RX;                     /**< \brief 1A0, */
       __IO Ifx_CAN_N_TX                        TX;                     /**< \brief 1C0, */
       __I  Ifx_UReg_8Bit                       reserved_200[96];       /**< \brief 200, \internal Reserved */
       __IO Ifx_CAN_N_TSU                       TSU;                    /**< \brief 260, */
       __I  Ifx_UReg_8Bit                       reserved_300[256];      /**< \brief 300, \internal Reserved */
} Ifx_CAN_N;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_STDMSG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief STDMSG object */
typedef volatile struct _Ifx_CAN_STDMSG
{
       __IO Ifx_CAN_STDMSG_S0                   S0;                     /**< \brief 0, Standard Message 0*/
} Ifx_CAN_STDMSG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_EXTMSG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief EXTMSG object */
typedef volatile struct _Ifx_CAN_EXTMSG
{
       __IO Ifx_CAN_EXTMSG_F0                   F0;                     /**< \brief 0, Filter Element 0*/
       __IO Ifx_CAN_EXTMSG_F1                   F1;                     /**< \brief 4, Filter Element 1*/
} Ifx_CAN_EXTMSG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_RXMSG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RXMSG object */
typedef volatile struct _Ifx_CAN_RXMSG
{
       __IO Ifx_CAN_RXMSG_R0                    R0;                     /**< \brief 0, Register 0*/
       union
       {
            __IO Ifx_CAN_RXMSG_R1A                   R1A;                    /**< \brief 4, Register 1*/
            __IO Ifx_CAN_RXMSG_R1B                   R1B;                    /**< \brief 4, Register 1*/
       };
       __IO Ifx_CAN_RXMSG_DB                    DB[64];                 /**< \brief 8, Data Byte m*/
} Ifx_CAN_RXMSG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_TXEVENT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TXEVENT object */
typedef volatile struct _Ifx_CAN_TXEVENT
{
       __IO Ifx_CAN_TXEVENT_E0                  E0;                     /**< \brief 0, Event 0*/
       union
       {
            __IO Ifx_CAN_TXEVENT_E1A                 E1A;                    /**< \brief 4, Event 1*/
            __IO Ifx_CAN_TXEVENT_E1B                 E1B;                    /**< \brief 4, Event 1*/
       };
} Ifx_CAN_TXEVENT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_TXMSG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TXMSG object */
typedef volatile struct _Ifx_CAN_TXMSG
{
       __IO Ifx_CAN_TXMSG_T0                    T0;                     /**< \brief 0, Transmit Buffer 0*/
       __IO Ifx_CAN_TXMSG_T1                    T1;                     /**< \brief 4, Transmit Buffer 1*/
       __IO Ifx_CAN_TXMSG_DB                    DB[64];                 /**< \brief 8, Data Byte m*/
} Ifx_CAN_TXMSG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_CRE_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CRE object */
typedef volatile struct _Ifx_CAN_CRE
{
       __IO Ifx_CAN_TABLE_CONFIG                STD_RT_PARAM;           /**< \brief 0, STD ID Routing table parameters*/
       __IO Ifx_CAN_TABLE_CONFIG                XTD_RT_PARAM;           /**< \brief 4, XTD ID Routing table parameters*/
       __IO Ifx_CAN_TABLE_CONFIG                STD_FRT_PARAM;          /**< \brief 8, STD ID Frame rate measure table parameters*/
       __IO Ifx_CAN_TABLE_CONFIG                XTD_FRT_PARAM;          /**< \brief C, XTD ID Frame rate measure table parameters*/
       __IO Ifx_CAN_TABLE_CONFIG                STD_TSD_PARAM;          /**< \brief 10, STD ID Timestamp database parameters*/
       __IO Ifx_CAN_TABLE_CONFIG                XTD_TSD_PARAM;          /**< \brief 14, XTD ID Timestamp database parameters*/
       __IO Ifx_CAN_CRE_ABORT_SEQ               ABORT_SEQ;              /**< \brief 18, CRE abort sequence register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
} Ifx_CAN_CRE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_RHBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RHBUF object */
typedef volatile struct _Ifx_CAN_RHBUF
{
       union
       {
            __IO Ifx_CAN_RHBUF_UCRH                  UCRH;                   /**< \brief 0, Routing Header 0*/
            __IO Ifx_CAN_RHBUF_MCRH                  MCRH;                   /**< \brief 0, Routing Header 0*/
       };
       __IO Ifx_CAN_RHBUF_THEAD_INTRD           THEAD_INTRD;            /**< \brief 4, Timing Header 0 Intrusion Detection Information*/
       __IO Ifx_CAN_RHBUF_THEAD_RXTS            THEAD_RXTS;             /**< \brief 8, Timing Header 0 Rx Timestamp*/
       __IO Ifx_CAN_RHBUF_CRC                   CRC;                    /**< \brief C, CRE computed CRC*/
       union
       {
            __IO Ifx_CAN_RHBUF_R0                    R0;                     /**< \brief 10, CAN frame or PDU header 0*/
            __IO Ifx_CAN_RHBUF_LPDUH1                LPDUH1;                 /**< \brief 10, CAN frame or PDU header 0*/
       };
       union
       {
            __IO Ifx_CAN_RHBUF_R1                    R1;                     /**< \brief 14, CAN frame or PDU header 1*/
            __IO Ifx_CAN_RHBUF_LPDUH0                LPDUH0;                 /**< \brief 14, CAN frame or PDU header 1*/
            __IO Ifx_CAN_RHBUF_SPDUH                 SPDUH;                  /**< \brief 14, CAN frame or PDU header 1*/
       };
       __IO Ifx_CAN_DB                          RHBUF_DB[64];           /**< \brief 18, RHBUF 0 Data Byte m*/
       __I  Ifx_UReg_8Bit                       reserved_58[8];         /**< \brief 58, \internal Reserved */
} Ifx_CAN_RHBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_THBUF_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief THBUF object */
typedef volatile struct _Ifx_CAN_THBUF
{
       __IO Ifx_CAN_THBUF_CRC                   CRC;                    /**< \brief 0, Tx Host Buffer CRC*/
       __IO Ifx_CAN_THBUF_T0                    T0;                     /**< \brief 4, Transmit Host Buffer Word 0*/
       __IO Ifx_CAN_THBUF_T1                    T1;                     /**< \brief 8, Transmit Host Buffer Word 1*/
       __IO Ifx_CAN_THBUF_DB                    DB[64];                 /**< \brief C, Transmit Host Buffer Data Byte m*/
       __I  Ifx_UReg_8Bit                       reserved_4C[4];         /**< \brief 4C, \internal Reserved */
} Ifx_CAN_THBUF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_SRT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SRT object */
typedef volatile struct _Ifx_CAN_SRT
{
       union
       {
            __IO Ifx_CAN_SRT_UCR                     UCR;                    /**< \brief 0, RoutingRule*/
            __IO Ifx_CAN_SRT_MCR                     MCR;                    /**< \brief 0, RoutingRule*/
            __IO Ifx_CAN_SRT_PR                      PR;                     /**< \brief 0, RoutingRule*/
       };
} Ifx_CAN_SRT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_XRT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief XRT object */
typedef volatile struct _Ifx_CAN_XRT
{
       union
       {
            __IO Ifx_CAN_XRT_UCR                     UCR;                    /**< \brief 0, RoutingRule*/
            __IO Ifx_CAN_XRT_MCR                     MCR;                    /**< \brief 0, RoutingRule*/
            __IO Ifx_CAN_XRT_PR                      PR;                     /**< \brief 0, RoutingRule*/
       };
} Ifx_CAN_XRT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_SFR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SFR object */
typedef volatile struct _Ifx_CAN_SFR
{
       __IO Ifx_CAN_SFR_FR                      FR;                     /**< \brief 0, Standard ID Frame Rate Measure*/
} Ifx_CAN_SFR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_XFR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief XFR object */
typedef volatile struct _Ifx_CAN_XFR
{
       __IO Ifx_CAN_XFR_FR                      FR;                     /**< \brief 0, Extended ID Frame Rate Measure*/
} Ifx_CAN_XFR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_STSD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief STSD object */
typedef volatile struct _Ifx_CAN_STSD
{
       __IO Ifx_CAN_STSD_RTS                    RTS;                    /**< \brief 0, Standard ID Reference Timestamp*/
} Ifx_CAN_STSD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Can_XTSD_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief XTSD object */
typedef volatile struct _Ifx_CAN_XTSD
{
       __IO Ifx_CAN_XTSD_RTS                    RTS;                    /**< \brief 0, Extended ID Reference Timestamp*/
} Ifx_CAN_XTSD;

/******************************************************************************/
/** \addtogroup IfxSfr_Can_RAM_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CAN_RAM object */
typedef volatile struct _Ifx_CAN_RAM
{
       Ifx_UReg_32Bit                      RAM[9216];             /**< \brief 0, Embedded SRAM for messages*/
} Ifx_CAN_RAM;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Can_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CAN object */
typedef volatile struct _Ifx_CAN
{
       __IO Ifx_CAN_CLC                         CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_CAN_OCS                         OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_CAN_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_CAN_RST                         RST;                    /**< \brief C, Reset Status Register*/
       __IO Ifx_CAN_PROT                        PROTE;                  /**< \brief 18, PROT Register Endinit*/
       __IO Ifx_CAN_PROT                        PROTSE;                 /**< \brief 1C, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_20[16];        /**< \brief 20, \internal Reserved */
       __IO Ifx_CAN_ACCEN                       ACCEN;                  /**< \brief 30, */
       __I  Ifx_UReg_8Bit                       reserved_50[32];        /**< \brief 50, \internal Reserved */
       __IO Ifx_CAN_MCR                         MCR;                    /**< \brief 70, Module Control Register*/
       __IO Ifx_CAN_BUFADR                      BUFADR;                 /**< \brief 74, Buffer receive address and transmit address*/
       __I  Ifx_UReg_8Bit                       reserved_78[8];         /**< \brief 78, \internal Reserved */
       __IO Ifx_CAN_MECR                        MECR;                   /**< \brief 80, Measure Control Register*/
       __IO Ifx_CAN_MESTAT                      MESTAT;                 /**< \brief 84, Measure Status Register*/
       __IO Ifx_CAN_WDT                         WDT;                    /**< \brief 88, CRE Watchdog timer register*/
       __I  Ifx_UReg_8Bit                       reserved_8C[116];       /**< \brief 8C, \internal Reserved */
       __IO Ifx_CAN_N                           N[4];                   /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_1100[61184];    /**< \brief 1100, \internal Reserved */
} Ifx_CAN;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXCAN_REGDEF_H */
