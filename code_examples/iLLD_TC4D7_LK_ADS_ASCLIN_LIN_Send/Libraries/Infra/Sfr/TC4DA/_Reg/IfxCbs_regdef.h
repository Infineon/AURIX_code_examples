/**
 * \file IfxCbs_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_Debug/V0.2.1.0.7
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Cbs_Registers Cbs Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Cbs_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Cbs_Registers
 * 
 * \defgroup IfxSfr_Cbs_Registers_union Register unions
 * \ingroup IfxSfr_Cbs_Registers
 * 
 * \defgroup IfxSfr_Cbs_Registers_struct Memory map
 * \ingroup IfxSfr_Cbs_Registers
 */
#ifndef IFXCBS_REGDEF_H
#define IFXCBS_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Cbs_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_CBS_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CBS_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CBS_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CBS_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CBS_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CBS_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CBS_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CBS_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CBS_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CBS_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CBS_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CBS_ACCEN_WRB_FPI_Bits;

/** \brief Communication Mode Data Register */
typedef struct _Ifx_CBS_COMDATA_Bits
{
    __IO Ifx_Strict_32Bit DATA:32;         /**< \brief [31:0] Read/Write Data - DATA (rw) */
} Ifx_CBS_COMDATA_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_CBS_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_CBS_ID_Bits;

/** \brief IFS Address Register */
typedef struct _Ifx_CBS_IFSA_Bits
{
    __IO Ifx_Strict_32Bit ADDR:32;         /**< \brief [31:0] Address for FI/SI Accesses - ADDR (rw) */
} Ifx_CBS_IFSA_Bits;

/** \brief IFS Control Register */
typedef struct _Ifx_CBS_IFSC_Bits
{
    __O  Ifx_Strict_32Bit GO:1;            /**< \brief [0:0] Injection Trigger - GO (w) */
    __IO Ifx_Strict_32Bit OTGS:1;          /**< \brief [1:1] Injection Trigger by OTGS - OTGS (rw) */
    __IO Ifx_Strict_32Bit MODE:1;          /**< \brief [2:2] Stress or Fault Injection Mode - MODE (rw) */
    __IO Ifx_Strict_32Bit PRIO:1;          /**< \brief [3:3] Bus Master Priority - PRIO (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit RSREP:4;         /**< \brief [11:8] Read Stress Repetitions (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit BM0:2;           /**< \brief [17:16] Fault Injection Bit Manipulation - BM0 (rw) */
    __IO Ifx_Strict_32Bit BM1:2;           /**< \brief [19:18] Fault Injection Bit Manipulation - BM1 (rw) */
    __IO Ifx_Strict_32Bit BM2:2;           /**< \brief [21:20] Fault Injection Bit Manipulation - BM2 (rw) */
    __IO Ifx_Strict_32Bit BM3:2;           /**< \brief [23:22] Fault Injection Bit Manipulation - BM3 (rw) */
    __IO Ifx_Strict_32Bit BM4:2;           /**< \brief [25:24] Fault Injection Bit Manipulation - BM4 (rw) */
    __IO Ifx_Strict_32Bit BM5:2;           /**< \brief [27:26] Fault Injection Bit Manipulation - BM5 (rw) */
    __IO Ifx_Strict_32Bit BM6:2;           /**< \brief [29:28] Fault Injection Bit Manipulation - BM6 (rw) */
    __IO Ifx_Strict_32Bit BM7:2;           /**< \brief [31:30] Fault Injection Bit Manipulation - BM7 (rw) */
} Ifx_CBS_IFSC_Bits;

/** \brief IOClient Status and Control Register */
typedef struct _Ifx_CBS_IOSR_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __I  Ifx_Strict_32Bit CRSYNC:1;        /**< \brief [4:4] Communication Mode Read Sync Flag - CRSYNC (rh) */
    __I  Ifx_Strict_32Bit CWSYNC:1;        /**< \brief [5:5] Communication Mode Write Sync Flag - CWSYNC (rh) */
    __O  Ifx_Strict_32Bit CW_ACK:1;        /**< \brief [6:6] Communication Mode Write Acknowledge - CW_ACK (w) */
    __I  Ifx_Strict_32Bit COM_SYNC:1;      /**< \brief [7:7] Communication Mode Synchronization Flag - COM_SYNC (rh) */
    __I  Ifx_Strict_32Bit HOSTED:1;        /**< \brief [8:8] Tool Interface in Use - HOSTED (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [11:9] \internal Reserved */
    __I  Ifx_Strict_32Bit CHANNEL:3;       /**< \brief [14:12] Channel Indication - CHANNEL (rh) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [31:15] \internal Reserved */
} Ifx_CBS_IOSR_Bits;

/** \brief JTAG Device Identification Register */
typedef struct _Ifx_CBS_JTAGID_Bits
{
    __I  Ifx_UReg_32Bit JTAG_ID:32;        /**< \brief [31:0] JTAG Device ID - JTAG_ID (r) */
} Ifx_CBS_JTAGID_Bits;

/** \brief OSCU Control Register */
typedef struct _Ifx_CBS_OCNTRL_Bits
{
    __I  Ifx_Strict_32Bit :12;             /**< \brief [11:0] \internal Reserved */
    __O  Ifx_Strict_32Bit WDTSUS_P:1;      /**< \brief [12:12] WDTSUS Write Protection - WDTSUS_P (w) */
    __O  Ifx_Strict_32Bit WDTSUS:1;        /**< \brief [13:13] Set/Clear Watchdog Timer Suspension Control - WDTSUS (w) */
    __O  Ifx_Strict_32Bit STABLE_P:1;      /**< \brief [14:14] STABLE Write Protection - STABLE_P (w) */
    __O  Ifx_Strict_32Bit STABLE:1;        /**< \brief [15:15] Initialize Application Reset Indication - STABLE (w) */
    __O  Ifx_Strict_32Bit OJC0_P:1;        /**< \brief [16:16] OJC0 Write Protection - OJC0_P (w) */
    __O  Ifx_Strict_32Bit OJC0:1;          /**< \brief [17:17] Set/Clear OCDS Control Bits IOClient Domain - OJC0 (w) */
    __O  Ifx_Strict_32Bit OJC1_P:1;        /**< \brief [18:18] OJC1 Write Protection - OJC1_P (w) */
    __O  Ifx_Strict_32Bit OJC1:1;          /**< \brief [19:19] Set/Clear OCDS Control Bits IOClient Domain - OJC1 (w) */
    __O  Ifx_Strict_32Bit OJC2_P:1;        /**< \brief [20:20] OJC2 Write Protection - OJC2_P (w) */
    __O  Ifx_Strict_32Bit OJC2:1;          /**< \brief [21:21] Set/Clear OCDS Control Bits IOClient Domain - OJC2 (w) */
    __O  Ifx_Strict_32Bit OJC3_P:1;        /**< \brief [22:22] OJC3 Write Protection - OJC3_P (w) */
    __O  Ifx_Strict_32Bit OJC3:1;          /**< \brief [23:23] Set/Clear OCDS Control Bits IOClient Domain - OJC3 (w) */
    __O  Ifx_Strict_32Bit OJC4_P:1;        /**< \brief [24:24] OJC4 Write Protection - OJC4_P (w) */
    __O  Ifx_Strict_32Bit OJC4:1;          /**< \brief [25:25] Set/Clear OCDS Control Bits IOClient Domain - OJC4 (w) */
    __O  Ifx_Strict_32Bit OJC5_P:1;        /**< \brief [26:26] OJC5 Write Protection - OJC5_P (w) */
    __O  Ifx_Strict_32Bit OJC5:1;          /**< \brief [27:27] Set/Clear OCDS Control Bits IOClient Domain - OJC5 (w) */
    __O  Ifx_Strict_32Bit OJC6_P:1;        /**< \brief [28:28] OJC6 Write Protection - OJC6_P (w) */
    __O  Ifx_Strict_32Bit OJC6:1;          /**< \brief [29:29] Set/Clear OCDS Control Bits IOClient Domain - OJC6 (w) */
    __O  Ifx_Strict_32Bit OJC7_P:1;        /**< \brief [30:30] OJC7 Write Protection - OJC7_P (w) */
    __O  Ifx_Strict_32Bit OJC7:1;          /**< \brief [31:31] Set/Clear OCDS Control Bits IOClient Domain - OJC7 (w) */
} Ifx_CBS_OCNTRL_Bits;

/** \brief OCDS Enable Control Register */
typedef struct _Ifx_CBS_OEC_Bits
{
    __O  Ifx_Strict_32Bit PAT:8;           /**< \brief [7:0] OCDS Enabling Pattern - PAT (w) */
    __O  Ifx_Strict_32Bit DS:1;            /**< \brief [8:8] Disable OCDS - DS (w) */
    __O  Ifx_Strict_32Bit OCO:1;           /**< \brief [9:9] OCDS Clock Off - OCO (w) */
    __IO Ifx_Strict_32Bit SRC0:1;          /**< \brief [10:10] SRC0 Interrupt Request (rw1s) */
    __IO Ifx_Strict_32Bit SRC1:1;          /**< \brief [11:11] SRC1 Interrupt Request (rw1s) */
    __O  Ifx_Strict_32Bit TRC_EN_P:1;      /**< \brief [12:12] TRC_EN Write Protection - TRC_EN_P (w) */
    __O  Ifx_Strict_32Bit TRC_EN:1;        /**< \brief [13:13] Set/Clear the Trace enable bit - TRC_EN (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __O  Ifx_Strict_32Bit IF_LCK_P:1;      /**< \brief [16:16] IF_LCK Write Protection - IF_LCK_P (w) */
    __O  Ifx_Strict_32Bit IF_LCK:1;        /**< \brief [17:17] Set Interface Locked Indication - IF_LCK (w) */
    __O  Ifx_Strict_32Bit AUT_OK_P:1;      /**< \brief [18:18] AUT_OK Write Protection - AUT_OK_P (w) */
    __O  Ifx_Strict_32Bit AUT_OK:1;        /**< \brief [19:19] Set/Clear the Authorization OK Indication - AUT_OK (w) */
    __O  Ifx_Strict_32Bit PW_OK_P:1;       /**< \brief [20:20] PW_OK Write Protection - PW_OK_P (w) */
    __O  Ifx_Strict_32Bit PW_OK:1;         /**< \brief [21:21] Set/Clear the User Password OK Indication - PW_OK (w) */
    __O  Ifx_Strict_32Bit DBG_DIS_P:1;     /**< \brief [22:22] DBG_DIS Write Protection - DBG_DIS_P (w) */
    __O  Ifx_Strict_32Bit DBG_DIS:1;       /**< \brief [23:23] Set Debug Disabled Indication - DBG_DIS (w) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CBS_OEC_Bits;

/** \brief OCDS Interface Mode Register */
typedef struct _Ifx_CBS_OIFM_Bits
{
    __IO Ifx_Strict_32Bit DAPMODE:3;       /**< \brief [2:0] DAP Interface Mode - DAPMODE (rw) */
    __IO Ifx_Strict_32Bit DAPRST:1;        /**< \brief [3:3] DAP Protocol Clear - DAPRST (rwh) */
    __IO Ifx_Strict_32Bit RWACCLIM:1;      /**< \brief [4:4] Memory Space Access limited - RWACCLIM (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit F_JTAG:1;        /**< \brief [8:8] Forced JTAG Mode (rw) */
    __IO Ifx_Strict_32Bit N_JTAG:1;        /**< \brief [9:9] No Switch to JTAG (rw) */
    __IO Ifx_Strict_32Bit PIMA:2;          /**< \brief [11:10] Pin Mapping (rw) */
    __IO Ifx_Strict_32Bit PADCTL:2;        /**< \brief [13:12] Pad Control for Debug Interface Pins (rw) */
    __IO Ifx_Strict_32Bit PADCTLI:2;       /**< \brief [15:14] Pad input threshold control for Debug Interface Pins (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CBS_OIFM_Bits;

/** \brief OTGM MCDS I/F Sensitivity Negedge */
typedef struct _Ifx_CBS_OMISN_Bits
{
    __IO Ifx_Strict_32Bit OTGB0:16;        /**< \brief [15:0] Bitwise Negedge Sensitivity for OTGB0 (rw) */
    __IO Ifx_Strict_32Bit OTGB1:16;        /**< \brief [31:16] Bitwise Negedge Sensitivity for OTGB1 (rw) */
} Ifx_CBS_OMISN_Bits;

/** \brief OTGM MCDS I/F Sensitivity Posedge */
typedef struct _Ifx_CBS_OMISP_Bits
{
    __IO Ifx_Strict_32Bit OTGB0:16;        /**< \brief [15:0] Bitwise Posedge Sensitivity for OTGB0 (rw) */
    __IO Ifx_Strict_32Bit OTGB1:16;        /**< \brief [31:16] Bitwise Posedge Sensitivity for OTGB1 (rw) */
} Ifx_CBS_OMISP_Bits;

/** \brief OTGM OTGB0/1 Status */
typedef struct _Ifx_CBS_OOBS_Bits
{
    __I  Ifx_UReg_32Bit OTGB0:16;          /**< \brief [15:0] Status of OTGB0 (rh) */
    __I  Ifx_UReg_32Bit OTGB1:16;          /**< \brief [31:16] Status of OTGB1 (rh) */
} Ifx_CBS_OOBS_Bits;

/** \brief OSCU Status Register */
typedef struct _Ifx_CBS_OSTATE_Bits
{
    __I  Ifx_UReg_32Bit OEN:1;             /**< \brief [0:0] OCDS Enabled Flag - OEN (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [4:1] \internal Reserved */
    __I  Ifx_UReg_32Bit TRC_EN:1;          /**< \brief [5:5] Trace enable bit - TRC_EN (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [6:6] \internal Reserved */
    __I  Ifx_UReg_32Bit WDTSUS:1;          /**< \brief [7:7] Control of Watchdog Timer (WDT) Suspension - WDTSUS (rh) */
    __I  Ifx_UReg_32Bit HARR:1;            /**< \brief [8:8] Halt after Reset Request - HARR (rh) */
    __I  Ifx_UReg_32Bit OJC1:1;            /**< \brief [9:9] OCDS Control Bits IOClient Domain OJC1 (rh) */
    __I  Ifx_UReg_32Bit OJC2:1;            /**< \brief [10:10] OCDS Control Bits IOClient Domain OJC2 (rh) */
    __I  Ifx_UReg_32Bit OJC3:1;            /**< \brief [11:11] OCDS Control Bits IOClient Domain OJC3 (rh) */
    __I  Ifx_UReg_32Bit RSTCL0:1;          /**< \brief [12:12] OCDS System Reset Request - RSTCL0 (rh) */
    __I  Ifx_UReg_32Bit OJC5:1;            /**< \brief [13:13] OCDS Control Bits IOClient Domain OJC5 (rh) */
    __I  Ifx_UReg_32Bit OJC6:1;            /**< \brief [14:14] OCDS Control Bits IOClient Domain OJC6 (rh) */
    __I  Ifx_UReg_32Bit RSTCL3:1;          /**< \brief [15:15] OCDS Application Reset Request - RSTCL3 (rh) */
    __I  Ifx_UReg_32Bit IF_LCK:1;          /**< \brief [16:16] Interface Locked Indication - IF_LCK (rh) */
    __I  Ifx_UReg_32Bit AUT_OK:1;          /**< \brief [17:17] Authorization OK Indication - AUT_OK (rh) */
    __I  Ifx_UReg_32Bit STABLE:1;          /**< \brief [18:18] Application Reset Indication - STABLE (rh) */
    __I  Ifx_UReg_32Bit OCO:1;             /**< \brief [19:19] OCDS debug resource Clock On Indication - OCO (rh) */
    __I  Ifx_UReg_32Bit PW_OK:1;           /**< \brief [20:20] User Password OK Indication - PW_OK (rh) */
    __I  Ifx_UReg_32Bit DBG_DIS:1;         /**< \brief [21:21] Debug Disabled - DBG_DIS (rh) */
    __I  Ifx_UReg_32Bit RWACCLIM:1;        /**< \brief [22:22] Memory Space Access limited - RWACCLIM (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_CBS_OSTATE_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_CBS_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_CBS_PROT_Bits;

/** \brief TG Capture for Cores - BRKOUT */
typedef struct _Ifx_CBS_TCCB_Bits
{
    __I  Ifx_UReg_32Bit C0:1;              /**< \brief [0:0] Capture of BRKOUT Signal of CPU0 - C0 (rh) */
    __I  Ifx_UReg_32Bit C1:1;              /**< \brief [1:1] Capture of BRKOUT Signal of CPU1 - C1 (rh) */
    __I  Ifx_UReg_32Bit C2:1;              /**< \brief [2:2] Capture of BRKOUT Signal of CPU2 - C2 (rh) */
    __I  Ifx_UReg_32Bit C3:1;              /**< \brief [3:3] Capture of BRKOUT Signal of CPU3 - C3 (rh) */
    __I  Ifx_UReg_32Bit C4:1;              /**< \brief [4:4] Capture of BRKOUT Signal of CPU4 - C4 (rh) */
    __I  Ifx_UReg_32Bit C5:1;              /**< \brief [5:5] Capture of BRKOUT Signal of CPU5 - C5 (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [23:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PPU:1;             /**< \brief [24:24] Capture of BRKOUT Signal of PPU (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [30:25] \internal Reserved */
    __I  Ifx_UReg_32Bit CCS:1;             /**< \brief [31:31] Capture of BRKOUT Signal of CPUCS (rh) */
} Ifx_CBS_TCCB_Bits;

/** \brief TG Capture for Cores - HALT */
typedef struct _Ifx_CBS_TCCH_Bits
{
    __I  Ifx_UReg_32Bit C0:1;              /**< \brief [0:0] Capture of HALT Signal of CPU0 - C0 (rh) */
    __I  Ifx_UReg_32Bit C1:1;              /**< \brief [1:1] Capture of HALT Signal of CPU1 - C1 (rh) */
    __I  Ifx_UReg_32Bit C2:1;              /**< \brief [2:2] Capture of HALT Signal of CPU2 - C2 (rh) */
    __I  Ifx_UReg_32Bit C3:1;              /**< \brief [3:3] Capture of HALT Signal of CPU3 - C3 (rh) */
    __I  Ifx_UReg_32Bit C4:1;              /**< \brief [4:4] Capture of HALT Signal of CPU4 - C4 (rh) */
    __I  Ifx_UReg_32Bit C5:1;              /**< \brief [5:5] Capture of HALT Signal of CPU5 - C5 (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [23:6] \internal Reserved */
    __I  Ifx_UReg_32Bit PPU:1;             /**< \brief [24:24] Capture of HALT Signal of PPU (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [30:25] \internal Reserved */
    __I  Ifx_UReg_32Bit CCS:1;             /**< \brief [31:31] Capture of HALT Signal of CPUCS (rh) */
} Ifx_CBS_TCCH_Bits;

/** \brief TG Capture for TG Input Pins */
typedef struct _Ifx_CBS_TCIP_Bits
{
    __I  Ifx_UReg_32Bit P0:1;              /**< \brief [0:0] Capture of Trigger Input Pin 0 - P0 (rh) */
    __I  Ifx_UReg_32Bit P1:1;              /**< \brief [1:1] Capture of Trigger Input Pin 1 - P1 (rh) */
    __I  Ifx_UReg_32Bit P2:1;              /**< \brief [2:2] Capture of Trigger Input Pin 2 - P2 (rh) */
    __I  Ifx_UReg_32Bit P3:1;              /**< \brief [3:3] Capture of Trigger Input Pin 3 - P3 (rh) */
    __I  Ifx_UReg_32Bit P4:1;              /**< \brief [4:4] Capture of Trigger Input Pin 4 - P4 (rh) */
    __I  Ifx_UReg_32Bit P5:1;              /**< \brief [5:5] Capture of Trigger Input Pin 5 - P5 (rh) */
    __I  Ifx_UReg_32Bit P6:1;              /**< \brief [6:6] Capture of Trigger Input Pin 6 - P6 (rh) */
    __I  Ifx_UReg_32Bit P7:1;              /**< \brief [7:7] Capture of Trigger Input Pin 7 - P7 (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CBS_TCIP_Bits;

/** \brief TG Capture for MCDS */
typedef struct _Ifx_CBS_TCM_Bits
{
    __I  Ifx_UReg_32Bit BRK:1;             /**< \brief [0:0] Capture of MCDS break_out - BRK (rh) */
    __I  Ifx_UReg_32Bit SUS:1;             /**< \brief [1:1] Capture of MCDS suspend_out - SUS (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __I  Ifx_UReg_32Bit T0:1;              /**< \brief [8:8] Capture of MCDS trig_out 0 - T0 (rh) */
    __I  Ifx_UReg_32Bit T1:1;              /**< \brief [9:9] Capture of MCDS trig_out 1 - T1 (rh) */
    __I  Ifx_UReg_32Bit T2:1;              /**< \brief [10:10] Capture of MCDS trig_out 2 - T2 (rh) */
    __I  Ifx_UReg_32Bit T3:1;              /**< \brief [11:11] Capture of MCDS trig_out 3 - T3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CBS_TCM_Bits;

/** \brief TG Capture for OTGB0/1 */
typedef struct _Ifx_CBS_TCTGB_Bits
{
    __I  Ifx_UReg_32Bit OTGB0:16;          /**< \brief [15:0] Capture Bits for OTGB0 - OTGB0 (rh) */
    __I  Ifx_UReg_32Bit OTGB1:16;          /**< \brief [31:16] Capture Bits for OTGB1 - OTGB1 (rh) */
} Ifx_CBS_TCTGB_Bits;

/** \brief TG Capture for TG Lines */
typedef struct _Ifx_CBS_TCTL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit TL1:1;             /**< \brief [1:1] Capture of Trigger Line 1 - TL1 (rh) */
    __I  Ifx_UReg_32Bit TL2:1;             /**< \brief [2:2] Capture of Trigger Line 2 - TL2 (rh) */
    __I  Ifx_UReg_32Bit TL3:1;             /**< \brief [3:3] Capture of Trigger Line 3 - TL3 (rh) */
    __I  Ifx_UReg_32Bit TL4:1;             /**< \brief [4:4] Capture of Trigger Line 4 - TL4 (rh) */
    __I  Ifx_UReg_32Bit TL5:1;             /**< \brief [5:5] Capture of Trigger Line 5 - TL5 (rh) */
    __I  Ifx_UReg_32Bit TL6:1;             /**< \brief [6:6] Capture of Trigger Line 6 - TL6 (rh) */
    __I  Ifx_UReg_32Bit TL7:1;             /**< \brief [7:7] Capture of Trigger Line 7 - TL7 (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CBS_TCTL_Bits;

/** \brief Tool Identifier and startup Handshake */
typedef struct _Ifx_CBS_TIH_Bits
{
    __IO Ifx_Strict_32Bit TSM:3;           /**< \brief [2:0] Tool handshake State Machine (rw) */
    __O  Ifx_Strict_32Bit TSM_P:1;         /**< \brief [3:3] Write protection bit for TSM (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit TT:6;            /**< \brief [21:16] Tool Type (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [23:22] \internal Reserved */
    __IO Ifx_Strict_32Bit TV:7;            /**< \brief [30:24] Tool Vendor ID (rw) */
    __O  Ifx_Strict_32Bit TVTT_P:1;        /**< \brief [31:31] Write protection bit for TV and TT (w) */
} Ifx_CBS_TIH_Bits;

/** \brief TG Input Pins Routing */
typedef struct _Ifx_CBS_TIPR_Bits
{
    __IO Ifx_Strict_32Bit PIN0:4;          /**< \brief [3:0] Trigger Pin 0 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN1:4;          /**< \brief [7:4] Trigger Pin 1 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN2:4;          /**< \brief [11:8] Trigger Pin 2 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN3:4;          /**< \brief [15:12] Trigger Pin 3 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN4:4;          /**< \brief [19:16] Trigger Pin 4 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN5:4;          /**< \brief [23:20] Trigger Pin 5 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN6:4;          /**< \brief [27:24] Trigger Pin 6 to Trigger Line Routing (rw) */
    __IO Ifx_Strict_32Bit PIN7:4;          /**< \brief [31:28] Trigger Pin 7 to Trigger Line Routing (rw) */
} Ifx_CBS_TIPR_Bits;

/** \brief TG Line 1 Suspend Targets */
typedef struct _Ifx_CBS_TL1ST_Bits
{
    __IO Ifx_Strict_32Bit C0:1;            /**< \brief [0:0] CPU0 as Suspend Target - C0 (rw) */
    __IO Ifx_Strict_32Bit C1:1;            /**< \brief [1:1] CPU1 as Suspend Target - C1 (rw) */
    __IO Ifx_Strict_32Bit C2:1;            /**< \brief [2:2] CPU2 as Suspend Target - C2 (rw) */
    __IO Ifx_Strict_32Bit C3:1;            /**< \brief [3:3] CPU3 as Suspend Target - C3 (rw) */
    __IO Ifx_Strict_32Bit C4:1;            /**< \brief [4:4] CPU4 as Suspend Target - C4 (rw) */
    __IO Ifx_Strict_32Bit C5:1;            /**< \brief [5:5] CPU5 as Suspend Target - C5 (rw) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [23:6] \internal Reserved */
    __IO Ifx_Strict_32Bit M0:1;            /**< \brief [24:24] Master 0 as Suspend Target (rw) */
    __IO Ifx_Strict_32Bit M1:1;            /**< \brief [25:25] Master 1 as Suspend Target (rw) */
    __IO Ifx_Strict_32Bit PPU:1;           /**< \brief [26:26] PPU as Suspend Target - PPU (rw) */
    __IO Ifx_Strict_32Bit HSS1:1;          /**< \brief [27:27] HSSL1 as Suspend Target - HSS1 (rw) */
    __IO Ifx_Strict_32Bit HSS0:1;          /**< \brief [28:28] HSSL0 as Suspend Target - HSS0 (rw) */
    __IO Ifx_Strict_32Bit DMA:1;           /**< \brief [29:29] DMA as Suspend Target - DMA (rw) */
    __IO Ifx_Strict_32Bit DMA1:1;          /**< \brief [30:30] DMA as Suspend Target - DMA1 (rw) */
    __IO Ifx_Strict_32Bit CCS:1;           /**< \brief [31:31] CPUCS as Suspend Target (rw) */
} Ifx_CBS_TL1ST_Bits;

/** \brief TG Line Control */
typedef struct _Ifx_CBS_TLC_Bits
{
    __IO Ifx_Strict_32Bit PBSUSDIS:1;      /**< \brief [0:0] Peripheral Bus suspend delay disable - PBSUSDIS (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit TLSP1:4;         /**< \brief [7:4] TG Line Signal Processing - TLSP1 (rw) */
    __IO Ifx_Strict_32Bit TLSP2:4;         /**< \brief [11:8] TG Line Signal Processing - TLSP2 (rw) */
    __IO Ifx_Strict_32Bit TLSP3:4;         /**< \brief [15:12] TG Line Signal Processing - TLSP3 (rw) */
    __IO Ifx_Strict_32Bit TLSP4:4;         /**< \brief [19:16] TG Line Signal Processing - TLSP4 (rw) */
    __IO Ifx_Strict_32Bit TLSP5:4;         /**< \brief [23:20] TG Line Signal Processing - TLSP5 (rw) */
    __IO Ifx_Strict_32Bit TLSP6:4;         /**< \brief [27:24] TG Line Signal Processing - TLSP6 (rw) */
    __IO Ifx_Strict_32Bit TLSP7:4;         /**< \brief [31:28] TG Line Signal Processing - TLSP7 (rw) */
} Ifx_CBS_TLC_Bits;

/** \brief TG Line Capture and Hold Enable */
typedef struct _Ifx_CBS_TLCHE_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit TL1:1;           /**< \brief [1:1] Capture and Hold Enable for Trigger Line 1 - TL1 (rw) */
    __IO Ifx_Strict_32Bit TL2:1;           /**< \brief [2:2] Capture and Hold Enable for Trigger Line 2 - TL2 (rw) */
    __IO Ifx_Strict_32Bit TL3:1;           /**< \brief [3:3] Capture and Hold Enable for Trigger Line 3 - TL3 (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CBS_TLCHE_Bits;

/** \brief TG Line Capture and Hold Clear */
typedef struct _Ifx_CBS_TLCHS_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __O  Ifx_Strict_32Bit TL1:1;           /**< \brief [1:1] Capture and Hold Clear for Trigger Line 1 - TL1 (w) */
    __O  Ifx_Strict_32Bit TL2:1;           /**< \brief [2:2] Capture and Hold Clear for Trigger Line 2 - TL2 (w) */
    __O  Ifx_Strict_32Bit TL3:1;           /**< \brief [3:3] Capture and Hold Clear for Trigger Line 3 - TL3 (w) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CBS_TLCHS_Bits;

/** \brief TG Line State */
typedef struct _Ifx_CBS_TLS_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit TL1:1;             /**< \brief [1:1] Current State of Trigger Line 1 - TL1 (rh) */
    __I  Ifx_UReg_32Bit TL2:1;             /**< \brief [2:2] Current State of Trigger Line 2 - TL2 (rh) */
    __I  Ifx_UReg_32Bit TL3:1;             /**< \brief [3:3] Current State of Trigger Line 3 - TL3 (rh) */
    __I  Ifx_UReg_32Bit TL4:1;             /**< \brief [4:4] Current State of Trigger Line 4 - TL4 (rh) */
    __I  Ifx_UReg_32Bit TL5:1;             /**< \brief [5:5] Current State of Trigger Line 5 - TL5 (rh) */
    __I  Ifx_UReg_32Bit TL6:1;             /**< \brief [6:6] Current State of Trigger Line 6 - TL6 (rh) */
    __I  Ifx_UReg_32Bit TL7:1;             /**< \brief [7:7] Current State of Trigger Line 7 - TL7 (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CBS_TLS_Bits;

/** \brief TG Line Timer */
typedef struct _Ifx_CBS_TLT_Bits
{
    __IO Ifx_Strict_32Bit TGL:4;           /**< \brief [3:0] Timer to Trigger Line Routing - TGL (rw) */
    __IO Ifx_Strict_32Bit VTZ:1;           /**< \brief [4:4] TG Line Value when Timer Value is Zero - VTZ (rw) */
    __IO Ifx_Strict_32Bit RL:1;            /**< \brief [5:5] Reload Timer - RL (rw) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [15:6] \internal Reserved */
    __IO Ifx_Strict_32Bit TIM:16;          /**< \brief [31:16] Timer Value - TIM (rwh) */
} Ifx_CBS_TLT_Bits;

/** \brief TG Lines for Trigger to Host */
typedef struct _Ifx_CBS_TLTTH_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit TL1:2;           /**< \brief [3:2] TG Line Enabling for Trigger to Host (TRIG) - TL1 (rw) */
    __IO Ifx_Strict_32Bit TL2:2;           /**< \brief [5:4] TG Line Enabling for Trigger to Host (TRIG) - TL2 (rw) */
    __IO Ifx_Strict_32Bit TL3:2;           /**< \brief [7:6] TG Line Enabling for Trigger to Host (TRIG) - TL3 (rw) */
    __IO Ifx_Strict_32Bit TL4:2;           /**< \brief [9:8] TG Line Enabling for Trigger to Host (TRIG) - TL4 (rw) */
    __IO Ifx_Strict_32Bit TL5:2;           /**< \brief [11:10] TG Line Enabling for Trigger to Host (TRIG) - TL5 (rw) */
    __IO Ifx_Strict_32Bit TL6:2;           /**< \brief [13:12] TG Line Enabling for Trigger to Host (TRIG) - TL6 (rw) */
    __IO Ifx_Strict_32Bit TL7:2;           /**< \brief [15:14] TG Line Enabling for Trigger to Host (TRIG) - TL7 (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CBS_TLTTH_Bits;

/** \brief TG Line Counter Control */
typedef struct _Ifx_CBS_TL_TLCC_Bits
{
    __IO Ifx_Strict_32Bit TGL:4;           /**< \brief [3:0] Trigger Line to Counter Routing - TGL (rw) */
    __IO Ifx_Strict_32Bit LE:3;            /**< \brief [6:4] Level or Edge Counting - LE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __O  Ifx_Strict_32Bit CLR:2;           /**< \brief [9:8] Clear and Enable Counter(s) - CLR (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [11:10] \internal Reserved */
    __O  Ifx_Strict_32Bit STOP:2;          /**< \brief [13:12] Stop Counter(s) - STOP (w) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_CBS_TL_TLCC_Bits;

/** \brief TG Line Counter Value */
typedef struct _Ifx_CBS_TL_TLCV_Bits
{
    __I  Ifx_UReg_32Bit CV:31;             /**< \brief [30:0] Count Value - CV (rh) */
    __I  Ifx_UReg_32Bit SO:1;              /**< \brief [31:31] Sticky Overflow Bit - SO (rh) */
} Ifx_CBS_TL_TLCV_Bits;

/** \brief TG Output Pins Pulse Stretcher */
typedef struct _Ifx_CBS_TOPPS_Bits
{
    __IO Ifx_Strict_32Bit PIN0:4;          /**< \brief [3:0] Pulse Stretch Control for Trigger Pin 0 - PIN0 (rw) */
    __IO Ifx_Strict_32Bit PIN1:4;          /**< \brief [7:4] Pulse Stretch Control for Trigger Pin 1 - PIN1 (rw) */
    __IO Ifx_Strict_32Bit PIN2:4;          /**< \brief [11:8] Pulse Stretch Control for Trigger Pin 2 - PIN2 (rw) */
    __IO Ifx_Strict_32Bit PIN3:4;          /**< \brief [15:12] Pulse Stretch Control for Trigger Pin 3 - PIN3 (rw) */
    __IO Ifx_Strict_32Bit PIN4:4;          /**< \brief [19:16] Pulse Stretch Control for Trigger Pin 4 - PIN4 (rw) */
    __IO Ifx_Strict_32Bit PIN5:4;          /**< \brief [23:20] Pulse Stretch Control for Trigger Pin 5 - PIN5 (rw) */
    __IO Ifx_Strict_32Bit PIN6:4;          /**< \brief [27:24] Pulse Stretch Control for Trigger Pin 6 - PIN6 (rw) */
    __IO Ifx_Strict_32Bit PIN7:4;          /**< \brief [31:28] Pulse Stretch Control for Trigger Pin 7 - PIN7 (rw) */
} Ifx_CBS_TOPPS_Bits;

/** \brief TG Output Pins Routing */
typedef struct _Ifx_CBS_TOPR_Bits
{
    __IO Ifx_Strict_32Bit PIN0:4;          /**< \brief [3:0] Trigger Line to Trigger Pin 0 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN1:4;          /**< \brief [7:4] Trigger Line to Trigger Pin 1 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN2:4;          /**< \brief [11:8] Trigger Line to Trigger Pin 2 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN3:4;          /**< \brief [15:12] Trigger Line to Trigger Pin 3 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN4:4;          /**< \brief [19:16] Trigger Line to Trigger Pin 4 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN5:4;          /**< \brief [23:20] Trigger Line to Trigger Pin 5 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN6:4;          /**< \brief [27:24] Trigger Line to Trigger Pin 6 Routing (rw) */
    __IO Ifx_Strict_32Bit PIN7:4;          /**< \brief [31:28] Trigger Line to Trigger Pin 7 Routing (rw) */
} Ifx_CBS_TOPR_Bits;

/** \brief TG Routing for CPU0 */
typedef struct _Ifx_CBS_TRC_Bits
{
    __IO Ifx_Strict_32Bit HALT:4;          /**< \brief [3:0] HALT to Trigger Line Routing - HALT (rw) */
    __IO Ifx_Strict_32Bit BRKOUT:4;        /**< \brief [7:4] BRKOUT to Trigger Line Routing - BRKOUT (rw) */
    __IO Ifx_Strict_32Bit BT1:1;           /**< \brief [8:8] BRKOUT to Trigger Line 1 Routing - BT1 (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [19:9] \internal Reserved */
    __IO Ifx_Strict_32Bit BRKIN:4;         /**< \brief [23:20] Trigger Line to BRKIN Routing - BRKIN (rw) */
    __IO Ifx_Strict_32Bit SUSIN:4;         /**< \brief [27:24] Trigger Line to SUSIN Routing - SUSIN (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CBS_TRC_Bits;

/** \brief TG Routing for CPUCS Control */
typedef struct _Ifx_CBS_TRCCS_Bits
{
    __IO Ifx_Strict_32Bit HALT:4;          /**< \brief [3:0] HALT to Trigger Line Routing - HALT (rw) */
    __IO Ifx_Strict_32Bit BRKOUT:4;        /**< \brief [7:4] BRKOUT to Trigger Line Routing - BRKOUT (rw) */
    __IO Ifx_Strict_32Bit BT1:1;           /**< \brief [8:8] BRKOUT to Trigger Line 1 Routing - BT1 (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [19:9] \internal Reserved */
    __IO Ifx_Strict_32Bit BRKIN:4;         /**< \brief [23:20] Trigger Line to BRKIN Routing - BRKIN (rw) */
    __IO Ifx_Strict_32Bit SUSIN:4;         /**< \brief [27:24] Trigger Line to SUSIN Routing - SUSIN (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CBS_TRCCS_Bits;

/** \brief TG Routing Events of CPU0 */
typedef struct _Ifx_CBS_TREC_Bits
{
    __IO Ifx_Strict_32Bit TR0EV:4;         /**< \brief [3:0] TRxEVT to Trigger Line Routing TR0EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit TR2EV:4;         /**< \brief [11:8] TRxEVT to Trigger Line Routing TR2EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit TR4EV:4;         /**< \brief [19:16] TRxEVT to Trigger Line Routing TR4EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __IO Ifx_Strict_32Bit TR6EV:4;         /**< \brief [27:24] TRxEVT to Trigger Line Routing TR6EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CBS_TREC_Bits;

/** \brief TG Routing Events of PPU */
typedef struct _Ifx_CBS_TREPPU_Bits
{
    __IO Ifx_Strict_32Bit TR0EV:4;         /**< \brief [3:0] TRxEVT to Trigger Line Routing TR0EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit TR2EV:4;         /**< \brief [11:8] TRxEVT to Trigger Line Routing TR2EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit TR4EV:4;         /**< \brief [19:16] TRxEVT to Trigger Line Routing TR4EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __IO Ifx_Strict_32Bit TR6EV:4;         /**< \brief [27:24] TRxEVT to Trigger Line Routing TR6EV (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CBS_TREPPU_Bits;

/** \brief Trigger to Host Register 0 */
typedef struct _Ifx_CBS_TRIG_Bits
{
    __I  Ifx_UReg_32Bit TRG_0:1;           /**< \brief [0:0] Service Request Bits - TRG_0 (rh) */
    __I  Ifx_UReg_32Bit TRG_1:1;           /**< \brief [1:1] Service Request Bits - TRG_1 (rh) */
    __I  Ifx_UReg_32Bit TRG_2:1;           /**< \brief [2:2] Service Request Bits - TRG_2 (rh) */
    __I  Ifx_UReg_32Bit TRG_3:1;           /**< \brief [3:3] Service Request Bits - TRG_3 (rh) */
    __I  Ifx_UReg_32Bit TRG_4:1;           /**< \brief [4:4] Service Request Bits - TRG_4 (rh) */
    __I  Ifx_UReg_32Bit TRG_5:1;           /**< \brief [5:5] Service Request Bits - TRG_5 (rh) */
    __I  Ifx_UReg_32Bit TRG_6:1;           /**< \brief [6:6] Service Request Bits - TRG_6 (rh) */
    __I  Ifx_UReg_32Bit TRG_7:1;           /**< \brief [7:7] Service Request Bits - TRG_7 (rh) */
    __I  Ifx_UReg_32Bit TRG_8:1;           /**< \brief [8:8] Service Request Bits - TRG_8 (rh) */
    __I  Ifx_UReg_32Bit TRG_9:1;           /**< \brief [9:9] Service Request Bits - TRG_9 (rh) */
    __I  Ifx_UReg_32Bit TRG_10:1;          /**< \brief [10:10] Service Request Bits - TRG_10 (rh) */
    __I  Ifx_UReg_32Bit TRG_11:1;          /**< \brief [11:11] Service Request Bits - TRG_11 (rh) */
    __I  Ifx_UReg_32Bit TRG_12:1;          /**< \brief [12:12] Service Request Bits - TRG_12 (rh) */
    __I  Ifx_UReg_32Bit TRG_13:1;          /**< \brief [13:13] Service Request Bits - TRG_13 (rh) */
    __I  Ifx_UReg_32Bit TRG_14:1;          /**< \brief [14:14] Service Request Bits - TRG_14 (rh) */
    __I  Ifx_UReg_32Bit TRG_15:1;          /**< \brief [15:15] Service Request Bits - TRG_15 (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TRIGNUM:8;         /**< \brief [31:24] TRIG register number - TRIGNUM (rh) */
} Ifx_CBS_TRIG_Bits;

/** \brief Clear Trigger to Host Register */
typedef struct _Ifx_CBS_TRIGC_Bits
{
    __I  Ifx_UReg_32Bit TRG_0:1;           /**< \brief [0:0] Request Bits of most important register TRIGx - TRGx_0 (rh) */
    __I  Ifx_UReg_32Bit TRG_1:1;           /**< \brief [1:1] Request Bits of most important register TRIGx - TRGx_1 (rh) */
    __I  Ifx_UReg_32Bit TRG_2:1;           /**< \brief [2:2] Request Bits of most important register TRIGx - TRGx_2 (rh) */
    __I  Ifx_UReg_32Bit TRG_3:1;           /**< \brief [3:3] Request Bits of most important register TRIGx - TRGx_3 (rh) */
    __I  Ifx_UReg_32Bit TRG_4:1;           /**< \brief [4:4] Request Bits of most important register TRIGx - TRGx_4 (rh) */
    __I  Ifx_UReg_32Bit TRG_5:1;           /**< \brief [5:5] Request Bits of most important register TRIGx - TRGx_5 (rh) */
    __I  Ifx_UReg_32Bit TRG_6:1;           /**< \brief [6:6] Request Bits of most important register TRIGx - TRGx_6 (rh) */
    __I  Ifx_UReg_32Bit TRG_7:1;           /**< \brief [7:7] Request Bits of most important register TRIGx - TRGx_7 (rh) */
    __I  Ifx_UReg_32Bit TRG_8:1;           /**< \brief [8:8] Request Bits of most important register TRIGx - TRGx_8 (rh) */
    __I  Ifx_UReg_32Bit TRG_9:1;           /**< \brief [9:9] Request Bits of most important register TRIGx - TRGx_9 (rh) */
    __I  Ifx_UReg_32Bit TRG_10:1;          /**< \brief [10:10] Request Bits of most important register TRIGx - TRGx_10 (rh) */
    __I  Ifx_UReg_32Bit TRG_11:1;          /**< \brief [11:11] Request Bits of most important register TRIGx - TRGx_11 (rh) */
    __I  Ifx_UReg_32Bit TRG_12:1;          /**< \brief [12:12] Request Bits of most important register TRIGx - TRGx_12 (rh) */
    __I  Ifx_UReg_32Bit TRG_13:1;          /**< \brief [13:13] Request Bits of most important register TRIGx - TRGx_13 (rh) */
    __I  Ifx_UReg_32Bit TRG_14:1;          /**< \brief [14:14] Request Bits of most important register TRIGx - TRGx_14 (rh) */
    __I  Ifx_UReg_32Bit TRG_15:1;          /**< \brief [15:15] Request Bits of most important register TRIGx - TRGx_15 (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __I  Ifx_UReg_32Bit TRIGNUM:8;         /**< \brief [31:24] Index of most important register TRIGx - TRIGNUM (rh) */
} Ifx_CBS_TRIGC_Bits;

/** \brief Set Trigger to Host Register */
typedef struct _Ifx_CBS_TRIGS_Bits
{
    __O  Ifx_Strict_32Bit BITNUM:8;        /**< \brief [7:0] Service Request Bit Number to Set - BITNUM (w) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CBS_TRIGS_Bits;

/** \brief TG Routing for MCDS Control */
typedef struct _Ifx_CBS_TRMC_Bits
{
    __I  Ifx_Strict_32Bit :4;              /**< \brief [3:0] \internal Reserved */
    __IO Ifx_Strict_32Bit BRKOUT:4;        /**< \brief [7:4] MCDS break_out to Trigger Line Routing - BRKOUT (rw) */
    __IO Ifx_Strict_32Bit SUSOUT:4;        /**< \brief [11:8] MCDS suspend_out to Trigger Line Routing - SUSOUT (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [19:12] \internal Reserved */
    __IO Ifx_Strict_32Bit BRKIN:4;         /**< \brief [23:20] Trigger Line to MCDS break_in Routing - BRKIN (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CBS_TRMC_Bits;

/** \brief TG Routing for MCDS Triggers */
typedef struct _Ifx_CBS_TRMT_Bits
{
    __IO Ifx_Strict_32Bit TG0:4;           /**< \brief [3:0] MCDS trig_out 0 to Trigger Line Routing - TG0 (rw) */
    __IO Ifx_Strict_32Bit TG1:4;           /**< \brief [7:4] MCDS trig_out 1 to Trigger Line Routing - TG1 (rw) */
    __IO Ifx_Strict_32Bit TG2:4;           /**< \brief [11:8] MCDS trig_out 2 to Trigger Line Routing - TG2 (rw) */
    __IO Ifx_Strict_32Bit TG3:4;           /**< \brief [15:12] MCDS trig_out 3 to Trigger Line Routing - TG3 (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CBS_TRMT_Bits;

/** \brief TG Routing for PPU */
typedef struct _Ifx_CBS_TRPPU_Bits
{
    __IO Ifx_Strict_32Bit HALT:4;          /**< \brief [3:0] HALT to Trigger Line Routing - HALT (rw) */
    __IO Ifx_Strict_32Bit BRKOUT:4;        /**< \brief [7:4] BRKOUT to Trigger Line Routing - BRKOUT (rw) */
    __IO Ifx_Strict_32Bit BT1:1;           /**< \brief [8:8] BRKOUT to Trigger Line 1 Routing - BT1 (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [19:9] \internal Reserved */
    __IO Ifx_Strict_32Bit BRKIN:4;         /**< \brief [23:20] Trigger Line to BRKIN Routing - BRKIN (rw) */
    __IO Ifx_Strict_32Bit SUSIN:4;         /**< \brief [27:24] Trigger Line to SUSIN Routing - SUSIN (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CBS_TRPPU_Bits;

/** \brief TG Routing for Special Signals */
typedef struct _Ifx_CBS_TRSS_Bits
{
    __IO Ifx_Strict_32Bit TT:4;            /**< \brief [3:0] Trigger Line to Cerberus’ Triggered Transfer Routing - TT (rw) */
    __IO Ifx_Strict_32Bit IFS:4;           /**< \brief [7:4] Trigger Line to Fault and Stress Injection Routing - IFS (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit SRC0:4;          /**< \brief [19:16] Trigger Line to SRC0 Interrupt Routing - SRC0 (rw) */
    __IO Ifx_Strict_32Bit SRC1:4;          /**< \brief [23:20] Trigger Line to SRC1 Interrupt Routing - SRC1 (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CBS_TRSS_Bits;

/** \brief TG Routing for OTGBi Bits [15:8] */
typedef struct _Ifx_CBS_TRTGB_H_Bits
{
    __IO Ifx_Strict_32Bit TG8:4;           /**< \brief [3:0] OTGBi Bit 8 to Trigger Line Routing - TG8 (rw) */
    __IO Ifx_Strict_32Bit TG9:4;           /**< \brief [7:4] OTGBi Bit 9 to Trigger Line Routing - TG9 (rw) */
    __IO Ifx_Strict_32Bit TG10:4;          /**< \brief [11:8] OTGBi Bit 10 to Trigger Line Routing - TG10 (rw) */
    __IO Ifx_Strict_32Bit TG11:4;          /**< \brief [15:12] OTGBi Bit 11 to Trigger Line Routing - TG11 (rw) */
    __IO Ifx_Strict_32Bit TG12:4;          /**< \brief [19:16] OTGBi Bit 12 to Trigger Line Routing - TG12 (rw) */
    __IO Ifx_Strict_32Bit TG13:4;          /**< \brief [23:20] OTGBi Bit 13 to Trigger Line Routing - TG13 (rw) */
    __IO Ifx_Strict_32Bit TG14:4;          /**< \brief [27:24] OTGBi Bit 14 to Trigger Line Routing - TG14 (rw) */
    __IO Ifx_Strict_32Bit TG15:4;          /**< \brief [31:28] OTGBi Bit 15 to Trigger Line Routing - TG15 (rw) */
} Ifx_CBS_TRTGB_H_Bits;

/** \brief TG Routing for OTGBi Bits [7:0] */
typedef struct _Ifx_CBS_TRTGB_L_Bits
{
    __IO Ifx_Strict_32Bit TG0:4;           /**< \brief [3:0] OTGBi Bit 0 to Trigger Line Routing - TG0 (rw) */
    __IO Ifx_Strict_32Bit TG1:4;           /**< \brief [7:4] OTGBi Bit 1 to Trigger Line Routing - TG1 (rw) */
    __IO Ifx_Strict_32Bit TG2:4;           /**< \brief [11:8] OTGBi Bit 2 to Trigger Line Routing - TG2 (rw) */
    __IO Ifx_Strict_32Bit TG3:4;           /**< \brief [15:12] OTGBi Bit 3 to Trigger Line Routing - TG3 (rw) */
    __IO Ifx_Strict_32Bit TG4:4;           /**< \brief [19:16] OTGBi Bit 4 to Trigger Line Routing - TG4 (rw) */
    __IO Ifx_Strict_32Bit TG5:4;           /**< \brief [23:20] OTGBi Bit 5 to Trigger Line Routing - TG5 (rw) */
    __IO Ifx_Strict_32Bit TG6:4;           /**< \brief [27:24] OTGBi Bit 6 to Trigger Line Routing - TG6 (rw) */
    __IO Ifx_Strict_32Bit TG7:4;           /**< \brief [31:28] OTGBi Bit 7 to Trigger Line Routing - TG7 (rw) */
} Ifx_CBS_TRTGB_L_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_cbs_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_CBS_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_CBS_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_CBS_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_CBS_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_CBS_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_CBS_ACCEN_WRB_FPI;

/** \brief Communication Mode Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_COMDATA_Bits B;                /**< \brief Bitfield access */
} Ifx_CBS_COMDATA;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_CBS_ID;

/** \brief IFS Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_IFSA_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_IFSA;

/** \brief IFS Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_IFSC_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_IFSC;

/** \brief IOClient Status and Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_IOSR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_IOSR;

/** \brief JTAG Device Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_JTAGID_Bits B;                 /**< \brief Bitfield access */
} Ifx_CBS_JTAGID;

/** \brief OSCU Control Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OCNTRL_Bits B;                 /**< \brief Bitfield access */
} Ifx_CBS_OCNTRL;

/** \brief OCDS Enable Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OEC_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_OEC;

/** \brief OCDS Interface Mode Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OIFM_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_OIFM;

/** \brief OTGM MCDS I/F Sensitivity Negedge   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OMISN_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_OMISN;

/** \brief OTGM MCDS I/F Sensitivity Posedge   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OMISP_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_OMISP;

/** \brief OTGM OTGB0/1 Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OOBS_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_OOBS;

/** \brief OSCU Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_OSTATE_Bits B;                 /**< \brief Bitfield access */
} Ifx_CBS_OSTATE;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_PROT;

/** \brief TG Capture for Cores - BRKOUT   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TCCB_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TCCB;

/** \brief TG Capture for Cores - HALT   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TCCH_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TCCH;

/** \brief TG Capture for TG Input Pins   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TCIP_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TCIP;

/** \brief TG Capture for MCDS   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TCM_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_TCM;

/** \brief TG Capture for OTGB0/1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TCTGB_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TCTGB;

/** \brief TG Capture for TG Lines   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TCTL_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TCTL;

/** \brief Tool Identifier and startup Handshake   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TIH_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_TIH;

/** \brief TG Input Pins Routing   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TIPR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TIPR;

/** \brief TG Line 1 Suspend Targets   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TL1ST_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TL1ST;

/** \brief TG Line Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_TLC;

/** \brief TG Line Capture and Hold Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TLCHE_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TLCHE;

/** \brief TG Line Capture and Hold Clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TLCHS_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TLCHS;

/** \brief TG Line State   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TLS_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_TLS;

/** \brief TG Line Timer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TLT_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_TLT;

/** \brief TG Lines for Trigger to Host   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TLTTH_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TLTTH;

/** \brief TG Line Counter Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TL_TLCC_Bits B;                /**< \brief Bitfield access */
} Ifx_CBS_TL_TLCC;

/** \brief TG Line Counter Value   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TL_TLCV_Bits B;                /**< \brief Bitfield access */
} Ifx_CBS_TL_TLCV;

/** \brief TG Output Pins Pulse Stretcher   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TOPPS_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TOPPS;

/** \brief TG Output Pins Routing   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TOPR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TOPR;

/** \brief TG Routing for CPU0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRC_Bits B;                    /**< \brief Bitfield access */
} Ifx_CBS_TRC;

/** \brief TG Routing for CPUCS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRCCS_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TRCCS;

/** \brief TG Routing Events of CPU0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TREC_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TREC;

/** \brief TG Routing Events of PPU   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TREPPU_Bits B;                 /**< \brief Bitfield access */
} Ifx_CBS_TREPPU;

/** \brief Trigger to Host Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRIG_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TRIG;

/** \brief Clear Trigger to Host Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRIGC_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TRIGC;

/** \brief Set Trigger to Host Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRIGS_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TRIGS;

/** \brief TG Routing for MCDS Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRMC_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TRMC;

/** \brief TG Routing for MCDS Triggers   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRMT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TRMT;

/** \brief TG Routing for PPU   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRPPU_Bits B;                  /**< \brief Bitfield access */
} Ifx_CBS_TRPPU;

/** \brief TG Routing for Special Signals   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRSS_Bits B;                   /**< \brief Bitfield access */
} Ifx_CBS_TRSS;

/** \brief TG Routing for OTGBi Bits [15:8]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRTGB_H_Bits B;                /**< \brief Bitfield access */
} Ifx_CBS_TRTGB_H;

/** \brief TG Routing for OTGBi Bits [7:0]   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CBS_TRTGB_L_Bits B;                /**< \brief Bitfield access */
} Ifx_CBS_TRTGB_L;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cbs_TRTGB_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TRTGB object */
typedef volatile struct _Ifx_CBS_TRTGB
{
       __IO Ifx_CBS_TRTGB_L                     L;                      /**< \brief 0, TG Routing for OTGBi Bits [7:0]*/
       __IO Ifx_CBS_TRTGB_H                     H;                      /**< \brief 4, TG Routing for OTGBi Bits [15:8]*/
} Ifx_CBS_TRTGB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cbs_TL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TL object */
typedef volatile struct _Ifx_CBS_TL
{
       __IO Ifx_CBS_TL_TLCC                     TLCC;                   /**< \brief 0, TG Line Counter Control*/
       __I  Ifx_CBS_TL_TLCV                     TLCV;                   /**< \brief 4, TG Line Counter Value*/
} Ifx_CBS_TL;

/******************************************************************************/
/** \addtogroup IfxSfr_Cbs_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CBS object */
typedef volatile struct _Ifx_CBS
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_CBS_ID                          ID;                     /**< \brief 8, Module Identification Register*/
       __I  Ifx_UReg_8Bit                       reserved_C[20];         /**< \brief C, \internal Reserved */
       __IO Ifx_CBS_PROT                        PROTSE;                 /**< \brief 20, PROT Register*/
       __I  Ifx_UReg_8Bit                       reserved_24[28];        /**< \brief 24, \internal Reserved */
       __IO Ifx_CBS_ACCEN_WRA                   ACCENWRA;               /**< \brief 40, Write access enable register A*/
       __IO Ifx_CBS_ACCEN_WRB_FPI               ACCENWRB;               /**< \brief 44, Write access enable register B*/
       __IO Ifx_CBS_ACCEN_RDA                   ACCENRDA;               /**< \brief 48, Read access enable register A*/
       __IO Ifx_CBS_ACCEN_RDB_FPI               ACCENRDB;               /**< \brief 4C, Read access enable register B*/
       __IO Ifx_CBS_ACCEN_VM                    ACCENVM;                /**< \brief 50, VM access enable register*/
       __IO Ifx_CBS_ACCEN_PRS                   ACCENPRS;               /**< \brief 54, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_58[8];         /**< \brief 58, \internal Reserved */
       __IO Ifx_CBS_OIFM                        OIFM;                   /**< \brief 60, OCDS Interface Mode Register*/
       __O  Ifx_CBS_OCNTRL                      OCNTRL;                 /**< \brief 64, OSCU Control Register*/
       __IO Ifx_CBS_OEC                         OEC;                    /**< \brief 68, OCDS Enable Control Register*/
       __I  Ifx_CBS_OSTATE                      OSTATE;                 /**< \brief 6C, OSCU Status Register*/
       __IO Ifx_CBS_IFSA                        IFSA;                   /**< \brief 70, IFS Address Register*/
       __IO Ifx_CBS_IFSC                        IFSC;                   /**< \brief 74, IFS Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_78[8];         /**< \brief 78, \internal Reserved */
       __I  Ifx_CBS_JTAGID                      JTAGID;                 /**< \brief 80, JTAG Device Identification Register*/
       __IO Ifx_CBS_COMDATA                     COMDATA;                /**< \brief 84, Communication Mode Data Register*/
       __IO Ifx_CBS_IOSR                        IOSR;                   /**< \brief 88, IOClient Status and Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_8C[4];         /**< \brief 8C, \internal Reserved */
       __IO Ifx_CBS_TIH                         TIHDAP;                 /**< \brief 90, Tool Identification Register for DAP connections*/
       __IO Ifx_CBS_TIH                         TIHDAPE;                /**< \brief 94, Tool Identification Register for DAPE connections*/
       __IO Ifx_CBS_TIH                         TIHGP;                  /**< \brief 98, Tool Identification Register for General Purpose connections*/
       __I  Ifx_UReg_8Bit                       reserved_9C[68];        /**< \brief 9C, \internal Reserved */
       __IO Ifx_CBS_TIPR                        TIPR;                   /**< \brief E0, TG Input Pins Routing*/
       __IO Ifx_CBS_TOPR                        TOPR;                   /**< \brief E4, TG Output Pins Routing*/
       __IO Ifx_CBS_TOPPS                       TOPPS;                  /**< \brief E8, TG Output Pins Pulse Stretcher*/
       __I  Ifx_UReg_8Bit                       reserved_EC[20];        /**< \brief EC, \internal Reserved */
       __IO Ifx_CBS_TRCCS                       TRCCS;                  /**< \brief 100, TG Routing for CPUCS Control*/
       __IO Ifx_CBS_TRC                         TRC[6];                 /**< \brief 104, TG Routing for CPU0*/
       __I  Ifx_UReg_8Bit                       reserved_11C[116];      /**< \brief 11C, \internal Reserved */
       __IO Ifx_CBS_TRPPU                       TRPPU[1];               /**< \brief 190, TG Routing for PPU*/
       __I  Ifx_UReg_8Bit                       reserved_194[12];       /**< \brief 194, \internal Reserved */
       __IO Ifx_CBS_TRMC                        TRMC;                   /**< \brief 1A0, TG Routing for MCDS Control*/
       __IO Ifx_CBS_TRSS                        TRSS;                   /**< \brief 1A4, TG Routing for Special Signals*/
       __I  Ifx_UReg_8Bit                       reserved_1A8[8];        /**< \brief 1A8, \internal Reserved */
       __I  Ifx_CBS_OOBS                        OOBS;                   /**< \brief 1B0, OTGM OTGB0/1 Status*/
       __I  Ifx_UReg_8Bit                       reserved_1B4[4];        /**< \brief 1B4, \internal Reserved */
       __IO Ifx_CBS_OMISP                       OMISP;                  /**< \brief 1B8, OTGM MCDS I/F Sensitivity Posedge*/
       __IO Ifx_CBS_OMISN                       OMISN;                  /**< \brief 1BC, OTGM MCDS I/F Sensitivity Negedge*/
       __I  Ifx_UReg_8Bit                       reserved_1C0[16];       /**< \brief 1C0, \internal Reserved */
       __IO Ifx_CBS_TRTGB                       TRTGB[2];               /**< \brief 1D0, TG Routing for OTGBi Bits [15:8]*/
       __I  Ifx_UReg_8Bit                       reserved_1E0[36];       /**< \brief 1E0, \internal Reserved */
       __IO Ifx_CBS_TREC                        TREC[6];                /**< \brief 204, TG Routing Events of CPU0*/
       __I  Ifx_UReg_8Bit                       reserved_21C[116];      /**< \brief 21C, \internal Reserved */
       __IO Ifx_CBS_TREPPU                      TREPPU[1];              /**< \brief 290, TG Routing Events of PPU*/
       __I  Ifx_UReg_8Bit                       reserved_294[12];       /**< \brief 294, \internal Reserved */
       __IO Ifx_CBS_TRMT                        TRMT;                   /**< \brief 2A0, TG Routing for MCDS Triggers*/
       __I  Ifx_UReg_8Bit                       reserved_2A4[12];       /**< \brief 2A4, \internal Reserved */
       __I  Ifx_CBS_TLS                         TLS;                    /**< \brief 2B0, TG Line State*/
       __IO Ifx_CBS_TLC                         TLC;                    /**< \brief 2B4, TG Line Control*/
       __IO Ifx_CBS_TL1ST                       TL1ST;                  /**< \brief 2B8, TG Line 1 Suspend Targets*/
       __IO Ifx_CBS_TLCHE                       TLCHE;                  /**< \brief 2BC, TG Line Capture and Hold Enable*/
       __O  Ifx_CBS_TLCHS                       TLCHS;                  /**< \brief 2C0, TG Line Capture and Hold Clear*/
       __IO Ifx_CBS_TLT                         TLT;                    /**< \brief 2C4, TG Line Timer*/
       __IO Ifx_CBS_TLTTH                       TLTTH;                  /**< \brief 2C8, TG Lines for Trigger to Host*/
       __I  Ifx_UReg_8Bit                       reserved_2CC[4];        /**< \brief 2CC, \internal Reserved */
       __IO Ifx_CBS_TL                          TL0;                    /**< \brief 2D0, TG Line Counter Value*/
       __IO Ifx_CBS_TL                          TL1;                    /**< \brief 2D8, TG Line Counter Value*/
       __I  Ifx_UReg_8Bit                       reserved_2E0[16];       /**< \brief 2E0, \internal Reserved */
       __I  Ifx_CBS_TCM                         TCM;                    /**< \brief 2F0, TG Capture for MCDS*/
       __I  Ifx_CBS_TCTL                        TCTL;                   /**< \brief 2F4, TG Capture for TG Lines*/
       __I  Ifx_CBS_TCIP                        TCIP;                   /**< \brief 2F8, TG Capture for TG Input Pins*/
       __I  Ifx_CBS_TCCB                        TCCB;                   /**< \brief 2FC, TG Capture for Cores - BRKOUT*/
       __I  Ifx_CBS_TCCH                        TCCH;                   /**< \brief 300, TG Capture for Cores - HALT*/
       __I  Ifx_CBS_TCTGB                       TCTGB;                  /**< \brief 304, TG Capture for OTGB0/1*/
       __I  Ifx_UReg_8Bit                       reserved_308[16];       /**< \brief 308, \internal Reserved */
       __O  Ifx_CBS_TRIGS                       TRIGS;                  /**< \brief 318, Set Trigger to Host Register*/
       __I  Ifx_CBS_TRIGC                       TRIGC;                  /**< \brief 31C, Clear Trigger to Host Register*/
       __I  Ifx_CBS_TRIG                        TRIG[6];                /**< \brief 320, Trigger to Host Register 0*/
       __I  Ifx_UReg_8Bit                       reserved_338[200];      /**< \brief 338, \internal Reserved */
} Ifx_CBS;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXCBS_REGDEF_H */
