/**
 * \file IfxScu_reg.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SCU/V0.2.2.0.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scu_Registers_Cfg Scu address
 * \ingroup IfxSfr_Scu_Registers
 * 
 * \defgroup IfxSfr_Scu_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Scu_Registers_Cfg
 *
 * \defgroup IfxSfr_Scu_Registers_Cfg_Scu 2-SCU
 * \ingroup IfxSfr_Scu_Registers_Cfg
 *
 *
 */
#ifndef IFXSCU_REG_H
#define IFXSCU_REG_H 1
/******************************************************************************/
#include "IfxScu_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/** \addtogroup IfxSfr_Scu_Registers_Cfg_BaseAddress
 * \{  */

/** \brief SCU object */
#define MODULE_SCU /*lint --e(923, 9078)*/ ((*(Ifx_SCU*)0xF0024000u))
/** \}  */


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scu_Registers_Cfg_Scu
 * \{  */
/** \brief 8, Module identification register */
#define SCU_ID /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ID*)0xF0024008u)

/** \brief 18, PROT register endinit */
#define SCU_PROTE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_PROT*)0xF0024018u)

/** \brief 1C, PROT register safe endinit */
#define SCU_PROTSE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_PROT*)0xF002401Cu)

/** \brief 20, PROT register cyber-secure endinit */
#define SCU_PROTCSE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_PROT*)0xF0024020u)

/** \brief 24, PROT register cyber-secure APU endinit */
#define SCU_PROTCSAE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_PROT*)0xF0024024u)

/** \brief 28, ACCENNOM write access enable register A */
#define SCU_ACCENNOM_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRA*)0xF0024028u)

/** \brief 2C, ACCENNOM write access enable register B */
#define SCU_ACCENNOM_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRB_FPI*)0xF002402Cu)

/** \brief 30, ACCENNOM read access enable register A */
#define SCU_ACCENNOM_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDA*)0xF0024030u)

/** \brief 34, ACCENNOM read access enable register B */
#define SCU_ACCENNOM_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDB_FPI*)0xF0024034u)

/** \brief 38, ACCENNOM VM access enable register */
#define SCU_ACCENNOM_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_VM*)0xF0024038u)

/** \brief 3C, ACCENNOM PRS access enable register */
#define SCU_ACCENNOM_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_PRS*)0xF002403Cu)

/** \brief 48, ACCENGRP0 write access enable register A */
#define SCU_ACCENGRP0_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRA*)0xF0024048u)

/** \brief 4C, ACCENGRP0 write access enable register B */
#define SCU_ACCENGRP0_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRB_FPI*)0xF002404Cu)

/** \brief 50, ACCENGRP0 read access enable register A */
#define SCU_ACCENGRP0_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDA*)0xF0024050u)

/** \brief 54, ACCENGRP0 read access enable register B */
#define SCU_ACCENGRP0_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDB_FPI*)0xF0024054u)

/** \brief 58, ACCENGRP0 VM access enable register */
#define SCU_ACCENGRP0_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_VM*)0xF0024058u)

/** \brief 5C, ACCENGRP0 PRS access enable register */
#define SCU_ACCENGRP0_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_PRS*)0xF002405Cu)

/** \brief 68, ACCENGRP1 write access enable register A */
#define SCU_ACCENGRP1_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRA*)0xF0024068u)

/** \brief 6C, ACCENGRP1 write access enable register B */
#define SCU_ACCENGRP1_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRB_FPI*)0xF002406Cu)

/** \brief 70, ACCENGRP1 read access enable register A */
#define SCU_ACCENGRP1_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDA*)0xF0024070u)

/** \brief 74, ACCENGRP1 read access enable register B */
#define SCU_ACCENGRP1_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDB_FPI*)0xF0024074u)

/** \brief 78, ACCENGRP1 VM access enable register */
#define SCU_ACCENGRP1_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_VM*)0xF0024078u)

/** \brief 7C, ACCENGRP1 PRS access enable register */
#define SCU_ACCENGRP1_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_PRS*)0xF002407Cu)

/** \brief 88, ACCENGRP2 write access enable register A */
#define SCU_ACCENGRP2_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRA*)0xF0024088u)

/** \brief 8C, ACCENGRP2 write access enable register B */
#define SCU_ACCENGRP2_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRB_FPI*)0xF002408Cu)

/** \brief 90, ACCENGRP2 read access enable register A */
#define SCU_ACCENGRP2_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDA*)0xF0024090u)

/** \brief 94, ACCENGRP2 read access enable register B */
#define SCU_ACCENGRP2_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDB_FPI*)0xF0024094u)

/** \brief 98, ACCENGRP2 VM access enable register */
#define SCU_ACCENGRP2_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_VM*)0xF0024098u)

/** \brief 9C, ACCENGRP2 PRS access enable register */
#define SCU_ACCENGRP2_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_PRS*)0xF002409Cu)

/** \brief A8, ACCENGRP3 write access enable register A */
#define SCU_ACCENGRP3_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRA*)0xF00240A8u)

/** \brief AC, ACCENGRP3 write access enable register B */
#define SCU_ACCENGRP3_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRB_FPI*)0xF00240ACu)

/** \brief B0, ACCENGRP3 read access enable register A */
#define SCU_ACCENGRP3_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDA*)0xF00240B0u)

/** \brief B4, ACCENGRP3 read access enable register B */
#define SCU_ACCENGRP3_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDB_FPI*)0xF00240B4u)

/** \brief B8, ACCENGRP3 VM access enable register */
#define SCU_ACCENGRP3_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_VM*)0xF00240B8u)

/** \brief BC, ACCENGRP3 PRS access enable register */
#define SCU_ACCENGRP3_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_PRS*)0xF00240BCu)

/** \brief C8, ACCENCS write access enable register A */
#define SCU_ACCENCS_WRA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRA*)0xF00240C8u)

/** \brief CC, ACCENCS write access enable register B */
#define SCU_ACCENCS_WRB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_WRB_FPI*)0xF00240CCu)

/** \brief D0, ACCENCS read access enable register A */
#define SCU_ACCENCS_RDA /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDA*)0xF00240D0u)

/** \brief D4, ACCENCS read access enable register B */
#define SCU_ACCENCS_RDB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_RDB_FPI*)0xF00240D4u)

/** \brief D8, ACCENCS VM access enable register */
#define SCU_ACCENCS_VM /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_VM*)0xF00240D8u)

/** \brief DC, ACCENCS PRS access enable register */
#define SCU_ACCENCS_PRS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ACCEN_PRS*)0xF00240DCu)

/** \brief E8, Control register for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_CTRL*)0xF00240E8u)

/** \brief EC, SET/CLR enable register for group 0 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP0_SETCLREN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN*)0xF00240ECu)

/** \brief F0, Trap set register for group 0 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP0_SET /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET*)0xF00240F0u)

/** \brief F4, Trap clear register for group 0 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP0_CLR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR*)0xF00240F4u)

/** \brief F8, SET/CLR enable register for group 1 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP1_SETCLREN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN*)0xF00240F8u)

/** \brief FC, Trap set register for group 1 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP1_SET /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET*)0xF00240FCu)

/** \brief 100, Trap clear register for group 1 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP1_CLR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR*)0xF0024100u)

/** \brief 104, SET/CLR enable register for group 2 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP2_SETCLREN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN*)0xF0024104u)

/** \brief 108, Trap set register for group 2 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP2_SET /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET*)0xF0024108u)

/** \brief 10C, Trap clear register for group 2 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP2_CLR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR*)0xF002410Cu)

/** \brief 110, SET/CLR enable register for group 3 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP3_SETCLREN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SETCLREN*)0xF0024110u)

/** \brief 114, Trap set register for group 3 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP3_SET /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_SET*)0xF0024114u)

/** \brief 118, Trap clear register for group 3 for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_SETCLRGRP3_CLR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_SETCLRGRP_CLR*)0xF0024118u)

/** \brief 11C, Trap status register for traps related to CPU0-5 */
#define SCU_TRAPS_CPU_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_STAT*)0xF002411Cu)

/** \brief 120, Trap disable register for single CPU0 */
#define SCU_TRAPS_CPU_DIS0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_DIS*)0xF0024120u)

/** \brief 124, Trap disable register for single CPU1 */
#define SCU_TRAPS_CPU_DIS1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_DIS*)0xF0024124u)

/** \brief 128, Trap disable register for single CPU2 */
#define SCU_TRAPS_CPU_DIS2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_DIS*)0xF0024128u)

/** \brief 12C, Trap disable register for single CPU3 */
#define SCU_TRAPS_CPU_DIS3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_DIS*)0xF002412Cu)

/** \brief 130, Trap disable register for single CPU4 */
#define SCU_TRAPS_CPU_DIS4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_DIS*)0xF0024130u)

/** \brief 134, Trap disable register for single CPU5 */
#define SCU_TRAPS_CPU_DIS5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CPU_DIS*)0xF0024134u)

/** \brief 138, Control register for traps related to CPUcs */
#define SCU_TRAPS_CS_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CS_CTRL*)0xF0024138u)

/** \brief 13C, SET/CLR enable register for traps related to CPUcs */
#define SCU_TRAPS_CS_SETCLR_SETCLREN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CS_SETCLR_SETCLREN*)0xF002413Cu)

/** \brief 140, Trap set register for traps related to CPUcs */
#define SCU_TRAPS_CS_SETCLR_SET /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CS_SETCLR_SET*)0xF0024140u)

/** \brief 144, Trap clear register for traps related to CPUcs */
#define SCU_TRAPS_CS_SETCLR_CLR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CS_SETCLR_CLR*)0xF0024144u)

/** \brief 148, Trap status register for traps related to CPUcs */
#define SCU_TRAPS_CS_STAT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CS_STAT*)0xF0024148u)

/** \brief 14C, Trap disable register for CPUcs */
#define SCU_TRAPS_CS_DIS /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_TRAPS_CS_DIS*)0xF002414Cu)

/** \brief 150, External input filter register */
#define SCU_ERU_EIFILT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EIFILT*)0xF0024150u)

/** \brief 154, External input channel register 0 */
#define SCU_ERU_EICR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF0024154u)

/** \brief 158, External input channel register 1 */
#define SCU_ERU_EICR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF0024158u)

/** \brief 15C, External input channel register 2 */
#define SCU_ERU_EICR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF002415Cu)

/** \brief 160, External input channel register 3 */
#define SCU_ERU_EICR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF0024160u)

/** \brief 164, External input channel register 4 */
#define SCU_ERU_EICR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF0024164u)

/** \brief 168, External input channel register 5 */
#define SCU_ERU_EICR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF0024168u)

/** \brief 16C, External input channel register 6 */
#define SCU_ERU_EICR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF002416Cu)

/** \brief 170, External input channel register 7 */
#define SCU_ERU_EICR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EICR*)0xF0024170u)

/** \brief 174, External input flag register */
#define SCU_ERU_EIFR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_EIFR*)0xF0024174u)

/** \brief 178, Flag modification register */
#define SCU_ERU_FMR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_FMR*)0xF0024178u)

/** \brief 17C, Interrupt gating control register 0 */
#define SCU_ERU_IGCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF002417Cu)

/** \brief 180, Interrupt gating control register 1 */
#define SCU_ERU_IGCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF0024180u)

/** \brief 184, Interrupt gating control register 2 */
#define SCU_ERU_IGCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF0024184u)

/** \brief 188, Interrupt gating control register 3 */
#define SCU_ERU_IGCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF0024188u)

/** \brief 18C, Interrupt gating control register 4 */
#define SCU_ERU_IGCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF002418Cu)

/** \brief 190, Interrupt gating control register 5 */
#define SCU_ERU_IGCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF0024190u)

/** \brief 194, Interrupt gating control register 6 */
#define SCU_ERU_IGCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF0024194u)

/** \brief 198, Interrupt gating control register 7 */
#define SCU_ERU_IGCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_IGCR*)0xF0024198u)

/** \brief 19C, Pattern detection result register */
#define SCU_ERU_PDRR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_ERU_PDRR*)0xF002419Cu)

/** \brief 1A0, Overlay enable register */
#define SCU_OVCENABLE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_OVCENABLE*)0xF00241A0u)

/** \brief 1A4, Overlay control register */
#define SCU_OVCCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_OVCCON*)0xF00241A4u)

/** \brief 1A8, Chip information register */
#define SCU_CHIPINFO /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_CHIPINFO*)0xF00241A8u)

/** \brief 1AC, Software-over-the-air control register */
#define SCU_SOTACTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCU_SOTACTRL*)0xF00241ACu)


/** \}  */

/******************************************************************************/

/******************************************************************************/

#endif /* IFXSCU_REG_H */
