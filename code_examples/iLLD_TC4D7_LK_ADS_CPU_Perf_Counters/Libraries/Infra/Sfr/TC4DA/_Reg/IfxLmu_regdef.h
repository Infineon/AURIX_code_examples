/**
 * \file IfxLmu_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_LMU/V0.2.1.1.4
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Lmu_Registers Lmu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Lmu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Lmu_Registers
 * 
 * \defgroup IfxSfr_Lmu_Registers_union Register unions
 * \ingroup IfxSfr_Lmu_Registers
 * 
 * \defgroup IfxSfr_Lmu_Registers_struct Memory map
 * \ingroup IfxSfr_Lmu_Registers
 */
#ifndef IFXLMU_REGDEF_H
#define IFXLMU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Lmu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_LMU_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_LMU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_LMU_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_LMU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_LMU_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_LMU_ACCEN_RDB_SRI_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_LMU_ACCEN_RGNLA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:23;           /**< \brief [28:6] Defines bits 28:6 of the lower bound of the access protected region (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDRH:2;           /**< \brief [31:30] Defines bits 31:30 of the lower bound of the access protected region (rw) */
} Ifx_LMU_ACCEN_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_LMU_ACCEN_RGNUA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:23;           /**< \brief [28:6] Defines bits 28:6 of the upper bound of the access protected region (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDRH:2;           /**< \brief [31:30] Defines bits 31:30 of the upper bound of the access protected region (rw) */
} Ifx_LMU_ACCEN_RGNUA_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_LMU_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_LMU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_LMU_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_LMU_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_LMU_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_LMU_ACCEN_WRB_SRI_Bits;

/** \brief Module identification register */
typedef struct _Ifx_LMU_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_LMU_ID_Bits;

/** \brief Memory control register */
typedef struct _Ifx_LMU_MEMCON_Bits
{
    __I  Ifx_Strict_32Bit :2;              /**< \brief [1:0] \internal Reserved */
    __IO Ifx_Strict_32Bit INTERR:1;        /**< \brief [2:2] Internal ECC error - INTERR (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit RMWERR:1;        /**< \brief [4:4] Internal read modify write error - RMWERR (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [5:5] \internal Reserved */
    __IO Ifx_Strict_32Bit DATAERR:1;       /**< \brief [6:6] SRI write data phase ECC error - DATAERR (rwh) */
    __IO Ifx_Strict_32Bit ADDERR:1;        /**< \brief [7:7] SRI address phase ECC error - ADDERR (rwh) */
    __IO Ifx_Strict_32Bit ERRDISWE:1;      /**< \brief [8:8] ERRDIS write enable (rwh) */
    __IO Ifx_Strict_32Bit ERRDIS:1;        /**< \brief [9:9] ECC error disable - ERRDIS (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_LMU_MEMCON_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_LMU_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_LMU_PROT_Bits;

/** \brief Protection for memory regions */
typedef struct _Ifx_LMU_PROTRGN_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit SEL:4;           /**< \brief [11:8] Protection Region Select (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_LMU_PROTRGN_Bits;

/** \brief Region PRS access enable register */
typedef struct _Ifx_LMU_RGN_ACCEN_PRS_Bits
{
    __I  Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_LMU_RGN_ACCEN_PRS_Bits;

/** \brief Region read access enable register A */
typedef struct _Ifx_LMU_RGN_ACCEN_RDA_Bits
{
    __I  Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rh) */
} Ifx_LMU_RGN_ACCEN_RDA_Bits;

/** \brief Region read access enable register B */
typedef struct _Ifx_LMU_RGN_ACCEN_RDB_Bits
{
    __I  Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rh) */
} Ifx_LMU_RGN_ACCEN_RDB_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_LMU_RGN_ACCEN_RGNLA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __I  Ifx_UReg_32Bit ADDR:23;           /**< \brief [28:6] Defines bits 28:6 of the lower bound of the access protected region (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __I  Ifx_UReg_32Bit ADDRH:2;           /**< \brief [31:30] Defines bits 31:30 of the lower bound of the access protected region (rh) */
} Ifx_LMU_RGN_ACCEN_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_LMU_RGN_ACCEN_RGNUA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __I  Ifx_UReg_32Bit ADDR:23;           /**< \brief [28:6] Defines bits 28:6 of the upper bound of the access protected region (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __I  Ifx_UReg_32Bit ADDRH:2;           /**< \brief [31:30] Defines bits 31:30 of the upper bound of the access protected region (rh) */
} Ifx_LMU_RGN_ACCEN_RGNUA_Bits;

/** \brief Region VM access enable register */
typedef struct _Ifx_LMU_RGN_ACCEN_VM_Bits
{
    __I  Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_LMU_RGN_ACCEN_VM_Bits;

/** \brief Region write access enable register A */
typedef struct _Ifx_LMU_RGN_ACCEN_WRA_Bits
{
    __I  Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rh) */
} Ifx_LMU_RGN_ACCEN_WRA_Bits;

/** \brief Region write access enable register B */
typedef struct _Ifx_LMU_RGN_ACCEN_WRB_Bits
{
    __I  Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rh) */
} Ifx_LMU_RGN_ACCEN_WRB_Bits;

/** \brief Safety control register */
typedef struct _Ifx_LMU_SCTRL_Bits
{
    __O  Ifx_Strict_32Bit GED:1;           /**< \brief [0:0] Generate error in EDC for data protection - GED (w) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [9:1] \internal Reserved */
    __IO Ifx_Strict_32Bit CMPTST:2;        /**< \brief [11:10] Comparator test (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_LMU_SCTRL_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_lmu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_RDB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_RDB_SRI;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_RGNLA_Bits B;            /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_RGNUA_Bits B;            /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_RGNUA;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ACCEN_WRB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_ACCEN_WRB_SRI;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_LMU_ID;

/** \brief Memory control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_MEMCON_Bits B;                 /**< \brief Bitfield access */
} Ifx_LMU_MEMCON;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_LMU_PROT;

/** \brief Protection for memory regions   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_PROTRGN_Bits B;                /**< \brief Bitfield access */
} Ifx_LMU_PROTRGN;

/** \brief Region PRS access enable register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_PRS_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_PRS;

/** \brief Region read access enable register A   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_RDA_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_RDA;

/** \brief Region read access enable register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_RDB_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_RDB;

/** \brief Region lower address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_RGNLA_Bits B;        /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_RGNUA_Bits B;        /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_RGNUA;

/** \brief Region VM access enable register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_VM_Bits B;           /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_VM;

/** \brief Region write access enable register A   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_WRA_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_WRA;

/** \brief Region write access enable register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_RGN_ACCEN_WRB_Bits B;          /**< \brief Bitfield access */
} Ifx_LMU_RGN_ACCEN_WRB;

/** \brief Safety control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_LMU_SCTRL_Bits B;                  /**< \brief Bitfield access */
} Ifx_LMU_SCTRL;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Lmu_RGN_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_LMU_RGN_ACCEN
{
       __I  Ifx_LMU_RGN_ACCEN_WRA               WRA;                    /**< \brief 0, Region write access enable register A*/
       __I  Ifx_LMU_RGN_ACCEN_WRB               WRB;                    /**< \brief 4, Region write access enable register B*/
       __I  Ifx_LMU_RGN_ACCEN_RDA               RDA;                    /**< \brief 8, Region read access enable register A*/
       __I  Ifx_LMU_RGN_ACCEN_RDB               RDB;                    /**< \brief C, Region read access enable register B*/
       __I  Ifx_LMU_RGN_ACCEN_VM                VM;                     /**< \brief 10, Region VM access enable register*/
       __I  Ifx_LMU_RGN_ACCEN_PRS               PRS;                    /**< \brief 14, Region PRS access enable register*/
       __I  Ifx_LMU_RGN_ACCEN_RGNLA             RGNLA;                  /**< \brief 18, Region lower address register*/
       __I  Ifx_LMU_RGN_ACCEN_RGNUA             RGNUA;                  /**< \brief 1C, Region upper address register*/
} Ifx_LMU_RGN_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Lmu_RGN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RGN object */
typedef volatile struct _Ifx_LMU_RGN
{
       __IO Ifx_LMU_RGN_ACCEN                   ACCEN;                  /**< \brief 0, */
} Ifx_LMU_RGN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Lmu_ACCENCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENCFG object */
typedef volatile struct _Ifx_LMU_ACCENCFG
{
       __IO Ifx_LMU_ACCEN_WRA                   WRA;                    /**< \brief 0, Configure region write access enable register A*/
       __IO Ifx_LMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, Configure region write access enable register B*/
       __IO Ifx_LMU_ACCEN_RDA                   RDA;                    /**< \brief 8, Configure region read access enable register A*/
       __IO Ifx_LMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, Configure region read access enable register B*/
       __IO Ifx_LMU_ACCEN_VM                    VM;                     /**< \brief 10, Configure region VM access enable register*/
       __IO Ifx_LMU_ACCEN_PRS                   PRS;                    /**< \brief 14, Configure region PRS access enable register*/
       __IO Ifx_LMU_ACCEN_RGNLA                 RGNLA;                  /**< \brief 18, Configure region lower address register*/
       __IO Ifx_LMU_ACCEN_RGNUA                 RGNUA;                  /**< \brief 1C, Configure region upper address register*/
} Ifx_LMU_ACCENCFG;

/******************************************************************************/
/** \addtogroup IfxSfr_Lmu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief LMU object */
typedef volatile struct _Ifx_LMU
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_LMU_ID                          ID;                     /**< \brief 8, Module identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[28];         /**< \brief C, \internal Reserved */
       __IO Ifx_LMU_PROT                        PROTSE;                 /**< \brief 28, Protection for safety registers*/
       __I  Ifx_UReg_8Bit                       reserved_2C[52];        /**< \brief 2C, \internal Reserved */
       __IO Ifx_LMU_MEMCON                      MEMCON;                 /**< \brief 60, Memory control register*/
       __IO Ifx_LMU_SCTRL                       SCTRL;                  /**< \brief 64, Safety control register*/
       __I  Ifx_UReg_8Bit                       reserved_68[8];         /**< \brief 68, \internal Reserved */
       __IO Ifx_LMU_PROTRGN                     PROTRGN;                /**< \brief 70, Protection for memory regions*/
       __I  Ifx_UReg_8Bit                       reserved_74[12];        /**< \brief 74, \internal Reserved */
       __IO Ifx_LMU_RGN                         RGN[16];                /**< \brief 80, */
       __I  Ifx_UReg_8Bit                       reserved_280[128];      /**< \brief 280, \internal Reserved */
       __IO Ifx_LMU_ACCENCFG                    ACCENCFG;               /**< \brief 300, Configure region upper address register*/
       __I  Ifx_UReg_8Bit                       reserved_320[64736];    /**< \brief 320, \internal Reserved */
} Ifx_LMU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXLMU_REGDEF_H */
