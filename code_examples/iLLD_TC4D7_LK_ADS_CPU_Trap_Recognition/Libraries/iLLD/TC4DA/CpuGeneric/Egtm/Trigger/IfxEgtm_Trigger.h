/**
 * \file IfxEgtm_Trigger.h
 * \brief EGTM TRIGGER details
 * \ingroup IfxLld_Egtm
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * \defgroup IfxLld_Egtm_Trigger_Usage How to use the eGTM Trigger functionality
 * \ingroup IfxLld_Egtm_Trigger
 *
 * The EGTM resources can be used as a trigger resource.
 * These resources are used by the other peripheral devices like ADC, SENT,
 * CAN, QSPI, ASCLIN, PSI5 and PSI5S.
 *
 * Usage of Trigger APIs
 *
 * To provide a trigger from EGTM following parameters are required.
 *
 * 1 egtmCluster: Cluster of EGTM which contains the trigger source
 * 2 egtmSource: Trigger source selected (Atom or Tom)
 * 3 channel: Channel within the egtmSource  (Atom 0-7, Tom 0-15)
 * 4 <module name>TrigSignal(Trigger Signal): trigger Signal  for the required module.
 * 5 <module name>Module (Module Instance): For modules like SENT and PSI5S which have multiple instance.
 *
 *
 * 1. Call the API IfxEgtm_Trigger_trigTo<module name> with the required input parameters described above.
 * IfxEgtm_Trigger_trigToAdc(IfxEgtm_Cluster_0, IfxEgtm_TrigSource_atom, IfxEgtm_Atom_Ch_0, IfxEgtm_Cfg_AdcTriggerSignal_0); //for illustration purpose only -- to set your own values.
 *
 * 2. If the combination of egtmCluster, egtmSource and channel is valid for the trigger then the trigger will be set for the module else API will return fail.
 *
 * \defgroup IfxLld_Egtm_Trigger
 * \ingroup IfxLld_Egtm
 * \defgroup IfxLld_Egtm_Trigger_Trigger_Functions Trigger Functions
 * \ingroup IfxLld_Egtm_Trigger
 */

#ifndef IFXEGTM_TRIGGER_H
#define IFXEGTM_TRIGGER_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxEgtm_cfg.h"
#if !defined(IFX_ILLD_PPU_USAGE)
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#endif
#if defined(IFX_ILLD_PPU_USAGE)
#include "Cpu/Std/IfxPpu_Intrinsics.h"
#endif

/** \addtogroup IfxLld_Egtm_Trigger_Trigger_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Connect eGTM to Adc
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param adcTrigSignal Connection to ADC trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToAdc(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_AdcTriggerSignal adcTrigSignal);

/** \brief Connect eGTM to Sent
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param sentModule
 * \param sentTrigSignal Connection to SENT trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToSent(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_SentTriggerModules sentModule, IfxEgtm_Cfg_SentTriggerSignal sentTrigSignal);

/** \brief Connect eGTM to Psi5
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param psi5TrigSignal Connection to ADC trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToPsi5(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_Psi5TriggerSignal psi5TrigSignal);

/** \brief Connect eGTM to Psi5s
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param psi5sModule Psi5s Module configured for trigger
 * \param psi5sTrigSignal Connection to ADC trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToPsi5s(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_Psi5sTriggerModules psi5sModule, IfxEgtm_Cfg_Psi5sTriggerSignal psi5sTrigSignal);

/** \brief Connect eGTM to Can
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param canTrigSignal Connection to ADC trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToCan(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_CanTriggerSignal canTrigSignal);

/** \brief Connect eGTM to Qspi
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param qspiTrigSignal Connection to ADC trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToQspi(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_QspiTriggerSignal qspiTrigSignal);

/** \brief Connect eGTM to Asclin
 * \param egtmCluster Cluster of EGTM which contains the trigger source
 * \param egtmSource Trigger source selected (Atom or Tom)
 * \param Channel channel within the egtmSource
 * \param asclinTrigSignal Connection to ADC trigger Signal
 * \return TRUE on success else FALSE
 */
IFX_EXTERN boolean IfxEgtm_Trigger_trigToAsclin(IfxEgtm_Cluster egtmCluster, IfxEgtm_TrigSource egtmSource, IfxEgtm_TrigChannel Channel, IfxEgtm_Cfg_AsclinTriggerSignal asclinTrigSignal);

/** \} */

#endif /* IFXEGTM_TRIGGER_H */
