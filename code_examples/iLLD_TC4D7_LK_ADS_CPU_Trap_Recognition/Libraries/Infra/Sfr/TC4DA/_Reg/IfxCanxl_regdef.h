/**
 * \file IfxCanxl_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_CANXL/V0.2.2.1.3
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Canxl_Registers Canxl Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Canxl_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Canxl_Registers
 * 
 * \defgroup IfxSfr_Canxl_Registers_union Register unions
 * \ingroup IfxSfr_Canxl_Registers
 * 
 * \defgroup IfxSfr_Canxl_Registers_struct Memory map
 * \ingroup IfxSfr_Canxl_Registers
 */
#ifndef IFXCANXL_REGDEF_H
#define IFXCANXL_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Canxl_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_CANXL_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CANXL_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CANXL_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CANXL_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_ACCEN_RDB_FPI_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_CANXL_ACCEN_RGNLA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:26;           /**< \brief [31:6] Bits 31:6 of the lower bound of the access protected region (rw) */
} Ifx_CANXL_ACCEN_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_CANXL_ACCEN_RGNUA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:26;           /**< \brief [31:6] Bits 31:6 of the upper bound of the access protected region (rw) */
} Ifx_CANXL_ACCEN_RGNUA_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CANXL_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CANXL_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CANXL_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CANXL_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_ACCEN_WRB_FPI_Bits;

/** \brief Clock enable */
typedef struct _Ifx_CANXL_CLKEN_Bits
{
    __IO Ifx_UReg_32Bit N0_CC:1;           /**< \brief [0:0] Node i clock control (rw) */
    __IO Ifx_UReg_32Bit N1_CC:1;           /**< \brief [1:1] Node i clock control (rw) */
    __IO Ifx_UReg_32Bit N2_CC:1;           /**< \brief [2:2] Node i clock control (rw) */
    __IO Ifx_UReg_32Bit N3_CC:1;           /**< \brief [3:3] Node i clock control (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit N0_CCS:1;          /**< \brief [16:16] Node i clock control status (rh) */
    __I  Ifx_UReg_32Bit N1_CCS:1;          /**< \brief [17:17] Node i clock control status (rh) */
    __I  Ifx_UReg_32Bit N2_CCS:1;          /**< \brief [18:18] Node i clock control status (rh) */
    __I  Ifx_UReg_32Bit N3_CCS:1;          /**< \brief [19:19] Node i clock control status (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_CANXL_CLKEN_Bits;

/** \brief Debug control register */
typedef struct _Ifx_CANXL_DEBUG_CTL_Bits
{
    __IO Ifx_UReg_32Bit NODE_SEL:3;        /**< \brief [2:0] Node select (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_CANXL_DEBUG_CTL_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_CANXL_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_CANXL_ID_Bits;

/** \brief Module Clock Control Register */
typedef struct _Ifx_CANXL_MODULE_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep mode enable control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CANXL_MODULE_CLC_Bits;

/** \brief Module reset control register A */
typedef struct _Ifx_CANXL_MODULE_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for global module reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for global module reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for global module reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for global module reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CANXL_MODULE_RST_CTRLA_Bits;

/** \brief Module reset control register B */
typedef struct _Ifx_CANXL_MODULE_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel reset status clear - STATCLR (w) */
} Ifx_CANXL_MODULE_RST_CTRLB_Bits;

/** \brief Module reset status register */
typedef struct _Ifx_CANXL_MODULE_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CANXL_MODULE_RST_STAT_Bits;

/** \brief Node 0 message transfer interrupt clear register */
typedef struct _Ifx_CANXL_NODE_MTI_CLR_Bits
{
    __O  Ifx_UReg_32Bit PRT_TX_EVT:1;      /**< \brief [0:0] Clear PRT transmit event (w) */
    __O  Ifx_UReg_32Bit PRT_RX_EVT:1;      /**< \brief [1:1] Clear PRT receive event (w) */
    __O  Ifx_UReg_32Bit MH_RX_FILTER_IRQ:1;    /**< \brief [2:2] Clear Receive filter event (w) */
    __O  Ifx_UReg_32Bit TS_CAPTURE:1;      /**< \brief [3:3] Timestamp capture event (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CANXL_NODE_MTI_CLR_Bits;

/** \brief Node 0 message transfer interrupt enable register */
typedef struct _Ifx_CANXL_NODE_MTI_ENA_Bits
{
    __IO Ifx_UReg_32Bit PRT_TX_EVT:1;      /**< \brief [0:0] Enable PRT transmit event (rw) */
    __IO Ifx_UReg_32Bit PRT_RX_EVT:1;      /**< \brief [1:1] Enable PRT receive event (rw) */
    __IO Ifx_UReg_32Bit MH_RX_FILTER_IRQ:1;    /**< \brief [2:2] Enable receive filter event (rw) */
    __IO Ifx_UReg_32Bit TS_CAPTURE:1;      /**< \brief [3:3] Enable timestamp capture event (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CANXL_NODE_MTI_ENA_Bits;

/** \brief Node 0 message transfer interrupt event register */
typedef struct _Ifx_CANXL_NODE_MTI_RAW_Bits
{
    __I  Ifx_UReg_32Bit PRT_TX_EVT:1;      /**< \brief [0:0] PRT transmitted a valid CAN message (rh) */
    __I  Ifx_UReg_32Bit PRT_RX_EVT:1;      /**< \brief [1:1] PRT received a valid CAN message (rh) */
    __I  Ifx_UReg_32Bit MH_RX_FILTER_IRQ:1;    /**< \brief [2:2] Receive filter event (rh) */
    __I  Ifx_UReg_32Bit TS_CAPTURE:1;      /**< \brief [3:3] Timestamp capture event (rh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_CANXL_NODE_MTI_RAW_Bits;

/** \brief Node 0 Port Control Register */
typedef struct _Ifx_CANXL_NODE_PORTCTRL_Bits
{
    __IO Ifx_UReg_32Bit RXSEL:3;           /**< \brief [2:0] Receive Select - RXSEL (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_CANXL_NODE_PORTCTRL_Bits;

/** \brief Node 0 reset control register A */
typedef struct _Ifx_CANXL_NODE_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Node reset group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Node reset group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Node reset group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Node reset group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CANXL_NODE_RST_CTRLA_Bits;

/** \brief Node 0 reset control register B */
typedef struct _Ifx_CANXL_NODE_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel reset status clear - STATCLR (w) */
} Ifx_CANXL_NODE_RST_CTRLB_Bits;

/** \brief Node 0 reset status register */
typedef struct _Ifx_CANXL_NODE_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CANXL_NODE_RST_STAT_Bits;

/** \brief Node 0 VM and PRS configuration Register */
typedef struct _Ifx_CANXL_NODE_VMPRSCONFIG_Bits
{
    __I  Ifx_UReg_32Bit :16;               /**< \brief [15:0] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine Enable (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set Enable (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_NODE_VMPRSCONFIG_Bits;

/** \brief Node 0 AXI address extension register */
typedef struct _Ifx_CANXL_N_AXI_ADD_EXT_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_AXI_ADD_EXT_Bits;

/** \brief Node 0 DMA error information */
typedef struct _Ifx_CANXL_N_AXI_ERR_INFO_Bits
{
    __I  Ifx_Strict_32Bit DMA_ID:2;        /**< \brief [1:0] DMA ID (rh) */
    __I  Ifx_Strict_32Bit DMA_RESP:2;      /**< \brief [3:2] DMA RESP (rh) */
    __I  Ifx_Strict_32Bit MEM_ID:2;        /**< \brief [5:4] MEM ID (rh) */
    __I  Ifx_Strict_32Bit MEM_RESP:2;      /**< \brief [7:6] MEM RESP (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_AXI_ERR_INFO_Bits;

/** \brief Node 0 AXI parameter register */
typedef struct _Ifx_CANXL_N_AXI_PARAMS_Bits
{
    __IO Ifx_Strict_32Bit AR_MAX_PEND:2;    /**< \brief [1:0] AR MAX PEND (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit AW_MAX_PEND:2;    /**< \brief [5:4] AW MAX PEND (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_CANXL_N_AXI_PARAMS_Bits;

/** \brief Node 0 IRC configuration register */
typedef struct _Ifx_CANXL_N_CAPTURING_MODE_Bits
{
    __I  Ifx_Strict_32Bit FUNC:1;          /**< \brief [0:0] FUNC (r) */
    __I  Ifx_Strict_32Bit ERR:1;           /**< \brief [1:1] ERR (r) */
    __I  Ifx_Strict_32Bit SAFETY:1;        /**< \brief [2:2] SAFETY (r) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CANXL_N_CAPTURING_MODE_Bits;

/** \brief Node 0 CRC control register */
typedef struct _Ifx_CANXL_N_CRC_CTRL_Bits
{
    __O  Ifx_Strict_32Bit START:1;         /**< \brief [0:0] START (w) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CANXL_N_CRC_CTRL_Bits;

/** \brief Node 0 CRC register */
typedef struct _Ifx_CANXL_N_CRC_REG_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_CRC_REG_Bits;

/** \brief Node 0 control register */
typedef struct _Ifx_CANXL_N_CTRL_Bits
{
    __O  Ifx_Strict_32Bit STOP:1;          /**< \brief [0:0] STOP (w) */
    __O  Ifx_Strict_32Bit IMMD:1;          /**< \brief [1:1] IMMD (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __O  Ifx_Strict_32Bit STRT:1;          /**< \brief [4:4] STRT (w) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __O  Ifx_Strict_32Bit SRES:1;          /**< \brief [8:8] SRES (w) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [11:9] \internal Reserved */
    __O  Ifx_Strict_32Bit TEST:1;          /**< \brief [12:12] TEST (w) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_CANXL_N_CTRL_Bits;

/** \brief Node 0 CAN FD data phase bit timing register */
typedef struct _Ifx_CANXL_N_DBTP_Bits
{
    __IO Ifx_Strict_32Bit DSJW:7;          /**< \brief [6:0] DSJW (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit DTSEG2:7;        /**< \brief [14:8] DTSEG2 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit DTSEG1:8;        /**< \brief [23:16] DTSEG1 (rw) */
    __IO Ifx_Strict_32Bit DTDCO:8;         /**< \brief [31:24] DTDCO (rw) */
} Ifx_CANXL_N_DBTP_Bits;

/** \brief Node 0 debug control register */
typedef struct _Ifx_CANXL_N_DEBUG_TEST_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TEST_IRQ_EN:1;    /**< \brief [0:0] TEST IRQ EN (rw) */
    __IO Ifx_Strict_32Bit HDP_EN:1;        /**< \brief [1:1] HDP EN (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __IO Ifx_Strict_32Bit HDP_SEL:3;       /**< \brief [10:8] HDP SEL (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CANXL_N_DEBUG_TEST_CTRL_Bits;

/** \brief Node 0 descriptor error information 0 */
typedef struct _Ifx_CANXL_N_DESC_ERR_INFO0_Bits
{
    __I  Ifx_Strict_32Bit ADD:32;          /**< \brief [31:0] ADD (rh) */
} Ifx_CANXL_N_DESC_ERR_INFO0_Bits;

/** \brief Node 0 descriptor error information 1 */
typedef struct _Ifx_CANXL_N_DESC_ERR_INFO1_Bits
{
    __I  Ifx_Strict_32Bit FQN_PQSN:5;      /**< \brief [4:0] FQN PQSN (rh) */
    __I  Ifx_Strict_32Bit IN:3;            /**< \brief [7:5] IN (rh) */
    __I  Ifx_Strict_32Bit PQ:1;            /**< \brief [8:8] PQ (rh) */
    __I  Ifx_Strict_32Bit RC:5;            /**< \brief [13:9] RC (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [14:14] \internal Reserved */
    __I  Ifx_Strict_32Bit RX_TX:1;         /**< \brief [15:15] RX TX (rh) */
    __I  Ifx_Strict_32Bit CRC:9;           /**< \brief [24:16] CRC (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CANXL_N_DESC_ERR_INFO1_Bits;

/** \brief Node 0 endianness test register */
typedef struct _Ifx_CANXL_N_ENDN_Bits
{
    __I  Ifx_Strict_32Bit ETV:32;          /**< \brief [31:0] ETV (r) */
} Ifx_CANXL_N_ENDN_Bits;

/** \brief Node 0 error raw event clear register */
typedef struct _Ifx_CANXL_N_ERR_CLR_Bits
{
    __O  Ifx_Strict_32Bit MH_RX_FILTER_ERR:1;    /**< \brief [0:0] MH RX FILTER ERR (w) */
    __O  Ifx_Strict_32Bit MH_MEM_SFTY_ERR:1;    /**< \brief [1:1] MH MEM SFTY ERR (w) */
    __O  Ifx_Strict_32Bit MH_REG_CRC_ERR:1;    /**< \brief [2:2] MH REG CRC ERR (w) */
    __O  Ifx_Strict_32Bit MH_DESC_ERR:1;    /**< \brief [3:3] MH DESC ERR (w) */
    __O  Ifx_Strict_32Bit MH_AP_PARITY_ERR:1;    /**< \brief [4:4] MH AP PARITY ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_PARITY_ERR:1;    /**< \brief [5:5] MH DP PARITY ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_SEQ_ERR:1;    /**< \brief [6:6] MH DP SEQ ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_DO_ERR:1;    /**< \brief [7:7] MH DP DO ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_TO_ERR:1;    /**< \brief [8:8] MH DP TO ERR (w) */
    __O  Ifx_Strict_32Bit MH_DMA_TO_ERR:1;    /**< \brief [9:9] MH DMA TO ERR (w) */
    __O  Ifx_Strict_32Bit MH_DMA_CH_ERR:1;    /**< \brief [10:10] MH DMA CH ERR (w) */
    __O  Ifx_Strict_32Bit MH_RD_RESP_ERR:1;    /**< \brief [11:11] MH RD RESP ERR (w) */
    __O  Ifx_Strict_32Bit MH_WR_RESP_ERR:1;    /**< \brief [12:12] MH WR RESP ERR (w) */
    __O  Ifx_Strict_32Bit MH_MEM_TO_ERR:1;    /**< \brief [13:13] MH MEM TO ERR (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __O  Ifx_Strict_32Bit PRT_ABORTED:1;    /**< \brief [16:16] PRT ABORTED (w) */
    __O  Ifx_Strict_32Bit PRT_USOS:1;      /**< \brief [17:17] PRT USOS (w) */
    __O  Ifx_Strict_32Bit PRT_TX_DU:1;     /**< \brief [18:18] PRT TX DU (w) */
    __O  Ifx_Strict_32Bit PRT_RX_DO:1;     /**< \brief [19:19] PRT RX DO (w) */
    __O  Ifx_Strict_32Bit PRT_IFF_RQ:1;    /**< \brief [20:20] PRT IFF RQ (w) */
    __O  Ifx_Strict_32Bit PRT_BUS_ERR:1;    /**< \brief [21:21] PRT BUS ERR (w) */
    __O  Ifx_Strict_32Bit PRT_E_PASSIVE:1;    /**< \brief [22:22] PRT E PASSIVE (w) */
    __O  Ifx_Strict_32Bit PRT_BUS_OFF:1;    /**< \brief [23:23] PRT BUS OFF (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __O  Ifx_Strict_32Bit TOP_MUX_TO_ERR:1;    /**< \brief [28:28] TOP MUX TO ERR (w) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CANXL_N_ERR_CLR_Bits;

/** \brief Node 0 error raw event enable register */
typedef struct _Ifx_CANXL_N_ERR_ENA_Bits
{
    __IO Ifx_Strict_32Bit MH_RX_FILTER_ERR:1;    /**< \brief [0:0] MH RX FILTER ERR (rw) */
    __IO Ifx_Strict_32Bit MH_MEM_SFTY_ERR:1;    /**< \brief [1:1] MH MEM SFTY ERR (rw) */
    __IO Ifx_Strict_32Bit MH_REG_CRC_ERR:1;    /**< \brief [2:2] MH REG CRC ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DESC_ERR:1;    /**< \brief [3:3] MH DESC ERR (rw) */
    __IO Ifx_Strict_32Bit MH_AP_PARITY_ERR:1;    /**< \brief [4:4] MH AP PARITY ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_PARITY_ERR:1;    /**< \brief [5:5] MH DP PARITY ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_SEQ_ERR:1;    /**< \brief [6:6] MH DP SEQ ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_DO_ERR:1;    /**< \brief [7:7] MH DP DO ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_TO_ERR:1;    /**< \brief [8:8] MH DP TO ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DMA_TO_ERR:1;    /**< \brief [9:9] MH DMA TO ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DMA_CH_ERR:1;    /**< \brief [10:10] MH DMA CH ERR (rw) */
    __IO Ifx_Strict_32Bit MH_RD_RESP_ERR:1;    /**< \brief [11:11] MH RD RESP ERR (rw) */
    __IO Ifx_Strict_32Bit MH_WR_RESP_ERR:1;    /**< \brief [12:12] MH WR RESP ERR (rw) */
    __IO Ifx_Strict_32Bit MH_MEM_TO_ERR:1;    /**< \brief [13:13] MH MEM TO ERR (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __IO Ifx_Strict_32Bit PRT_ABORTED:1;    /**< \brief [16:16] PRT ABORTED (rw) */
    __IO Ifx_Strict_32Bit PRT_USOS:1;      /**< \brief [17:17] PRT USOS (rw) */
    __IO Ifx_Strict_32Bit PRT_TX_DU:1;     /**< \brief [18:18] PRT TX DU (rw) */
    __IO Ifx_Strict_32Bit PRT_RX_DO:1;     /**< \brief [19:19] PRT RX DO (rw) */
    __IO Ifx_Strict_32Bit PRT_IFF_RQ:1;    /**< \brief [20:20] PRT IFF RQ (rw) */
    __IO Ifx_Strict_32Bit PRT_BUS_ERR:1;    /**< \brief [21:21] PRT BUS ERR (rw) */
    __IO Ifx_Strict_32Bit PRT_E_PASSIVE:1;    /**< \brief [22:22] PRT E PASSIVE (rw) */
    __IO Ifx_Strict_32Bit PRT_BUS_OFF:1;    /**< \brief [23:23] PRT BUS OFF (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __IO Ifx_Strict_32Bit TOP_MUX_TO_ERR:1;    /**< \brief [28:28] TOP MUX TO ERR (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CANXL_N_ERR_ENA_Bits;

/** \brief Node 0 error interrupt status register */
typedef struct _Ifx_CANXL_N_ERR_INT_STS_Bits
{
    __IO Ifx_Strict_32Bit DP_TX_ACK_DO_ERR:1;    /**< \brief [0:0] DP TX ACK DO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_RX_FIFO_DO_ERR:1;    /**< \brief [1:1] DP RX FIFO DO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_RX_ACK_DO_ERR:1;    /**< \brief [2:2] DP RX ACK DO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_TX_SEQ_ERR:1;    /**< \brief [3:3] DP TX SEQ ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_RX_SEQ_ERR:1;    /**< \brief [4:4] DP RX SEQ ERR (rw1ch) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_CANXL_N_ERR_INT_STS_Bits;

/** \brief Node 0 error raw event status register */
typedef struct _Ifx_CANXL_N_ERR_RAW_Bits
{
    __I  Ifx_Strict_32Bit MH_RX_FILTER_ERR:1;    /**< \brief [0:0] MH RX FILTER ERR (rh) */
    __I  Ifx_Strict_32Bit MH_MEM_SFTY_ERR:1;    /**< \brief [1:1] MH MEM SFTY ERR (rh) */
    __I  Ifx_Strict_32Bit MH_REG_CRC_ERR:1;    /**< \brief [2:2] MH REG CRC ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DESC_ERR:1;    /**< \brief [3:3] MH DESC ERR (rh) */
    __I  Ifx_Strict_32Bit MH_AP_PARITY_ERR:1;    /**< \brief [4:4] MH AP PARITY ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_PARITY_ERR:1;    /**< \brief [5:5] MH DP PARITY ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_SEQ_ERR:1;    /**< \brief [6:6] MH DP SEQ ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_DO_ERR:1;    /**< \brief [7:7] MH DP DO ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_TO_ERR:1;    /**< \brief [8:8] MH DP TO ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DMA_TO_ERR:1;    /**< \brief [9:9] MH DMA TO ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DMA_CH_ERR:1;    /**< \brief [10:10] MH DMA CH ERR (rh) */
    __I  Ifx_Strict_32Bit MH_RD_RESP_ERR:1;    /**< \brief [11:11] MH RD RESP ERR (rh) */
    __I  Ifx_Strict_32Bit MH_WR_RESP_ERR:1;    /**< \brief [12:12] MH WR RESP ERR (rh) */
    __I  Ifx_Strict_32Bit MH_MEM_TO_ERR:1;    /**< \brief [13:13] MH MEM TO ERR (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __I  Ifx_Strict_32Bit PRT_ABORTED:1;    /**< \brief [16:16] PRT ABORTED (rh) */
    __I  Ifx_Strict_32Bit PRT_USOS:1;      /**< \brief [17:17] PRT USOS (rh) */
    __I  Ifx_Strict_32Bit PRT_TX_DU:1;     /**< \brief [18:18] PRT TX DU (rh) */
    __I  Ifx_Strict_32Bit PRT_RX_DO:1;     /**< \brief [19:19] PRT RX DO (rh) */
    __I  Ifx_Strict_32Bit PRT_IFF_RQ:1;    /**< \brief [20:20] PRT IFF RQ (rh) */
    __I  Ifx_Strict_32Bit PRT_BUS_ERR:1;    /**< \brief [21:21] PRT BUS ERR (rh) */
    __I  Ifx_Strict_32Bit PRT_E_PASSIVE:1;    /**< \brief [22:22] PRT E PASSIVE (rh) */
    __I  Ifx_Strict_32Bit PRT_BUS_OFF:1;    /**< \brief [23:23] PRT BUS OFF (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __I  Ifx_Strict_32Bit TOP_MUX_TO_ERR:1;    /**< \brief [28:28] TOP MUX TO ERR (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CANXL_N_ERR_RAW_Bits;

/** \brief Node 0 event status flags register */
typedef struct _Ifx_CANXL_N_EVNT_Bits
{
    __IO Ifx_Strict_32Bit CRE:1;           /**< \brief [0:0] CRE (rw1ch) */
    __IO Ifx_Strict_32Bit B0E:1;           /**< \brief [1:1] B0E (rw1ch) */
    __IO Ifx_Strict_32Bit B1E:1;           /**< \brief [2:2] B1E (rw1ch) */
    __IO Ifx_Strict_32Bit AKE:1;           /**< \brief [3:3] AKE (rw1ch) */
    __IO Ifx_Strict_32Bit FRE:1;           /**< \brief [4:4] FRE (rw1ch) */
    __IO Ifx_Strict_32Bit STE:1;           /**< \brief [5:5] STE (rw1ch) */
    __IO Ifx_Strict_32Bit DO:1;            /**< \brief [6:6] DO (rw1ch) */
    __IO Ifx_Strict_32Bit RXF:1;           /**< \brief [7:7] RXF (rw1ch) */
    __IO Ifx_Strict_32Bit TXF:1;           /**< \brief [8:8] TXF (rw1ch) */
    __IO Ifx_Strict_32Bit PXE:1;           /**< \brief [9:9] PXE (rw1ch) */
    __IO Ifx_Strict_32Bit DU:1;            /**< \brief [10:10] DU (rw1ch) */
    __IO Ifx_Strict_32Bit USO:1;           /**< \brief [11:11] USO (rw1ch) */
    __IO Ifx_Strict_32Bit IFR:1;           /**< \brief [12:12] IFR (rw1ch) */
    __IO Ifx_Strict_32Bit ABO:1;           /**< \brief [13:13] ABO (rw1ch) */
    __I  Ifx_Strict_32Bit :18;             /**< \brief [31:14] \internal Reserved */
} Ifx_CANXL_N_EVNT_Bits;

/** \brief Node 0 fault injection module control register */
typedef struct _Ifx_CANXL_N_FIMC_Bits
{
    __IO Ifx_Strict_32Bit FIP:15;          /**< \brief [14:0] FIP (rw) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [31:15] \internal Reserved */
} Ifx_CANXL_N_FIMC_Bits;

/** \brief Node 0 functional raw event clear register */
typedef struct _Ifx_CANXL_N_FUNC_CLR_Bits
{
    __O  Ifx_Strict_32Bit MH_TX_FQ0_IRQ:1;    /**< \brief [0:0] MH TX FQ0 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ1_IRQ:1;    /**< \brief [1:1] MH TX FQ1 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ2_IRQ:1;    /**< \brief [2:2] MH TX FQ2 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ3_IRQ:1;    /**< \brief [3:3] MH TX FQ3 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ4_IRQ:1;    /**< \brief [4:4] MH TX FQ4 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ5_IRQ:1;    /**< \brief [5:5] MH TX FQ5 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ6_IRQ:1;    /**< \brief [6:6] MH TX FQ6 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FQ7_IRQ:1;    /**< \brief [7:7] MH TX FQ7 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ0_IRQ:1;    /**< \brief [8:8] MH RX FQ0 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ1_IRQ:1;    /**< \brief [9:9] MH RX FQ1 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ2_IRQ:1;    /**< \brief [10:10] MH RX FQ2 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ3_IRQ:1;    /**< \brief [11:11] MH RX FQ3 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ4_IRQ:1;    /**< \brief [12:12] MH RX FQ4 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ5_IRQ:1;    /**< \brief [13:13] MH RX FQ5 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ6_IRQ:1;    /**< \brief [14:14] MH RX FQ6 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FQ7_IRQ:1;    /**< \brief [15:15] MH RX FQ7 IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_PQ_IRQ:1;    /**< \brief [16:16] MH TX PQ IRQ (w) */
    __O  Ifx_Strict_32Bit MH_STOP_IRQ:1;    /**< \brief [17:17] MH STOP IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_FILTER_IRQ:1;    /**< \brief [18:18] MH RX FILTER IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_FILTER_IRQ:1;    /**< \brief [19:19] MH TX FILTER IRQ (w) */
    __O  Ifx_Strict_32Bit MH_TX_ABORT_IRQ:1;    /**< \brief [20:20] MH TX ABORT IRQ (w) */
    __O  Ifx_Strict_32Bit MH_RX_ABORT_IRQ:1;    /**< \brief [21:21] MH RX ABORT IRQ (w) */
    __O  Ifx_Strict_32Bit MH_STATS_IRQ:1;    /**< \brief [22:22] MH STATS IRQ (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __O  Ifx_Strict_32Bit PRT_E_ACTIVE:1;    /**< \brief [24:24] PRT E ACTIVE (w) */
    __O  Ifx_Strict_32Bit PRT_BUS_ON:1;    /**< \brief [25:25] PRT BUS ON (w) */
    __O  Ifx_Strict_32Bit PRT_TX_EVT:1;    /**< \brief [26:26] PRT TX EVT (w) */
    __O  Ifx_Strict_32Bit PRT_RX_EVT:1;    /**< \brief [27:27] PRT RX EVT (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_FUNC_CLR_Bits;

/** \brief Node 0 functional raw event enable register */
typedef struct _Ifx_CANXL_N_FUNC_ENA_Bits
{
    __IO Ifx_Strict_32Bit MH_TX_FQ0_IRQ:1;    /**< \brief [0:0] MH TX FQ0 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ1_IRQ:1;    /**< \brief [1:1] MH TX FQ1 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ2_IRQ:1;    /**< \brief [2:2] MH TX FQ2 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ3_IRQ:1;    /**< \brief [3:3] MH TX FQ3 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ4_IRQ:1;    /**< \brief [4:4] MH TX FQ4 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ5_IRQ:1;    /**< \brief [5:5] MH TX FQ5 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ6_IRQ:1;    /**< \brief [6:6] MH TX FQ6 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FQ7_IRQ:1;    /**< \brief [7:7] MH TX FQ7 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ0_IRQ:1;    /**< \brief [8:8] MH RX FQ0 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ1_IRQ:1;    /**< \brief [9:9] MH RX FQ1 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ2_IRQ:1;    /**< \brief [10:10] MH RX FQ2 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ3_IRQ:1;    /**< \brief [11:11] MH RX FQ3 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ4_IRQ:1;    /**< \brief [12:12] MH RX FQ4 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ5_IRQ:1;    /**< \brief [13:13] MH RX FQ5 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ6_IRQ:1;    /**< \brief [14:14] MH RX FQ6 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FQ7_IRQ:1;    /**< \brief [15:15] MH RX FQ7 IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_PQ_IRQ:1;    /**< \brief [16:16] MH TX PQ IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_STOP_IRQ:1;    /**< \brief [17:17] MH STOP IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_FILTER_IRQ:1;    /**< \brief [18:18] MH RX FILTER IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_FILTER_IRQ:1;    /**< \brief [19:19] MH TX FILTER IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_TX_ABORT_IRQ:1;    /**< \brief [20:20] MH TX ABORT IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_RX_ABORT_IRQ:1;    /**< \brief [21:21] MH RX ABORT IRQ (rw) */
    __IO Ifx_Strict_32Bit MH_STATS_IRQ:1;    /**< \brief [22:22] MH STATS IRQ (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __IO Ifx_Strict_32Bit PRT_E_ACTIVE:1;    /**< \brief [24:24] PRT E ACTIVE (rw) */
    __IO Ifx_Strict_32Bit PRT_BUS_ON:1;    /**< \brief [25:25] PRT BUS ON (rw) */
    __IO Ifx_Strict_32Bit PRT_TX_EVT:1;    /**< \brief [26:26] PRT TX EVT (rw) */
    __IO Ifx_Strict_32Bit PRT_RX_EVT:1;    /**< \brief [27:27] PRT RX EVT (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_FUNC_ENA_Bits;

/** \brief Node 0 functional raw event status register */
typedef struct _Ifx_CANXL_N_FUNC_RAW_Bits
{
    __I  Ifx_Strict_32Bit MH_TX_FQ0_IRQ:1;    /**< \brief [0:0] MH TX FQ0 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ1_IRQ:1;    /**< \brief [1:1] MH TX FQ1 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ2_IRQ:1;    /**< \brief [2:2] MH TX FQ2 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ3_IRQ:1;    /**< \brief [3:3] MH TX FQ3 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ4_IRQ:1;    /**< \brief [4:4] MH TX FQ4 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ5_IRQ:1;    /**< \brief [5:5] MH TX FQ5 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ6_IRQ:1;    /**< \brief [6:6] MH TX FQ6 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FQ7_IRQ:1;    /**< \brief [7:7] MH TX FQ7 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ0_IRQ:1;    /**< \brief [8:8] MH RX FQ0 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ1_IRQ:1;    /**< \brief [9:9] MH RX FQ1 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ2_IRQ:1;    /**< \brief [10:10] MH RX FQ2 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ3_IRQ:1;    /**< \brief [11:11] MH RX FQ3 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ4_IRQ:1;    /**< \brief [12:12] MH RX FQ4 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ5_IRQ:1;    /**< \brief [13:13] MH RX FQ5 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ6_IRQ:1;    /**< \brief [14:14] MH RX FQ6 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FQ7_IRQ:1;    /**< \brief [15:15] MH RX FQ7 IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_PQ_IRQ:1;    /**< \brief [16:16] MH TX PQ IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_STOP_IRQ:1;    /**< \brief [17:17] MH STOP IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_FILTER_IRQ:1;    /**< \brief [18:18] MH RX FILTER IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_FILTER_IRQ:1;    /**< \brief [19:19] MH TX FILTER IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_TX_ABORT_IRQ:1;    /**< \brief [20:20] MH TX ABORT IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_RX_ABORT_IRQ:1;    /**< \brief [21:21] MH RX ABORT IRQ (rh) */
    __I  Ifx_Strict_32Bit MH_STATS_IRQ:1;    /**< \brief [22:22] MH STATS IRQ (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [23:23] \internal Reserved */
    __I  Ifx_Strict_32Bit PRT_E_ACTIVE:1;    /**< \brief [24:24] PRT E ACTIVE (rh) */
    __I  Ifx_Strict_32Bit PRT_BUS_ON:1;    /**< \brief [25:25] PRT BUS ON (rh) */
    __I  Ifx_Strict_32Bit PRT_TX_EVT:1;    /**< \brief [26:26] PRT TX EVT (rh) */
    __I  Ifx_Strict_32Bit PRT_RX_EVT:1;    /**< \brief [27:27] PRT RX EVT (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_FUNC_RAW_Bits;

/** \brief Node 0 hardware debug port control register */
typedef struct _Ifx_CANXL_N_HDP_Bits
{
    __IO Ifx_Strict_32Bit HDP_SEL:1;       /**< \brief [0:0] HDP SEL (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CANXL_N_HDP_Bits;

/** \brief Node 0 interrupt test register 0 */
typedef struct _Ifx_CANXL_N_INT_TEST0_Bits
{
    __IO Ifx_Strict_32Bit TX_FQ_IRQ:8;     /**< \brief [7:0] TX FQ IRQ (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit RX_FQ_IRQ:8;     /**< \brief [23:16] RX FQ IRQ (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_INT_TEST0_Bits;

/** \brief Node 0 interrupt test register 1 */
typedef struct _Ifx_CANXL_N_INT_TEST1_Bits
{
    __IO Ifx_Strict_32Bit RESP_ERR:2;      /**< \brief [1:0] RESP ERR (rw) */
    __IO Ifx_Strict_32Bit DMA_TO_ERR:1;    /**< \brief [2:2] DMA TO ERR (rw) */
    __IO Ifx_Strict_32Bit DMA_CH_ERR:1;    /**< \brief [3:3] DMA CH ERR (rw) */
    __IO Ifx_Strict_32Bit DP_TO_ERR:1;     /**< \brief [4:4] DP TO ERR (rw) */
    __IO Ifx_Strict_32Bit DP_DO_ERR:1;     /**< \brief [5:5] DP DO ERR (rw) */
    __IO Ifx_Strict_32Bit DP_SEQ_ERR:1;    /**< \brief [6:6] DP SEQ ERR (rw) */
    __IO Ifx_Strict_32Bit DP_PARITY_ERR:1;    /**< \brief [7:7] DP PARITY ERR (rw) */
    __IO Ifx_Strict_32Bit AP_PARITY_ERR:1;    /**< \brief [8:8] AP PARITY ERR (rw) */
    __IO Ifx_Strict_32Bit DESC_ERR:1;      /**< \brief [9:9] DESC ERR (rw) */
    __IO Ifx_Strict_32Bit REG_CRC_ERR:1;    /**< \brief [10:10] REG CRC ERR (rw) */
    __IO Ifx_Strict_32Bit MEM_SFTY_ERR:1;    /**< \brief [11:11] MEM SFTY ERR (rw) */
    __IO Ifx_Strict_32Bit MEM_TO_ERR:1;    /**< \brief [12:12] MEM TO ERR (rw) */
    __IO Ifx_Strict_32Bit RX_FILTER_ERR:1;    /**< \brief [13:13] RX FILTER ERR (rw) */
    __IO Ifx_Strict_32Bit RX_ABORT_IRQ:1;    /**< \brief [14:14] RX ABORT IRQ (rw) */
    __IO Ifx_Strict_32Bit TX_ABORT_IRQ:1;    /**< \brief [15:15] TX ABORT IRQ (rw) */
    __IO Ifx_Strict_32Bit TX_FILTER_IRQ:1;    /**< \brief [16:16] TX FILTER IRQ (rw) */
    __IO Ifx_Strict_32Bit RX_FILTER_IRQ:1;    /**< \brief [17:17] RX FILTER IRQ (rw) */
    __IO Ifx_Strict_32Bit STOP_IRQ:1;      /**< \brief [18:18] STOP IRQ (rw) */
    __IO Ifx_Strict_32Bit STATS_IRQ:1;     /**< \brief [19:19] STATS IRQ (rw) */
    __IO Ifx_Strict_32Bit TX_PQ_IRQ:1;     /**< \brief [20:20] TX PQ IRQ (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_CANXL_N_INT_TEST1_Bits;

/** \brief Node 0 unlock sequence register */
typedef struct _Ifx_CANXL_N_LOCK_Bits
{
    __O  Ifx_Strict_32Bit ULK:16;          /**< \brief [15:0] ULK (w) */
    __O  Ifx_Strict_32Bit TMK:16;          /**< \brief [31:16] TMK (w) */
} Ifx_CANXL_N_LOCK_Bits;

/** \brief Node 0 message handler configuration register */
typedef struct _Ifx_CANXL_N_MH_CFG_Bits
{
    __IO Ifx_Strict_32Bit RX_CONT_DC:1;    /**< \brief [0:0] RX CONT DC (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [7:1] \internal Reserved */
    __IO Ifx_Strict_32Bit MAX_RETRANS:3;    /**< \brief [10:8] MAX RETRANS (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit INST_NUM:3;      /**< \brief [18:16] INST NUM (rw) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_CANXL_N_MH_CFG_Bits;

/** \brief Node 0 message handler control register */
typedef struct _Ifx_CANXL_N_MH_CTRL_Bits
{
    __IO Ifx_Strict_32Bit START:1;         /**< \brief [0:0] START (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CANXL_N_MH_CTRL_Bits;

/** \brief Node 0 message handler lock register */
typedef struct _Ifx_CANXL_N_MH_LOCK_Bits
{
    __IO Ifx_Strict_32Bit ULK:16;          /**< \brief [15:0] ULK (rw) */
    __IO Ifx_Strict_32Bit TMK:16;          /**< \brief [31:16] TMK (rw) */
} Ifx_CANXL_N_MH_LOCK_Bits;

/** \brief Node 0 message handler safety configuration register */
typedef struct _Ifx_CANXL_N_MH_SFTY_CFG_Bits
{
    __IO Ifx_Strict_32Bit DMA_TO_VAL:8;    /**< \brief [7:0] DMA TO VAL (rw) */
    __IO Ifx_Strict_32Bit MEM_TO_VAL:8;    /**< \brief [15:8] MEM TO VAL (rw) */
    __IO Ifx_Strict_32Bit PRT_TO_VAL:14;    /**< \brief [29:16] PRT TO VAL (rw) */
    __IO Ifx_Strict_32Bit PRESCALER:2;     /**< \brief [31:30] PRESCALER (rw) */
} Ifx_CANXL_N_MH_SFTY_CFG_Bits;

/** \brief Node 0 message handler safety control register */
typedef struct _Ifx_CANXL_N_MH_SFTY_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TX_DESC_CRC_EN:1;    /**< \brief [0:0] TX DESC CRC EN (rw) */
    __IO Ifx_Strict_32Bit RX_DESC_CRC_EN:1;    /**< \brief [1:1] RX DESC CRC EN (rw) */
    __IO Ifx_Strict_32Bit MEM_PROT_EN:1;    /**< \brief [2:2] MEM PROT EN (rw) */
    __IO Ifx_Strict_32Bit RX_DP_PARITY_EN:1;    /**< \brief [3:3] RX DP PARITY EN (rw) */
    __IO Ifx_Strict_32Bit TX_DP_PARITY_EN:1;    /**< \brief [4:4] TX DP PARITY EN (rw) */
    __IO Ifx_Strict_32Bit TX_AP_PARITY_EN:1;    /**< \brief [5:5] TX AP PARITY EN (rw) */
    __IO Ifx_Strict_32Bit RX_AP_PARITY_EN:1;    /**< \brief [6:6] RX AP PARITY EN (rw) */
    __IO Ifx_Strict_32Bit DMA_CH_CHK_EN:1;    /**< \brief [7:7] DMA CH CHK EN (rw) */
    __IO Ifx_Strict_32Bit DMA_TO_EN:1;     /**< \brief [8:8] DMA TO EN (rw) */
    __IO Ifx_Strict_32Bit MEM_TO_EN:1;     /**< \brief [9:9] MEM TO EN (rw) */
    __IO Ifx_Strict_32Bit PRT_TO_EN:1;     /**< \brief [10:10] PRT TO EN (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CANXL_N_MH_SFTY_CTRL_Bits;

/** \brief Node 0 message handler status register */
typedef struct _Ifx_CANXL_N_MH_STS_Bits
{
    __I  Ifx_Strict_32Bit BUSY:1;          /**< \brief [0:0] BUSY (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit ENABLE:1;        /**< \brief [4:4] ENABLE (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __I  Ifx_Strict_32Bit CLOCK_ACTIVE:1;    /**< \brief [8:8] CLOCK ACTIVE (rh) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_CANXL_N_MH_STS_Bits;

/** \brief Node 0 operating mode register */
typedef struct _Ifx_CANXL_N_MODE_Bits
{
    __IO Ifx_Strict_32Bit FDOE:1;          /**< \brief [0:0] FDOE (rwh) */
    __IO Ifx_Strict_32Bit XLOE:1;          /**< \brief [1:1] XLOE (rwh) */
    __IO Ifx_Strict_32Bit TDCE:1;          /**< \brief [2:2] TDCE (rw) */
    __IO Ifx_Strict_32Bit PXHD:1;          /**< \brief [3:3] PXHD (rw) */
    __IO Ifx_Strict_32Bit EFBI:1;          /**< \brief [4:4] EFBI (rw) */
    __IO Ifx_Strict_32Bit TXP:1;           /**< \brief [5:5] TXP (rw) */
    __IO Ifx_Strict_32Bit MON:1;           /**< \brief [6:6] MON (rw) */
    __IO Ifx_Strict_32Bit RSTR:1;          /**< \brief [7:7] RSTR (rw) */
    __IO Ifx_Strict_32Bit SFS:1;           /**< \brief [8:8] SFS (rw) */
    __IO Ifx_Strict_32Bit XLTR:1;          /**< \brief [9:9] XLTR (rw) */
    __IO Ifx_Strict_32Bit EFDI:1;          /**< \brief [10:10] EFDI (rw) */
    __IO Ifx_Strict_32Bit FIME:1;          /**< \brief [11:11] FIME (rw) */
    __I  Ifx_Strict_32Bit :20;             /**< \brief [31:12] \internal Reserved */
} Ifx_CANXL_N_MODE_Bits;

/** \brief Node 0 arbitration phase nominal bit timing register */
typedef struct _Ifx_CANXL_N_NBTP_Bits
{
    __IO Ifx_Strict_32Bit NSJW:7;          /**< \brief [6:0] NSJW (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit NTSEG2:7;        /**< \brief [14:8] NTSEG2 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit NTSEG1:9;        /**< \brief [24:16] NTSEG1 (rw) */
    __IO Ifx_Strict_32Bit BRP:5;           /**< \brief [29:25] BRP (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_CANXL_N_NBTP_Bits;

/** \brief Node 0 PWME configuration register */
typedef struct _Ifx_CANXL_N_PCFG_Bits
{
    __IO Ifx_Strict_32Bit PWMS:6;          /**< \brief [5:0] PWMS (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __IO Ifx_Strict_32Bit PWML:6;          /**< \brief [13:8] PWML (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __IO Ifx_Strict_32Bit PWMO:6;          /**< \brief [21:16] PWMO (rw) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_CANXL_N_PCFG_Bits;

/** \brief Node 0 PRT release identification register */
typedef struct _Ifx_CANXL_N_PREL_Bits
{
    __I  Ifx_Strict_32Bit DAY:8;           /**< \brief [7:0] DAY (r) */
    __I  Ifx_Strict_32Bit MON:8;           /**< \brief [15:8] MON (r) */
    __I  Ifx_Strict_32Bit YEAR:4;          /**< \brief [19:16] YEAR (r) */
    __I  Ifx_Strict_32Bit SUBSTEP:4;       /**< \brief [23:20] SUBSTEP (r) */
    __I  Ifx_Strict_32Bit STEP:4;          /**< \brief [27:24] STEP (r) */
    __I  Ifx_Strict_32Bit REL:4;           /**< \brief [31:28] REL (r) */
} Ifx_CANXL_N_PREL_Bits;

/** \brief Node 0 RX descriptor current address pointer */
typedef struct _Ifx_CANXL_N_RX_DESC_ADD_PT_Bits
{
    __I  Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rh) */
} Ifx_CANXL_N_RX_DESC_ADD_PT_Bits;

/** \brief Node 0 RX filter control register */
typedef struct _Ifx_CANXL_N_RX_FILTER_CTRL_Bits
{
    __IO Ifx_Strict_32Bit NB_FE:8;         /**< \brief [7:0] NB FE (rw) */
    __IO Ifx_Strict_32Bit THRESHOLD:5;     /**< \brief [12:8] THRESHOLD (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __IO Ifx_Strict_32Bit ANMF_FQ:3;       /**< \brief [18:16] ANMF FQ (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [19:19] \internal Reserved */
    __IO Ifx_Strict_32Bit ANMF:1;          /**< \brief [20:20] ANMF (rw) */
    __IO Ifx_Strict_32Bit ANFF:1;          /**< \brief [21:21] ANFF (rw) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_CANXL_N_RX_FILTER_CTRL_Bits;

/** \brief Node 0 RX filter base address register */
typedef struct _Ifx_CANXL_N_RX_FILTER_MEM_ADD_Bits
{
    __IO Ifx_Strict_32Bit BASE_ADDR:16;    /**< \brief [15:0] BASE ADDR (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CANXL_N_RX_FILTER_MEM_ADD_Bits;

/** \brief Node 0 RX FIFO queue 0 current address pointer */
typedef struct _Ifx_CANXL_N_RX_FQ_ADD_PT_Bits
{
    __I  Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rh) */
} Ifx_CANXL_N_RX_FQ_ADD_PT_Bits;

/** \brief Node 0 RX FIFO queue control register 0 */
typedef struct _Ifx_CANXL_N_RX_FQ_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit START:8;         /**< \brief [7:0] START (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_CTRL0_Bits;

/** \brief Node 0 RX FIFO queue control register 1 */
typedef struct _Ifx_CANXL_N_RX_FQ_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit ABORT:8;         /**< \brief [7:0] ABORT (rwh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_CTRL1_Bits;

/** \brief Node 0 RX FIFO queue control register 2 */
typedef struct _Ifx_CANXL_N_RX_FQ_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit ENABLE:8;        /**< \brief [7:0] ENABLE (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_CTRL2_Bits;

/** \brief Node 0 RX FIFO queue 0 data container start address */
typedef struct _Ifx_CANXL_N_RX_FQ_DC_START_ADD_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_RX_FQ_DC_START_ADD_Bits;

/** \brief Node 0 RX FIFO queue interrupt status register */
typedef struct _Ifx_CANXL_N_RX_FQ_INT_STS_Bits
{
    __IO Ifx_Strict_32Bit RECEIVED:8;      /**< \brief [7:0] RECEIVED (rw1ch) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit UNVALID:8;       /**< \brief [23:16] UNVALID (rw0ch) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_INT_STS_Bits;

/** \brief Node 0 RX FIFO queue 0 read address pointer */
typedef struct _Ifx_CANXL_N_RX_FQ_RD_ADD_PT_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_RX_FQ_RD_ADD_PT_Bits;

/** \brief Node 0 RX FIFO queue 0 link list and data container size */
typedef struct _Ifx_CANXL_N_RX_FQ_SIZE_Bits
{
    __IO Ifx_Strict_32Bit MAX_DESC:10;     /**< \brief [9:0] MAX DESC (rw) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [15:10] \internal Reserved */
    __IO Ifx_Strict_32Bit DC_SIZE:12;      /**< \brief [27:16] DC SIZE (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_SIZE_Bits;

/** \brief Node 0 RX FIFO queue 0 link list start address */
typedef struct _Ifx_CANXL_N_RX_FQ_START_ADD_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_RX_FQ_START_ADD_Bits;

/** \brief Node 0 RX FIFO queue status register 0 */
typedef struct _Ifx_CANXL_N_RX_FQ_STS0_Bits
{
    __I  Ifx_Strict_32Bit BUSY:8;          /**< \brief [7:0] BUSY (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit STOP:8;          /**< \brief [23:16] STOP (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_STS0_Bits;

/** \brief Node 0 RX FIFO queue status register 1 */
typedef struct _Ifx_CANXL_N_RX_FQ_STS1_Bits
{
    __I  Ifx_Strict_32Bit UNVALID:8;       /**< \brief [7:0] UNVALID (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit ERROR:8;         /**< \brief [23:16] ERROR (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_STS1_Bits;

/** \brief Node 0 RX FIFO queue status register 2 */
typedef struct _Ifx_CANXL_N_RX_FQ_STS2_Bits
{
    __I  Ifx_Strict_32Bit DC_FULL:8;       /**< \brief [7:0] DC FULL (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_RX_FQ_STS2_Bits;

/** \brief Node 0 RX message counter register */
typedef struct _Ifx_CANXL_N_RX_STATISTICS_Bits
{
    __IO Ifx_Strict_32Bit SUCC:12;         /**< \brief [11:0] SUCC (rw0ch) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit UNSUCC:12;       /**< \brief [27:16] UNSUCC (rw0ch) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_RX_STATISTICS_Bits;

/** \brief Node 0 safety raw event clear register */
typedef struct _Ifx_CANXL_N_SAFETY_CLR_Bits
{
    __O  Ifx_Strict_32Bit MH_RX_FILTER_ERR:1;    /**< \brief [0:0] MH RX FILTER ERR (w) */
    __O  Ifx_Strict_32Bit MH_MEM_SFTY_ERR:1;    /**< \brief [1:1] MH MEM SFTY ERR (w) */
    __O  Ifx_Strict_32Bit MH_REG_CRC_ERR:1;    /**< \brief [2:2] MH REG CRC ERR (w) */
    __O  Ifx_Strict_32Bit MH_DESC_ERR:1;    /**< \brief [3:3] MH DESC ERR (w) */
    __O  Ifx_Strict_32Bit MH_AP_PARITY_ERR:1;    /**< \brief [4:4] MH AP PARITY ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_PARITY_ERR:1;    /**< \brief [5:5] MH DP PARITY ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_SEQ_ERR:1;    /**< \brief [6:6] MH DP SEQ ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_DO_ERR:1;    /**< \brief [7:7] MH DP DO ERR (w) */
    __O  Ifx_Strict_32Bit MH_DP_TO_ERR:1;    /**< \brief [8:8] MH DP TO ERR (w) */
    __O  Ifx_Strict_32Bit MH_DMA_TO_ERR:1;    /**< \brief [9:9] MH DMA TO ERR (w) */
    __O  Ifx_Strict_32Bit MH_DMA_CH_ERR:1;    /**< \brief [10:10] MH DMA CH ERR (w) */
    __O  Ifx_Strict_32Bit MH_RD_RESP_ERR:1;    /**< \brief [11:11] MH RD RESP ERR (w) */
    __O  Ifx_Strict_32Bit MH_WR_RESP_ERR:1;    /**< \brief [12:12] MH WR RESP ERR (w) */
    __O  Ifx_Strict_32Bit MH_MEM_TO_ERR:1;    /**< \brief [13:13] MH MEM TO ERR (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __O  Ifx_Strict_32Bit PRT_ABORTED:1;    /**< \brief [16:16] PRT ABORTED (w) */
    __O  Ifx_Strict_32Bit PRT_USOS:1;      /**< \brief [17:17] PRT USOS (w) */
    __O  Ifx_Strict_32Bit PRT_TX_DU:1;     /**< \brief [18:18] PRT TX DU (w) */
    __O  Ifx_Strict_32Bit PRT_RX_DO:1;     /**< \brief [19:19] PRT RX DO (w) */
    __O  Ifx_Strict_32Bit PRT_IFF_RQ:1;    /**< \brief [20:20] PRT IFF RQ (w) */
    __O  Ifx_Strict_32Bit PRT_BUS_ERR:1;    /**< \brief [21:21] PRT BUS ERR (w) */
    __O  Ifx_Strict_32Bit PRT_E_PASSIVE:1;    /**< \brief [22:22] PRT E PASSIVE (w) */
    __O  Ifx_Strict_32Bit PRT_BUS_OFF:1;    /**< \brief [23:23] PRT BUS OFF (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __O  Ifx_Strict_32Bit TOP_MUX_TO_ERR:1;    /**< \brief [28:28] TOP MUX TO ERR (w) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CANXL_N_SAFETY_CLR_Bits;

/** \brief Node 0 safety raw event enable register */
typedef struct _Ifx_CANXL_N_SAFETY_ENA_Bits
{
    __IO Ifx_Strict_32Bit MH_RX_FILTER_ERR:1;    /**< \brief [0:0] MH RX FILTER ERR (rw) */
    __IO Ifx_Strict_32Bit MH_MEM_SFTY_ERR:1;    /**< \brief [1:1] MH MEM SFTY ERR (rw) */
    __IO Ifx_Strict_32Bit MH_REG_CRC_ERR:1;    /**< \brief [2:2] MH REG CRC ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DESC_ERR:1;    /**< \brief [3:3] MH DESC ERR (rw) */
    __IO Ifx_Strict_32Bit MH_AP_PARITY_ERR:1;    /**< \brief [4:4] MH AP PARITY ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_PARITY_ERR:1;    /**< \brief [5:5] MH DP PARITY ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_SEQ_ERR:1;    /**< \brief [6:6] MH DP SEQ ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_DO_ERR:1;    /**< \brief [7:7] MH DP DO ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DP_TO_ERR:1;    /**< \brief [8:8] MH DP TO ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DMA_TO_ERR:1;    /**< \brief [9:9] MH DMA TO ERR (rw) */
    __IO Ifx_Strict_32Bit MH_DMA_CH_ERR:1;    /**< \brief [10:10] MH DMA CH ERR (rw) */
    __IO Ifx_Strict_32Bit MH_RD_RESP_ERR:1;    /**< \brief [11:11] MH RD RESP ERR (rw) */
    __IO Ifx_Strict_32Bit MH_WR_RESP_ERR:1;    /**< \brief [12:12] MH WR RESP ERR (rw) */
    __IO Ifx_Strict_32Bit MH_MEM_TO_ERR:1;    /**< \brief [13:13] MH MEM TO ERR (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __IO Ifx_Strict_32Bit PRT_ABORTED:1;    /**< \brief [16:16] PRT ABORTED (rw) */
    __IO Ifx_Strict_32Bit PRT_USOS:1;      /**< \brief [17:17] PRT USOS (rw) */
    __IO Ifx_Strict_32Bit PRT_TX_DU:1;     /**< \brief [18:18] PRT TX DU (rw) */
    __IO Ifx_Strict_32Bit PRT_RX_DO:1;     /**< \brief [19:19] PRT RX DO (rw) */
    __IO Ifx_Strict_32Bit PRT_IFF_RQ:1;    /**< \brief [20:20] PRT IFF RQ (rw) */
    __IO Ifx_Strict_32Bit PRT_BUS_ERR:1;    /**< \brief [21:21] PRT BUS ERR (rw) */
    __IO Ifx_Strict_32Bit PRT_E_PASSIVE:1;    /**< \brief [22:22] PRT E PASSIVE (rw) */
    __IO Ifx_Strict_32Bit PRT_BUS_OFF:1;    /**< \brief [23:23] PRT BUS OFF (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __IO Ifx_Strict_32Bit TOP_MUX_TO_ERR:1;    /**< \brief [28:28] TOP MUX TO ERR (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CANXL_N_SAFETY_ENA_Bits;

/** \brief Node 0 safety raw event status register */
typedef struct _Ifx_CANXL_N_SAFETY_RAW_Bits
{
    __I  Ifx_Strict_32Bit MH_RX_FILTER_ERR:1;    /**< \brief [0:0] MH RX FILTER ERR (rh) */
    __I  Ifx_Strict_32Bit MH_MEM_SFTY_ERR:1;    /**< \brief [1:1] MH MEM SFTY ERR (rh) */
    __I  Ifx_Strict_32Bit MH_REG_CRC_ERR:1;    /**< \brief [2:2] MH REG CRC ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DESC_ERR:1;    /**< \brief [3:3] MH DESC ERR (rh) */
    __I  Ifx_Strict_32Bit MH_AP_PARITY_ERR:1;    /**< \brief [4:4] MH AP PARITY ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_PARITY_ERR:1;    /**< \brief [5:5] MH DP PARITY ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_SEQ_ERR:1;    /**< \brief [6:6] MH DP SEQ ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_DO_ERR:1;    /**< \brief [7:7] MH DP DO ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DP_TO_ERR:1;    /**< \brief [8:8] MH DP TO ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DMA_TO_ERR:1;    /**< \brief [9:9] MH DMA TO ERR (rh) */
    __I  Ifx_Strict_32Bit MH_DMA_CH_ERR:1;    /**< \brief [10:10] MH DMA CH ERR (rh) */
    __I  Ifx_Strict_32Bit MH_RD_RESP_ERR:1;    /**< \brief [11:11] MH RD RESP ERR (rh) */
    __I  Ifx_Strict_32Bit MH_WR_RESP_ERR:1;    /**< \brief [12:12] MH WR RESP ERR (rh) */
    __I  Ifx_Strict_32Bit MH_MEM_TO_ERR:1;    /**< \brief [13:13] MH MEM TO ERR (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __I  Ifx_Strict_32Bit PRT_ABORTED:1;    /**< \brief [16:16] PRT ABORTED (rh) */
    __I  Ifx_Strict_32Bit PRT_USOS:1;      /**< \brief [17:17] PRT USOS (rh) */
    __I  Ifx_Strict_32Bit PRT_TX_DU:1;     /**< \brief [18:18] PRT TX DU (rh) */
    __I  Ifx_Strict_32Bit PRT_RX_DO:1;     /**< \brief [19:19] PRT RX DO (rh) */
    __I  Ifx_Strict_32Bit PRT_IFF_RQ:1;    /**< \brief [20:20] PRT IFF RQ (rh) */
    __I  Ifx_Strict_32Bit PRT_BUS_ERR:1;    /**< \brief [21:21] PRT BUS ERR (rh) */
    __I  Ifx_Strict_32Bit PRT_E_PASSIVE:1;    /**< \brief [22:22] PRT E PASSIVE (rh) */
    __I  Ifx_Strict_32Bit PRT_BUS_OFF:1;    /**< \brief [23:23] PRT BUS OFF (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [27:24] \internal Reserved */
    __I  Ifx_Strict_32Bit TOP_MUX_TO_ERR:1;    /**< \brief [28:28] TOP MUX TO ERR (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CANXL_N_SAFETY_RAW_Bits;

/** \brief Node 0 safety interrupt status register */
typedef struct _Ifx_CANXL_N_SFTY_INT_STS_Bits
{
    __IO Ifx_Strict_32Bit DMA_AXI_WR_TO_ERR:1;    /**< \brief [0:0] DMA AXI WR TO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DMA_AXI_RD_TO_ERR:1;    /**< \brief [1:1] DMA AXI RD TO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_PRT_TX_TO_ERR:1;    /**< \brief [2:2] DP PRT TX TO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_PRT_RX_TO_ERR:1;    /**< \brief [3:3] DP PRT RX TO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit MEM_AXI_WR_TO_ERR:1;    /**< \brief [4:4] MEM AXI WR TO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit MEM_AXI_RD_TO_ERR:1;    /**< \brief [5:5] MEM AXI RD TO ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_TX_PARITY_ERR:1;    /**< \brief [6:6] DP TX PARITY ERR (rw1ch) */
    __IO Ifx_Strict_32Bit DP_RX_PARITY_ERR:1;    /**< \brief [7:7] DP RX PARITY ERR (rw1ch) */
    __IO Ifx_Strict_32Bit AP_TX_PARITY_ERR:1;    /**< \brief [8:8] AP TX PARITY ERR (rw1ch) */
    __IO Ifx_Strict_32Bit AP_RX_PARITY_ERR:1;    /**< \brief [9:9] AP RX PARITY ERR (rw1ch) */
    __IO Ifx_Strict_32Bit TX_DESC_REQ_ERR:1;    /**< \brief [10:10] TX DESC REQ ERR (rw1ch) */
    __IO Ifx_Strict_32Bit TX_DESC_CRC_ERR:1;    /**< \brief [11:11] TX DESC CRC ERR (rw1ch) */
    __IO Ifx_Strict_32Bit RX_DESC_REQ_ERR:1;    /**< \brief [12:12] RX DESC REQ ERR (rw1ch) */
    __IO Ifx_Strict_32Bit RX_DESC_CRC_ERR:1;    /**< \brief [13:13] RX DESC CRC ERR (rw1ch) */
    __IO Ifx_Strict_32Bit MEM_SFTY_UE:1;    /**< \brief [14:14] MEM SFTY UE (rw1ch) */
    __IO Ifx_Strict_32Bit MEM_SFTY_CE:1;    /**< \brief [15:15] MEM SFTY CE (rw1ch) */
    __IO Ifx_Strict_32Bit ACK_TX_PARITY_ERR:1;    /**< \brief [16:16] ACK TX PARITY ERR (rw1ch) */
    __IO Ifx_Strict_32Bit ACK_RX_PARITY_ERR:1;    /**< \brief [17:17] ACK RX PARITY ERR (rw1ch) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_CANXL_N_SFTY_INT_STS_Bits;

/** \brief Node 0 PRT status register */
typedef struct _Ifx_CANXL_N_STAT_Bits
{
    __I  Ifx_Strict_32Bit ACT:2;           /**< \brief [1:0] ACT (rh) */
    __I  Ifx_Strict_32Bit INT:1;           /**< \brief [2:2] INT (rh) */
    __I  Ifx_Strict_32Bit STP:1;           /**< \brief [3:3] STP (rh) */
    __I  Ifx_Strict_32Bit CLKA:1;          /**< \brief [4:4] CLKA (rh) */
    __I  Ifx_Strict_32Bit FIMA:1;          /**< \brief [5:5] FIMA (rh) */
    __I  Ifx_Strict_32Bit EP:1;            /**< \brief [6:6] EP (rh) */
    __I  Ifx_Strict_32Bit BO:1;            /**< \brief [7:7] BO (rh) */
    __I  Ifx_Strict_32Bit TDCV:8;          /**< \brief [15:8] TDCV (rh) */
    __I  Ifx_Strict_32Bit REC:7;           /**< \brief [22:16] REC (rh) */
    __I  Ifx_Strict_32Bit RP:1;            /**< \brief [23:23] RP (rh) */
    __I  Ifx_Strict_32Bit TEC:8;           /**< \brief [31:24] TEC (rh) */
} Ifx_CANXL_N_STAT_Bits;

/** \brief Node 0 statistics interrupt status register */
typedef struct _Ifx_CANXL_N_STATS_INT_STS_Bits
{
    __IO Ifx_Strict_32Bit TX_SUCC:1;       /**< \brief [0:0] TX SUCC (rw1ch) */
    __IO Ifx_Strict_32Bit TX_UNSUCC:1;     /**< \brief [1:1] TX UNSUCC (rw1ch) */
    __IO Ifx_Strict_32Bit RX_SUCC:1;       /**< \brief [2:2] RX SUCC (rw1ch) */
    __IO Ifx_Strict_32Bit RX_UNSUCC:1;     /**< \brief [3:3] RX UNSUCC (rw1ch) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CANXL_N_STATS_INT_STS_Bits;

/** \brief Node 0 hardware test functions register */
typedef struct _Ifx_CANXL_N_TEST_Bits
{
    __IO Ifx_Strict_32Bit LBCK:1;          /**< \brief [0:0] LBCK (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [2:1] \internal Reserved */
    __I  Ifx_Strict_32Bit RXD:1;           /**< \brief [3:3] RXD (r) */
    __IO Ifx_Strict_32Bit TXC:2;           /**< \brief [5:4] TXC (rw) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [14:6] \internal Reserved */
    __I  Ifx_Strict_32Bit HWT:1;           /**< \brief [15:15] HWT (r) */
    __O  Ifx_Strict_32Bit ABORTED:1;       /**< \brief [16:16] ABORTED (w) */
    __O  Ifx_Strict_32Bit USOS:1;          /**< \brief [17:17] USOS (w) */
    __O  Ifx_Strict_32Bit TX_DU:1;         /**< \brief [18:18] TX DU (w) */
    __O  Ifx_Strict_32Bit RX_DO:1;         /**< \brief [19:19] RX DO (w) */
    __O  Ifx_Strict_32Bit IFF_RQ:1;        /**< \brief [20:20] IFF RQ (w) */
    __O  Ifx_Strict_32Bit TX_EVT:1;        /**< \brief [21:21] TX EVT (w) */
    __O  Ifx_Strict_32Bit RX_EVT:1;        /**< \brief [22:22] RX EVT (w) */
    __O  Ifx_Strict_32Bit BUS_ERR:1;       /**< \brief [23:23] BUS ERR (w) */
    __O  Ifx_Strict_32Bit E_ACTIVE:1;      /**< \brief [24:24] E ACTIVE (w) */
    __O  Ifx_Strict_32Bit E_PASSIVE:1;     /**< \brief [25:25] E PASSIVE (w) */
    __O  Ifx_Strict_32Bit BUS_ON:1;        /**< \brief [26:26] BUS ON (w) */
    __O  Ifx_Strict_32Bit BUS_OFF:1;       /**< \brief [27:27] BUS OFF (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_TEST_Bits;

/** \brief Node 0 timestamp clock control */
typedef struct _Ifx_CANXL_N_TS_CLOCK_CTL_Bits
{
    __IO Ifx_UReg_32Bit SRC_SEL:3;         /**< \brief [2:0] Clock source select for clk_timebase generation. (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit SYNC_SEL:1;        /**< \brief [4:4] Selection of external or local timebase (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit PRESCALER:4;       /**< \brief [11:8] Local pre-scaler for clk_timebase generation. (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_CANXL_N_TS_CLOCK_CTL_Bits;

/** \brief Node 0 timestamp command */
typedef struct _Ifx_CANXL_N_TS_CMD_Bits
{
    __IO Ifx_UReg_32Bit TS_CLEAR:1;        /**< \brief [0:0] Timestamp counter clear request (resets to 0). (rw1c) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_CANXL_N_TS_CMD_Bits;

/** \brief Node 0 timestamp counter MSBs */
typedef struct _Ifx_CANXL_N_TS_CNT_HI_Bits
{
    __I  Ifx_UReg_32Bit VALUE:32;          /**< \brief [31:0] Bits [63:32] of timestamp counter. (rh) */
} Ifx_CANXL_N_TS_CNT_HI_Bits;

/** \brief Node 0 timestamp counter LSBs */
typedef struct _Ifx_CANXL_N_TS_CNT_LO_Bits
{
    __I  Ifx_UReg_32Bit VALUE:32;          /**< \brief [31:0] Bits [31:0] of 64 bit timestamp counter (rh) */
} Ifx_CANXL_N_TS_CNT_LO_Bits;

/** \brief Node 0 timestamp control */
typedef struct _Ifx_CANXL_N_TS_CTL_Bits
{
    __I  Ifx_UReg_32Bit :31;               /**< \brief [30:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ENABLED:1;         /**< \brief [31:31] Timestamp control (rw) */
} Ifx_CANXL_N_TS_CTL_Bits;

/** \brief Node 0 TX descriptor current address pointer register */
typedef struct _Ifx_CANXL_N_TX_DESC_ADD_PT_Bits
{
    __I  Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rh) */
} Ifx_CANXL_N_TX_DESC_ADD_PT_Bits;

/** \brief Node 0 TX descriptor base address register */
typedef struct _Ifx_CANXL_N_TX_DESC_MEM_ADD_Bits
{
    __IO Ifx_Strict_32Bit FQ_BASE_ADDR:16;    /**< \brief [15:0] FQ BASE ADDR (rw) */
    __IO Ifx_Strict_32Bit PQ_BASE_ADDR:16;    /**< \brief [31:16] PQ BASE ADDR (rw) */
} Ifx_CANXL_N_TX_DESC_MEM_ADD_Bits;

/** \brief Node 0 TX filter control register 0 */
typedef struct _Ifx_CANXL_N_TX_FILTER_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit COMB:8;          /**< \brief [7:0] COMB (rw) */
    __IO Ifx_Strict_32Bit MASK:8;          /**< \brief [15:8] MASK (rw) */
    __IO Ifx_Strict_32Bit MODE:1;          /**< \brief [16:16] MODE (rw) */
    __IO Ifx_Strict_32Bit CAN_FD:1;        /**< \brief [17:17] CAN FD (rw) */
    __IO Ifx_Strict_32Bit CC_CAN:1;        /**< \brief [18:18] CC CAN (rw) */
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [19:19] EN (rw) */
    __IO Ifx_Strict_32Bit IRQ_EN:1;        /**< \brief [20:20] IRQ EN (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_CANXL_N_TX_FILTER_CTRL0_Bits;

/** \brief Node 0 TX filter control register 1 */
typedef struct _Ifx_CANXL_N_TX_FILTER_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit VALID:16;        /**< \brief [15:0] VALID (rw) */
    __IO Ifx_Strict_32Bit FIELD:16;        /**< \brief [31:16] FIELD (rw) */
} Ifx_CANXL_N_TX_FILTER_CTRL1_Bits;

/** \brief Node 0 TX filter error information */
typedef struct _Ifx_CANXL_N_TX_FILTER_ERR_INFO_Bits
{
    __I  Ifx_Strict_32Bit FQ:1;            /**< \brief [0:0] FQ (rh) */
    __I  Ifx_Strict_32Bit FQN_PQS:5;       /**< \brief [5:1] FQN PQS (rh) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_CANXL_N_TX_FILTER_ERR_INFO_Bits;

/** \brief Node 0 TX filter reference value register 0 */
typedef struct _Ifx_CANXL_N_TX_FILTER_REFVAL_Bits
{
    __IO Ifx_Strict_32Bit REF_VAL0:8;      /**< \brief [7:0] REF VAL0 (rw) */
    __IO Ifx_Strict_32Bit REF_VAL1:8;      /**< \brief [15:8] REF VAL1 (rw) */
    __IO Ifx_Strict_32Bit REF_VAL2:8;      /**< \brief [23:16] REF VAL2 (rw) */
    __IO Ifx_Strict_32Bit REF_VAL3:8;      /**< \brief [31:24] REF VAL3 (rw) */
} Ifx_CANXL_N_TX_FILTER_REFVAL_Bits;

/** \brief Node 0 TX FIFO queue 0 current address pointer register */
typedef struct _Ifx_CANXL_N_TX_FQ_ADD_PT_Bits
{
    __I  Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rh) */
} Ifx_CANXL_N_TX_FQ_ADD_PT_Bits;

/** \brief Node 0 TX FIFO queue control register 0 */
typedef struct _Ifx_CANXL_N_TX_FQ_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit START:8;         /**< \brief [7:0] START (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_CTRL0_Bits;

/** \brief Node 0 TX FIFO queue control register 1 */
typedef struct _Ifx_CANXL_N_TX_FQ_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit ABORT:8;         /**< \brief [7:0] ABORT (rwh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_CTRL1_Bits;

/** \brief Node 0 TX FIFO queue control register 2 */
typedef struct _Ifx_CANXL_N_TX_FQ_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit ENABLE:8;        /**< \brief [7:0] ENABLE (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_CTRL2_Bits;

/** \brief Node 0 valid TX FIFO queue descriptors in local memory */
typedef struct _Ifx_CANXL_N_TX_FQ_DESC_VALID_Bits
{
    __I  Ifx_Strict_32Bit DESC_CN_VALID:8;    /**< \brief [7:0] DESC CN VALID (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit DESC_NC_VALID:8;    /**< \brief [23:16] DESC NC VALID (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_DESC_VALID_Bits;

/** \brief Node 0 TX FIFO queue interrupt status register */
typedef struct _Ifx_CANXL_N_TX_FQ_INT_STS_Bits
{
    __IO Ifx_Strict_32Bit SENT:8;          /**< \brief [7:0] SENT (rw1ch) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit UNVALID:8;       /**< \brief [23:16] UNVALID (rw1ch) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_INT_STS_Bits;

/** \brief Node 0 TX FIFO queue 0 size register */
typedef struct _Ifx_CANXL_N_TX_FQ_SIZE_Bits
{
    __IO Ifx_Strict_32Bit MAX_DESC:10;     /**< \brief [9:0] MAX DESC (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_SIZE_Bits;

/** \brief Node 0 TX FIFO queue 0 start address register */
typedef struct _Ifx_CANXL_N_TX_FQ_START_ADD_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_TX_FQ_START_ADD_Bits;

/** \brief Node 0 TX FIFO queue status register */
typedef struct _Ifx_CANXL_N_TX_FQ_STS0_Bits
{
    __I  Ifx_Strict_32Bit BUSY:8;          /**< \brief [7:0] BUSY (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit STOP:8;          /**< \brief [23:16] STOP (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_STS0_Bits;

/** \brief Node 0 TX FIFO queue status register */
typedef struct _Ifx_CANXL_N_TX_FQ_STS1_Bits
{
    __I  Ifx_Strict_32Bit UNVALID:8;       /**< \brief [7:0] UNVALID (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit ERROR:8;         /**< \brief [23:16] ERROR (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CANXL_N_TX_FQ_STS1_Bits;

/** \brief Node 0 TX priority queue control register 0 */
typedef struct _Ifx_CANXL_N_TX_PQ_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit START:32;        /**< \brief [31:0] START (rw) */
} Ifx_CANXL_N_TX_PQ_CTRL0_Bits;

/** \brief Node 0 TX priority queue control register 1 */
typedef struct _Ifx_CANXL_N_TX_PQ_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit ABORT:32;        /**< \brief [31:0] ABORT (rwh) */
} Ifx_CANXL_N_TX_PQ_CTRL1_Bits;

/** \brief Node 0 TX priority queue control register 2 */
typedef struct _Ifx_CANXL_N_TX_PQ_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit ENABLE:32;       /**< \brief [31:0] ENABLE (rw) */
} Ifx_CANXL_N_TX_PQ_CTRL2_Bits;

/** \brief Node 0 valid TX priority queue descriptors in local memory */
typedef struct _Ifx_CANXL_N_TX_PQ_DESC_VALID_Bits
{
    __I  Ifx_Strict_32Bit DESC_VALID:32;    /**< \brief [31:0] DESC VALID (rh) */
} Ifx_CANXL_N_TX_PQ_DESC_VALID_Bits;

/** \brief Node 0 TX priority queue interrupt status register 0 */
typedef struct _Ifx_CANXL_N_TX_PQ_INT_STS0_Bits
{
    __IO Ifx_Strict_32Bit SENT:32;         /**< \brief [31:0] SENT (rw1ch) */
} Ifx_CANXL_N_TX_PQ_INT_STS0_Bits;

/** \brief Node 0 TX priority queue interrupt status register 1 */
typedef struct _Ifx_CANXL_N_TX_PQ_INT_STS1_Bits
{
    __IO Ifx_Strict_32Bit UNVALID:32;      /**< \brief [31:0] UNVALID (rw1ch) */
} Ifx_CANXL_N_TX_PQ_INT_STS1_Bits;

/** \brief Node 0 TX priority queue start address */
typedef struct _Ifx_CANXL_N_TX_PQ_START_ADD_Bits
{
    __IO Ifx_Strict_32Bit VAL:32;          /**< \brief [31:0] VAL (rw) */
} Ifx_CANXL_N_TX_PQ_START_ADD_Bits;

/** \brief Node 0 TX priority queue status register */
typedef struct _Ifx_CANXL_N_TX_PQ_STS0_Bits
{
    __I  Ifx_Strict_32Bit BUSY:32;         /**< \brief [31:0] BUSY (rh) */
} Ifx_CANXL_N_TX_PQ_STS0_Bits;

/** \brief Node 0 TX priority queue status register */
typedef struct _Ifx_CANXL_N_TX_PQ_STS1_Bits
{
    __I  Ifx_Strict_32Bit SENT:32;         /**< \brief [31:0] SENT (rh) */
} Ifx_CANXL_N_TX_PQ_STS1_Bits;

/** \brief Node 0 TX-SCAN best candidates register */
typedef struct _Ifx_CANXL_N_TX_SCAN_BC_Bits
{
    __I  Ifx_Strict_32Bit FH_PQ:1;         /**< \brief [0:0] FH PQ (rh) */
    __I  Ifx_Strict_32Bit FH_FQN_PQSN:5;    /**< \brief [5:1] FH FQN PQSN (rh) */
    __I  Ifx_Strict_32Bit FH_OFFSET:10;    /**< \brief [15:6] FH OFFSET (rh) */
    __I  Ifx_Strict_32Bit SH_PQ:1;         /**< \brief [16:16] SH PQ (rh) */
    __I  Ifx_Strict_32Bit SH_FQN_PQSN:5;    /**< \brief [21:17] SH FQN PQSN (rh) */
    __I  Ifx_Strict_32Bit SH_OFFSET:10;    /**< \brief [31:22] SH OFFSET (rh) */
} Ifx_CANXL_N_TX_SCAN_BC_Bits;

/** \brief Node 0 TX-SCAN first candidates register */
typedef struct _Ifx_CANXL_N_TX_SCAN_FC_Bits
{
    __I  Ifx_Strict_32Bit FQ_PQ0:1;        /**< \brief [0:0] FQ PQ0 (rh) */
    __I  Ifx_Strict_32Bit FQN_PQSN0:5;     /**< \brief [5:1] FQN PQSN0 (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __I  Ifx_Strict_32Bit FQ_PQ1:1;        /**< \brief [8:8] FQ PQ1 (rh) */
    __I  Ifx_Strict_32Bit FQN_PQSN1:5;     /**< \brief [13:9] FQN PQSN1 (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [15:14] \internal Reserved */
    __I  Ifx_Strict_32Bit FQ_PQ2:1;        /**< \brief [16:16] FQ PQ2 (rh) */
    __I  Ifx_Strict_32Bit FQN_PQSN2:5;     /**< \brief [21:17] FQN PQSN2 (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [23:22] \internal Reserved */
    __I  Ifx_Strict_32Bit FQ_PQ3:1;        /**< \brief [24:24] FQ PQ3 (rh) */
    __I  Ifx_Strict_32Bit FQN_PQSN3:5;     /**< \brief [29:25] FQN PQSN3 (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_CANXL_N_TX_SCAN_FC_Bits;

/** \brief Node 0 TX message counter register */
typedef struct _Ifx_CANXL_N_TX_STATISTICS_Bits
{
    __IO Ifx_Strict_32Bit SUCC:12;         /**< \brief [11:0] SUCC (rw0ch) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit UNSUCC:12;       /**< \brief [27:16] UNSUCC (rw0ch) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CANXL_N_TX_STATISTICS_Bits;

/** \brief Node 0 release identification register */
typedef struct _Ifx_CANXL_N_VERSION_Bits
{
    __I  Ifx_Strict_32Bit DAY:8;           /**< \brief [7:0] DAY (r) */
    __I  Ifx_Strict_32Bit MON:8;           /**< \brief [15:8] MON (r) */
    __I  Ifx_Strict_32Bit YEAR:4;          /**< \brief [19:16] YEAR (r) */
    __I  Ifx_Strict_32Bit SUBSTEP:4;       /**< \brief [23:20] SUBSTEP (r) */
    __I  Ifx_Strict_32Bit STEP:4;          /**< \brief [27:24] STEP (r) */
    __I  Ifx_Strict_32Bit REL:4;           /**< \brief [31:28] REL (r) */
} Ifx_CANXL_N_VERSION_Bits;

/** \brief Node 0 CAN XL data phase bit timing register */
typedef struct _Ifx_CANXL_N_XBTP_Bits
{
    __IO Ifx_Strict_32Bit XSJW:7;          /**< \brief [6:0] XSJW (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit XTSEG2:7;        /**< \brief [14:8] XTSEG2 (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __IO Ifx_Strict_32Bit XTSEG1:8;        /**< \brief [23:16] XTSEG1 (rw) */
    __IO Ifx_Strict_32Bit XTDCO:8;         /**< \brief [31:24] XTDCO (rw) */
} Ifx_CANXL_N_XBTP_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_CANXL_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0/1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 Bus Select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_CANXL_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_CANXL_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_CANXL_PROT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_canxl_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_PRS_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_RDA_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_RDB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_RDB_FPI;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_RGNLA_Bits B;          /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_RGNUA_Bits B;          /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_RGNUA;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_VM_Bits B;             /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_WRA_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ACCEN_WRB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_ACCEN_WRB_FPI;

/** \brief Clock enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_CLKEN_Bits B;                /**< \brief Bitfield access */
} Ifx_CANXL_CLKEN;

/** \brief Debug control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_DEBUG_CTL_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_DEBUG_CTL;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_ID_Bits B;                   /**< \brief Bitfield access */
} Ifx_CANXL_ID;

/** \brief Module Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_MODULE_CLC_Bits B;           /**< \brief Bitfield access */
} Ifx_CANXL_MODULE_CLC;

/** \brief Module reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_MODULE_RST_CTRLA_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_MODULE_RST_CTRLA;

/** \brief Module reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_MODULE_RST_CTRLB_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_MODULE_RST_CTRLB;

/** \brief Module reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_MODULE_RST_STAT_Bits B;      /**< \brief Bitfield access */
} Ifx_CANXL_MODULE_RST_STAT;

/** \brief Node 0 message transfer interrupt clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_MTI_CLR_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_NODE_MTI_CLR;

/** \brief Node 0 message transfer interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_MTI_ENA_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_NODE_MTI_ENA;

/** \brief Node 0 message transfer interrupt event register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_MTI_RAW_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_NODE_MTI_RAW;

/** \brief Node 0 Port Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_PORTCTRL_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_NODE_PORTCTRL;

/** \brief Node 0 reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_RST_CTRLA_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_NODE_RST_CTRLA;

/** \brief Node 0 reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_RST_CTRLB_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_NODE_RST_CTRLB;

/** \brief Node 0 reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_RST_STAT_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_NODE_RST_STAT;

/** \brief Node 0 VM and PRS configuration Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_NODE_VMPRSCONFIG_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_NODE_VMPRSCONFIG;

/** \brief Node 0 AXI address extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_AXI_ADD_EXT_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_AXI_ADD_EXT;

/** \brief Node 0 DMA error information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_AXI_ERR_INFO_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_N_AXI_ERR_INFO;

/** \brief Node 0 AXI parameter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_AXI_PARAMS_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_AXI_PARAMS;

/** \brief Node 0 IRC configuration register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_CAPTURING_MODE_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_CAPTURING_MODE;

/** \brief Node 0 CRC control register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_CRC_CTRL_Bits B;           /**< \brief Bitfield access */
} Ifx_CANXL_N_CRC_CTRL;

/** \brief Node 0 CRC register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_CRC_REG_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_CRC_REG;

/** \brief Node 0 control register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_CTRL_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_CTRL;

/** \brief Node 0 CAN FD data phase bit timing register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_DBTP_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_DBTP;

/** \brief Node 0 debug control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_DEBUG_TEST_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_DEBUG_TEST_CTRL;

/** \brief Node 0 descriptor error information 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_DESC_ERR_INFO0_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_DESC_ERR_INFO0;

/** \brief Node 0 descriptor error information 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_DESC_ERR_INFO1_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_DESC_ERR_INFO1;

/** \brief Node 0 endianness test register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_ENDN_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_ENDN;

/** \brief Node 0 error raw event clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_ERR_CLR_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_ERR_CLR;

/** \brief Node 0 error raw event enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_ERR_ENA_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_ERR_ENA;

/** \brief Node 0 error interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_ERR_INT_STS_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_ERR_INT_STS;

/** \brief Node 0 error raw event status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_ERR_RAW_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_ERR_RAW;

/** \brief Node 0 event status flags register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_EVNT_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_EVNT;

/** \brief Node 0 fault injection module control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_FIMC_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_FIMC;

/** \brief Node 0 functional raw event clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_FUNC_CLR_Bits B;           /**< \brief Bitfield access */
} Ifx_CANXL_N_FUNC_CLR;

/** \brief Node 0 functional raw event enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_FUNC_ENA_Bits B;           /**< \brief Bitfield access */
} Ifx_CANXL_N_FUNC_ENA;

/** \brief Node 0 functional raw event status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_FUNC_RAW_Bits B;           /**< \brief Bitfield access */
} Ifx_CANXL_N_FUNC_RAW;

/** \brief Node 0 hardware debug port control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_HDP_Bits B;                /**< \brief Bitfield access */
} Ifx_CANXL_N_HDP;

/** \brief Node 0 interrupt test register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_INT_TEST0_Bits B;          /**< \brief Bitfield access */
} Ifx_CANXL_N_INT_TEST0;

/** \brief Node 0 interrupt test register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_INT_TEST1_Bits B;          /**< \brief Bitfield access */
} Ifx_CANXL_N_INT_TEST1;

/** \brief Node 0 unlock sequence register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_LOCK_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_LOCK;

/** \brief Node 0 message handler configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MH_CFG_Bits B;             /**< \brief Bitfield access */
} Ifx_CANXL_N_MH_CFG;

/** \brief Node 0 message handler control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MH_CTRL_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_MH_CTRL;

/** \brief Node 0 message handler lock register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MH_LOCK_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_MH_LOCK;

/** \brief Node 0 message handler safety configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MH_SFTY_CFG_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_MH_SFTY_CFG;

/** \brief Node 0 message handler safety control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MH_SFTY_CTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_N_MH_SFTY_CTRL;

/** \brief Node 0 message handler status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MH_STS_Bits B;             /**< \brief Bitfield access */
} Ifx_CANXL_N_MH_STS;

/** \brief Node 0 operating mode register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_MODE_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_MODE;

/** \brief Node 0 arbitration phase nominal bit timing register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_NBTP_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_NBTP;

/** \brief Node 0 PWME configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_PCFG_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_PCFG;

/** \brief Node 0 PRT release identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_PREL_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_PREL;

/** \brief Node 0 RX descriptor current address pointer   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_DESC_ADD_PT_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_DESC_ADD_PT;

/** \brief Node 0 RX filter control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FILTER_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FILTER_CTRL;

/** \brief Node 0 RX filter base address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FILTER_MEM_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FILTER_MEM_ADD;

/** \brief Node 0 RX FIFO queue 0 current address pointer   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_ADD_PT_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_ADD_PT;

/** \brief Node 0 RX FIFO queue control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_CTRL0_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_CTRL0;

/** \brief Node 0 RX FIFO queue control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_CTRL1_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_CTRL1;

/** \brief Node 0 RX FIFO queue control register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_CTRL2_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_CTRL2;

/** \brief Node 0 RX FIFO queue 0 data container start address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_DC_START_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_DC_START_ADD;

/** \brief Node 0 RX FIFO queue interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_INT_STS_Bits B;      /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_INT_STS;

/** \brief Node 0 RX FIFO queue 0 read address pointer   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_RD_ADD_PT_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_RD_ADD_PT;

/** \brief Node 0 RX FIFO queue 0 link list and data container size   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_SIZE_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_SIZE;

/** \brief Node 0 RX FIFO queue 0 link list start address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_START_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_START_ADD;

/** \brief Node 0 RX FIFO queue status register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_STS0_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_STS0;

/** \brief Node 0 RX FIFO queue status register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_STS1_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_STS1;

/** \brief Node 0 RX FIFO queue status register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_FQ_STS2_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_FQ_STS2;

/** \brief Node 0 RX message counter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_RX_STATISTICS_Bits B;      /**< \brief Bitfield access */
} Ifx_CANXL_N_RX_STATISTICS;

/** \brief Node 0 safety raw event clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_SAFETY_CLR_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_SAFETY_CLR;

/** \brief Node 0 safety raw event enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_SAFETY_ENA_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_SAFETY_ENA;

/** \brief Node 0 safety raw event status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_SAFETY_RAW_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_SAFETY_RAW;

/** \brief Node 0 safety interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_SFTY_INT_STS_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_N_SFTY_INT_STS;

/** \brief Node 0 PRT status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_STAT;

/** \brief Node 0 statistics interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_STATS_INT_STS_Bits B;      /**< \brief Bitfield access */
} Ifx_CANXL_N_STATS_INT_STS;

/** \brief Node 0 hardware test functions register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TEST_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_TEST;

/** \brief Node 0 timestamp clock control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TS_CLOCK_CTL_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_N_TS_CLOCK_CTL;

/** \brief Node 0 timestamp command   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TS_CMD_Bits B;             /**< \brief Bitfield access */
} Ifx_CANXL_N_TS_CMD;

/** \brief Node 0 timestamp counter MSBs   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TS_CNT_HI_Bits B;          /**< \brief Bitfield access */
} Ifx_CANXL_N_TS_CNT_HI;

/** \brief Node 0 timestamp counter LSBs   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TS_CNT_LO_Bits B;          /**< \brief Bitfield access */
} Ifx_CANXL_N_TS_CNT_LO;

/** \brief Node 0 timestamp control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TS_CTL_Bits B;             /**< \brief Bitfield access */
} Ifx_CANXL_N_TS_CTL;

/** \brief Node 0 TX descriptor current address pointer register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_DESC_ADD_PT_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_DESC_ADD_PT;

/** \brief Node 0 TX descriptor base address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_DESC_MEM_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_DESC_MEM_ADD;

/** \brief Node 0 TX filter control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FILTER_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FILTER_CTRL0;

/** \brief Node 0 TX filter control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FILTER_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FILTER_CTRL1;

/** \brief Node 0 TX filter error information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FILTER_ERR_INFO_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FILTER_ERR_INFO;

/** \brief Node 0 TX filter reference value register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FILTER_REFVAL_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FILTER_REFVAL;

/** \brief Node 0 TX FIFO queue 0 current address pointer register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_ADD_PT_Bits B;       /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_ADD_PT;

/** \brief Node 0 TX FIFO queue control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_CTRL0_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_CTRL0;

/** \brief Node 0 TX FIFO queue control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_CTRL1_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_CTRL1;

/** \brief Node 0 TX FIFO queue control register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_CTRL2_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_CTRL2;

/** \brief Node 0 valid TX FIFO queue descriptors in local memory   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_DESC_VALID_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_DESC_VALID;

/** \brief Node 0 TX FIFO queue interrupt status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_INT_STS_Bits B;      /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_INT_STS;

/** \brief Node 0 TX FIFO queue 0 size register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_SIZE_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_SIZE;

/** \brief Node 0 TX FIFO queue 0 start address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_START_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_START_ADD;

/** \brief Node 0 TX FIFO queue status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_STS0_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_STS0;

/** \brief Node 0 TX FIFO queue status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_FQ_STS1_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_FQ_STS1;

/** \brief Node 0 TX priority queue control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_CTRL0_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_CTRL0;

/** \brief Node 0 TX priority queue control register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_CTRL1_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_CTRL1;

/** \brief Node 0 TX priority queue control register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_CTRL2_Bits B;        /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_CTRL2;

/** \brief Node 0 valid TX priority queue descriptors in local memory   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_DESC_VALID_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_DESC_VALID;

/** \brief Node 0 TX priority queue interrupt status register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_INT_STS0_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_INT_STS0;

/** \brief Node 0 TX priority queue interrupt status register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_INT_STS1_Bits B;     /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_INT_STS1;

/** \brief Node 0 TX priority queue start address   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_START_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_START_ADD;

/** \brief Node 0 TX priority queue status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_STS0_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_STS0;

/** \brief Node 0 TX priority queue status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_PQ_STS1_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_PQ_STS1;

/** \brief Node 0 TX-SCAN best candidates register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_SCAN_BC_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_SCAN_BC;

/** \brief Node 0 TX-SCAN first candidates register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_SCAN_FC_Bits B;         /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_SCAN_FC;

/** \brief Node 0 TX message counter register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_TX_STATISTICS_Bits B;      /**< \brief Bitfield access */
} Ifx_CANXL_N_TX_STATISTICS;

/** \brief Node 0 release identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_VERSION_Bits B;            /**< \brief Bitfield access */
} Ifx_CANXL_N_VERSION;

/** \brief Node 0 CAN XL data phase bit timing register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_N_XBTP_Bits B;               /**< \brief Bitfield access */
} Ifx_CANXL_N_XBTP;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_OCS_Bits B;                  /**< \brief Bitfield access */
} Ifx_CANXL_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CANXL_PROT_Bits B;                 /**< \brief Bitfield access */
} Ifx_CANXL_PROT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_MODULE_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_CANXL_MODULE_RST
{
       __IO Ifx_CANXL_MODULE_RST_CTRLA          CTRLA;                  /**< \brief 0, Module reset control register A*/
       __IO Ifx_CANXL_MODULE_RST_CTRLB          CTRLB;                  /**< \brief 4, Module reset control register B*/
       __I  Ifx_CANXL_MODULE_RST_STAT           STAT;                   /**< \brief 8, Module reset status register*/
} Ifx_CANXL_MODULE_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_MODULE_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_CANXL_MODULE_ACCEN
{
       __IO Ifx_CANXL_ACCEN_WRA                 WRA;                    /**< \brief 0, Module Write access enable register A*/
       __IO Ifx_CANXL_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Module Write access enable register B*/
       __IO Ifx_CANXL_ACCEN_RDA                 RDA;                    /**< \brief 8, Module Read access enable register A*/
       __IO Ifx_CANXL_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Module Read access enable register B*/
       __IO Ifx_CANXL_ACCEN_VM                  VM;                     /**< \brief 10, Module VM access enable register*/
       __IO Ifx_CANXL_ACCEN_PRS                 PRS;                    /**< \brief 14, Module PRS access enable register*/
} Ifx_CANXL_MODULE_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_MODULE_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief MODULE object */
typedef volatile struct _Ifx_CANXL_MODULE
{
       __IO Ifx_CANXL_MODULE_CLC                CLC;                    /**< \brief 0, Module Clock Control Register*/
       __IO Ifx_CANXL_MODULE_RST                RST;                    /**< \brief 4, */
       __IO Ifx_CANXL_MODULE_ACCEN              ACCEN;                  /**< \brief 10, */
} Ifx_CANXL_MODULE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_NODE_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_CANXL_NODE_RST
{
       __IO Ifx_CANXL_NODE_RST_CTRLA            CTRLA;                  /**< \brief 0, Node 0 reset control register A*/
       __IO Ifx_CANXL_NODE_RST_CTRLB            CTRLB;                  /**< \brief 4, Node 0 reset control register B*/
       __I  Ifx_CANXL_NODE_RST_STAT             STAT;                   /**< \brief 8, Node 0 reset status register*/
} Ifx_CANXL_NODE_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_NODE_ACCENNODE_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENNODE object */
typedef volatile struct _Ifx_CANXL_NODE_ACCENNODE
{
       __IO Ifx_CANXL_ACCEN_WRA                 WRA;                    /**< \brief 0, Node 0 write access enable register A*/
       __IO Ifx_CANXL_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Node 0 write access enable register B*/
       __IO Ifx_CANXL_ACCEN_RDA                 RDA;                    /**< \brief 8, Node 0 read access enable register A*/
       __IO Ifx_CANXL_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Node 0 read access enable register B*/
       __IO Ifx_CANXL_ACCEN_VM                  VM;                     /**< \brief 10, Node 0 VM access enable register*/
       __IO Ifx_CANXL_ACCEN_PRS                 PRS;                    /**< \brief 14, Node 0 PRS access enable register*/
       __IO Ifx_CANXL_ACCEN_RGNLA               RGNLA;                  /**< \brief 18, Node 0 region lower address register*/
       __IO Ifx_CANXL_ACCEN_RGNUA               RGNUA;                  /**< \brief 1C, Node 0 region upper address register*/
} Ifx_CANXL_NODE_ACCENNODE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_NODE_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief NODE object */
typedef volatile struct _Ifx_CANXL_NODE
{
       __IO Ifx_CANXL_NODE_RST                  RST;                    /**< \brief 0, */
       __IO Ifx_CANXL_NODE_ACCENNODE            ACCENNODE;              /**< \brief C, */
       __IO Ifx_CANXL_NODE_VMPRSCONFIG          VMPRSCONFIG;            /**< \brief 2C, Node 0 VM and PRS configuration Register*/
       __IO Ifx_CANXL_NODE_PORTCTRL             PORTCTRL;               /**< \brief 30, Node 0 Port Control Register*/
       __I  Ifx_CANXL_NODE_MTI_RAW              MTI_RAW;                /**< \brief 34, Node 0 message transfer interrupt event register*/
       __O  Ifx_CANXL_NODE_MTI_CLR              MTI_CLR;                /**< \brief 38, Node 0 message transfer interrupt clear register*/
       __IO Ifx_CANXL_NODE_MTI_ENA              MTI_ENA;                /**< \brief 3C, Node 0 message transfer interrupt enable register*/
       __I  Ifx_UReg_8Bit                       reserved_40[192];       /**< \brief 40, \internal Reserved */
} Ifx_CANXL_NODE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_N_TX_FQ_struct
 * \{  */
/******************************************************************************/
/** \name Object L5
 * \{  */
/** \brief TX_FQ object */
typedef volatile struct _Ifx_CANXL_N_TX_FQ
{
       __I  Ifx_CANXL_N_TX_FQ_ADD_PT            ADD_PT;                 /**< \brief 0, Node 0 TX FIFO queue 0 current address pointer register*/
       __IO Ifx_CANXL_N_TX_FQ_START_ADD         START_ADD;              /**< \brief 4, Node 0 TX FIFO queue 0 start address register*/
       __IO Ifx_CANXL_N_TX_FQ_SIZE              SIZE;                   /**< \brief 8, Node 0 TX FIFO queue 0 size register*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
} Ifx_CANXL_N_TX_FQ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_N_RX_FQ_struct
 * \{  */
/******************************************************************************/
/** \name Object L5
 * \{  */
/** \brief RX_FQ object */
typedef volatile struct _Ifx_CANXL_N_RX_FQ
{
       __I  Ifx_CANXL_N_RX_FQ_ADD_PT            ADD_PT;                 /**< \brief 0, Node 0 RX FIFO queue 0 current address pointer*/
       __IO Ifx_CANXL_N_RX_FQ_START_ADD         START_ADD;              /**< \brief 4, Node 0 RX FIFO queue 0 link list start address*/
       __IO Ifx_CANXL_N_RX_FQ_SIZE              SIZE;                   /**< \brief 8, Node 0 RX FIFO queue 0 link list and data container size*/
       __IO Ifx_CANXL_N_RX_FQ_DC_START_ADD      DC_START_ADD;           /**< \brief C, Node 0 RX FIFO queue 0 data container start address*/
       __IO Ifx_CANXL_N_RX_FQ_RD_ADD_PT         RD_ADD_PT;              /**< \brief 10, Node 0 RX FIFO queue 0 read address pointer*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
} Ifx_CANXL_N_RX_FQ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_N_TX_FILTER_struct
 * \{  */
/******************************************************************************/
/** \name Object L5
 * \{  */
/** \brief TX_FILTER object */
typedef volatile struct _Ifx_CANXL_N_TX_FILTER
{
       __IO Ifx_CANXL_N_TX_FILTER_REFVAL        REFVAL;                 /**< \brief 0, Node 0 TX filter reference value register 0*/
} Ifx_CANXL_N_TX_FILTER;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_N_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief N object */
typedef volatile struct _Ifx_CANXL_N
{
       __I  Ifx_UReg_8Bit                       reserved_0[16];         /**< \brief 0, \internal Reserved */
       __IO Ifx_CANXL_N_TS_CTL                  TS_CTL;                 /**< \brief 10, Node 0 timestamp control*/
       __IO Ifx_CANXL_N_TS_CLOCK_CTL            TS_CLOCK_CTL;           /**< \brief 14, Node 0 timestamp clock control*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_CANXL_N_TS_CMD                  TS_CMD;                 /**< \brief 20, Node 0 timestamp command*/
       __I  Ifx_UReg_8Bit                       reserved_24[12];        /**< \brief 24, \internal Reserved */
       __I  Ifx_CANXL_N_TS_CNT_LO               TS_CNT_LO;              /**< \brief 30, Node 0 timestamp counter LSBs*/
       __I  Ifx_CANXL_N_TS_CNT_HI               TS_CNT_HI;              /**< \brief 34, Node 0 timestamp counter MSBs*/
       __I  Ifx_UReg_8Bit                       reserved_38[4040];      /**< \brief 38, \internal Reserved */
       __I  Ifx_CANXL_N_VERSION                 VERSION;                /**< \brief 1000, Node 0 release identification register*/
       __IO Ifx_CANXL_N_MH_CTRL                 MH_CTRL;                /**< \brief 1004, Node 0 message handler control register*/
       __IO Ifx_CANXL_N_MH_CFG                  MH_CFG;                 /**< \brief 1008, Node 0 message handler configuration register*/
       __I  Ifx_CANXL_N_MH_STS                  MH_STS;                 /**< \brief 100C, Node 0 message handler status register*/
       __IO Ifx_CANXL_N_MH_SFTY_CFG             MH_SFTY_CFG;            /**< \brief 1010, Node 0 message handler safety configuration register*/
       __IO Ifx_CANXL_N_MH_SFTY_CTRL            MH_SFTY_CTRL;           /**< \brief 1014, Node 0 message handler safety control register*/
       __IO Ifx_CANXL_N_RX_FILTER_MEM_ADD       RX_FILTER_MEM_ADD;      /**< \brief 1018, Node 0 RX filter base address register*/
       __IO Ifx_CANXL_N_TX_DESC_MEM_ADD         TX_DESC_MEM_ADD;        /**< \brief 101C, Node 0 TX descriptor base address register*/
       __IO Ifx_CANXL_N_AXI_ADD_EXT             AXI_ADD_EXT;            /**< \brief 1020, Node 0 AXI address extension register*/
       __IO Ifx_CANXL_N_AXI_PARAMS              AXI_PARAMS;             /**< \brief 1024, Node 0 AXI parameter register*/
       __IO Ifx_CANXL_N_MH_LOCK                 MH_LOCK;                /**< \brief 1028, Node 0 message handler lock register*/
       __I  Ifx_UReg_8Bit                       reserved_102C[212];     /**< \brief 102C, \internal Reserved */
       __I  Ifx_CANXL_N_TX_DESC_ADD_PT          TX_DESC_ADD_PT;         /**< \brief 1100, Node 0 TX descriptor current address pointer register*/
       __IO Ifx_CANXL_N_TX_STATISTICS           TX_STATISTICS;          /**< \brief 1104, Node 0 TX message counter register*/
       __I  Ifx_CANXL_N_TX_FQ_STS0              TX_FQ_STS0;             /**< \brief 1108, Node 0 TX FIFO queue status register*/
       __I  Ifx_CANXL_N_TX_FQ_STS1              TX_FQ_STS1;             /**< \brief 110C, Node 0 TX FIFO queue status register*/
       __IO Ifx_CANXL_N_TX_FQ_CTRL0             TX_FQ_CTRL0;            /**< \brief 1110, Node 0 TX FIFO queue control register 0*/
       __IO Ifx_CANXL_N_TX_FQ_CTRL1             TX_FQ_CTRL1;            /**< \brief 1114, Node 0 TX FIFO queue control register 1*/
       __IO Ifx_CANXL_N_TX_FQ_CTRL2             TX_FQ_CTRL2;            /**< \brief 1118, Node 0 TX FIFO queue control register 2*/
       __I  Ifx_UReg_8Bit                       reserved_111C[4];       /**< \brief 111C, \internal Reserved */
       __IO Ifx_CANXL_N_TX_FQ                   TX_FQ[8];               /**< \brief 1120, */
       __I  Ifx_UReg_8Bit                       reserved_11A0[352];     /**< \brief 11A0, \internal Reserved */
       __I  Ifx_CANXL_N_TX_PQ_STS0              TX_PQ_STS0;             /**< \brief 1300, Node 0 TX priority queue status register*/
       __I  Ifx_CANXL_N_TX_PQ_STS1              TX_PQ_STS1;             /**< \brief 1304, Node 0 TX priority queue status register*/
       __I  Ifx_UReg_8Bit                       reserved_1308[4];       /**< \brief 1308, \internal Reserved */
       __IO Ifx_CANXL_N_TX_PQ_CTRL0             TX_PQ_CTRL0;            /**< \brief 130C, Node 0 TX priority queue control register 0*/
       __IO Ifx_CANXL_N_TX_PQ_CTRL1             TX_PQ_CTRL1;            /**< \brief 1310, Node 0 TX priority queue control register 1*/
       __IO Ifx_CANXL_N_TX_PQ_CTRL2             TX_PQ_CTRL2;            /**< \brief 1314, Node 0 TX priority queue control register 2*/
       __IO Ifx_CANXL_N_TX_PQ_START_ADD         TX_PQ_START_ADD;        /**< \brief 1318, Node 0 TX priority queue start address*/
       __I  Ifx_UReg_8Bit                       reserved_131C[228];     /**< \brief 131C, \internal Reserved */
       __I  Ifx_CANXL_N_RX_DESC_ADD_PT          RX_DESC_ADD_PT;         /**< \brief 1400, Node 0 RX descriptor current address pointer*/
       __IO Ifx_CANXL_N_RX_STATISTICS           RX_STATISTICS;          /**< \brief 1404, Node 0 RX message counter register*/
       __I  Ifx_CANXL_N_RX_FQ_STS0              RX_FQ_STS0;             /**< \brief 1408, Node 0 RX FIFO queue status register 0*/
       __I  Ifx_CANXL_N_RX_FQ_STS1              RX_FQ_STS1;             /**< \brief 140C, Node 0 RX FIFO queue status register 1*/
       __I  Ifx_CANXL_N_RX_FQ_STS2              RX_FQ_STS2;             /**< \brief 1410, Node 0 RX FIFO queue status register 2*/
       __IO Ifx_CANXL_N_RX_FQ_CTRL0             RX_FQ_CTRL0;            /**< \brief 1414, Node 0 RX FIFO queue control register 0*/
       __IO Ifx_CANXL_N_RX_FQ_CTRL1             RX_FQ_CTRL1;            /**< \brief 1418, Node 0 RX FIFO queue control register 1*/
       __IO Ifx_CANXL_N_RX_FQ_CTRL2             RX_FQ_CTRL2;            /**< \brief 141C, Node 0 RX FIFO queue control register 2*/
       __IO Ifx_CANXL_N_RX_FQ                   RX_FQ[8];               /**< \brief 1420, */
       __I  Ifx_UReg_8Bit                       reserved_14E0[288];     /**< \brief 14E0, \internal Reserved */
       __IO Ifx_CANXL_N_TX_FILTER_CTRL0         TX_FILTER_CTRL0;        /**< \brief 1600, Node 0 TX filter control register 0*/
       __IO Ifx_CANXL_N_TX_FILTER_CTRL1         TX_FILTER_CTRL1;        /**< \brief 1604, Node 0 TX filter control register 1*/
       __IO Ifx_CANXL_N_TX_FILTER               TX_FILTER[4];           /**< \brief 1608, */
       __I  Ifx_UReg_8Bit                       reserved_1618[104];     /**< \brief 1618, \internal Reserved */
       __IO Ifx_CANXL_N_RX_FILTER_CTRL          RX_FILTER_CTRL;         /**< \brief 1680, Node 0 RX filter control register*/
       __I  Ifx_UReg_8Bit                       reserved_1684[124];     /**< \brief 1684, \internal Reserved */
       __IO Ifx_CANXL_N_TX_FQ_INT_STS           TX_FQ_INT_STS;          /**< \brief 1700, Node 0 TX FIFO queue interrupt status register*/
       __IO Ifx_CANXL_N_RX_FQ_INT_STS           RX_FQ_INT_STS;          /**< \brief 1704, Node 0 RX FIFO queue interrupt status register*/
       __IO Ifx_CANXL_N_TX_PQ_INT_STS0          TX_PQ_INT_STS0;         /**< \brief 1708, Node 0 TX priority queue interrupt status register 0*/
       __IO Ifx_CANXL_N_TX_PQ_INT_STS1          TX_PQ_INT_STS1;         /**< \brief 170C, Node 0 TX priority queue interrupt status register 1*/
       __IO Ifx_CANXL_N_STATS_INT_STS           STATS_INT_STS;          /**< \brief 1710, Node 0 statistics interrupt status register*/
       __IO Ifx_CANXL_N_ERR_INT_STS             ERR_INT_STS;            /**< \brief 1714, Node 0 error interrupt status register*/
       __IO Ifx_CANXL_N_SFTY_INT_STS            SFTY_INT_STS;           /**< \brief 1718, Node 0 safety interrupt status register*/
       __I  Ifx_CANXL_N_AXI_ERR_INFO            AXI_ERR_INFO;           /**< \brief 171C, Node 0 DMA error information*/
       __I  Ifx_CANXL_N_DESC_ERR_INFO0          DESC_ERR_INFO0;         /**< \brief 1720, Node 0 descriptor error information 0*/
       __I  Ifx_CANXL_N_DESC_ERR_INFO1          DESC_ERR_INFO1;         /**< \brief 1724, Node 0 descriptor error information 1*/
       __I  Ifx_CANXL_N_TX_FILTER_ERR_INFO      TX_FILTER_ERR_INFO;     /**< \brief 1728, Node 0 TX filter error information*/
       __I  Ifx_UReg_8Bit                       reserved_172C[212];     /**< \brief 172C, \internal Reserved */
       __IO Ifx_CANXL_N_DEBUG_TEST_CTRL         DEBUG_TEST_CTRL;        /**< \brief 1800, Node 0 debug control register*/
       __IO Ifx_CANXL_N_INT_TEST0               INT_TEST0;              /**< \brief 1804, Node 0 interrupt test register 0*/
       __IO Ifx_CANXL_N_INT_TEST1               INT_TEST1;              /**< \brief 1808, Node 0 interrupt test register 1*/
       __I  Ifx_UReg_8Bit                       reserved_180C[4];       /**< \brief 180C, \internal Reserved */
       __I  Ifx_CANXL_N_TX_SCAN_FC              TX_SCAN_FC;             /**< \brief 1810, Node 0 TX-SCAN first candidates register*/
       __I  Ifx_CANXL_N_TX_SCAN_BC              TX_SCAN_BC;             /**< \brief 1814, Node 0 TX-SCAN best candidates register*/
       __I  Ifx_CANXL_N_TX_FQ_DESC_VALID        TX_FQ_DESC_VALID;       /**< \brief 1818, Node 0 valid TX FIFO queue descriptors in local memory*/
       __I  Ifx_CANXL_N_TX_PQ_DESC_VALID        TX_PQ_DESC_VALID;       /**< \brief 181C, Node 0 valid TX priority queue descriptors in local memory*/
       __I  Ifx_UReg_8Bit                       reserved_1820[96];      /**< \brief 1820, \internal Reserved */
       __O  Ifx_CANXL_N_CRC_CTRL                CRC_CTRL;               /**< \brief 1880, Node 0 CRC control register*/
       __IO Ifx_CANXL_N_CRC_REG                 CRC_REG;                /**< \brief 1884, Node 0 CRC register*/
       __I  Ifx_UReg_8Bit                       reserved_1888[120];     /**< \brief 1888, \internal Reserved */
       __I  Ifx_CANXL_N_ENDN                    ENDN;                   /**< \brief 1900, Node 0 endianness test register*/
       __I  Ifx_CANXL_N_PREL                    PREL;                   /**< \brief 1904, Node 0 PRT release identification register*/
       __I  Ifx_CANXL_N_STAT                    STAT;                   /**< \brief 1908, Node 0 PRT status register*/
       __I  Ifx_UReg_8Bit                       reserved_190C[20];      /**< \brief 190C, \internal Reserved */
       __IO Ifx_CANXL_N_EVNT                    EVNT;                   /**< \brief 1920, Node 0 event status flags register*/
       __I  Ifx_UReg_8Bit                       reserved_1924[28];      /**< \brief 1924, \internal Reserved */
       __O  Ifx_CANXL_N_LOCK                    LOCK;                   /**< \brief 1940, Node 0 unlock sequence register*/
       __O  Ifx_CANXL_N_CTRL                    CTRL;                   /**< \brief 1944, Node 0 control register*/
       __IO Ifx_CANXL_N_FIMC                    FIMC;                   /**< \brief 1948, Node 0 fault injection module control register*/
       __IO Ifx_CANXL_N_TEST                    TEST;                   /**< \brief 194C, Node 0 hardware test functions register*/
       __I  Ifx_UReg_8Bit                       reserved_1950[16];      /**< \brief 1950, \internal Reserved */
       __IO Ifx_CANXL_N_MODE                    MODE;                   /**< \brief 1960, Node 0 operating mode register*/
       __IO Ifx_CANXL_N_NBTP                    NBTP;                   /**< \brief 1964, Node 0 arbitration phase nominal bit timing register*/
       __IO Ifx_CANXL_N_DBTP                    DBTP;                   /**< \brief 1968, Node 0 CAN FD data phase bit timing register*/
       __IO Ifx_CANXL_N_XBTP                    XBTP;                   /**< \brief 196C, Node 0 CAN XL data phase bit timing register*/
       __IO Ifx_CANXL_N_PCFG                    PCFG;                   /**< \brief 1970, Node 0 PWME configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_1974[140];     /**< \brief 1974, \internal Reserved */
       __I  Ifx_CANXL_N_FUNC_RAW                FUNC_RAW;               /**< \brief 1A00, Node 0 functional raw event status register*/
       __I  Ifx_CANXL_N_ERR_RAW                 ERR_RAW;                /**< \brief 1A04, Node 0 error raw event status register*/
       __I  Ifx_CANXL_N_SAFETY_RAW              SAFETY_RAW;             /**< \brief 1A08, Node 0 safety raw event status register*/
       __I  Ifx_UReg_8Bit                       reserved_1A0C[4];       /**< \brief 1A0C, \internal Reserved */
       __O  Ifx_CANXL_N_FUNC_CLR                FUNC_CLR;               /**< \brief 1A10, Node 0 functional raw event clear register*/
       __O  Ifx_CANXL_N_ERR_CLR                 ERR_CLR;                /**< \brief 1A14, Node 0 error raw event clear register*/
       __O  Ifx_CANXL_N_SAFETY_CLR              SAFETY_CLR;             /**< \brief 1A18, Node 0 safety raw event clear register*/
       __I  Ifx_UReg_8Bit                       reserved_1A1C[4];       /**< \brief 1A1C, \internal Reserved */
       __IO Ifx_CANXL_N_FUNC_ENA                FUNC_ENA;               /**< \brief 1A20, Node 0 functional raw event enable register*/
       __IO Ifx_CANXL_N_ERR_ENA                 ERR_ENA;                /**< \brief 1A24, Node 0 error raw event enable register*/
       __IO Ifx_CANXL_N_SAFETY_ENA              SAFETY_ENA;             /**< \brief 1A28, Node 0 safety raw event enable register*/
       __I  Ifx_UReg_8Bit                       reserved_1A2C[4];       /**< \brief 1A2C, \internal Reserved */
       __I  Ifx_CANXL_N_CAPTURING_MODE          CAPTURING_MODE;         /**< \brief 1A30, Node 0 IRC configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_1A34[12];      /**< \brief 1A34, \internal Reserved */
       __IO Ifx_CANXL_N_HDP                     HDP;                    /**< \brief 1A40, Node 0 hardware debug port control register*/
       __I  Ifx_UReg_8Bit                       reserved_1A44[1468];    /**< \brief 1A44, \internal Reserved */
} Ifx_CANXL_N;

/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_RAM_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CANXL_RAM object */
typedef volatile struct _Ifx_CANXL_RAM
{
       Ifx_Strict_32Bit                    RAM[4096];             /**< \brief 0, Embedded SRAM for CAN XL nodes configuration*/
} Ifx_CANXL_RAM;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Canxl_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CANXL object */
typedef volatile struct _Ifx_CANXL
{
       __I  Ifx_CANXL_ID                        ID;                     /**< \brief 0, Module Identification Register*/
       __IO Ifx_CANXL_OCS                       OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __IO Ifx_CANXL_MODULE                    MODULE;                 /**< \brief 8, */
       __I  Ifx_UReg_8Bit                       reserved_30[8];         /**< \brief 30, \internal Reserved */
       __IO Ifx_CANXL_PROT                      PROTE;                  /**< \brief 38, PROT Register Endinit*/
       __IO Ifx_CANXL_PROT                      PROTSE;                 /**< \brief 3C, PROT Register Safe Endinit*/
       __IO Ifx_CANXL_CLKEN                     CLKEN;                  /**< \brief 40, Clock enable*/
       __I  Ifx_UReg_8Bit                       reserved_44[188];       /**< \brief 44, \internal Reserved */
       __IO Ifx_CANXL_NODE                      NODE[4];                /**< \brief 100, Reserved for future use*/
       __I  Ifx_UReg_8Bit                       reserved_500[64256];    /**< \brief 500, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_10000[4];      /**< \brief 10000, \internal Reserved */
       __IO Ifx_CANXL_DEBUG_CTL                 DEBUG_CTL;              /**< \brief 10004, Debug control register*/
       __I  Ifx_UReg_8Bit                       reserved_10008[65528];    /**< \brief 10008, \internal Reserved */
       __IO Ifx_CANXL_N                         N[4];                   /**< \brief 20000, */
       __I  Ifx_UReg_8Bit                       reserved_28000[8421376];    /**< \brief 28000, \internal Reserved */
} Ifx_CANXL;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXCANXL_REGDEF_H */
