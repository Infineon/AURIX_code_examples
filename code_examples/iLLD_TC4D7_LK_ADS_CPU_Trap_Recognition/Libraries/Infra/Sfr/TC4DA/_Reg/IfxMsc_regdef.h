/**
 * \file IfxMsc_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_MSC/V0.2.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Msc_Registers Msc Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Msc_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Msc_Registers
 * 
 * \defgroup IfxSfr_Msc_Registers_union Register unions
 * \ingroup IfxSfr_Msc_Registers
 * 
 * \defgroup IfxSfr_Msc_Registers_struct Memory map
 * \ingroup IfxSfr_Msc_Registers
 */
#ifndef IFXMSC_REGDEF_H
#define IFXMSC_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Msc_Registers_Bitfields
 * \{  */
/** \brief Asynchronous block configuration register */
typedef struct _Ifx_MSC_ABC_Bits
{
    __IO Ifx_UReg_32Bit LOW:4;             /**< \brief [3:0] Duration of the Low Phase of the Shift Clock - LOW (rw) */
    __IO Ifx_UReg_32Bit HIGH:4;            /**< \brief [7:4] Duration of the High Phase of the Shift Clock - HIGH (rw) */
    __IO Ifx_UReg_32Bit OIP:2;             /**< \brief [9:8] Overflow Interrupt Node Pointer - OIP (rw) */
    __IO Ifx_UReg_32Bit OASR:1;            /**< \brief [10:10] Overflow Alternate Service Request - OASR (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __I  Ifx_UReg_32Bit OVF:1;             /**< \brief [12:12] Overflow Flag - OVF (rh) */
    __O  Ifx_UReg_32Bit OFM:2;             /**< \brief [14:13] Overflow Flag Modify - OFM (w) */
    __IO Ifx_UReg_32Bit OIE:1;             /**< \brief [15:15] Overflow Interrupt Enable - OIE (rw) */
    __IO Ifx_UReg_32Bit NDA:3;             /**< \brief [18:16] N Divider ABRA - NDA (rw) */
    __IO Ifx_UReg_32Bit UIP:2;             /**< \brief [20:19] Underflow Interrupt Node Pointer - UIP (rw) */
    __IO Ifx_UReg_32Bit UASR:1;            /**< \brief [21:21] Underflow Alternate Service Request - UASR (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [22:22] \internal Reserved */
    __I  Ifx_UReg_32Bit UNF:1;             /**< \brief [23:23] Underflow Flag - UNF (rh) */
    __O  Ifx_UReg_32Bit UFM:2;             /**< \brief [25:24] Underflow Flag Modify - UFM (w) */
    __IO Ifx_UReg_32Bit UIE:1;             /**< \brief [26:26] Underflow Interrupt Enable - UIE (rw) */
    __IO Ifx_UReg_32Bit CLKSEL:3;          /**< \brief [29:27] Clock Select - CLKSEL (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __IO Ifx_UReg_32Bit ABB:1;             /**< \brief [31:31] Asynchronous Block Bypass - ABB (rw) */
} Ifx_MSC_ABC_Bits;

/** \brief PRS access enable register */
typedef struct _Ifx_MSC_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_MSC_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_MSC_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_MSC_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_MSC_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_MSC_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_MSC_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_MSC_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_MSC_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_MSC_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_MSC_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_MSC_ACCEN_WRB_FPI_Bits;

/** \brief Clock control register */
typedef struct _Ifx_MSC_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_MSC_CLC_Bits;

/** \brief Downstream command register */
typedef struct _Ifx_MSC_DC_Bits
{
    __IO Ifx_UReg_32Bit DCL:16;            /**< \brief [15:0] Downstream Command for SRL Shift Register - DCL (rw) */
    __IO Ifx_UReg_32Bit DCH:16;            /**< \brief [31:16] Downstream Command for SRH Shift Register - DCH (rw) */
} Ifx_MSC_DC_Bits;

/** \brief Downstream command extension register */
typedef struct _Ifx_MSC_DCE_Bits
{
    __IO Ifx_UReg_32Bit DCEH:32;           /**< \brief [31:0] Downstream Command Extension for SRH Shift Register - DCEH (rw) */
} Ifx_MSC_DCE_Bits;

/** \brief Downstream command mirror register */
typedef struct _Ifx_MSC_DCM_Bits
{
    __O  Ifx_UReg_32Bit DCLM:16;           /**< \brief [15:0] Downstream Command Mirror of the DC.DCL Bit Field - DCLM (w) */
    __O  Ifx_UReg_32Bit DCHM:16;           /**< \brief [31:16] Downstream Command Mirror of the DC.DCH Bit Field - DCHM (w) */
} Ifx_MSC_DCM_Bits;

/** \brief Downstream command slow channel X register */
typedef struct _Ifx_MSC_DCSX_Bits
{
    __IO Ifx_UReg_32Bit DCSXD:32;          /**< \brief [31:0] Downstream Command Slow Channel X Data - DCSXD (rw) */
} Ifx_MSC_DCSX_Bits;

/** \brief Downstream command slow channel Y register */
typedef struct _Ifx_MSC_DCSY_Bits
{
    __IO Ifx_UReg_32Bit DCSYD:32;          /**< \brief [31:0] Downstream Command Slow Channel Y Data - DCSYD (rw) */
} Ifx_MSC_DCSY_Bits;

/** \brief Downstream data register */
typedef struct _Ifx_MSC_DD_Bits
{
    __IO Ifx_UReg_32Bit DDL:16;            /**< \brief [15:0] Downstream Data for SRL Shift Register - DDL (rw) */
    __IO Ifx_UReg_32Bit DDH:16;            /**< \brief [31:16] Downstream Data for SRH Shift Register - DDH (rw) */
} Ifx_MSC_DD_Bits;

/** \brief Downstream data extension register */
typedef struct _Ifx_MSC_DDE_Bits
{
    __IO Ifx_UReg_32Bit DDLE:16;           /**< \brief [15:0] Downstream Data Extension for SRL Shift Register - DDLE (rw) */
    __IO Ifx_UReg_32Bit DDHE:16;           /**< \brief [31:16] Downstream Data Extension for SRH Shift Register - DDHE (rw) */
} Ifx_MSC_DDE_Bits;

/** \brief Downstream data mirror register */
typedef struct _Ifx_MSC_DDM_Bits
{
    __O  Ifx_UReg_32Bit DDLM:16;           /**< \brief [15:0] Downstream Data Mirror for SRL Shift Register - DDLM (w) */
    __O  Ifx_UReg_32Bit DDHM:16;           /**< \brief [31:16] Downstream Data Mirror for SRH Shift Register - DDHM (w) */
} Ifx_MSC_DDM_Bits;

/** \brief Downstream control register */
typedef struct _Ifx_MSC_DSC_Bits
{
    __IO Ifx_UReg_32Bit TM:1;              /**< \brief [0:0] Transmission Mode - TM (rw) */
    __I  Ifx_UReg_32Bit CP:1;              /**< \brief [1:1] Command Pending - CP (rh) */
    __I  Ifx_UReg_32Bit DP:1;              /**< \brief [2:2] Data Pending - DP (rh) */
    __IO Ifx_UReg_32Bit NDBL:5;            /**< \brief [7:3] Number of SRL Bits Shifted at data frames - NDBL (rw) */
    __IO Ifx_UReg_32Bit NDBH:5;            /**< \brief [12:8] Number of SRH Bits Shifted at data frames - NDBH (rw) */
    __IO Ifx_UReg_32Bit ENSELL:1;          /**< \brief [13:13] Enable SRL Active Phase Selection Bit - ENSELL (rw) */
    __IO Ifx_UReg_32Bit ENSELH:1;          /**< \brief [14:14] Enable SRH Active Phase Selection Bit - ENSELH (rw) */
    __I  Ifx_UReg_32Bit DSDIS:1;           /**< \brief [15:15] Downstream Disable - DSDIS (rh) */
    __IO Ifx_UReg_32Bit NBC:6;             /**< \brief [21:16] Number of Bits Shifted at command frames - NBC (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit PPD:5;             /**< \brief [28:24] Passive Phase Length at data frames - PPD (rw) */
    __IO Ifx_UReg_32Bit ALTSEL:1;          /**< \brief [29:29] Alternative Input Timer Selection - ALTSEL (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_MSC_DSC_Bits;

/** \brief Downstream control enhanced register */
typedef struct _Ifx_MSC_DSCE_Bits
{
    __IO Ifx_UReg_32Bit NDBHE:1;           /**< \brief [0:0] Number of SRH Bits Shifted at data frames Extension - NDBHE (rw) */
    __IO Ifx_UReg_32Bit NDBLE:1;           /**< \brief [1:1] Number of SRL Bits Shifted at data frames Extension - NDBLE (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [13:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EXEN:1;            /**< \brief [14:14] Extension Enable - EXEN (rw) */
    __I  Ifx_UReg_32Bit CCF:1;             /**< \brief [15:15] Command-Command Flag - CCF (rh) */
    __IO Ifx_UReg_32Bit INJENP0:1;         /**< \brief [16:16] Injection Enable of the Pin 0 Signal - INJENP0 (rw) */
    __IO Ifx_UReg_32Bit INJPOSP0:6;        /**< \brief [22:17] Injection Position of the Pin 0 Signal - INJPOSP0 (rw) */
    __IO Ifx_UReg_32Bit DFP:1;             /**< \brief [23:23] Data Frame over command frame Prioritization - DFP (rw) */
    __IO Ifx_UReg_32Bit INJENP1:1;         /**< \brief [24:24] Injection Enable of the Pin 1 Signal - INJENP1 (rw) */
    __IO Ifx_UReg_32Bit INJPOSP1:6;        /**< \brief [30:25] Injection Position of the Pin 1 Signal - INJPOSP1 (rw) */
    __IO Ifx_UReg_32Bit CDCM:1;            /**< \brief [31:31] Command-Data-Command in Data Repetition Mode - CDCM (rw) */
} Ifx_MSC_DSCE_Bits;

/** \brief Downstream select data source high register */
typedef struct _Ifx_MSC_DSDSH_Bits
{
    __IO Ifx_UReg_32Bit SH0:2;             /**< \brief [1:0] Select Source for SRH - SH0 (rw) */
    __IO Ifx_UReg_32Bit SH1:2;             /**< \brief [3:2] Select Source for SRH - SH1 (rw) */
    __IO Ifx_UReg_32Bit SH2:2;             /**< \brief [5:4] Select Source for SRH - SH2 (rw) */
    __IO Ifx_UReg_32Bit SH3:2;             /**< \brief [7:6] Select Source for SRH - SH3 (rw) */
    __IO Ifx_UReg_32Bit SH4:2;             /**< \brief [9:8] Select Source for SRH - SH4 (rw) */
    __IO Ifx_UReg_32Bit SH5:2;             /**< \brief [11:10] Select Source for SRH - SH5 (rw) */
    __IO Ifx_UReg_32Bit SH6:2;             /**< \brief [13:12] Select Source for SRH - SH6 (rw) */
    __IO Ifx_UReg_32Bit SH7:2;             /**< \brief [15:14] Select Source for SRH - SH7 (rw) */
    __IO Ifx_UReg_32Bit SH8:2;             /**< \brief [17:16] Select Source for SRH - SH8 (rw) */
    __IO Ifx_UReg_32Bit SH9:2;             /**< \brief [19:18] Select Source for SRH - SH9 (rw) */
    __IO Ifx_UReg_32Bit SH10:2;            /**< \brief [21:20] Select Source for SRH - SH10 (rw) */
    __IO Ifx_UReg_32Bit SH11:2;            /**< \brief [23:22] Select Source for SRH - SH11 (rw) */
    __IO Ifx_UReg_32Bit SH12:2;            /**< \brief [25:24] Select Source for SRH - SH12 (rw) */
    __IO Ifx_UReg_32Bit SH13:2;            /**< \brief [27:26] Select Source for SRH - SH13 (rw) */
    __IO Ifx_UReg_32Bit SH14:2;            /**< \brief [29:28] Select Source for SRH - SH14 (rw) */
    __IO Ifx_UReg_32Bit SH15:2;            /**< \brief [31:30] Select Source for SRH - SH15 (rw) */
} Ifx_MSC_DSDSH_Bits;

/** \brief Downstream select data source high extension register */
typedef struct _Ifx_MSC_DSDSHE_Bits
{
    __IO Ifx_UReg_32Bit SH16:2;            /**< \brief [1:0] Select Source for SRH - SH16 (rw) */
    __IO Ifx_UReg_32Bit SH17:2;            /**< \brief [3:2] Select Source for SRH - SH17 (rw) */
    __IO Ifx_UReg_32Bit SH18:2;            /**< \brief [5:4] Select Source for SRH - SH18 (rw) */
    __IO Ifx_UReg_32Bit SH19:2;            /**< \brief [7:6] Select Source for SRH - SH19 (rw) */
    __IO Ifx_UReg_32Bit SH20:2;            /**< \brief [9:8] Select Source for SRH - SH20 (rw) */
    __IO Ifx_UReg_32Bit SH21:2;            /**< \brief [11:10] Select Source for SRH - SH21 (rw) */
    __IO Ifx_UReg_32Bit SH22:2;            /**< \brief [13:12] Select Source for SRH - SH22 (rw) */
    __IO Ifx_UReg_32Bit SH23:2;            /**< \brief [15:14] Select Source for SRH - SH23 (rw) */
    __IO Ifx_UReg_32Bit SH24:2;            /**< \brief [17:16] Select Source for SRH - SH24 (rw) */
    __IO Ifx_UReg_32Bit SH25:2;            /**< \brief [19:18] Select Source for SRH - SH25 (rw) */
    __IO Ifx_UReg_32Bit SH26:2;            /**< \brief [21:20] Select Source for SRH - SH26 (rw) */
    __IO Ifx_UReg_32Bit SH27:2;            /**< \brief [23:22] Select Source for SRH - SH27 (rw) */
    __IO Ifx_UReg_32Bit SH28:2;            /**< \brief [25:24] Select Source for SRH - SH28 (rw) */
    __IO Ifx_UReg_32Bit SH29:2;            /**< \brief [27:26] Select Source for SRH - SH29 (rw) */
    __IO Ifx_UReg_32Bit SH30:2;            /**< \brief [29:28] Select Source for SRH - SH30 (rw) */
    __IO Ifx_UReg_32Bit SH31:2;            /**< \brief [31:30] Select Source for SRH - SH31 (rw) */
} Ifx_MSC_DSDSHE_Bits;

/** \brief Downstream select data source low register */
typedef struct _Ifx_MSC_DSDSL_Bits
{
    __IO Ifx_UReg_32Bit SL0:2;             /**< \brief [1:0] Select Source for SRL - SL0 (rw) */
    __IO Ifx_UReg_32Bit SL1:2;             /**< \brief [3:2] Select Source for SRL - SL1 (rw) */
    __IO Ifx_UReg_32Bit SL2:2;             /**< \brief [5:4] Select Source for SRL - SL2 (rw) */
    __IO Ifx_UReg_32Bit SL3:2;             /**< \brief [7:6] Select Source for SRL - SL3 (rw) */
    __IO Ifx_UReg_32Bit SL4:2;             /**< \brief [9:8] Select Source for SRL - SL4 (rw) */
    __IO Ifx_UReg_32Bit SL5:2;             /**< \brief [11:10] Select Source for SRL - SL5 (rw) */
    __IO Ifx_UReg_32Bit SL6:2;             /**< \brief [13:12] Select Source for SRL - SL6 (rw) */
    __IO Ifx_UReg_32Bit SL7:2;             /**< \brief [15:14] Select Source for SRL - SL7 (rw) */
    __IO Ifx_UReg_32Bit SL8:2;             /**< \brief [17:16] Select Source for SRL - SL8 (rw) */
    __IO Ifx_UReg_32Bit SL9:2;             /**< \brief [19:18] Select Source for SRL - SL9 (rw) */
    __IO Ifx_UReg_32Bit SL10:2;            /**< \brief [21:20] Select Source for SRL - SL10 (rw) */
    __IO Ifx_UReg_32Bit SL11:2;            /**< \brief [23:22] Select Source for SRL - SL11 (rw) */
    __IO Ifx_UReg_32Bit SL12:2;            /**< \brief [25:24] Select Source for SRL - SL12 (rw) */
    __IO Ifx_UReg_32Bit SL13:2;            /**< \brief [27:26] Select Source for SRL - SL13 (rw) */
    __IO Ifx_UReg_32Bit SL14:2;            /**< \brief [29:28] Select Source for SRL - SL14 (rw) */
    __IO Ifx_UReg_32Bit SL15:2;            /**< \brief [31:30] Select Source for SRL - SL15 (rw) */
} Ifx_MSC_DSDSL_Bits;

/** \brief Downstream select data source low extension register */
typedef struct _Ifx_MSC_DSDSLE_Bits
{
    __IO Ifx_UReg_32Bit SL16:2;            /**< \brief [1:0] Select Source for SRL - SL16 (rw) */
    __IO Ifx_UReg_32Bit SL17:2;            /**< \brief [3:2] Select Source for SRL - SL17 (rw) */
    __IO Ifx_UReg_32Bit SL18:2;            /**< \brief [5:4] Select Source for SRL - SL18 (rw) */
    __IO Ifx_UReg_32Bit SL19:2;            /**< \brief [7:6] Select Source for SRL - SL19 (rw) */
    __IO Ifx_UReg_32Bit SL20:2;            /**< \brief [9:8] Select Source for SRL - SL20 (rw) */
    __IO Ifx_UReg_32Bit SL21:2;            /**< \brief [11:10] Select Source for SRL - SL21 (rw) */
    __IO Ifx_UReg_32Bit SL22:2;            /**< \brief [13:12] Select Source for SRL - SL22 (rw) */
    __IO Ifx_UReg_32Bit SL23:2;            /**< \brief [15:14] Select Source for SRL - SL23 (rw) */
    __IO Ifx_UReg_32Bit SL24:2;            /**< \brief [17:16] Select Source for SRL - SL24 (rw) */
    __IO Ifx_UReg_32Bit SL25:2;            /**< \brief [19:18] Select Source for SRL - SL25 (rw) */
    __IO Ifx_UReg_32Bit SL26:2;            /**< \brief [21:20] Select Source for SRL - SL26 (rw) */
    __IO Ifx_UReg_32Bit SL27:2;            /**< \brief [23:22] Select Source for SRL - SL27 (rw) */
    __IO Ifx_UReg_32Bit SL28:2;            /**< \brief [25:24] Select Source for SRL - SL28 (rw) */
    __IO Ifx_UReg_32Bit SL29:2;            /**< \brief [27:26] Select Source for SRL - SL29 (rw) */
    __IO Ifx_UReg_32Bit SL30:2;            /**< \brief [29:28] Select Source for SRL - SL30 (rw) */
    __IO Ifx_UReg_32Bit SL31:2;            /**< \brief [31:30] Select Source for SRL - SL31 (rw) */
} Ifx_MSC_DSDSLE_Bits;

/** \brief Downstream status register */
typedef struct _Ifx_MSC_DSS_Bits
{
    __I  Ifx_UReg_32Bit PFC:4;             /**< \brief [3:0] Passive Time Frame Counter - PFC (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit NPTF:4;            /**< \brief [11:8] Number Of Passive Time Frames - NPTF (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit DC:8;              /**< \brief [23:16] Downstream Counter - DC (rh) */
    __I  Ifx_UReg_32Bit DFA:1;             /**< \brief [24:24] Data Frame Active - DFA (rh) */
    __I  Ifx_UReg_32Bit CFA:1;             /**< \brief [25:25] Command Frame Active - CFA (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_MSC_DSS_Bits;

/** \brief Downstream timing extension register */
typedef struct _Ifx_MSC_DSTE_Bits
{
    __IO Ifx_UReg_32Bit PPDE:2;            /**< \brief [1:0] Passive Phase Length at data frames Extension - PPDE (rw) */
    __IO Ifx_UReg_32Bit PPCE:6;            /**< \brief [7:2] Passive Phase Length at Control Frames Extension - PPCE (rw) */
    __IO Ifx_UReg_32Bit NDD:4;             /**< \brief [11:8] N Divider Downstream - NDD (rw) */
    __IO Ifx_UReg_32Bit PPCEM:1;           /**< \brief [12:12] PPCE Extension Bit on the MSB Side - PPCEM (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit FM:1;              /**< \brief [16:16] Fast Mode - FM (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [27:17] \internal Reserved */
    __IO Ifx_UReg_32Bit CX:1;              /**< \brief [28:28] Command Extension Mode - CX (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [30:29] \internal Reserved */
    __O  Ifx_UReg_32Bit UL1:1;             /**< \brief [31:31] Unlock CX and FM for one write access - UL1 (w) */
} Ifx_MSC_DSTE_Bits;

/** \brief Emergency stop register */
typedef struct _Ifx_MSC_ESR_Bits
{
    __IO Ifx_UReg_32Bit ENL0:1;            /**< \brief [0:0] Emergency Stop Enable for Bit 0 in SRL - ENL0 (rw) */
    __IO Ifx_UReg_32Bit ENL1:1;            /**< \brief [1:1] Emergency Stop Enable for Bit 1 in SRL - ENL1 (rw) */
    __IO Ifx_UReg_32Bit ENL2:1;            /**< \brief [2:2] Emergency Stop Enable for Bit 2 in SRL - ENL2 (rw) */
    __IO Ifx_UReg_32Bit ENL3:1;            /**< \brief [3:3] Emergency Stop Enable for Bit 3 in SRL - ENL3 (rw) */
    __IO Ifx_UReg_32Bit ENL4:1;            /**< \brief [4:4] Emergency Stop Enable for Bit 4 in SRL - ENL4 (rw) */
    __IO Ifx_UReg_32Bit ENL5:1;            /**< \brief [5:5] Emergency Stop Enable for Bit 5 in SRL - ENL5 (rw) */
    __IO Ifx_UReg_32Bit ENL6:1;            /**< \brief [6:6] Emergency Stop Enable for Bit 6 in SRL - ENL6 (rw) */
    __IO Ifx_UReg_32Bit ENL7:1;            /**< \brief [7:7] Emergency Stop Enable for Bit 7 in SRL - ENL7 (rw) */
    __IO Ifx_UReg_32Bit ENL8:1;            /**< \brief [8:8] Emergency Stop Enable for Bit 8 in SRL - ENL8 (rw) */
    __IO Ifx_UReg_32Bit ENL9:1;            /**< \brief [9:9] Emergency Stop Enable for Bit 9 in SRL - ENL9 (rw) */
    __IO Ifx_UReg_32Bit ENL10:1;           /**< \brief [10:10] Emergency Stop Enable for Bit 10 in SRL - ENL10 (rw) */
    __IO Ifx_UReg_32Bit ENL11:1;           /**< \brief [11:11] Emergency Stop Enable for Bit 11 in SRL - ENL11 (rw) */
    __IO Ifx_UReg_32Bit ENL12:1;           /**< \brief [12:12] Emergency Stop Enable for Bit 12 in SRL - ENL12 (rw) */
    __IO Ifx_UReg_32Bit ENL13:1;           /**< \brief [13:13] Emergency Stop Enable for Bit 13 in SRL - ENL13 (rw) */
    __IO Ifx_UReg_32Bit ENL14:1;           /**< \brief [14:14] Emergency Stop Enable for Bit 14 in SRL - ENL14 (rw) */
    __IO Ifx_UReg_32Bit ENL15:1;           /**< \brief [15:15] Emergency Stop Enable for Bit 15 in SRL - ENL15 (rw) */
    __IO Ifx_UReg_32Bit ENH0:1;            /**< \brief [16:16] Emergency Stop Enable for Bit 0 in SRH - ENH0 (rw) */
    __IO Ifx_UReg_32Bit ENH1:1;            /**< \brief [17:17] Emergency Stop Enable for Bit 1 in SRH - ENH1 (rw) */
    __IO Ifx_UReg_32Bit ENH2:1;            /**< \brief [18:18] Emergency Stop Enable for Bit 2 in SRH - ENH2 (rw) */
    __IO Ifx_UReg_32Bit ENH3:1;            /**< \brief [19:19] Emergency Stop Enable for Bit 3 in SRH - ENH3 (rw) */
    __IO Ifx_UReg_32Bit ENH4:1;            /**< \brief [20:20] Emergency Stop Enable for Bit 4 in SRH - ENH4 (rw) */
    __IO Ifx_UReg_32Bit ENH5:1;            /**< \brief [21:21] Emergency Stop Enable for Bit 5 in SRH - ENH5 (rw) */
    __IO Ifx_UReg_32Bit ENH6:1;            /**< \brief [22:22] Emergency Stop Enable for Bit 6 in SRH - ENH6 (rw) */
    __IO Ifx_UReg_32Bit ENH7:1;            /**< \brief [23:23] Emergency Stop Enable for Bit 7 in SRH - ENH7 (rw) */
    __IO Ifx_UReg_32Bit ENH8:1;            /**< \brief [24:24] Emergency Stop Enable for Bit 8 in SRH - ENH8 (rw) */
    __IO Ifx_UReg_32Bit ENH9:1;            /**< \brief [25:25] Emergency Stop Enable for Bit 9 in SRH - ENH9 (rw) */
    __IO Ifx_UReg_32Bit ENH10:1;           /**< \brief [26:26] Emergency Stop Enable for Bit 10 in SRH - ENH10 (rw) */
    __IO Ifx_UReg_32Bit ENH11:1;           /**< \brief [27:27] Emergency Stop Enable for Bit 11 in SRH - ENH11 (rw) */
    __IO Ifx_UReg_32Bit ENH12:1;           /**< \brief [28:28] Emergency Stop Enable for Bit 12 in SRH - ENH12 (rw) */
    __IO Ifx_UReg_32Bit ENH13:1;           /**< \brief [29:29] Emergency Stop Enable for Bit 13 in SRH - ENH13 (rw) */
    __IO Ifx_UReg_32Bit ENH14:1;           /**< \brief [30:30] Emergency Stop Enable for Bit 14 in SRH - ENH14 (rw) */
    __IO Ifx_UReg_32Bit ENH15:1;           /**< \brief [31:31] Emergency Stop Enable for Bit 15 in SRH - ENH15 (rw) */
} Ifx_MSC_ESR_Bits;

/** \brief Emergency stop extension register */
typedef struct _Ifx_MSC_ESRE_Bits
{
    __IO Ifx_UReg_32Bit ENL16:1;           /**< \brief [0:0] Emergency Stop Enable for Bit 16 in SRL - ENL16 (rw) */
    __IO Ifx_UReg_32Bit ENL17:1;           /**< \brief [1:1] Emergency Stop Enable for Bit 17 in SRL - ENL17 (rw) */
    __IO Ifx_UReg_32Bit ENL18:1;           /**< \brief [2:2] Emergency Stop Enable for Bit 18 in SRL - ENL18 (rw) */
    __IO Ifx_UReg_32Bit ENL19:1;           /**< \brief [3:3] Emergency Stop Enable for Bit 19 in SRL - ENL19 (rw) */
    __IO Ifx_UReg_32Bit ENL20:1;           /**< \brief [4:4] Emergency Stop Enable for Bit 20 in SRL - ENL20 (rw) */
    __IO Ifx_UReg_32Bit ENL21:1;           /**< \brief [5:5] Emergency Stop Enable for Bit 21 in SRL - ENL21 (rw) */
    __IO Ifx_UReg_32Bit ENL22:1;           /**< \brief [6:6] Emergency Stop Enable for Bit 22 in SRL - ENL22 (rw) */
    __IO Ifx_UReg_32Bit ENL23:1;           /**< \brief [7:7] Emergency Stop Enable for Bit 23 in SRL - ENL23 (rw) */
    __IO Ifx_UReg_32Bit ENL24:1;           /**< \brief [8:8] Emergency Stop Enable for Bit 24 in SRL - ENL24 (rw) */
    __IO Ifx_UReg_32Bit ENL25:1;           /**< \brief [9:9] Emergency Stop Enable for Bit 25 in SRL - ENL25 (rw) */
    __IO Ifx_UReg_32Bit ENL26:1;           /**< \brief [10:10] Emergency Stop Enable for Bit 26 in SRL - ENL26 (rw) */
    __IO Ifx_UReg_32Bit ENL27:1;           /**< \brief [11:11] Emergency Stop Enable for Bit 27 in SRL - ENL27 (rw) */
    __IO Ifx_UReg_32Bit ENL28:1;           /**< \brief [12:12] Emergency Stop Enable for Bit 28 in SRL - ENL28 (rw) */
    __IO Ifx_UReg_32Bit ENL29:1;           /**< \brief [13:13] Emergency Stop Enable for Bit 29 in SRL - ENL29 (rw) */
    __IO Ifx_UReg_32Bit ENL30:1;           /**< \brief [14:14] Emergency Stop Enable for Bit 30 in SRL - ENL30 (rw) */
    __IO Ifx_UReg_32Bit ENL31:1;           /**< \brief [15:15] Emergency Stop Enable for Bit 31 in SRL - ENL31 (rw) */
    __IO Ifx_UReg_32Bit ENH16:1;           /**< \brief [16:16] Emergency Stop Enable for Bit 16 in SRH - ENH16 (rw) */
    __IO Ifx_UReg_32Bit ENH17:1;           /**< \brief [17:17] Emergency Stop Enable for Bit 17 in SRH - ENH17 (rw) */
    __IO Ifx_UReg_32Bit ENH18:1;           /**< \brief [18:18] Emergency Stop Enable for Bit 18 in SRH - ENH18 (rw) */
    __IO Ifx_UReg_32Bit ENH19:1;           /**< \brief [19:19] Emergency Stop Enable for Bit 19 in SRH - ENH19 (rw) */
    __IO Ifx_UReg_32Bit ENH20:1;           /**< \brief [20:20] Emergency Stop Enable for Bit 20 in SRH - ENH20 (rw) */
    __IO Ifx_UReg_32Bit ENH21:1;           /**< \brief [21:21] Emergency Stop Enable for Bit 21 in SRH - ENH21 (rw) */
    __IO Ifx_UReg_32Bit ENH22:1;           /**< \brief [22:22] Emergency Stop Enable for Bit 22 in SRH - ENH22 (rw) */
    __IO Ifx_UReg_32Bit ENH23:1;           /**< \brief [23:23] Emergency Stop Enable for Bit 23 in SRH - ENH23 (rw) */
    __IO Ifx_UReg_32Bit ENH24:1;           /**< \brief [24:24] Emergency Stop Enable for Bit 24 in SRH - ENH24 (rw) */
    __IO Ifx_UReg_32Bit ENH25:1;           /**< \brief [25:25] Emergency Stop Enable for Bit 25 in SRH - ENH25 (rw) */
    __IO Ifx_UReg_32Bit ENH26:1;           /**< \brief [26:26] Emergency Stop Enable for Bit 26 in SRH - ENH26 (rw) */
    __IO Ifx_UReg_32Bit ENH27:1;           /**< \brief [27:27] Emergency Stop Enable for Bit 27 in SRH - ENH27 (rw) */
    __IO Ifx_UReg_32Bit ENH28:1;           /**< \brief [28:28] Emergency Stop Enable for Bit 28 in SRH - ENH28 (rw) */
    __IO Ifx_UReg_32Bit ENH29:1;           /**< \brief [29:29] Emergency Stop Enable for Bit 29 in SRH - ENH29 (rw) */
    __IO Ifx_UReg_32Bit ENH30:1;           /**< \brief [30:30] Emergency Stop Enable for Bit 30 in SRH - ENH30 (rw) */
    __IO Ifx_UReg_32Bit ENH31:1;           /**< \brief [31:31] Emergency Stop Enable for Bit 31 in SRH - ENH31 (rw) */
} Ifx_MSC_ESRE_Bits;

/** \brief Fractional divider register */
typedef struct _Ifx_MSC_FDR_Bits
{
    __IO Ifx_UReg_32Bit STEP:10;           /**< \brief [9:0] Step Value - STEP (rw) */
    __IO Ifx_UReg_32Bit ACS:1;             /**< \brief [10:10] Alternate Clock Source - ACS (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [13:11] \internal Reserved */
    __IO Ifx_UReg_32Bit DM:2;              /**< \brief [15:14] Divider Mode - DM (rw) */
    __I  Ifx_UReg_32Bit RESULT:10;         /**< \brief [25:16] Result Value - RESULT (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [30:26] \internal Reserved */
    __IO Ifx_UReg_32Bit DISCLK:1;          /**< \brief [31:31] Disable Clock - DISCLK (rwh) */
} Ifx_MSC_FDR_Bits;

/** \brief Interrupt control register */
typedef struct _Ifx_MSC_ICR_Bits
{
    __IO Ifx_UReg_32Bit EDIP:2;            /**< \brief [1:0] Data Frame Interrupt Node Pointer - EDIP (rw) */
    __IO Ifx_UReg_32Bit EDIE:2;            /**< \brief [3:2] Data Frame Interrupt Enable - EDIE (rw) */
    __IO Ifx_UReg_32Bit ECIP:2;            /**< \brief [5:4] Command Frame Interrupt Node Pointer - ECIP (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [6:6] \internal Reserved */
    __IO Ifx_UReg_32Bit ECIE:1;            /**< \brief [7:7] Command Frame Interrupt Enable - ECIE (rw) */
    __IO Ifx_UReg_32Bit TFIP:2;            /**< \brief [9:8] Time Frame Interrupt Pointer - TFIP (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [10:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TFIE:1;            /**< \brief [11:11] Time Frame Interrupt Enable - TFIE (rw) */
    __IO Ifx_UReg_32Bit RDIP:2;            /**< \brief [13:12] Receive Data Interrupt Pointer - RDIP (rw) */
    __IO Ifx_UReg_32Bit RDIE:2;            /**< \brief [15:14] Receive Data Interrupt Enable - RDIE (rw) */
    __IO Ifx_UReg_32Bit CSXIP:2;           /**< \brief [17:16] Command Frame Slow Channel X Interrupt Node Pointer - CSXIP (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit CSXIE:1;           /**< \brief [19:19] Command Frame Slow Channel X Interrupt Enable - CSXIE (rw) */
    __IO Ifx_UReg_32Bit CSYIP:2;           /**< \brief [21:20] Command Frame Slow Channel Y Interrupt Node Pointer - CSYIP (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [22:22] \internal Reserved */
    __IO Ifx_UReg_32Bit CSYIE:1;           /**< \brief [23:23] Command Frame Slow Channel Y Interrupt Enable - CSYIE (rw) */
    __IO Ifx_UReg_32Bit TFMIP:2;           /**< \brief [25:24] Time Frame Manchester Code Interrupt Pointer  - TFMIP (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [26:26] \internal Reserved */
    __IO Ifx_UReg_32Bit TFMIE:1;           /**< \brief [27:27] Time Frame Manchester Code Interrupt Enable - TFMIE (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_MSC_ICR_Bits;

/** \brief Module identification register */
typedef struct _Ifx_MSC_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_MSC_ID_Bits;

/** \brief Interrupt set clear register */
typedef struct _Ifx_MSC_ISC_Bits
{
    __O  Ifx_UReg_32Bit CDEDI:1;           /**< \brief [0:0] Clear DEDI Flag - CDEDI (w) */
    __O  Ifx_UReg_32Bit CDECI:1;           /**< \brief [1:1] Clear DECI Flag - CDECI (w) */
    __O  Ifx_UReg_32Bit CDTFI:1;           /**< \brief [2:2] Clear DTFI Flag - CDTFI (w) */
    __O  Ifx_UReg_32Bit CURDI:1;           /**< \brief [3:3] Clear URDI Flag - CURDI (w) */
    __O  Ifx_UReg_32Bit CDP:1;             /**< \brief [4:4] Clear DP Flag - CDP (w) */
    __O  Ifx_UReg_32Bit CCP:1;             /**< \brief [5:5] Clear CP Flag - CCP (w) */
    __O  Ifx_UReg_32Bit CDDIS:1;           /**< \brief [6:6] Clear DSDIS Flag - CDDIS (w) */
    __O  Ifx_UReg_32Bit CCSXI:1;           /**< \brief [7:7] Clear CSXI Flag - CCSXI (w) */
    __O  Ifx_UReg_32Bit CCSYI:1;           /**< \brief [8:8] Clear CSYI Flag - CCSYI (w) */
    __O  Ifx_UReg_32Bit CTFMI:1;           /**< \brief [9:9] Clear TFMIFlag - CTFMI (w) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __O  Ifx_UReg_32Bit SDEDI:1;           /**< \brief [16:16] Set DEDI Flag - SDEDI (w) */
    __O  Ifx_UReg_32Bit SDECI:1;           /**< \brief [17:17] Set DECI Flag - SDECI (w) */
    __O  Ifx_UReg_32Bit SDTFI:1;           /**< \brief [18:18] Set DTFI Flag - SDTFI (w) */
    __O  Ifx_UReg_32Bit SURDI:1;           /**< \brief [19:19] Set URDI Flag - SURDI (w) */
    __O  Ifx_UReg_32Bit SDP:1;             /**< \brief [20:20] Set DP Bit - SDP (w) */
    __O  Ifx_UReg_32Bit SCP:1;             /**< \brief [21:21] Set CP Flag - SCP (w) */
    __O  Ifx_UReg_32Bit SDDIS:1;           /**< \brief [22:22] Set DSDIS Flag - SDDIS (w) */
    __O  Ifx_UReg_32Bit SCSXI:1;           /**< \brief [23:23] Set CSXI Flag - SCSXI (w) */
    __O  Ifx_UReg_32Bit SCSYI:1;           /**< \brief [24:24] Set CSYI Flag - SCSYI (w) */
    __O  Ifx_UReg_32Bit STFMI:1;           /**< \brief [25:25] Set TFMIFlag - STFMI (w) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_MSC_ISC_Bits;

/** \brief Interrupt status register */
typedef struct _Ifx_MSC_ISR_Bits
{
    __I  Ifx_UReg_32Bit DEDI:1;            /**< \brief [0:0] Data Frame Interrupt Flag - DEDI (rh) */
    __I  Ifx_UReg_32Bit DECI:1;            /**< \brief [1:1] Command Frame Interrupt Flag - DECI (rh) */
    __I  Ifx_UReg_32Bit DTFI:1;            /**< \brief [2:2] Time Frame Interrupt Flag - DTFI (rh) */
    __I  Ifx_UReg_32Bit URDI:1;            /**< \brief [3:3] Receive Data Interrupt Flag - URDI (rh) */
    __I  Ifx_UReg_32Bit CSXI:1;            /**< \brief [4:4] Command Frame Slow Channel X Interrupt Flag - CSXI (rh) */
    __I  Ifx_UReg_32Bit CSYI:1;            /**< \brief [5:5] Command Frame Slow Channel Y Interrupt Flag - CSYI (rh) */
    __I  Ifx_UReg_32Bit TFMI:1;            /**< \brief [6:6] Time Frame Manchester Code Interrupt Flag - TFMI (rh) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_MSC_ISR_Bits;

/** \brief Output control register */
typedef struct _Ifx_MSC_OCR_Bits
{
    __IO Ifx_UReg_32Bit CLP:1;             /**< \brief [0:0] FCLP Line Polarity - CLP (rw) */
    __IO Ifx_UReg_32Bit SLP:1;             /**< \brief [1:1] SOP Line Polarity - SLP (rw) */
    __IO Ifx_UReg_32Bit CSLP:1;            /**< \brief [2:2] Chip Selection Lines Polarity - CSLP (rw) */
    __IO Ifx_UReg_32Bit ILP:1;             /**< \brief [3:3] SDI Line Polarity - ILP (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit CLKCTRL:1;         /**< \brief [8:8] Clock Control - CLKCTRL (rw) */
    __IO Ifx_UReg_32Bit CSL:2;             /**< \brief [10:9] Chip Enable Selection for ENL - CSL (rw) */
    __IO Ifx_UReg_32Bit CSH:2;             /**< \brief [12:11] Chip Enable Selection for ENH - CSH (rw) */
    __IO Ifx_UReg_32Bit CSC:2;             /**< \brief [14:13] Chip Enable Selection for ENC - CSC (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit SDISEL:3;          /**< \brief [18:16] Serial Data Input Selection - SDISEL (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_MSC_OCR_Bits;

/** \brief OCDS control and status register */
typedef struct _Ifx_MSC_OCS_Bits
{
    __I  Ifx_UReg_32Bit :24;               /**< \brief [23:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_MSC_OCS_Bits;

/** \brief Output extended control register */
typedef struct _Ifx_MSC_OECR_Bits
{
    __IO Ifx_UReg_32Bit E0R:3;             /**< \brief [2:0] Downstream Enable 1/2 Clock Time Adjustment Assertion (Rising Edge, EN0) - E0R (rw) */
    __IO Ifx_UReg_32Bit E0F:3;             /**< \brief [5:3] Downstream Enable 1/2 Clock Time Adjustment Deassertion (Falling Edge,EN0) - E0F (rw) */
    __IO Ifx_UReg_32Bit E1R:3;             /**< \brief [8:6] Downstream Enable 1/2 Clock Time Adjustment Assertion (Rising Edge, EN1) - E1R (rw) */
    __IO Ifx_UReg_32Bit E1F:3;             /**< \brief [11:9] Downstream Enable 1/2 Clock Time Adjustment Deassertion (Falling Edge,EN1) - E1F (rw) */
    __IO Ifx_UReg_32Bit E2R:3;             /**< \brief [14:12] Downstream Enable 1/2 Clock Time Adjustment Assertion (Rising Edge, EN2) - E2R (rw) */
    __IO Ifx_UReg_32Bit E2F:3;             /**< \brief [17:15] Downstream Enable 1/2 Clock Time Adjustment Deassertion (Falling Edge,EN2) - E2F (rw) */
    __IO Ifx_UReg_32Bit E3R:3;             /**< \brief [20:18] Downstream Enable 1/2 Clock Time Adjustment Assertion (Rising Edge, EN3) - E3R (rw) */
    __IO Ifx_UReg_32Bit E3F:3;             /**< \brief [23:21] Downstream Enable 1/2 Clock Time Adjustment Deassertion (Falling Edge,EN3) - E3F (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_MSC_OECR_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_MSC_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_MSC_PROT_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_MSC_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_MSC_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_MSC_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_MSC_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_MSC_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_MSC_RST_STAT_Bits;

/** \brief Slow channel configuration register */
typedef struct _Ifx_MSC_SCC_Bits
{
    __IO Ifx_UReg_32Bit SC:1;              /**< \brief [0:0] Slow Channel - SC (rw) */
    __IO Ifx_UReg_32Bit MCT:1;             /**< \brief [1:1] Manchester Code Transmission MSC+ - MCT (rw) */
    __IO Ifx_UReg_32Bit SCLX:3;            /**< \brief [4:2] Slow Channel Length for Slave X - SCLX (rw) */
    __IO Ifx_UReg_32Bit SCLY:3;            /**< \brief [7:5] Slow Channel Length for Slave Y - SCLY (rw) */
    __IO Ifx_UReg_32Bit CFLX:6;            /**< \brief [13:8] Command Frame Length for Slave X - CFLX (rw) */
    __IO Ifx_UReg_32Bit CFLY:6;            /**< \brief [19:14] Command Frame Length for Slave Y - CFLY (rw) */
    __IO Ifx_UReg_32Bit PCX:2;             /**< \brief [21:20] Paritiy Control for command frame Slave X - PCX (rw) */
    __IO Ifx_UReg_32Bit PCY:2;             /**< \brief [23:22] Paritiy Control for command frame Slave Y - PCY (rw) */
    __IO Ifx_UReg_32Bit CFSTOPX:2;         /**< \brief [25:24] Command Frame Stop Bits Slave X - CFSTOPX (rw) */
    __IO Ifx_UReg_32Bit CFSTOPY:2;         /**< \brief [27:26] Command Frame Stop Bits Slave Y - CFSTOPY (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_MSC_SCC_Bits;

/** \brief Upstream data register 0 */
typedef struct _Ifx_MSC_UD_Bits
{
    __I  Ifx_UReg_32Bit DATA:8;            /**< \brief [7:0] Received Data - DATA (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit V:1;               /**< \brief [16:16] Valid Bit - V (rh) */
    __I  Ifx_UReg_32Bit P:1;               /**< \brief [17:17] Parity Bit - P (rh) */
    __O  Ifx_UReg_32Bit C:1;               /**< \brief [18:18] Clear Bit - C (w) */
    __I  Ifx_UReg_32Bit LABF:2;            /**< \brief [20:19] Lower Address Bit Field - LABF (rh) */
    __I  Ifx_UReg_32Bit IPF:1;             /**< \brief [21:21] Internal Parity Flag - IPF (rh) */
    __I  Ifx_UReg_32Bit PERR:1;            /**< \brief [22:22] Error bit- PERR (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_MSC_UD_Bits;

/** \brief Upstream control enhanced register */
typedef struct _Ifx_MSC_USCE_Bits
{
    __IO Ifx_UReg_32Bit USTOPRE:4;         /**< \brief [3:0] Upstream Time-out Prescaler - USTOPRE (rw) */
    __IO Ifx_UReg_32Bit USTOVAL:4;         /**< \brief [7:4] Upstream Time-out Value - USTOVAL (rw) */
    __IO Ifx_UReg_32Bit USTOEN:1;          /**< \brief [8:8] Upstream Time-out Interrupt Enable - USTOEN (rw) */
    __I  Ifx_UReg_32Bit USTF:1;            /**< \brief [9:9] Upstream Time-out Flag - USTF (rh) */
    __O  Ifx_UReg_32Bit USTC:1;            /**< \brief [10:10] Upstream Time-out Clear - USTC (w) */
    __O  Ifx_UReg_32Bit USTS:1;            /**< \brief [11:11] Upstream Time-out Set - USTS (w) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [12:12] \internal Reserved */
    __IO Ifx_UReg_32Bit UTASR:1;           /**< \brief [13:13] Upstream Time-out Alternate Service Request - UTASR (rw) */
    __IO Ifx_UReg_32Bit USTOIP:2;          /**< \brief [15:14] Upstream Time-out Interrupt Node Pointer - USTOIP (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_MSC_USCE_Bits;

/** \brief Upstream status register */
typedef struct _Ifx_MSC_USR_Bits
{
    __IO Ifx_UReg_32Bit UFT:1;             /**< \brief [0:0] Upstream Channel Frame Type - UFT (rw) */
    __IO Ifx_UReg_32Bit URR:3;             /**< \brief [3:1] Upstream Channel Receiving Rate - URR (rw) */
    __IO Ifx_UReg_32Bit PCTR:1;            /**< \brief [4:4] Parity Control - PCTR (rw) */
    __IO Ifx_UReg_32Bit SRDC:1;            /**< \brief [5:5] Service Request Delay Control - SRDC (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [15:6] \internal Reserved */
    __I  Ifx_UReg_32Bit UC:5;              /**< \brief [20:16] Upstream Counter - UC (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_MSC_USR_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_msc_Registers_union
 * \{   */
/** \brief Asynchronous block configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ABC_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_ABC;

/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_MSC_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_MSC_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_MSC_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_MSC_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_MSC_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_MSC_ACCEN_WRB_FPI;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_CLC;

/** \brief Downstream command register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DC_Bits B;                     /**< \brief Bitfield access */
} Ifx_MSC_DC;

/** \brief Downstream command extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DCE_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_DCE;

/** \brief Downstream command mirror register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DCM_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_DCM;

/** \brief Downstream command slow channel X register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DCSX_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_DCSX;

/** \brief Downstream command slow channel Y register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DCSY_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_DCSY;

/** \brief Downstream data register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DD_Bits B;                     /**< \brief Bitfield access */
} Ifx_MSC_DD;

/** \brief Downstream data extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DDE_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_DDE;

/** \brief Downstream data mirror register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DDM_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_DDM;

/** \brief Downstream control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSC_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_DSC;

/** \brief Downstream control enhanced register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSCE_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_DSCE;

/** \brief Downstream select data source high register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSDSH_Bits B;                  /**< \brief Bitfield access */
} Ifx_MSC_DSDSH;

/** \brief Downstream select data source high extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSDSHE_Bits B;                 /**< \brief Bitfield access */
} Ifx_MSC_DSDSHE;

/** \brief Downstream select data source low register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSDSL_Bits B;                  /**< \brief Bitfield access */
} Ifx_MSC_DSDSL;

/** \brief Downstream select data source low extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSDSLE_Bits B;                 /**< \brief Bitfield access */
} Ifx_MSC_DSDSLE;

/** \brief Downstream status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSS_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_DSS;

/** \brief Downstream timing extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_DSTE_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_DSTE;

/** \brief Emergency stop register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ESR_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_ESR;

/** \brief Emergency stop extension register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ESRE_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_ESRE;

/** \brief Fractional divider register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_FDR_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_FDR;

/** \brief Interrupt control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ICR_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_ICR;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_MSC_ID;

/** \brief Interrupt set clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ISC_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_ISC;

/** \brief Interrupt status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_ISR_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_ISR;

/** \brief Output control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_OCR_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_OCR;

/** \brief OCDS control and status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_OCS_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_OCS;

/** \brief Output extended control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_OECR_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_OECR;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_PROT;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_MSC_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_MSC_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_MSC_RST_STAT;

/** \brief Slow channel configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_SCC_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_SCC;

/** \brief Upstream data register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_UD_Bits B;                     /**< \brief Bitfield access */
} Ifx_MSC_UD;

/** \brief Upstream control enhanced register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_USCE_Bits B;                   /**< \brief Bitfield access */
} Ifx_MSC_USCE;

/** \brief Upstream status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_MSC_USR_Bits B;                    /**< \brief Bitfield access */
} Ifx_MSC_USR;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Msc_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_MSC_RST
{
       __IO Ifx_MSC_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_MSC_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_MSC_RST_STAT                    STAT;                   /**< \brief 8, Reset status register*/
} Ifx_MSC_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Msc_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_MSC_ACCEN
{
       __IO Ifx_MSC_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_MSC_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_MSC_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_MSC_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_MSC_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_MSC_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_MSC_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Msc_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief MSC object */
typedef volatile struct _Ifx_MSC
{
       __IO Ifx_MSC_CLC                         CLC;                    /**< \brief 0, Clock control register*/
       __IO Ifx_MSC_OCS                         OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_MSC_ID                          ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_MSC_RST                         RST;                    /**< \brief C, Reset status register*/
       __IO Ifx_MSC_PROT                        PROTE;                  /**< \brief 18, PROT register endinit*/
       __IO Ifx_MSC_PROT                        PROTSE;                 /**< \brief 1C, PROT register safe endinit*/
       __IO Ifx_MSC_ACCEN                       ACCEN;                  /**< \brief 20, */
       __IO Ifx_MSC_FDR                         FDR;                    /**< \brief 40, Fractional divider register*/
       __IO Ifx_MSC_USR                         USR;                    /**< \brief 44, Upstream status register*/
       __IO Ifx_MSC_DSC                         DSC;                    /**< \brief 48, Downstream control register*/
       __IO Ifx_MSC_DSS                         DSS;                    /**< \brief 4C, Downstream status register*/
       __IO Ifx_MSC_DD                          DD;                     /**< \brief 50, Downstream data register*/
       __IO Ifx_MSC_DC                          DC;                     /**< \brief 54, Downstream command register*/
       __IO Ifx_MSC_DSDSL                       DSDSL;                  /**< \brief 58, Downstream select data source low register*/
       __IO Ifx_MSC_DSDSH                       DSDSH;                  /**< \brief 5C, Downstream select data source high register*/
       __IO Ifx_MSC_ESR                         ESR;                    /**< \brief 60, Emergency stop register*/
       __I  Ifx_UReg_8Bit                       reserved_64[12];        /**< \brief 64, \internal Reserved */
       __IO Ifx_MSC_UD                          UD[4];                  /**< \brief 70, Upstream data register 0*/
       __IO Ifx_MSC_ICR                         ICR;                    /**< \brief 80, Interrupt control register*/
       __I  Ifx_MSC_ISR                         ISR;                    /**< \brief 84, Interrupt status register*/
       __O  Ifx_MSC_ISC                         ISC;                    /**< \brief 88, Interrupt set clear register*/
       __IO Ifx_MSC_OCR                         OCR;                    /**< \brief 8C, Output control register*/
       __IO Ifx_MSC_OECR                        OECR;                   /**< \brief 90, Output extended control register*/
       __IO Ifx_MSC_SCC                         SCC;                    /**< \brief 94, Slow channel configuration register*/
       __IO Ifx_MSC_DSCE                        DSCE;                   /**< \brief 98, Downstream control enhanced register*/
       __IO Ifx_MSC_USCE                        USCE;                   /**< \brief 9C, Upstream control enhanced register*/
       __IO Ifx_MSC_DSDSLE                      DSDSLE;                 /**< \brief A0, Downstream select data source low extension register*/
       __IO Ifx_MSC_DSDSHE                      DSDSHE;                 /**< \brief A4, Downstream select data source high extension register*/
       __IO Ifx_MSC_ESRE                        ESRE;                   /**< \brief A8, Emergency stop extension register*/
       __IO Ifx_MSC_DSTE                        DSTE;                   /**< \brief AC, Downstream timing extension register*/
       __O  Ifx_MSC_DDM                         DDM;                    /**< \brief B0, Downstream data mirror register*/
       __IO Ifx_MSC_DDE                         DDE;                    /**< \brief B4, Downstream data extension register*/
       __O  Ifx_MSC_DCM                         DCM;                    /**< \brief B8, Downstream command mirror register*/
       __IO Ifx_MSC_DCE                         DCE;                    /**< \brief BC, Downstream command extension register*/
       __IO Ifx_MSC_ABC                         ABC;                    /**< \brief C0, Asynchronous block configuration register*/
       __IO Ifx_MSC_DCSX                        DCSX;                   /**< \brief C4, Downstream command slow channel X register*/
       __IO Ifx_MSC_DCSY                        DCSY;                   /**< \brief C8, Downstream command slow channel Y register*/
       __I  Ifx_UReg_8Bit                       reserved_CC[52];        /**< \brief CC, \internal Reserved */
} Ifx_MSC;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXMSC_REGDEF_H */
