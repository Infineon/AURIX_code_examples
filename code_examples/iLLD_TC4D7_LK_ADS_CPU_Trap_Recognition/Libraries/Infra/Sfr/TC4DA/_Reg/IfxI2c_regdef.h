/**
 * \file IfxI2c_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_I2C/V0.2.2.1.0
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_I2c_Registers I2c Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_I2c_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_I2c_Registers
 * 
 * \defgroup IfxSfr_I2c_Registers_union Register unions
 * \ingroup IfxSfr_I2c_Registers
 * 
 * \defgroup IfxSfr_I2c_Registers_struct Memory map
 * \ingroup IfxSfr_I2c_Registers
 */
#ifndef IFXI2C_REGDEF_H
#define IFXI2C_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_I2c_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_I2C_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_I2C_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_I2C_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_I2C_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_I2C_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_I2C_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_I2C_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_I2C_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_I2C_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_I2C_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_I2C_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_I2C_ACCEN_WRB_FPI_Bits;

/** \brief Address configuration register */
typedef struct _Ifx_I2C_ADDRCFG_Bits
{
    __IO Ifx_UReg_32Bit ADR:10;            /**< \brief [9:0] I2C-bus Device Address - ADR (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TBAM:1;            /**< \brief [16:16] Ten Bit Address Mode - TBAM (rw) */
    __IO Ifx_UReg_32Bit GCE:1;             /**< \brief [17:17] General Call Enable - GCE (rw) */
    __IO Ifx_UReg_32Bit MCE:1;             /**< \brief [18:18] Master Code Enable - MCE (rw) */
    __IO Ifx_UReg_32Bit MNS:1;             /**< \brief [19:19] Master / not Slave - MnS (rw) */
    __IO Ifx_UReg_32Bit SONA:1;            /**< \brief [20:20] Stop on Not-acknowledge - SONA (rw) */
    __IO Ifx_UReg_32Bit SOPE:1;            /**< \brief [21:21] Stop on Packet End - SOPE (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_I2C_ADDRCFG_Bits;

/** \brief Bus status register */
typedef struct _Ifx_I2C_BUSSTAT_Bits
{
    __I  Ifx_UReg_32Bit BS:2;              /**< \brief [1:0] Bus Status - BS (rh) */
    __I  Ifx_UReg_32Bit RNW:1;             /**< \brief [2:2] Read/not Write - RnW (rh) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_I2C_BUSSTAT_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_I2C_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_I2C_CLC_Bits;

/** \brief Clock control 1 register */
typedef struct _Ifx_I2C_CLC1_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __IO Ifx_UReg_32Bit SPEN:1;            /**< \brief [2:2] Module Suspend Enable Bit for OCDS - SPEN (rw) */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] External Request Disable - EDIS (rw) */
    __O  Ifx_UReg_32Bit SBWE:1;            /**< \brief [4:4] Module Suspend Bit Write Enable for OCDS - SBWE (w) */
    __IO Ifx_UReg_32Bit FSOE:1;            /**< \brief [5:5] Fast Switch Off Enable - FSOE (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit RMC:8;             /**< \brief [15:8] Clock Divider for Standard Run Mode - RMC (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_I2C_CLC1_Bits;

/** \brief End data control register */
typedef struct _Ifx_I2C_ENDDCTRL_Bits
{
    __O  Ifx_UReg_32Bit SETRSC:1;          /**< \brief [0:0] Set Restart Condition - SETRSC (w) */
    __O  Ifx_UReg_32Bit SETEND:1;          /**< \brief [1:1] Set End of Transmission - SETEND (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_I2C_ENDDCTRL_Bits;

/** \brief Error interrupt request source clear register */
typedef struct _Ifx_I2C_ERRIRQSC_Bits
{
    __O  Ifx_UReg_32Bit RXF_UFL:1;         /**< \brief [0:0] RX FIFO Underflow - RXF_UFL (w) */
    __O  Ifx_UReg_32Bit RXF_OFL:1;         /**< \brief [1:1] RX FIFO Overflow - RXF_OFL (w) */
    __O  Ifx_UReg_32Bit TXF_UFL:1;         /**< \brief [2:2] TX FIFO Underflow - TXF_UFL (w) */
    __O  Ifx_UReg_32Bit TXF_OFL:1;         /**< \brief [3:3] TX FIFO Overflow - TXF_OFL (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_I2C_ERRIRQSC_Bits;

/** \brief Error interrupt request source mask register */
typedef struct _Ifx_I2C_ERRIRQSM_Bits
{
    __IO Ifx_UReg_32Bit RXF_UFL:1;         /**< \brief [0:0] RX FIFO Underflow - RXF_UFL (rw) */
    __IO Ifx_UReg_32Bit RXF_OFL:1;         /**< \brief [1:1] RX FIFO Overflow - RXF_OFL (rw) */
    __IO Ifx_UReg_32Bit TXF_UFL:1;         /**< \brief [2:2] TX FIFO Underflow - TXF_UFL (rw) */
    __IO Ifx_UReg_32Bit TXF_OFL:1;         /**< \brief [3:3] TX FIFO Overflow - TXF_OFL (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_I2C_ERRIRQSM_Bits;

/** \brief Error interrupt request source status register */
typedef struct _Ifx_I2C_ERRIRQSS_Bits
{
    __I  Ifx_UReg_32Bit RXF_UFL:1;         /**< \brief [0:0] RX FIFO Underflow - RXF_UFL (rh) */
    __I  Ifx_UReg_32Bit RXF_OFL:1;         /**< \brief [1:1] RX FIFO Overflow - RXF_OFL (rh) */
    __I  Ifx_UReg_32Bit TXF_UFL:1;         /**< \brief [2:2] TX FIFO Underflow - TXF_UFL (rh) */
    __I  Ifx_UReg_32Bit TXF_OFL:1;         /**< \brief [3:3] TX FIFO Overflow - TXF_OFL (rh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_I2C_ERRIRQSS_Bits;

/** \brief Fractional divider configuration register */
typedef struct _Ifx_I2C_FDIVCFG_Bits
{
    __IO Ifx_UReg_32Bit DEC:11;            /**< \brief [10:0] Decrement Value of Fractional Divider - DEC (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit INC:8;             /**< \brief [23:16] Increment Value of Fractional Divider - INC (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_I2C_FDIVCFG_Bits;

/** \brief Fractional divider high-speed mode configuration register */
typedef struct _Ifx_I2C_FDIVHIGHCFG_Bits
{
    __IO Ifx_UReg_32Bit DEC:11;            /**< \brief [10:0] Decrement Value of Fractional Divider - DEC (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit INC:8;             /**< \brief [23:16] Increment Value of Fractional Divider - INC (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [30:24] \internal Reserved */
    __IO Ifx_UReg_32Bit RESERVED:1;        /**< \brief [31:31] Reserved (rw) */
} Ifx_I2C_FDIVHIGHCFG_Bits;

/** \brief Filled FIFO stages status register */
typedef struct _Ifx_I2C_FFSSTAT_Bits
{
    __I  Ifx_UReg_32Bit FFS:6;             /**< \brief [5:0] Filled FIFO Stages - FFS (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_I2C_FFSSTAT_Bits;

/** \brief FIFO configuration register */
typedef struct _Ifx_I2C_FIFOCFG_Bits
{
    __IO Ifx_UReg_32Bit RXBS:2;            /**< \brief [1:0] RX Burst Size - RXBS (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __IO Ifx_UReg_32Bit TXBS:2;            /**< \brief [5:4] TX Burst Size - TXBS (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit RXFA:2;            /**< \brief [9:8] RX FIFO Alignment - RXFA (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [11:10] \internal Reserved */
    __IO Ifx_UReg_32Bit TXFA:2;            /**< \brief [13:12] TX FIFO Alignment - TXFA (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit RXFC:1;            /**< \brief [16:16] RX FIFO Flow Control - RXFC (rw) */
    __IO Ifx_UReg_32Bit TXFC:1;            /**< \brief [17:17] TX FIFO Flow Control - TXFC (rw) */
    __IO Ifx_UReg_32Bit CRBC:1;            /**< \brief [18:18] Clear Request Behavior Configuration - CRBC (rw) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_I2C_FIFOCFG_Bits;

/** \brief General purpose control register */
typedef struct _Ifx_I2C_GPCTL_Bits
{
    __IO Ifx_UReg_32Bit PISEL:3;           /**< \brief [2:0] Port Input Select - PISEL (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_I2C_GPCTL_Bits;

/** \brief Interrupt clear register */
typedef struct _Ifx_I2C_ICR_Bits
{
    __O  Ifx_UReg_32Bit LSREQ_INT:1;       /**< \brief [0:0] Last Single Request Interrupt - LSREQ_INT (w) */
    __O  Ifx_UReg_32Bit SREQ_INT:1;        /**< \brief [1:1] Single Request Interrupt - SREQ_INT (w) */
    __O  Ifx_UReg_32Bit LBREQ_INT:1;       /**< \brief [2:2] Last Burst Request Interrupt - LBREQ_INT (w) */
    __O  Ifx_UReg_32Bit BREQ_INT:1;        /**< \brief [3:3] Burst Request Interrupt - BREQ_INT (w) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_I2C_ICR_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_I2C_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUMBER (r) */
} Ifx_I2C_ID_Bits;

/** \brief Module identification register */
typedef struct _Ifx_I2C_ID1_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision Number - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_NUMBER:8;      /**< \brief [15:8] Module Number - MOD_NUMBER (r) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_I2C_ID1_Bits;

/** \brief Interrupt mask control register */
typedef struct _Ifx_I2C_IMSC_Bits
{
    __IO Ifx_UReg_32Bit LSREQ_INT:1;       /**< \brief [0:0] Last Single Request Interrupt - LSREQ_INT (rw) */
    __IO Ifx_UReg_32Bit SREQ_INT:1;        /**< \brief [1:1] Single Request Interrupt - SREQ_INT (rw) */
    __IO Ifx_UReg_32Bit LBREQ_INT:1;       /**< \brief [2:2] Last Burst Request Interrupt - LBREQ_INT (rw) */
    __IO Ifx_UReg_32Bit BREQ_INT:1;        /**< \brief [3:3] Burst Request Interrupt - BREQ_INT (rw) */
    __IO Ifx_UReg_32Bit I2C_ERR_INT:1;     /**< \brief [4:4] I2C Error Interrupt - I2C_ERR_INT (rw) */
    __IO Ifx_UReg_32Bit I2C_P_INT:1;       /**< \brief [5:5] I2C Protocol Interrupt - I2C_P_INT (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_I2C_IMSC_Bits;

/** \brief Interrupt set register */
typedef struct _Ifx_I2C_INTRSET_Bits
{
    __O  Ifx_UReg_32Bit LSREQ_INT:1;       /**< \brief [0:0] Last Single Request Interrupt - LSREQ_INT (w) */
    __O  Ifx_UReg_32Bit SREQ_INT:1;        /**< \brief [1:1] Single Request Interrupt - SREQ_INT (w) */
    __O  Ifx_UReg_32Bit LBREQ_INT:1;       /**< \brief [2:2] Last Burst Request Interrupt - LBREQ_INT (w) */
    __O  Ifx_UReg_32Bit BREQ_INT:1;        /**< \brief [3:3] Burst Request Interrupt - BREQ_INT (w) */
    __O  Ifx_UReg_32Bit I2C_ERR_INT:1;     /**< \brief [4:4] I2C Error Interrupt - I2C_ERR_INT (w) */
    __O  Ifx_UReg_32Bit I2C_P_INT:1;       /**< \brief [5:5] I2C Protocol Interrupt - I2C_P_INT (w) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_I2C_INTRSET_Bits;

/** \brief Masked interrupt status register */
typedef struct _Ifx_I2C_MIS_Bits
{
    __I  Ifx_UReg_32Bit LSREQ_INT:1;       /**< \brief [0:0] Last Single Request Interrupt - LSREQ_INT (rh) */
    __I  Ifx_UReg_32Bit SREQ_INT:1;        /**< \brief [1:1] Single Request Interrupt - SREQ_INT (rh) */
    __I  Ifx_UReg_32Bit LBREQ_INT:1;       /**< \brief [2:2] Last Burst Request Interrupt - LBREQ_INT (rh) */
    __I  Ifx_UReg_32Bit BREQ_INT:1;        /**< \brief [3:3] Burst Request Interrupt - BREQ_INT (rh) */
    __I  Ifx_UReg_32Bit I2C_ERR_INT:1;     /**< \brief [4:4] I2C Error Interrupt - I2C_ERR_INT (rh) */
    __I  Ifx_UReg_32Bit I2C_P_INT:1;       /**< \brief [5:5] I2C Protocol Interrupt - I2C_P_INT (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_I2C_MIS_Bits;

/** \brief Maximum received packet size control register */
typedef struct _Ifx_I2C_MRPSCTRL_Bits
{
    __IO Ifx_UReg_32Bit MRPS:14;           /**< \brief [13:0] Maximum Received Packet Size - MRPS (rwh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_I2C_MRPSCTRL_Bits;

/** \brief Protocol interrupt request source clear register */
typedef struct _Ifx_I2C_PIRQSC_Bits
{
    __O  Ifx_UReg_32Bit AM:1;              /**< \brief [0:0] Address Match - AM (w) */
    __O  Ifx_UReg_32Bit GC:1;              /**< \brief [1:1] General Call - GC (w) */
    __O  Ifx_UReg_32Bit MC:1;              /**< \brief [2:2] Master Code - MC (w) */
    __O  Ifx_UReg_32Bit AL:1;              /**< \brief [3:3] Arbitration Lost - AL (w) */
    __O  Ifx_UReg_32Bit NACK:1;            /**< \brief [4:4] Not-acknowledge Received - NACK (w) */
    __O  Ifx_UReg_32Bit TX_END:1;          /**< \brief [5:5] Transmission End - TX_END (w) */
    __O  Ifx_UReg_32Bit RX:1;              /**< \brief [6:6] Receive Mode - RX (w) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_I2C_PIRQSC_Bits;

/** \brief Protocol interrupt request source mask register */
typedef struct _Ifx_I2C_PIRQSM_Bits
{
    __IO Ifx_UReg_32Bit AM:1;              /**< \brief [0:0] Address Match - AM (rw) */
    __IO Ifx_UReg_32Bit GC:1;              /**< \brief [1:1] General Call - GC (rw) */
    __IO Ifx_UReg_32Bit MC:1;              /**< \brief [2:2] Master Code - MC (rw) */
    __IO Ifx_UReg_32Bit AL:1;              /**< \brief [3:3] Arbitration Lost - AL (rw) */
    __IO Ifx_UReg_32Bit NACK:1;            /**< \brief [4:4] Not-acknowledge Received - NACK (rw) */
    __IO Ifx_UReg_32Bit TX_END:1;          /**< \brief [5:5] Transmission End - TX_END (rw) */
    __IO Ifx_UReg_32Bit RX:1;              /**< \brief [6:6] Receive Mode - RX (rw) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_I2C_PIRQSM_Bits;

/** \brief Protocol interrupt request source status register */
typedef struct _Ifx_I2C_PIRQSS_Bits
{
    __I  Ifx_UReg_32Bit AM:1;              /**< \brief [0:0] Address Match - AM (rh) */
    __I  Ifx_UReg_32Bit GC:1;              /**< \brief [1:1] General Call - GC (rh) */
    __I  Ifx_UReg_32Bit MC:1;              /**< \brief [2:2] Master Code - MC (rh) */
    __I  Ifx_UReg_32Bit AL:1;              /**< \brief [3:3] Arbitration Lost - AL (rh) */
    __I  Ifx_UReg_32Bit NACK:1;            /**< \brief [4:4] Not-acknowledge Received - NACK (rh) */
    __I  Ifx_UReg_32Bit TX_END:1;          /**< \brief [5:5] Transmission End - TX_END (rh) */
    __I  Ifx_UReg_32Bit RX:1;              /**< \brief [6:6] Receive Mode - RX (rh) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_I2C_PIRQSS_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_I2C_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_I2C_PROT_Bits;

/** \brief Raw interrupt status register */
typedef struct _Ifx_I2C_RIS_Bits
{
    __I  Ifx_UReg_32Bit LSREQ_INT:1;       /**< \brief [0:0] Last Single Request Interrupt - LSREQ_INT (rh) */
    __I  Ifx_UReg_32Bit SREQ_INT:1;        /**< \brief [1:1] Single Request Interrupt - SREQ_INT (rh) */
    __I  Ifx_UReg_32Bit LBREQ_INT:1;       /**< \brief [2:2] Last Burst Request Interrupt - LBREQ_INT (rh) */
    __I  Ifx_UReg_32Bit BREQ_INT:1;        /**< \brief [3:3] Burst Request Interrupt - BREQ_INT (rh) */
    __I  Ifx_UReg_32Bit I2C_ERR_INT:1;     /**< \brief [4:4] I2C Error Interrupt - I2C_ERR_INT (rh) */
    __I  Ifx_UReg_32Bit I2C_P_INT:1;       /**< \brief [5:5] I2C Protocol Interrupt - I2C_P_INT (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_I2C_RIS_Bits;

/** \brief Received packet size status register */
typedef struct _Ifx_I2C_RPSSTAT_Bits
{
    __I  Ifx_UReg_32Bit RPS:14;            /**< \brief [13:0] Received Packet Size - RPS (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_I2C_RPSSTAT_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_I2C_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_I2C_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_I2C_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_I2C_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_I2C_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel reset status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for global module reset group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for global module reset group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for global module reset group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for global module reset group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_I2C_RST_STAT_Bits;

/** \brief RUN control register */
typedef struct _Ifx_I2C_RUNCTRL_Bits
{
    __IO Ifx_UReg_32Bit RUN:1;             /**< \brief [0:0] Enable I2C-bus Interface - RUN (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_I2C_RUNCTRL_Bits;

/** \brief Reception data register */
typedef struct _Ifx_I2C_RXD_Bits
{
    __I  Ifx_UReg_32Bit RXD:32;            /**< \brief [31:0] Reception Data - RXD (rh) */
} Ifx_I2C_RXD_Bits;

/** \brief Timing configuration register */
typedef struct _Ifx_I2C_TIMCFG_Bits
{
    __IO Ifx_UReg_32Bit SDA_DEL_HD_DAT:6;    /**< \brief [5:0] SDA Delay Stages for Data Hold Time in Standard and Fast modes - SDA_DEL_HD_DAT (rw) */
    __IO Ifx_UReg_32Bit HS_SDA_DEL_HD_DAT:3;    /**< \brief [8:6] SDA Delay Stages for Data Hold Time in High-speed Mode - HS_SDA_DEL_HD_DAT (rw) */
    __IO Ifx_UReg_32Bit SCL_DEL_HD_STA:3;    /**< \brief [11:9] SCL Delay Stages for Hold Time Start (Restart) Bit - SCL_DEL_HD_STA (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [13:12] \internal Reserved */
    __IO Ifx_UReg_32Bit EN_SCL_LOW_LEN:1;    /**< \brief [14:14] Enable Direct Configuration of SCL Low Period Length in Fast Mode (rw) */
    __IO Ifx_UReg_32Bit FS_SCL_LOW:1;      /**< \brief [15:15] Set Fast Mode SCL Low Period Timing - FS_SCL_LOW (rw) */
    __IO Ifx_UReg_32Bit HS_SDA_DEL:5;      /**< \brief [20:16] SDA Delay Stages for Start/Stop bit in High-speed Mode - HS_SDA_DEL (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit SCL_LOW_LEN:8;     /**< \brief [31:24] SCL Low Length in Fast Mode - SCL_LOW_LEN (rw) */
} Ifx_I2C_TIMCFG_Bits;

/** \brief Transmit packet size control register */
typedef struct _Ifx_I2C_TPSCTRL_Bits
{
    __IO Ifx_UReg_32Bit TPS:14;            /**< \brief [13:0] Transmit Packet Size - TPS (rwh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_I2C_TPSCTRL_Bits;

/** \brief Transmission data register */
typedef struct _Ifx_I2C_TXD_Bits
{
    __O  Ifx_UReg_32Bit TXD:32;            /**< \brief [31:0] Transmission Data - TXD (w) */
} Ifx_I2C_TXD_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_i2c_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_I2C_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_I2C_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ACCEN_RDB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_I2C_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_I2C_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ACCEN_WRB_FPI_Bits B;          /**< \brief Bitfield access */
} Ifx_I2C_ACCEN_WRB_FPI;

/** \brief Address configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ADDRCFG_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_ADDRCFG;

/** \brief Bus status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_BUSSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_BUSSTAT;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_CLC_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_CLC;

/** \brief Clock control 1 register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_CLC1_Bits B;                   /**< \brief Bitfield access */
} Ifx_I2C_CLC1;

/** \brief End data control register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ENDDCTRL_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_ENDDCTRL;

/** \brief Error interrupt request source clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ERRIRQSC_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_ERRIRQSC;

/** \brief Error interrupt request source mask register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ERRIRQSM_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_ERRIRQSM;

/** \brief Error interrupt request source status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ERRIRQSS_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_ERRIRQSS;

/** \brief Fractional divider configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_FDIVCFG_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_FDIVCFG;

/** \brief Fractional divider high-speed mode configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_FDIVHIGHCFG_Bits B;            /**< \brief Bitfield access */
} Ifx_I2C_FDIVHIGHCFG;

/** \brief Filled FIFO stages status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_FFSSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_FFSSTAT;

/** \brief FIFO configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_FIFOCFG_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_FIFOCFG;

/** \brief General purpose control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_GPCTL_Bits B;                  /**< \brief Bitfield access */
} Ifx_I2C_GPCTL;

/** \brief Interrupt clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ICR_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_ICR;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_I2C_ID;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_ID1_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_ID1;

/** \brief Interrupt mask control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_IMSC_Bits B;                   /**< \brief Bitfield access */
} Ifx_I2C_IMSC;

/** \brief Interrupt set register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_INTRSET_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_INTRSET;

/** \brief Masked interrupt status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_MIS_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_MIS;

/** \brief Maximum received packet size control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_MRPSCTRL_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_MRPSCTRL;

/** \brief Protocol interrupt request source clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_PIRQSC_Bits B;                 /**< \brief Bitfield access */
} Ifx_I2C_PIRQSC;

/** \brief Protocol interrupt request source mask register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_PIRQSM_Bits B;                 /**< \brief Bitfield access */
} Ifx_I2C_PIRQSM;

/** \brief Protocol interrupt request source status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_PIRQSS_Bits B;                 /**< \brief Bitfield access */
} Ifx_I2C_PIRQSS;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_I2C_PROT;

/** \brief Raw interrupt status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RIS_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_RIS;

/** \brief Received packet size status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RPSSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_RPSSTAT;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RST_CTRLA_Bits B;              /**< \brief Bitfield access */
} Ifx_I2C_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RST_CTRLB_Bits B;              /**< \brief Bitfield access */
} Ifx_I2C_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RST_STAT_Bits B;               /**< \brief Bitfield access */
} Ifx_I2C_RST_STAT;

/** \brief RUN control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RUNCTRL_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_RUNCTRL;

/** \brief Reception data register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_RXD_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_RXD;

/** \brief Timing configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_TIMCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_I2C_TIMCFG;

/** \brief Transmit packet size control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_TPSCTRL_Bits B;                /**< \brief Bitfield access */
} Ifx_I2C_TPSCTRL;

/** \brief Transmission data register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_I2C_TXD_Bits B;                    /**< \brief Bitfield access */
} Ifx_I2C_TXD;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_I2c_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_I2C_RST
{
       __IO Ifx_I2C_RST_CTRLA                   CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_I2C_RST_CTRLB                   CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_I2C_RST_STAT                    STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_I2C_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_I2c_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_I2C_ACCEN
{
       __IO Ifx_I2C_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_I2C_ACCEN_WRB_FPI               WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_I2C_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_I2C_ACCEN_RDB_FPI               RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_I2C_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_I2C_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_I2C_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_I2c_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief I2C object */
typedef volatile struct _Ifx_I2C
{
       __IO Ifx_I2C_CLC1                        CLC1;                   /**< \brief 0, Clock control 1 register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_I2C_ID1                         ID1;                    /**< \brief 8, Module identification register*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __IO Ifx_I2C_RUNCTRL                     RUNCTRL;                /**< \brief 10, RUN control register*/
       __O  Ifx_I2C_ENDDCTRL                    ENDDCTRL;               /**< \brief 14, End data control register*/
       __IO Ifx_I2C_FDIVCFG                     FDIVCFG;                /**< \brief 18, Fractional divider configuration register*/
       __IO Ifx_I2C_FDIVHIGHCFG                 FDIVHIGHCFG;            /**< \brief 1C, Fractional divider high-speed mode configuration register*/
       __IO Ifx_I2C_ADDRCFG                     ADDRCFG;                /**< \brief 20, Address configuration register*/
       __I  Ifx_I2C_BUSSTAT                     BUSSTAT;                /**< \brief 24, Bus status register*/
       __IO Ifx_I2C_FIFOCFG                     FIFOCFG;                /**< \brief 28, FIFO configuration register*/
       __IO Ifx_I2C_MRPSCTRL                    MRPSCTRL;               /**< \brief 2C, Maximum received packet size control register*/
       __I  Ifx_I2C_RPSSTAT                     RPSSTAT;                /**< \brief 30, Received packet size status register*/
       __IO Ifx_I2C_TPSCTRL                     TPSCTRL;                /**< \brief 34, Transmit packet size control register*/
       __I  Ifx_I2C_FFSSTAT                     FFSSTAT;                /**< \brief 38, Filled FIFO stages status register*/
       __I  Ifx_UReg_8Bit                       reserved_3C[4];         /**< \brief 3C, \internal Reserved */
       __IO Ifx_I2C_TIMCFG                      TIMCFG;                 /**< \brief 40, Timing configuration register*/
       __I  Ifx_UReg_8Bit                       reserved_44[28];        /**< \brief 44, \internal Reserved */
       __IO Ifx_I2C_ERRIRQSM                    ERRIRQSM;               /**< \brief 60, Error interrupt request source mask register*/
       __I  Ifx_I2C_ERRIRQSS                    ERRIRQSS;               /**< \brief 64, Error interrupt request source status register*/
       __O  Ifx_I2C_ERRIRQSC                    ERRIRQSC;               /**< \brief 68, Error interrupt request source clear register*/
       __I  Ifx_UReg_8Bit                       reserved_6C[4];         /**< \brief 6C, \internal Reserved */
       __IO Ifx_I2C_PIRQSM                      PIRQSM;                 /**< \brief 70, Protocol interrupt request source mask register*/
       __I  Ifx_I2C_PIRQSS                      PIRQSS;                 /**< \brief 74, Protocol interrupt request source status register*/
       __O  Ifx_I2C_PIRQSC                      PIRQSC;                 /**< \brief 78, Protocol interrupt request source clear register*/
       __I  Ifx_UReg_8Bit                       reserved_7C[4];         /**< \brief 7C, \internal Reserved */
       __I  Ifx_I2C_RIS                         RIS;                    /**< \brief 80, Raw interrupt status register*/
       __IO Ifx_I2C_IMSC                        IMSC;                   /**< \brief 84, Interrupt mask control register*/
       __I  Ifx_I2C_MIS                         MIS;                    /**< \brief 88, Masked interrupt status register*/
       __O  Ifx_I2C_ICR                         ICR;                    /**< \brief 8C, Interrupt clear register*/
       __O  Ifx_I2C_INTRSET                     INTRSET;                /**< \brief 90, Interrupt set register*/
       __I  Ifx_UReg_8Bit                       reserved_94[32620];     /**< \brief 94, \internal Reserved */
       __O  Ifx_I2C_TXD                         TXD;                    /**< \brief 8000, Transmission data register*/
       __I  Ifx_UReg_8Bit                       reserved_8004[16380];    /**< \brief 8004, \internal Reserved */
       __I  Ifx_I2C_RXD                         RXD;                    /**< \brief C000, Reception data register*/
       __I  Ifx_UReg_8Bit                       reserved_C004[16380];    /**< \brief C004, \internal Reserved */
       __IO Ifx_I2C_CLC                         CLC;                    /**< \brief 10000, Clock Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_10004[4];      /**< \brief 10004, \internal Reserved */
       __I  Ifx_I2C_ID                          ID;                     /**< \brief 10008, Module Identification Register*/
       __IO Ifx_I2C_RST                         RST;                    /**< \brief 1000C, Reset Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_10018[8];      /**< \brief 10018, \internal Reserved */
       __IO Ifx_I2C_PROT                        PROTE;                  /**< \brief 10020, PROT Register Endinit*/
       __IO Ifx_I2C_PROT                        PROTSE;                 /**< \brief 10024, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_10028[24];     /**< \brief 10028, \internal Reserved */
       __IO Ifx_I2C_ACCEN                       ACCEN;                  /**< \brief 10040, */
       __IO Ifx_I2C_GPCTL                       GPCTL;                  /**< \brief 10060, General purpose control register*/
       __I  Ifx_UReg_8Bit                       reserved_10064[65435];    /**< \brief 10064, \internal Reserved */
} Ifx_I2C;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXI2C_REGDEF_H */
