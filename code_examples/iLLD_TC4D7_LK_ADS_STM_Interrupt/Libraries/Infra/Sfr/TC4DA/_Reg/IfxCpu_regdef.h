/**
 * \file IfxCpu_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_CPU/V0.2.1.1.11
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Cpu_Registers Cpu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Cpu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Cpu_Registers
 * 
 * \defgroup IfxSfr_Cpu_Registers_union Register unions
 * \ingroup IfxSfr_Cpu_Registers
 * 
 * \defgroup IfxSfr_Cpu_Registers_struct Memory map
 * \ingroup IfxSfr_Cpu_Registers
 */
#ifndef IFXCPU_REGDEF_H
#define IFXCPU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Cpu_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_CPU_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CPU_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CPU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CPU_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_CPU_ACCEN_RDB_SRI_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_CPU_ACCEN_RGNLA_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:26;         /**< \brief [31:6] Defines bits 31:6 of the lower bound of the access protected region (rw) */
} Ifx_CPU_ACCEN_RGNLA_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_CPU_ACCEN_RGNLA_89_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:23;         /**< \brief [28:6] Defines bits 28:6 of the lower bound of the access protected region (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDRH:2;         /**< \brief [31:30] Defines bits 31:30 of the lower bound of the access protected region (rw) */
} Ifx_CPU_ACCEN_RGNLA_89_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_CPU_ACCEN_RGNUA_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:26;         /**< \brief [31:6] Defines bits 31:6 of the upper bound of the access protected region (rw) */
} Ifx_CPU_ACCEN_RGNUA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_CPU_ACCEN_RGNUA_89_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:23;         /**< \brief [28:6] Defines bits 28:6 of the upper bound of the access protected region (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDRH:2;         /**< \brief [31:30] Defines bits 31:30 of the upper bound of the access protected region (rw) */
} Ifx_CPU_ACCEN_RGNUA_89_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CPU_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CPU_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CPU_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CPU_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_CPU_ACCEN_WRB_SRI_Bits;

/** \brief  */
typedef struct _Ifx_CPU_AREG_Bits
{
    __IO Ifx_Strict_32Bit ADDR:32;         /**< \brief [31:0] Address register - ADDR (rw) */
} Ifx_CPU_AREG_Bits;

/** \brief  */
typedef struct _Ifx_CPU_BHV_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit BHV:31;          /**< \brief [31:1] Base address of hypervisor trap vector table - BHV (rw) */
} Ifx_CPU_BHV_Bits;

/** \brief  */
typedef struct _Ifx_CPU_BIV_Bits
{
    __IO Ifx_Strict_32Bit VSS:1;           /**< \brief [0:0] Vector spacing select - VSS (rw) */
    __IO Ifx_Strict_32Bit BIV:31;          /**< \brief [31:1] Base address of interrupt vector table - BIV (rw) */
} Ifx_CPU_BIV_Bits;

/** \brief CPUx overlay mask register 0 */
typedef struct _Ifx_CPU_BLK_OMASK_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __IO Ifx_Strict_32Bit OMASK:17;        /**< \brief [21:5] Overlay address mask (Low priority) - OMASK (rw) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [31:22] \internal Reserved */
} Ifx_CPU_BLK_OMASK_Bits;

/** \brief CPUx redirected address base register 0 */
typedef struct _Ifx_CPU_BLK_RABR_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __IO Ifx_Strict_32Bit OBASE:19;        /**< \brief [23:5] Overlay block base address (Low priority) - OBASE (rw) */
    __IO Ifx_Strict_32Bit OMEM:4;          /**< \brief [27:24] Overlay memory select - OMEM (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [30:28] \internal Reserved */
    __IO Ifx_Strict_32Bit OVEN:1;          /**< \brief [31:31] Overlay enabled - OVEN (rwh) */
} Ifx_CPU_BLK_RABR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_BOOTCON_Bits
{
    __IO Ifx_Strict_32Bit BHALT:1;         /**< \brief [0:0] Boot halt - BHALT (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_BOOTCON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_BTV_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit BTV:31;          /**< \brief [31:1] Base address of trap vector table - BTV (rw) */
} Ifx_CPU_BTV_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CCNT_Bits
{
    __IO Ifx_Strict_32Bit COUNTVALUE:31;    /**< \brief [30:0] Count value - CountValue (rwh) */
    __IO Ifx_Strict_32Bit SOVF:1;          /**< \brief [31:31] Sticky overflow bit - SOvf (rwh) */
} Ifx_CPU_CCNT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CCON_Bits
{
    __IO Ifx_Strict_32Bit DIV:6;           /**< \brief [5:0] Divider reload value - DIV (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_CPU_CCON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CCTRL_Bits
{
    __IO Ifx_Strict_32Bit CM:1;            /**< \brief [0:0] Counter mode - CM (rw) */
    __IO Ifx_Strict_32Bit CE:1;            /**< \brief [1:1] Count enable - CE (rw) */
    __IO Ifx_Strict_32Bit M1:3;            /**< \brief [4:2] M1CNT configuration - M1 (rw) */
    __IO Ifx_Strict_32Bit M2:3;            /**< \brief [7:5] M2CNT configuration - M2 (rw) */
    __IO Ifx_Strict_32Bit M3:3;            /**< \brief [10:8] M3CNT configuration - M3 (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CPU_CCTRL_Bits;

/** \brief  */
typedef struct _Ifx_CPU_COMPAT_Bits
{
    __I  Ifx_Strict_32Bit :3;              /**< \brief [2:0] \internal Reserved */
    __IO Ifx_Strict_32Bit RM:1;            /**< \brief [3:3] Rounding mode compatibility - RM (rw) */
    __IO Ifx_Strict_32Bit SP:1;            /**< \brief [4:4] CORECON safety protection mode compatibility - SP (rw) */
    __IO Ifx_Strict_32Bit PSPRALIAS:1;     /**< \brief [5:5] PSPR aliasing compatibility - PSPRALIAS (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [7:6] \internal Reserved */
    __IO Ifx_Strict_32Bit ESEN:1;          /**< \brief [8:8] Emulator space compatibility - ESEN (rw) */
    __IO Ifx_Strict_32Bit TAGPRS:1;        /**< \brief [9:9] Capture PRS in DTAG compatibility - TAGPRS (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_CPU_COMPAT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CON_Bits
{
    __I  Ifx_Strict_32Bit TST:1;           /**< \brief [0:0] Trap Status - TST (rh) */
    __O  Ifx_Strict_32Bit TCL:1;           /**< \brief [1:1] Trap clear - TCL (w) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __I  Ifx_Strict_32Bit RM:2;            /**< \brief [9:8] Captured rounding mode - RM (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [17:10] \internal Reserved */
    __IO Ifx_Strict_32Bit FXE:1;           /**< \brief [18:18] FX trap enable - FXE (rw) */
    __IO Ifx_Strict_32Bit FUE:1;           /**< \brief [19:19] FU trap enable - FUE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [20:20] \internal Reserved */
    __IO Ifx_Strict_32Bit FVE:1;           /**< \brief [21:21] FV trap enable - FVE (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [25:22] \internal Reserved */
    __I  Ifx_Strict_32Bit FX:1;            /**< \brief [26:26] Captured FX - FX (rh) */
    __I  Ifx_Strict_32Bit FU:1;            /**< \brief [27:27] Captured FU - FU (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [28:28] \internal Reserved */
    __I  Ifx_Strict_32Bit FV:1;            /**< \brief [29:29] Captured FV - FV (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_CPU_CON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CORECON_Bits
{
    __IO Ifx_Strict_32Bit FCDSF:1;         /**< \brief [0:0] Free context list depleted sticky flag - FCDSF (rwh) */
    __IO Ifx_Strict_32Bit PROTEN:1;        /**< \brief [1:1] Memory protection enable - PROTEN (rw) */
    __IO Ifx_Strict_32Bit TPROTEN:1;       /**< \brief [2:2] Temporal protection enable - TPROTEN (rw) */
    __IO Ifx_Strict_32Bit IS:1;            /**< \brief [3:3] Initial state interrupt - IS (rw) */
    __IO Ifx_Strict_32Bit TS:1;            /**< \brief [4:4] Initial state trap - TS (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [15:5] \internal Reserved */
    __IO Ifx_Strict_32Bit U1_IED:1;        /**< \brief [16:16] User-1 instruction execution disable - U1_IED (rw) */
    __IO Ifx_Strict_32Bit U1_IOS:1;        /**< \brief [17:17] User-1 peripheral access as supervisor - U1_IOS (rw) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_CPU_CORECON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CORE_ID_Bits
{
    __I  Ifx_Strict_32Bit CORE_ID:3;       /**< \brief [2:0] Core identification number - CORE_ID (r) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [7:3] \internal Reserved */
    __I  Ifx_Strict_32Bit VMN:3;           /**< \brief [10:8] Virutal machine number - VMN (rh) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CPU_CORE_ID_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CPR_L_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __IO Ifx_Strict_32Bit LOWBND:27;       /**< \brief [31:5] CPRy lower boundary address - LOWBND (rw) */
} Ifx_CPU_CPR_L_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CPR_U_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __IO Ifx_Strict_32Bit UPPBND:27;       /**< \brief [31:5] CPRy upper boundary address - UPPBND (rw) */
} Ifx_CPU_CPR_U_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CPU_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Revision number - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_32B:8;       /**< \brief [15:8] Module type - MOD_32B (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module identification number - MOD_NUM (r) */
} Ifx_CPU_CPU_ID_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CPXE_Bits
{
    __IO Ifx_Strict_32Bit XE00:1;          /**< \brief [0:0] Execute enable range select - XE00 (rw) */
    __IO Ifx_Strict_32Bit XE01:1;          /**< \brief [1:1] Execute enable range select - XE01 (rw) */
    __IO Ifx_Strict_32Bit XE02:1;          /**< \brief [2:2] Execute enable range select - XE02 (rw) */
    __IO Ifx_Strict_32Bit XE03:1;          /**< \brief [3:3] Execute enable range select - XE03 (rw) */
    __IO Ifx_Strict_32Bit XE04:1;          /**< \brief [4:4] Execute enable range select - XE04 (rw) */
    __IO Ifx_Strict_32Bit XE05:1;          /**< \brief [5:5] Execute enable range select - XE05 (rw) */
    __IO Ifx_Strict_32Bit XE06:1;          /**< \brief [6:6] Execute enable range select - XE06 (rw) */
    __IO Ifx_Strict_32Bit XE07:1;          /**< \brief [7:7] Execute enable range select - XE07 (rw) */
    __IO Ifx_Strict_32Bit XE08:1;          /**< \brief [8:8] Execute enable range select - XE08 (rw) */
    __IO Ifx_Strict_32Bit XE09:1;          /**< \brief [9:9] Execute enable range select - XE09 (rw) */
    __IO Ifx_Strict_32Bit XE10:1;          /**< \brief [10:10] Execute enable range select - XE10 (rw) */
    __IO Ifx_Strict_32Bit XE11:1;          /**< \brief [11:11] Execute enable range select - XE11 (rw) */
    __IO Ifx_Strict_32Bit XE12:1;          /**< \brief [12:12] Execute enable range select - XE12 (rw) */
    __IO Ifx_Strict_32Bit XE13:1;          /**< \brief [13:13] Execute enable range select - XE13 (rw) */
    __IO Ifx_Strict_32Bit XE14:1;          /**< \brief [14:14] Execute enable range select - XE14 (rw) */
    __IO Ifx_Strict_32Bit XE15:1;          /**< \brief [15:15] Execute enable range select - XE15 (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_CPXE_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CR_SW_EX_EVT_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] Event enable - EN (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [2:1] \internal Reserved */
    __IO Ifx_Strict_32Bit BBM:1;           /**< \brief [3:3] Break before make (BBM) or break after make (BAM) selection - BBM (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [5:4] \internal Reserved */
    __IO Ifx_Strict_32Bit CNT:2;           /**< \brief [7:6] Counter - CNT (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_CR_SW_EX_EVT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_CUS_ID_Bits
{
    __I  Ifx_Strict_32Bit CID:3;           /**< \brief [2:0] Customer ID - CID (r) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_CUS_ID_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DATR_Bits
{
    __I  Ifx_Strict_32Bit :3;              /**< \brief [2:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SBE:1;           /**< \brief [3:3] Store bus error - SBE (rwh) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [8:4] \internal Reserved */
    __IO Ifx_Strict_32Bit CWE:1;           /**< \brief [9:9] Cache writeback error - CWE (rwh) */
    __IO Ifx_Strict_32Bit CFE:1;           /**< \brief [10:10] Cache flush error - CFE (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [13:11] \internal Reserved */
    __IO Ifx_Strict_32Bit SOE:1;           /**< \brief [14:14] Store overlay error - SOE (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [15:15] \internal Reserved */
    __I  Ifx_Strict_32Bit E_PRS:3;         /**< \brief [18:16] Captured PRS - E_PRS (rh) */
    __I  Ifx_Strict_32Bit E_PRS_EN:1;      /**< \brief [19:19] Captured PRS_EN - E_PRS_EN (rh) */
    __I  Ifx_Strict_32Bit E_VMN:3;         /**< \brief [22:20] Captured VMN - E_VMN (rh) */
    __I  Ifx_Strict_32Bit E_VMN_EN:1;      /**< \brief [23:23] Captured VMN_EN - E_VMN_EN (rh) */
    __IO Ifx_Strict_32Bit BUS_S:1;         /**< \brief [24:24] Captured alternate identifier selector bit - BUS_S (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CPU_DATR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DBGACT_Bits
{
    __IO Ifx_Strict_32Bit EVTA:3;          /**< \brief [2:0] Event associated - EVTA (rw) */
    __IO Ifx_Strict_32Bit BOD:1;           /**< \brief [3:3] Breakout disable - BOD (rw) */
    __IO Ifx_Strict_32Bit SUSP:1;          /**< \brief [4:4] CDC Suspend-Out Signal State - SUSP (rw) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_CPU_DBGACT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DBGCFG_Bits
{
    __IO Ifx_Strict_32Bit TC:1;            /**< \brief [0:0] Tool control - TC (rw) */
    __O  Ifx_Strict_32Bit TCP:1;           /**< \brief [1:1] Tool contol protection - TCP (w) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [14:2] \internal Reserved */
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [15:15] Debug enable - EN (rw) */
    __IO Ifx_Strict_32Bit VM0:1;           /**< \brief [16:16] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM1:1;           /**< \brief [17:17] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM2:1;           /**< \brief [18:18] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM3:1;           /**< \brief [19:19] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM4:1;           /**< \brief [20:20] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM5:1;           /**< \brief [21:21] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM6:1;           /**< \brief [22:22] Debug enable for Virtual Machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM7:1;           /**< \brief [23:23] Debug enable for Virtual Machine {n} (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_DBGCFG_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DBGSR_Bits
{
    __I  Ifx_Strict_32Bit DE:1;            /**< \brief [0:0] Debug enable - DE (rh) */
    __IO Ifx_Strict_32Bit HALT:2;          /**< \brief [2:1] CPU halt request / status field - HALT (rwh) */
    __I  Ifx_Strict_32Bit SUSIN:1;         /**< \brief [3:3] Suspend-in halt - SUSIN (rh) */
    __IO Ifx_Strict_32Bit SUSOUT:1;        /**< \brief [4:4] Current State of the Core Suspend-Out Signal - SUSOUT (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [6:5] \internal Reserved */
    __IO Ifx_Strict_32Bit PEVT:1;          /**< \brief [7:7] Posted event - PEVT (rwh) */
    __I  Ifx_Strict_32Bit EVTSRC:5;        /**< \brief [12:8] Event source - EVTSRC (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [15:13] \internal Reserved */
    __I  Ifx_Strict_32Bit EVTVMN:3;        /**< \brief [18:16] Event virtual machine number - EVTVMN (rh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_CPU_DBGSR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DBGTCR_Bits
{
    __IO Ifx_Strict_32Bit DTA:1;           /**< \brief [0:0] Debug trap active bit - DTA (rwh) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_DBGTCR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DCON0_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit DCBYP:1;         /**< \brief [1:1] Data cache bypass - DCBYP (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_DCON0_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DCON1_Bits
{
    __IO Ifx_Strict_32Bit DCINV:1;         /**< \brief [0:0] Data cache invalidate - DCINV (rwh) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_DCON1_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DCON2_Bits
{
    __I  Ifx_Strict_32Bit DCACHE_SZE:16;    /**< \brief [15:0] Data cache size - DCACHE_SZE (r) */
    __I  Ifx_Strict_32Bit DSCRATCH_SZE:16;    /**< \brief [31:16] Data scratch size - DSCRATCH_SZE (r) */
} Ifx_CPU_DCON2_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DCX_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __IO Ifx_Strict_32Bit DCXVALUE:26;     /**< \brief [31:6] Debug context save area pointer - DCXValue (rw) */
} Ifx_CPU_DCX_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DEADD_Bits
{
    __I  Ifx_Strict_32Bit ERROR_ADDRESS:32;    /**< \brief [31:0] Error address - ERROR_ADDRESS (rh) */
} Ifx_CPU_DEADD_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DIETR_Bits
{
    __IO Ifx_Strict_32Bit IED:1;           /**< \brief [0:0] Integrity error detected - IED (rwh) */
    __I  Ifx_Strict_32Bit IE_T:1;          /**< \brief [1:1] Integrity error - TAG memory - IE_T (rh) */
    __I  Ifx_Strict_32Bit IE_C:1;          /**< \brief [2:2] Integrity error - cache memory - IE_C (rh) */
    __I  Ifx_Strict_32Bit IE_S:1;          /**< \brief [3:3] Integrity error - scratchpad memory - IE_S (rh) */
    __I  Ifx_Strict_32Bit IE_BI:1;         /**< \brief [4:4] Integrity error - bus interface - IE_BI (rh) */
    __I  Ifx_Strict_32Bit E_INFO:6;        /**< \brief [10:5] Error information - E_INFO (rh) */
    __I  Ifx_Strict_32Bit IE_UNC:1;        /**< \brief [11:11] Integrity error - uncorrectable error detected - IE_UNC (rh) */
    __I  Ifx_Strict_32Bit IE_SP:1;         /**< \brief [12:12] PROT APU protection error detected - IE_SP (rh) */
    __I  Ifx_Strict_32Bit IE_BS:1;         /**< \brief [13:13] Bus slave access indicator - IE_BS (rh) */
    __I  Ifx_Strict_32Bit IE_DLMU:1;       /**< \brief [14:14] Integrity error - DLMU - IE_DLMU (rh) */
    __I  Ifx_Strict_32Bit IE_LPB:1;        /**< \brief [15:15] Integrity error - local NVM bank - IE_LPB (rh) */
    __I  Ifx_Strict_32Bit IE_MTMV:1;       /**< \brief [16:16] Memory test mode violation detected - IE_MTMV (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [19:17] \internal Reserved */
    __I  Ifx_Strict_32Bit E_PRS:3;         /**< \brief [22:20] Captured PRS - E_PRS (rh) */
    __I  Ifx_Strict_32Bit E_PRS_EN:1;      /**< \brief [23:23] Captured PRS_EN - E_PRS_EN (rh) */
    __I  Ifx_Strict_32Bit E_VMN:3;         /**< \brief [26:24] Captured VMN - E_VMN (rh) */
    __I  Ifx_Strict_32Bit E_VMN_EN:1;      /**< \brief [27:27] Captured VMN_EN - E_VMN_EN (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CPU_DIETR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DMS_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit DMSVALUE:31;     /**< \brief [31:1] Debug monitor start address - DMSValue (rw) */
} Ifx_CPU_DMS_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPIEAR_Bits
{
    __I  Ifx_Strict_32Bit TA:32;           /**< \brief [31:0] Transaction address - TA (rh) */
} Ifx_CPU_DPIEAR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPRE_Bits
{
    __IO Ifx_Strict_32Bit RE00:1;          /**< \brief [0:0] Read enable range select - RE00 (rw) */
    __IO Ifx_Strict_32Bit RE01:1;          /**< \brief [1:1] Read enable range select - RE01 (rw) */
    __IO Ifx_Strict_32Bit RE02:1;          /**< \brief [2:2] Read enable range select - RE02 (rw) */
    __IO Ifx_Strict_32Bit RE03:1;          /**< \brief [3:3] Read enable range select - RE03 (rw) */
    __IO Ifx_Strict_32Bit RE04:1;          /**< \brief [4:4] Read enable range select - RE04 (rw) */
    __IO Ifx_Strict_32Bit RE05:1;          /**< \brief [5:5] Read enable range select - RE05 (rw) */
    __IO Ifx_Strict_32Bit RE06:1;          /**< \brief [6:6] Read enable range select - RE06 (rw) */
    __IO Ifx_Strict_32Bit RE07:1;          /**< \brief [7:7] Read enable range select - RE07 (rw) */
    __IO Ifx_Strict_32Bit RE08:1;          /**< \brief [8:8] Read enable range select - RE08 (rw) */
    __IO Ifx_Strict_32Bit RE09:1;          /**< \brief [9:9] Read enable range select - RE09 (rw) */
    __IO Ifx_Strict_32Bit RE10:1;          /**< \brief [10:10] Read enable range select - RE10 (rw) */
    __IO Ifx_Strict_32Bit RE11:1;          /**< \brief [11:11] Read enable range select - RE11 (rw) */
    __IO Ifx_Strict_32Bit RE12:1;          /**< \brief [12:12] Read enable range select - RE12 (rw) */
    __IO Ifx_Strict_32Bit RE13:1;          /**< \brief [13:13] Read enable range select - RE13 (rw) */
    __IO Ifx_Strict_32Bit RE14:1;          /**< \brief [14:14] Read enable range select - RE14 (rw) */
    __IO Ifx_Strict_32Bit RE15:1;          /**< \brief [15:15] Read enable range select - RE15 (rw) */
    __IO Ifx_Strict_32Bit RE16:1;          /**< \brief [16:16] Read enable range select - RE16 (rw) */
    __IO Ifx_Strict_32Bit RE17:1;          /**< \brief [17:17] Read enable range select - RE17 (rw) */
    __IO Ifx_Strict_32Bit RE18:1;          /**< \brief [18:18] Read enable range select - RE18 (rw) */
    __IO Ifx_Strict_32Bit RE19:1;          /**< \brief [19:19] Read enable range select - RE19 (rw) */
    __IO Ifx_Strict_32Bit RE20:1;          /**< \brief [20:20] Read enable range select - RE20 (rw) */
    __IO Ifx_Strict_32Bit RE21:1;          /**< \brief [21:21] Read enable range select - RE21 (rw) */
    __IO Ifx_Strict_32Bit RE22:1;          /**< \brief [22:22] Read enable range select - RE22 (rw) */
    __IO Ifx_Strict_32Bit RE23:1;          /**< \brief [23:23] Read enable range select - RE23 (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_DPRE_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPR_L_Bits
{
    __I  Ifx_Strict_32Bit :3;              /**< \brief [2:0] \internal Reserved */
    __IO Ifx_Strict_32Bit LOWBND:29;       /**< \brief [31:3] DPRy lower boundary address - LOWBND (rw) */
} Ifx_CPU_DPR_L_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPR_U_Bits
{
    __I  Ifx_Strict_32Bit :3;              /**< \brief [2:0] \internal Reserved */
    __IO Ifx_Strict_32Bit UPPBND:29;       /**< \brief [31:3] DPRy upper boundary address - UPPBND (rw) */
} Ifx_CPU_DPR_U_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DPWE_Bits
{
    __IO Ifx_Strict_32Bit WE00:1;          /**< \brief [0:0] Write enable range select - WE00 (rw) */
    __IO Ifx_Strict_32Bit WE01:1;          /**< \brief [1:1] Write enable range select - WE01 (rw) */
    __IO Ifx_Strict_32Bit WE02:1;          /**< \brief [2:2] Write enable range select - WE02 (rw) */
    __IO Ifx_Strict_32Bit WE03:1;          /**< \brief [3:3] Write enable range select - WE03 (rw) */
    __IO Ifx_Strict_32Bit WE04:1;          /**< \brief [4:4] Write enable range select - WE04 (rw) */
    __IO Ifx_Strict_32Bit WE05:1;          /**< \brief [5:5] Write enable range select - WE05 (rw) */
    __IO Ifx_Strict_32Bit WE06:1;          /**< \brief [6:6] Write enable range select - WE06 (rw) */
    __IO Ifx_Strict_32Bit WE07:1;          /**< \brief [7:7] Write enable range select - WE07 (rw) */
    __IO Ifx_Strict_32Bit WE08:1;          /**< \brief [8:8] Write enable range select - WE08 (rw) */
    __IO Ifx_Strict_32Bit WE09:1;          /**< \brief [9:9] Write enable range select - WE09 (rw) */
    __IO Ifx_Strict_32Bit WE10:1;          /**< \brief [10:10] Write enable range select - WE10 (rw) */
    __IO Ifx_Strict_32Bit WE11:1;          /**< \brief [11:11] Write enable range select - WE11 (rw) */
    __IO Ifx_Strict_32Bit WE12:1;          /**< \brief [12:12] Write enable range select - WE12 (rw) */
    __IO Ifx_Strict_32Bit WE13:1;          /**< \brief [13:13] Write enable range select - WE13 (rw) */
    __IO Ifx_Strict_32Bit WE14:1;          /**< \brief [14:14] Write enable range select - WE14 (rw) */
    __IO Ifx_Strict_32Bit WE15:1;          /**< \brief [15:15] Write enable range select - WE15 (rw) */
    __IO Ifx_Strict_32Bit WE16:1;          /**< \brief [16:16] Write enable range select - WE16 (rw) */
    __IO Ifx_Strict_32Bit WE17:1;          /**< \brief [17:17] Write enable range select - WE17 (rw) */
    __IO Ifx_Strict_32Bit WE18:1;          /**< \brief [18:18] Write enable range select - WE18 (rw) */
    __IO Ifx_Strict_32Bit WE19:1;          /**< \brief [19:19] Write enable range select - WE19 (rw) */
    __IO Ifx_Strict_32Bit WE20:1;          /**< \brief [20:20] Write enable range select - WE20 (rw) */
    __IO Ifx_Strict_32Bit WE21:1;          /**< \brief [21:21] Write enable range select - WE21 (rw) */
    __IO Ifx_Strict_32Bit WE22:1;          /**< \brief [22:22] Write enable range select - WE22 (rw) */
    __IO Ifx_Strict_32Bit WE23:1;          /**< \brief [23:23] Write enable range select - WE23 (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_DPWE_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DREG_Bits
{
    __IO Ifx_Strict_32Bit DATA:32;         /**< \brief [31:0] Data register - DATA (rw) */
} Ifx_CPU_DREG_Bits;

/** \brief  */
typedef struct _Ifx_CPU_DSTR_Bits
{
    __IO Ifx_Strict_32Bit SRE:1;           /**< \brief [0:0] Scratch range error - SRE (rwh) */
    __IO Ifx_Strict_32Bit GAE:1;           /**< \brief [1:1] Global address error - GAE (rwh) */
    __IO Ifx_Strict_32Bit LBE:1;           /**< \brief [2:2] Load bus error - LBE (rwh) */
    __IO Ifx_Strict_32Bit DRE:1;           /**< \brief [3:3] Local DLMU range error - DRE (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [5:4] \internal Reserved */
    __IO Ifx_Strict_32Bit CRE:1;           /**< \brief [6:6] Cache refill error - CRE (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [7:7] \internal Reserved */
    __IO Ifx_Strict_32Bit L2_MPE:1;        /**< \brief [8:8] Level 2 memory protection error - L2_MPE (rwh) */
    __IO Ifx_Strict_32Bit L2_CSA:1;        /**< \brief [9:9] Level 2 CSA memory protection error - L2_CSA (rwh) */
    __IO Ifx_Strict_32Bit L2_ASYNC:1;      /**< \brief [10:10] Level 2 async CSA protection error - L2_ASYNC (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [13:11] \internal Reserved */
    __IO Ifx_Strict_32Bit DTME:1;          /**< \brief [14:14] DTAG MSIST error - DTME (rwh) */
    __IO Ifx_Strict_32Bit LOE:1;           /**< \brief [15:15] Load overlay error - LOE (rwh) */
    __IO Ifx_Strict_32Bit SDE:1;           /**< \brief [16:16] Segment difference error - SDE (rwh) */
    __IO Ifx_Strict_32Bit SCE:1;           /**< \brief [17:17] Segment crossing error - SCE (rwh) */
    __IO Ifx_Strict_32Bit CAC:1;           /**< \brief [18:18] CSFR access error - CAC (rwh) */
    __IO Ifx_Strict_32Bit MPE:1;           /**< \brief [19:19] Memory protection error - MPE (rwh) */
    __IO Ifx_Strict_32Bit CLE:1;           /**< \brief [20:20] Context location error - CLE (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [23:21] \internal Reserved */
    __IO Ifx_Strict_32Bit ALN:1;           /**< \brief [24:24] Alignment error - ALN (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CPU_DSTR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_FCX_Bits
{
    __IO Ifx_Strict_32Bit FCXO:16;         /**< \brief [15:0] FCX offset address field - FCXO (rwh) */
    __IO Ifx_Strict_32Bit FCXS:4;          /**< \brief [19:16] FCX segment address field - FCXS (rwh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_FCX_Bits;

/** \brief  */
typedef struct _Ifx_CPU_FPUPC_Bits
{
    __I  Ifx_Strict_32Bit PC:32;           /**< \brief [31:0] Captured program counter - PC (rh) */
} Ifx_CPU_FPUPC_Bits;

/** \brief  */
typedef struct _Ifx_CPU_ICNT_Bits
{
    __IO Ifx_Strict_32Bit COUNTVALUE:31;    /**< \brief [30:0] Count value - CountValue (rwh) */
    __IO Ifx_Strict_32Bit SOVF:1;          /**< \brief [31:31] Sticky overflow bit - SOvf (rwh) */
} Ifx_CPU_ICNT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_ICR_Bits
{
    __IO Ifx_Strict_32Bit CCPN:8;          /**< \brief [7:0] Current CPU priority number - CCPN (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [14:8] \internal Reserved */
    __IO Ifx_Strict_32Bit IE:1;            /**< \brief [15:15] Global interrupt enable bit - IE (rwh) */
    __I  Ifx_Strict_32Bit PIPN:8;          /**< \brief [23:16] Pending interrupt priority number - PIPN (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_ICR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_ISP_Bits
{
    __IO Ifx_Strict_32Bit ISP:32;          /**< \brief [31:0] Interrupt stack pointer - ISP (rw) */
} Ifx_CPU_ISP_Bits;

/** \brief CPUx reset register 0 */
typedef struct _Ifx_CPU_KRST0_Bits
{
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [0:0] Kernel reset - RST (rwh) */
    __I  Ifx_Strict_32Bit RSTSTAT:2;       /**< \brief [2:1] Kernel reset status - RSTSTAT (rh) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_KRST0_Bits;

/** \brief CPUx reset register 1 */
typedef struct _Ifx_CPU_KRST1_Bits
{
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [0:0] Kernel reset - RST (rwh) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_KRST1_Bits;

/** \brief CPUx reset clear register */
typedef struct _Ifx_CPU_KRSTCLR_Bits
{
    __O  Ifx_Strict_32Bit CLR:1;           /**< \brief [0:0] Kernel reset status clear - CLR (w) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_KRSTCLR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_LCLCON_Bits
{
    __I  Ifx_Strict_32Bit LS:1;            /**< \brief [0:0] Lockstep mode status - LS (rh) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [14:1] \internal Reserved */
    __IO Ifx_Strict_32Bit LSEN:1;          /**< \brief [15:15] Lockstep enable - LSEN (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_LCLCON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_LCLTEST_Bits
{
    __O  Ifx_Strict_32Bit LCLT:1;          /**< \brief [0:0] LCL Lockstep test - LCLT (w) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_CPU_LCLTEST_Bits;

/** \brief  */
typedef struct _Ifx_CPU_LCX_Bits
{
    __IO Ifx_Strict_32Bit LCXO:16;         /**< \brief [15:0] LCX offset field - LCXO (rw) */
    __IO Ifx_Strict_32Bit LCXS:4;          /**< \brief [19:16] LCX segment address - LCXS (rw) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_LCX_Bits;

/** \brief  */
typedef struct _Ifx_CPU_M1CNT_Bits
{
    __IO Ifx_Strict_32Bit COUNTVALUE:31;    /**< \brief [30:0] Count balue - CountValue (rwh) */
    __IO Ifx_Strict_32Bit SOVF:1;          /**< \brief [31:31] Sticky overflow bit - SOvf (rwh) */
} Ifx_CPU_M1CNT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_M2CNT_Bits
{
    __IO Ifx_Strict_32Bit COUNTVALUE:31;    /**< \brief [30:0] Count value - CountValue (rwh) */
    __IO Ifx_Strict_32Bit SOVF:1;          /**< \brief [31:31] Sticky overflow bit - SOvf (rwh) */
} Ifx_CPU_M2CNT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_M3CNT_Bits
{
    __IO Ifx_Strict_32Bit COUNTVALUE:31;    /**< \brief [30:0] Count value - CountValue (rwh) */
    __IO Ifx_Strict_32Bit SOVF:1;          /**< \brief [31:31] Sticky overflow bit - SOvf (rwh) */
} Ifx_CPU_M3CNT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_OPC_Bits
{
    __I  Ifx_Strict_32Bit OPC:8;           /**< \brief [7:0] Captured opcode - OPC (rh) */
    __I  Ifx_Strict_32Bit FMT:1;           /**< \brief [8:8] Captured instruction format - FMT (rh) */
    __I  Ifx_Strict_32Bit DP:1;            /**< \brief [9:9] Captured instruction format - FMT (rh) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [15:10] \internal Reserved */
    __I  Ifx_Strict_32Bit DREG:4;          /**< \brief [19:16] Captured destination register - DREG (rh) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_OPC_Bits;

/** \brief  */
typedef struct _Ifx_CPU_OSEL_Bits
{
    __IO Ifx_Strict_32Bit SHOVEN00:1;      /**< \brief [0:0] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN01:1;      /**< \brief [1:1] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN02:1;      /**< \brief [2:2] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN03:1;      /**< \brief [3:3] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN04:1;      /**< \brief [4:4] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN05:1;      /**< \brief [5:5] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN06:1;      /**< \brief [6:6] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN07:1;      /**< \brief [7:7] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN08:1;      /**< \brief [8:8] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN09:1;      /**< \brief [9:9] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN10:1;      /**< \brief [10:10] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN11:1;      /**< \brief [11:11] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN12:1;      /**< \brief [12:12] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN13:1;      /**< \brief [13:13] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN14:1;      /**< \brief [14:14] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN15:1;      /**< \brief [15:15] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN16:1;      /**< \brief [16:16] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN17:1;      /**< \brief [17:17] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN18:1;      /**< \brief [18:18] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN19:1;      /**< \brief [19:19] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN20:1;      /**< \brief [20:20] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN21:1;      /**< \brief [21:21] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN22:1;      /**< \brief [22:22] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN23:1;      /**< \brief [23:23] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN24:1;      /**< \brief [24:24] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN25:1;      /**< \brief [25:25] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN26:1;      /**< \brief [26:26] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN27:1;      /**< \brief [27:27] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN28:1;      /**< \brief [28:28] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN29:1;      /**< \brief [29:29] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN30:1;      /**< \brief [30:30] Shadow overlay enable - SHOVEN i (rw) */
    __IO Ifx_Strict_32Bit SHOVEN31:1;      /**< \brief [31:31] Shadow overlay enable - SHOVEN i (rw) */
} Ifx_CPU_OSEL_Bits;

/** \brief  */
typedef struct _Ifx_CPU_OTAR_Bits
{
    __I  Ifx_Strict_32Bit :5;              /**< \brief [4:0] \internal Reserved */
    __IO Ifx_Strict_32Bit TBASE:23;        /**< \brief [27:5] Target base - TBASE (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CPU_OTAR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PC_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit PC:31;           /**< \brief [31:1] Program counter - PC (rwh) */
} Ifx_CPU_PC_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PCON0_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit PCBYP:1;         /**< \brief [1:1] Program cache bypass - PCBYP (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_PCON0_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PCON1_Bits
{
    __IO Ifx_Strict_32Bit PCINV:1;         /**< \brief [0:0] Program cache invalidate - PCINV (rwh) */
    __IO Ifx_Strict_32Bit PBINV:1;         /**< \brief [1:1] Program buffer invalidate - PBINV (rwh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_PCON1_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PCON2_Bits
{
    __I  Ifx_Strict_32Bit PCACHE_SZE:16;    /**< \brief [15:0] Program cache size - PCACHE_SZE (r) */
    __I  Ifx_Strict_32Bit PSCRATCH_SZE:16;    /**< \brief [31:16] Program scratch size - PSCRATCH_SZE (r) */
} Ifx_CPU_PCON2_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PCXI_Bits
{
    __IO Ifx_Strict_32Bit PCXO:16;         /**< \brief [15:0] Previous context pointer offset field - PCXO (rwh) */
    __IO Ifx_Strict_32Bit PCXS:4;          /**< \brief [19:16] Previous context pointer segment address - PCXS (rwh) */
    __IO Ifx_Strict_32Bit UL:1;            /**< \brief [20:20] Upper or lower context tag - UL (rwh) */
    __IO Ifx_Strict_32Bit PIE:1;           /**< \brief [21:21] Previous interrupt enable - PIE (rwh) */
    __IO Ifx_Strict_32Bit PCPN:8;          /**< \brief [29:22] Previous CPU priority number - PCPN (rwh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_CPU_PCXI_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PIETR_Bits
{
    __IO Ifx_Strict_32Bit IED:1;           /**< \brief [0:0] Integrity error detected - IED (rwh) */
    __I  Ifx_Strict_32Bit IE_T:1;          /**< \brief [1:1] Integrity error - TAG memory - IE_T (rh) */
    __I  Ifx_Strict_32Bit IE_C:1;          /**< \brief [2:2] Integrity error - cache memory - IE_C (rh) */
    __I  Ifx_Strict_32Bit IE_S:1;          /**< \brief [3:3] Integrity error - scratchpad memory - IE_S (rh) */
    __I  Ifx_Strict_32Bit IE_BI:1;         /**< \brief [4:4] Integrity error - bus interface - IE_BI (rh) */
    __I  Ifx_Strict_32Bit E_INFO:6;        /**< \brief [10:5] Error information - E_INFO (rh) */
    __I  Ifx_Strict_32Bit IE_UNC:1;        /**< \brief [11:11] Integrity error - uncorrectable error detected - IE_UNC (rh) */
    __I  Ifx_Strict_32Bit IE_SP:1;         /**< \brief [12:12] PROT APU protection error detected - IE_SP (rh) */
    __I  Ifx_Strict_32Bit IE_BS:1;         /**< \brief [13:13] Bus slave access indicator - IE_BS (rh) */
    __I  Ifx_Strict_32Bit IE_ADDR:1;       /**< \brief [14:14] Address phase error detected at SRI slave interface - IE_ADDR (rh) */
    __I  Ifx_Strict_32Bit IE_LPB:1;        /**< \brief [15:15] Integrity error - local NVM bank - IE_LPB (rh) */
    __I  Ifx_Strict_32Bit IE_MTMV:1;       /**< \brief [16:16] Memory test mode violation detected - IE_MTMV (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [19:17] \internal Reserved */
    __I  Ifx_Strict_32Bit E_PRS:3;         /**< \brief [22:20] Captured PRS - E_PRS (rh) */
    __I  Ifx_Strict_32Bit E_PRS_EN:1;      /**< \brief [23:23] Captured PRS_EN - E_PRS_EN (rh) */
    __I  Ifx_Strict_32Bit E_VMN:3;         /**< \brief [26:24] Captured VMN - E_VMN (rh) */
    __I  Ifx_Strict_32Bit E_VMN_EN:1;      /**< \brief [27:27] Captured VMN_EN - E_VMN_EN (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_CPU_PIETR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PMA0_Bits
{
    __IO Ifx_Strict_32Bit DC0:1;           /**< \brief [0:0] Data access cacheability for segment-0 (rw) */
    __IO Ifx_Strict_32Bit DC1:1;           /**< \brief [1:1] Data access cacheability for segment-1 (rw) */
    __IO Ifx_Strict_32Bit DC2:1;           /**< \brief [2:2] Data access cacheability for segment-2 (rw) */
    __IO Ifx_Strict_32Bit DC3:1;           /**< \brief [3:3] Data access cacheability for segment-3 (rw) */
    __IO Ifx_Strict_32Bit DC4:1;           /**< \brief [4:4] Data access cacheability for segment-4 (rw) */
    __IO Ifx_Strict_32Bit DC5:1;           /**< \brief [5:5] Data access cacheability for segment-5 (rw) */
    __IO Ifx_Strict_32Bit DC6:1;           /**< \brief [6:6] Data access cacheability for segment-6 (rw) */
    __IO Ifx_Strict_32Bit DC7:1;           /**< \brief [7:7] Data access cacheability for segment-7 (rw) */
    __IO Ifx_Strict_32Bit DC8:1;           /**< \brief [8:8] Data access cacheability for segment-8 (rw) */
    __IO Ifx_Strict_32Bit DC9:1;           /**< \brief [9:9] Data access cacheability for segment-9 (rw) */
    __I  Ifx_Strict_32Bit DC10:1;          /**< \brief [10:10] Data access cacheability for segment-10 (r) */
    __IO Ifx_Strict_32Bit DC11:1;          /**< \brief [11:11] Data access cacheability for segment-11 (rw) */
    __IO Ifx_Strict_32Bit DC12:1;          /**< \brief [12:12] Data access cacheability for segment-12 (rw) */
    __I  Ifx_Strict_32Bit DC13:1;          /**< \brief [13:13] Data access cacheability for segment-13 (r) */
    __I  Ifx_Strict_32Bit DC14:1;          /**< \brief [14:14] Data access cacheability for segment-14 (r) */
    __I  Ifx_Strict_32Bit DC15:1;          /**< \brief [15:15] Data access cacheability for segment-15 (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_PMA0_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PMA1_Bits
{
    __IO Ifx_Strict_32Bit CC0:1;           /**< \brief [0:0] Code access cacheability for segment-0 (rw) */
    __IO Ifx_Strict_32Bit CC1:1;           /**< \brief [1:1] Code access cacheability for segment-1 (rw) */
    __IO Ifx_Strict_32Bit CC2:1;           /**< \brief [2:2] Code access cacheability for segment-2 (rw) */
    __IO Ifx_Strict_32Bit CC3:1;           /**< \brief [3:3] Code access cacheability for segment-3 (rw) */
    __IO Ifx_Strict_32Bit CC4:1;           /**< \brief [4:4] Code access cacheability for segment-4 (rw) */
    __IO Ifx_Strict_32Bit CC5:1;           /**< \brief [5:5] Code access cacheability for segment-5 (rw) */
    __IO Ifx_Strict_32Bit CC6:1;           /**< \brief [6:6] Code access cacheability for segment-6 (rw) */
    __IO Ifx_Strict_32Bit CC7:1;           /**< \brief [7:7] Code access cacheability for segment-7 (rw) */
    __IO Ifx_Strict_32Bit CC8:1;           /**< \brief [8:8] Code access cacheability for segment-8 (rw) */
    __IO Ifx_Strict_32Bit CC9:1;           /**< \brief [9:9] Code access cacheability for segment-9 (rw) */
    __I  Ifx_Strict_32Bit CC10:1;          /**< \brief [10:10] Code access cacheability for segment-10 (r) */
    __IO Ifx_Strict_32Bit CC11:1;          /**< \brief [11:11] Code access cacheability for segment-11 (rw) */
    __I  Ifx_Strict_32Bit CC12:1;          /**< \brief [12:12] Code access cacheability for segment-12 (r) */
    __IO Ifx_Strict_32Bit CC13:1;          /**< \brief [13:13] Code access cacheability for segment-13 (rw) */
    __I  Ifx_Strict_32Bit CC14:1;          /**< \brief [14:14] Code access cacheability for segment-14 (r) */
    __I  Ifx_Strict_32Bit CC15:1;          /**< \brief [15:15] Code access cacheability for segment-15 (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_PMA1_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PMA2_Bits
{
    __I  Ifx_Strict_32Bit PSI:16;          /**< \brief [15:0] Peripheral space identifier segments F to 0 - PSI (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_CPU_PMA2_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PPRS_Bits
{
    __IO Ifx_Strict_32Bit PPRS:3;          /**< \brief [2:0] Previous PRS - PPRS (rwh) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_PPRS_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_CPU_PROT_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_CPU_PROT_Bits;

/** \brief CPUx PROTSTM Register Safe Endinit */
typedef struct _Ifx_CPU_PROTSTMSE_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit SEL:3;           /**< \brief [10:8] Range selection (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [15:11] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_CPU_PROTSTMSE_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_CPU_PROT_SEL16_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __IO Ifx_Strict_32Bit SEL:4;           /**< \brief [11:8] Range selection (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_CPU_PROT_SEL16_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PSTR_Bits
{
    __IO Ifx_Strict_32Bit FRE:1;           /**< \brief [0:0] Fetch range error - FRE (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit FBE:1;           /**< \brief [2:2] Fetch bus error - FBE (rwh) */
    __I  Ifx_Strict_32Bit :9;              /**< \brief [11:3] \internal Reserved */
    __IO Ifx_Strict_32Bit FPE:1;           /**< \brief [12:12] Fetch peripheral error - FPE (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [13:13] \internal Reserved */
    __IO Ifx_Strict_32Bit FME:1;           /**< \brief [14:14] Fetch MSIST error - FME (rwh) */
    __I  Ifx_Strict_32Bit :17;             /**< \brief [31:15] \internal Reserved */
} Ifx_CPU_PSTR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_PSW_Bits
{
    __IO Ifx_Strict_32Bit CDC:7;           /**< \brief [6:0] Call depth counter - CDC (rwh) */
    __IO Ifx_Strict_32Bit CDE:1;           /**< \brief [7:7] Call depth count enable - CDE (rwh) */
    __IO Ifx_Strict_32Bit GW:1;            /**< \brief [8:8] Global address register write permission - GW (rwh) */
    __IO Ifx_Strict_32Bit IS:1;            /**< \brief [9:9] Interrupt Stack Control - IS (rwh) */
    __IO Ifx_Strict_32Bit IO:2;            /**< \brief [11:10] Access privilege level control (I/O privilege) - IO (rwh) */
    __IO Ifx_Strict_32Bit PRS:2;           /**< \brief [13:12] Protection register set - PRS (rwh) */
    __IO Ifx_Strict_32Bit S:1;             /**< \brief [14:14] Alternate task identifier selector - S (rwh) */
    __IO Ifx_Strict_32Bit PRS2:1;          /**< \brief [15:15] Protection register set MSB - PRS2 (rwh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [23:16] \internal Reserved */
    __IO Ifx_Strict_32Bit USB:8;           /**< \brief [31:24] User status bits - USB (rw) */
} Ifx_CPU_PSW_Bits;

/** \brief PRS access enable register */
typedef struct _Ifx_CPU_RO_ACCEN_PRS_Bits
{
    __I  Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_RO_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_CPU_RO_ACCEN_RDA_Bits
{
    __I  Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rh) */
} Ifx_CPU_RO_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_CPU_RO_ACCEN_RDB_SRI_Bits
{
    __I  Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rh) */
} Ifx_CPU_RO_ACCEN_RDB_SRI_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_CPU_RO_ACCEN_RGNLA_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:26;         /**< \brief [31:6] Defines bits 31:6 of the lower bound of the access protected region (rh) */
} Ifx_CPU_RO_ACCEN_RGNLA_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_CPU_RO_ACCEN_RGNLA_89_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:23;         /**< \brief [28:6] Defines bits 28:6 of the lower bound of the access protected region (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDRH:2;         /**< \brief [31:30] Defines bits 31:30 of the lower bound of the access protected region (rh) */
} Ifx_CPU_RO_ACCEN_RGNLA_89_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_CPU_RO_ACCEN_RGNUA_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:26;         /**< \brief [31:6] Defines bits 31:6 of the upper bound of the access protected region (rh) */
} Ifx_CPU_RO_ACCEN_RGNUA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_CPU_RO_ACCEN_RGNUA_89_Bits
{
    __I  Ifx_Strict_32Bit :6;              /**< \brief [5:0] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDR:23;         /**< \brief [28:6] Defines bits 28:6 of the upper bound of the access protected region (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __I  Ifx_Strict_32Bit ADDRH:2;         /**< \brief [31:30] Defines bits 31:30 of the upper bound of the access protected region (rh) */
} Ifx_CPU_RO_ACCEN_RGNUA_89_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_CPU_RO_ACCEN_VM_Bits
{
    __I  Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __I  Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_RO_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_CPU_RO_ACCEN_WRA_Bits
{
    __I  Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rh) */
} Ifx_CPU_RO_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_CPU_RO_ACCEN_WRB_SRI_Bits
{
    __I  Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rh) */
    __I  Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rh) */
} Ifx_CPU_RO_ACCEN_WRB_SRI_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SEGEN_Bits
{
    __IO Ifx_Strict_32Bit ADFLIP:8;        /**< \brief [7:0] Address ECC bit flip - ADFLIP (rw) */
    __IO Ifx_Strict_32Bit ADTYPE:2;        /**< \brief [9:8] Type of error - ADTYPE (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [30:10] \internal Reserved */
    __IO Ifx_Strict_32Bit AE:1;            /**< \brief [31:31] Activate error enable - AE (rwh) */
} Ifx_CPU_SEGEN_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SMACON_Bits
{
    __I  Ifx_Strict_32Bit :24;             /**< \brief [23:0] \internal Reserved */
    __IO Ifx_Strict_32Bit IODT:1;          /**< \brief [24:24] In-order data transactions - IODT (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_CPU_SMACON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SRC1_L_Bits
{
    __I  Ifx_Strict_32Bit SRC1_L:32;       /**< \brief [31:0] Captured SRC1 operand - SRC1_L (rh) */
} Ifx_CPU_SRC1_L_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SRC1_U_Bits
{
    __I  Ifx_Strict_32Bit SRC1_U:32;       /**< \brief [31:0] Captured SRC1 operand - SRC1_U (rh) */
} Ifx_CPU_SRC1_U_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SRC2_L_Bits
{
    __I  Ifx_Strict_32Bit SRC2_L:32;       /**< \brief [31:0] Captured SRC2 operand - SRC2_L (rh) */
} Ifx_CPU_SRC2_L_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SRC2_U_Bits
{
    __I  Ifx_Strict_32Bit SRC2_U:32;       /**< \brief [31:0] Captured SRC2 operand - SRC2_U (rh) */
} Ifx_CPU_SRC2_U_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SRC3_L_Bits
{
    __I  Ifx_Strict_32Bit SRC3_L:32;       /**< \brief [31:0] Captured SRC3 operand - SRC3_L (rh) */
} Ifx_CPU_SRC3_L_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SRC3_U_Bits
{
    __I  Ifx_Strict_32Bit SRC3_U:32;       /**< \brief [31:0] Captured SRC3 operand - SRC3_U (rh) */
} Ifx_CPU_SRC3_U_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_ABS_Bits
{
    __IO Ifx_Strict_64Bit ABSVAL:64;       /**< \brief [63:0] System timer bits [63:0] - ABSVAL (rwh) */
} Ifx_CPU_STM_ABS_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_CLC_Bits
{
    __IO Ifx_Strict_32Bit DISR:1;          /**< \brief [0:0] Module disable request bit - DISR (rw) */
    __I  Ifx_Strict_32Bit DISS:1;          /**< \brief [1:1] Module disable status bit - DISS (rh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_STM_CLC_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_CMCON_Bits
{
    __IO Ifx_Strict_32Bit MSIZE0:5;        /**< \brief [4:0] Compare register size for CMP0 - MSIZE0 (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit MSTART0:5;       /**< \brief [12:8] Start bit location for CMP0 - MSTART0 (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [14:13] \internal Reserved */
    __IO Ifx_Strict_32Bit RELCOMP0:1;      /**< \brief [15:15] Relative timer comparison - RELCOMP0 (rw) */
    __IO Ifx_Strict_32Bit MSIZE1:5;        /**< \brief [20:16] Compare register size for CMP1 - MSIZE1 (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [23:21] \internal Reserved */
    __IO Ifx_Strict_32Bit MSTART1:5;       /**< \brief [28:24] Start bit location for CMP1 - MSTART1 (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [30:29] \internal Reserved */
    __IO Ifx_Strict_32Bit RELCOMP1:1;      /**< \brief [31:31] Relative timer comparison - RELCOMP1 (rw) */
} Ifx_CPU_STM_CMCON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_CMP_Bits
{
    __IO Ifx_Strict_32Bit CMPVAL:32;       /**< \brief [31:0] Compare value of compare register {cmp} - CMPVAL (rw) */
} Ifx_CPU_STM_CMP_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_ICR_Bits
{
    __IO Ifx_Strict_32Bit CMP0EN:1;        /**< \brief [0:0] Compare register CMP0 interrupt enable control - CMP0EN (rw) */
    __IO Ifx_Strict_32Bit CMP0OS:1;        /**< \brief [1:1] Compare register CMP0 interrupt output selection - CMP0OS (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit CMP1EN:1;        /**< \brief [4:4] Compare register CMP1 interrupt enable control - CMP1EN (rw) */
    __IO Ifx_Strict_32Bit CMP1OS:1;        /**< \brief [5:5] Compare register CMP1 interrupt output selection - CMP1OS (rw) */
    __I  Ifx_Strict_32Bit :26;             /**< \brief [31:6] \internal Reserved */
} Ifx_CPU_STM_ICR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_ISCR_Bits
{
    __O  Ifx_Strict_32Bit CMP0IRR:1;       /**< \brief [0:0] Reset compare register CMP0 interrupt flag - CMP0IRR (w) */
    __O  Ifx_Strict_32Bit CMP0IRS:1;       /**< \brief [1:1] Set compare register CMP0 interrupt flag - CMP0IRS (w) */
    __O  Ifx_Strict_32Bit CMP1IRR:1;       /**< \brief [2:2] Reset compare register CMP1 interrupt flag - CMP1IRR (w) */
    __O  Ifx_Strict_32Bit CMP1IRS:1;       /**< \brief [3:3] Set compare register CMP1 interrupt flag - CMP1IRS (w) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CPU_STM_ISCR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_ISR_Bits
{
    __I  Ifx_Strict_32Bit CMP0IR:1;        /**< \brief [0:0] Compare register CMP0 interrupt request flag - CMP0IR (rh) */
    __I  Ifx_Strict_32Bit CMP1IR:1;        /**< \brief [1:1] Compare register CMP1 interrupt request flag - CMP1IR (rh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_STM_ISR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_OCS_Bits
{
    __I  Ifx_Strict_32Bit :24;             /**< \brief [23:0] \internal Reserved */
    __IO Ifx_Strict_32Bit SUS:4;           /**< \brief [27:24] OCDS suspend control - SUS (rw) */
    __O  Ifx_Strict_32Bit SUS_P:1;         /**< \brief [28:28] SUS write protection - SUS_P (w) */
    __I  Ifx_Strict_32Bit SUSSTA:1;        /**< \brief [29:29] Suspend state - SUSSTA (rh) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [31:30] \internal Reserved */
} Ifx_CPU_STM_OCS_Bits;

/** \brief  */
typedef struct _Ifx_CPU_STM_REL_Bits
{
    __IO Ifx_Strict_64Bit REL:64;          /**< \brief [63:0] System timer bits [63:0] - REL (rwh) */
} Ifx_CPU_STM_REL_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SWID_Bits
{
    __I  Ifx_Strict_32Bit PRS:3;           /**< \brief [2:0] Protection register set - PRS (rh) */
    __I  Ifx_Strict_32Bit VMN:3;           /**< \brief [5:3] Virutal machine number - VMN (rh) */
    __I  Ifx_Strict_32Bit CORE_ID:3;       /**< \brief [8:6] Core identification number - CORE_ID (r) */
    __I  Ifx_Strict_32Bit :23;             /**< \brief [31:9] \internal Reserved */
} Ifx_CPU_SWID_Bits;

/** \brief  */
typedef struct _Ifx_CPU_SYNCCON_Bits
{
    __I  Ifx_Strict_32Bit TST:1;           /**< \brief [0:0] Trap status - TST (rh) */
    __O  Ifx_Strict_32Bit TCL:1;           /**< \brief [1:1] Trap clear - TCL (w) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [7:2] \internal Reserved */
    __I  Ifx_Strict_32Bit RM:2;            /**< \brief [9:8] Captured rounding mode - RM (rh) */
    __I  Ifx_Strict_32Bit :10;             /**< \brief [19:10] \internal Reserved */
    __IO Ifx_Strict_32Bit FZE:1;           /**< \brief [20:20] FZ trap enable - FZE (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [21:21] \internal Reserved */
    __IO Ifx_Strict_32Bit FIE:1;           /**< \brief [22:22] FI trap enable - FIE (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [27:23] \internal Reserved */
    __I  Ifx_Strict_32Bit FZ:1;            /**< \brief [28:28] Captured FZ - FZ (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [29:29] \internal Reserved */
    __I  Ifx_Strict_32Bit FI:1;            /**< \brief [30:30] Captured FI - FI (rh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [31:31] \internal Reserved */
} Ifx_CPU_SYNCCON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TCCON_Bits
{
    __I  Ifx_Strict_32Bit SP_FPU:1;        /**< \brief [0:0] Single precision FPU hardware support - SP_FPU (r) */
    __I  Ifx_Strict_32Bit DP_FPU:1;        /**< \brief [1:1] Double precision FPU hardware support - DP_FPU (r) */
    __I  Ifx_Strict_32Bit OVC:1;           /**< \brief [2:2] Overlay hardware support (r) */
    __I  Ifx_Strict_32Bit VIRT:1;          /**< \brief [3:3] Virtualization hardware support - VIRT (rh) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_CPU_TCCON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TPS_CON_Bits
{
    __I  Ifx_Strict_32Bit TEXP0:1;         /**< \brief [0:0] Timer n expired flag - TEXPn (rh) */
    __I  Ifx_Strict_32Bit TEXP1:1;         /**< \brief [1:1] Timer n expired flag - TEXPn (rh) */
    __I  Ifx_Strict_32Bit TEXP2:1;         /**< \brief [2:2] Timer n expired flag - TEXPn (rh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [15:3] \internal Reserved */
    __I  Ifx_Strict_32Bit TTRAP:1;         /**< \brief [16:16] Temporal protection trap - TTRAP (rh) */
    __I  Ifx_Strict_32Bit TPEND:1;         /**< \brief [17:17] TAE pending flag - TPEND (rh) */
    __I  Ifx_Strict_32Bit :14;             /**< \brief [31:18] \internal Reserved */
} Ifx_CPU_TPS_CON_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TPS_TIMER_Bits
{
    __IO Ifx_Strict_32Bit TIMER:32;        /**< \brief [31:0] Temporal protection timer - Timer (rwh) */
} Ifx_CPU_TPS_TIMER_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TRADR_Bits
{
    __IO Ifx_Strict_32Bit ADDR:32;         /**< \brief [31:0] Comparison address - ADDR (rw) */
} Ifx_CPU_TRADR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TRCCFG_Bits
{
    __IO Ifx_Strict_32Bit TC:1;            /**< \brief [0:0] Tool control - TC (rw) */
    __O  Ifx_Strict_32Bit TCP:1;           /**< \brief [1:1] Tool contol protection - TCP (w) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [14:2] \internal Reserved */
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [15:15] Trace enable - EN (rw) */
    __IO Ifx_Strict_32Bit VM0:1;           /**< \brief [16:16] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM1:1;           /**< \brief [17:17] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM2:1;           /**< \brief [18:18] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM3:1;           /**< \brief [19:19] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM4:1;           /**< \brief [20:20] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM5:1;           /**< \brief [21:21] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM6:1;           /**< \brief [22:22] Trace enable for virtual machine {n} (rw) */
    __IO Ifx_Strict_32Bit VM7:1;           /**< \brief [23:23] Trace enable for virtual machine {n} (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_TRCCFG_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TRCFILT_Bits
{
    __IO Ifx_Strict_32Bit TC:1;            /**< \brief [0:0] Tool control - TC (rw) */
    __O  Ifx_Strict_32Bit TCP:1;           /**< \brief [1:1] Tool contol protection - TCP (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit SLF:2;           /**< \brief [5:4] Store/Load filter for relative addressing ST/LD instructions - SLF (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [6:6] \internal Reserved */
    __IO Ifx_Strict_32Bit AA:1;            /**< \brief [7:7] Filter for absolute addressing ST/LD instructions - AA (rw) */
    __IO Ifx_Strict_32Bit CSA:1;           /**< \brief [8:8] Filter for context save area - CSA (rw) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __IO Ifx_Strict_32Bit A0:1;            /**< \brief [16:16] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A1:1;            /**< \brief [17:17] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A2:1;            /**< \brief [18:18] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A3:1;            /**< \brief [19:19] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A4:1;            /**< \brief [20:20] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A5:1;            /**< \brief [21:21] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A6:1;            /**< \brief [22:22] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A7:1;            /**< \brief [23:23] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A8:1;            /**< \brief [24:24] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A9:1;            /**< \brief [25:25] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A10:1;           /**< \brief [26:26] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A11:1;           /**< \brief [27:27] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A12:1;           /**< \brief [28:28] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A13:1;           /**< \brief [29:29] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A14:1;           /**< \brief [30:30] SLF trace filter for CPU address register A{n} (rw) */
    __IO Ifx_Strict_32Bit A15:1;           /**< \brief [31:31] SLF trace filter for CPU address register A{n} (rw) */
} Ifx_CPU_TRCFILT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TRCLIM_Bits
{
    __IO Ifx_Strict_32Bit TC:1;            /**< \brief [0:0] Tool control - TC (rw) */
    __O  Ifx_Strict_32Bit TCP:1;           /**< \brief [1:1] Tool contol protection - TCP (w) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [3:2] \internal Reserved */
    __IO Ifx_Strict_32Bit STALL:4;         /**< \brief [7:4] Number of CPU write back stall cycles - STALL (rw) */
    __IO Ifx_Strict_32Bit DEPTH:3;         /**< \brief [10:8] Depth of the simulated FIFO - DEPTH (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CPU_TRCLIM_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TREVT_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] Trigger enable - EN (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [2:1] \internal Reserved */
    __IO Ifx_Strict_32Bit BBM:1;           /**< \brief [3:3] Break before make (BBM) or break after make (BAM) selection - BBM (rw) */
    __I  Ifx_Strict_32Bit :2;              /**< \brief [5:4] \internal Reserved */
    __IO Ifx_Strict_32Bit CNT:2;           /**< \brief [7:6] Counter - CNT (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [11:8] \internal Reserved */
    __IO Ifx_Strict_32Bit TYP:1;           /**< \brief [12:12] Input selection - TYP (rw) */
    __IO Ifx_Strict_32Bit RNG:1;           /**< \brief [13:13] Compare type - RNG (rw) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [26:14] \internal Reserved */
    __IO Ifx_Strict_32Bit AST:1;           /**< \brief [27:27] Address store - AST (rw) */
    __IO Ifx_Strict_32Bit ALD:1;           /**< \brief [28:28] Address load - ALD (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [31:29] \internal Reserved */
} Ifx_CPU_TREVT_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TRIG_ACC_Bits
{
    __I  Ifx_Strict_32Bit T0:1;            /**< \brief [0:0] Trigger-0 - T0 (rh) */
    __I  Ifx_Strict_32Bit T1:1;            /**< \brief [1:1] Trigger-1 - T1 (rh) */
    __I  Ifx_Strict_32Bit T2:1;            /**< \brief [2:2] Trigger-2 - T2 (rh) */
    __I  Ifx_Strict_32Bit T3:1;            /**< \brief [3:3] Trigger-3 - T3 (rh) */
    __I  Ifx_Strict_32Bit T4:1;            /**< \brief [4:4] Trigger-4 - T4 (rh) */
    __I  Ifx_Strict_32Bit T5:1;            /**< \brief [5:5] Trigger-5 - T5 (rh) */
    __I  Ifx_Strict_32Bit T6:1;            /**< \brief [6:6] Trigger-6 - T6 (rh) */
    __I  Ifx_Strict_32Bit T7:1;            /**< \brief [7:7] Trigger-7 - T7 (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_TRIG_ACC_Bits;

/** \brief  */
typedef struct _Ifx_CPU_TS16P_TC_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit TGS:2;           /**< \brief [1:0] Trigger set for OTGB0/1 (rw) */
    __IO Ifx_Strict_32Bit TGB:1;           /**< \brief [2:2] OTGB0/1 bus select (rw) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [15:3] \internal Reserved */
    __IO Ifx_Strict_32Bit VM0:3;           /**< \brief [18:16] Virtual machine definition (rw) */
    __IO Ifx_Strict_32Bit VMEN0:1;         /**< \brief [19:19] Enable for virtual machine definition (rw) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_CPU_TS16P_TC_CTRL0_Bits;

/** \brief  */
typedef struct _Ifx_CPU_VCON0_Bits
{
    __IO Ifx_Strict_32Bit EN:1;            /**< \brief [0:0] Virtualization Enable - EN (rw) */
    __IO Ifx_Strict_32Bit NMI:1;           /**< \brief [1:1] NMI handling - NMI (rw) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [31:2] \internal Reserved */
} Ifx_CPU_VCON0_Bits;

/** \brief  */
typedef struct _Ifx_CPU_VCON1_Bits
{
    __I  Ifx_Strict_32Bit CVMN:3;          /**< \brief [2:0] Currently running virtual machine number - CVMN (rh) */
    __I  Ifx_Strict_32Bit :29;             /**< \brief [31:3] \internal Reserved */
} Ifx_CPU_VCON1_Bits;

/** \brief  */
typedef struct _Ifx_CPU_VCON2_Bits
{
    __IO Ifx_Strict_32Bit VMN:3;           /**< \brief [2:0] VMN (rw) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [7:3] \internal Reserved */
    __IO Ifx_Strict_32Bit L2_PRS:3;        /**< \brief [10:8] Level 2 MPU PRS - L2_PRS (rw) */
    __I  Ifx_Strict_32Bit :21;             /**< \brief [31:11] \internal Reserved */
} Ifx_CPU_VCON2_Bits;

/** \brief  */
typedef struct _Ifx_CPU_VMICR_Bits
{
    __IO Ifx_Strict_32Bit CCPN:8;          /**< \brief [7:0] Virtual machine n current priority number - CCPN (rwh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [14:8] \internal Reserved */
    __IO Ifx_Strict_32Bit IE:1;            /**< \brief [15:15] VM interrupt enable bit - IE (rwh) */
    __I  Ifx_Strict_32Bit PIPN:8;          /**< \brief [23:16] Pending interrupt priority number - PIPN (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_CPU_VMICR_Bits;

/** \brief  */
typedef struct _Ifx_CPU_VMPETHRESH_Bits
{
    __IO Ifx_Strict_32Bit PE_THRESH:8;     /**< \brief [7:0] Pre-emption threshold - PE_THRESH (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_CPU_VMPETHRESH_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_cpu_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_RDB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_RDB_SRI;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_RGNLA_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_RGNLA;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_RGNLA_89_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_RGNLA_89;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_RGNUA_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_RGNUA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_RGNUA_89_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_RGNUA_89;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ACCEN_WRB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_CPU_ACCEN_WRB_SRI;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_AREG_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_AREG;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BHV_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_BHV;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BIV_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_BIV;

/** \brief CPUx overlay mask register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BLK_OMASK_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_BLK_OMASK;

/** \brief CPUx redirected address base register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BLK_RABR_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_BLK_RABR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BOOTCON_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_BOOTCON;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_BTV_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_BTV;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CCNT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_CCNT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CCON_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_CCON;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CCTRL_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_CCTRL;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_COMPAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_COMPAT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CON_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_CON;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CORECON_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_CORECON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CORE_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_CORE_ID;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPR_L_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_CPR_L;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPR_U_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_CPR_U;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPU_ID_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_CPU_ID;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CPXE_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_CPXE;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CR_SW_EX_EVT_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_CR_SW_EX_EVT;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_CUS_ID_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_CUS_ID;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DATR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_DATR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DBGACT_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_DBGACT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DBGCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_DBGCFG;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DBGSR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DBGSR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DBGTCR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_DBGTCR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCON0_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DCON0;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCON1_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DCON1;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCON2_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DCON2;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DCX_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_DCX;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DEADD_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DEADD;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DIETR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DIETR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DMS_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_DMS;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPIEAR_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_DPIEAR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPRE_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_DPRE;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPR_L_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DPR_L;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPR_U_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_DPR_U;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DPWE_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_DPWE;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DREG_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_DREG;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_DSTR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_DSTR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FCX_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_FCX;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_FPUPC_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_FPUPC;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ICNT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_ICNT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ICR_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_ICR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_ISP_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_ISP;

/** \brief CPUx reset register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_KRST0_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_KRST0;

/** \brief CPUx reset register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_KRST1_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_KRST1;

/** \brief CPUx reset clear register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_KRSTCLR_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_KRSTCLR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_LCLCON_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_LCLCON;

/** \brief    */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_LCLTEST_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_LCLTEST;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_LCX_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_LCX;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_M1CNT_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_M1CNT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_M2CNT_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_M2CNT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_M3CNT_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_M3CNT;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_OPC_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_OPC;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_OSEL_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_OSEL;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_OTAR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_OTAR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PC_Bits B;                     /**< \brief Bitfield access */
} Ifx_CPU_PC;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCON0_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_PCON0;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCON1_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_PCON1;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCON2_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_PCON2;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PCXI_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PCXI;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PIETR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_PIETR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PMA0_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PMA0;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PMA1_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PMA1;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PMA2_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PMA2;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PPRS_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PPRS;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PROT;

/** \brief CPUx PROTSTM Register Safe Endinit   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PROTSTMSE_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_PROTSTMSE;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PROT_SEL16_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_PROT_SEL16;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PSTR_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_PSTR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_PSW_Bits B;                    /**< \brief Bitfield access */
} Ifx_CPU_PSW;

/** \brief PRS access enable register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_PRS_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_RDA_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_RDB_SRI_Bits B;       /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_RDB_SRI;

/** \brief Region lower address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_RGNLA_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_RGNLA;

/** \brief Region lower address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_RGNLA_89_Bits B;      /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_RGNLA_89;

/** \brief Region upper address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_RGNUA_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_RGNUA;

/** \brief Region upper address register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_RGNUA_89_Bits B;      /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_RGNUA_89;

/** \brief VM access enable register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_VM_Bits B;            /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_WRA_Bits B;           /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_RO_ACCEN_WRB_SRI_Bits B;       /**< \brief Bitfield access */
} Ifx_CPU_RO_ACCEN_WRB_SRI;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SEGEN_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_SEGEN;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SMACON_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SMACON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SRC1_L_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SRC1_L;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SRC1_U_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SRC1_U;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SRC2_L_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SRC2_L;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SRC2_U_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SRC2_U;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SRC3_L_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SRC3_L;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SRC3_U_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_SRC3_U;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_64Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_64Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_ABS_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_ABS;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_CLC_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_CLC;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_CMCON_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_STM_CMCON;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_CMP_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_CMP;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_ICR_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_ICR;

/** \brief    */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_ISCR_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_STM_ISCR;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_ISR_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_ISR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_OCS_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_OCS;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_64Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_64Bit I;                 /**< \brief Signed access */
    Ifx_CPU_STM_REL_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_STM_REL;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SWID_Bits B;                   /**< \brief Bitfield access */
} Ifx_CPU_SWID;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_SYNCCON_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_SYNCCON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TCCON_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_TCCON;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_CON_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_TPS_CON;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TPS_TIMER_Bits B;              /**< \brief Bitfield access */
} Ifx_CPU_TPS_TIMER;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TRADR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_TRADR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TRCCFG_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_TRCCFG;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TRCFILT_Bits B;                /**< \brief Bitfield access */
} Ifx_CPU_TRCFILT;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TRCLIM_Bits B;                 /**< \brief Bitfield access */
} Ifx_CPU_TRCLIM;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TREVT_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_TREVT;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TRIG_ACC_Bits B;               /**< \brief Bitfield access */
} Ifx_CPU_TRIG_ACC;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_TS16P_TC_CTRL0_Bits B;         /**< \brief Bitfield access */
} Ifx_CPU_TS16P_TC_CTRL0;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_VCON0_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_VCON0;

/** \brief    */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_VCON1_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_VCON1;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_VCON2_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_VCON2;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_VMICR_Bits B;                  /**< \brief Bitfield access */
} Ifx_CPU_VMICR;

/** \brief    */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_CPU_VMPETHRESH_Bits B;             /**< \brief Bitfield access */
} Ifx_CPU_VMPETHRESH;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_STM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief STM object */
typedef volatile struct _Ifx_CPU_STM
{
       __IO Ifx_CPU_STM_CLC                     CLC;                    /**< \brief 0, CPUx system timer clock control register*/
       __IO Ifx_CPU_STM_OCS                     OCS;                    /**< \brief 4, CPUx OCDS control and status register*/
       __I  Ifx_UReg_8Bit                       reserved_8[24];         /**< \brief 8, \internal Reserved */
       __IO Ifx_CPU_STM_ABS                     ABS;                    /**< \brief 20, CPUx system timer absolute timer*/
       __I  Ifx_UReg_8Bit                       reserved_28[248];       /**< \brief 28, \internal Reserved */
       __IO Ifx_CPU_STM_CMP                     CMP[2];                 /**< \brief 120, CPUx system timer compare register 0*/
       __IO Ifx_CPU_STM_CMCON                   CMCON;                  /**< \brief 128, CPUx system timer compare match control register*/
       __IO Ifx_CPU_STM_ICR                     STM_ICR;                /**< \brief 12C, CPUx system timer interrupt control register*/
       __O  Ifx_CPU_STM_ISCR                    ISCR;                   /**< \brief 130, CPUx system timer interrupt set/clear register*/
       __I  Ifx_CPU_STM_ISR                     ISR;                    /**< \brief 134, CPUx system timer interrupt status register*/
       __IO Ifx_CPU_STM_REL                     RELTIM;                 /**< \brief 138, CPUx system timer relative timer*/
       __I  Ifx_UReg_8Bit                       reserved_140[192];      /**< \brief 140, \internal Reserved */
} Ifx_CPU_STM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_STMHV_VM_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief VM object */
typedef volatile struct _Ifx_CPU_STMHV_VM
{
       __IO Ifx_CPU_STM_CMP                     CMP[2];                 /**< \brief 0, CPUx VM0 system timer compare register 0", hypervisor view"*/
       __IO Ifx_CPU_STM_CMCON                   CMCON;                  /**< \brief 8, CPUx VM0 system timer compare match control register", hypervisor view"*/
       __IO Ifx_CPU_STM_ICR                     STM_ICR;                /**< \brief C, CPUx VM0 system timer interrupt control register", hypervisor view"*/
       __O  Ifx_CPU_STM_ISCR                    ISCR;                   /**< \brief 10, CPUx VM0 system timer interrupt set/clear register", hypervisor view"*/
       __I  Ifx_CPU_STM_ISR                     ISR;                    /**< \brief 14, CPUx VM0 system timer interrupt status register", hypervisor view"*/
       __IO Ifx_CPU_STM_REL                     RELTIM;                 /**< \brief 18, CPUx VM0 system timer relative timer", hypervisor view"*/
} Ifx_CPU_STMHV_VM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_STMHV_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief STMHV object */
typedef volatile struct _Ifx_CPU_STMHV
{
       __IO Ifx_CPU_STM_CLC                     CLC;                    /**< \brief 0, CPUx system timer clock control register", hypervisor view"*/
       __IO Ifx_CPU_STM_OCS                     OCS;                    /**< \brief 4, CPUx OCDS control and status register", hypervisor view"*/
       __I  Ifx_UReg_8Bit                       reserved_8[24];         /**< \brief 8, \internal Reserved */
       __IO Ifx_CPU_STM_ABS                     ABS;                    /**< \brief 20, CPUx system timer absolute timer", hypervisor view"*/
       __I  Ifx_UReg_8Bit                       reserved_28[216];       /**< \brief 28, \internal Reserved */
       __IO Ifx_CPU_STMHV_VM                    VM[8];                  /**< \brief 100, */
} Ifx_CPU_STMHV;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSPRCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENSPRCFG object */
typedef volatile struct _Ifx_CPU_ACCENSPRCFG
{
       __IO Ifx_CPU_ACCEN_WRA                   WRA;                    /**< \brief 0, CPUx shadow SPR, write access enable register A*/
       __IO Ifx_CPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CPUx shadow SPR, write access enable register B*/
       __IO Ifx_CPU_ACCEN_RDA                   RDA;                    /**< \brief 8, CPUx shadow SPR, read access enable register A*/
       __IO Ifx_CPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CPUx shadow SPR, read access enable register B*/
       __IO Ifx_CPU_ACCEN_VM                    VM;                     /**< \brief 10, CPUx shadow SPR, VM access enable register*/
       __IO Ifx_CPU_ACCEN_PRS                   PRS;                    /**< \brief 14, CPUx shadow SPR, PRS access enable register*/
       __IO Ifx_CPU_ACCEN_RGNLA                 RGNLA;                  /**< \brief 18, CPUx shadow SPR, region lower address register*/
       __IO Ifx_CPU_ACCEN_RGNUA                 RGNUA;                  /**< \brief 1C, CPUx shadow SPR, region upper address register*/
} Ifx_CPU_ACCENSPRCFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENDLMUCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENDLMUCFG object */
typedef volatile struct _Ifx_CPU_ACCENDLMUCFG
{
       __IO Ifx_CPU_ACCEN_WRA                   WRA;                    /**< \brief 0, CPUx shadow DLMU, write access enable register A*/
       __IO Ifx_CPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CPUx shadow DLMU, write access enable register B*/
       __IO Ifx_CPU_ACCEN_RDA                   RDA;                    /**< \brief 8, CPUx shadow DLMU, read access enable register A*/
       __IO Ifx_CPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CPUx shadow DLMU, read access enable register B*/
       __IO Ifx_CPU_ACCEN_VM                    VM;                     /**< \brief 10, CPUx shadow DLMU, VM access enable register*/
       __IO Ifx_CPU_ACCEN_PRS                   PRS;                    /**< \brief 14, CPUx shadow DLMU, PRS access enable register*/
       __IO Ifx_CPU_ACCEN_RGNLA_89              RGNLA;                  /**< \brief 18, CPUx shadow DLMU, region lower address register*/
       __IO Ifx_CPU_ACCEN_RGNUA_89              RGNUA;                  /**< \brief 1C, CPUx shadow DLMU, region upper address register*/
} Ifx_CPU_ACCENDLMUCFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSFRCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENSFRCFG object */
typedef volatile struct _Ifx_CPU_ACCENSFRCFG
{
       __IO Ifx_CPU_ACCEN_WRA                   WRA;                    /**< \brief 0, CPUx shadow SFR, write access enable register A*/
       __IO Ifx_CPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CPUx shadow SFR, write access enable register B*/
       __IO Ifx_CPU_ACCEN_RDA                   RDA;                    /**< \brief 8, CPUx shadow SFR, read access enable register A*/
       __IO Ifx_CPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CPUx shadow SFR, read access enable register B*/
       __IO Ifx_CPU_ACCEN_VM                    VM;                     /**< \brief 10, CPUx shadow SFR, VM access enable register*/
       __IO Ifx_CPU_ACCEN_PRS                   PRS;                    /**< \brief 14, CPUx shadow SFR, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CPU_ACCENSFRCFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSTMCFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENSTMCFG object */
typedef volatile struct _Ifx_CPU_ACCENSTMCFG
{
       __IO Ifx_CPU_ACCEN_WRA                   WRA;                    /**< \brief 0, CPUx shadow STM, write access enable register A*/
       __IO Ifx_CPU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CPUx shadow STM, write access enable register B*/
       __IO Ifx_CPU_ACCEN_RDA                   RDA;                    /**< \brief 8, CPUx shadow STM, read access enable register A*/
       __IO Ifx_CPU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CPUx shadow STM, read access enable register B*/
       __IO Ifx_CPU_ACCEN_VM                    VM;                     /**< \brief 10, CPUx shadow STM, VM access enable register*/
       __IO Ifx_CPU_ACCEN_PRS                   PRS;                    /**< \brief 14, CPUx shadow STM, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CPU_ACCENSTMCFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSPR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENSPR object */
typedef volatile struct _Ifx_CPU_ACCENSPR
{
       __I  Ifx_CPU_RO_ACCEN_WRA                WRA;                    /**< \brief 0, CPUx SPR range 0, write access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_WRB_SRI            WRB;                    /**< \brief 4, CPUx SPR range 0, write access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_RDA                RDA;                    /**< \brief 8, CPUx SPR range 0, read access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_RDB_SRI            RDB;                    /**< \brief C, CPUx SPR range 0, read access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_VM                 VM;                     /**< \brief 10, CPUx SPR range 0, VM access enable register*/
       __I  Ifx_CPU_RO_ACCEN_PRS                PRS;                    /**< \brief 14, CPUx SPR range 0, PRS access enable register*/
       __I  Ifx_CPU_RO_ACCEN_RGNLA              RGNLA;                  /**< \brief 18, CPUx SPR range 0, region lower address register*/
       __I  Ifx_CPU_RO_ACCEN_RGNUA              RGNUA;                  /**< \brief 1C, CPUx SPR range 0, region upper address register*/
} Ifx_CPU_ACCENSPR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENDLMU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENDLMU object */
typedef volatile struct _Ifx_CPU_ACCENDLMU
{
       __I  Ifx_CPU_RO_ACCEN_WRA                WRA;                    /**< \brief 0, CPUx DLMU range 0, write access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_WRB_SRI            WRB;                    /**< \brief 4, CPUx DLMU range 0, write access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_RDA                RDA;                    /**< \brief 8, CPUx DLMU range 0, read access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_RDB_SRI            RDB;                    /**< \brief C, CPUx DLMU range 0, read access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_VM                 VM;                     /**< \brief 10, CPUx DLMU range 0, VM access enable register*/
       __I  Ifx_CPU_RO_ACCEN_PRS                PRS;                    /**< \brief 14, CPUx DLMU range 0, PRS access enable register*/
       __I  Ifx_CPU_RO_ACCEN_RGNLA_89           RGNLA;                  /**< \brief 18, CPUx DLMU range 0, region lower address register*/
       __I  Ifx_CPU_RO_ACCEN_RGNUA_89           RGNUA;                  /**< \brief 1C, CPUx DLMU range 0, region upper address register*/
} Ifx_CPU_ACCENDLMU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSFR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCENSFR object */
typedef volatile struct _Ifx_CPU_ACCENSFR
{
       __I  Ifx_CPU_RO_ACCEN_WRA                WRA;                    /**< \brief 0, CPUx SFR, write access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_WRB_SRI            WRB;                    /**< \brief 4, CPUx SFR, write access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_RDA                RDA;                    /**< \brief 8, CPUx SFR, read access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_RDB_SRI            RDB;                    /**< \brief C, CPUx SFR, read access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_VM                 VM;                     /**< \brief 10, CPUx SFR, VM access enable register*/
       __I  Ifx_CPU_RO_ACCEN_PRS                PRS;                    /**< \brief 14, CPUx SFR, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CPU_ACCENSFR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSTMVM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENSTMVM object */
typedef volatile struct _Ifx_CPU_ACCENSTMVM
{
       __I  Ifx_CPU_RO_ACCEN_WRA                WRA;                    /**< \brief 0, CPUx VM0 STM, write access enable register A", virtualization view"*/
       __I  Ifx_CPU_RO_ACCEN_WRB_SRI            WRB;                    /**< \brief 4, CPUx VM0 STM, write access enable register B", virtualization view"*/
       __I  Ifx_CPU_RO_ACCEN_RDA                RDA;                    /**< \brief 8, CPUx VM0 STM, read access enable register A", virtualization view"*/
       __I  Ifx_CPU_RO_ACCEN_RDB_SRI            RDB;                    /**< \brief C, CPUx VM0 STM, read access enable register B", virtualization view"*/
       __I  Ifx_CPU_RO_ACCEN_VM                 VM;                     /**< \brief 10, CPUx VM0 STM, VM access enable register", virtualization view"*/
       __I  Ifx_CPU_RO_ACCEN_PRS                PRS;                    /**< \brief 14, CPUx VM0 STM, PRS access enable register", virtualization view"*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_CPU_ACCENSTMVM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_ACCENSTM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENSTM object */
typedef volatile struct _Ifx_CPU_ACCENSTM
{
       __I  Ifx_UReg_8Bit                       reserved_0[32];         /**< \brief 0, \internal Reserved */
       __I  Ifx_CPU_RO_ACCEN_WRA                WRA;                    /**< \brief 20, CPUx STM, write access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_WRB_SRI            WRB;                    /**< \brief 24, CPUx STM, write access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_RDA                RDA;                    /**< \brief 28, CPUx STM, read access enable register A*/
       __I  Ifx_CPU_RO_ACCEN_RDB_SRI            RDB;                    /**< \brief 2C, CPUx STM, read access enable register B*/
       __I  Ifx_CPU_RO_ACCEN_VM                 VM;                     /**< \brief 30, CPUx STM, VM access enable register*/
       __I  Ifx_CPU_RO_ACCEN_PRS                PRS;                    /**< \brief 34, CPUx STM, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_38[200];       /**< \brief 38, \internal Reserved */
} Ifx_CPU_ACCENSTM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_BLK_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief BLK object */
typedef volatile struct _Ifx_CPU_BLK
{
       __IO Ifx_CPU_BLK_RABR                    RABR;                   /**< \brief 0, CPUx redirected address base register 0*/
       __IO Ifx_CPU_OTAR                        OTAR;                   /**< \brief 4, CPUx overlay target address register 0 (Low priority)*/
       __IO Ifx_CPU_BLK_OMASK                   OMASK;                  /**< \brief 8, CPUx overlay mask register 0*/
} Ifx_CPU_BLK;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_DPR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DPR object */
typedef volatile struct _Ifx_CPU_DPR
{
       __IO Ifx_CPU_DPR_L                       L;                      /**< \brief 0, CPUx HR specific data protection range 0, lower bound register*/
       __IO Ifx_CPU_DPR_U                       U;                      /**< \brief 4, CPUx HR specific data protection range 0, upper bound register*/
} Ifx_CPU_DPR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_CPR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CPR object */
typedef volatile struct _Ifx_CPU_CPR
{
       __IO Ifx_CPU_CPR_L                       L;                      /**< \brief 0, CPUx HR specific code protection range 0, lower bound register*/
       __IO Ifx_CPU_CPR_U                       U;                      /**< \brief 4, CPUx HR specific code protection range 0, upper bound register*/
} Ifx_CPU_CPR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_TPS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TPS object */
typedef volatile struct _Ifx_CPU_TPS
{
       __I  Ifx_CPU_TPS_CON                     CON;                    /**< \brief 0, CPUx HR specific temporal protection system control register*/
       __IO Ifx_CPU_TPS_TIMER                   TIMER[3];               /**< \brief 4, CPUx HR specific temporal protection system timer register 0*/
} Ifx_CPU_TPS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_TR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TR object */
typedef volatile struct _Ifx_CPU_TR
{
       __IO Ifx_CPU_TREVT                       EVT;                    /**< \brief 0, CPUx trigger event 0*/
       __IO Ifx_CPU_TRADR                       ADR;                    /**< \brief 4, CPUx trigger address 0*/
} Ifx_CPU_TR;





/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_VM_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VM object */
typedef volatile struct _Ifx_CPU_VM
{
       __IO Ifx_CPU_VMICR                       ICR[8];                 /**< \brief 0, CPUx Virtual machine n interrupt state*/
       __I  Ifx_UReg_8Bit                       reserved_20[224];       /**< \brief 20, \internal Reserved */
       __IO Ifx_CPU_VMPETHRESH                  PETHRESH[8];            /**< \brief 100, CPUx Virtual machine n pre-emption threshold*/
} Ifx_CPU_VM;





/******************************************************************************/
/** \addtogroup IfxSfr_Cpu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief CPU object */
typedef volatile struct _Ifx_CPU
{
       union
       {
       __IO Ifx_CPU_STM                         STM;                    /**< \brief 0, */
       __IO Ifx_CPU_STMHV                       STMHV;                  /**< \brief 0, */
       };
       __I  Ifx_UReg_8Bit                       reserved_200[52736];    /**< \brief 200, \internal Reserved */
       __IO Ifx_CPU_KRST0                       KRST0;                  /**< \brief D000, CPUx reset register 0*/
       __IO Ifx_CPU_KRST1                       KRST1;                  /**< \brief D004, CPUx reset register 1*/
       __O  Ifx_CPU_KRSTCLR                     KRSTCLR;                /**< \brief D008, CPUx reset clear register*/
       __I  Ifx_UReg_8Bit                       reserved_D00C[4092];    /**< \brief D00C, \internal Reserved */
       __IO Ifx_CPU_PROT_SEL16                  PROTSPRSE;              /**< \brief E008, CPUx PROTSPR register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_E00C[20];      /**< \brief E00C, \internal Reserved */
       __IO Ifx_CPU_ACCENSPRCFG                 ACCENSPRCFG;            /**< \brief E020, CPUx shadow SPR, region upper address register*/
       __I  Ifx_UReg_8Bit                       reserved_E040[8];       /**< \brief E040, \internal Reserved */
       __IO Ifx_CPU_PROT_SEL16                  PROTDLMUSE;             /**< \brief E048, CPUx PROTDLMU register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_E04C[20];      /**< \brief E04C, \internal Reserved */
       __IO Ifx_CPU_ACCENDLMUCFG                ACCENDLMUCFG;           /**< \brief E060, CPUx shadow DLMU, region upper address register*/
       __IO Ifx_CPU_PROT                        PROTSFRE;               /**< \brief E080, CPUx PROTSFR register endinit*/
       __I  Ifx_UReg_8Bit                       reserved_E084[4];       /**< \brief E084, \internal Reserved */
       __IO Ifx_CPU_PROT                        PROTSFRSE;              /**< \brief E088, CPUx PROTSFR register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_E08C[20];      /**< \brief E08C, \internal Reserved */
       __IO Ifx_CPU_ACCENSFRCFG                 ACCENSFRCFG;            /**< \brief E0A0, */
       __IO Ifx_CPU_PROT                        PROTRSTE;               /**< \brief E0C0, CPUx PROTRST register endinit*/
       __I  Ifx_UReg_8Bit                       reserved_E0C4[20];      /**< \brief E0C4, \internal Reserved */
       __IO Ifx_CPU_PROTSTMSE                   PROTSTMSE;              /**< \brief E0D8, CPUx PROTSTM Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_E0DC[4];       /**< \brief E0DC, \internal Reserved */
       __IO Ifx_CPU_ACCENSTMCFG                 ACCENSTMCFG;            /**< \brief E0E0, */
       __I  Ifx_UReg_8Bit                       reserved_E100[256];     /**< \brief E100, \internal Reserved */
       __IO Ifx_CPU_ACCENSPR                    ACCENSPR[16];           /**< \brief E200, CPUx SPR range 0, region upper address register*/
       __IO Ifx_CPU_ACCENDLMU                   ACCENDLMU[16];          /**< \brief E400, CPUx DLMU range 0, region upper address register*/
       __IO Ifx_CPU_ACCENSFR                    ACCENSFR;               /**< \brief E600, */
       __I  Ifx_UReg_8Bit                       reserved_E620[224];     /**< \brief E620, \internal Reserved */
       union
       {
       __IO Ifx_CPU_ACCENSTM                    ACCENSTM;               /**< \brief E700, */
       __IO Ifx_CPU_ACCENSTMVM                  ACCENSTMVM[8];          /**< \brief E700, */
       };
       __I  Ifx_UReg_8Bit                       reserved_E800[4864];    /**< \brief E800, \internal Reserved */
       __IO Ifx_CPU_OSEL                        OSEL;                   /**< \brief FB00, CPUx overlay range select register*/
       __I  Ifx_UReg_8Bit                       reserved_FB04[12];      /**< \brief FB04, \internal Reserved */
       __IO Ifx_CPU_BLK                         BLK[32];                /**< \brief FB10, CPUx overlay mask register 0*/
       __I  Ifx_UReg_8Bit                       reserved_FC90[5024];    /**< \brief FC90, \internal Reserved */
       __IO Ifx_CPU_SEGEN                       HRA_SEGEN;              /**< \brief 11030, CPUx SRI error generation register*/
       __I  Ifx_UReg_8Bit                       reserved_11034[12];     /**< \brief 11034, \internal Reserved */
       __O  Ifx_CPU_LCLTEST                     HRA_LCLTEST;            /**< \brief 11040, CPUx lockstep test register*/
       __I  Ifx_UReg_8Bit                       reserved_11044[28860];    /**< \brief 11044, \internal Reserved */
       __IO Ifx_CPU_PMA0                        HRA_PMA0;               /**< \brief 18100, CPUx data access cacheability register*/
       __IO Ifx_CPU_PMA1                        HRA_PMA1;               /**< \brief 18104, CPUx code access cacheability register*/
       __I  Ifx_CPU_PMA2                        HRA_PMA2;               /**< \brief 18108, CPUx peripheral space identifier register*/
       __I  Ifx_UReg_8Bit                       reserved_1810C[3828];    /**< \brief 1810C, \internal Reserved */
       __I  Ifx_CPU_DCON2                       HRA_DCON2;              /**< \brief 19000, CPUx data control register 2*/
       __I  Ifx_UReg_8Bit                       reserved_19004[4];      /**< \brief 19004, \internal Reserved */
       __IO Ifx_CPU_DCON1                       HRA_DCON1;              /**< \brief 19008, CPUx data control register 1*/
       __IO Ifx_CPU_SMACON                      HRA_SMACON;             /**< \brief 1900C, CPUx SIST mode access control register*/
       __IO Ifx_CPU_DSTR                        HRA_DSTR;               /**< \brief 19010, CPUx HR specific data synchronous trap register*/
       __I  Ifx_UReg_8Bit                       reserved_19014[4];      /**< \brief 19014, \internal Reserved */
       __IO Ifx_CPU_DATR                        HRA_DATR;               /**< \brief 19018, CPUx HR specific data asynchronous trap register*/
       __I  Ifx_CPU_DEADD                       HRA_DEADD;              /**< \brief 1901C, CPUx HR specific data error address register*/
       __I  Ifx_CPU_DPIEAR                      HRA_DIEAR;              /**< \brief 19020, CPUx data integrity error address register*/
       __IO Ifx_CPU_DIETR                       HRA_DIETR;              /**< \brief 19024, CPUx data integrity error trap register*/
       __I  Ifx_UReg_8Bit                       reserved_19028[24];     /**< \brief 19028, \internal Reserved */
       __IO Ifx_CPU_DCON0                       HRA_DCON0;              /**< \brief 19040, CPUx data memory control register*/
       __I  Ifx_UReg_8Bit                       reserved_19044[444];    /**< \brief 19044, \internal Reserved */
       __IO Ifx_CPU_PSTR                        HRA_PSTR;               /**< \brief 19200, CPUx HR specific program synchronous trap register*/
       __IO Ifx_CPU_PCON1                       HRA_PCON1;              /**< \brief 19204, CPUx program control 1*/
       __I  Ifx_CPU_PCON2                       HRA_PCON2;              /**< \brief 19208, CPUx program control 2*/
       __IO Ifx_CPU_PCON0                       HRA_PCON0;              /**< \brief 1920C, CPUx program control 0*/
       __I  Ifx_CPU_DPIEAR                      HRA_PIEAR;              /**< \brief 19210, CPUx HR specific program integrity error address register*/
       __IO Ifx_CPU_PIETR                       HRA_PIETR;              /**< \brief 19214, CPUx HR specific program integrity error trap register*/
       __I  Ifx_UReg_8Bit                       reserved_19218[488];    /**< \brief 19218, \internal Reserved */
       __IO Ifx_CPU_COMPAT                      HRA_COMPAT;             /**< \brief 19400, CPUx compatibility control register*/
       __I  Ifx_UReg_8Bit                       reserved_19404[3068];    /**< \brief 19404, \internal Reserved */
       __IO Ifx_CPU_CON                         HRA_FPU_TRAP_CON;       /**< \brief 1A000, CPUx HR specific trap control register*/
       __I  Ifx_CPU_FPUPC                       HRA_FPU_TRAP_PC;        /**< \brief 1A004, CPUx HR specific trapping instruction program counter register*/
       __I  Ifx_CPU_OPC                         HRA_FPU_TRAP_OPC;       /**< \brief 1A008, CPUx HR specific trapping instruction opcode register*/
       __I  Ifx_UReg_8Bit                       reserved_1A00C[4];      /**< \brief 1A00C, \internal Reserved */
       __I  Ifx_CPU_SRC1_L                      HRA_FPU_TRAP_SRC1_L;    /**< \brief 1A010, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC1_U                      HRA_FPU_TRAP_SRC1_U;    /**< \brief 1A014, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC2_L                      HRA_FPU_TRAP_SRC2_L;    /**< \brief 1A018, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC2_U                      HRA_FPU_TRAP_SRC2_U;    /**< \brief 1A01C, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC3_L                      HRA_FPU_TRAP_SRC3_L;    /**< \brief 1A020, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC3_U                      HRA_FPU_TRAP_SRC3_U;    /**< \brief 1A024, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_UReg_8Bit                       reserved_1A028[8];      /**< \brief 1A028, \internal Reserved */
       __IO Ifx_CPU_SYNCCON                     HRA_FPU_SYNC_TRAP_CON;    /**< \brief 1A030, CPUx HR specific synchronous trap control register*/
       __I  Ifx_CPU_OPC                         HRA_FPU_SYNC_TRAP_OPC;    /**< \brief 1A034, CPUx HR specific trapping instruction opcode register*/
       __I  Ifx_UReg_8Bit                       reserved_1A038[8136];    /**< \brief 1A038, \internal Reserved */
       __IO Ifx_CPU_DPR                         HRA_DPR[24];            /**< \brief 1C000, CPUx HR specific data protection range 0, upper bound register*/
       __I  Ifx_UReg_8Bit                       reserved_1C0C0[3904];    /**< \brief 1C0C0, \internal Reserved */
       __IO Ifx_CPU_CPR                         HRA_CPR[16];            /**< \brief 1D000, CPUx HR specific code protection range 0, upper bound register*/
       __I  Ifx_UReg_8Bit                       reserved_1D080[3968];    /**< \brief 1D080, \internal Reserved */
       __IO Ifx_CPU_CPXE                        HRA_CPXE_0;             /**< \brief 1E000, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRA_CPXE_1;             /**< \brief 1E004, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRA_CPXE_2;             /**< \brief 1E008, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRA_CPXE_3;             /**< \brief 1E00C, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_0;             /**< \brief 1E010, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_1;             /**< \brief 1E014, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_2;             /**< \brief 1E018, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_3;             /**< \brief 1E01C, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_0;             /**< \brief 1E020, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_1;             /**< \brief 1E024, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_2;             /**< \brief 1E028, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_3;             /**< \brief 1E02C, CPUx HR specific data protection write enable register set 0*/
       __I  Ifx_UReg_8Bit                       reserved_1E030[16];     /**< \brief 1E030, \internal Reserved */
       __IO Ifx_CPU_CPXE                        HRA_CPXE_4;             /**< \brief 1E040, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRA_CPXE_5;             /**< \brief 1E044, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRA_CPXE_6;             /**< \brief 1E048, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRA_CPXE_7;             /**< \brief 1E04C, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_4;             /**< \brief 1E050, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_5;             /**< \brief 1E054, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_6;             /**< \brief 1E058, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRA_DPRE_7;             /**< \brief 1E05C, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_4;             /**< \brief 1E060, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_5;             /**< \brief 1E064, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_6;             /**< \brief 1E068, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRA_DPWE_7;             /**< \brief 1E06C, CPUx HR specific data protection write enable register set 4*/
       __I  Ifx_UReg_8Bit                       reserved_1E070[912];    /**< \brief 1E070, \internal Reserved */
       __IO Ifx_CPU_TPS                         HRA_TPS;                /**< \brief 1E400, */
       __I  Ifx_UReg_8Bit                       reserved_1E410[3056];    /**< \brief 1E410, \internal Reserved */
       __IO Ifx_CPU_TR                          HRA_TR[8];              /**< \brief 1F000, CPUx trigger address 0*/
       __I  Ifx_UReg_8Bit                       reserved_1F040[3008];    /**< \brief 1F040, \internal Reserved */
       __IO Ifx_CPU_CCTRL                       HRA_CCTRL;              /**< \brief 1FC00, CPUx HR specific counter control*/
       __IO Ifx_CPU_CCNT                        HRA_CCNT;               /**< \brief 1FC04, CPUx HR specific CPU clock cycle count*/
       __IO Ifx_CPU_ICNT                        HRA_ICNT;               /**< \brief 1FC08, CPUx HR specific instruction count*/
       __IO Ifx_CPU_M1CNT                       HRA_M1CNT;              /**< \brief 1FC0C, CPUx HR specific multi-count register 1*/
       __IO Ifx_CPU_M2CNT                       HRA_M2CNT;              /**< \brief 1FC10, CPUx HR specific multi-count register 2*/
       __IO Ifx_CPU_M3CNT                       HRA_M3CNT;              /**< \brief 1FC14, CPUx HR specific multi-count register 3*/
       __I  Ifx_UReg_8Bit                       reserved_1FC18[232];    /**< \brief 1FC18, \internal Reserved */
       __IO Ifx_CPU_DBGSR                       HRA_DBGSR;              /**< \brief 1FD00, CPUx debug status register*/
       __I  Ifx_UReg_8Bit                       reserved_1FD04[4];      /**< \brief 1FD04, \internal Reserved */
       __IO Ifx_CPU_CR_SW_EX_EVT                HRA_EXEVT;              /**< \brief 1FD08, CPUx external event register*/
       __IO Ifx_CPU_CR_SW_EX_EVT                HRA_CREVT;              /**< \brief 1FD0C, CPUx core register access event*/
       __IO Ifx_CPU_CR_SW_EX_EVT                HRA_SWEVT;              /**< \brief 1FD10, CPUx software debug event*/
       __IO Ifx_CPU_DBGACT                      HRA_DBGACT;             /**< \brief 1FD14, CPUx debug action configuration*/
       __I  Ifx_UReg_8Bit                       reserved_1FD18[24];     /**< \brief 1FD18, \internal Reserved */
       __I  Ifx_CPU_TRIG_ACC                    HRA_TRIG_ACC;           /**< \brief 1FD30, CPUx trigger accumulator*/
       __I  Ifx_UReg_8Bit                       reserved_1FD34[12];     /**< \brief 1FD34, \internal Reserved */
       __IO Ifx_CPU_DMS                         HRA_DMS;                /**< \brief 1FD40, CPUx debug monitor start address*/
       __IO Ifx_CPU_DCX                         HRA_DCX;                /**< \brief 1FD44, CPUx debug context save area pointer*/
       __IO Ifx_CPU_DBGTCR                      HRA_DBGTCR;             /**< \brief 1FD48, CPUx debug trap control*/
       __IO Ifx_CPU_DBGCFG                      HRA_DBGCFG;             /**< \brief 1FD4C, CPUx debug configuration*/
       __IO Ifx_CPU_TRCCFG                      HRA_TRCCFG;             /**< \brief 1FD50, CPUx trace configuration*/
       __IO Ifx_CPU_TRCFILT                     HRA_TRCFILT;            /**< \brief 1FD54, CPUx trace filter*/
       __IO Ifx_CPU_TRCLIM                      HRA_TRCLIM;             /**< \brief 1FD58, CPUx trace bandwidth limiter*/
       __I  Ifx_UReg_8Bit                       reserved_1FD5C[4];      /**< \brief 1FD5C, \internal Reserved */
       __IO Ifx_CPU_TS16P_TC_CTRL0              HRA_TS16PTCCTRL;        /**< \brief 1FD60, CPUx MCDS performance counter control register*/
       __I  Ifx_UReg_8Bit                       reserved_1FD64[156];    /**< \brief 1FD64, \internal Reserved */
       __IO Ifx_CPU_PCXI                        HRA_PCXI;               /**< \brief 1FE00, CPUx previous context information register*/
       __IO Ifx_CPU_PSW                         HRA_PSW;                /**< \brief 1FE04, CPUx HR specific program status word*/
       __IO Ifx_CPU_PC                          HRA_PC;                 /**< \brief 1FE08, CPUx program counter*/
       __I  Ifx_UReg_8Bit                       reserved_1FE0C[8];      /**< \brief 1FE0C, \internal Reserved */
       __IO Ifx_CPU_CORECON                     HRA_CORECON;            /**< \brief 1FE14, CPUx HR specific core configuration register*/
       __I  Ifx_CPU_CPU_ID                      HRA_CPU_ID;             /**< \brief 1FE18, CPUx identification register*/
       __I  Ifx_CPU_CORE_ID                     HRA_CORE_ID;            /**< \brief 1FE1C, CPUx core identification register*/
       __IO Ifx_CPU_BIV                         HRA_BIV;                /**< \brief 1FE20, CPUx HR specific base interrupt vector table pointer*/
       __IO Ifx_CPU_BTV                         HRA_BTV;                /**< \brief 1FE24, CPUx HR specific base trap vector table pointer*/
       __IO Ifx_CPU_ISP                         HRA_ISP;                /**< \brief 1FE28, CPUx HR specific interrupt stack pointer*/
       __IO Ifx_CPU_ICR                         HRA_ICR;                /**< \brief 1FE2C, CPUx interrupt control register*/
       __I  Ifx_UReg_8Bit                       reserved_1FE30[4];      /**< \brief 1FE30, \internal Reserved */
       __IO Ifx_CPU_PPRS                        HRA_PPRS;               /**< \brief 1FE34, CPUx previous PRS*/
       __IO Ifx_CPU_FCX                         HRA_FCX;                /**< \brief 1FE38, CPUx HR specific free CSA list head pointer*/
       __IO Ifx_CPU_LCX                         HRA_LCX;                /**< \brief 1FE3C, CPUx HR specific free CSA list limit pointer*/
       __I  Ifx_CPU_SWID                        HRA_SWID;               /**< \brief 1FE40, CPUx software identification*/
       __I  Ifx_UReg_8Bit                       reserved_1FE44[12];     /**< \brief 1FE44, \internal Reserved */
       __I  Ifx_CPU_CUS_ID                      HRA_CUS_ID;             /**< \brief 1FE50, CPUx customer ID register*/
       __I  Ifx_UReg_8Bit                       reserved_1FE54[12];     /**< \brief 1FE54, \internal Reserved */
       __IO Ifx_CPU_BOOTCON                     HRA_BOOTCON;            /**< \brief 1FE60, CPUx core boot configuration register*/
       __IO Ifx_CPU_LCLCON                      HRA_LCLCON;             /**< \brief 1FE64, CPUx lockstep control register*/
       __IO Ifx_CPU_CCON                        HRA_CCON;               /**< \brief 1FE68, CPUx clock control register*/
       __I  Ifx_CPU_TCCON                       HRA_TCCON;              /**< \brief 1FE6C, CPUx hardware configuration*/
       __I  Ifx_UReg_8Bit                       reserved_1FE70[144];    /**< \brief 1FE70, \internal Reserved */
       __IO Ifx_CPU_DREG                        D[16];                  /**< \brief 1FF00, CPUx data general purpose register 0*/
       __I  Ifx_UReg_8Bit                       reserved_1FF40[64];     /**< \brief 1FF40, \internal Reserved */
       __IO Ifx_CPU_AREG                        A[16];                  /**< \brief 1FF80, CPUx address general purpose register 0*/
       __I  Ifx_UReg_8Bit                       reserved_1FFC0[4208];    /**< \brief 1FFC0, \internal Reserved */
       __IO Ifx_CPU_SEGEN                       HRB_SEGEN;              /**< \brief 21030, CPUx SRI error generation register*/
       __I  Ifx_UReg_8Bit                       reserved_21034[12];     /**< \brief 21034, \internal Reserved */
       __O  Ifx_CPU_LCLTEST                     HRB_LCLTEST;            /**< \brief 21040, CPUx lockstep test register*/
       __I  Ifx_UReg_8Bit                       reserved_21044[28860];    /**< \brief 21044, \internal Reserved */
       __IO Ifx_CPU_PMA0                        HRB_PMA0;               /**< \brief 28100, CPUx data access cacheability register*/
       __IO Ifx_CPU_PMA1                        HRB_PMA1;               /**< \brief 28104, CPUx code access cacheability register*/
       __I  Ifx_CPU_PMA2                        HRB_PMA2;               /**< \brief 28108, CPUx peripheral space identifier register*/
       __I  Ifx_UReg_8Bit                       reserved_2810C[3828];    /**< \brief 2810C, \internal Reserved */
       __I  Ifx_CPU_DCON2                       HRB_DCON2;              /**< \brief 29000, CPUx data control register 2*/
       __I  Ifx_UReg_8Bit                       reserved_29004[4];      /**< \brief 29004, \internal Reserved */
       __IO Ifx_CPU_DCON1                       HRB_DCON1;              /**< \brief 29008, CPUx data control register 1*/
       __IO Ifx_CPU_SMACON                      HRB_SMACON;             /**< \brief 2900C, CPUx SIST mode access control register*/
       __IO Ifx_CPU_DSTR                        HRB_DSTR;               /**< \brief 29010, CPUx HR specific data synchronous trap register*/
       __I  Ifx_UReg_8Bit                       reserved_29014[4];      /**< \brief 29014, \internal Reserved */
       __IO Ifx_CPU_DATR                        HRB_DATR;               /**< \brief 29018, CPUx HR specific data asynchronous trap register*/
       __I  Ifx_CPU_DEADD                       HRB_DEADD;              /**< \brief 2901C, CPUx HR specific data error address register*/
       __I  Ifx_CPU_DPIEAR                      HRB_DIEAR;              /**< \brief 29020, CPUx data integrity error address register*/
       __IO Ifx_CPU_DIETR                       HRB_DIETR;              /**< \brief 29024, CPUx data integrity error trap register*/
       __I  Ifx_UReg_8Bit                       reserved_29028[24];     /**< \brief 29028, \internal Reserved */
       __IO Ifx_CPU_DCON0                       HRB_DCON0;              /**< \brief 29040, CPUx data memory control register*/
       __I  Ifx_UReg_8Bit                       reserved_29044[444];    /**< \brief 29044, \internal Reserved */
       __IO Ifx_CPU_PSTR                        HRB_PSTR;               /**< \brief 29200, CPUx HR specific program synchronous trap register*/
       __IO Ifx_CPU_PCON1                       HRB_PCON1;              /**< \brief 29204, CPUx program control 1*/
       __I  Ifx_CPU_PCON2                       HRB_PCON2;              /**< \brief 29208, CPUx program control 2*/
       __IO Ifx_CPU_PCON0                       HRB_PCON0;              /**< \brief 2920C, CPUx program control 0*/
       __I  Ifx_CPU_DPIEAR                      HRB_PIEAR;              /**< \brief 29210, CPUx HR specific program integrity error address register*/
       __IO Ifx_CPU_PIETR                       HRB_PIETR;              /**< \brief 29214, CPUx HR specific program integrity error trap register*/
       __I  Ifx_UReg_8Bit                       reserved_29218[488];    /**< \brief 29218, \internal Reserved */
       __IO Ifx_CPU_COMPAT                      HRB_COMPAT;             /**< \brief 29400, CPUx compatibility control register*/
       __I  Ifx_UReg_8Bit                       reserved_29404[3068];    /**< \brief 29404, \internal Reserved */
       __IO Ifx_CPU_CON                         HRB_FPU_TRAP_CON;       /**< \brief 2A000, CPUx HR specific trap control register*/
       __I  Ifx_CPU_FPUPC                       HRB_FPU_TRAP_PC;        /**< \brief 2A004, CPUx HR specific trapping instruction program counter register*/
       __I  Ifx_CPU_OPC                         HRB_FPU_TRAP_OPC;       /**< \brief 2A008, CPUx HR specific trapping instruction opcode register*/
       __I  Ifx_UReg_8Bit                       reserved_2A00C[4];      /**< \brief 2A00C, \internal Reserved */
       __I  Ifx_CPU_SRC1_L                      HRB_FPU_TRAP_SRC1_L;    /**< \brief 2A010, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC1_U                      HRB_FPU_TRAP_SRC1_U;    /**< \brief 2A014, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC2_L                      HRB_FPU_TRAP_SRC2_L;    /**< \brief 2A018, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC2_U                      HRB_FPU_TRAP_SRC2_U;    /**< \brief 2A01C, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC3_L                      HRB_FPU_TRAP_SRC3_L;    /**< \brief 2A020, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC3_U                      HRB_FPU_TRAP_SRC3_U;    /**< \brief 2A024, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_UReg_8Bit                       reserved_2A028[8];      /**< \brief 2A028, \internal Reserved */
       __IO Ifx_CPU_SYNCCON                     HRB_FPU_SYNC_TRAP_CON;    /**< \brief 2A030, CPUx HR specific synchronous trap control register*/
       __I  Ifx_CPU_OPC                         HRB_FPU_SYNC_TRAP_OPC;    /**< \brief 2A034, CPUx HR specific trapping instruction opcode register*/
       __I  Ifx_UReg_8Bit                       reserved_2A038[8136];    /**< \brief 2A038, \internal Reserved */
       __IO Ifx_CPU_DPR                         HRB_DPR[24];            /**< \brief 2C000, CPUx HR specific data protection range 0, upper bound register*/
       __I  Ifx_UReg_8Bit                       reserved_2C0C0[3904];    /**< \brief 2C0C0, \internal Reserved */
       __IO Ifx_CPU_CPR                         HRB_CPR[16];            /**< \brief 2D000, CPUx HR specific code protection range 0, upper bound register*/
       __I  Ifx_UReg_8Bit                       reserved_2D080[3968];    /**< \brief 2D080, \internal Reserved */
       __IO Ifx_CPU_CPXE                        HRB_CPXE_0;             /**< \brief 2E000, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRB_CPXE_1;             /**< \brief 2E004, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRB_CPXE_2;             /**< \brief 2E008, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRB_CPXE_3;             /**< \brief 2E00C, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_0;             /**< \brief 2E010, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_1;             /**< \brief 2E014, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_2;             /**< \brief 2E018, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_3;             /**< \brief 2E01C, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_0;             /**< \brief 2E020, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_1;             /**< \brief 2E024, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_2;             /**< \brief 2E028, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_3;             /**< \brief 2E02C, CPUx HR specific data protection write enable register set 0*/
       __I  Ifx_UReg_8Bit                       reserved_2E030[16];     /**< \brief 2E030, \internal Reserved */
       __IO Ifx_CPU_CPXE                        HRB_CPXE_4;             /**< \brief 2E040, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRB_CPXE_5;             /**< \brief 2E044, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRB_CPXE_6;             /**< \brief 2E048, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRB_CPXE_7;             /**< \brief 2E04C, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_4;             /**< \brief 2E050, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_5;             /**< \brief 2E054, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_6;             /**< \brief 2E058, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRB_DPRE_7;             /**< \brief 2E05C, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_4;             /**< \brief 2E060, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_5;             /**< \brief 2E064, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_6;             /**< \brief 2E068, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRB_DPWE_7;             /**< \brief 2E06C, CPUx HR specific data protection write enable register set 4*/
       __I  Ifx_UReg_8Bit                       reserved_2E070[912];    /**< \brief 2E070, \internal Reserved */
       __IO Ifx_CPU_TPS                         HRB_TPS;                /**< \brief 2E400, */
       __I  Ifx_UReg_8Bit                       reserved_2E410[3056];    /**< \brief 2E410, \internal Reserved */
       __IO Ifx_CPU_TR                          HRB_TR[8];              /**< \brief 2F000, CPUx trigger address 0*/
       __I  Ifx_UReg_8Bit                       reserved_2F040[3008];    /**< \brief 2F040, \internal Reserved */
       __IO Ifx_CPU_CCTRL                       HRB_CCTRL;              /**< \brief 2FC00, CPUx HR specific counter control*/
       __IO Ifx_CPU_CCNT                        HRB_CCNT;               /**< \brief 2FC04, CPUx HR specific CPU clock cycle count*/
       __IO Ifx_CPU_ICNT                        HRB_ICNT;               /**< \brief 2FC08, CPUx HR specific instruction count*/
       __IO Ifx_CPU_M1CNT                       HRB_M1CNT;              /**< \brief 2FC0C, CPUx HR specific multi-count register 1*/
       __IO Ifx_CPU_M2CNT                       HRB_M2CNT;              /**< \brief 2FC10, CPUx HR specific multi-count register 2*/
       __IO Ifx_CPU_M3CNT                       HRB_M3CNT;              /**< \brief 2FC14, CPUx HR specific multi-count register 3*/
       __I  Ifx_UReg_8Bit                       reserved_2FC18[232];    /**< \brief 2FC18, \internal Reserved */
       __IO Ifx_CPU_DBGSR                       HRB_DBGSR;              /**< \brief 2FD00, CPUx debug status register*/
       __I  Ifx_UReg_8Bit                       reserved_2FD04[4];      /**< \brief 2FD04, \internal Reserved */
       __IO Ifx_CPU_CR_SW_EX_EVT                HRB_EXEVT;              /**< \brief 2FD08, CPUx external event register*/
       __IO Ifx_CPU_CR_SW_EX_EVT                HRB_CREVT;              /**< \brief 2FD0C, CPUx core register access event*/
       __IO Ifx_CPU_CR_SW_EX_EVT                HRB_SWEVT;              /**< \brief 2FD10, CPUx software debug event*/
       __IO Ifx_CPU_DBGACT                      HRB_DBGACT;             /**< \brief 2FD14, CPUx debug action configuration*/
       __I  Ifx_UReg_8Bit                       reserved_2FD18[24];     /**< \brief 2FD18, \internal Reserved */
       __I  Ifx_CPU_TRIG_ACC                    HRB_TRIG_ACC;           /**< \brief 2FD30, CPUx trigger accumulator*/
       __I  Ifx_UReg_8Bit                       reserved_2FD34[12];     /**< \brief 2FD34, \internal Reserved */
       __IO Ifx_CPU_DMS                         HRB_DMS;                /**< \brief 2FD40, CPUx debug monitor start address*/
       __IO Ifx_CPU_DCX                         HRB_DCX;                /**< \brief 2FD44, CPUx debug context save area pointer*/
       __IO Ifx_CPU_DBGTCR                      HRB_DBGTCR;             /**< \brief 2FD48, CPUx debug trap control*/
       __IO Ifx_CPU_DBGCFG                      HRB_DBGCFG;             /**< \brief 2FD4C, CPUx debug configuration*/
       __IO Ifx_CPU_TRCCFG                      HRB_TRCCFG;             /**< \brief 2FD50, CPUx trace configuration*/
       __IO Ifx_CPU_TRCFILT                     HRB_TRCFILT;            /**< \brief 2FD54, CPUx trace filter*/
       __IO Ifx_CPU_TRCLIM                      HRB_TRCLIM;             /**< \brief 2FD58, CPUx trace bandwidth limiter*/
       __I  Ifx_UReg_8Bit                       reserved_2FD5C[4];      /**< \brief 2FD5C, \internal Reserved */
       __IO Ifx_CPU_TS16P_TC_CTRL0              HRB_TS16PTCCTRL;        /**< \brief 2FD60, CPUx MCDS performance counter control register*/
       __I  Ifx_UReg_8Bit                       reserved_2FD64[156];    /**< \brief 2FD64, \internal Reserved */
       __IO Ifx_CPU_PCXI                        HRB_PCXI;               /**< \brief 2FE00, CPUx previous context information register*/
       __IO Ifx_CPU_PSW                         HRB_PSW;                /**< \brief 2FE04, CPUx HR specific program status word*/
       __IO Ifx_CPU_PC                          HRB_PC;                 /**< \brief 2FE08, CPUx program counter*/
       __I  Ifx_UReg_8Bit                       reserved_2FE0C[8];      /**< \brief 2FE0C, \internal Reserved */
       __IO Ifx_CPU_CORECON                     HRB_CORECON;            /**< \brief 2FE14, CPUx HR specific core configuration register*/
       __I  Ifx_CPU_CPU_ID                      HRB_CPU_ID;             /**< \brief 2FE18, CPUx identification register*/
       __I  Ifx_CPU_CORE_ID                     HRB_CORE_ID;            /**< \brief 2FE1C, CPUx core identification register*/
       __IO Ifx_CPU_BIV                         HRB_BIV;                /**< \brief 2FE20, CPUx HR specific base interrupt vector table pointer*/
       __IO Ifx_CPU_BTV                         HRB_BTV;                /**< \brief 2FE24, CPUx HR specific base trap vector table pointer*/
       __IO Ifx_CPU_ISP                         HRB_ISP;                /**< \brief 2FE28, CPUx HR specific interrupt stack pointer*/
       __IO Ifx_CPU_ICR                         HRB_ICR;                /**< \brief 2FE2C, CPUx interrupt control register*/
       __I  Ifx_UReg_8Bit                       reserved_2FE30[4];      /**< \brief 2FE30, \internal Reserved */
       __IO Ifx_CPU_PPRS                        HRB_PPRS;               /**< \brief 2FE34, CPUx previous PRS*/
       __IO Ifx_CPU_FCX                         HRB_FCX;                /**< \brief 2FE38, CPUx HR specific free CSA list head pointer*/
       __IO Ifx_CPU_LCX                         HRB_LCX;                /**< \brief 2FE3C, CPUx HR specific free CSA list limit pointer*/
       __I  Ifx_CPU_SWID                        HRB_SWID;               /**< \brief 2FE40, CPUx software identification*/
       __I  Ifx_UReg_8Bit                       reserved_2FE44[12];     /**< \brief 2FE44, \internal Reserved */
       __I  Ifx_CPU_CUS_ID                      HRB_CUS_ID;             /**< \brief 2FE50, CPUx customer ID register*/
       __I  Ifx_UReg_8Bit                       reserved_2FE54[12];     /**< \brief 2FE54, \internal Reserved */
       __IO Ifx_CPU_BOOTCON                     HRB_BOOTCON;            /**< \brief 2FE60, CPUx core boot configuration register*/
       __IO Ifx_CPU_LCLCON                      HRB_LCLCON;             /**< \brief 2FE64, CPUx lockstep control register*/
       __IO Ifx_CPU_CCON                        HRB_CCON;               /**< \brief 2FE68, CPUx clock control register*/
       __I  Ifx_CPU_TCCON                       HRB_TCCON;              /**< \brief 2FE6C, CPUx hardware configuration*/
       __I  Ifx_UReg_8Bit                       reserved_2FE70[272];    /**< \brief 2FE70, \internal Reserved */
       __IO Ifx_CPU_AREG                        HRB_A0;                 /**< \brief 2FF80, CPUx HR specific address general purpose register 0*/
       __IO Ifx_CPU_AREG                        HRB_A1;                 /**< \brief 2FF84, CPUx HR specific address general purpose register 0*/
       __I  Ifx_UReg_8Bit                       reserved_2FF88[24];     /**< \brief 2FF88, \internal Reserved */
       __IO Ifx_CPU_AREG                        HRB_A8;                 /**< \brief 2FFA0, CPUx HR specific address general purpose register 8*/
       __IO Ifx_CPU_AREG                        HRB_A9;                 /**< \brief 2FFA4, CPUx HR specific address general purpose register 8*/
       __I  Ifx_UReg_8Bit                       reserved_2FFA8[4232];    /**< \brief 2FFA8, \internal Reserved */
       __IO Ifx_CPU_SEGEN                       HRHV_SEGEN;             /**< \brief 31030, CPUx SRI error generation register*/
       __I  Ifx_UReg_8Bit                       reserved_31034[12];     /**< \brief 31034, \internal Reserved */
       __O  Ifx_CPU_LCLTEST                     HRHV_LCLTEST;           /**< \brief 31040, CPUx lockstep test register*/
       __I  Ifx_UReg_8Bit                       reserved_31044[28860];    /**< \brief 31044, \internal Reserved */
       __IO Ifx_CPU_PMA0                        HRHV_PMA0;              /**< \brief 38100, CPUx data access cacheability register*/
       __IO Ifx_CPU_PMA1                        HRHV_PMA1;              /**< \brief 38104, CPUx code access cacheability register*/
       __I  Ifx_CPU_PMA2                        HRHV_PMA2;              /**< \brief 38108, CPUx peripheral space identifier register*/
       __I  Ifx_UReg_8Bit                       reserved_3810C[3828];    /**< \brief 3810C, \internal Reserved */
       __I  Ifx_CPU_DCON2                       HRHV_DCON2;             /**< \brief 39000, CPUx data control register 2*/
       __I  Ifx_UReg_8Bit                       reserved_39004[4];      /**< \brief 39004, \internal Reserved */
       __IO Ifx_CPU_DCON1                       HRHV_DCON1;             /**< \brief 39008, CPUx data control register 1*/
       __IO Ifx_CPU_SMACON                      HRHV_SMACON;            /**< \brief 3900C, CPUx SIST mode access control register*/
       __IO Ifx_CPU_DSTR                        HRHV_DSTR;              /**< \brief 39010, CPUx HR specific data synchronous trap register*/
       __I  Ifx_UReg_8Bit                       reserved_39014[4];      /**< \brief 39014, \internal Reserved */
       __IO Ifx_CPU_DATR                        HRHV_DATR;              /**< \brief 39018, CPUx HR specific data asynchronous trap register*/
       __I  Ifx_CPU_DEADD                       HRHV_DEADD;             /**< \brief 3901C, CPUx HR specific data error address register*/
       __I  Ifx_CPU_DPIEAR                      HRHV_DIEAR;             /**< \brief 39020, CPUx data integrity error address register*/
       __IO Ifx_CPU_DIETR                       HRHV_DIETR;             /**< \brief 39024, CPUx data integrity error trap register*/
       __I  Ifx_UReg_8Bit                       reserved_39028[24];     /**< \brief 39028, \internal Reserved */
       __IO Ifx_CPU_DCON0                       HRHV_DCON0;             /**< \brief 39040, CPUx data memory control register*/
       __I  Ifx_UReg_8Bit                       reserved_39044[444];    /**< \brief 39044, \internal Reserved */
       __IO Ifx_CPU_PSTR                        HRHV_PSTR;              /**< \brief 39200, CPUx HR specific program synchronous trap register*/
       __IO Ifx_CPU_PCON1                       HRHV_PCON1;             /**< \brief 39204, CPUx program control 1*/
       __I  Ifx_CPU_PCON2                       HRHV_PCON2;             /**< \brief 39208, CPUx program control 2*/
       __IO Ifx_CPU_PCON0                       HRHV_PCON0;             /**< \brief 3920C, CPUx program control 0*/
       __I  Ifx_CPU_DPIEAR                      HRHV_PIEAR;             /**< \brief 39210, CPUx HR specific program integrity error address register*/
       __IO Ifx_CPU_PIETR                       HRHV_PIETR;             /**< \brief 39214, CPUx HR specific program integrity error trap register*/
       __I  Ifx_UReg_8Bit                       reserved_39218[488];    /**< \brief 39218, \internal Reserved */
       __IO Ifx_CPU_COMPAT                      HRHV_COMPAT;            /**< \brief 39400, CPUx compatibility control register*/
       __I  Ifx_UReg_8Bit                       reserved_39404[3068];    /**< \brief 39404, \internal Reserved */
       __IO Ifx_CPU_CON                         HRHV_FPU_TRAP_CON;      /**< \brief 3A000, CPUx HR specific trap control register*/
       __I  Ifx_CPU_FPUPC                       HRHV_FPU_TRAP_PC;       /**< \brief 3A004, CPUx HR specific trapping instruction program counter register*/
       __I  Ifx_CPU_OPC                         HRHV_FPU_TRAP_OPC;      /**< \brief 3A008, CPUx HR specific trapping instruction opcode register*/
       __I  Ifx_UReg_8Bit                       reserved_3A00C[4];      /**< \brief 3A00C, \internal Reserved */
       __I  Ifx_CPU_SRC1_L                      HRHV_FPU_TRAP_SRC1_L;    /**< \brief 3A010, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC1_U                      HRHV_FPU_TRAP_SRC1_U;    /**< \brief 3A014, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC2_L                      HRHV_FPU_TRAP_SRC2_L;    /**< \brief 3A018, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC2_U                      HRHV_FPU_TRAP_SRC2_U;    /**< \brief 3A01C, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC3_L                      HRHV_FPU_TRAP_SRC3_L;    /**< \brief 3A020, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_CPU_SRC3_U                      HRHV_FPU_TRAP_SRC3_U;    /**< \brief 3A024, CPUx HR specific trapping instruction operand register*/
       __I  Ifx_UReg_8Bit                       reserved_3A028[8];      /**< \brief 3A028, \internal Reserved */
       __IO Ifx_CPU_SYNCCON                     HRHV_FPU_SYNC_TRAP_CON;    /**< \brief 3A030, CPUx HR specific synchronous trap control register*/
       __I  Ifx_CPU_OPC                         HRHV_FPU_SYNC_TRAP_OPC;    /**< \brief 3A034, CPUx HR specific trapping instruction opcode register*/
       __I  Ifx_UReg_8Bit                       reserved_3A038[4040];    /**< \brief 3A038, \internal Reserved */
       __IO Ifx_CPU_VCON0                       HRHV_VCON0;             /**< \brief 3B000, CPUx virtualization control register 0*/
       __I  Ifx_CPU_VCON1                       HRHV_VCON1;             /**< \brief 3B004, CPUx virtualization control register 1*/
       __IO Ifx_CPU_VCON2                       HRHV_VCON2;             /**< \brief 3B008, CPUx virtualization control register 2*/
       __I  Ifx_UReg_8Bit                       reserved_3B00C[4];      /**< \brief 3B00C, \internal Reserved */
       __IO Ifx_CPU_BHV                         HRHV_BHV;               /**< \brief 3B010, CPUx base hypervisor vector table pointer*/
       __I  Ifx_UReg_8Bit                       reserved_3B014[236];    /**< \brief 3B014, \internal Reserved */
       __IO Ifx_CPU_VM                          HRHV_VM;                /**< \brief 3B100, */
       __I  Ifx_UReg_8Bit                       reserved_3B220[3552];    /**< \brief 3B220, \internal Reserved */
       __IO Ifx_CPU_DPR                         HRHV_DPR[24];           /**< \brief 3C000, CPUx HR specific data protection range 0, upper bound register*/
       __I  Ifx_UReg_8Bit                       reserved_3C0C0[3904];    /**< \brief 3C0C0, \internal Reserved */
       __IO Ifx_CPU_CPR                         HRHV_CPR[16];           /**< \brief 3D000, CPUx HR specific code protection range 0, upper bound register*/
       __I  Ifx_UReg_8Bit                       reserved_3D080[3968];    /**< \brief 3D080, \internal Reserved */
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_0;            /**< \brief 3E000, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_1;            /**< \brief 3E004, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_2;            /**< \brief 3E008, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_3;            /**< \brief 3E00C, CPUx HR specific code protection execute enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_0;            /**< \brief 3E010, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_1;            /**< \brief 3E014, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_2;            /**< \brief 3E018, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_3;            /**< \brief 3E01C, CPUx HR specific data protection read enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_0;            /**< \brief 3E020, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_1;            /**< \brief 3E024, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_2;            /**< \brief 3E028, CPUx HR specific data protection write enable register set 0*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_3;            /**< \brief 3E02C, CPUx HR specific data protection write enable register set 0*/
       __I  Ifx_UReg_8Bit                       reserved_3E030[16];     /**< \brief 3E030, \internal Reserved */
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_4;            /**< \brief 3E040, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_5;            /**< \brief 3E044, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_6;            /**< \brief 3E048, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_CPXE                        HRHV_CPXE_7;            /**< \brief 3E04C, CPUx HR specific code protection execute enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_4;            /**< \brief 3E050, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_5;            /**< \brief 3E054, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_6;            /**< \brief 3E058, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPRE                        HRHV_DPRE_7;            /**< \brief 3E05C, CPUx HR specific data protection read enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_4;            /**< \brief 3E060, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_5;            /**< \brief 3E064, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_6;            /**< \brief 3E068, CPUx HR specific data protection write enable register set 4*/
       __IO Ifx_CPU_DPWE                        HRHV_DPWE_7;            /**< \brief 3E06C, CPUx HR specific data protection write enable register set 4*/
       __I  Ifx_UReg_8Bit                       reserved_3E070[912];    /**< \brief 3E070, \internal Reserved */
       __IO Ifx_CPU_TPS                         HRHV_TPS;               /**< \brief 3E400, */
       __I  Ifx_UReg_8Bit                       reserved_3E410[3056];    /**< \brief 3E410, \internal Reserved */
       __IO Ifx_CPU_TR                          HRHV_TR[8];             /**< \brief 3F000, CPUx trigger address 0*/
       __I  Ifx_UReg_8Bit                       reserved_3F040[3008];    /**< \brief 3F040, \internal Reserved */
       __IO Ifx_CPU_CCTRL                       HRHV_CCTRL;             /**< \brief 3FC00, CPUx HR specific counter control*/
       __IO Ifx_CPU_CCNT                        HRHV_CCNT;              /**< \brief 3FC04, CPUx HR specific CPU clock cycle count*/
       __IO Ifx_CPU_ICNT                        HRHV_ICNT;              /**< \brief 3FC08, CPUx HR specific instruction count*/
       __IO Ifx_CPU_M1CNT                       HRHV_M1CNT;             /**< \brief 3FC0C, CPUx HR specific multi-count register 1*/
       __IO Ifx_CPU_M2CNT                       HRHV_M2CNT;             /**< \brief 3FC10, CPUx HR specific multi-count register 2*/
       __IO Ifx_CPU_M3CNT                       HRHV_M3CNT;             /**< \brief 3FC14, CPUx HR specific multi-count register 3*/
       __I  Ifx_UReg_8Bit                       reserved_3FC18[232];    /**< \brief 3FC18, \internal Reserved */
       __IO Ifx_CPU_DBGSR                       HRHV_DBGSR;             /**< \brief 3FD00, CPUx debug status register*/
       __I  Ifx_UReg_8Bit                       reserved_3FD04[4];      /**< \brief 3FD04, \internal Reserved */
       __IO Ifx_CPU_CR_SW_EX_EVT                HRHV_EXEVT;             /**< \brief 3FD08, CPUx external event register*/
       __IO Ifx_CPU_CR_SW_EX_EVT                HRHV_CREVT;             /**< \brief 3FD0C, CPUx core register access event*/
       __IO Ifx_CPU_CR_SW_EX_EVT                HRHV_SWEVT;             /**< \brief 3FD10, CPUx software debug event*/
       __IO Ifx_CPU_DBGACT                      HRHV_DBGACT;            /**< \brief 3FD14, CPUx debug action configuration*/
       __I  Ifx_UReg_8Bit                       reserved_3FD18[24];     /**< \brief 3FD18, \internal Reserved */
       __I  Ifx_CPU_TRIG_ACC                    HRHV_TRIG_ACC;          /**< \brief 3FD30, CPUx trigger accumulator*/
       __I  Ifx_UReg_8Bit                       reserved_3FD34[12];     /**< \brief 3FD34, \internal Reserved */
       __IO Ifx_CPU_DMS                         HRHV_DMS;               /**< \brief 3FD40, CPUx debug monitor start address*/
       __IO Ifx_CPU_DCX                         HRHV_DCX;               /**< \brief 3FD44, CPUx debug context save area pointer*/
       __IO Ifx_CPU_DBGTCR                      HRHV_DBGTCR;            /**< \brief 3FD48, CPUx debug trap control*/
       __IO Ifx_CPU_DBGCFG                      HRHV_DBGCFG;            /**< \brief 3FD4C, CPUx debug configuration*/
       __IO Ifx_CPU_TRCCFG                      HRHV_TRCCFG;            /**< \brief 3FD50, CPUx trace configuration*/
       __IO Ifx_CPU_TRCFILT                     HRHV_TRCFILT;           /**< \brief 3FD54, CPUx trace filter*/
       __IO Ifx_CPU_TRCLIM                      HRHV_TRCLIM;            /**< \brief 3FD58, CPUx trace bandwidth limiter*/
       __I  Ifx_UReg_8Bit                       reserved_3FD5C[4];      /**< \brief 3FD5C, \internal Reserved */
       __IO Ifx_CPU_TS16P_TC_CTRL0              HRHV_TS16PTCCTRL;       /**< \brief 3FD60, CPUx MCDS performance counter control register*/
       __I  Ifx_UReg_8Bit                       reserved_3FD64[156];    /**< \brief 3FD64, \internal Reserved */
       __IO Ifx_CPU_PCXI                        HRHV_PCXI;              /**< \brief 3FE00, CPUx previous context information register*/
       __IO Ifx_CPU_PSW                         HRHV_PSW;               /**< \brief 3FE04, CPUx HR specific program status word*/
       __IO Ifx_CPU_PC                          HRHV_PC;                /**< \brief 3FE08, CPUx program counter*/
       __I  Ifx_UReg_8Bit                       reserved_3FE0C[8];      /**< \brief 3FE0C, \internal Reserved */
       __IO Ifx_CPU_CORECON                     HRHV_CORECON;           /**< \brief 3FE14, CPUx HR specific core configuration register*/
       __I  Ifx_CPU_CPU_ID                      HRHV_CPU_ID;            /**< \brief 3FE18, CPUx identification register*/
       __I  Ifx_CPU_CORE_ID                     HRHV_CORE_ID;           /**< \brief 3FE1C, CPUx core identification register*/
       __IO Ifx_CPU_BIV                         HRHV_BIV;               /**< \brief 3FE20, CPUx HR specific base interrupt vector table pointer*/
       __IO Ifx_CPU_BTV                         HRHV_BTV;               /**< \brief 3FE24, CPUx HR specific base trap vector table pointer*/
       __IO Ifx_CPU_ISP                         HRHV_ISP;               /**< \brief 3FE28, CPUx HR specific interrupt stack pointer*/
       __IO Ifx_CPU_ICR                         HRHV_ICR;               /**< \brief 3FE2C, CPUx interrupt control register*/
       __I  Ifx_UReg_8Bit                       reserved_3FE30[4];      /**< \brief 3FE30, \internal Reserved */
       __IO Ifx_CPU_PPRS                        HRHV_PPRS;              /**< \brief 3FE34, CPUx previous PRS*/
       __IO Ifx_CPU_FCX                         HRHV_FCX;               /**< \brief 3FE38, CPUx HR specific free CSA list head pointer*/
       __IO Ifx_CPU_LCX                         HRHV_LCX;               /**< \brief 3FE3C, CPUx HR specific free CSA list limit pointer*/
       __I  Ifx_CPU_SWID                        HRHV_SWID;              /**< \brief 3FE40, CPUx software identification*/
       __I  Ifx_UReg_8Bit                       reserved_3FE44[12];     /**< \brief 3FE44, \internal Reserved */
       __I  Ifx_CPU_CUS_ID                      HRHV_CUS_ID;            /**< \brief 3FE50, CPUx customer ID register*/
       __I  Ifx_UReg_8Bit                       reserved_3FE54[12];     /**< \brief 3FE54, \internal Reserved */
       __IO Ifx_CPU_BOOTCON                     HRHV_BOOTCON;           /**< \brief 3FE60, CPUx core boot configuration register*/
       __IO Ifx_CPU_LCLCON                      HRHV_LCLCON;            /**< \brief 3FE64, CPUx lockstep control register*/
       __IO Ifx_CPU_CCON                        HRHV_CCON;              /**< \brief 3FE68, CPUx clock control register*/
       __I  Ifx_CPU_TCCON                       HRHV_TCCON;             /**< \brief 3FE6C, CPUx hardware configuration*/
       __I  Ifx_UReg_8Bit                       reserved_3FE70[272];    /**< \brief 3FE70, \internal Reserved */
       __IO Ifx_CPU_AREG                        HRHV_A0;                /**< \brief 3FF80, CPUx HR specific address general purpose register 0*/
       __IO Ifx_CPU_AREG                        HRHV_A1;                /**< \brief 3FF84, CPUx HR specific address general purpose register 0*/
       __I  Ifx_UReg_8Bit                       reserved_3FF88[24];     /**< \brief 3FF88, \internal Reserved */
       __IO Ifx_CPU_AREG                        HRHV_A8;                /**< \brief 3FFA0, CPUx HR specific address general purpose register 8*/
       __IO Ifx_CPU_AREG                        HRHV_A9;                /**< \brief 3FFA4, CPUx HR specific address general purpose register 8*/
       __I  Ifx_UReg_8Bit                       reserved_3FFA8[88];     /**< \brief 3FFA8, \internal Reserved */
} Ifx_CPU;

/** \}  */
/******************************************************************************/
/** \}  */

/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXCPU_REGDEF_H */
