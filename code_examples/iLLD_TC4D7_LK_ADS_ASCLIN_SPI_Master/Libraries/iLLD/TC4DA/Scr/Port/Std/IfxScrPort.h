/**
 * \file IfxScrPort.h
 * \brief SCR PORT  basic functionality
 * \ingroup IfxLld_Scr
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such
 * terms of use are agreed, use of this file is subject to following:
 *
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or
 * organization obtaining a copy of the software and accompanying
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Scr_Port_Usage How to use the Port driver?
 *  \ingroup IfxLld_Scr
 *
 *  Steps to use the driver:
 *
 *  \section IfxLld_Scr_Port_Preparation Preparation
 *  \subsection IfxLld_Scr_Port_Include Include Files
 *
 *  Include following header file into your C code:
 *  \code
 *  #include <Port/Std/IfxScrPort.h>
 *  \endcode
 *
 *  \subsection IfxLld_Scr_Port Port configuration
 *  \code
 *
 *  //In the below example for illustration purpose P01.3 is configured as output and P02.2 is configured as input
 *  IfxScrPort_PinConfig pinOpCfg = {IfxScrPort_Index_01, IfxScrPort_PinIndex_3, IfxScrPort_IoControl_output_pushpullGpio, IfxScrPort_PadDriver_cmosAutomotiveSpeed1};
 *  IfxScrPort_PinConfig pinIpCfg = {IfxScrPort_Index_02, IfxScrPort_PinIndex_2, IfxScrPort_IoControl_input_tristate, IfxScrPort_PadDriver_cmosAutomotiveSpeed1};
 *
 *  IfxScrPort_configurePin(&pinOpCfg);
 *  IfxScrPort_enablePortPad(pinOpCfg.port, pinOpCfg.pin);
 *
 *  IfxScrPort_configurePin(&pinIpCfg);
 *  IfxScrPort_enablePortPad(pinIpCfg.port,pinIpCfg.pin);
 *
 *  // Toggle Pin
 *  {
 *  	IfxScrPort_setPinHigh(pinOpCfg.port, pinOpCfg.pin);
 *  	delay();
 *  	IfxScrPort_setPinLow(pinOpCfg.port, pinOpCfg.pin)
 *  }
 *
 *  // Toggle Pin
 *  {
 *  	IfxScrPort_togglePinState(pinOpCfg.port, pinOpCfg.pin);
 *  	delay();
 *  	IfxScrPort_togglePinState(pinOpCfg.port, pinOpCfg.pin);
 *  }
 *
 *  \endcode
 *
 *  NOTE : User has to pass the pins appropriately. TC4DXPD_BGA436_COM pin package
 *  has additional pins P2.5 to P2.7 and P3.5 to P3.7.
 *
 * \defgroup IfxLld_Scr_Port PORT
 * \ingroup IfxLld_Scr
 * \defgroup IfxLld_Scr_Port_Enumerations Enum
 * \ingroup IfxLld_Scr_Port
 * \defgroup IfxLld_Scr_Port_DataStructures Data structures
 * \ingroup IfxLld_Scr_Port
 * \defgroup IfxLld_Scr_Port_init Port Functionality
 * \ingroup IfxLld_Scr_Port
 */

#ifndef IFXSCRPORT_H
#define IFXSCRPORT_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/
#include "_Impl/IfxScrPort_cfg.h"
#include "_Reg/IfxScr_bf.h"
#include "_Reg/IfxScr_reg.h"
#include "_Utilities/Ifx_Assert.h"

/******************************************************************************/
/*-------------------------------Enumerations---------------------------------*/
/******************************************************************************/
/** \addtogroup IfxLld_Scr_Port_Enumerations
 * \{ */
/** \brief Port Number
 */
typedef enum
{
    IfxScrPort_Index_00 = 0,   /**< \brief Port 00 */
    IfxScrPort_Index_01 = 1,   /**< \brief Port 01 */
    IfxScrPort_Index_02 = 2,   /**< \brief Port 02 */
    IfxScrPort_Index_03 = 3    /**< \brief Port 03 */
} IfxScrPort_Index;

/** \brief Speed(value depends on pad type-fast or slow) and logic family characteristics for pin driver.
 * P00 -> all slow P33.0-P33.7
 * P01.0 ->slow 34.1
 * P01.1 -> slow 33.9
 * P01.2 -> fast 33.10
 * P01.3 -> fast 33.11
 * P01.4 -> fast 33.12
 * P01.5 -> fast 33.13
 * P01.6 -> fast 33.14
 * P01.7 -> slow 33.15
 */
typedef enum
{
    IfxScrPort_PadDriver_cmosAutomotiveSpeed1 = 0,
    IfxScrPort_PadDriver_cmosAutomotiveSpeed2 = 0x1,
    IfxScrPort_PadDriver_cmosAutomotiveSpeed3 = 0x2,
    IfxScrPort_PadDriver_ttl5vSpeed1          = 0x8,
    IfxScrPort_PadDriver_ttl5vSpeed2          = 0x9,
    IfxScrPort_PadDriver_ttl5vSpeed3          = 0xA,
    IfxScrPort_PadDriver_ttl3v3Speed1         = 0xC,
    IfxScrPort_PadDriver_ttl3v3Speed2         = 0xD,
    IfxScrPort_PadDriver_ttl3v3Speed3         = 0xE
} IfxScrPort_PadDriver;

/** \brief IO Page number for accessing Port SFRs
 */
typedef enum
{
    IfxScrPort_Page_0 = 0,  /**< \brief IO Page 0 */
    IfxScrPort_Page_1 = 1,  /**< \brief IO Page 1 */
    IfxScrPort_Page_2 = 2   /**< \brief IO Page 2 */
} IfxScrPort_Page;

/** \brief Pin number for each of the ports
 */
typedef enum
{
    IfxScrPort_PinIndex_0 = 0,  /**< \brief Pin 0 */
    IfxScrPort_PinIndex_1 = 1,  /**< \brief Pin 1 */
    IfxScrPort_PinIndex_2 = 2,  /**< \brief Pin 2 */
    IfxScrPort_PinIndex_3 = 3,  /**< \brief Pin 3 */
    IfxScrPort_PinIndex_4 = 4,  /**< \brief Pin 4 */
    IfxScrPort_PinIndex_5 = 5,  /**< \brief Pin 5 */
    IfxScrPort_PinIndex_6 = 6,  /**< \brief Pin 6 */
    IfxScrPort_PinIndex_7 = 7,  /**< \brief Pin 7 */
} IfxScrPort_PinIndex;

/** \brief Logic level on pins.
 */
typedef enum
{
    IfxScrPort_PinState_low  = 0, /**< \brief Logic level low('0') */
    IfxScrPort_PinState_high = 1  /**< \brief Logic level high('0') */
} IfxScrPort_PinState;

/** \brief Enumeration describing the port line functionality.
 *  Driver modes for each pin.To be filled in Pn_IOCRk.PC
 */
typedef enum
{
    IfxScrPort_IoControl_input_tristate       = 0x0,    /**< \brief No input pull device connected, tri-state mode */
    IfxScrPort_IoControl_input_pulldown       = 0x1,    /**< \brief Input pull down device connected */
    IfxScrPort_IoControl_input_pullup         = 0x2,    /**< \brief Input pull up device connected */
    IfxScrPort_IoControl_output_pushpullGpio  = 0x10,   /**< \brief Push pull general purpose output */
    IfxScrPort_IoControl_output_pushpullAlt1  = 0x11,   /**< \brief Push pull Alternate output function 1 */
    IfxScrPort_IoControl_output_pushpullAlt2  = 0x12,   /**< \brief Push pull Alternate output function 2 */
    IfxScrPort_IoControl_output_pushpullAlt3  = 0x13,   /**< \brief Push pull Alternate output function 3 */
    IfxScrPort_IoControl_output_pushpullAlt4  = 0x14,   /**< \brief Push pull Alternate output function 4 */
    IfxScrPort_IoControl_output_pushpullAlt5  = 0x15,   /**< \brief Push pull Alternate output function 5 */
    IfxScrPort_IoControl_output_pushpullAlt6  = 0x16,   /**< \brief Push pull Alternate output function 6 */
    IfxScrPort_IoControl_output_pushpullAlt7  = 0x17,   /**< \brief Push pull Alternate output function 7 */
    IfxScrPort_IoControl_output_opendrainGpio = 0x18,   /**< \brief Open drain general purpose output */
    IfxScrPort_IoControl_output_opendrainAlt1 = 0x19,   /**< \brief Open drain Alternate output function 1 */
    IfxScrPort_IoControl_output_opendrainAlt2 = 0x1A,   /**< \brief Open drain Alternate output function 2 */
    IfxScrPort_IoControl_output_opendrainAlt3 = 0x1B,   /**< \brief Open drain Alternate output function 3 */
    IfxScrPort_IoControl_output_opendrainAlt4 = 0x1C,   /**< \brief Open drain Alternate output function 4 */
    IfxScrPort_IoControl_output_opendrainAlt5 = 0x1D,   /**< \brief Open drain Alternate output function 5 */
    IfxScrPort_IoControl_output_opendrainAlt6 = 0x1E,   /**< \brief Open drain Alternate output function 6 */
    IfxScrPort_IoControl_output_opendrainAlt7 = 0x1F    /**< \brief Open drain Alternate output function 7 */
} IfxScrPort_Mode;

/** \} */

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/
/** \addtogroup IfxLld_Scr_Port_DataStructures
 * \{ */

/** \brief Configurable parameters for any pin
 */
typedef struct
{
    IfxScrPort_Index     port;            /**< \brief Port number */
    IfxScrPort_PinIndex  pin;             /**< \brief Pin number */
    IfxScrPort_Mode      pinMode;         /**< \brief Sets pin to be input or output with IO type(push-pull/open drain) and output functionality(GPIO,alt1 to alt7) of the pin. */
    IfxScrPort_PadDriver driverMode;      /**< \brief Driver type(cmos,ttl_5v,ttl_3.3v) and speed mode(depends on the pad type - fast or slow)*/
                                          /* * Following info lists which pad is slow and which is fast.
                                           * P00 -> all slow P33.0-P33.7
                                           * P01.0 ->slow 34.1
                                           * P01.1 -> slow 33.9
                                           * P01.2 -> fast 33.10
                                           * P01.3 -> fast 33.11
                                           * P01.4 -> fast 33.12
                                           * P01.5 -> fast 33.13
                                           * P01.6 -> fast 33.14
                                           * P01.7 -> slow 33.15 */
} IfxScrPort_PinConfig;

/** \} */

/** \addtogroup IfxLld_Scr_Port_init
 * \{ */
/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Sets the specified pin to "1" level
 * \param portIndex Port number
 * \param pinIndex Pin number of the port specified by portIndex
 * \return None
 */
IFX_INLINE void IfxScrPort_setPinHigh(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex);

/** \brief Sets the specified pin to "0" level
 * \param portIndex Port number
 * \param pinIndex Pin number of the port specified by portIndex
 * \return None
 */
IFX_INLINE void IfxScrPort_setPinLow(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex);

/** \brief Toggles the logic level at the specified pin
 * \param portIndex Port number
 * \param pinIndex Pin number of the port specified by portIndex
 * \return None
 */
IFX_INLINE void IfxScrPort_togglePinState(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex);

/**\brief Function to get pin state (low/high)
 * \param portIndex Port number
 * \param pinIndex Pin number of the port specified by portIndex
 * \return Returns the logic level of the specified pin.
 */
IFX_INLINE IfxScrPort_PinState IfxScrPort_getPinState(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex);

/** \brief Sets the specific pin to a specified logic level.
 * \param portIndex Port Number
 * \param pinIndex Pin Number
 * \param state Logic level to be set
 * \return None
 */
IFX_INLINE void IfxScrPort_setPinState(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex, IfxScrPort_PinState state);

/** \brief Sets the IO page for accessing required SFRs
 * \param page IO Page Number
 * \return None
 */
IFX_INLINE void IfxScrPort_setIoPage(IfxScrPort_Page page);

/** \brief Enables all pads of a specified port
 * \param port Port Number
 * \param pinIndex Pin Index
 * \return None
 */
IFX_INLINE void IfxScrPort_enablePortPad(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex);

/** \brief Disables all pads of a specified port
 * \param port Port Number
 * \return None
 */
IFX_INLINE void IfxScrPort_disablePortPad(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex);

/** \brief Function to configure input/output control registers.
 *  User has to pass the pins appropriately. TC4DXPD_BGA436_COM pin package
 *  has additional pins P2.5 to P2.7 and P3.5 to P3.7.
 * \param port Port Number
 * \param pinIndex Pin Index
 * \return None
 */
IFX_INLINE void IfxScrPort_configurePortControl(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex, IfxScrPort_Mode controlValue);

/** \brief Function to set pad driver mode.
 * \param port Port Number
 * \param pinIndex Pin Index
 * \return None
 */
IFX_INLINE void IfxScrPort_setPadDriverMode(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex, IfxScrPort_PadDriver mode);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief This will configure a specified pin and pad of a specified port.
 * For using this ,first define a structure of type IfxScrPort_PinConfig.Fill in the values and pass the address of this to the function.
 * \param pinConfig Structure for pin configuration containing the port and pin index with pin and pad configuration.
 * \return None
 *
 * IfxScrPort_PinConfig pinConfig;
 *
 * pinConfig.port = IfxScrPort_Index_00;
 * pinConfig.pin = IfxScrPortPin_Index_0;
 * pinConfig.pinMode = IfxScrPort_Mode_outputPushPullGeneral;
 * pinConfig.driverMode =  IfxScrPort_PadDriver_cmosAutomotiveSpeed1;
 *
 * IfxScrPort_configurePin(&pinConfig);
 *
 */
IFX_EXTERN void IfxScrPort_configurePin(IfxScrPort_PinConfig *pinConfig);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE void IfxScrPort_setPinHigh(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex)
{
    IfxScrPort_setIoPage(IfxScrPort_Page_0);

    if (portIndex == IfxScrPort_Index_00)
    {
        SCR_P0_OMSR.U = (SCR_P0_OMSR.U | (1 << pinIndex));
    }
    else if (portIndex == IfxScrPort_Index_01)
    {
        SCR_P1_OMSR.U = (SCR_P1_OMSR.U | (1 << pinIndex));
    }
    else if (portIndex == IfxScrPort_Index_02)
    {
            SCR_P2_OMSR.U = (SCR_P2_OMSR.U | (1 << pinIndex));
    }
    else
    {
            SCR_P3_OMSR.U = (SCR_P3_OMSR.U | (1 << pinIndex));
    }
}


IFX_INLINE void IfxScrPort_setPinLow(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex)
{
    IfxScrPort_setIoPage(IfxScrPort_Page_0);

    if (portIndex == IfxScrPort_Index_00)
    {
        SCR_P0_OMCR.U = (SCR_P0_OMCR.U | (1 << pinIndex));
    }
    else if (portIndex == IfxScrPort_Index_01)
    {
        SCR_P1_OMCR.U = (SCR_P1_OMCR.U | (1 << pinIndex));
    }
    else if (portIndex == IfxScrPort_Index_02)
    {
            SCR_P2_OMCR.U = (SCR_P2_OMCR.U | (1 << pinIndex));
    }
    else
    {
            SCR_P3_OMCR.U = (SCR_P3_OMCR.U | (1 << pinIndex));
    }
}


IFX_INLINE void IfxScrPort_togglePinState(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex)
{
    IfxScrPort_setIoPage(IfxScrPort_Page_0);

    if (portIndex == IfxScrPort_Index_00)
    {
        SCR_P0_OMTR.U = (SCR_P0_OMTR.U | (1 << pinIndex));
    }
    else if (portIndex == IfxScrPort_Index_01)
    {
        SCR_P1_OMTR.U = (SCR_P1_OMTR.U | (1 << pinIndex));
    }
    else if (portIndex == IfxScrPort_Index_02)
    {
            SCR_P2_OMTR.U = (SCR_P2_OMTR.U | (1 << pinIndex));
    }
    else
    {
            SCR_P3_OMTR.U = (SCR_P3_OMTR.U | (1 << pinIndex));
    }
}


IFX_INLINE IfxScrPort_PinState IfxScrPort_getPinState(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex)
{
    IfxScrPort_PinState pinState;
    IfxScrPort_setIoPage(IfxScrPort_Page_0);

    if (portIndex == IfxScrPort_Index_00)
    {
        pinState = (IfxScrPort_PinState)((SCR_P0_IN.U & (1 << pinIndex)) >> pinIndex);
    }
    else if (portIndex == IfxScrPort_Index_01)
    {
        pinState = (IfxScrPort_PinState)((SCR_P1_IN.U & (1 << pinIndex)) >> pinIndex);
    }
    else if (portIndex == IfxScrPort_Index_02)
    {
            pinState = (IfxScrPort_PinState)((SCR_P2_IN.U & (1 << pinIndex)) >> pinIndex);
    }
    else
    {
            pinState = (IfxScrPort_PinState)((SCR_P3_IN.U & (1 << pinIndex)) >> pinIndex);
    }

    return pinState;
}


IFX_INLINE void IfxScrPort_setPinState(IfxScrPort_Index portIndex, IfxScrPort_PinIndex pinIndex, IfxScrPort_PinState state)
{
    if (state == IfxScrPort_PinState_low)
    {
        IfxScrPort_setPinLow(portIndex, pinIndex);
    }
    else
    {
        IfxScrPort_setPinHigh(portIndex, pinIndex);
    }
}


IFX_INLINE void IfxScrPort_setIoPage(IfxScrPort_Page page)
{
    SCR_IO_PAGE.U = ((SCR_IO_PAGE.U & (unsigned char)~IFX_SCR_PAGE_PAGE_MSK) | page);
}


IFX_INLINE void IfxScrPort_enablePortPad(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex)
{
    IfxScrPort_setIoPage(IfxScrPort_Page_2);

    if (port == IfxScrPort_Index_00)
    {
        SCR_P0_PDISC.U &= ~(1 << pinIndex);
    }
    else if (port == IfxScrPort_Index_01)
    {
        SCR_P1_PDISC.U &= ~(1 << pinIndex);
    }
    else if (port == IfxScrPort_Index_02)
    {
        SCR_P2_PDISC.U &= ~(1 << pinIndex);
    }
    else
    {
        SCR_P3_PDISC.U &= ~(1 << pinIndex);
    }
}


IFX_INLINE void IfxScrPort_disablePortPad(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex)
{
    IfxScrPort_setIoPage(IfxScrPort_Page_2);

    if (port == IfxScrPort_Index_00)
    {
        SCR_P0_PDISC.U |= (1 << pinIndex);
    }
    else if (port == IfxScrPort_Index_01)
    {
        SCR_P1_PDISC.U |= (1 << pinIndex);
    }
    else if (port == IfxScrPort_Index_02)
    {
        SCR_P2_PDISC.U |= (1 << pinIndex);
    }
    else
    {
        SCR_P3_PDISC.U |= (1 << pinIndex);
    }
}


IFX_INLINE void IfxScrPort_configurePortControl(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex, IfxScrPort_Mode controlValue)
{
    IfxScrPort_setIoPage(IfxScrPort_Page_1);

    if (port == IfxScrPort_Index_00)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P0_IOCR0.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P0_IOCR1.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P0_IOCR2.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P0_IOCR3.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P0_IOCR4.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P0_IOCR5.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P0_IOCR6.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P0_IOCR7.B.PC = controlValue;
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else if (port == IfxScrPort_Index_01)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P1_IOCR0.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P1_IOCR1.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P1_IOCR2.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P1_IOCR3.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P1_IOCR4.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P1_IOCR5.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P1_IOCR6.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P1_IOCR7.B.PC = controlValue;
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else if (port == IfxScrPort_Index_02)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P2_IOCR0.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P2_IOCR1.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P2_IOCR2.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P2_IOCR3.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P2_IOCR4.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_5:
			SCR_P2_IOCR5.B.PC = controlValue;
			break;
		case IfxScrPort_PinIndex_6:
			SCR_P2_IOCR6.B.PC = controlValue;
			break;
		case IfxScrPort_PinIndex_7:
			SCR_P2_IOCR7.B.PC = controlValue;
			break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else if (port == IfxScrPort_Index_03)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P3_IOCR0.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P3_IOCR1.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P3_IOCR2.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P3_IOCR3.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P3_IOCR4.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P3_IOCR5.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P3_IOCR6.B.PC = controlValue;
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P3_IOCR7.B.PC = controlValue;
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else
    {
    	/* dummy else*/
    }
}


IFX_INLINE void IfxScrPort_setPadDriverMode(IfxScrPort_Index port, IfxScrPort_PinIndex pinIndex, IfxScrPort_PadDriver mode)
{
    uint8           shift  = 4;
    IfxScrPort_setIoPage(IfxScrPort_Page_2);

    if (port == IfxScrPort_Index_00)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P0_PDR0.U = ((SCR_P0_PDR0.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P0_PDR0.U = ((SCR_P0_PDR0.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P0_PDR2.U = ((SCR_P0_PDR2.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P0_PDR2.U = ((SCR_P0_PDR2.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P0_PDR4.U = ((SCR_P0_PDR4.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P0_PDR4.U = ((SCR_P0_PDR4.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P0_PDR6.U = ((SCR_P0_PDR6.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P0_PDR6.U = ((SCR_P0_PDR6.U & 0x0F) | (mode << shift));
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else if (port == IfxScrPort_Index_01)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P1_PDR0.U = ((SCR_P1_PDR0.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P1_PDR0.U = ((SCR_P1_PDR0.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P1_PDR2.U = ((SCR_P1_PDR2.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P1_PDR2.U = ((SCR_P1_PDR2.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P1_PDR4.U = ((SCR_P1_PDR4.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P1_PDR4.U = ((SCR_P1_PDR4.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P1_PDR6.U = ((SCR_P1_PDR6.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P1_PDR6.U = ((SCR_P1_PDR6.U & 0x0F) | (mode << shift));
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else if (port == IfxScrPort_Index_02)
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P2_PDR0.U = ((SCR_P2_PDR0.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P2_PDR0.U = ((SCR_P2_PDR0.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P2_PDR2.U = ((SCR_P2_PDR2.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P2_PDR2.U = ((SCR_P2_PDR2.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P2_PDR4.U = ((SCR_P2_PDR4.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P2_PDR4.U = ((SCR_P2_PDR4.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P2_PDR6.U = ((SCR_P2_PDR6.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P2_PDR6.U = ((SCR_P2_PDR6.U & 0x0F) | (mode << shift));
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
    else
    {
        switch (pinIndex)
        {
        case IfxScrPort_PinIndex_0:
        	SCR_P3_PDR0.U = ((SCR_P3_PDR0.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_1:
        	SCR_P3_PDR0.U = ((SCR_P3_PDR0.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_2:
        	SCR_P3_PDR2.U = ((SCR_P3_PDR2.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_3:
        	SCR_P3_PDR2.U = ((SCR_P3_PDR2.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_4:
        	SCR_P3_PDR4.U = ((SCR_P3_PDR4.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_5:
        	SCR_P3_PDR4.U = ((SCR_P3_PDR4.U & 0x0F) | (mode << shift));
            break;
        case IfxScrPort_PinIndex_6:
        	SCR_P3_PDR6.U = ((SCR_P3_PDR6.U & 0xF0) | (mode));
            break;
        case IfxScrPort_PinIndex_7:
        	SCR_P3_PDR6.U = ((SCR_P3_PDR6.U & 0x0F) | (mode << shift));
            break;
        default:
            /* Invalid Pin selected */
            break;
        }
    }
}


#endif /* IFXSCRPORT_H */
