/**********************************************************************************************************************
 * \file LMU_MPU_Test.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef LMU_MPU_TEST_H_
#define LMU_MPU_TEST_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "LMU_MPU.h"
#include "Ifx_Types.h"
#include "IfxPort.h"
#include "Bsp.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
/* LEDs */
#define LED_SUCCESS                 &MODULE_P13, 3                      /* LED which is turned on in SUCCESS access  */

/* Cores */
#define TEST_CORE_0                 0
#define TEST_CORE_1                 1
#define TEST_CORE_2                 2
#define TEST_CORE_3                 3
#define TEST_CORE_4                 4
#define TEST_CORE_5                 5

/** Choosing each cores as the "test configuration core" and the "test execution core".
 *  Default: core0 is using as the test "configuration" and core1 is using as the test "execution".
 *  TEST_CORE_0 : TEST_CORE_CONFIG
 *  TEST_CORE_1:  TEST_CORE_EXECUTE
 *  Note: The same core cannot be used for the "configuration" and "execution".
 */
#define TEST_ID                     TEST_1
#define TEST_CORE_CONFIG            TEST_CORE_0
#define TEST_CORE_EXECUTE           TEST_CORE_1

/**
 * Test Examples:
 * Please refer to the README.md, which is explained completely all Test scenarios.
 *
 * "Configuration" and "Execute" has been done for all Tests on LMU memories.
 *
 * "Access" means that, the access of the CPU Execute to the target region.
 *
 * TEST_1                     1 -> Access: Yes       Write: Success             Read: Success (No Trap)
 * TEST_2                     2 -> Access: No        Write: Silently ignored    Read: Expect to Trap (Class:4 Tin:2)
 * TEST_3_NON_OVERLAP         3 -> Access: No        Write: Silently ignored    Read: Expect to Trap (Class:4 Tin:2)
 * TEST_4_OVERLAP             4 -> Access: Yes       Write: Success             Read: Success (No Trap)
 * TEST_5 (Test for Alarm))   5 -> Write only        write: ALM7[15] is triggered when the CPU writes the area other
 *                                                   than the write protection area.
 *
 *
 * Test3 and Test4 Overlap Regions:
 * 0xB0040000 up to 0xB004003F
 * ----------------------------------------------------------------------------
 * |         Region0         |   Region2  | Region3 |..........|  Region 15   |
 * ----------------------------------------------------------------------------
 * |Non-overlap |      Region 1 (overlap) |
 * ----------------------------------------
 *              0xB0040020 up to 0xB004003F
 *
 */

/* Define different Test scenarios:  */
#define TEST_UNKNOWN                0
#define TEST_1                      1
#define TEST_2                      2
#define TEST_3                      3
#define TEST_4                      4
#define TEST_5                      5


#define WAIT_TIME                   50    /* Waiting phase in order to not interfere with the pipelining process which
                                           * is reported as a problem in setting of the protection change.
                                           */

/** This macro can be used for synchronization among multiple cores according to the number of core being enabled.
 * In case user didn't define this macro, by default this mask will be generated for all the available cores of the device.
 * e.g:
 * 2. Check for synchronization core 0 and core 1
 * # define 0x03
 *
 * Note:
 * Core id values read from CORE_ID register will be as shown below. The value
 * indicates the position of the bit needs to be set while building the macro.
 * Core 0: 0
 * Core 1: 1
 * Core 2: 2
 * Core 3: 3
 * Core 4: 4
 * Core 5: 6
 */
#ifdef IFXCPU_CFG_ALLCORE_DONE
#undef IFXCPU_CFG_ALLCORE_DONE
#endif
#define IFXCPU_CFG_ALLCORE_DONE      (0x03)


/* Region size must be aligned to 2^5 (bits 4:0 of the protection regions registers are reserved)               */
#define REGION_SIZE                 32                                    /* Byte - range size                  */
#define REGION_NUM                  16                                    /* Numbers of ranges                  */
#define ALL_REGION_SIZE             (REGION_NUM * REGION_SIZE)

/*********************************************************************************************************************/
/*------------------------Function Implementations for Test1, Test2, Test3, Test 4 and Test5 ------------------------*/
/*********************************************************************************************************************/
/* LED control function */
void Test_LED_init(void);

 /* Functions for Test1 configuration/execution */
void Test1_configuration(void);
void Test1_execute(void);

/* Function for Test2 configuration/execution */
void Test2_configuration(void);
void Test2_execute(void);

/* Function for Test3 configuration/execution */
void Test3_configuration(void);
void Test3_execute(void);

/* Function for Test4 configuration/execution */
void Test4_configuration(void);
void Test4_execute(void);

/* Function for Test5 configuration/execution */
void Test5_configuration(void);
void Test5_execute(void);

#endif /* LMU_MPU_TEST_H_ */
