/**********************************************************************************************************************
 * \file scr_uart_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_UART_SDCC_H_
#define SCR_UART_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"

/*********************************************************************************************************************/
/*--------------------------------------------------UART Registers---------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_UART_SBUF)              SCR_UART_SBUF;
__sfr __at(ADDR_SCR_UART_SCON)              SCR_UART_SCON;
__sfr __at(ADDR_SCR_UART_BCON)              SCR_UART_BCON;
__sfr __at(ADDR_SCR_UART_LINST)             SCR_UART_LINST;
__sfr __at(ADDR_SCR_UART_BGL)               SCR_UART_BGL;
__sfr __at(ADDR_SCR_UART_BGH)               SCR_UART_BGH;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_UART_Registers_Bitfields
 * \{  */

/** \brief Serial Data Buffer */
typedef struct
{
    Scr_UReg_8Bit VAL;              /**< \brief [7:0] Serial Interface Buffer Register (rwh) */
} Scr_UART_SBUF_Bits;

/** \brief Serial Channel Control Register */
typedef struct
{
    Scr_UReg_8Bit RI:1;             /**< \brief [0:0] Receive Interrupt Flag (rwh) */
    Scr_UReg_8Bit TI:1;             /**< \brief [1:1] Transmit Interrupt Flag (rwh) */
    Scr_UReg_8Bit RB8:1;            /**< \brief [2:2] Serial Port Receiver Bit 9 (rwh) */
    Scr_UReg_8Bit TB8:1;            /**< \brief [3:3] Serial Port Transmitter Bit 9 (rw) */
    Scr_UReg_8Bit REN:1;            /**< \brief [4:4] Enable Receiver of Serial Port (rw) */
    Scr_UReg_8Bit SM2:1;            /**< \brief [5:5] Enable Serial Port Multiprocessor Communication in Modes 2 and 3 (rw) */
    Scr_UReg_8Bit SM01:2;           /**< \brief [7:6] Serial Port Operating Mode Selection (rw) */
} Scr_UART_SCON_Bits;

/** \brief Baudrate Control Register */
typedef struct
{
    Scr_UReg_8Bit R:1;              /**< \brief [0:0] Baudrate Generator Run Control Bit (rw) */
    Scr_UReg_8Bit BRPRE:3;          /**< \brief [3:1] Prescaler Bit (rw) */
    Scr_UReg_8Bit BRDIS:1;          /**< \brief [4:4] Baudrate Detection Disable (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [5:5] \internal Reserved */
    Scr_UReg_8Bit BGSEL:2;          /**< \brief [7:6] Baudrate Select for Detection (rw) */
} Scr_UART_BCON_Bits;

/** \brief LIN Status Register */
typedef struct
{
    Scr_UReg_8Bit reserved_0:3;     /**< \brief [2:0] \internal Reserved */
    Scr_UReg_8Bit BRK:1;            /**< \brief [3:3] Break Field Flag (rwh) */
    Scr_UReg_8Bit EOFSYN:1;         /**< \brief [4:4] End of SYN Byte Interrupt Flag (rwh) */
    Scr_UReg_8Bit ERRSYN:1;         /**< \brief [5:5] SYN Byte Error Interrupt Flag (rwh) */
    Scr_UReg_8Bit SYNEN:1;          /**< \brief [6:6] End of SYN Byte and SYN Byte Error Interrupts Enable (rw) */
    Scr_UReg_8Bit reserved_1:1;     /**< \brief [7:7] \internal Reserved */
} Scr_UART_LINST_Bits;

/** \brief Baudrate Timer/Reload Register, Low Byte */
typedef struct
{
    Scr_UReg_8Bit FD_SEL:5;         /**< \brief [4:0] Fractional Divider Selection (rw) */
    Scr_UReg_8Bit BR_VALUE:3;       /**< \brief [7:5] Baudrate Timer/Reload Value [2:0] (rwh) */
} Scr_UART_BGL_Bits;

/** \brief Baudrate Timer/Reload Register, High Byte */
typedef struct
{
    Scr_UReg_8Bit BR_VALUE;         /**< \brief [7:0] Baudrate Timer/Reload Value [10:3] (rwh) */
} Scr_UART_BGH_Bits;

/** \}  */

/** \addtogroup Scr_UART_Registers_union
 * \{   */

/** \brief Serial Data Buffer */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_UART_SBUF_Bits B;           /**< \brief Bitfield access */
} Scr_UART_SBUF;

/** \brief Serial Channel Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_UART_SCON_Bits B;           /**< \brief Bitfield access */
} Scr_UART_SCON;

/** \brief Baudrate Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_UART_BCON_Bits B;           /**< \brief Bitfield access */
} Scr_UART_BCON;

/** \brief LIN Status Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_UART_LINST_Bits B;          /**< \brief Bitfield access */
} Scr_UART_LINST;

/** \brief Baudrate Timer/Reload Register, Low Byte */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_UART_BGL_Bits B;            /**< \brief Bitfield access */
} Scr_UART_BGL;

/** \brief Baudrate Timer/Reload Register, High Byte */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_UART_BGH_Bits B;            /**< \brief Bitfield access */
} Scr_UART_BGH;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/

#endif /* SCR_UART_SDCC_H_ */
