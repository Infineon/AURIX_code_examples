/**********************************************************************************************************************
 * \file scr_rtc_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_RTC_SDCC_H_
#define SCR_RTC_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"
#include "scr_sfr_sdcc.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define RTCC_MASK                           (0x01)
#define RTCCLKSEL_MASK                      (0x02)
#define RTPBYP_MASK                         (0x04)
#define RTCCT_MASK                          (0x08)
#define ECRTC_MASK                          (0x10)
#define RTC32SEL_MASK                       (0x20)
#define CFRTC_MASK                          (0x40)
#define INIT32_MASK                         (0x80)

/*********************************************************************************************************************/
/*---------------------------------------------Real-Time Clock Registers---------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_RTC_CON)                SCR_RTC_CON;
__sfr __at(ADDR_SCR_RTC_CNT0)               SCR_RTC_CNT0;
__sfr __at(ADDR_SCR_RTC_CNT1)               SCR_RTC_CNT1;
__sfr __at(ADDR_SCR_RTC_CNT2)               SCR_RTC_CNT2;
__sfr __at(ADDR_SCR_RTC_CNT3)               SCR_RTC_CNT3;
__sfr __at(ADDR_SCR_RTC_CR0)                SCR_RTC_CR0;
__sfr __at(ADDR_SCR_RTC_CR1)                SCR_RTC_CR1;
__sfr __at(ADDR_SCR_RTC_CR2)                SCR_RTC_CR2;    /* bit-addressable SFR */
__sfr __at(ADDR_SCR_RTC_CR3)                SCR_RTC_CR3;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_RTC_Registers_Bitfields
 * \{  */

/** \brief Real-Time Clock Control Register */
typedef struct
{
    Scr_UReg_8Bit RTCC:1;           /**< \brief [0:0] Real-Time Clock Start/Stop Control (rw) */
    Scr_UReg_8Bit RTCCLKSEL:1;      /**< \brief [1:1] Real-Time Clock Input Clock Selection (rw) */
    Scr_UReg_8Bit RTPBYP:1;         /**< \brief [2:2] Real-Time Clock 9-bit Prescaler Bypass (rw) */
    Scr_UReg_8Bit RTCCT:1;          /**< \brief [3:3] Real-Time Clock Capture Event Trigger (rwh) */
    Scr_UReg_8Bit ECRTC:1;          /**< \brief [4:4] Real-Time Clock Compare Interrupt Enable (rw) */
    Scr_UReg_8Bit RTC32SEL:1;       /**< \brief [5:5] External Oscillator Selection (32 kHz / 32.768 kHz) (rw) */
    Scr_UReg_8Bit CFRTC:1;          /**< \brief [6:6] Real-Time Clock Compare Flag (rwh) */
    Scr_UReg_8Bit INIT32:1;         /**< \brief [7:7] RTC32SEL Protection Bit (rw) */
} Scr_RTC_CON_Bits;

/** \brief Count Clock Register n */
typedef struct
{
    Scr_UReg_8Bit CNT_VAL;          /**< \brief [7:0] Real-Time Clock Count Value (rwh)
                                                - RTC_CNT3: Bits [31:24]
                                                - RTC_CNT2: Bits [23:16]
                                                - RTC_CNT1: Bits [15:8]
                                                - RTC_CNT0: Bits [7:0] */
} Scr_RTC_CNTn_Bits;

/** \brief Real-Time Clock Compare/Capture Register n */
typedef struct
{
    Scr_UReg_8Bit CC_VAL;           /**< \brief [7:0] Real-Time Clock Count Value (rwh)
                                                - RTC_CR3: Bits [31:24]
                                                - RTC_CR2: Bits [23:16]
                                                - RTC_CR1: Bits [15:8]
                                                - RTC_CR0: Bits [7:0] */
} Scr_RTC_CRn_Bits;

/** \}  */

/** \addtogroup Scr_RTC_Registers_union
 * \{   */

/** \brief Real-Time Clock Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CON_Bits B;             /**< \brief Bitfield access */
} Scr_RTC_CON;

/** \brief Count Clock Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CNTn_Bits B;            /**< \brief Bitfield access */
} Scr_RTC_CNT0;

/** \brief Count Clock Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CNTn_Bits B;            /**< \brief Bitfield access */
} Scr_RTC_CNT1;

/** \brief Count Clock Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CNTn_Bits B;            /**< \brief Bitfield access */
} Scr_RTC_CNT2;

/** \brief Count Clock Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CNTn_Bits B;            /**< \brief Bitfield access */
} Scr_RTC_CNT3;

/** \brief Real-Time Clock Compare/Capture Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CRn_Bits B;             /**< \brief Bitfield access */
} Scr_RTC_CR0;

/** \brief Real-Time Clock Compare/Capture Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CRn_Bits B;             /**< \brief Bitfield access */
} Scr_RTC_CR1;

/** \brief Real-Time Clock Compare/Capture Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CRn_Bits B;             /**< \brief Bitfield access */
} Scr_RTC_CR2;

/** \brief Real-Time Clock Compare/Capture Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_RTC_CRn_Bits B;             /**< \brief Bitfield access */
} Scr_RTC_CR3;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/
SCR_INLINE boolean Scr_is_rtc_running(void)
{
    return (SCR_RTC_CON & RTCC_MASK);
}

SCR_INLINE void Scr_start_rtc(void)
{
    SCR_RTC_CON |= RTCC_MASK;
}

SCR_INLINE void Scr_stop_rtc(void)
{
    SCR_RTC_CON &= (~RTCC_MASK);
}

SCR_INLINE void Scr_set_count_registers(uint32 value)
{
    if(!Scr_is_rtc_running())
    {
        SCR_UNLOCK_PROTECTED_BITS();
        SCR_RTC_CNT3 = (uint8)(value >> 24);
        SCR_RTC_CNT2 = (uint8)(value >> 16);
        SCR_RTC_CNT1 = (uint8)(value >> 8);
        SCR_RTC_CNT0 = (uint8)(value);
        SCR_LOCK_PROTECTED_BITS();
    }
}

#endif /* SCR_RTC_SDCC_H_ */
