/**********************************************************************************************************************
 * \file scr_irq_sdcc.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/
#ifndef SCR_IRQ_SDCC_H_
#define SCR_IRQ_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define XINTR0              (0)     /* SCR Interrupt Node 00, External Interrupt 0 */
#define XINTR1              (1)     /* SCR Interrupt Node 01, Timer 0 */
#define XINTR2              (2)     /* SCR Interrupt Node 02, External Interrupt 1 */
#define XINTR3              (3)     /* SCR Interrupt Node 03, Timer 1 */
#define XINTR4              (4)     /* SCR Interrupt Node 04, UART */
#define XINTR5              (5)     /* SCR Interrupt Node 05, T2CCU0, LIN */
#define XINTR6              (6)     /* SCR Interrupt Node 06, Wake-up CAN filter Interrupt */
#define XINTR7              (7)     /* SCR Interrupt Node 07, ADC, SSC, T2CCU1, PMSRTC_CMP0 */
#define XINTR8              (8)     /* SCR Interrupt Node 08, External Interrupt 2, PMSRTC_CMP1 */
#define XINTR9              (9)     /* SCR Interrupt Node 09, External Interrupt 3-6 */
#define XINTR10             (10)    /* SCR Interrupt Node 10, External Interrupt 7-9 */
#define XINTR11             (11)    /* SCR Interrupt Node 11, External Interrupt 10-12 */
#define XINTR12             (12)    /* SCR Interrupt Node 12, External Interrupt 13-15 */
#define XINTR13             (13)    /* SCR Interrupt Node 13, RTC */

/*********************************************************************************************************************/
/*--------------------------------------------Interrupt related Registers--------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_IEN0)                   SCR_IEN0;                   /* bit-addressable SFR */
__sbit __at(ADDR_SCR_IEN0+0)                SCR_IEN0_EX0;               /* Interrupt Node XINTR0 Enable */
__sbit __at(ADDR_SCR_IEN0+1)                SCR_IEN0_ET0;               /* Interrupt Node XINTR1 Enable */
__sbit __at(ADDR_SCR_IEN0+2)                SCR_IEN0_EX1;               /* Interrupt Node XINTR2 Enable */
__sbit __at(ADDR_SCR_IEN0+3)                SCR_IEN0_ET1;               /* Interrupt Node XINTR3 Enable */
__sbit __at(ADDR_SCR_IEN0+4)                SCR_IEN0_ES;                /* Interrupt Node XINTR4 Enable */
__sbit __at(ADDR_SCR_IEN0+5)                SCR_IEN0_ET2;               /* Interrupt Node XINTR5 Enable */
__sbit __at(ADDR_SCR_IEN0+7)                SCR_IEN0_EA;                /* Global Interrupt Mask */
__sfr __at(ADDR_SCR_IEN1)                   SCR_IEN1;
__sfr __at(ADDR_SCR_SCU_NMICON)             SCR_SCU_NMICON;
__sfr __at(ADDR_SCR_SCU_NMISR)              SCR_SCU_NMISR;
__sfr __at(ADDR_SCR_SCU_EXICON0)            SCR_SCU_EXICON0;
__sfr __at(ADDR_SCR_SCU_EXICON1)            SCR_SCU_EXICON1;
__sfr __at(ADDR_SCR_SCU_EXICON2)            SCR_SCU_EXICON2;
__sfr __at(ADDR_SCR_SCU_EXICON3)            SCR_SCU_EXICON3;
__sfr __at(ADDR_SCR_SCU_IRCON0)             SCR_SCU_IRCON0;
__sfr __at(ADDR_SCR_SCU_IRCON1)             SCR_SCU_IRCON1;
__sfr __at(ADDR_SCR_SCU_IRCON2)             SCR_SCU_IRCON2;
__sfr __at(ADDR_SCR_IP)                     SCR_IP;
__sfr __at(ADDR_SCR_IPH)                    SCR_IPH;
__sfr __at(ADDR_SCR_IP1)                    SCR_IP1;
__sfr __at(ADDR_SCR_IPH1)                   SCR_IPH1;
__sfr __at(ADDR_SCR_SCU_MODIEN)             SCR_SCU_MODIEN;             /* bit-addressable SFR */
__sbit __at(ADDR_SCR_SCU_MODIEN+0)          SCR_SCU_MODIEN_EIREN;       /* SSC Error Interrupt Enable */
__sbit __at(ADDR_SCR_SCU_MODIEN+1)          SCR_SCU_MODIEN_TIREN;       /* SSC Transmit Interrupt Enable */
__sbit __at(ADDR_SCR_SCU_MODIEN+2)          SCR_SCU_MODIEN_RIREN;       /* SSC Receive Interrupt Enable */
__sbit __at(ADDR_SCR_SCU_MODIEN+3)          SCR_SCU_MODIEN_FEEN;        /* SSC Receive FIFO Empty Interrupt Enable */
__sbit __at(ADDR_SCR_SCU_MODIEN+4)          SCR_SCU_MODIEN_FFEN;        /* SSC Receive FIFO Full Interrupt Enable */
__sfr __at(ADDR_SCR_SCU_SCRINTEXCHG)        SCR_SCU_SCRINTEXCHG;
__sfr __at(ADDR_SCR_SCU_TCINTEXCHG)         SCR_SCU_TCINTEXCHG;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/

/** \addtogroup Scr_IRQ_Registers_Bitfields
 * \{  */

/** \brief Interrupt Enable Register 0 */
typedef struct
{
    Scr_UReg_8Bit EX0:1;            /**< \brief [0:0] Interrupt Node XINTR0 Enable (rw) */
    Scr_UReg_8Bit ET0:1;            /**< \brief [1:1] Interrupt Node XINTR1 Enable (rw) */
    Scr_UReg_8Bit EX1:1;            /**< \brief [2:2] Interrupt Node XINTR2 Enable (rw) */
    Scr_UReg_8Bit ET1:1;            /**< \brief [3:3] Interrupt Node XINTR3 Enable (rw) */
    Scr_UReg_8Bit ES:1;             /**< \brief [4:4] Interrupt Node XINTR4 Enable (rw) */
    Scr_UReg_8Bit ET2:1;            /**< \brief [5:5] Interrupt Node XINTR5 Enable (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [6:6] \internal Reserved */
    Scr_UReg_8Bit EA:1;             /**< \brief [7:7] Global Interrupt Mask (rw) */
} Scr_IEN0_Bits;

/** \brief Interrupt Enable Register 1 */
typedef struct
{
    Scr_UReg_8Bit EWCAN:1;          /**< \brief [0:0] Interrupt Node XINTR6 Enable (rw) */
    Scr_UReg_8Bit ESSC:1;           /**< \brief [1:1] Interrupt Node XINTR7 Enable (rw) */
    Scr_UReg_8Bit EX2:1;            /**< \brief [2:2] Interrupt Node XINTR8 Enable (rw) */
    Scr_UReg_8Bit EXM:1;            /**< \brief [3:3] Interrupt Node XINTR9 Enable (rw) */
    Scr_UReg_8Bit ECCIP0:1;         /**< \brief [4:4] Interrupt Node XINTR10 Enable (rw) */
    Scr_UReg_8Bit ECCIP1:1;         /**< \brief [5:5] Interrupt Node XINTR11 Enable (rw) */
    Scr_UReg_8Bit ECCIP2:1;         /**< \brief [6:6] Interrupt Node XINTR12 Enable (rw) */
    Scr_UReg_8Bit ECCIP3:1;         /**< \brief [7:7] Interrupt Node XINTR13 Enable (rw) */
} Scr_IEN1_Bits;

/** \brief NMI Control Register */
typedef struct
{
    Scr_UReg_8Bit NMIWDT:1;         /**< \brief [0:0] Watchdog Timer NMI Enable (rw) */
    Scr_UReg_8Bit NMIRAMECC:1;      /**< \brief [1:1] RAM Double bit ECC Error NMI Enable (rw) */
    Scr_UReg_8Bit NMIEXTNMI:1;      /**< \brief [2:2] External NMI (via EXTNMI pin) NMI Enable (rw) */
    Scr_UReg_8Bit NMIOCDS:1;        /**< \brief [3:3] OCDS NMI Enable (rw) */
    Scr_UReg_8Bit NMIMAINC:1;       /**< \brief [4:4] Main Controller NMI Enable (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [5:5] \internal Reserved */
    Scr_UReg_8Bit NMIWKP:1;         /**< \brief [6:6] Wake-Up NMI Enable (rw) */
    Scr_UReg_8Bit SCRINTTC:1;       /**< \brief [7:7] CPUx interrupt Enable (rw) */
} Scr_SCU_NMICON_Bits;

/** \brief NMI Status Register */
typedef struct
{
    Scr_UReg_8Bit FNMIWDT:1;        /**< \brief [0:0] Watchdog Timer NMI Flag (rwh) */
    Scr_UReg_8Bit FNMIRAMECC:1;     /**< \brief [1:1] RAM Double bit ECC Error NMI Flag (rwh) */
    Scr_UReg_8Bit FNMIEXTNMI:1;     /**< \brief [2:2] External NMI (via EXTNMI pin) Flag (rwh) */
    Scr_UReg_8Bit FNMIOCDS:1;       /**< \brief [3:3] OCDS NMI Flag (rwh) */
    Scr_UReg_8Bit FNMIMAINC:1;      /**< \brief [4:4] Main Controller NMI Flag (rwh) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [5:5] \internal Reserved */
    Scr_UReg_8Bit FNMIWKP:1;        /**< \brief [6:6] Wake-Up NMI Flag (rwh) */
    Scr_UReg_8Bit reserved_1:1;     /**< \brief [7:7] \internal Reserved */
} Scr_SCU_NMISR_Bits;

/** \brief External Interrupt Control Register 0 */
typedef struct
{
    Scr_UReg_8Bit EXINT0:2;         /**< \brief [1:0] External Interrupt 0 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT1:2;         /**< \brief [3:2] External Interrupt 1 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT2:2;         /**< \brief [5:4] External Interrupt 2 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT3:2;         /**< \brief [7:6] External Interrupt 3 Trigger Select (rw) */
} Scr_SCU_EXICON0_Bits;

/** \brief External Interrupt Control Register 1 */
typedef struct
{
    Scr_UReg_8Bit EXINT4:2;         /**< \brief [1:0] External Interrupt 4 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT5:2;         /**< \brief [3:2] External Interrupt 5 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT6:2;         /**< \brief [5:4] External Interrupt 6 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT7:2;         /**< \brief [7:6] External Interrupt 7 Trigger Select (rw) */
} Scr_SCU_EXICON1_Bits;

/** \brief External Interrupt Control Register 2 */
typedef struct
{
    Scr_UReg_8Bit EXINT8:2;         /**< \brief [1:0] External Interrupt 8 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT9:2;         /**< \brief [3:2] External Interrupt 9 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT10:2;        /**< \brief [5:4] External Interrupt 10 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT11:2;        /**< \brief [7:6] External Interrupt 11 Trigger Select (rw) */
} Scr_SCU_EXICON2_Bits;

/** \brief External Interrupt Control Register 3 */
typedef struct
{
    Scr_UReg_8Bit EXINT12:2;        /**< \brief [1:0] External Interrupt 12 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT13:2;        /**< \brief [3:2] External Interrupt 13 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT14:2;        /**< \brief [5:4] External Interrupt 14 Trigger Select (rw) */
    Scr_UReg_8Bit EXINT15:2;        /**< \brief [7:6] External Interrupt 15 Trigger Select (rw) */
} Scr_SCU_EXICON3_Bits;

/** \brief Interrupt Request Register 0 */
typedef struct
{
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [1:0] \internal Reserved */
    Scr_UReg_8Bit EXINT2:1;         /**< \brief [2:2] Interrupt Flag for External Interrupt 2 (rwh) */
    Scr_UReg_8Bit EXINT3:1;         /**< \brief [3:3] Interrupt Flag for External Interrupt 3 (rwh) */
    Scr_UReg_8Bit EXINT4:1;         /**< \brief [4:4] Interrupt Flag for External Interrupt 4 (rwh) */
    Scr_UReg_8Bit EXINT5:1;         /**< \brief [5:5] Interrupt Flag for External Interrupt 5 (rwh) */
    Scr_UReg_8Bit EXINT6:1;         /**< \brief [6:6] Interrupt Flag for External Interrupt 6 (rwh) */
    Scr_UReg_8Bit EXINT7:1;         /**< \brief [7:7] Interrupt Flag for External Interrupt 7 (rwh) */
} Scr_SCU_IRCON0_Bits;

/** \brief Interrupt Request Register 1 */
typedef struct
{
    Scr_UReg_8Bit EIR:1;            /**< \brief [0:0] Error Interrupt Flag for SSC (rwh) */
    Scr_UReg_8Bit TIR:1;            /**< \brief [1:1] Transmit Interrupt Flag for SSC (rwh) */
    Scr_UReg_8Bit RIR:1;            /**< \brief [2:2] Receive Interrupt Flag for SSC (rwh) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [3:3] \internal Reserved */
    Scr_UReg_8Bit ADCIR:1;          /**< \brief [4:4] Interrupt Flag for ADCOMP unit (rwh) */
    Scr_UReg_8Bit RER:1;            /**< \brief [5:5] Receive FIFO Empty Interrupt Flag for SSC (rwh) */
    Scr_UReg_8Bit RFR:1;            /**< \brief [6:6] Receive FIFO Full Interrupt Flag for SSC (rwh) */
    Scr_UReg_8Bit reserved_1:1;     /**< \brief [7:7] \internal Reserved */
} Scr_SCU_IRCON1_Bits;

/** \brief Interrupt Request Register 2 */
typedef struct
{
    Scr_UReg_8Bit EXINT8:1;         /**< \brief [0:0] Interrupt Flag for External Interrupt 8 (rwh) */
    Scr_UReg_8Bit EXINT9:1;         /**< \brief [1:1] Interrupt Flag for External Interrupt 9 (rwh) */
    Scr_UReg_8Bit EXINT10:1;        /**< \brief [2:2] Interrupt Flag for External Interrupt 10 (rwh) */
    Scr_UReg_8Bit EXINT11:1;        /**< \brief [3:3] Interrupt Flag for External Interrupt 11 (rwh) */
    Scr_UReg_8Bit EXINT12:1;        /**< \brief [4:4] Interrupt Flag for External Interrupt 12 (rwh) */
    Scr_UReg_8Bit EXINT13:1;        /**< \brief [5:5] Interrupt Flag for External Interrupt 13 (rwh) */
    Scr_UReg_8Bit EXINT14:1;        /**< \brief [6:6] Interrupt Flag for External Interrupt 14 (rwh) */
    Scr_UReg_8Bit EXINT15:1;        /**< \brief [7:7] Interrupt Flag for External Interrupt 15 (rwh) */
} Scr_SCU_IRCON2_Bits;

/** \brief Interrupt Priority Register */
typedef struct
{
    Scr_UReg_8Bit PX0:1;            /**< \brief [0:0] Priority Level Low Bit for Interrupt Node XINTR0 (rw) */
    Scr_UReg_8Bit PT0:1;            /**< \brief [1:1] Priority Level Low Bit for Interrupt Node XINTR1 (rw) */
    Scr_UReg_8Bit PX1:1;            /**< \brief [2:2] Priority Level Low Bit for Interrupt Node XINTR2 (rw) */
    Scr_UReg_8Bit PT1:1;            /**< \brief [3:3] Priority Level Low Bit for Interrupt Node XINTR3 (rw) */
    Scr_UReg_8Bit PS:1;             /**< \brief [4:4] Priority Level Low Bit for Interrupt Node XINTR4 (rw) */
    Scr_UReg_8Bit PT2:1;            /**< \brief [5:5] Priority Level Low Bit for Interrupt Node XINTR5 (rw) */
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [7:6] \internal Reserved */
} Scr_IP_Bits;

/** \brief Interrupt Priority High Register */
typedef struct
{
    Scr_UReg_8Bit PX0H:1;           /**< \brief [0:0] Priority Level High Bit for Interrupt Node XINTR0 (rw) */
    Scr_UReg_8Bit PT0H:1;           /**< \brief [1:1] Priority Level High Bit for Interrupt Node XINTR1 (rw) */
    Scr_UReg_8Bit PX1H:1;           /**< \brief [2:2] Priority Level High Bit for Interrupt Node XINTR2 (rw) */
    Scr_UReg_8Bit PT1H:1;           /**< \brief [3:3] Priority Level High Bit for Interrupt Node XINTR3 (rw) */
    Scr_UReg_8Bit PSH:1;            /**< \brief [4:4] Priority Level High Bit for Interrupt Node XINTR4 (rw) */
    Scr_UReg_8Bit PT2H:1;           /**< \brief [5:5] Priority Level High Bit for Interrupt Node XINTR5 (rw) */
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [7:6] \internal Reserved */
} Scr_IPH_Bits;

/** \brief Interrupt Priority 1 Register */
typedef struct
{
    Scr_UReg_8Bit PWCAN:1;          /**< \brief [0:0] Priority Level Low Bit for Interrupt Node XINTR6 (rw) */
    Scr_UReg_8Bit PSSC:1;           /**< \brief [1:1] Priority Level Low Bit for Interrupt Node XINTR7 (rw) */
    Scr_UReg_8Bit PX2:1;            /**< \brief [2:2] Priority Level Low Bit for Interrupt Node XINTR8 (rw) */
    Scr_UReg_8Bit PXM:1;            /**< \brief [3:3] Priority Level Low Bit for Interrupt Node XINTR9 (rw) */
    Scr_UReg_8Bit PCCIP0:1;         /**< \brief [4:4] Priority Level Low Bit for Interrupt Node XINTR10 (rw) */
    Scr_UReg_8Bit PCCIP1:1;         /**< \brief [5:5] Priority Level Low Bit for Interrupt Node XINTR11 (rw) */
    Scr_UReg_8Bit PCCIP2:1;         /**< \brief [6:6] Priority Level Low Bit for Interrupt Node XINTR12 (rw) */
    Scr_UReg_8Bit PCCIP3:1;         /**< \brief [7:7] Priority Level Low Bit for Interrupt Node XINTR13 (rw) */
} Scr_IP1_Bits;

/** \brief Interrupt Priority 1 High Register */
typedef struct
{
    Scr_UReg_8Bit PWCANH:1;         /**< \brief [0:0] Priority Level High Bit for Interrupt Node XINTR6 (rw) */
    Scr_UReg_8Bit PSSCH:1;          /**< \brief [1:1] Priority Level High Bit for Interrupt Node XINTR7 (rw) */
    Scr_UReg_8Bit PX2H:1;           /**< \brief [2:2] Priority Level High Bit for Interrupt Node XINTR8 (rw) */
    Scr_UReg_8Bit PXMH:1;           /**< \brief [3:3] Priority Level High Bit for Interrupt Node XINTR9 (rw) */
    Scr_UReg_8Bit PCCIP0H:1;        /**< \brief [4:4] Priority Level High Bit for Interrupt Node XINTR10 (rw) */
    Scr_UReg_8Bit PCCIP1H:1;        /**< \brief [5:5] Priority Level High Bit for Interrupt Node XINTR11 (rw) */
    Scr_UReg_8Bit PCCIP2H:1;        /**< \brief [6:6] Priority Level High Bit for Interrupt Node XINTR12 (rw) */
    Scr_UReg_8Bit PCCIP3H:1;        /**< \brief [7:7] Priority Level High Bit for Interrupt Node XINTR13 (rw) */
} Scr_IPH1_Bits;

/** \brief Peripheral Interrupt Enable Register */
typedef struct
{
    Scr_UReg_8Bit EIREN:1;          /**< \brief [0:0] SSC Error Interrupt Enable (rw) */
    Scr_UReg_8Bit TIREN:1;          /**< \brief [1:1] SSC Transmit Interrupt Enable (rw) */
    Scr_UReg_8Bit RIREN:1;          /**< \brief [2:2] SSC Receive Interrupt Enable (rw) */
    Scr_UReg_8Bit FEEN:1;           /**< \brief [3:3] SSC Receive FIFO Empty Interrupt Enable (rw) */
    Scr_UReg_8Bit FFEN:1;           /**< \brief [4:4] SSC Receive FIFO Full Interrupt Enable (rw) */
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [7:5] \internal Reserved */
} Scr_MODIEN_Bits;

/** \brief SCR Interrupt Data Exchange Register */
typedef struct
{
    Scr_UReg_8Bit SCRINT;           /**< \brief [7:0] Data Exchange from SCR to Main Controller (rwh) */
} Scr_SCU_SCRINTEXCHG_Bits;

/** \brief TriCore Interrupt Data Exchange Register */
typedef struct
{
    Scr_UReg_8Bit TCINT;            /**< \brief [7:0] Data Exchange from Main Controller to SCR (rh) */
} Scr_SCU_TCINTEXCHG_Bits;

/** \}  */

/** \addtogroup Scr_IRQ_Registers_union
 * \{   */

/** \brief Interrupt Enable Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IEN0_Bits B;               /**< \brief Bitfield access */
} Scr_IEN0;

/** \brief Interrupt Enable Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IEN1_Bits B;                /**< \brief Bitfield access */
} Scr_IEN1;

/** \brief NMI Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_NMICON_Bits B;          /**< \brief Bitfield access */
} Scr_SCU_NMICON;

/** \brief NMI Status Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_NMISR_Bits B;           /**< \brief Bitfield access */
} Scr_SCU_NMISR;

/** \brief External Interrupt Control Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_EXICON0_Bits B;         /**< \brief Bitfield access */
} Scr_SCU_EXICON0;

/** \brief External Interrupt Control Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_EXICON1_Bits B;         /**< \brief Bitfield access */
} Scr_SCU_EXICON1;

/** \brief External Interrupt Control Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_EXICON2_Bits B;         /**< \brief Bitfield access */
} Scr_SCU_EXICON2;

/** \brief External Interrupt Control Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_EXICON3_Bits B;         /**< \brief Bitfield access */
} Scr_SCU_EXICON3;

/** \brief Interrupt Request Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_IRCON0_Bits B;          /**< \brief Bitfield access */
} Scr_SCU_IRCON0;

/** \brief Interrupt Request Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_IRCON1_Bits B;          /**< \brief Bitfield access */
} Scr_SCU_IRCON1;

/** \brief Interrupt Request Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_IRCON2_Bits B;          /**< \brief Bitfield access */
} Scr_SCU_IRCON2;

/** \brief Interrupt Priority Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IP_Bits B;                  /**< \brief Bitfield access */
} Scr_IP;

/** \brief Interrupt Priority High Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IPH_Bits B;                 /**< \brief Bitfield access */
} Scr_IPH;

/** \brief Interrupt Priority 1 Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IP1_Bits B;                 /**< \brief Bitfield access */
} Scr_IP1;

/** \brief Interrupt Priority 1 High Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IPH1_Bits B;                /**< \brief Bitfield access */
} Scr_IPH1;

/** \brief Peripheral Interrupt Enable Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_MODIEN_Bits B;              /**< \brief Bitfield access */
} Scr_MODIEN;

/** \brief SCR Interrupt Data Exchange Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_SCRINTEXCHG_Bits B;     /**< \brief Bitfield access */
} Scr_SCU_SCRINTEXCHG;

/** \brief TriCore Interrupt Data Exchange Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_TCINTEXCHG_Bits B;      /**< \brief Bitfield access */
} Scr_SCU_TCINTEXCHG;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/

#endif /* SCR_IRQ_SDCC_H_ */
