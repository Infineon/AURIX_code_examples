/**
 * \file scr_io_sdcc.h
 * \brief IO Defines for SCR module.
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SCR_IO_SDCC_H_
#define SCR_IO_SDCC_H_ 1

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "scr_generic_defs.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define SCR_SET_IO_PAGE(p)          SCR_IO_PAGE = ((uint8)(p & MOD_PAGE_MASK))

#define SCR_SET_IO_PAGE_STNR0(p)    SCR_IO_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_0 | (p & MOD_PAGE_MASK)))
#define SCR_SET_IO_PAGE_STNR1(p)    SCR_IO_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_1 | (p & MOD_PAGE_MASK)))
#define SCR_SET_IO_PAGE_STNR2(p)    SCR_IO_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_2 | (p & MOD_PAGE_MASK)))
#define SCR_SET_IO_PAGE_STNR3(p)    SCR_IO_PAGE = ((uint8)(MOD_OP_SAVE | MOD_STNR_3 | (p & MOD_PAGE_MASK)))

#define SCR_RESTORE_IO_PAGE_STNR0()     SCR_IO_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_0))
#define SCR_RESTORE_IO_PAGE_STNR1()     SCR_IO_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_1))
#define SCR_RESTORE_IO_PAGE_STNR2()     SCR_IO_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_2))
#define SCR_RESTORE_IO_PAGE_STNR3()     SCR_IO_PAGE = ((uint8)(MOD_OP_RESTORE | MOD_STNR_3))

/*********************************************************************************************************************/
/*--------------------------------------------Page Register for Port SFRs--------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_IO_PAGE)                SCR_IO_PAGE;

/*********************************************************************************************************************/
/*-------------------------------------------------Port 0 Registers--------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_IO_P00_IOCR0)           SCR_IO_P00_IOCR0;   /* bit-addressable SFR */
__sfr __at(ADDR_SCR_IO_P00_IOCR1)           SCR_IO_P00_IOCR1;
__sfr __at(ADDR_SCR_IO_P00_IOCR2)           SCR_IO_P00_IOCR2;
__sfr __at(ADDR_SCR_IO_P00_IOCR3)           SCR_IO_P00_IOCR3;
__sfr __at(ADDR_SCR_IO_P00_IOCR4)           SCR_IO_P00_IOCR4;
__sfr __at(ADDR_SCR_IO_P00_IOCR5)           SCR_IO_P00_IOCR5;
__sfr __at(ADDR_SCR_IO_P00_IOCR6)           SCR_IO_P00_IOCR6;
__sfr __at(ADDR_SCR_IO_P00_IOCR7)           SCR_IO_P00_IOCR7;
__sfr __at(ADDR_SCR_IO_P00_PDR0)            SCR_IO_P00_PDR0;    /* bit-addressable SFR */
__sfr __at(ADDR_SCR_IO_P00_PDR2)            SCR_IO_P00_PDR2;
__sfr __at(ADDR_SCR_IO_P00_PDR4)            SCR_IO_P00_PDR4;
__sfr __at(ADDR_SCR_IO_P00_PDR6)            SCR_IO_P00_PDR6;
__sfr __at(ADDR_SCR_IO_P00_PDISC)           SCR_IO_P00_PDISC;
__sfr __at(ADDR_SCR_IO_P00_OUT)             SCR_IO_P00_OUT;     /* bit-addressable SFR */
__sbit __at(ADDR_SCR_IO_P00_OUT+0)          SCR_IO_P00_OUT_0;   /* Output Bit 0 */
__sbit __at(ADDR_SCR_IO_P00_OUT+1)          SCR_IO_P00_OUT_1;   /* Output Bit 1 */
__sbit __at(ADDR_SCR_IO_P00_OUT+2)          SCR_IO_P00_OUT_2;   /* Output Bit 2 */
__sbit __at(ADDR_SCR_IO_P00_OUT+3)          SCR_IO_P00_OUT_3;   /* Output Bit 3 */
__sbit __at(ADDR_SCR_IO_P00_OUT+4)          SCR_IO_P00_OUT_4;   /* Output Bit 4 */
__sbit __at(ADDR_SCR_IO_P00_OUT+5)          SCR_IO_P00_OUT_5;   /* Output Bit 5 */
__sbit __at(ADDR_SCR_IO_P00_OUT+6)          SCR_IO_P00_OUT_6;   /* Output Bit 6 */
__sbit __at(ADDR_SCR_IO_P00_OUT+7)          SCR_IO_P00_OUT_7;   /* Output Bit 7 */
__sfr __at(ADDR_SCR_IO_P00_OMSR)            SCR_IO_P00_OMSR;
__sfr __at(ADDR_SCR_IO_P00_OMCR)            SCR_IO_P00_OMCR;
__sfr __at(ADDR_SCR_IO_P00_OMTR)            SCR_IO_P00_OMTR;
__sfr __at(ADDR_SCR_IO_P00_IN)              SCR_IO_P00_IN;

/*********************************************************************************************************************/
/*-------------------------------------------------Port 1 Registers--------------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_IO_P01_IOCR0)           SCR_IO_P01_IOCR0;   /* bit-addressable SFR */
__sfr __at(ADDR_SCR_IO_P01_IOCR1)           SCR_IO_P01_IOCR1;
__sfr __at(ADDR_SCR_IO_P01_IOCR2)           SCR_IO_P01_IOCR2;
__sfr __at(ADDR_SCR_IO_P01_IOCR3)           SCR_IO_P01_IOCR3;
__sfr __at(ADDR_SCR_IO_P01_IOCR4)           SCR_IO_P01_IOCR4;
__sfr __at(ADDR_SCR_IO_P01_IOCR5)           SCR_IO_P01_IOCR5;
__sfr __at(ADDR_SCR_IO_P01_IOCR6)           SCR_IO_P01_IOCR6;
__sfr __at(ADDR_SCR_IO_P01_IOCR7)           SCR_IO_P01_IOCR7;
__sfr __at(ADDR_SCR_IO_P01_PDR0)            SCR_IO_P01_PDR0;    /* bit-addressable SFR */
__sfr __at(ADDR_SCR_IO_P01_PDR2)            SCR_IO_P01_PDR2;
__sfr __at(ADDR_SCR_IO_P01_PDR4)            SCR_IO_P01_PDR4;
__sfr __at(ADDR_SCR_IO_P01_PDR6)            SCR_IO_P01_PDR6;
__sfr __at(ADDR_SCR_IO_P01_PDISC)           SCR_IO_P01_PDISC;
__sfr __at(ADDR_SCR_IO_P01_OUT)             SCR_IO_P01_OUT;     /* bit-addressable SFR */
__sbit __at(ADDR_SCR_IO_P01_OUT+0)          SCR_IO_P01_OUT_0;   /* Output Bit 0 */
__sbit __at(ADDR_SCR_IO_P01_OUT+1)          SCR_IO_P01_OUT_1;   /* Output Bit 1 */
__sbit __at(ADDR_SCR_IO_P01_OUT+2)          SCR_IO_P01_OUT_2;   /* Output Bit 2 */
__sbit __at(ADDR_SCR_IO_P01_OUT+3)          SCR_IO_P01_OUT_3;   /* Output Bit 3 */
__sbit __at(ADDR_SCR_IO_P01_OUT+4)          SCR_IO_P01_OUT_4;   /* Output Bit 4 */
__sbit __at(ADDR_SCR_IO_P01_OUT+5)          SCR_IO_P01_OUT_5;   /* Output Bit 5 */
__sbit __at(ADDR_SCR_IO_P01_OUT+6)          SCR_IO_P01_OUT_6;   /* Output Bit 6 */
__sbit __at(ADDR_SCR_IO_P01_OUT+7)          SCR_IO_P01_OUT_7;   /* Output Bit 7 */
__sfr __at(ADDR_SCR_IO_P01_OMSR)            SCR_IO_P01_OMSR;
__sfr __at(ADDR_SCR_IO_P01_OMCR)            SCR_IO_P01_OMCR;
__sfr __at(ADDR_SCR_IO_P01_OMTR)            SCR_IO_P01_OMTR;
__sfr __at(ADDR_SCR_IO_P01_IN)              SCR_IO_P01_IN;

/*********************************************************************************************************************/
/*------------------------------------------General Port Control Registers-------------------------------------------*/
/*********************************************************************************************************************/
__sfr __at(ADDR_SCR_SCU_MODPISEL0)          SCR_SCU_MODPISEL0;
__sfr __at(ADDR_SCR_SCU_MODPISEL1)          SCR_SCU_MODPISEL1;
__sfr __at(ADDR_SCR_SCU_MODPISEL2)          SCR_SCU_MODPISEL2;
__sfr __at(ADDR_SCR_SCU_MODPISEL3)          SCR_SCU_MODPISEL3;
__sfr __at(ADDR_SCR_SCU_MODPISEL4)          SCR_SCU_MODPISEL4;
__sfr __at(ADDR_SCR_SCU_MODPISEL5)          SCR_SCU_MODPISEL5;

/*********************************************************************************************************************/
/*--------------------------------------------------Data Structures--------------------------------------------------*/
/*********************************************************************************************************************/
typedef enum
{
    ScrPortMode_inputNoPullDevice      = 0,         /**< \brief Input, No pull device connected. */
    ScrPortMode_inputPullDown          = 8U,        /**< \brief Input, pull-down device connected. */
    ScrPortMode_inputPullUp            = 0x10U,     /**< \brief Input, pull-up device connected. */
    ScrPortMode_outputPushPullGeneral  = 0x80U,     /**< \brief Push-pull, General-purpose output */
    ScrPortMode_outputPushPullAlt1     = 0x88U,     /**< \brief Push-pull, Alternate output function 1. */
    ScrPortMode_outputPushPullAlt2     = 0x90U,     /**< \brief Push-pull, Alternate output function 2. */
    ScrPortMode_outputPushPullAlt3     = 0x98U,     /**< \brief Push-pull, Alternate output function 3. */
    ScrPortMode_outputPushPullAlt4     = 0xA0U,     /**< \brief Push-pull, Alternate output function 4. */
    ScrPortMode_outputPushPullAlt5     = 0xA8U,     /**< \brief Push-pull, Alternate output function 5. */
    ScrPortMode_outputPushPullAlt6     = 0xB0U,     /**< \brief Push-pull, Alternate output function 6. */
    ScrPortMode_outputPushPullAlt7     = 0xB8U,     /**< \brief Push-pull, Alternate output function 7. */
    ScrPortMode_outputOpenDrainGeneral = 0xC0U,     /**< \brief Open-drain, General-purpose output. */
    ScrPortMode_outputOpenDrainAlt1    = 0xC8U,     /**< \brief Open-drain, Alternate output function 1. */
    ScrPortMode_outputOpenDrainAlt2    = 0xD0U,     /**< \brief Open-drain, Alternate output function 2. */
    ScrPortMode_outputOpenDrainAlt3    = 0xD8U,     /**< \brief Open-drain, Alternate output function 3. */
    ScrPortMode_outputOpenDrainAlt4    = 0xE0U,     /**< \brief Open-drain, Alternate output function 4. */
    ScrPortMode_outputOpenDrainAlt5    = 0xE8U,     /**< \brief Open-drain, Alternate output function 5. */
    ScrPortMode_outputOpenDrainAlt6    = 0xF0U,     /**< \brief Open-drain, Alternate output function 6. */
    ScrPortMode_outputOpenDrainAlt7    = 0xF8U      /**< \brief Open-drain, Alternate output function 7. */
} ScrPortMode;

typedef enum
{
    ScrPadDriver_cmosAutomotiveSpeed1 = 0,      /**< \brief Speed grade 1. */
    ScrPadDriver_cmosAutomotiveSpeed2 = 1,      /**< \brief Speed grade 2. */
    ScrPadDriver_cmosAutomotiveSpeed3 = 2,      /**< \brief Speed grade 3. */
    ScrPadDriver_cmosAutomotiveSpeed4 = 3,      /**< \brief Speed grade 4. */
    ScrPadDriver_ttlSpeed1            = 8,      /**< \brief Speed grade 1. */
    ScrPadDriver_ttlSpeed2            = 9,      /**< \brief Speed grade 2. */
    ScrPadDriver_ttlSpeed3            = 10,     /**< \brief Speed grade 3. */
    ScrPadDriver_ttlSpeed4            = 11,     /**< \brief Speed grade 4. */
    ScrPadDriver_ttl3v3Speed1         = 12,     /**< \brief 3.3v Pad supply speed1 */
    ScrPadDriver_ttl3v3Speed2         = 13,     /**< \brief 3.3v Pad supply speed2 */
    ScrPadDriver_ttl3v3Speed3         = 14,     /**< \brief 3.3v Pad supply speed3 */
    ScrPadDriver_ttl3v3Speed4         = 15      /**< \brief 3.3v Pad supply speed4 */
} ScrPadDriver;

typedef enum
{
    ScrIoPin0 = 0x01U,  /**< \brief Pin 0 of Port X */
    ScrIoPin1 = 0x02U,  /**< \brief Pin 1 of Port X */
    ScrIoPin2 = 0x04U,  /**< \brief Pin 2 of Port X */
    ScrIoPin3 = 0x08U,  /**< \brief Pin 3 of Port X */
    ScrIoPin4 = 0x10U,  /**< \brief Pin 4 of Port X */
    ScrIoPin5 = 0x20U,  /**< \brief Pin 5 of Port X */
    ScrIoPin6 = 0x40U,  /**< \brief Pin 6 of Port X */
    ScrIoPin7 = 0x80U,  /**< \brief Pin 7 of Port X */
} ScrIoPin;

/** \addtogroup Scr_IO_Registers_Bitfields
 * \{  */

/** \brief Page Register for Port SFRs */
typedef struct
{
    Scr_UReg_8Bit PAGE:3;           /**< \brief [2:0] Page Bits (rw) */
    Scr_UReg_8Bit reserved_0:1;     /**< \brief [3:3] \internal Reserved */
    Scr_UReg_8Bit STNR:2;           /**< \brief [5:4] Storage Number (w) */
    Scr_UReg_8Bit OP:2;             /**< \brief [7:6] Operation (w) */
} Scr_IO_PAGE_Bits;

/** \brief Port P0n Input/Output Control Register k */
typedef struct
{
    Scr_UReg_8Bit reserved_0:3;     /**< \brief [2:0] \internal Reserved */
    Scr_UReg_8Bit PC:5;             /**< \brief [7:3] Port Control for Port n Pin k (rw) */
} Scr_P0n_IOCRk_Bits;

/** \brief Port P0n Pad Driver Mode 0 Register */
typedef struct
{
    Scr_UReg_8Bit PD0:2;            /**< \brief [1:0] Pad Driver Mode for Pin 0 (rw) */
    Scr_UReg_8Bit PL0:2;            /**< \brief [3:2] Pad Level Selection for Pin 0 (rw) */
    Scr_UReg_8Bit PD1:2;            /**< \brief [5:4] Pad Driver Mode for Pin 1 (rw) */
    Scr_UReg_8Bit PL1:2;            /**< \brief [7:6] Pad Level Selection for Pin 1 (rw) */
} Scr_P0n_PDR0_Bits;

/** \brief Port P0n Pad Driver Mode 2 Register */
typedef struct
{
    Scr_UReg_8Bit PD2:2;            /**< \brief [1:0] Pad Driver Mode for Pin 2 (rw) */
    Scr_UReg_8Bit PL2:2;            /**< \brief [3:2] Pad Level Selection for Pin 2 (rw) */
    Scr_UReg_8Bit PD3:2;            /**< \brief [5:4] Pad Driver Mode for Pin 3 (rw) */
    Scr_UReg_8Bit PL3:2;            /**< \brief [7:6] Pad Level Selection for Pin 3 (rw) */
} Scr_P0n_PDR2_Bits;

/** \brief Port P0n Pad Driver Mode 4 Register */
typedef struct
{
    Scr_UReg_8Bit PD4:2;            /**< \brief [1:0] Pad Driver Mode for Pin 4 (rw) */
    Scr_UReg_8Bit PL4:2;            /**< \brief [3:2] Pad Level Selection for Pin 4 (rw) */
    Scr_UReg_8Bit PD5:2;            /**< \brief [5:4] Pad Driver Mode for Pin 5 (rw) */
    Scr_UReg_8Bit PL5:2;            /**< \brief [7:6] Pad Level Selection for Pin 5 (rw) */
} Scr_P0n_PDR4_Bits;

/** \brief Port P0n Pad Driver Mode 6 Register */
typedef struct
{
    Scr_UReg_8Bit PD6:2;            /**< \brief [1:0] Pad Driver Mode for Pin 6 (rw) */
    Scr_UReg_8Bit PL6:2;            /**< \brief [3:2] Pad Level Selection for Pin 6 (rw) */
    Scr_UReg_8Bit PD7:2;            /**< \brief [5:4] Pad Driver Mode for Pin 7 (rw) */
    Scr_UReg_8Bit PL7:2;            /**< \brief [7:6] Pad Level Selection for Pin 7 (rw) */
} Scr_P0n_PDR6_Bits;

/** \brief Port P0n Pin Function Decision Control Register */
typedef struct
{
    Scr_UReg_8Bit PDIS0:1;          /**< \brief [0:0] Pin Function Decision Control for Pin 0 (rw) */
    Scr_UReg_8Bit PDIS1:1;          /**< \brief [1:1] Pin Function Decision Control for Pin 1 (rw) */
    Scr_UReg_8Bit PDIS2:1;          /**< \brief [2:2] Pin Function Decision Control for Pin 2 (rw) */
    Scr_UReg_8Bit PDIS3:1;          /**< \brief [3:3] Pin Function Decision Control for Pin 3 (rw) */
    Scr_UReg_8Bit PDIS4:1;          /**< \brief [4:4] Pin Function Decision Control for Pin 4 (rw) */
    Scr_UReg_8Bit PDIS5:1;          /**< \brief [5:5] Pin Function Decision Control for Pin 5 (rw) */
    Scr_UReg_8Bit PDIS6:1;          /**< \brief [6:6] Pin Function Decision Control for Pin 6 (rw) */
    Scr_UReg_8Bit PDIS7:1;          /**< \brief [7:7] Pin Function Decision Control for Pin 7 (rw) */
} Scr_P0n_PDISC_Bits;

/** \brief Port P0n Output Register */
typedef struct
{
    Scr_UReg_8Bit P0:1;             /**< \brief [0:0] Output Bit 0 (rwh) */
    Scr_UReg_8Bit P1:1;             /**< \brief [1:1] Output Bit 1 (rwh) */
    Scr_UReg_8Bit P2:1;             /**< \brief [2:2] Output Bit 2 (rwh) */
    Scr_UReg_8Bit P3:1;             /**< \brief [3:3] Output Bit 3 (rwh) */
    Scr_UReg_8Bit P4:1;             /**< \brief [4:4] Output Bit 4 (rwh) */
    Scr_UReg_8Bit P5:1;             /**< \brief [5:5] Output Bit 5 (rwh) */
    Scr_UReg_8Bit P6:1;             /**< \brief [6:6] Output Bit 6 (rwh) */
    Scr_UReg_8Bit P7:1;             /**< \brief [7:7] Output Bit 7 (rwh) */
} Scr_P0n_OUT_Bits;

/** \brief Port P0n Output Modification Set Register */
typedef struct
{
    Scr_UReg_8Bit PS0:1;            /**< \brief [0:0] Set Bit 0 (w) */
    Scr_UReg_8Bit PS1:1;            /**< \brief [1:1] Set Bit 1 (w) */
    Scr_UReg_8Bit PS2:1;            /**< \brief [2:2] Set Bit 2 (w) */
    Scr_UReg_8Bit PS3:1;            /**< \brief [3:3] Set Bit 3 (w) */
    Scr_UReg_8Bit PS4:1;            /**< \brief [4:4] Set Bit 4 (w) */
    Scr_UReg_8Bit PS5:1;            /**< \brief [5:5] Set Bit 5 (w) */
    Scr_UReg_8Bit PS6:1;            /**< \brief [6:6] Set Bit 6 (w) */
    Scr_UReg_8Bit PS7:1;            /**< \brief [7:7] Set Bit 7 (w) */
} Scr_P0n_OMSR_Bits;

/** \brief Port P0n Output Modification Clear Register */
typedef struct
{
    Scr_UReg_8Bit PCL0:1;           /**< \brief [0:0] Set Bit 0 (w) */
    Scr_UReg_8Bit PCL1:1;           /**< \brief [1:1] Set Bit 1 (w) */
    Scr_UReg_8Bit PCL2:1;           /**< \brief [2:2] Set Bit 2 (w) */
    Scr_UReg_8Bit PCL3:1;           /**< \brief [3:3] Set Bit 3 (w) */
    Scr_UReg_8Bit PCL4:1;           /**< \brief [4:4] Set Bit 4 (w) */
    Scr_UReg_8Bit PCL5:1;           /**< \brief [5:5] Set Bit 5 (w) */
    Scr_UReg_8Bit PCL6:1;           /**< \brief [6:6] Set Bit 6 (w) */
    Scr_UReg_8Bit PCL7:1;           /**< \brief [7:7] Set Bit 7 (w) */
} Scr_P0n_OMCR_Bits;

/** \brief Port P0n Output Modification Toggle Register */
typedef struct
{
    Scr_UReg_8Bit PTL0:1;           /**< \brief [0:0] Set Bit 0 (w) */
    Scr_UReg_8Bit PTL1:1;           /**< \brief [1:1] Set Bit 1 (w) */
    Scr_UReg_8Bit PTL2:1;           /**< \brief [2:2] Set Bit 2 (w) */
    Scr_UReg_8Bit PTL3:1;           /**< \brief [3:3] Set Bit 3 (w) */
    Scr_UReg_8Bit PTL4:1;           /**< \brief [4:4] Set Bit 4 (w) */
    Scr_UReg_8Bit PTL5:1;           /**< \brief [5:5] Set Bit 5 (w) */
    Scr_UReg_8Bit PTL6:1;           /**< \brief [6:6] Set Bit 6 (w) */
    Scr_UReg_8Bit PTL7:1;           /**< \brief [7:7] Set Bit 7 (w) */
} Scr_P0n_OMTR_Bits;

/** \brief Port P0n Input Register */
typedef struct
{
    Scr_UReg_8Bit P0:1;             /**< \brief [0:0] Input Bit 0 (rh) */
    Scr_UReg_8Bit P1:1;             /**< \brief [1:1] Input Bit 1 (rh) */
    Scr_UReg_8Bit P2:1;             /**< \brief [2:2] Input Bit 2 (rh) */
    Scr_UReg_8Bit P3:1;             /**< \brief [3:3] Input Bit 3 (rh) */
    Scr_UReg_8Bit P4:1;             /**< \brief [4:4] Input Bit 4 (rh) */
    Scr_UReg_8Bit P5:1;             /**< \brief [5:5] Input Bit 5 (rh) */
    Scr_UReg_8Bit P6:1;             /**< \brief [6:6] Input Bit 6 (rh) */
    Scr_UReg_8Bit P7:1;             /**< \brief [7:7] Input Bit 7 (rh) */
} Scr_P0n_IN_Bits;

/** \brief Peripheral Input Select Register 0 */
typedef struct
{
    Scr_UReg_8Bit URRIS:4;          /**< \brief [3:0] UART Receiver Input Select (rw) */
    Scr_UReg_8Bit WCANRXDIS:4;      /**< \brief [7:4] WCAN Receiver Input Select (rw) */
} Scr_SCU_MODPISEL0_Bits;

/** \brief Peripheral Input Select Register 1 */
typedef struct
{
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [1:0] \internal Reserved */
    Scr_UReg_8Bit EXINT0IS:2;       /**< \brief [3:2] External Interrupt Input 0 Input Select (rw) */
    Scr_UReg_8Bit EXINT1IS:2;       /**< \brief [5:4] External Interrupt Input 1 Input Select (rw) */
    Scr_UReg_8Bit EXINT2IS:2;       /**< \brief [7:6] External Interrupt Input 2 Input Select (rw) */
} Scr_SCU_MODPISEL1_Bits;

/** \brief Peripheral Input Select Register 2 */
typedef struct
{
    Scr_UReg_8Bit T2CC0EXINT3IS:2;  /**< \brief [1:0] External Interrupt 3/T2CCU Capture Channel 0 Input Select (rw) */
    Scr_UReg_8Bit T2CC1EXINT4IS:2;  /**< \brief [3:2] External Interrupt 4/T2CCU Capture Channel 1 Input Select (rw) */
    Scr_UReg_8Bit T2CC2EXINT5IS:2;  /**< \brief [5:4] External Interrupt 5/T2CCU Capture Channel 2 Input Select (rw) */
    Scr_UReg_8Bit T2CC3EXINT6IS:2;  /**< \brief [7:6] External Interrupt 6/T2CCU Capture Channel 3 Input Select (rw) */
} Scr_SCU_MODPISEL2_Bits;

/** \brief Peripheral Input Select Register 3 */
typedef struct
{
    Scr_UReg_8Bit T2EXIS:3;         /**< \brief [2:0] Timer 2 External Input Select (rw) */
    Scr_UReg_8Bit T2IS:2;           /**< \brief [4:3] Timer 2 Input Select (rw) */
    Scr_UReg_8Bit CIS:3;            /**< \brief [7:5] Slave Mode Clock Input Select (rw) */
} Scr_SCU_MODPISEL3_Bits;

/** \brief Peripheral Input Select Register 4 */
typedef struct
{
    Scr_UReg_8Bit MIS:3;            /**< \brief [2:0] Master Mode Receive Input Select (rw) */
    Scr_UReg_8Bit SIS:3;            /**< \brief [5:3] Slave Mode Receive Input Select (rw) */
    Scr_UReg_8Bit reserved_0:2;     /**< \brief [7:6] \internal Reserved */
} Scr_SCU_MODPISEL4_Bits;

/** \brief Peripheral Input Select Register 5 */
typedef struct
{
    Scr_UReg_8Bit T1IS:2;           /**< \brief [1:0] Timer 1 Input Select (rw) */
    Scr_UReg_8Bit T0IS:2;           /**< \brief [3:2] Timer 0 Input Select (rw) */
    Scr_UReg_8Bit reserved_0:4;     /**< \brief [7:4] \internal Reserved */
} Scr_SCU_MODPISEL5_Bits;

/** \}  */

/** \addtogroup Scr_IO_Registers_union
 * \{   */

/** \brief Page Register for Port SFRs */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_IO_PAGE_Bits B;             /**< \brief Bitfield access */
} Scr_IO_PAGE;

/** \brief Port P00 Input/Output Control Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR0;

/** \brief Port P00 Input/Output Control Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR1;

/** \brief Port P00 Input/Output Control Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR2;

/** \brief Port P00 Input/Output Control Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR3;

/** \brief Port P00 Input/Output Control Register 4 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR4;

/** \brief Port P00 Input/Output Control Register 5 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR5;

/** \brief Port P00 Input/Output Control Register 6 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR6;

/** \brief Port P00 Input/Output Control Register 7 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P00_IOCR7;

/** \brief Port P00 Pad Driver Mode Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR0_Bits B;            /**< \brief Bitfield access */
} Scr_P00_PDR0;

/** \brief Port P00 Pad Driver Mode Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR2_Bits B;            /**< \brief Bitfield access */
} Scr_P00_PDR2;

/** \brief Port P00 Pad Driver Mode Register 4 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR4_Bits B;            /**< \brief Bitfield access */
} Scr_P00_PDR4;

/** \brief Port P00 Pad Driver Mode Register 6 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR6_Bits B;            /**< \brief Bitfield access */
} Scr_P00_PDR6;

/** \brief Port P00 Pin Function Decision Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDISC_Bits B;           /**< \brief Bitfield access */
} Scr_P00_PDISC;

/** \brief Port P00 Output Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OUT_Bits B;             /**< \brief Bitfield access */
} Scr_P00_OUT;

/** \brief Port P00 Output Modification Set Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OMSR_Bits B;            /**< \brief Bitfield access */
} Scr_P00_OMSR;

/** \brief Port P00 Output Modification Clear Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OMCR_Bits B;            /**< \brief Bitfield access */
} Scr_P00_OMCR;

/** \brief Port P00 Output Modification Toggle Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OMTR_Bits B;            /**< \brief Bitfield access */
} Scr_P00_OMTR;

/** \brief Port P00 Input Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IN_Bits B;              /**< \brief Bitfield access */
} Scr_P00_IN;

/** \brief Port P01 Input/Output Control Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR0;

/** \brief Port P01 Input/Output Control Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR1;

/** \brief Port P01 Input/Output Control Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR2;

/** \brief Port P01 Input/Output Control Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR3;

/** \brief Port P01 Input/Output Control Register 4 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR4;

/** \brief Port P01 Input/Output Control Register 5 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR5;

/** \brief Port P01 Input/Output Control Register 6 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR6;

/** \brief Port P01 Input/Output Control Register 7 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IOCRk_Bits B;           /**< \brief Bitfield access */
} Scr_P01_IOCR7;

/** \brief Port P01 Pad Driver Mode Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR0_Bits B;            /**< \brief Bitfield access */
} Scr_P01_PDR0;

/** \brief Port P01 Pad Driver Mode Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR2_Bits B;            /**< \brief Bitfield access */
} Scr_P01_PDR2;

/** \brief Port P01 Pad Driver Mode Register 4 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR4_Bits B;            /**< \brief Bitfield access */
} Scr_P01_PDR4;

/** \brief Port P01 Pad Driver Mode Register 6 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDR6_Bits B;            /**< \brief Bitfield access */
} Scr_P01_PDR6;

/** \brief Port P01 Pin Function Decision Control Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_PDISC_Bits B;           /**< \brief Bitfield access */
} Scr_P01_PDISC;

/** \brief Port P01 Output Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OUT_Bits B;             /**< \brief Bitfield access */
} Scr_P01_OUT;

/** \brief Port P01 Output Modification Set Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OMSR_Bits B;            /**< \brief Bitfield access */
} Scr_P01_OMSR;

/** \brief Port P01 Output Modification Clear Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OMCR_Bits B;            /**< \brief Bitfield access */
} Scr_P01_OMCR;

/** \brief Port P01 Output Modification Toggle Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_OMTR_Bits B;            /**< \brief Bitfield access */
} Scr_P01_OMTR;

/** \brief Port P01 Input Register */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_P0n_IN_Bits B;              /**< \brief Bitfield access */
} Scr_P01_IN;

/** \brief Peripheral Input Select Register 0 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_MODPISEL0_Bits B;       /**< \brief Bitfield access */
} Scr_SCU_MODPISEL0;

/** \brief Peripheral Input Select Register 1 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_MODPISEL1_Bits B;       /**< \brief Bitfield access */
} Scr_SCU_MODPISEL1;

/** \brief Peripheral Input Select Register 2 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_MODPISEL2_Bits B;       /**< \brief Bitfield access */
} Scr_SCU_MODPISEL2;

/** \brief Peripheral Input Select Register 3 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_MODPISEL3_Bits B;       /**< \brief Bitfield access */
} Scr_SCU_MODPISEL3;

/** \brief Peripheral Input Select Register 4 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_MODPISEL4_Bits B;       /**< \brief Bitfield access */
} Scr_SCU_MODPISEL4;

/** \brief Peripheral Input Select Register 5 */
typedef union
{
    Scr_UReg_8Bit U;                /**< \brief Unsigned access */
    Scr_SReg_8Bit I;                /**< \brief Signed access */
    Scr_SCU_MODPISEL5_Bits B;       /**< \brief Bitfield access */
} Scr_SCU_MODPISEL5;

/** \}  */

/*********************************************************************************************************************/
/*-------------------------------------------------Inline Functions--------------------------------------------------*/
/*********************************************************************************************************************/

#endif /* SCR_IO_SDCC_H_ */
