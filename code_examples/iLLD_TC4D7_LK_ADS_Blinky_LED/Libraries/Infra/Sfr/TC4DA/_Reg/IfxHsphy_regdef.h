/**
 * \file IfxHsphy_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: 
 * Specification: HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Hsphy_Registers Hsphy Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Hsphy_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Hsphy_Registers
 * 
 * \defgroup IfxSfr_Hsphy_Registers_union Register unions
 * \ingroup IfxSfr_Hsphy_Registers
 * 
 * \defgroup IfxSfr_Hsphy_Registers_struct Memory map
 * \ingroup IfxSfr_Hsphy_Registers
 */
#ifndef IFXHSPHY_REGDEF_H
#define IFXHSPHY_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Hsphy_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_HSPHY_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_HSPHY_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_HSPHY_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_HSPHY_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_HSPHY_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_HSPHY_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_HSPHY_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_HSPHY_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_HSPHY_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_HSPHY_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_HSPHY_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_HSPHY_ACCEN_WRB_FPI_Bits;

/** \brief Clock control register */
typedef struct _Ifx_HSPHY_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_HSPHY_CLC_Bits;

/** \brief The common control */
typedef struct _Ifx_HSPHY_CMNCFG_Bits
{
    __IO Ifx_UReg_32Bit NOMVP:2;           /**< \brief [1:0] VP nominal selection (rw) */
    __IO Ifx_UReg_32Bit NOMVPH:2;          /**< \brief [3:2] VPH nominal selection (rw) */
    __IO Ifx_UReg_32Bit FSR:1;             /**< \brief [4:4] Function select of Ethernet(RGMII or RMII on port 16)/xSPI (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_HSPHY_CMNCFG_Bits;

/** \brief DLL configuration register */
typedef struct _Ifx_HSPHY_DLL_CFG_Bits
{
    __IO Ifx_UReg_32Bit TXCFG:5;           /**< \brief [4:0] TX Clock delay control for RGMII and xSPI Mode - TXCFG (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit RXCFG:5;           /**< \brief [12:8] RX Clock delay control for RGMII and xSPI Mode - RXCFG (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit TXEN:1;            /**< \brief [16:16] Tx clock input switch (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [19:17] \internal Reserved */
    __IO Ifx_UReg_32Bit FMODE:1;           /**< \brief [20:20] dll frequency mode selection (rw) */
    __IO Ifx_UReg_32Bit REFCLKSE:1;        /**< \brief [21:21] RGMII and xSPI reference clock select (rw) */
    __IO Ifx_UReg_32Bit PEN3VX:1;          /**< \brief [22:22] Selection of IO voltage (rw) */
    __IO Ifx_UReg_32Bit PMODE:1;           /**< \brief [23:23] Pad mode or clock mode (rw) */
    __IO Ifx_UReg_32Bit RXEN:1;            /**< \brief [24:24] Receive enable (rw) */
    __IO Ifx_UReg_32Bit TXDATCFG:4;        /**< \brief [28:25] Transmit data configuration (rw) */
    __IO Ifx_UReg_32Bit RXSAMPLESEL:1;     /**< \brief [29:29] Receive data sample clock selection for xSPI (rw) */
    __I  Ifx_UReg_32Bit LOCKSTAT:1;        /**< \brief [30:30] DLL lock status (rh) */
    __IO Ifx_UReg_32Bit POWER:1;           /**< \brief [31:31] DLL power (rw) */
} Ifx_HSPHY_DLL_CFG_Bits;

/** \brief Ethernet0 selection control */
typedef struct _Ifx_HSPHY_ETH_Bits
{
    __IO Ifx_UReg_32Bit MDIO:2;            /**< \brief [1:0] Alternate Input Select - MDIO (rw) */
    __IO Ifx_UReg_32Bit MDIOEN:1;          /**< \brief [2:2] MDIO enable control. (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit CRS:2;             /**< \brief [5:4] Alternate Input Select - CRS (rw) */
    __IO Ifx_UReg_32Bit COL:2;             /**< \brief [7:6] Alternate Input Select - COL (rw) */
    __IO Ifx_UReg_32Bit RXCTL:2;           /**< \brief [9:8] Alternate Input Select - RXDV, CRSDV, RCTL (rw) */
    __IO Ifx_UReg_32Bit RXER:2;            /**< \brief [11:10] Alternate Input Select - RXER (rw) */
    __IO Ifx_UReg_32Bit RXD0:2;            /**< \brief [13:12] Alternate Input Select - RXD0 (rw) */
    __IO Ifx_UReg_32Bit RXD1:2;            /**< \brief [15:14] Alternate Input Select - RXD1 (rw) */
    __IO Ifx_UReg_32Bit RXD2:2;            /**< \brief [17:16] Alternate Input Select - RXD2 (rw) */
    __IO Ifx_UReg_32Bit RXD3:2;            /**< \brief [19:18] Alternate Input Select - RXD3 (rw) */
    __IO Ifx_UReg_32Bit TXCLK:2;           /**< \brief [21:20] Alternate Input Select - TXCLK (rw) */
    __IO Ifx_UReg_32Bit RXCLK:2;           /**< \brief [23:22] Alternate Input Select - RXCLK, REFCLK (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [27:24] \internal Reserved */
    __IO Ifx_UReg_32Bit EPR:3;             /**< \brief [30:28] External PHY register (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_HSPHY_ETH_Bits;

/** \brief Module identification register */
typedef struct _Ifx_HSPHY_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_HSPHY_ID_Bits;

/** \brief Control 0 for the PHY0 */
typedef struct _Ifx_HSPHY_MP8GPHY_CTRL0_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit EMSTEN:1;          /**< \brief [1:1] EMergency STop ENable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit INITACC:1;         /**< \brief [3:3] Initialization Access (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_HSPHY_MP8GPHY_CTRL0_Bits;

/** \brief Control 1 for the PHY0 */
typedef struct _Ifx_HSPHY_MP8GPHY_CTRL1_Bits
{
    __IO Ifx_UReg_32Bit PRS:1;             /**< \brief [0:0] PHY Reference Source Select (rw) */
    __IO Ifx_UReg_32Bit FSP:1;             /**< \brief [1:1] Function select for PHY0 (rw) */
    __IO Ifx_UReg_32Bit RRSKP:1;           /**< \brief [2:2] Skip the reference resistor for PHY0 (rw) */
    __I  Ifx_UReg_32Bit INITDONE:1;        /**< \brief [3:3] Raw PCS has loaded the code from the LUT. (rh) */
    __IO Ifx_UReg_32Bit EXTLDDONE:1;       /**< \brief [4:4] The application has completed the loading to the SRAM. (rw) */
    __IO Ifx_UReg_32Bit SRAMBYP:1;         /**< \brief [5:5] SRAM is bypassed (rw) */
    __IO Ifx_UReg_32Bit BLDBYP:1;          /**< \brief [6:6] The bootload of the MP8GPHY is bypassed (rw) */
    __IO Ifx_UReg_32Bit RST:1;             /**< \brief [7:7] Reset the PHY0 (rw) */
    __IO Ifx_UReg_32Bit PWRDWN:1;          /**< \brief [8:8] Powerdown Mode PHY0 (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_HSPHY_MP8GPHY_CTRL1_Bits;

/** \brief PCIe calibration control */
typedef struct _Ifx_HSPHY_PCIE_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit RX_TERM_OFFSET:5;    /**< \brief [6:2] Static PHY setting for PCIE RX termination offset calibration value (rw) */
    __IO Ifx_UReg_32Bit TXD_TERM_OFFSET:9;    /**< \brief [15:7] Static PHY setting for PCIe TX down termination calibration value (rw) */
    __IO Ifx_UReg_32Bit TXUP_TERM_OFFSET:9;    /**< \brief [24:16] Static PHY setting for PCIe TX up termination calibration value (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_HSPHY_PCIE_Bits;

/** \brief PHY0 register control and address register. */
typedef struct _Ifx_HSPHY_PHYREG_CTRL_Bits
{
    __IO Ifx_UReg_32Bit ADDR:17;           /**< \brief [16:0] PHY register address (rw) */
    __IO Ifx_UReg_32Bit TYP:2;             /**< \brief [18:17] PHY register read (rwh) */
    __IO Ifx_UReg_32Bit ACT:1;             /**< \brief [19:19] Bus activation and active status (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_HSPHY_PHYREG_CTRL_Bits;

/** \brief PHY0 data register. */
typedef struct _Ifx_HSPHY_PHYREG_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA:16;           /**< \brief [15:0] PHY register data. (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_PHYREG_DATA_Bits;

/** \brief Override values for incoming TX drive controls from ASIC, register #2 */
typedef struct _Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_2_Bits
{
    __IO Ifx_UReg_16Bit NYQUIST_DATA:1;    /**< \brief [0:0] Override incoming data to nyquist (rw) */
    __IO Ifx_UReg_16Bit DISABLE:1;         /**< \brief [1:1] Override value for tx_disable (rw) */
    __IO Ifx_UReg_16Bit BEACON_EN:1;       /**< \brief [2:2] Override value for tx_beacon_en (rw) */
    __IO Ifx_UReg_16Bit IBOOST_LVL:4;      /**< \brief [6:3] Override value for tx_iboost_lvl (rw) */
    __IO Ifx_UReg_16Bit VBOOST_EN:1;       /**< \brief [7:7] Override value for tx_vboost_en (rw) */
    __IO Ifx_UReg_16Bit EN:1;              /**< \brief [8:8] Enable override values for inputs below controlled by this register input signals overridden by this enable are:  tx_vboost_en  tx_iboost_lvl  tx_beacon_en  tx_disable (rw) */
    __IO Ifx_UReg_16Bit TX_MAIN_CURSOR:6;    /**< \brief [14:9] Override value for tx_eq_main (rw) */
    __IO Ifx_UReg_16Bit MAIN_OVRD_EN:1;    /**< \brief [15:15] Enable override values for TX EQ main input input signals overridden by this enable are:  tx_eq_main (rw) */
} Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_2_Bits;

/** \brief Override values for incoming TX drive controls from ASIC, register #3 */
typedef struct _Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_3_Bits
{
    __IO Ifx_UReg_16Bit TX_PRE_CURSOR:6;    /**< \brief [5:0] Override value for tx_eq_pre (rw) */
    __IO Ifx_UReg_16Bit PRE_OVRD_EN:1;     /**< \brief [6:6] Enable override values for TX EQ pre input input signals overridden by this enable are:  tx_eq_pre (rw) */
    __IO Ifx_UReg_16Bit TX_POST_CURSOR:6;    /**< \brief [12:7] Override value for tx_eq_post (rw) */
    __IO Ifx_UReg_16Bit POST_OVRD_EN:1;    /**< \brief [13:13] Enable override values for TX EQ post input input signals overridden by this enable are:  tx_eq_post (rw) */
    __I  Ifx_UReg_16Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_3_Bits;

/** \brief Override values for incoming TX drive controls from ASIC, register #2 */
typedef struct _Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_2_Bits
{
    __IO Ifx_UReg_16Bit NYQUIST_DATA:1;    /**< \brief [0:0] Override incoming data to nyquist (rw) */
    __IO Ifx_UReg_16Bit DISABLE:1;         /**< \brief [1:1] Override value for tx_disable (rw) */
    __IO Ifx_UReg_16Bit BEACON_EN:1;       /**< \brief [2:2] Override value for tx_beacon_en (rw) */
    __IO Ifx_UReg_16Bit IBOOST_LVL:4;      /**< \brief [6:3] Override value for tx_iboost_lvl (rw) */
    __IO Ifx_UReg_16Bit VBOOST_EN:1;       /**< \brief [7:7] Override value for tx_vboost_en (rw) */
    __IO Ifx_UReg_16Bit EN:1;              /**< \brief [8:8] Enable override values for inputs below controlled by this register input signals overridden by this enable are:  tx_vboost_en  tx_iboost_lvl  tx_beacon_en  tx_disable (rw) */
    __IO Ifx_UReg_16Bit TX_MAIN_CURSOR:6;    /**< \brief [14:9] Override value for tx_eq_main (rw) */
    __IO Ifx_UReg_16Bit MAIN_OVRD_EN:1;    /**< \brief [15:15] Enable override values for TX EQ main input input signals overridden by this enable are:  tx_eq_main (rw) */
} Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_2_Bits;

/** \brief Override values for incoming TX drive controls from ASIC, register #3 */
typedef struct _Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_3_Bits
{
    __IO Ifx_UReg_16Bit TX_PRE_CURSOR:6;    /**< \brief [5:0] Override value for tx_eq_pre (rw) */
    __IO Ifx_UReg_16Bit PRE_OVRD_EN:1;     /**< \brief [6:6] Enable override values for TX EQ pre input input signals overridden by this enable are:  tx_eq_pre (rw) */
    __IO Ifx_UReg_16Bit TX_POST_CURSOR:6;    /**< \brief [12:7] Override value for tx_eq_post (rw) */
    __IO Ifx_UReg_16Bit POST_OVRD_EN:1;    /**< \brief [13:13] Enable override values for TX EQ post input input signals overridden by this enable are:  tx_eq_post (rw) */
    __I  Ifx_UReg_16Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_3_Bits;

/** \brief Common Calibration Status */
typedef struct _Ifx_HSPHY_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS_Bits
{
    __IO Ifx_UReg_16Bit CMNCAL_INIT:1;     /**< \brief [0:0] common calibration init (rw) */
    __IO Ifx_UReg_16Bit CMNCAL_DONE:1;     /**< \brief [1:1] common calibration done (rw) */
    __I  Ifx_UReg_16Bit RESERVED_15_2:14;    /**< \brief [15:2] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS_Bits;

/** \brief Fast flags for calibration only */
typedef struct _Ifx_HSPHY_PHY_RAWLANE0_DIG_AON_FAST_FLAGS_Bits
{
    __IO Ifx_UReg_16Bit FAST_RX_STARTUP_CAL:1;    /**< \brief [0:0] Enables fast RX start-up calibration (rw) */
    __IO Ifx_UReg_16Bit FAST_RX_ADAPT:1;    /**< \brief [1:1] Enables fast RX adaptation (rw) */
    __IO Ifx_UReg_16Bit FAST_RX_CONT_ADAPT:1;    /**< \brief [2:2] Enables fast RX continuous adaptation (rw) */
    __IO Ifx_UReg_16Bit FAST_RX_CONT_CAL_ADAPT:1;    /**< \brief [3:3] Enables fast RX continuous calibration/adaptation (rw) */
    __IO Ifx_UReg_16Bit FAST_SUP:1;        /**< \brief [4:4] Enable fast Support block (MPLL and Rtune) (rw) */
    __IO Ifx_UReg_16Bit FAST_TX_CMN_MODE:1;    /**< \brief [5:5] Enable fast TX Common Mode Charge-up (rw) */
    __IO Ifx_UReg_16Bit FAST_TX_RXDET:1;    /**< \brief [6:6] Enable fast TX Detect RX (rw) */
    __IO Ifx_UReg_16Bit FAST_RX_PWRUP:1;    /**< \brief [7:7] Enable fast RX power-up (LOS, VREG/AFE and DCC) (rw) */
    __IO Ifx_UReg_16Bit FAST_RX_VCO_WAIT:1;    /**< \brief [8:8] Enable fast RX VCO wait times (rw) */
    __IO Ifx_UReg_16Bit FAST_RX_VCO_CAL:1;    /**< \brief [9:9] Enable fast RX VCO Calibration (rw) */
    __I  Ifx_UReg_16Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_RAWLANE0_DIG_AON_FAST_FLAGS_Bits;

/** \brief Current values for outgoing RX status controls from Raw PCS (Monitor on the pre-override output signals) */
typedef struct _Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_RX_PCS_OUT_Bits
{
    __I  Ifx_UReg_16Bit ACK:1;             /**< \brief [0:0] Value from Raw PCS for rx_ack (rh) */
    __I  Ifx_UReg_16Bit RESERVED_15_1:15;    /**< \brief [15:1] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_RX_PCS_OUT_Bits;

/** \brief Current values for outgoing TX status controls from Raw PCS (Monitor on the pre-override output signals) */
typedef struct _Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_TX_PCS_OUT_Bits
{
    __I  Ifx_UReg_16Bit ACK:1;             /**< \brief [0:0] Value from Raw PCS for tx_ack (rh) */
    __I  Ifx_UReg_16Bit RESERVED_15_1:15;    /**< \brief [15:1] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_TX_PCS_OUT_Bits;

/** \brief mplla testmodes register */
typedef struct _Ifx_HSPHY_PHY_SUP_ANA_MPLLA_TEST1_Bits
{
    __IO Ifx_UReg_16Bit MPLLA_TESTMODE_CP_INT_HALF:1;    /**< \brief [0:0] "Controls integral CP half bit   - 1: Half of integral CP current gets added to the total CP integral current  - 0: Half of integral CP current doesn't get added to the total CP integral current" (rw) */
    __IO Ifx_UReg_16Bit MPLLA_TESTMODE_CP_INT_PROG:2;    /**< \brief [2:1] Controls integral CP current programmability  - 00: 100% current gain  - 01: 120% current gain  - 10: 75% current gain  - 11: 86% current gain (rw) */
    __IO Ifx_UReg_16Bit MPLLA_TESTMODE_DAC_CUR:1;    /**< \brief [3:3] Controls DAC programmability (daccur_test)   - 0: Keeps original DAC current   - 1: doubles DAC current to feed V2I branches (rw) */
    __IO Ifx_UReg_16Bit MPLLA_TESTMODE_SEL_REF_CP:1;    /**< \brief [4:4] Controls reference of the charge pump block   - 0: Applies vp/3 as the reference   - 1: Applies fastreg_ref coming from sup_por as the reference (rw) */
    __IO Ifx_UReg_16Bit MPLLA_TESTMODE_IPROP_1F:2;    /**< \brief [6:5] Controls proportional path filter   - 00: Orginal pole   - 01: 1/1.33 times orginal pole   - 10: 1/1.66 times orginal pole   - 11: 1/2.00 times orginal pole (rw) */
    __IO Ifx_UReg_16Bit MPLLA_TESTMODE_NC_17:1;    /**< \brief [7:7] For future use (rw) */
    __I  Ifx_UReg_16Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_SUP_ANA_MPLLA_TEST1_Bits;

/** \brief Resistor tuning debug controls */
typedef struct _Ifx_HSPHY_PHY_SUP_DIG_RTUNE_DEBUG_Bits
{
    __IO Ifx_UReg_16Bit FLIP_COMP:1;       /**< \brief [0:0] Invert analog comparator output (rw) */
    __IO Ifx_UReg_16Bit MAN_TUNE:1;        /**< \brief [1:1] Write to a 1 to do a manual tuning specified by TYPE field Starting a manual tune while a tune is currently running can  cause unpredictable results (rw) */
    __IO Ifx_UReg_16Bit SET_VAL:1;         /**< \brief [2:2] Set value Write to a 1 to manually write the register specified by the  TYPE field to the value in the VALUE field (rw) */
    __IO Ifx_UReg_16Bit TYPE:2;            /**< \brief [4:3] Type of manual tuning or register read/write to execute   - 0 - ADC, or read/write rt_value  - 1 - RX tune, or read/write rx_cal_val (only 6 bits)  - 2 - TxDN tune, or read/write txdn_cal_val (10 bits)  - 3 - TxUP tune, or read/write txup_cal_val (10 bits) or Resref detect (no affect when triggering SET_VAL field) (rw) */
    __IO Ifx_UReg_16Bit VALUE:10;          /**< \brief [14:5] "Value to use when triggering SET_VAL field only the 6 LSB's are used when setting RX or TX cal values" (rw) */
    __IO Ifx_UReg_16Bit TXUP_GO:1;         /**< \brief [15:15] Enable TxUP tune to continue in manual tune mode when TYPE is TxUP tune When in non TxUP manual tune mode, this bit must be 0 (rw) */
} Ifx_HSPHY_PHY_SUP_DIG_RTUNE_DEBUG_Bits;

/** \brief Current values (pre-override) for incoming level controls from ASIC */
typedef struct _Ifx_HSPHY_PHY_SUP_DIG_RX_TXUP_TERM_OFFSET_ASIC_IN_Bits
{
    __I  Ifx_UReg_16Bit TXUP_TERM_OFFSET:9;    /**< \brief [8:0] Value from ASIC for txup_term_offset (rh) */
    __I  Ifx_UReg_16Bit RX_TERM_OFFSET:5;    /**< \brief [13:9] Value from ASIC for rx_term_offset (rh) */
    __I  Ifx_UReg_16Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_SUP_DIG_RX_TXUP_TERM_OFFSET_ASIC_IN_Bits;

/** \brief Current values (pre-override) for incoming level controls from ASIC */
typedef struct _Ifx_HSPHY_PHY_SUP_DIG_TXDN_TERM_OFFSET_ASIC_IN_Bits
{
    __I  Ifx_UReg_16Bit TXDN_TERM_OFFSET:9;    /**< \brief [8:0] Value from ASIC for txup_term_offset (rh) */
    __I  Ifx_UReg_16Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved for Future use (r) */
} Ifx_HSPHY_PHY_SUP_DIG_TXDN_TERM_OFFSET_ASIC_IN_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_HSPHY_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_HSPHY_PROT_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_HSPHY_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_HSPHY_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_HSPHY_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_HSPHY_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_HSPHY_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_HSPHY_RST_STAT_Bits;

/** \brief SR MII MMD AN Advertisement Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_AN_ADV_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_4_0:5;    /**< \brief [4:0] Reserved (r) */
    __IO Ifx_Strict_32Bit FD:1;            /**< \brief [5:5] Full Duplex (rw) */
    __IO Ifx_Strict_32Bit HD:1;            /**< \brief [6:6] Half Duplex (rw) */
    __IO Ifx_Strict_32Bit PAUSE:2;         /**< \brief [8:7] Pause Ability (rw) */
    __I  Ifx_Strict_32Bit RESERVED_11_9:3;    /**< \brief [11:9] Reserved (r) */
    __IO Ifx_Strict_32Bit RF:2;            /**< \brief [13:12] Remote Fault (rw) */
    __I  Ifx_Strict_32Bit RESERVED_14:1;    /**< \brief [14:14] Reserved (r) */
    __I  Ifx_Strict_32Bit NP:1;            /**< \brief [15:15] Next Page The XPCS always returns this bit as 0 because it does not support the Next Page feature (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_AN_ADV_Bits;

/** \brief SR MII MMD AN Expansion Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_AN_EXPN_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_0:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_Strict_32Bit PG_RCVD:1;       /**< \brief [1:1] Page Received (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit LD_NP_ABL:1;     /**< \brief [2:2] Local Device NP Able (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_AN_EXPN_Bits;

/** \brief SR MII MMD Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_CTRL_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_4_0:5;    /**< \brief [4:0] Reserved (r) */
    __I  Ifx_Strict_32Bit SS5:1;           /**< \brief [5:5] Reserved (r) */
    __I  Ifx_Strict_32Bit SS6:1;           /**< \brief [6:6] Speed Selection (r) */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __IO Ifx_Strict_32Bit DUPLEX_MODE:1;    /**< \brief [8:8] Duplex Mode (rw) */
    __IO Ifx_Strict_32Bit RESTART_AN:1;    /**< \brief [9:9] Restart Auto-Negotiation (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit RESERVED_10:1;    /**< \brief [10:10] Reserved (r) */
    __IO Ifx_Strict_32Bit LPM:1;           /**< \brief [11:11] Power-Down Mode (rw) */
    __IO Ifx_Strict_32Bit AN_ENABLE:1;     /**< \brief [12:12] Enable Auto-Negotiation (rw) */
    __I  Ifx_Strict_32Bit SS13:1;          /**< \brief [13:13] Speed Selection (LSB) (r) */
    __IO Ifx_Strict_32Bit LBE:1;           /**< \brief [14:14] Loopback Enable (rw) */
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [15:15] Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_CTRL_Bits;

/** \brief SR MII MMD Device Identifier Register 1 */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_DEV_Bits
{
    __I  Ifx_Strict_32Bit VS_MII_DEV_OUI_3_18:16;    /**< \brief [15:0] Organizationally Unique Identifier[3:18] (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_DEV_Bits;

/** \brief SR MII MMD Device Identifier Register 2 */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_DEV_ID2_Bits
{
    __I  Ifx_Strict_32Bit VS_MMD_DEV_RN_3_0:4;    /**< \brief [3:0] Revision Number (r) */
    __I  Ifx_Strict_32Bit VS_MMD_DEV_MMN_5_0:6;    /**< \brief [9:4] Model Number (r) */
    __I  Ifx_Strict_32Bit VS_MMD_DEV_OUI_19_24:6;    /**< \brief [15:10] Organizationally Unique Identifier [19:24] (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_DEV_ID2_Bits;

/** \brief SR MII MMD Extended Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_EXT_STS_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_11_0:12;    /**< \brief [11:0] Reserved (r) */
    __I  Ifx_Strict_32Bit CAP_1G_T_HD:1;    /**< \brief [12:12] 1000BASE-T Half-Duplex Capable  - 1: 1000BASE-T half-duplex capable  - 0: Not 1000BASE-T half-duplex capable The XPCS always returns 0 because it does not support this feature (r) */
    __I  Ifx_Strict_32Bit CAP_1G_T_FD:1;    /**< \brief [13:13] 1000BASE-T Full-Duplex Capable  - 1: 1000BASE-T full-duplex capable  - 0: Not 1000BASE-T full-duplex capable The XPCS always returns 0 because it does not support this feature (r) */
    __I  Ifx_Strict_32Bit CAP_1G_X_HD:1;    /**< \brief [14:14] 1000BASE-X Half-Duplex Capable  - 1: 1000BASE-X half-duplex capable  - 0: Not 1000BASE-X half-duplex capable The XPCS always returns 1 because it supports this feature (r) */
    __I  Ifx_Strict_32Bit CAP_1G_X_FD:1;    /**< \brief [15:15] 1000BASE-X Full-Duplex Capable  - 1: 1000BASE-X full-duplex capable  - 0: Not 1000BASE-X full-duplex capable The XPCS always returns 1 because it supports this feature (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_EXT_STS_Bits;

/** \brief SR MII MMD AN Link Partner Base Ability Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_LP_BABL_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_4_0:5;    /**< \brief [4:0] Reserved (r) */
    __I  Ifx_Strict_32Bit LP_FD:1;         /**< \brief [5:5] Full Duplex (r) */
    __I  Ifx_Strict_32Bit LP_HD:1;         /**< \brief [6:6] Half Duplex (r) */
    __I  Ifx_Strict_32Bit LP_PAUSE:2;      /**< \brief [8:7] Pause Ability (r) */
    __I  Ifx_Strict_32Bit RESERVED_11_9:3;    /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit LP_RF:2;         /**< \brief [13:12] Remote Fault (r) */
    __I  Ifx_Strict_32Bit LP_ACK:1;        /**< \brief [14:14] ACK bit from the Link Partner (r) */
    __I  Ifx_Strict_32Bit LP_NP:1;         /**< \brief [15:15] Next Page (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_LP_BABL_Bits;

/** \brief SR MII MMD Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_STS_Bits
{
    __I  Ifx_Strict_32Bit EXT_REG_CAP:1;    /**< \brief [0:0] Extended Register Capability  - 1: Extended Register capability exists (r) */
    __I  Ifx_Strict_32Bit RESERVED_1:1;    /**< \brief [1:1] Reserved (r) */
    __I  Ifx_Strict_32Bit LINK_STS:1;      /**< \brief [2:2] Link Status (RO,LL Type) (r) */
    __I  Ifx_Strict_32Bit AN_ABL:1;        /**< \brief [3:3] Auto-negotiation Ability (r) */
    __I  Ifx_Strict_32Bit RF:1;            /**< \brief [4:4] Remote Fault (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit AN_CMPL:1;       /**< \brief [5:5] Auto-negotiation Complete  - 1: The AN process is complete  - 0: The AN process is not complete When this bit is set to 1, the contents of the AN MMD Advertisement, AN MMD Link partner Ability, and AN MMD Expansion registers are valid (r) */
    __I  Ifx_Strict_32Bit MF_PRE_SUP:1;    /**< \brief [6:6] MF Preamble Suppression  - 1: The XPCS accepts the MDIO frames with preamble suppressed (r) */
    __I  Ifx_Strict_32Bit UN_DIR_ABL:1;    /**< \brief [7:7] Unidirectional Ability  - 1: The XPCS is able to transmit GMII irrespective of whether device has determined the valid link or not (r) */
    __I  Ifx_Strict_32Bit EXT_STS_ABL:1;    /**< \brief [8:8] "Extended Status Information  - 0: No Extended Status information is present at register address 16'h000F of this MMD device" (r) */
    __I  Ifx_Strict_32Bit HD100T:1;        /**< \brief [9:9] 100BASE-T2 Half-Duplex Ability (r) */
    __I  Ifx_Strict_32Bit FD100T:1;        /**< \brief [10:10] 100BASE-T2 Full-Duplex Ability (r) */
    __I  Ifx_Strict_32Bit HD10ABL:1;       /**< \brief [11:11] 10 Mbps Half-Duplex Ability (r) */
    __I  Ifx_Strict_32Bit FD10ABL:1;       /**< \brief [12:12] 10 Mbps Full-Duplex Ability (r) */
    __I  Ifx_Strict_32Bit HD100ABL:1;      /**< \brief [13:13] 100BASE-X Half-Duplex Ability (r) */
    __I  Ifx_Strict_32Bit FD100ABL:1;      /**< \brief [14:14] 100BASE-X Full-Duplex Ability (r) */
    __I  Ifx_Strict_32Bit ABL100T4:1;      /**< \brief [15:15] 100BASE-T4 Ability (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_STS_Bits;

/** \brief SR MII MMD Time Sync Capability Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_ABL_Bits
{
    __I  Ifx_Strict_32Bit MII_RX_DLY_ABL:1;    /**< \brief [0:0] DWC_xpcs Receive Path Data Delay Information Available (r) */
    __I  Ifx_Strict_32Bit MII_TX_DLY_ABL:1;    /**< \brief [1:1] DWC_xpcs Transmit Path Data Delay Information Available (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_2:14;    /**< \brief [15:2] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_ABL_Bits;

/** \brief SR MII MMD Time Sync Rx Max Delay Lower Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_LWR_Bits
{
    __I  Ifx_Strict_32Bit MII_RX_MAX_DLY_LWR:16;    /**< \brief [15:0] This field indicates the lower 16-bit of the 32-bit value which indicates the Maximum Data Delay in the Receive Path (in nanoseconds) of DWC_xpcs (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_LWR_Bits;

/** \brief SR MII MMD Time Sync Rx Max Delay Upper Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_UPR_Bits
{
    __I  Ifx_Strict_32Bit MII_RX_MAX_DLY_UPR:16;    /**< \brief [15:0] This field indicates the upper 16-bit of the 32-bit value which indicates the Maximum Data Delay in the Receive Path (in nanoseconds) of DWC_xpcs (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_UPR_Bits;

/** \brief SR MII MMD Time Sync Rx Min Delay Lower Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_LWR_Bits
{
    __I  Ifx_Strict_32Bit MII_RX_MIN_DLY_LWR:16;    /**< \brief [15:0] This field indicates the lower 16-bit of the 32-bit value which indicates the Minimum Data Delay in the Receive Path (in nanoseconds) of PCS (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_LWR_Bits;

/** \brief SR MII MMD Time Sync Rx Min Delay Upper Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_UPR_Bits
{
    __I  Ifx_Strict_32Bit MII_RX_MIN_DLY_UPR:16;    /**< \brief [15:0] This field indicates the upper 16-bit of the 32-bit value which indicates the Minimum Data Delay in the Receive Path (in nanoseconds) of PCS (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_UPR_Bits;

/** \brief SR MII MMD Time Sync Tx Max Delay Lower Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_LWR_Bits
{
    __I  Ifx_Strict_32Bit MII_TX_MAX_DLY_LWR:16;    /**< \brief [15:0] This field indicates the lower 16-bit of the 32-bit value which indicates the Maximum Data Delay in the Transmit Path (in nanoseconds) of DWC_xpcs (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_LWR_Bits;

/** \brief SR MII MMD Time Sync Tx Max Delay Upper Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_UPR_Bits
{
    __I  Ifx_Strict_32Bit MII_TX_MAX_DLY_UPR:16;    /**< \brief [15:0] This field indicates the upper 16-bit of the 32-bit value which indicates the Maximum Data Delay in the Transmit Path (in nanoseconds) of DWC_xpcs (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_UPR_Bits;

/** \brief SR MII MMD Time Sync Tx Min Delay Lower Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_LWR_Bits
{
    __I  Ifx_Strict_32Bit MII_TX_MIN_DLY_LWR:16;    /**< \brief [15:0] This field indicates the lower 16-bit of the 32-bit value which indicates the Minimum Data Delay in the Transmit Path (in nanoseconds) of DWC_xpcs (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_LWR_Bits;

/** \brief SR MII MMD Time Sync Tx Min Delay Upper Register */
typedef struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_UPR_Bits
{
    __I  Ifx_Strict_32Bit MII_TX_MIN_DLY_UPR:16;    /**< \brief [15:0] This field indicates the upper 16-bit of the 32-bit value which indicates the Minimum Data Delay in the Transmit Path (in nanoseconds) of DWC_xpcs (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_UPR_Bits;

/** \brief VR MII MMD AN Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_AN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit MII_AN_INTR_EN:1;    /**< \brief [0:0] Clause 37 AN Complete Interrupt Enable (rw) */
    __I  Ifx_Strict_32Bit PCS_MODE:2;      /**< \brief [2:1] When SGMII_EN=Enabled or QSGMII_EN=Enabled: PCS Mode (r) */
    __I  Ifx_Strict_32Bit TX_CONFIG:1;     /**< \brief [3:3] When SGMII_EN=Enabled or QSGMII_EN=Enabled or USXMII_EN=Enabled: Transmit Configuration (r) */
    __I  Ifx_Strict_32Bit SGMII_LINK_STS:1;    /**< \brief [4:4] When SGMII_EN=Enabled or QSGMII_EN=Enabled or USXGMII Link Status: SGMII Link Status/ USXGMII Link Status /QSGMII Port0 Link Status (r) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit MII_CTRL:1;      /**< \brief [8:8] MII Control (r) */
    __IO Ifx_Strict_32Bit IND_TX_EN:1;     /**< \brief [9:9] Independent Transmit Enable in 1000BASE-X/KX mode (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_10:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_AN_CTRL_Bits;

/** \brief VR MII MMD AN Interrupt and Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_AN_INTR_STS_Bits
{
    __IO Ifx_Strict_32Bit CL37_ANCMPLT_INTR:1;    /**< \brief [0:0] Clause 37 AN Complete Interrupt (SS,WC Type) (rwh) */
    __I  Ifx_Strict_32Bit CL37_ANSGM_STS:4;    /**< \brief [4:1] When SGMII_EN=Enabled or QSGMII_EN=Enabled: Clause 37 AN SGMII Status/QSGMII Port 0 Status (r) */
    __I  Ifx_Strict_32Bit LP_EEE_CAP:1;    /**< \brief [5:5] Link Partner EEE Capability (r) */
    __I  Ifx_Strict_32Bit LP_CK_STP:1;     /**< \brief [6:6] Link Partner EEE Clock Stop Capability (r) */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit USXG_AN_STS:7;    /**< \brief [14:8] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_AN_INTR_STS_Bits;

/** \brief VR MII MMD Debug Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_DBG_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RESTAR_SYNC_0:1;    /**< \brief [0:0] Restart Synchronization (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit SUPRESS_LOS_DET:1;    /**< \brief [4:4] Suppress Loss of Signal Detection (rw) */
    __I  Ifx_Strict_32Bit SUPRESS_EEE_LOS_DET:1;    /**< \brief [5:5] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_DT_EN_CTL:1;    /**< \brief [6:6] Rx Data Enable Control (rw) */
    __IO Ifx_Strict_32Bit RX_SYNC_CTL:1;    /**< \brief [7:7] Receive Synchronization Control (rw) */
    __IO Ifx_Strict_32Bit TX_PMBL_CTL:1;    /**< \brief [8:8] Transmit Preamble Control (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_DBG_CTRL_Bits;

/** \brief VR MII MMD Digital Control1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL1_Bits
{
    __I  Ifx_Strict_32Bit PHY_MODE_CTRL:1;    /**< \brief [0:0] When SGMII_PHY_AN_AUTO_RESTART=Enabled or QSGMII_PHY_AN_AUTO_RESTART=Enabled or USXG_PHY_AN_AUTO_RESTART=Enabled: PHY mode control (r) */
    __IO Ifx_Strict_32Bit BYP_PWRUP:1;     /**< \brief [1:1] Bypasses the normal flow of the power-up sequence and reaches the Power_Good state to enable transmission or reception (rw) */
    __IO Ifx_Strict_32Bit EN_2_5G_MODE:1;    /**< \brief [2:2] Enable 2.5G GMII Mode (rw) */
    __IO Ifx_Strict_32Bit CL37_TMR_OVR_RIDE:1;    /**< \brief [3:3] Over-Ride Control for CL37 Link Timer (rw) */
    __IO Ifx_Strict_32Bit DTXLANED_0:1;    /**< \brief [4:4] Tx Lane 0 Disable (rw) */
    __I  Ifx_Strict_32Bit EN_100M:1;       /**< \brief [5:5] Enable 100Mbps PCS Mode (r) */
    __I  Ifx_Strict_32Bit PRE_EMP:1;       /**< \brief [6:6] Pre-emption Packet Enable (r) */
    __I  Ifx_Strict_32Bit MSK_RD_ERR:1;    /**< \brief [7:7] Mask Running Disparity Error (r) */
    __IO Ifx_Strict_32Bit INIT:1;          /**< \brief [8:8] Datapath Initialization Control (rwh) */
    __I  Ifx_Strict_32Bit MAC_AUTO_SW:1;    /**< \brief [9:9] Automatic Speed Mode Change after CL37 AN (r) */
    __I  Ifx_Strict_32Bit CS_EN:1;         /**< \brief [10:10] Reserved (r) */
    __IO Ifx_Strict_32Bit PWRSV:1;         /**< \brief [11:11] Power-save mode (rw) */
    __I  Ifx_Strict_32Bit CL37_BP:1;       /**< \brief [12:12] Enable Clause 37 AN in Backplane Configuration (r) */
    __IO Ifx_Strict_32Bit EN_VSMMD1:1;     /**< \brief [13:13] Enable Vendor-Specific MMD1 (rw) */
    __IO Ifx_Strict_32Bit R2TLBE:1;        /**< \brief [14:14] Rx to Tx Loopback Enable (rw) */
    __IO Ifx_Strict_32Bit VR_RST:1;        /**< \brief [15:15] Vendor-Specific Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL1_Bits;

/** \brief VR MII MMD Digital Control2 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit RX_POL_INV_0:1;    /**< \brief [0:0] Rx Polarity Invert on Lane 0 (rw) */
    __I  Ifx_Strict_32Bit RESERVED_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_POL_INV_0:1;    /**< \brief [4:4] Tx Polarity Invert on Lane 0 (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_5:11;    /**< \brief [15:5] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL2_Bits;

/** \brief VR MII MMD Digital Error Count Select Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_DIG_ERRCNT_SEL_Bits
{
    __IO Ifx_Strict_32Bit COR:1;           /**< \brief [0:0] Clear on Read (rw) */
    __I  Ifx_Strict_32Bit RESERVED_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit INV_EC_EN:1;     /**< \brief [4:4] Invalid Code Group Error Counter Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_5:11;    /**< \brief [15:5] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_DIG_ERRCNT_SEL_Bits;

/** \brief VR MII MMD Digital Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_DIG_STS_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_0:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_Strict_32Bit LB_ACTIVE:1;     /**< \brief [1:1] Reserved (r) */
    __I  Ifx_Strict_32Bit PSEQ_STATE:3;    /**< \brief [4:2] Power Up Sequence State (r) */
    __I  Ifx_Strict_32Bit RXFIFO_UNDF:1;    /**< \brief [5:5] Rx FIFO Underflow (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit RXFIFO_OVF:1;    /**< \brief [6:6] Rx FIFO Overflow (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit RESERVED_9_7:3;    /**< \brief [9:7] Reserved (r) */
    __I  Ifx_Strict_32Bit LRX_STATE:3;     /**< \brief [12:10] Reserved (r) */
    __I  Ifx_Strict_32Bit LTX_STATE:3;     /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_DIG_STS_Bits;

/** \brief VR MII MMD Invalid Code Group Error Count1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_ICG_ERRCNT1_Bits
{
    __I  Ifx_Strict_32Bit EC0:8;           /**< \brief [7:0] Invalid Code Group Count Lane 0 (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_ICG_ERRCNT1_Bits;

/** \brief VR MII MMD Link Timer Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_LINK_TIMER_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CL37_LINK_TIME:16;    /**< \brief [15:0] Programmable Link Timer Value for Clause 37 auto-negotiation (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_LINK_TIMER_CTRL_Bits;

/** \brief VR MII MMD Miscellaneous Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MISC_STS_Bits
{
    __I  Ifx_Strict_32Bit BIT_SFT:4;       /**< \brief [3:0] Bit Shift (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MISC_STS_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY DFE Tap Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_DFE_TAP_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit DFE_TAP1_0:8;    /**< \brief [7:0] Rx Equalization DFE Tap1 value on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit DFE_TAP1_1:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_DFE_TAP_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit TX2RX_LB_EN_0:1;    /**< \brief [0:0] Enable Analog Tx-to-Rx Serial Loopback on lane 0 (rw) */
    __I  Ifx_Strict_32Bit TX2RX_LB_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit RX2TX_LB_EN_0:1;    /**< \brief [4:4] Enable Parallel Rx-to-Tx Loopback on lane 0 (rw) */
    __I  Ifx_Strict_32Bit RX2TX_LB_EN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit :5;              /**< \brief [12:8] \internal Reserved */
    __IO Ifx_Strict_32Bit RTUNE_REQ:1;     /**< \brief [13:13] Resistor Tuning Request (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [14:14] \internal Reserved */
    __IO Ifx_Strict_32Bit PLL_CTRL:1;      /**< \brief [15:15] PLL Re-initialization Control (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Control 1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit RX_LNK_UP_TIME:16;    /**< \brief [15:0] Wait Time before PLL Re-initialization (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL1_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_STS_Bits
{
    __I  Ifx_Strict_32Bit FOM:8;           /**< \brief [7:0] Figure of Merit from the PHY (r) */
    __I  Ifx_Strict_32Bit RTUNE_ACK:1;     /**< \brief [8:8] Acknowledgment for Resistor Tune Request (r) */
    __I  Ifx_Strict_32Bit MPLLA_STS:1;     /**< \brief [9:9] Status of MPLLA from PHY (r) */
    __I  Ifx_Strict_32Bit MPLLB_STS:1;     /**< \brief [10:10] Status of MPLLB from PHY (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [11:11] \internal Reserved */
    __I  Ifx_Strict_32Bit RX_ADPT_ACK:1;    /**< \brief [12:12] Receive Adaptation Acknowledgment from PHY (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_13:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_STS_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY MPLL Common Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MPLL_CMN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit MPLL_EN_0:1;     /**< \brief [0:0] Tx MPLL Enable-lane 0 (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit MPLLB_SEL_0:1;    /**< \brief [4:4] Tx MPLLB Select-lane 0 (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MPLL_CMN_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Reference Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_REF_CLK_CTRL_Bits
{
    __IO Ifx_Strict_32Bit REF_CLK_EN:1;    /**< \brief [0:0] Reference Clock Enable (rw) */
    __IO Ifx_Strict_32Bit REF_USE_PAD:1;    /**< \brief [1:1] Use Pad Clk as Reference Clock (rw) */
    __IO Ifx_Strict_32Bit REF_CLK_DIV2:1;    /**< \brief [2:2] Reference Clock divide by 2 (rw) */
    __IO Ifx_Strict_32Bit REF_RANGE:3;     /**< \brief [5:3] Input Reference Clock Range (rw) */
    __IO Ifx_Strict_32Bit REF_MPLLA_DIV2:1;    /**< \brief [6:6] MPLLA Reference Clock Divider Control (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [9:7] \internal Reserved */
    __I  Ifx_Strict_32Bit REF_MPLLA_DIV:3;    /**< \brief [12:10] For Multi-protocol 25G PHY or Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_REF_CLK_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Attenuation Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_ATTN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RX0_EQ_ATT_LVL:3;    /**< \brief [2:0] Rx Equalization Attenuation level for lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_ATTN_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY/25G Rx CDR Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_CDR_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CDR_TRACK_EN_0:1;    /**< \brief [0:0] Enable CDR tracking (rw) */
    __I  Ifx_Strict_32Bit CDR_TRACK_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit CDR_SSC_EN_0:1;    /**< \brief [4:4] Rx CDR SSC Mode Enable on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit CDR_SSC_EN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit VCO_LOW_FREQ_0:1;    /**< \brief [8:8] Lower-frequency operating band control (rw) */
    __I  Ifx_Strict_32Bit VCO_LOW_FREQ_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_CDR_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Equalization Control 4 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_EQ_CTRL4_Bits
{
    __IO Ifx_Strict_32Bit CONT_ADAPT_0:1;    /**< \brief [0:0] Receiver Adaptation Continuous Operation on lane 0 (rw) */
    __I  Ifx_Strict_32Bit CONT_ADAPT_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit CONT_OFF_CAN_0:1;    /**< \brief [4:4] Receiver offset cancellation continuous operation on lane 0 (rw) */
    __I  Ifx_Strict_32Bit CONT_OFF_CAN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_11_8:4;    /**< \brief [11:8] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_AD_REQ:1;     /**< \brief [12:12] Receive Adaptation Request (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_13:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_EQ_CTRL4_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL0_Bits
{
    __IO Ifx_Strict_32Bit RX_TERM_EN_0:1;    /**< \brief [0:0] Rx Termination Enable on lane 0 of PHY When this bit is set, PHY Rx is terminated with a nominal 50 ohm resistance (rw) */
    __I  Ifx_Strict_32Bit RX_TERM_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_ALIGN_EN_0:1;    /**< \brief [4:4] Rx Data Alignment Enable on lane 0 of Multi-protocol 12G PHY (rw) */
    __I  Ifx_Strict_32Bit RX_ALIGN_EN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_DT_EN_0:1;    /**< \brief [8:8] Rx Data Enable on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit RX_DT_EN_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_CLKSFT_0:1;    /**< \brief [12:12] Rx clock shift on lane 0 of Multi-protocol 12G PHY (rw) */
    __I  Ifx_Strict_32Bit RX_CLKSFT_3_1:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL1_Bits
{
    __IO Ifx_Strict_32Bit RX_INV_0:1;      /**< \brief [0:0] Rx Data Invert on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit RX_INV_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_RST_0:1;      /**< \brief [4:4] Rx reset on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit RX_RST_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_TERM_ACDC_0:1;    /**< \brief [8:8] Rx Termination control on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit RX_TERM_ACDC_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_DIV16P5_CLK_EN_0:1;    /**< \brief [12:12] Receiver Divide by 16.5 output clock on lane 0 (rw) */
    __I  Ifx_Strict_32Bit RX_DIV16P5_CLK_EN_3_1:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL1_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Power State Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_POWER_STATE_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RX0_PSTATE:2;    /**< \brief [1:0] Rx power state control for lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit RX1_PSTATE:2;    /**< \brief [3:2] Reserved (r) */
    __I  Ifx_Strict_32Bit RX2_PSTATE:2;    /**< \brief [5:4] Reserved (r) */
    __I  Ifx_Strict_32Bit RX3_PSTATE:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_DISABLE_0:1;    /**< \brief [8:8] Receiver Disable on lane 0 (rw) */
    __I  Ifx_Strict_32Bit RX_DISABLE_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [12:12] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_12:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_POWER_STATE_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Rate Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_RATE_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RX0_RATE:2;      /**< \brief [1:0] Rx date rate on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_RATE_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_STS_Bits
{
    __I  Ifx_Strict_32Bit RX_ACK_0:1;      /**< \brief [0:0] Rx Acknowledge on lane 0 of PHY (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit LF_SD_0:1;       /**< \brief [4:4] For Multi-protocol 25G PHY or Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit LF_SD_3_1:3;     /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit HF_SD_0:1;       /**< \brief [8:8] Multi-protocol 25G PHY or For Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit HF_SD_3_1:3;     /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_STS_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY SRAM Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_SRAM_Bits
{
    __I  Ifx_Strict_32Bit INIT_DN:1;       /**< \brief [0:0] SRAM Initialiization Done (r) */
    __IO Ifx_Strict_32Bit EXT_LD_DN:1;     /**< \brief [1:1] SRAM External Loading Done (rw) */
    __IO Ifx_Strict_32Bit BTLD_BYP:1;      /**< \brief [2:2] SRAM Bootload Bypass (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_SRAM_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Boost Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_BOOST_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TX0_IBOOST:4;    /**< \brief [3:0] Tx current boost level on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_BOOST_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Equalization Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit TX_EQ_PRE:6;     /**< \brief [5:0] Tx Pre-Emphasis level adjustment Control (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_6:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_EQ_MAIN:6;    /**< \brief [13:8] Control for setting Tx driver output amplitude (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Equalization Control 1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit TX_EQ_POST:6;    /**< \brief [5:0] Tx Post-Emphasis level adjustment Control (rw) */
    __I  Ifx_Strict_32Bit TX_EQ_OVR_RIDE:1;    /**< \brief [6:6] Reserved (r) */
    __I  Ifx_Strict_32Bit TX_EQ_DEF_CTRL:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit CA_TX_EQ:1;      /**< \brief [8:8] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL1_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx General Register 0 */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL0_Bits
{
    __IO Ifx_Strict_32Bit TXBCN_EN_0:1;    /**< \brief [0:0] Tx Beaconing Enable on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit TXBCN_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_INV_0:1;      /**< \brief [4:4] Tx Invert on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit TX_INV_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_RST_0:1;      /**< \brief [8:8] Tx Reset on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit TX_RST_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_DT_EN_0:1;    /**< \brief [12:12] Tx Data Enable on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit TX_DT_EN_3_1:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx General Register 1 */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL1_Bits
{
    __IO Ifx_Strict_32Bit DET_RX_REQ_0:1;    /**< \brief [0:0] Transmitter Rx-Detection request on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit DET_RX_REQ_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit VBOOST_EN_0:1;    /**< \brief [4:4] Tx voltage Boost Enable on lane 0 of PHY When this bit is set, the current mode Tx Swing boost in the PHY is enabled (rw) */
    __I  Ifx_Strict_32Bit VBOOST_EN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit VBOOST_LVL:3;    /**< \brief [10:8] Tx Voltage Boost Maximum Level (rw) */
    __I  Ifx_Strict_32Bit RESERVED_11:1;    /**< \brief [11:11] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_CLK_RDY_0:1;    /**< \brief [12:12] Transmitter Input clock ready on lane 0 (rw) */
    __I  Ifx_Strict_32Bit TX_CLK_RDY_3_1:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL1_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Power State Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_POWER_STATE_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TX0_PSTATE:2;    /**< \brief [1:0] Tx power state control for lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit TX1_PSTATE:2;    /**< \brief [3:2] Reserved (r) */
    __I  Ifx_Strict_32Bit TX2_PSTATE:2;    /**< \brief [5:4] Reserved (r) */
    __I  Ifx_Strict_32Bit TX3_PSTATE:2;    /**< \brief [7:6] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_DISABLE_0:1;    /**< \brief [8:8] "Transmitter Disable on lane 0 This field drives the output port 'xpcs_tx_disable_o[0]'" (rw) */
    __I  Ifx_Strict_32Bit TX_DISABLE_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_POWER_STATE_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Rate Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_RATE_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TX0_RATE:3;      /**< \brief [2:0] Tx date rate on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_RATE_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_STS_Bits
{
    __I  Ifx_Strict_32Bit TX_ACK_0:1;      /**< \brief [0:0] Tx Acknowledge on lane 0 of PHY (r) */
    __I  Ifx_Strict_32Bit TX_ACK_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __I  Ifx_Strict_32Bit DETRX_RSLT_0:1;    /**< \brief [4:4] Receiver Detection Result on lane 0 (r) */
    __I  Ifx_Strict_32Bit DETRX_RSLT_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_STS_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY VCO Calibration Load 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_VCO_CAL_LD0_Bits
{
    __IO Ifx_Strict_32Bit VCO_LD_VAL_0:13;    /**< \brief [12:0] Rx VCO calibration load value on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_13:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_VCO_CAL_LD0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY MPLLA Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_MULTIPLIER:8;    /**< \brief [7:0] MPLLA frequency Multiplier Control (rw) */
    __I  Ifx_Strict_32Bit MPLLA_SSC_CLK_SEL:3;    /**< \brief [10:8] This field controls MPLLA spread-spectrum clock select of Multi-protocol 10G PHY (r) */
    __I  Ifx_Strict_32Bit RESERVED_11:1;    /**< \brief [11:11] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [14:12] \internal Reserved */
    __IO Ifx_Strict_32Bit MPLLA_CAL_DISABLE:1;    /**< \brief [15:15] MPLLA Calibration Disable This field can be programmed to 1, to disable calibration of MPLLA by PHY firmware (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY MPLLA Control 2 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_DIV_MULT:7;    /**< \brief [6:0] MPLLA Output Frequency Multiplier Control (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV_CLK_EN:1;    /**< \brief [7:7] Enable mplla_div_clk from PHY (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV8_CLK_EN:1;    /**< \brief [8:8] MPLLA Divide by 8 Enable (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV10_CLK_EN:1;    /**< \brief [9:9] MPLLA Divide by 10 Enable (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV16P5_CLK_EN:1;    /**< \brief [10:10] MPLLA Divide by 16.5 Enable (rw) */
    __IO Ifx_Strict_32Bit MPLLA_TX_CLK_DIV:3;    /**< \brief [13:11] MPLLA Tx Clock Divider (rw) */
    __I  Ifx_Strict_32Bit RESERVED_14:1;    /**< \brief [14:14] Reserved (r) */
    __IO Ifx_Strict_32Bit MPLLA_WRD_DIV2_EN:1;    /**< \brief [15:15] MPLLA Word Clock Divide by 2 (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL2_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY Rx General Control 2 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL2_Bits
{
    __IO Ifx_Strict_32Bit RX_REQ_0:1;      /**< \brief [0:0] Receiver operation request on lane 0 of PHY (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit RX_REQ_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_LPD_0:1;      /**< \brief [4:4] Receiver Lane Power Down on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit RX_LPD_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit RX0_WIDTH:2;     /**< \brief [9:8] Rx Datapath Width on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RX1_WIDTH:2;     /**< \brief [11:10] Reserved (r) */
    __I  Ifx_Strict_32Bit RX2_WIDTH:2;     /**< \brief [13:12] Reserved (r) */
    __I  Ifx_Strict_32Bit RX3_WIDTH:2;     /**< \brief [15:14] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL2_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY Rx General Control 3 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL3_Bits
{
    __IO Ifx_Strict_32Bit LOS_TRSHLD_0:3;    /**< \brief [2:0] Loss of signal threshold on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit LOS_TRSHLD_1:3;    /**< \brief [5:3] Reserved (r) */
    __I  Ifx_Strict_32Bit LOS_TRSHLD_2:3;    /**< \brief [8:6] Reserved (r) */
    __I  Ifx_Strict_32Bit LOS_TRSHLD_3:3;    /**< \brief [11:9] Reserved (r) */
    __IO Ifx_Strict_32Bit LOS_LFPS_EN_0:1;    /**< \brief [12:12] Rx LOS LFPS Enable on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit LOS_LFPS_EN_3_1:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL3_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY Tx General Register 2 */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_TX_GENCTRL2_Bits
{
    __IO Ifx_Strict_32Bit TX_REQ_0:1;      /**< \brief [0:0] Transmitter operation request on lane 0 of PHY (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit TX_REQ_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_LPD_0:1;      /**< \brief [4:4] Transmitter Lane Power Down on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit TX_LPD_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit TX0_WIDTH:2;     /**< \brief [9:8] Tx Datapath Width on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit TX1_WIDTH:2;     /**< \brief [11:10] Reserved (r) */
    __I  Ifx_Strict_32Bit TX2_WIDTH:2;     /**< \brief [13:12] Reserved (r) */
    __I  Ifx_Strict_32Bit TX3_WIDTH:2;     /**< \brief [15:14] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_TX_GENCTRL2_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G PHY AFE-DFE Enable Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_AFE_DFE_EN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit AFE_EN_0:1;      /**< \brief [0:0] Rx Adaptation AFE Enable on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit AFE_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit DFE_EN_0:1;      /**< \brief [4:4] Rx DFE Enable on lane 0 of the PHY This bit drives the output port xpcs_rx_adapt_dfe_en_o[0] (rw) */
    __I  Ifx_Strict_32Bit DFE_EN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_AFE_DFE_EN_CTRL_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G PHY Rx Equalization Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_RX_EQ_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit CTLE_BOOST_0:5;    /**< \brief [4:0] Rx Equalization CTLE Boost value on lane 0 of the PHY (rw) */
    __IO Ifx_Strict_32Bit CTLE_POLE_0:3;    /**< \brief [7:5] Rx Equalization CTLE Pole Value on lane 0 of the PHY (rw) */
    __IO Ifx_Strict_32Bit VGA2_GAIN_0:4;    /**< \brief [11:8] Rx Equalization VGA2 Gain on lane 0 of the PHY (rw) */
    __IO Ifx_Strict_32Bit VGA1_GAIN_0:4;    /**< \brief [15:12] Rx Equalization VGA1 Gain on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_RX_EQ_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 12G PHY VCO Calibration Reference Register 0 */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_12G_VCO_CAL_REF0_Bits
{
    __IO Ifx_Strict_32Bit VCO_REF_LD_0:6;    /**< \brief [5:0] Rx VCO calibration reference load value -lane 0 (rw) */
    __I  Ifx_Strict_32Bit RESERVED_6:1;    /**< \brief [6:6] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit VCO_REF_LD_1:6;    /**< \brief [13:8] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_VCO_CAL_REF0_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Miscellaneous Control 2 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_MISC_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit SUP_MISC:8;      /**< \brief [7:0]  (rw) */
    __IO Ifx_Strict_32Bit REF_CLK_DET_EN:1;    /**< \brief [8:8] Reference Clock Detect enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_MISC_CTRL2_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Rx General Control 4 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_GENCTRL4_Bits
{
    __IO Ifx_Strict_32Bit RX_TERM_OFFSET:5;    /**< \brief [4:0] Offset for RX Termination (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RX_DFE_BYP_0:1;    /**< \brief [8:8] RX DFE Bypass Enable on Lane o (r) */
    __I  Ifx_Strict_32Bit RX_DFE_BYP_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __IO Ifx_Strict_32Bit RX_125MHZ_CLK_EN_0:1;    /**< \brief [12:12] RX 125MHz clock generation Enable on Lane 0 (rw) */
    __I  Ifx_Strict_32Bit RX_125MHZ_CLK_EN_3_1:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_GENCTRL4_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY RX IQ Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_IQ_CTRL0_Bits
{
    __I  Ifx_Strict_32Bit RX0_MARGIN_IQ:7;    /**< \brief [6:0] Value of RX IQ Margining on lane0 (r) */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [11:8] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_IQ_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY RX Miscellaneous Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_MISC_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit RX0_MISC:8;      /**< \brief [7:0] RX Miscellaneous control for lane0 (rw) */
    __I  Ifx_Strict_32Bit RX1_MISC:8;      /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_MISC_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Rx PPM Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit RX0_CDR_PPM_MAX:5;    /**< \brief [4:0] Maximum Allowed PPM on the RX0 CDR Clock (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RX1_CDR_PPM_MAX:5;    /**< \brief [12:8] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_13:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Rx PPM Status 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_STS0_Bits
{
    __I  Ifx_Strict_32Bit RX0_PPM_DRIFT:6;    /**< \brief [5:0] RX CDR PPM Drift on lane0 (r) */
    __I  Ifx_Strict_32Bit RESERVED_6:1;    /**< \brief [6:6] Reserved (r) */
    __I  Ifx_Strict_32Bit RX0_PPM_DRIFT_VLD:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit RX1_PPM_DRIFT:6;    /**< \brief [13:8] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_14:1;    /**< \brief [14:14] Reserved (r) */
    __I  Ifx_Strict_32Bit RX1_PPM_DRIFT_VLD:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_STS0_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY TX General Control 3 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL3_Bits
{
    __IO Ifx_Strict_32Bit TXUP_TERM_OFFSET:9;    /**< \brief [8:0] Offset for TX Up Termination (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL3_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY TX General Control 4 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL4_Bits
{
    __IO Ifx_Strict_32Bit TXDN_TERM_OFFSET:9;    /**< \brief [8:0] Offset for TX Down Termination (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL4_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY TX Miscellaneous Control 0 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_MISC_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit TX0_MISC:8;      /**< \brief [7:0] TX Miscellaneous control for lane0 (rw) */
    __I  Ifx_Strict_32Bit TX1_MISC:8;      /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_MISC_CTRL0_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_SSC_EN:1;    /**< \brief [0:0] MPLLA SSC Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit MPLLA_SSC_CLK_SEL:1;    /**< \brief [4:4] MPLLA SSC Clock Select (rw) */
    __IO Ifx_Strict_32Bit MPLLA_FRACN_CTRL:11;    /**< \brief [15:5] MPLLA Fractional Control (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL1_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 4 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL4_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_SSC_FRQ_CNT_INT:12;    /**< \brief [11:0] MPLLA SSC Frequency Counter Initialization (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL4_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 5 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL5_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_SSC_FRQ_CNT_PK:8;    /**< \brief [7:0] MPLLA SSC Frequency Counter Peak (rw) */
    __IO Ifx_Strict_32Bit MPLLA_SSC_SPD_EN:1;    /**< \brief [8:8] MPLLA SSC Up Spread Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL5_Bits;

/** \brief VR MII Synopsys Multi-protocol 16G PHY Rx CDR Control1 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_16G_RX_CDR_CTRL1_Bits
{
    __I  Ifx_Strict_32Bit VCO_TEMP_COMP_EN_0:1;    /**< \brief [0:0] RX_CDR VCO Temperature Compensation Enable Lane 0 (r) */
    __I  Ifx_Strict_32Bit VCO_TEMP_COMP_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __I  Ifx_Strict_32Bit VCO_STEP_CTRL_0:1;    /**< \brief [4:4] RX_CDR VCO Step Control Lane 0 (r) */
    __I  Ifx_Strict_32Bit VCO_STEP_CTRL_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit VCO_FRQBAND_0:2;    /**< \brief [9:8] RX CDR VCO Frequency Band lane0 (rw) */
    __I  Ifx_Strict_32Bit VCO_FRQBAND_1:2;    /**< \brief [11:10] Reserved (r) */
    __I  Ifx_Strict_32Bit VCO_FRQBAND_2:2;    /**< \brief [13:12] Reserved (r) */
    __I  Ifx_Strict_32Bit VCO_FRQBAND_3:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_RX_CDR_CTRL1_Bits;

/** \brief VR MII Synopsys Multi-protocol 8G PHY MPLLA Control 6 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL6_Bits
{
    __IO Ifx_Strict_32Bit CP_INT:5;        /**< \brief [4:0] MPLLA Charge Pump Integral Control (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit CP_PROP:4;       /**< \brief [11:8] MPLLA Charge Pump Proportional Control (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL6_Bits;

/** \brief VR MII Synopsys Multi-protocol 8G PHY MPLLA Control 7 Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL7_Bits
{
    __IO Ifx_Strict_32Bit CP_INT_GS:5;     /**< \brief [4:0] MPLLA Charge Pump Integral Control in Gear-Shift Mode (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit CP_PROP_GS:4;    /**< \brief [11:8] MPLLA Charge Pump Proportional Control in Gear-Shift Mode (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL7_Bits;

/** \brief VR MII PHY Rx Lane Status Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_RX_LSTS_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_3_0:4;    /**< \brief [3:0] Reserved (r) */
    __I  Ifx_Strict_32Bit SIG_DET_0:1;     /**< \brief [4:4] Rx Signal Detect for Lane 0 (r) */
    __I  Ifx_Strict_32Bit SIG_DET_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RX_PLL_STATE_0:1;    /**< \brief [8:8] Reserved (r) */
    __I  Ifx_Strict_32Bit RX_PLL_STATE_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit RX_VALID_0:1;    /**< \brief [12:12] DPLL Lock Status for Lane 0 (r) */
    __I  Ifx_Strict_32Bit RX_VALID_3_1:3;    /**< \brief [15:13] DPLL Lock Status for Lanes[3:1] (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_RX_LSTS_Bits;

/** \brief VR MII MMD Test Control Register */
typedef struct _Ifx_HSPHY_TPCS_MII_VR_TC_Bits
{
    __IO Ifx_Strict_32Bit TP:2;            /**< \brief [1:0] Test Pattern Select (rw) */
    __IO Ifx_Strict_32Bit TPE:1;           /**< \brief [2:2] Test Pattern Enable Lanes (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_MII_VR_TC_Bits;

/** \brief SR Control MMD AN Device Identifier Register 1 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID1_Bits
{
    __I  Ifx_Strict_32Bit ANDOUI_3_18:16;    /**< \brief [15:0] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID1_Bits;

/** \brief SR Control MMD AN Device Identifier Register 2 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID2_Bits
{
    __I  Ifx_Strict_32Bit ANDRN_3_0:4;     /**< \brief [3:0] Reserved (r) */
    __I  Ifx_Strict_32Bit ANDMMN_5_0:6;    /**< \brief [9:4] Reserved (r) */
    __I  Ifx_Strict_32Bit ANDOUI_19_24:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID2_Bits;

/** \brief SR Control MMD Control Register */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_CTRL_Bits
{
    __I  Ifx_Strict_32Bit AN_MMD_EN:1;     /**< \brief [0:0] Reserved (r) */
    __I  Ifx_Strict_32Bit PCS_XS_MMD_EN:1;    /**< \brief [1:1] Reserved (r) */
    __IO Ifx_Strict_32Bit MII_MMD_EN:1;    /**< \brief [2:2] VS MMD Enable (rw) */
    __I  Ifx_Strict_32Bit PMA_MMD_EN:1;    /**< \brief [3:3] Reserved (r) */
    __IO Ifx_Strict_32Bit FASTSIM:1;       /**< \brief [4:4] Fast Simulation Enable (rw) */
    __I  Ifx_Strict_32Bit PD_CTRL:1;       /**< \brief [5:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_6:10;    /**< \brief [15:6] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_CTRL_Bits;

/** \brief SR Control MMD Device Identifier Register 1 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID1_Bits
{
    __I  Ifx_Strict_32Bit VSDOUI_3_18:16;    /**< \brief [15:0] Organizationally Unique Identifier[3:18] for Vendor-Specific MMD1 (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID1_Bits;

/** \brief SR Control MMD Device Identifier Register 2 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID2_Bits
{
    __I  Ifx_Strict_32Bit VSDRN_3_0:4;     /**< \brief [3:0] Revision Number for Vendor-Specific MMD1 (r) */
    __I  Ifx_Strict_32Bit VSDMMN_5_0:6;    /**< \brief [9:4] Model Number for Vendor-Specific MMD1 (r) */
    __I  Ifx_Strict_32Bit VSDOUI_19_24:6;    /**< \brief [15:10] Organizationally Unique Identifier[19:24] for Vendor-Specific MMD1 (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID2_Bits;

/** \brief SR Control MMD PCS Device Identifier Register 1 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID1_Bits
{
    __I  Ifx_Strict_32Bit PCSDOUI_3_18:16;    /**< \brief [15:0] Organizationally Unique Identifier[3:18] for PCS MMD (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID1_Bits;

/** \brief SR Control MMD PCS Device Identifier Register 2 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID2_Bits
{
    __I  Ifx_Strict_32Bit PCSDRN_3_0:4;    /**< \brief [3:0] Revision Number for XS or PCS MMD (r) */
    __I  Ifx_Strict_32Bit PCSDMMN_5_0:6;    /**< \brief [9:4] Model Number for XS or PCS MMD (r) */
    __I  Ifx_Strict_32Bit PCSDOUI_19_24:6;    /**< \brief [15:10] Organizationally Unique Identifier[19:24] for PCS MMD (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID2_Bits;

/** \brief SR Control MMD Package Identifier Register 1 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_PKGID1_Bits
{
    __I  Ifx_Strict_32Bit MMDPOUI_3_18:16;    /**< \brief [15:0] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_PKGID1_Bits;

/** \brief SR Control MMD Package Identifier Register 2 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_PKGID2_Bits
{
    __I  Ifx_Strict_32Bit MMDPRN_3_0:4;    /**< \brief [3:0] Reserved (r) */
    __I  Ifx_Strict_32Bit MMDPMMN_5_0:6;    /**< \brief [9:4] Reserved (r) */
    __I  Ifx_Strict_32Bit MMDPOUI_19_24:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_PKGID2_Bits;

/** \brief SR Control MMD PMA Device Identifier Register 1 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID1_Bits
{
    __I  Ifx_Strict_32Bit PMADOUI_3_18:16;    /**< \brief [15:0] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID1_Bits;

/** \brief SR Control MMD PMA Device Identifier Register 2 */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID2_Bits
{
    __I  Ifx_Strict_32Bit PMADRN_3_0:4;    /**< \brief [3:0] Reserved (r) */
    __I  Ifx_Strict_32Bit PMADMMN_5_0:6;    /**< \brief [9:4] Reserved (r) */
    __I  Ifx_Strict_32Bit PMADOUI_19_24:6;    /**< \brief [15:10] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID2_Bits;

/** \brief SR Control MMD Status Register */
typedef struct _Ifx_HSPHY_TPCS_VSMMD_SR_STS_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_13_0:14;    /**< \brief [13:0] Reserved (r) */
    __I  Ifx_Strict_32Bit VSDP:2;          /**< \brief [15:14] Control MMD Device Present (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_TPCS_VSMMD_SR_STS_Bits;

/** \brief 0 SR MII MMD Control Register */
typedef struct _Ifx_HSPHY_XPCS_MII_CTRL_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_4_0:5;    /**< \brief [4:0] Reserved (r) */
    __IO Ifx_Strict_32Bit SS5:1;           /**< \brief [5:5] This bit along with SS13 and SS6 bit of this register indicates the speed (rw) */
    __IO Ifx_Strict_32Bit SS6:1;           /**< \brief [6:6] Speed Selection (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __IO Ifx_Strict_32Bit DUPLEX_MODE:1;    /**< \brief [8:8] Duplex Mode (rw) */
    __IO Ifx_Strict_32Bit RESTART_AN:1;    /**< \brief [9:9] Restart Auto-Negotiation (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit RESERVED_10:1;    /**< \brief [10:10] Reserved (r) */
    __IO Ifx_Strict_32Bit LPM:1;           /**< \brief [11:11] Power-Down Mode (rw) */
    __IO Ifx_Strict_32Bit AN_ENABLE:1;     /**< \brief [12:12] Enable Auto-Negotiation (rw) */
    __IO Ifx_Strict_32Bit SS13:1;          /**< \brief [13:13] Speed Selection (LSB) (rw) */
    __IO Ifx_Strict_32Bit LBE:1;           /**< \brief [14:14] Loopback Enable (rw) */
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [15:15] Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_MII_CTRL_Bits;

/** \brief 0 VR MII MMD Digital Control1 Register */
typedef struct _Ifx_HSPHY_XPCS_MII_DIG_CTRL1_Bits
{
    __I  Ifx_Strict_32Bit PHY_MODE_CTRL:1;    /**< \brief [0:0] When SGMII_PHY_AN_AUTO_RESTART=Enabled or QSGMII_PHY_AN_AUTO_RESTART=Enabled or USXG_PHY_AN_AUTO_RESTART=Enabled: PHY mode control (r) */
    __IO Ifx_Strict_32Bit BYP_PWRUP:1;     /**< \brief [1:1] Bypasses the normal flow of the power-up sequence and reaches the Power_Good state to enable transmission or reception (rw) */
    __IO Ifx_Strict_32Bit EN_2_5G_MODE:1;    /**< \brief [2:2] Enable 2.5G GMII Mode (rw) */
    __IO Ifx_Strict_32Bit CL37_TMR_OVR_RIDE:1;    /**< \brief [3:3] Over-Ride Control for CL37 Link Timer (rw) */
    __I  Ifx_Strict_32Bit DTXLANED_0:1;    /**< \brief [4:4] Tx Lane 0 Disable (r) */
    __IO Ifx_Strict_32Bit EN_100M:1;       /**< \brief [5:5] Enable 100Mbps PCS Mode (rw) */
    __IO Ifx_Strict_32Bit PRE_EMP:1;       /**< \brief [6:6] Pre-emption Packet Enable (rw) */
    __I  Ifx_Strict_32Bit MSK_RD_ERR:1;    /**< \brief [7:7] Mask Running Disparity Error (r) */
    __I  Ifx_Strict_32Bit INIT:1;          /**< \brief [8:8] Reserved (r) */
    __IO Ifx_Strict_32Bit MAC_AUTO_SW:1;    /**< \brief [9:9] Automatic Speed Mode Change after CL37 AN (rw) */
    __I  Ifx_Strict_32Bit CS_EN:1;         /**< \brief [10:10] Reserved (r) */
    __IO Ifx_Strict_32Bit PWRSV:1;         /**< \brief [11:11] Power-save mode (rw) */
    __I  Ifx_Strict_32Bit CL37_BP:1;       /**< \brief [12:12] Enable Clause 37 AN in Backplane Configuration (r) */
    __I  Ifx_Strict_32Bit EN_VSMMD1:1;     /**< \brief [13:13] Enable Vendor-Specific MMD1 (r) */
    __I  Ifx_Strict_32Bit R2TLBE:1;        /**< \brief [14:14] Rx to Tx Loopback Enable (r) */
    __IO Ifx_Strict_32Bit VR_RST:1;        /**< \brief [15:15] Vendor-Specific Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_MII_DIG_CTRL1_Bits;

/** \brief 0 VR MII MMD Digital Control 3 Register */
typedef struct _Ifx_HSPHY_XPCS_MII_VR_MII_DIG_CTRL3_Bits
{
    __I  Ifx_Strict_32Bit TICD:1;          /**< \brief [0:0] Transmit IPG Check Deviation on Port 0 (r) */
    __I  Ifx_Strict_32Bit RICE:1;          /**< \brief [1:1] Receive IPG Check Enable during XGMII-to-GMII conversion on Port 0 (r) */
    __IO Ifx_Strict_32Bit CICD:1;          /**< \brief [2:2] Clock-compensation IPG check Deviation on Port 0 (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_3:13;    /**< \brief [15:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_MII_VR_MII_DIG_CTRL3_Bits;

/** \brief SR XS or PCS0 MMD Control1 Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL1_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_1_0:2;    /**< \brief [1:0] Reserved (r) */
    __I  Ifx_Strict_32Bit SS_5_2:4;        /**< \brief [5:2] Speed Selection Bits [5:2] (r) */
    __I  Ifx_Strict_32Bit SS6:1;           /**< \brief [6:6] Speed Selection Bit 6 (r) */
    __I  Ifx_Strict_32Bit RESERVED_8_7:2;    /**< \brief [8:7] Reserved (r) */
    __I  Ifx_Strict_32Bit XAUI_STOP:1;     /**< \brief [9:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [10:10] \internal Reserved */
    __IO Ifx_Strict_32Bit LPM:1;           /**< \brief [11:11] Low-Power Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_12:1;    /**< \brief [12:12] Reserved (r) */
    __I  Ifx_Strict_32Bit SS13:1;          /**< \brief [13:13] Speed Selection (r) */
    __I  Ifx_Strict_32Bit LBE:1;           /**< \brief [14:14] Reserved (r) */
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [15:15] Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL1_Bits;

/** \brief SR PCS0 Control2 Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit PCS_TYPE_SEL:4;    /**< \brief [3:0] PCS Type Select (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL2_Bits;

/** \brief SR XS or PCS0 MMD Status1 Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_SR_XS_STS1_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_0:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_Strict_32Bit LPMS:1;          /**< \brief [1:1] Low-Power Mode Support (r) */
    __I  Ifx_Strict_32Bit RLU:1;           /**< \brief [2:2] Rx Link Up (RO,LL Type) (r) */
    __I  Ifx_Strict_32Bit RESERVED_5_3:3;    /**< \brief [5:3] Reserved (r) */
    __I  Ifx_Strict_32Bit CSC:1;           /**< \brief [6:6] Clock Stop Capable (r) */
    __I  Ifx_Strict_32Bit FLT:1;           /**< \brief [7:7] Fault Condition Detected (r) */
    __I  Ifx_Strict_32Bit RXLPII:1;        /**< \brief [8:8]  (r) */
    __I  Ifx_Strict_32Bit TXLPII:1;        /**< \brief [9:9]  (r) */
    __I  Ifx_Strict_32Bit RXLPIR:1;        /**< \brief [10:10]  (r) */
    __I  Ifx_Strict_32Bit TXLPIR:1;        /**< \brief [11:11]  (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_SR_XS_STS1_Bits;

/** \brief VR XS or PCS0 MMD Digital Control1 Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_CTRL1_Bits
{
    __I  Ifx_Strict_32Bit :1;              /**< \brief [0:0] \internal Reserved */
    __IO Ifx_Strict_32Bit BYP_PWRUP:1;     /**< \brief [1:1] Power_Good state (rw) */
    __IO Ifx_Strict_32Bit EN_2_5G_MODE:1;    /**< \brief [2:2] Enable 2.5G GMII Mode (rw) */
    __I  Ifx_Strict_32Bit CR_CJN:1;        /**< \brief [3:3] Reserved (r) */
    __IO Ifx_Strict_32Bit DTXLANED_0:1;    /**< \brief [4:4] Tx Disable on Lane 0 (rw) */
    __I  Ifx_Strict_32Bit DTXLANED_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit INIT:1;          /**< \brief [8:8] Datapath Initialization Control (rwh) */
    __IO Ifx_Strict_32Bit USXG_EN:1;       /**< \brief [9:9] 10G-USXGMII mode (rw) */
    __IO Ifx_Strict_32Bit USRA_RST:1;      /**< \brief [10:10] USXGMII Rate Adaptor Logic  Reset (rwh) */
    __IO Ifx_Strict_32Bit PWRSV:1;         /**< \brief [11:11] Power-save mode (rw) */
    __I  Ifx_Strict_32Bit CL37_BP:1;       /**< \brief [12:12] Enable Clause 37 AN in BackPlane (BP) Configurations (r) */
    __IO Ifx_Strict_32Bit EN_VSMMD1:1;     /**< \brief [13:13] Enable Vendor-Specific MMD1 (rw) */
    __IO Ifx_Strict_32Bit R2TLBE:1;        /**< \brief [14:14] Rx to Tx Loopback Enable (rw) */
    __IO Ifx_Strict_32Bit VR_RST:1;        /**< \brief [15:15] Vendor-Specific Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_CTRL1_Bits;

/** \brief VR XS or PCS0 MMD Digital Status Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_STS_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_0:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_Strict_32Bit LB_ACTIVE:1;     /**< \brief [1:1] Reserved (r) */
    __I  Ifx_Strict_32Bit PSEQ_STATE:3;    /**< \brief [4:2] Power Up Sequence State (r) */
    __I  Ifx_Strict_32Bit RXFIFO_UNDF:1;    /**< \brief [5:5] Rx FIFO Underflow (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit RXFIFO_OVF:1;    /**< \brief [6:6] Rx FIFO Overflow (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit INV_XGM_SOP:1;    /**< \brief [7:7] Invalid XGMII Start Character (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit INV_XGM_T:1;     /**< \brief [8:8] Invalid XGMII T Character (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit INV_XGM_CHAR:1;    /**< \brief [9:9] Invalid XGMII Character  (RO,LH Type) (r) */
    __I  Ifx_Strict_32Bit LRX_STATE:3;     /**< \brief [12:10] LPI Receive State (r) */
    __I  Ifx_Strict_32Bit LTX_STATE:3;     /**< \brief [15:13] LPI Transmit State (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_STS_Bits;

/** \brief VR PCS0 10GBASE-R Control Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_VR_XS_KR_CTRL_Bits
{
    __IO Ifx_Strict_32Bit VR_TP_EN:1;      /**< \brief [0:0] PCS-R Vendor-Specific Test Pattern Enable (rw) */
    __IO Ifx_Strict_32Bit PR_DATA:3;       /**< \brief [3:1] Pseudo-Random Test Pattern Data (rw) */
    __IO Ifx_Strict_32Bit NVAL_SEL:3;      /**< \brief [6:4] Square Wave Control (rw) */
    __IO Ifx_Strict_32Bit PRBS9RXEN:1;     /**< \brief [7:7] Enable PRBS9 Testing in Receive Path (rw) */
    __IO Ifx_Strict_32Bit DIS_SCR:1;       /**< \brief [8:8] Disable Scrambler (rw) */
    __IO Ifx_Strict_32Bit DIS_DESCR:1;     /**< \brief [9:9] Disable Descrambler (rw) */
    __IO Ifx_Strict_32Bit USXG_MODE:3;     /**< \brief [12:10] USXGMII Mode Select (rw) */
    __IO Ifx_Strict_32Bit USXG_2PT5G_GMII:1;    /**< \brief [13:13] MAC/PCS interface select in USXGMII 2.5G Mode (rw) */
    __I  Ifx_Strict_32Bit CSTM_AMLK:1;     /**< \brief [14:14] Customer Alignment Marker Lock Mode Enable (r) */
    __I  Ifx_Strict_32Bit RESERVED_15:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_VR_XS_KR_CTRL_Bits;

/** \brief VR XS or PCS0 MMD Comma-Detect Status Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_CDT_STS_Bits
{
    __I  Ifx_Strict_32Bit CMSH0:4;         /**< \brief [3:0] Comma-detect Bit shift-lane 0 (r) */
    __I  Ifx_Strict_32Bit CMSH1:4;         /**< \brief [7:4] Comma-detect Bit shift-lane 1 (r) */
    __I  Ifx_Strict_32Bit CMSH2:4;         /**< \brief [11:8] Comma-detect Bit shift-lane 2 (r) */
    __I  Ifx_Strict_32Bit CMSH3:4;         /**< \brief [15:12] Comma-detect Bit shift-lane 3 (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_CDT_STS_Bits;

/** \brief VR XS or PCS0 MMD Miscellaneous Status Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_MISC_STS_Bits
{
    __I  Ifx_Strict_32Bit BKSH:7;          /**< \brief [6:0] Block-lock bit-shift (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_7:9;    /**< \brief [15:7] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_MISC_STS_Bits;

/** \brief VR XS or PCS MMD Uncorrectable Safety Error Interrupt Register */
typedef struct _Ifx_HSPHY_XPCS_PCS_VR_XS_SFTY_UE_INTR0_Bits
{
    __IO Ifx_Strict_32Bit TXFP_INT:1;      /**< \brief [0:0] Tx FSM Parity Error Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit RXFP_INT:1;      /**< \brief [1:1] Rx FSM Parity Error Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit CSRFP_INT:1;     /**< \brief [2:2] CSR FSM Parity Error Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit EEEFP_INT:1;     /**< \brief [3:3] EEE FSM Parity Error Interrupt (SS,WC) (rw) */
    __I  Ifx_Strict_32Bit CKOFP_INT:1;     /**< \brief [4:4] CKO Alive FSM Parity Error Interrupt (SS,WC) (r) */
    __IO Ifx_Strict_32Bit TXFT_INT:1;      /**< \brief [5:5] Tx FSM Time-out Error Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit RXFT_INT:1;      /**< \brief [6:6] Rx FSM Time-out Error Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit CSRFT_INT:1;     /**< \brief [7:7] CSR FSM Time-out Error Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit EEEFT_INT:1;     /**< \brief [8:8] EEE FSM Time-out Error Interrupt (SS,WC) (rw) */
    __I  Ifx_Strict_32Bit CKOFT_INT:1;     /**< \brief [9:9] CKO Alive FSM Time-out Error Interrupt (SS,WC) (r) */
    __IO Ifx_Strict_32Bit APB3_IFT_INT:1;    /**< \brief [10:10] APB3/MCI Interface Time-out Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit PHY_IFT_INT:1;    /**< \brief [11:11] PHY Interface Time-out Interrupt (SS,WC) (rw) */
    __IO Ifx_Strict_32Bit DPP_INT:1;       /**< \brief [12:12] Datapath Parity Error Interrupt (rw) */
    __I  Ifx_Strict_32Bit EC_UE_INT:1;     /**< \brief [13:13] "Uncorrectable ECC Error Interrupt from 'FEC Error-Correction Memory'" (r) */
    __I  Ifx_Strict_32Bit EF_UE_INT:1;     /**< \brief [14:14] "Uncorrectable ECC Error Interrupt from 'FEC Error-Forwarding Memory'" (r) */
    __I  Ifx_Strict_32Bit PSEQ_ERR:1;      /**< \brief [15:15] Error in power-up sequence FSM (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PCS_VR_XS_SFTY_UE_INTR0_Bits;

/** \brief SR PMA0 MMD Control1 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_SR_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit LB:1;            /**< \brief [0:0] Loopback Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_1:1;    /**< \brief [1:1] Reserved (r) */
    __I  Ifx_Strict_32Bit SS_5_2:4;        /**< \brief [5:2] Speed Selection Bits [5:2] (r) */
    __I  Ifx_Strict_32Bit SS6:1;           /**< \brief [6:6] Speed Selection Bit 6 (r) */
    __I  Ifx_Strict_32Bit RESERVED_10_7:4;    /**< \brief [10:7] Reserved (r) */
    __IO Ifx_Strict_32Bit LPM:1;           /**< \brief [11:11] Low-Power Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_12:1;    /**< \brief [12:12] Reserved (r) */
    __I  Ifx_Strict_32Bit SS13:1;          /**< \brief [13:13] Speed Selection (r) */
    __I  Ifx_Strict_32Bit RESERVED_14:1;    /**< \brief [14:14] Reserved (r) */
    __IO Ifx_Strict_32Bit RST:1;           /**< \brief [15:15] Soft Reset (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_SR_CTRL1_Bits;

/** \brief SR PMA0 MMD Status1 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_SR_STATUS1_Bits
{
    __I  Ifx_Strict_32Bit RESERVED_0:1;    /**< \brief [0:0] Reserved (r) */
    __I  Ifx_Strict_32Bit LPMS:1;          /**< \brief [1:1] Low-Power Mode Support (r) */
    __I  Ifx_Strict_32Bit RLU:1;           /**< \brief [2:2] Rx Link Up (RO,LL Type) (r) */
    __I  Ifx_Strict_32Bit RESERVED_6_3:4;    /**< \brief [6:3] Reserved (r) */
    __I  Ifx_Strict_32Bit FLT:1;           /**< \brief [7:7] Fault Condition Detected (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_SR_STATUS1_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY MPLL Common Control Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_MPLL_CMN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit MPLL_EN_0:1;     /**< \brief [0:0] Tx MPLL Enable-lane 0 Set this bit to power-up the MPLL (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit MPLLB_SEL_0:1;    /**< \brief [4:4] Tx MPLLB Select-lane 0 When this bit is set, Multi-protocol 12G/16G/25G PHYs select MPLLB to generate Tx analog clocks on lane 0 (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_MPLL_CMN_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Reference Control Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_REF_CLK_CTRL_Bits
{
    __IO Ifx_Strict_32Bit REF_CLK_EN:1;    /**< \brief [0:0] Reference Clock Enable (rw) */
    __IO Ifx_Strict_32Bit REF_USE_PAD:1;    /**< \brief [1:1] Use Pad Clk as Reference Clock (rw) */
    __IO Ifx_Strict_32Bit REF_CLK_DIV2:1;    /**< \brief [2:2] Reference Clock divide by 2 (rw) */
    __IO Ifx_Strict_32Bit REF_RANGE:3;     /**< \brief [5:3] Input Reference Clock Range (rw) */
    __IO Ifx_Strict_32Bit REF_MPLLA_DIV2:1;    /**< \brief [6:6] MPLLA Reference Clock Divider Control (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [9:7] \internal Reserved */
    __I  Ifx_Strict_32Bit REF_MPLLA_DIV:3;    /**< \brief [12:10] For Multi-protocol 25G PHY or Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_REF_CLK_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx CDR Control */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_CDR_CTRL_Bits
{
    __IO Ifx_Strict_32Bit CDR_TRACK_EN_0:1;    /**< \brief [0:0]  (rw) */
    __I  Ifx_Strict_32Bit CDR_TRACK_EN_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit CDR_SSC_EN_0:1;    /**< \brief [4:4] Rx CDR SSC Mode Enable on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit CDR_SSC_EN_3_1:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit VCO_LOW_FREQ_0:1;    /**< \brief [8:8]  (rw) */
    __I  Ifx_Strict_32Bit VCO_LOW_FREQ_3_1:3;    /**< \brief [11:9] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_CDR_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 1 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_GENCTRL1_Bits
{
    __IO Ifx_Strict_32Bit RX_INV_0:1;      /**< \brief [0:0] Rx Data Invert on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit RX_RST_0:1;      /**< \brief [4:4] Rx reset on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit RX_TERM_ACDC_0:1;    /**< \brief [8:8]  (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [11:9] \internal Reserved */
    __IO Ifx_Strict_32Bit RX_DIV16P5_CLK_EN_0:1;    /**< \brief [12:12] Receiver Divide by 16.5 output clock on lane 0 (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_GENCTRL1_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx Rate Control */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_RATE_CTRL_Bits
{
    __IO Ifx_Strict_32Bit RX0_RATE:2;      /**< \brief [1:0] Rx date rate on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [2:2] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_3:1;    /**< \brief [3:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [6:4] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [10:8] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_11:1;    /**< \brief [11:11] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [14:12] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_RATE_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx Status */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_STS_Bits
{
    __I  Ifx_Strict_32Bit RX_ACK_0:1;      /**< \brief [0:0] Rx Acknowledge on lane 0 of PHY (rh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit LF_SD_0:1;       /**< \brief [4:4] For Multi-protocol 25G PHY or Multi-protocol 32G PHY or Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit LF_SD_3_1:3;     /**< \brief [7:5] For Multi-protocol 25G PHY or Multi-protocol 32G PHY or Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit HF_SD_0:1;       /**< \brief [8:8] Multi-protocol 25G PHY or Multi-protocol 32G PHY or For Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit HF_SD_3_1:3;     /**< \brief [11:9] For Multi-protocol 25G PHY or Multi protocol 32G PHY or For Multi-protocol 10G Gen2 PHY configurations: (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_STS_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY SRAM Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_SRAM_Bits
{
    __I  Ifx_Strict_32Bit INIT_DN:1;       /**< \brief [0:0] SRAM Initialization Done (r) */
    __IO Ifx_Strict_32Bit EXT_LD_DN:1;     /**< \brief [1:1] SRAM External Loading Done (rw) */
    __IO Ifx_Strict_32Bit BTLD_BYP:1;      /**< \brief [2:2] SRAM Bootload Bypass (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_4:12;    /**< \brief [15:4] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_SRAM_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Boost Control Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_BOOST_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TX0_IBOOST:4;    /**< \brief [3:0] Tx current boost level on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit :28;             /**< \brief [31:4] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_BOOST_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx General 1 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_GENCTRL1_Bits
{
    __IO Ifx_Strict_32Bit DET_RX_REQ_0:1;    /**< \brief [0:0] Transmitter Rx-Detection request on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit VBOOST_EN_0:1;    /**< \brief [4:4] Tx voltage Boost Enable on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit VBOOST_LVL:3;    /**< \brief [10:8] Tx Voltage Boost Maximum Level (rw) */
    __I  Ifx_Strict_32Bit RESERVED_11:1;    /**< \brief [11:11] Reserved (r) */
    __IO Ifx_Strict_32Bit TX_CLK_RDY_0:1;    /**< \brief [12:12] Transmitter Input clock ready on lane 0 (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_GENCTRL1_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Rate Control Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_RATE_CTRL_Bits
{
    __IO Ifx_Strict_32Bit TX0_RATE:3;      /**< \brief [2:0] Tx date rate on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RESERVED_3:1;    /**< \brief [3:3] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [6:4] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [10:8] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_11:1;    /**< \brief [11:11] Reserved (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [14:12] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15:1;    /**< \brief [15:15] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_RATE_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Status Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_STS_Bits
{
    __I  Ifx_Strict_32Bit TX_ACK_0:1;      /**< \brief [0:0] Tx Acknowledge on lane 0 of PHY (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __I  Ifx_Strict_32Bit DETRX_RSLT_0:1;    /**< \brief [4:4] "Receiver Detection Result on lane 0 of PHY This field captures the value of the input port 'xpcs_tx_detrx_result_i[0]'" (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_STS_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY VCO Calibration Load 0 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_VCO_CAL_LD0_Bits
{
    __IO Ifx_Strict_32Bit VCO_LD_VAL_0:13;    /**< \brief [12:0] Rx VCO calibration load value on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_13:3;    /**< \brief [15:13] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_VCO_CAL_LD0_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY MPLLA Control 0 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_MULTIPLIER:8;    /**< \brief [7:0] MPLLA frequency Multiplier Control (rw) */
    __I  Ifx_Strict_32Bit MPLLA_SSC_CLK_SEL:3;    /**< \brief [10:8] This field controls MPLLA spread-spectrum clock select of Multi-protocol 10G Gen1 PHY (r) */
    __I  Ifx_Strict_32Bit RESERVED_11:1;    /**< \brief [11:11] Reserved (r) */
    __I  Ifx_Strict_32Bit FRAC_EN:1;       /**< \brief [12:12]  (r) */
    __I  Ifx_Strict_32Bit FR_CFG_UP_EN:1;    /**< \brief [13:13]  (r) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [14:14] \internal Reserved */
    __IO Ifx_Strict_32Bit MPLLA_CAL_DISABLE:1;    /**< \brief [15:15] MPLLA Calibration Disable (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL0_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY MPLLA Control 2 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_DIV_MULT:7;    /**< \brief [6:0] MPLLA Output Frequency Multiplier Control (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV_CLK_EN:1;    /**< \brief [7:7] Enable mplla_div_clk from PHY (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV8_CLK_EN:1;    /**< \brief [8:8] MPLLA Divide by 8 Enable (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV10_CLK_EN:1;    /**< \brief [9:9] MPLLA Divide by 10 Enable (rw) */
    __IO Ifx_Strict_32Bit MPLLA_DIV16P5_CLK_EN:1;    /**< \brief [10:10] MPLLA Divide by 16.5 Enable (rw) */
    __IO Ifx_Strict_32Bit MPLLA_TX_CLK_DIV:3;    /**< \brief [13:11] MPLLA Tx Clock Divider (rw) */
    __I  Ifx_Strict_32Bit MPLLA_RECAL_BANK_SEL:1;    /**< \brief [14:14]  (r) */
    __IO Ifx_Strict_32Bit MPLLA_WRD_DIV2_EN:1;    /**< \brief [15:15] MPLLA Word Clock Divide by 2 (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL2_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY Rx General Control 2 */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_RX_GENCTRL2_Bits
{
    __IO Ifx_Strict_32Bit RX_REQ_0:1;      /**< \brief [0:0] Receiver operation request on lane 0 of PHY (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit RX_LPD_0:1;      /**< \brief [4:4] Receiver Lane Power Down on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit RX0_WIDTH:2;     /**< \brief [9:8] Rx Datapath Width on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_RX_GENCTRL2_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY Tx General 2 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_TX_GENCTRL2_Bits
{
    __IO Ifx_Strict_32Bit TX_REQ_0:1;      /**< \brief [0:0] Transmitter operation request on lane 0 of E12G/E16G PHY (RW,SC Type) (rwh) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [3:1] \internal Reserved */
    __IO Ifx_Strict_32Bit TX_LPD_0:1;      /**< \brief [4:4] Transmitter Lane Power Down on lane 0 of PHY (rw) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [7:5] \internal Reserved */
    __IO Ifx_Strict_32Bit TX0_WIDTH:2;     /**< \brief [9:8] Tx Datapath Width on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit :22;             /**< \brief [31:10] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_TX_GENCTRL2_Bits;

/** \brief VR XS or PMA Synopsys Multi-protocol 12G PHY AFE-DFE Enable Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_AFE_DFE_EN_CTRL_Bits
{
    __IO Ifx_Strict_32Bit AFE_EN_0:1;      /**< \brief [0:0] Rx Adaptation AFE Enable on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit AFE_EN_3_1:3;    /**< \brief [3:1]  (r) */
    __IO Ifx_Strict_32Bit DFE_EN_0:1;      /**< \brief [4:4] Rx DFE Enable on lane 0 of the PHY (rw) */
    __I  Ifx_Strict_32Bit DFE_EN_3_1:3;    /**< \brief [7:5]  (r) */
    __I  Ifx_Strict_32Bit RESERVED_15_8:8;    /**< \brief [15:8] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_AFE_DFE_EN_CTRL_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G PHY VCO Calibration Reference 0 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_VCO_CAL_REF0_Bits
{
    __IO Ifx_Strict_32Bit VCO_REF_LD_0:6;    /**< \brief [5:0] Rx VCO calibration reference load value -lane 0 (rw) */
    __I  Ifx_Strict_32Bit RESERVED_6:1;    /**< \brief [6:6] Reserved (r) */
    __I  Ifx_Strict_32Bit RESERVED_7:1;    /**< \brief [7:7] Reserved (r) */
    __I  Ifx_Strict_32Bit :6;              /**< \brief [13:8] \internal Reserved */
    __I  Ifx_Strict_32Bit RESERVED_15_14:2;    /**< \brief [15:14] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_VCO_CAL_REF0_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY Miscellaneous Control 2 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_MISC_CTRL2_Bits
{
    __IO Ifx_Strict_32Bit SUP_MISC:8;      /**< \brief [7:0] Support Miscellaneous Controls (rw) */
    __IO Ifx_Strict_32Bit REF_CLK_DET_EN:1;    /**< \brief [8:8]  (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_9:7;    /**< \brief [15:9] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_MISC_CTRL2_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY Rx General Control 4 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_GENCTRL4_Bits
{
    __IO Ifx_Strict_32Bit RX_TERM_OFFSET:5;    /**< \brief [4:0] Offset for RX Termination (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __I  Ifx_Strict_32Bit RX_DFE_BYP_0:1;    /**< \brief [8:8] RX DFE Bypass Enable on Lane 0 (r) */
    __I  Ifx_Strict_32Bit :3;              /**< \brief [11:9] \internal Reserved */
    __IO Ifx_Strict_32Bit RX_125MHZ_CLK_EN_0:1;    /**< \brief [12:12] RX 125MHz clock generation Enable on Lane 0 (rw) */
    __I  Ifx_Strict_32Bit :19;             /**< \brief [31:13] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_GENCTRL4_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY RX Miscellaneous Control 0 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_MISC_CTRL0_Bits
{
    __IO Ifx_Strict_32Bit RX0_MISC:8;      /**< \brief [7:0] RX Miscellaneous control for lane0 (rw) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_MISC_CTRL0_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G PHY MPLLA Control 1 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_MPLLA_CTRL1_Bits
{
    __IO Ifx_Strict_32Bit MPLLA_SSC_EN:1;    /**< \brief [0:0] MPLLA SSC Enable (rw) */
    __I  Ifx_Strict_32Bit RESERVED_3_1:3;    /**< \brief [3:1] Reserved (r) */
    __IO Ifx_Strict_32Bit MPLLA_SSC_CLK_SEL:1;    /**< \brief [4:4] MPLLA SSC Clock Select (rw) */
    __IO Ifx_Strict_32Bit MPLLA_FRACN_CTRL:11;    /**< \brief [15:5] MPLLA Fractional Control (rw) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_MPLLA_CTRL1_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 8G PHY MPLLA Control 6 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL6_Bits
{
    __IO Ifx_Strict_32Bit CP_INT:5;        /**< \brief [4:0] MPLLA Charge Pump Integral Control (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit CP_PROP:4;       /**< \brief [11:8] MPLLA Charge Pump Proportional Control (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL6_Bits;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 8G PHY MPLLA Control 7 Register */
typedef struct _Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL7_Bits
{
    __IO Ifx_Strict_32Bit CP_INT_GS:5;     /**< \brief [4:0] MPLLA Charge Pump Integral Control in Gear-Shift Mode (rw) */
    __I  Ifx_Strict_32Bit RESERVED_7_5:3;    /**< \brief [7:5] Reserved (r) */
    __IO Ifx_Strict_32Bit CP_PROP_GS:4;    /**< \brief [11:8] MPLLA Charge Pump Proportional Control in Gear-Shift Mode (rw) */
    __I  Ifx_Strict_32Bit RESERVED_15_12:4;    /**< \brief [15:12] Reserved (r) */
    __I  Ifx_Strict_32Bit :16;             /**< \brief [31:16] \internal Reserved */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL7_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_hsphy_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ACCEN_PRS_Bits B;            /**< \brief Bitfield access */
} Ifx_HSPHY_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ACCEN_RDA_Bits B;            /**< \brief Bitfield access */
} Ifx_HSPHY_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ACCEN_RDB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_HSPHY_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ACCEN_VM_Bits B;             /**< \brief Bitfield access */
} Ifx_HSPHY_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ACCEN_WRA_Bits B;            /**< \brief Bitfield access */
} Ifx_HSPHY_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ACCEN_WRB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_HSPHY_ACCEN_WRB_FPI;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_CLC_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSPHY_CLC;

/** \brief The common control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_CMNCFG_Bits B;               /**< \brief Bitfield access */
} Ifx_HSPHY_CMNCFG;

/** \brief DLL configuration register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_DLL_CFG_Bits B;              /**< \brief Bitfield access */
} Ifx_HSPHY_DLL_CFG;

/** \brief Ethernet0 selection control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ETH_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSPHY_ETH;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_ID_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSPHY_ID;

/** \brief Control 0 for the PHY0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_MP8GPHY_CTRL0_Bits B;        /**< \brief Bitfield access */
} Ifx_HSPHY_MP8GPHY_CTRL0;

/** \brief Control 1 for the PHY0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_MP8GPHY_CTRL1_Bits B;        /**< \brief Bitfield access */
} Ifx_HSPHY_MP8GPHY_CTRL1;

/** \brief OCDS control and status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_HSPHY_OCS;

/** \brief PCIe calibration control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PCIE_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSPHY_PCIE;

/** \brief PHY0 register control and address register.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHYREG_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_HSPHY_PHYREG_CTRL;

/** \brief PHY0 data register.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHYREG_DATA_Bits B;          /**< \brief Bitfield access */
} Ifx_HSPHY_PHYREG_DATA;

/** \brief Override values for incoming TX drive controls from ASIC, register #2   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_2;

/** \brief Override values for incoming TX drive controls from ASIC, register #3   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_3_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_3;

/** \brief Override values for incoming TX drive controls from ASIC, register #2   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_2;

/** \brief Override values for incoming TX drive controls from ASIC, register #3   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_3_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_3;

/** \brief Common Calibration Status   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS;

/** \brief Fast flags for calibration only   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_RAWLANE0_DIG_AON_FAST_FLAGS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_RAWLANE0_DIG_AON_FAST_FLAGS;

/** \brief Current values for outgoing RX status controls from Raw PCS (Monitor on the pre-override output signals)   */
typedef union
{
    __I  Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_RX_PCS_OUT_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_RX_PCS_OUT;

/** \brief Current values for outgoing TX status controls from Raw PCS (Monitor on the pre-override output signals)   */
typedef union
{
    __I  Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_TX_PCS_OUT_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_TX_PCS_OUT;

/** \brief mplla testmodes register   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_SUP_ANA_MPLLA_TEST1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_SUP_ANA_MPLLA_TEST1;

/** \brief Resistor tuning debug controls   */
typedef union
{
    __IO Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_SUP_DIG_RTUNE_DEBUG_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_SUP_DIG_RTUNE_DEBUG;

/** \brief Current values (pre-override) for incoming level controls from ASIC   */
typedef union
{
    __I  Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_SUP_DIG_RX_TXUP_TERM_OFFSET_ASIC_IN_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_SUP_DIG_RX_TXUP_TERM_OFFSET_ASIC_IN;

/** \brief Current values (pre-override) for incoming level controls from ASIC   */
typedef union
{
    __I  Ifx_UReg_16Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_16Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PHY_SUP_DIG_TXDN_TERM_OFFSET_ASIC_IN_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_PHY_SUP_DIG_TXDN_TERM_OFFSET_ASIC_IN;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_PROT_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSPHY_PROT;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_RST_CTRLA_Bits B;            /**< \brief Bitfield access */
} Ifx_HSPHY_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_RST_CTRLB_Bits B;            /**< \brief Bitfield access */
} Ifx_HSPHY_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_RST_STAT_Bits B;             /**< \brief Bitfield access */
} Ifx_HSPHY_RST_STAT;

/** \brief SR MII MMD AN Advertisement Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_AN_ADV_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_AN_ADV;

/** \brief SR MII MMD AN Expansion Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_AN_EXPN_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_AN_EXPN;

/** \brief SR MII MMD Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_CTRL;

/** \brief SR MII MMD Device Identifier Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_DEV_Bits B;      /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_DEV;

/** \brief SR MII MMD Device Identifier Register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_DEV_ID2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_DEV_ID2;

/** \brief SR MII MMD Extended Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_EXT_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_EXT_STS;

/** \brief SR MII MMD AN Link Partner Base Ability Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_LP_BABL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_LP_BABL;

/** \brief SR MII MMD Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_STS_Bits B;      /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_STS;

/** \brief SR MII MMD Time Sync Capability Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_ABL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_ABL;

/** \brief SR MII MMD Time Sync Rx Max Delay Lower Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_LWR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_LWR;

/** \brief SR MII MMD Time Sync Rx Max Delay Upper Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_UPR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_UPR;

/** \brief SR MII MMD Time Sync Rx Min Delay Lower Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_LWR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_LWR;

/** \brief SR MII MMD Time Sync Rx Min Delay Upper Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_UPR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_UPR;

/** \brief SR MII MMD Time Sync Tx Max Delay Lower Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_LWR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_LWR;

/** \brief SR MII MMD Time Sync Tx Max Delay Upper Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_UPR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_UPR;

/** \brief SR MII MMD Time Sync Tx Min Delay Lower Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_LWR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_LWR;

/** \brief SR MII MMD Time Sync Tx Min Delay Upper Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_UPR_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_UPR;

/** \brief VR MII MMD AN Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_AN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_AN_CTRL;

/** \brief VR MII MMD AN Interrupt and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_AN_INTR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_AN_INTR_STS;

/** \brief VR MII MMD Debug Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_DBG_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_DBG_CTRL;

/** \brief VR MII MMD Digital Control1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL1;

/** \brief VR MII MMD Digital Control2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL2;

/** \brief VR MII MMD Digital Error Count Select Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_DIG_ERRCNT_SEL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_DIG_ERRCNT_SEL;

/** \brief VR MII MMD Digital Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_DIG_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_DIG_STS;

/** \brief VR MII MMD Invalid Code Group Error Count1 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_ICG_ERRCNT1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_ICG_ERRCNT1;

/** \brief VR MII MMD Link Timer Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_LINK_TIMER_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_LINK_TIMER_CTRL;

/** \brief VR MII MMD Miscellaneous Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MISC_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MISC_STS;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY DFE Tap Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_DFE_TAP_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_DFE_TAP_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL1;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_STS;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY MPLL Common Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MPLL_CMN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MPLL_CMN_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Reference Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_REF_CLK_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_REF_CLK_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Attenuation Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_ATTN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_ATTN_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY/25G Rx CDR Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_CDR_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_CDR_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Equalization Control 4 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_EQ_CTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_EQ_CTRL4;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL1;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Power State Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_POWER_STATE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_POWER_STATE_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Rate Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_RATE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_RATE_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_STS;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY SRAM Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_SRAM_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_SRAM;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Boost Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_BOOST_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_BOOST_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Equalization Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Equalization Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL1;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx General Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx General Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL1;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Power State Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_POWER_STATE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_POWER_STATE_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Rate Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_RATE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_RATE_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_STS;

/** \brief VR MII Synopsys Multi-protocol 12G/16G/25G PHY VCO Calibration Load 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_VCO_CAL_LD0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_VCO_CAL_LD0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY MPLLA Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY MPLLA Control 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL2;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY Rx General Control 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL2;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY Rx General Control 3 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL3_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL3;

/** \brief VR MII Synopsys Multi-protocol 12G/16G PHY Tx General Register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_TX_GENCTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_TX_GENCTRL2;

/** \brief VR MII Synopsys Multi-protocol 12G PHY AFE-DFE Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_AFE_DFE_EN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_AFE_DFE_EN_CTRL;

/** \brief VR MII Synopsys Multi-protocol 12G PHY Rx Equalization Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_RX_EQ_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_RX_EQ_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 12G PHY VCO Calibration Reference Register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_12G_VCO_CAL_REF0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_12G_VCO_CAL_REF0;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Miscellaneous Control 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_MISC_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_MISC_CTRL2;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Rx General Control 4 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_GENCTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_GENCTRL4;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY RX IQ Control 0 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_IQ_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_IQ_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY RX Miscellaneous Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_MISC_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_MISC_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Rx PPM Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY Rx PPM Status 0 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_STS0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_STS0;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY TX General Control 3 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL3_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL3;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY TX General Control 4 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL4;

/** \brief VR MII Synopsys Multi-protocol 16G/25G PHY TX Miscellaneous Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_MISC_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_MISC_CTRL0;

/** \brief VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL1;

/** \brief VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 4 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL4;

/** \brief VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 5 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL5_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL5;

/** \brief VR MII Synopsys Multi-protocol 16G PHY Rx CDR Control1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_16G_RX_CDR_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_16G_RX_CDR_CTRL1;

/** \brief VR MII Synopsys Multi-protocol 8G PHY MPLLA Control 6 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL6_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL6;

/** \brief VR MII Synopsys Multi-protocol 8G PHY MPLLA Control 7 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL7_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL7;

/** \brief VR MII PHY Rx Lane Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_RX_LSTS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_RX_LSTS;

/** \brief VR MII MMD Test Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_MII_VR_TC_Bits B;       /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_MII_VR_TC;

/** \brief SR Control MMD AN Device Identifier Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID1;

/** \brief SR Control MMD AN Device Identifier Register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID2;

/** \brief SR Control MMD Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_CTRL;

/** \brief SR Control MMD Device Identifier Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID1;

/** \brief SR Control MMD Device Identifier Register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID2;

/** \brief SR Control MMD PCS Device Identifier Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID1;

/** \brief SR Control MMD PCS Device Identifier Register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID2;

/** \brief SR Control MMD Package Identifier Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_PKGID1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_PKGID1;

/** \brief SR Control MMD Package Identifier Register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_PKGID2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_PKGID2;

/** \brief SR Control MMD PMA Device Identifier Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID1;

/** \brief SR Control MMD PMA Device Identifier Register 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID2;

/** \brief SR Control MMD Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_TPCS_VSMMD_SR_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_TPCS_VSMMD_SR_STS;

/** \brief 0 SR MII MMD Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_MII_CTRL_Bits B;        /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_MII_CTRL;

/** \brief 0 VR MII MMD Digital Control1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_MII_DIG_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_MII_DIG_CTRL1;

/** \brief 0 VR MII MMD Digital Control 3 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_MII_VR_MII_DIG_CTRL3_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_MII_VR_MII_DIG_CTRL3;

/** \brief SR XS or PCS0 MMD Control1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL1;

/** \brief SR PCS0 Control2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL2;

/** \brief SR XS or PCS0 MMD Status1 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_SR_XS_STS1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_SR_XS_STS1;

/** \brief VR XS or PCS0 MMD Digital Control1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_CTRL1;

/** \brief VR XS or PCS0 MMD Digital Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_STS;

/** \brief VR PCS0 10GBASE-R Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_VR_XS_KR_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_VR_XS_KR_CTRL;

/** \brief VR XS or PCS0 MMD Comma-Detect Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_CDT_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_CDT_STS;

/** \brief VR XS or PCS0 MMD Miscellaneous Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_MISC_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_MISC_STS;

/** \brief VR XS or PCS MMD Uncorrectable Safety Error Interrupt Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PCS_VR_XS_SFTY_UE_INTR0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PCS_VR_XS_SFTY_UE_INTR0;

/** \brief SR PMA0 MMD Control1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_SR_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_SR_CTRL1;

/** \brief SR PMA0 MMD Status1 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_SR_STATUS1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_SR_STATUS1;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY MPLL Common Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_MPLL_CMN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_MPLL_CMN_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Reference Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_REF_CLK_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_REF_CLK_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx CDR Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_CDR_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_CDR_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_GENCTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_GENCTRL1;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx Rate Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_RATE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_RATE_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_STS;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY SRAM Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_SRAM_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_SRAM;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Boost Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_BOOST_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_BOOST_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx General 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_GENCTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_GENCTRL1;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Rate Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_RATE_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_RATE_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_STS_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_STS;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY VCO Calibration Load 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_VCO_CAL_LD0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_VCO_CAL_LD0;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY MPLLA Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL0;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY MPLLA Control 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL2;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY Rx General Control 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_RX_GENCTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_RX_GENCTRL2;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY Tx General 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_TX_GENCTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_TX_GENCTRL2;

/** \brief VR XS or PMA Synopsys Multi-protocol 12G PHY AFE-DFE Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_AFE_DFE_EN_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_AFE_DFE_EN_CTRL;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 12G PHY VCO Calibration Reference 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_VCO_CAL_REF0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_VCO_CAL_REF0;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY Miscellaneous Control 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_MISC_CTRL2_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_MISC_CTRL2;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY Rx General Control 4 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_GENCTRL4_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_GENCTRL4;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY RX Miscellaneous Control 0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_MISC_CTRL0_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_MISC_CTRL0;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 16G PHY MPLLA Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_MPLLA_CTRL1_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_MPLLA_CTRL1;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 8G PHY MPLLA Control 6 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL6_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL6;

/** \brief VR XS or PMA0 Synopsys Multi-protocol 8G PHY MPLLA Control 7 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL7_Bits B;    /**< \brief Bitfield access */
} Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL7;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_HSPHY_RST
{
       __IO Ifx_HSPHY_RST_CTRLA                 CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_HSPHY_RST_CTRLB                 CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_HSPHY_RST_STAT                  STAT;                   /**< \brief 8, Reset status register*/
} Ifx_HSPHY_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_ACCENGLB_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENGLB object */
typedef volatile struct _Ifx_HSPHY_ACCENGLB
{
       __IO Ifx_HSPHY_ACCEN_WRA                 WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_HSPHY_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_HSPHY_ACCEN_RDA                 RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_HSPHY_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_HSPHY_ACCEN_VM                  VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_HSPHY_ACCEN_PRS                 PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_HSPHY_ACCENGLB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_ACCENCH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCH object */
typedef volatile struct _Ifx_HSPHY_ACCENCH
{
       __IO Ifx_HSPHY_ACCEN_WRA                 WRA;                    /**< \brief 0, CH0 Write access enable register A*/
       __IO Ifx_HSPHY_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, CH0 Write access enable register B*/
       __IO Ifx_HSPHY_ACCEN_RDA                 RDA;                    /**< \brief 8, CH0 Read access enable register A*/
       __IO Ifx_HSPHY_ACCEN_RDB_FPI             RDB;                    /**< \brief C, CH0 Read access enable register B*/
       __IO Ifx_HSPHY_ACCEN_VM                  VM;                     /**< \brief 10, CH0 VM access enable register*/
       __IO Ifx_HSPHY_ACCEN_PRS                 PRS;                    /**< \brief 14, CH0 PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_HSPHY_ACCENCH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_MP8GPHY_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PHY object */
typedef volatile struct _Ifx_HSPHY_MP8GPHY
{
       __IO Ifx_HSPHY_MP8GPHY_CTRL0             CTRL0;                  /**< \brief 0, Control 0 for the PHY0*/
       __IO Ifx_HSPHY_MP8GPHY_CTRL1             CTRL1;                  /**< \brief 4, Control 1 for the PHY0*/
} Ifx_HSPHY_MP8GPHY;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHYREG_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PHYREG object */
typedef volatile struct _Ifx_HSPHY_PHYREG
{
       __IO Ifx_HSPHY_PHYREG_CTRL               CTRL;                   /**< \brief 0, PHY0 register control and address register.*/
       __IO Ifx_HSPHY_PHYREG_DATA               DATA;                   /**< \brief 4, PHY0 data register.*/
} Ifx_HSPHY_PHYREG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_DLL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DLL object */
typedef volatile struct _Ifx_HSPHY_DLL
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __IO Ifx_HSPHY_DLL_CFG                   CFG;                    /**< \brief 8, DLL configuration register*/
} Ifx_HSPHY_DLL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_XPCS_PMA_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PMA object */
typedef volatile struct _Ifx_HSPHY_XPCS_PMA
{
       __IO Ifx_HSPHY_XPCS_PMA_SR_CTRL1         SR_CTRL1;               /**< \brief 0, SR PMA0 MMD Control1 Register*/
       __I  Ifx_HSPHY_XPCS_PMA_SR_STATUS1       SR_STATUS1;             /**< \brief 4, SR PMA0 MMD Status1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_8[131260];     /**< \brief 8, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_GENCTRL1 VR_XS_MP_12G_16G_25G_TX_GENCTRL1;    /**< \brief 200C4, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx General 1 Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_TX_GENCTRL2 VR_XS_MP_12G_16G_TX_GENCTRL2;    /**< \brief 200C8, VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY Tx General 2 Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_BOOST_CTRL VR_XS_MP_12G_16G_25G_TX_BOOST_CTRL;    /**< \brief 200CC, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Boost Control Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_RATE_CTRL VR_XS_MP_12G_16G_25G_TX_RATE_CTRL;    /**< \brief 200D0, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Rate Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_200D4[44];     /**< \brief 200D4, \internal Reserved */
       __I  Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_TX_STS VR_XS_MP_12G_16G_25G_TX_STS;    /**< \brief 20100, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Tx Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_20104[64];     /**< \brief 20104, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_GENCTRL1 VR_XS_MP_12G_16G_25G_RX_GENCTRL1;    /**< \brief 20144, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 1 Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_RX_GENCTRL2 VR_XS_MP_12G_16G_RX_GENCTRL2;    /**< \brief 20148, VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY Rx General Control 2*/
       __I  Ifx_UReg_8Bit                       reserved_2014C[4];      /**< \brief 2014C, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_RATE_CTRL VR_XS_MP_12G_16G_25G_RX_RATE_CTRL;    /**< \brief 20150, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx Rate Control*/
       __I  Ifx_UReg_8Bit                       reserved_20154[4];      /**< \brief 20154, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_CDR_CTRL VR_XS_MP_12G_16G_25G_RX_CDR_CTRL;    /**< \brief 20158, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx CDR Control*/
       __I  Ifx_UReg_8Bit                       reserved_2015C[24];     /**< \brief 2015C, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_AFE_DFE_EN_CTRL VR_XS_MP_12G_AFE_DFE_EN_CTRL;    /**< \brief 20174, VR XS or PMA Synopsys Multi-protocol 12G PHY AFE-DFE Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_20178[8];      /**< \brief 20178, \internal Reserved */
       __I  Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_RX_STS VR_XS_MP_12G_16G_25G_RX_STS;    /**< \brief 20180, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Rx Status*/
       __I  Ifx_UReg_8Bit                       reserved_20184[28];     /**< \brief 20184, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_GENCTRL4 VR_XS_MP_16G_25G_RX_GENCTRL4;    /**< \brief 201A0, VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY Rx General Control 4 Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_RX_MISC_CTRL0 VR_XS_MP_16G_25G_RX_MISC_CTRL0;    /**< \brief 201A4, VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY RX Miscellaneous Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_201A8[24];     /**< \brief 201A8, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_MPLL_CMN_CTRL VR_XS_MP_12G_16G_25G_MPLL_CMN_CTRL;    /**< \brief 201C0, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY MPLL Common Control Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL0 VR_XS_MP_12G_16G_MPLLA_CTRL0;    /**< \brief 201C4, VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY MPLLA Control 0 Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_MPLLA_CTRL1 VR_XS_MP_16G_MPLLA_CTRL1;    /**< \brief 201C8, VR XS or PMA0 Synopsys Multi-protocol 16G PHY MPLLA Control 1 Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_MPLLA_CTRL2 VR_XS_MP_12G_16G_MPLLA_CTRL2;    /**< \brief 201CC, VR XS or PMA0 Synopsys Multi-protocol 12G/16G PHY MPLLA Control 2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_201D0[36];     /**< \brief 201D0, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL6 VR_XS_MP_8G_MPLLA_CTRL6;    /**< \brief 201F4, VR XS or PMA0 Synopsys Multi-protocol 8G PHY MPLLA Control 6 Register*/
       __I  Ifx_UReg_8Bit                       reserved_201F8[4];      /**< \brief 201F8, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_8G_MPLLA_CTRL7 VR_XS_MP_8G_MPLLA_CTRL7;    /**< \brief 201FC, VR XS or PMA0 Synopsys Multi-protocol 8G PHY MPLLA Control 7 Register*/
       __I  Ifx_UReg_8Bit                       reserved_20200[68];     /**< \brief 20200, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_REF_CLK_CTRL VR_XS_MP_12G_16G_25G_REF_CLK_CTRL;    /**< \brief 20244, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY Reference Control Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_VCO_CAL_LD0 VR_XS_MP_12G_16G_25G_VCO_CAL_LD0;    /**< \brief 20248, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY VCO Calibration Load 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_2024C[12];     /**< \brief 2024C, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_VCO_CAL_REF0 VR_XS_MP_12G_VCO_CAL_REF0;    /**< \brief 20258, VR XS or PMA0 Synopsys Multi-protocol 12G PHY VCO Calibration Reference 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_2025C[16];     /**< \brief 2025C, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_12G_16G_25G_SRAM VR_XS_MP_12G_16G_25G_SRAM;    /**< \brief 2026C, VR XS or PMA0 Synopsys Multi-protocol 12G/16G/25G PHY SRAM Register*/
       __IO Ifx_HSPHY_XPCS_PMA_VR_XS_MP_16G_25G_MISC_CTRL2 VR_XS_MP_16G_25G_MISC_CTRL2;    /**< \brief 20270, VR XS or PMA0 Synopsys Multi-protocol 16G/25G PHY Miscellaneous Control 2 Register*/
} Ifx_HSPHY_XPCS_PMA;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_XPCS_PCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PCS object */
typedef volatile struct _Ifx_HSPHY_XPCS_PCS
{
       __IO Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL1      SR_XS_CTRL1;            /**< \brief 0, SR XS or PCS0 MMD Control1 Register*/
       __I  Ifx_HSPHY_XPCS_PCS_SR_XS_STS1       SR_XS_STS1;             /**< \brief 4, SR XS or PCS0 MMD Status1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_8[20];         /**< \brief 8, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PCS_SR_XS_CTRL2      SR_XS_CTRL2;            /**< \brief 1C, SR PCS0 Control2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_20[131040];    /**< \brief 20, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_CTRL1  VR_XS_DIG_CTRL1;        /**< \brief 20000, VR XS or PCS0 MMD Digital Control1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_20004[24];     /**< \brief 20004, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PCS_VR_XS_KR_CTRL    VR_XS_KR_CTRL;          /**< \brief 2001C, VR PCS0 10GBASE-R Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_20020[32];     /**< \brief 20020, \internal Reserved */
       __I  Ifx_HSPHY_XPCS_PCS_VR_XS_DIG_STS    VR_XS_DIG_STS;          /**< \brief 20040, VR XS or PCS0 MMD Digital Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_20044[28];     /**< \brief 20044, \internal Reserved */
       __I  Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_CDT_STS VR_XS_PCS_CDT_STS;      /**< \brief 20060, VR XS or PCS0 MMD Comma-Detect Status Register*/
       __I  Ifx_HSPHY_XPCS_PCS_VR_XS_PCS_MISC_STS VR_XS_PCS_MISC_STS;     /**< \brief 20064, VR XS or PCS0 MMD Miscellaneous Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_20068[856];    /**< \brief 20068, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PCS_VR_XS_SFTY_UE_INTR0 VR_XS_SFTY_UE_INTR0;    /**< \brief 203C0, VR XS or PCS MMD Uncorrectable Safety Error Interrupt Register*/
} Ifx_HSPHY_XPCS_PCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_XPCS_MII_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MII object */
typedef volatile struct _Ifx_HSPHY_XPCS_MII
{
       __IO Ifx_HSPHY_XPCS_MII_CTRL             CTRL;                   /**< \brief 0, 0 SR MII MMD Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[131068];     /**< \brief 4, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_MII_DIG_CTRL1        DIG_CTRL1;              /**< \brief 20000, 0 VR MII MMD Digital Control1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_20004[12];     /**< \brief 20004, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_MII_VR_MII_DIG_CTRL3 VR_MII_DIG_CTRL3;       /**< \brief 20010, 0 VR MII MMD Digital Control 3 Register*/
       __I  Ifx_UReg_8Bit                       reserved_20014[976];    /**< \brief 20014, \internal Reserved */
} Ifx_HSPHY_XPCS_MII;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_XPCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief XPCS object */
typedef volatile struct _Ifx_HSPHY_XPCS
{
       __IO Ifx_HSPHY_XPCS_PMA                  PMA;                    /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_20274[392588];    /**< \brief 20274, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_PCS                  PCS;                    /**< \brief 80000, */
       __I  Ifx_UReg_8Bit                       reserved_A03C4[7207996];    /**< \brief A03C4, \internal Reserved */
       __IO Ifx_HSPHY_XPCS_MII                  MII;                    /**< \brief 780000, */
       __I  Ifx_UReg_8Bit                       reserved_7A03E4[392220];    /**< \brief 7A03E4, \internal Reserved */
} Ifx_HSPHY_XPCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_VSMMD_SR_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SR object */
typedef volatile struct _Ifx_HSPHY_TPCS_VSMMD_SR
{
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID1     PMA_ID1;                /**< \brief 0, SR Control MMD PMA Device Identifier Register 1*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_PMA_ID2     PMA_ID2;                /**< \brief 4, SR Control MMD PMA Device Identifier Register 2*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID1     DEV_ID1;                /**< \brief 8, SR Control MMD Device Identifier Register 1*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_DEV_ID2     DEV_ID2;                /**< \brief C, SR Control MMD Device Identifier Register 2*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID1     PCS_ID1;                /**< \brief 10, SR Control MMD PCS Device Identifier Register 1*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_PCS_ID2     PCS_ID2;                /**< \brief 14, SR Control MMD PCS Device Identifier Register 2*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID1      AN_ID1;                 /**< \brief 18, SR Control MMD AN Device Identifier Register 1*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_AN_ID2      AN_ID2;                 /**< \brief 1C, SR Control MMD AN Device Identifier Register 2*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_STS         STS;                    /**< \brief 20, SR Control MMD Status Register*/
       __IO Ifx_HSPHY_TPCS_VSMMD_SR_CTRL        CTRL;                   /**< \brief 24, SR Control MMD Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_28[16];        /**< \brief 28, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_PKGID1      PKGID1;                 /**< \brief 38, SR Control MMD Package Identifier Register 1*/
       __I  Ifx_HSPHY_TPCS_VSMMD_SR_PKGID2      PKGID2;                 /**< \brief 3C, SR Control MMD Package Identifier Register 2*/
} Ifx_HSPHY_TPCS_VSMMD_SR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_VSMMD_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief VSMMD object */
typedef volatile struct _Ifx_HSPHY_TPCS_VSMMD
{
       __IO Ifx_HSPHY_TPCS_VSMMD_SR             SR;                     /**< \brief 0, */
} Ifx_HSPHY_TPCS_VSMMD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_MII_SR_TIMESYNC_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief TIMESYNC object */
typedef volatile struct _Ifx_HSPHY_TPCS_MII_SR_TIMESYNC
{
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_ABL  ABL;                    /**< \brief 0, SR MII MMD Time Sync Capability Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_LWR TX_MAX_DLY_LWR;         /**< \brief 4, SR MII MMD Time Sync Tx Max Delay Lower Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MAX_DLY_UPR TX_MAX_DLY_UPR;         /**< \brief 8, SR MII MMD Time Sync Tx Max Delay Upper Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_LWR TX_MIN_DLY_LWR;         /**< \brief C, SR MII MMD Time Sync Tx Min Delay Lower Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_TX_MIN_DLY_UPR TX_MIN_DLY_UPR;         /**< \brief 10, SR MII MMD Time Sync Tx Min Delay Upper Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_LWR RX_MAX_DLY_LWR;         /**< \brief 14, SR MII MMD Time Sync Rx Max Delay Lower Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MAX_DLY_UPR RX_MAX_DLY_UPR;         /**< \brief 18, SR MII MMD Time Sync Rx Max Delay Upper Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_LWR RX_MIN_DLY_LWR;         /**< \brief 1C, SR MII MMD Time Sync Rx Min Delay Lower Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_TIMESYNC_RX_MIN_DLY_UPR RX_MIN_DLY_UPR;         /**< \brief 20, SR MII MMD Time Sync Rx Min Delay Upper Register*/
} Ifx_HSPHY_TPCS_MII_SR_TIMESYNC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_MII_SR_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief SR object */
typedef volatile struct _Ifx_HSPHY_TPCS_MII_SR
{
       __IO Ifx_HSPHY_TPCS_MII_SR_CTRL          CTRL;                   /**< \brief 0, SR MII MMD Control Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_STS           STS;                    /**< \brief 4, SR MII MMD Status Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_DEV           DEV;                    /**< \brief 8, SR MII MMD Device Identifier Register 1*/
       __I  Ifx_HSPHY_TPCS_MII_SR_DEV_ID2       DEV_ID2;                /**< \brief C, SR MII MMD Device Identifier Register 2*/
       __IO Ifx_HSPHY_TPCS_MII_SR_AN_ADV        AN_ADV;                 /**< \brief 10, SR MII MMD AN Advertisement Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_LP_BABL       LP_BABL;                /**< \brief 14, SR MII MMD AN Link Partner Base Ability Register*/
       __I  Ifx_HSPHY_TPCS_MII_SR_AN_EXPN       AN_EXPN;                /**< \brief 18, SR MII MMD AN Expansion Register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[32];        /**< \brief 1C, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_SR_EXT_STS       EXT_STS;                /**< \brief 3C, SR MII MMD Extended Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_40[7136];      /**< \brief 40, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_SR_TIMESYNC      TIMESYNC;               /**< \brief 1C20, */
} Ifx_HSPHY_TPCS_MII_SR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_MII_VR_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief VR object */
typedef volatile struct _Ifx_HSPHY_TPCS_MII_VR
{
       __IO Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL1     DIG_CTRL1;              /**< \brief 0, VR MII MMD Digital Control1 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_AN_CTRL       AN_CTRL;                /**< \brief 4, VR MII MMD AN Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_AN_INTR_STS   AN_INTR_STS;            /**< \brief 8, VR MII MMD AN Interrupt and Status Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_TC            TC;                     /**< \brief C, VR MII MMD Test Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_10[4];         /**< \brief 10, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_DBG_CTRL      DBG_CTRL;               /**< \brief 14, VR MII MMD Debug Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_18[16];        /**< \brief 18, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_LINK_TIMER_CTRL LINK_TIMER_CTRL;        /**< \brief 28, VR MII MMD Link Timer Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_2C[20];        /**< \brief 2C, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_DIG_STS       DIG_STS;                /**< \brief 40, VR MII MMD Digital Status Register*/
       __I  Ifx_HSPHY_TPCS_MII_VR_ICG_ERRCNT1   ICG_ERRCNT1;            /**< \brief 44, VR MII MMD Invalid Code Group Error Count1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_48[24];        /**< \brief 48, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_MISC_STS      MISC_STS;               /**< \brief 60, VR MII MMD Miscellaneous Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_64[28];        /**< \brief 64, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_RX_LSTS       RX_LSTS;                /**< \brief 80, VR MII PHY Rx Lane Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_84[60];        /**< \brief 84, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL0 MP_12G_16G_25G_TX_GENCTRL0;    /**< \brief C0, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx General Register 0*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_GENCTRL1 MP_12G_16G_25G_TX_GENCTRL1;    /**< \brief C4, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx General Register 1*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_TX_GENCTRL2 MP_12G_16G_TX_GENCTRL2;    /**< \brief C8, VR MII Synopsys Multi-protocol 12G/16G PHY Tx General Register 2*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_BOOST_CTRL MP_12G_16G_25G_TX_BOOST_CTRL;    /**< \brief CC, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Boost Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_RATE_CTRL MP_12G_16G_25G_TX_RATE_CTRL;    /**< \brief D0, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Rate Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_POWER_STATE_CTRL MP_12G_16G_25G_TX_POWER_STATE_CTRL;    /**< \brief D4, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Power State Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL0 MP_12G_16G_25G_TX_EQ_CTRL0;    /**< \brief D8, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Equalization Control 0 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_EQ_CTRL1 MP_12G_16G_25G_TX_EQ_CTRL1;    /**< \brief DC, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Equalization Control 1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_E0[16];        /**< \brief E0, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL3 MP_16G_25G_TX_GENCTRL3;    /**< \brief F0, VR MII Synopsys Multi-protocol 16G/25G PHY TX General Control 3 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_GENCTRL4 MP_16G_25G_TX_GENCTRL4;    /**< \brief F4, VR MII Synopsys Multi-protocol 16G/25G PHY TX General Control 4 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_TX_MISC_CTRL0 MP_16G_25G_TX_MISC_CTRL0;    /**< \brief F8, VR MII Synopsys Multi-protocol 16G/25G PHY TX Miscellaneous Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_FC[4];         /**< \brief FC, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_TX_STS MP_12G_16G_25G_TX_STS;    /**< \brief 100, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Tx Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_104[60];       /**< \brief 104, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL0 MP_12G_16G_25G_RX_GENCTRL0;    /**< \brief 140, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 0 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_GENCTRL1 MP_12G_16G_25G_RX_GENCTRL1;    /**< \brief 144, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx General Control 1 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL2 MP_12G_16G_RX_GENCTRL2;    /**< \brief 148, VR MII Synopsys Multi-protocol 12G/16G PHY Rx General Control 2 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_RX_GENCTRL3 MP_12G_16G_RX_GENCTRL3;    /**< \brief 14C, VR MII Synopsys Multi-protocol 12G/16G PHY Rx General Control 3 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_RATE_CTRL MP_12G_16G_25G_RX_RATE_CTRL;    /**< \brief 150, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Rate Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_POWER_STATE_CTRL MP_12G_16G_25G_RX_POWER_STATE_CTRL;    /**< \brief 154, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Power State Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_CDR_CTRL MP_12G_16G_25G_RX_CDR_CTRL;    /**< \brief 158, VR MII Synopsys Multi-protocol 12G/16G PHY/25G Rx CDR Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_ATTN_CTRL MP_12G_16G_25G_RX_ATTN_CTRL;    /**< \brief 15C, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Attenuation Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_RX_EQ_CTRL0 MP_12G_RX_EQ_CTRL0;     /**< \brief 160, VR MII Synopsys Multi-protocol 12G PHY Rx Equalization Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_164[12];       /**< \brief 164, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_EQ_CTRL4 MP_12G_16G_25G_RX_EQ_CTRL4;    /**< \brief 170, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Equalization Control 4 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_AFE_DFE_EN_CTRL MP_12G_AFE_DFE_EN_CTRL;    /**< \brief 174, VR MII Synopsys Multi-protocol 12G PHY AFE-DFE Enable Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_DFE_TAP_CTRL0 MP_12G_16G_25G_DFE_TAP_CTRL0;    /**< \brief 178, VR MII Synopsys Multi-protocol 12G/16G/25G PHY DFE Tap Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_17C[4];        /**< \brief 17C, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_RX_STS MP_12G_16G_25G_RX_STS;    /**< \brief 180, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Rx Status Register*/
       __I  Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_STS0 MP_16G_25G_RX_PPM_STS0;    /**< \brief 184, VR MII Synopsys Multi-protocol 16G/25G PHY Rx PPM Status 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_188[8];        /**< \brief 188, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_RX_CDR_CTRL1 MP_16G_RX_CDR_CTRL1;    /**< \brief 190, VR MII Synopsys Multi-protocol 16G PHY Rx CDR Control1 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_PPM_CTRL0 MP_16G_25G_RX_PPM_CTRL0;    /**< \brief 194, VR MII Synopsys Multi-protocol 16G/25G PHY Rx PPM Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_198[8];        /**< \brief 198, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_GENCTRL4 MP_16G_25G_RX_GENCTRL4;    /**< \brief 1A0, VR MII Synopsys Multi-protocol 16G/25G PHY Rx General Control 4 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_MISC_CTRL0 MP_16G_25G_RX_MISC_CTRL0;    /**< \brief 1A4, VR MII Synopsys Multi-protocol 16G/25G PHY RX Miscellaneous Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_1A8[4];        /**< \brief 1A8, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_RX_IQ_CTRL0 MP_16G_25G_RX_IQ_CTRL0;    /**< \brief 1AC, VR MII Synopsys Multi-protocol 16G/25G PHY RX IQ Control 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_1B0[16];       /**< \brief 1B0, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MPLL_CMN_CTRL MP_12G_16G_25G_MPLL_CMN_CTRL;    /**< \brief 1C0, VR MII Synopsys Multi-protocol 12G/16G/25G PHY MPLL Common Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL0 MP_12G_16G_MPLLA_CTRL0;    /**< \brief 1C4, VR MII Synopsys Multi-protocol 12G/16G PHY MPLLA Control 0 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL1 MP_16G_MPLLA_CTRL1;     /**< \brief 1C8, VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 1 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_MPLLA_CTRL2 MP_12G_16G_MPLLA_CTRL2;    /**< \brief 1CC, VR MII Synopsys Multi-protocol 12G/16G PHY MPLLA Control 2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_1D0[20];       /**< \brief 1D0, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL4 MP_16G_MPLLA_CTRL4;     /**< \brief 1E4, VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 4 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_MPLLA_CTRL5 MP_16G_MPLLA_CTRL5;     /**< \brief 1E8, VR MII Synopsys Multi-protocol 16G PHY MPLLA Control 5 Register*/
       __I  Ifx_UReg_8Bit                       reserved_1EC[8];        /**< \brief 1EC, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL6 MP_8G_MPLLA_CTRL6;      /**< \brief 1F4, VR MII Synopsys Multi-protocol 8G PHY MPLLA Control 6 Register*/
       __I  Ifx_UReg_8Bit                       reserved_1F8[4];        /**< \brief 1F8, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_8G_MPLLA_CTRL7 MP_8G_MPLLA_CTRL7;      /**< \brief 1FC, VR MII Synopsys Multi-protocol 8G PHY MPLLA Control 7 Register*/
       __I  Ifx_UReg_8Bit                       reserved_200[64];       /**< \brief 200, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL0 MP_12G_16G_25G_MISC_CTRL0;    /**< \brief 240, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Control 0 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_REF_CLK_CTRL MP_12G_16G_25G_REF_CLK_CTRL;    /**< \brief 244, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Reference Control Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_VCO_CAL_LD0 MP_12G_16G_25G_VCO_CAL_LD0;    /**< \brief 248, VR MII Synopsys Multi-protocol 12G/16G/25G PHY VCO Calibration Load 0 Register*/
       __I  Ifx_UReg_8Bit                       reserved_24C[12];       /**< \brief 24C, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_VCO_CAL_REF0 MP_12G_VCO_CAL_REF0;    /**< \brief 258, VR MII Synopsys Multi-protocol 12G PHY VCO Calibration Reference Register 0*/
       __I  Ifx_UReg_8Bit                       reserved_25C[4];        /**< \brief 25C, \internal Reserved */
       __I  Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_STS MP_12G_16G_25G_MISC_STS;    /**< \brief 260, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Status Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_MISC_CTRL1 MP_12G_16G_25G_MISC_CTRL1;    /**< \brief 264, VR MII Synopsys Multi-protocol 12G/16G/25G PHY Miscellaneous Control 1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_268[4];        /**< \brief 268, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_12G_16G_25G_SRAM MP_12G_16G_25G_SRAM;    /**< \brief 26C, VR MII Synopsys Multi-protocol 12G/16G/25G PHY SRAM Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_MP_16G_25G_MISC_CTRL2 MP_16G_25G_MISC_CTRL2;    /**< \brief 270, VR MII Synopsys Multi-protocol 16G/25G PHY Miscellaneous Control 2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_274[272];      /**< \brief 274, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR_DIG_CTRL2     DIG_CTRL2;              /**< \brief 384, VR MII MMD Digital Control2 Register*/
       __IO Ifx_HSPHY_TPCS_MII_VR_DIG_ERRCNT_SEL DIG_ERRCNT_SEL;         /**< \brief 388, VR MII MMD Digital Error Count Select Register*/
} Ifx_HSPHY_TPCS_MII_VR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_MII_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MII object */
typedef volatile struct _Ifx_HSPHY_TPCS_MII
{
       __IO Ifx_HSPHY_TPCS_MII_SR               SR;                     /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_1C44[123836];    /**< \brief 1C44, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII_VR               VR;                     /**< \brief 20000, */
} Ifx_HSPHY_TPCS_MII;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_TPCS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TPCS object */
typedef volatile struct _Ifx_HSPHY_TPCS
{
       __IO Ifx_HSPHY_TPCS_VSMMD                VSMMD;                  /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_40[262080];    /**< \brief 40, \internal Reserved */
       __IO Ifx_HSPHY_TPCS_MII                  MII;                    /**< \brief 40000, */
} Ifx_HSPHY_TPCS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHY_SUP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief SUP object */
typedef volatile struct _Ifx_HSPHY_PHY_SUP
{
       __I  Ifx_UReg_8Bit                       reserved_0[68];         /**< \brief 0, \internal Reserved */
       __I  Ifx_HSPHY_PHY_SUP_DIG_RX_TXUP_TERM_OFFSET_ASIC_IN DIG_RX_TXUP_TERM_OFFSET_ASIC_IN;    /**< \brief 44, Current values (pre-override) for incoming level controls from ASIC*/
       __I  Ifx_HSPHY_PHY_SUP_DIG_TXDN_TERM_OFFSET_ASIC_IN DIG_TXDN_TERM_OFFSET_ASIC_IN;    /**< \brief 46, Current values (pre-override) for incoming level controls from ASIC*/
       __I  Ifx_UReg_8Bit                       reserved_48[90];        /**< \brief 48, \internal Reserved */
       __IO Ifx_HSPHY_PHY_SUP_ANA_MPLLA_TEST1   ANA_MPLLA_TEST1;        /**< \brief A2, mplla testmodes register*/
       __I  Ifx_UReg_8Bit                       reserved_A4[92];        /**< \brief A4, \internal Reserved */
       __IO Ifx_HSPHY_PHY_SUP_DIG_RTUNE_DEBUG   DIG_RTUNE_DEBUG;        /**< \brief 100, Resistor tuning debug controls*/
} Ifx_HSPHY_PHY_SUP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHY_LANE0_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief LANE0 object */
typedef volatile struct _Ifx_HSPHY_PHY_LANE0
{
       __I  Ifx_UReg_8Bit                       reserved_0[6];          /**< \brief 0, \internal Reserved */
       __IO Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_2 DIG_ASIC_TX_OVRD_IN_2;    /**< \brief 6, Override values for incoming TX drive controls from ASIC, register #2*/
       __IO Ifx_HSPHY_PHY_LANE0_DIG_ASIC_TX_OVRD_IN_3 DIG_ASIC_TX_OVRD_IN_3;    /**< \brief 8, Override values for incoming TX drive controls from ASIC, register #3*/
} Ifx_HSPHY_PHY_LANE0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHY_RAWCMN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RAWCMN object */
typedef volatile struct _Ifx_HSPHY_PHY_RAWCMN
{
       __I  Ifx_UReg_8Bit                       reserved_0[80];         /**< \brief 0, \internal Reserved */
       __IO Ifx_HSPHY_PHY_RAWCMN_DIG_AON_CMNCAL_STATUS DIG_AON_CMNCAL_STATUS;    /**< \brief 50, Common Calibration Status*/
} Ifx_HSPHY_PHY_RAWCMN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHY_RAWLANE0_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RAWLANE0 object */
typedef volatile struct _Ifx_HSPHY_PHY_RAWLANE0
{
       __I  Ifx_UReg_8Bit                       reserved_0[8];          /**< \brief 0, \internal Reserved */
       __I  Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_TX_PCS_OUT DIG_PCS_XF_TX_PCS_OUT;    /**< \brief 8, Current values for outgoing TX status controls from Raw PCS (Monitor on the pre-override output signals)*/
       __I  Ifx_UReg_8Bit                       reserved_A[20];         /**< \brief A, \internal Reserved */
       __I  Ifx_HSPHY_PHY_RAWLANE0_DIG_PCS_XF_RX_PCS_OUT DIG_PCS_XF_RX_PCS_OUT;    /**< \brief 1E, Current values for outgoing RX status controls from Raw PCS (Monitor on the pre-override output signals)*/
       __I  Ifx_UReg_8Bit                       reserved_20[158];       /**< \brief 20, \internal Reserved */
       __IO Ifx_HSPHY_PHY_RAWLANE0_DIG_AON_FAST_FLAGS DIG_AON_FAST_FLAGS;     /**< \brief BE, Fast flags for calibration only*/
} Ifx_HSPHY_PHY_RAWLANE0;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHY_LANEX_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief LANEX object */
typedef volatile struct _Ifx_HSPHY_PHY_LANEX
{
       __I  Ifx_UReg_8Bit                       reserved_0[6];          /**< \brief 0, \internal Reserved */
       __IO Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_2 DIG_ASIC_TX_OVRD_IN_2;    /**< \brief 6, Override values for incoming TX drive controls from ASIC, register #2*/
       __IO Ifx_HSPHY_PHY_LANEX_DIG_ASIC_TX_OVRD_IN_3 DIG_ASIC_TX_OVRD_IN_3;    /**< \brief 8, Override values for incoming TX drive controls from ASIC, register #3*/
} Ifx_HSPHY_PHY_LANEX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_PHY_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PHY object */
typedef volatile struct _Ifx_HSPHY_PHY
{
       __IO Ifx_HSPHY_PHY_SUP                   SUP;                    /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_102[7934];     /**< \brief 102, \internal Reserved */
       __IO Ifx_HSPHY_PHY_LANE0                 LANE0;                  /**< \brief 2000, */
       __I  Ifx_UReg_8Bit                       reserved_200A[8182];    /**< \brief 200A, \internal Reserved */
       __IO Ifx_HSPHY_PHY_RAWCMN                RAWCMN;                 /**< \brief 4000, */
       __I  Ifx_UReg_8Bit                       reserved_4052[8110];    /**< \brief 4052, \internal Reserved */
       __IO Ifx_HSPHY_PHY_RAWLANE0              RAWLANE0;               /**< \brief 6000, */
       __I  Ifx_UReg_8Bit                       reserved_60C0[48960];    /**< \brief 60C0, \internal Reserved */
       __IO Ifx_HSPHY_PHY_LANEX                 LANEX;                  /**< \brief 12000, */
} Ifx_HSPHY_PHY;

/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_CRPARA_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief HSPHY_CRPARA object */
typedef volatile struct _Ifx_HSPHY_CRPARA
{
       __IO Ifx_HSPHY_PHY                       PHY;                    /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_1200A[188406];    /**< \brief 1200A, \internal Reserved */
} Ifx_HSPHY_CRPARA;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Hsphy_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief HSPHY object */
typedef volatile struct _Ifx_HSPHY
{
       __IO Ifx_HSPHY_CLC                       CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_HSPHY_OCS                       OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_HSPHY_ID                        ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_HSPHY_RST                       RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_HSPHY_PROT                      PROTE;                  /**< \brief 20, PROT register endinit*/
       __IO Ifx_HSPHY_PROT                      PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_HSPHY_ACCENGLB                  ACCENGLB;               /**< \brief 40, */
       __IO Ifx_HSPHY_ACCENCH                   ACCENCH[3];             /**< \brief 60, */
       __I  Ifx_UReg_8Bit                       reserved_C0[320];       /**< \brief C0, \internal Reserved */
       __IO Ifx_HSPHY_CMNCFG                    CMNCFG;                 /**< \brief 200, The common control*/
       __I  Ifx_UReg_8Bit                       reserved_204[12];       /**< \brief 204, \internal Reserved */
       __IO Ifx_HSPHY_MP8GPHY                   PHY[3];                 /**< \brief 210, */
       __I  Ifx_UReg_8Bit                       reserved_228[8];        /**< \brief 228, \internal Reserved */
       __IO Ifx_HSPHY_PHYREG                    PHYREG[3];              /**< \brief 230, */
       __I  Ifx_UReg_8Bit                       reserved_248[8];        /**< \brief 248, \internal Reserved */
       __IO Ifx_HSPHY_PCIE                      PCIE;                   /**< \brief 250, PCIe calibration control*/
       __I  Ifx_UReg_8Bit                       reserved_254[940];      /**< \brief 254, \internal Reserved */
       __IO Ifx_HSPHY_ETH                       ETH[2];                 /**< \brief 600, Ethernet0 selection control*/
       __I  Ifx_UReg_8Bit                       reserved_608[24];       /**< \brief 608, \internal Reserved */
       __IO Ifx_HSPHY_DLL                       DLL;                    /**< \brief 620, ETHERMAC RGMII/xSPI IO Test Procedure Receive Register*/
       __I  Ifx_UReg_8Bit                       reserved_62C[1145300];    /**< \brief 62C, \internal Reserved */
       Ifx_UReg_32Bit                      INITALLMEM[8192];      /**< \brief 118000, */
       __I  Ifx_UReg_8Bit                       reserved_120000[7471104];    /**< \brief 120000, \internal Reserved */
       __IO Ifx_HSPHY_XPCS                      XPCS[2];                /**< \brief 840000, */
       __I  Ifx_UReg_8Bit                       reserved_1840000[7602176];    /**< \brief 1840000, \internal Reserved */
       __IO Ifx_HSPHY_TPCS                      TPCS;                   /**< \brief 1F80000, */
       __I  Ifx_UReg_8Bit                       reserved_1FE038C[130164];    /**< \brief 1FE038C, \internal Reserved */
} Ifx_HSPHY;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXHSPHY_REGDEF_H */
