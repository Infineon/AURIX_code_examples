/**********************************************************************************************************************
 * \file TLE4973.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef TLE4973_H_
#define TLE4973_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define WRITE_LENGTH            0x05
#define READ_LENGTH             0x03
#define UART_FRAME              0x06
#define NO_DATA                 0x0000
#define CLEAR_BYTE              0x00
#define CRC_NOT_VALID           0x00
#define CRC_VALID               0x01
#define STATIC_ADDR             0x08
/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/

typedef enum
{
    UNLOCKRegAddr      = 0xA5,                 /* General status register                      */
    GAINCWRegAddr      = 0x20,
    OFFSETCWRegAddr    = 0x21,
    ISMRegAddr         = 0x25,
    FAILRegAddr        = 0x01,
    EEPROMRegAddr      = 0x3E,
    ADDRESSRegAddr     = 0x81,
    DIAGSTATUSRegAddr  = 0x82,
    DIAGRegAddr        = 0x83,
    EEPROM40           = 0x40,
    EEPROM41           = 0x41,
    EEPROM42           = 0x42,
    EEPROM43           = 0x43,
    EEPROM44           = 0x44,
    EEPROM45           = 0x45,
    EEPROM46           = 0x46,
    EEPROM47           = 0x47,
    EEPROM48           = 0x48,
    EEPROM49           = 0x49,
    EEPROM4A           = 0x4A,
    EEPROM52           = 0x52,
    EEPROM53           = 0x53
}tle4973RegAddr;

typedef enum
{
    S1        = 0,
    S2        = 1,
    S3        = 2,
    S3_5      = 3,
    S4        = 4,
    S4_5      = 5,
    S5        = 6,
    S5_5      = 7,
    S6        = 8
}MEASRange;

typedef enum
{
   SemiDifferential_biDir      = 0,
   FullyDifferential           = 1,
   SemiDifferential_uniDir     = 2,
   SingleEnded                 = 3,
   SingleEnded_biDir           = 4,
   SingleEnded_uniDir          = 6,
}OPMode;

typedef enum
{
    temperatureIC  = 0,
    out_Diag       = 1,
    OCD_Diag       = 2,
    sat            = 3,
    OCD            = 4,
}getDiagBFLD;

typedef enum
{
   writeCommand = 1,
   readCommand = 0
}commandType;

typedef enum
{
   BroadcastSet = 1,
   BroadcastGet = 0
}commandBCType;

typedef enum
{
   readRequest = 0,
   writeRequest = 1,
   unknow = 2
}comFlagType;

typedef enum
{
   dataNotReceived = 0,
   dataReceived = 1
}receivedStateType;

typedef enum
{
   UNLOCK = 0xABCD,
   DISABLE_ISM = 0x8000,
   ENABLE_ISM = 0x0000,
   RESET = 0x0001,
   DISABLE_EEPROM_CRC = 0x0000,
   PROGRAMME_EEPROM_ONE = 0x0A4F,
   PROGRAMME_EEPROM_ZERO = 0x0A4E,
   SET_EEPROM_ZERO = 0x0248,
   EEPROM_REFRESH = 0x024C
}commandHLType;


/* Register Bitfields */

typedef struct
{
    uint16       MEASRANGE:5;
    uint16      OUTPUTMODE:3;
    uint16      OCDDGLITCH:3;
    uint16        UARTADDR:4;
    uint16       UARTMVOTE:1;
} tlf4973EEPROM40Bits;

typedef struct
{
    uint16         OCDHYST:2;
    uint16    OCDTHRESHOLD:6;
    uint16       UARTSPEED:3;
    uint16        OCDLATCH:1;
    uint16        reserved:4;
} tlf4973EEPROM41Bits;

typedef struct
{
    uint16             CRC:8;
    uint16         VREFEXT:1;
    uint16        reserved:2;
    uint16     POLARITYINV:1;
    uint16          OCDSEL:1;
    uint16        OCDFAULT:1;
    uint16       GAINRATIO:1;
    uint16     OFFSETRATIO:1;
} tlf4973EEPROM42Bits;

typedef struct
{
    uint16        BASEGAIN:4;
    uint16     GAINTEMPLIN:12;
} tlf4973EEPROM43Bits;

typedef struct
{
    uint16        BASEGAIN:6;
    uint16    GAINTEMPQUAD:10;
} tlf4973EEPROM44Bits;

typedef struct
{
    uint16       STRESSBASE:4;
    uint16         BASEGAIN:1;
    uint16      GAINTEMPCUB:11;
} tlf4973EEPROM45Bits;

typedef struct
{
    uint16       STRESSBASE:4;
    uint16    STRESSTEMPLIN:12;
} tlf4973EEPROM46Bits;

typedef struct
{
    uint16       STRESSBASE:4;
    uint16   STRESSTEMPQUAD:12;
} tlf4973EEPROM47Bits;

typedef struct
{
    uint16      EPKTEMPQUAD:8;
    uint16          EPKBASE:8;
} tlf4973EEPROM48Bits;

typedef struct
{
    uint16    OFFSETTEMPLIN:8;
    uint16       EPKTEMPLIN:8;
} tlf4973EEPROM49Bits;

typedef struct
{
    uint16   OFFSETTEMPQUAD:9;
    uint16       OFFSETBASE:7;
} tlf4973EEPROM4ABits;

typedef struct
{
    uint16           CHIPID:16;
} tlf4973EEPROM52Bits;

typedef struct
{
    uint16           CHIPID:16;
} tlf4973EEPROM53Bits;

typedef struct
{
    uint16       RESETOCD:1;
    uint16      STARTDIAG:1;
    uint16            AFE:1;
    uint16            OCD:1;
    uint16       POLARITY:1;
    uint16       AFELEVEL:2;
    uint16           AUTO:1;
    uint16       reserved:8;
} tlf4973DIAGBits;

typedef struct
{
    uint16    TEMPERATURE:12;
    uint16        OUTDIAG:1;
    uint16        OCDDIAG:1;
    uint16            SAT:1;
    uint16            OCD:1;
} tlf4973GETDIAGBits;


/* Protection register */

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM40Bits B;
} tlf4973EEPROM40;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM41Bits B;
} tlf4973EEPROM41;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM42Bits B;
} tlf4973EEPROM42;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM43Bits B;
} tlf4973EEPROM43;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM44Bits B;
} tlf4973EEPROM44;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM45Bits B;
} tlf4973EEPROM45;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM46Bits B;
} tlf4973EEPROM46;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM47Bits B;
} tlf4973EEPROM47;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM48Bits B;
} tlf4973EEPROM48;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM49Bits B;
} tlf4973EEPROM49;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM4ABits B;
} tlf4973EEPROM4A;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM52Bits B;
} tlf4973EEPROM52;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973EEPROM53Bits B;
} tlf4973EEPROM53;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973GETDIAGBits B;
} tlf4973GETDIAG;

typedef union
{
    uint16 U;
    sint16 I;
    tlf4973DIAGBits B;
} tlf4973DIAG;

/* TLF9010 register structure */
typedef volatile struct
{
    tlf4973EEPROM40         EEPROM40;
    tlf4973EEPROM41         EEPROM41;
    tlf4973EEPROM42         EEPROM42;
    tlf4973EEPROM43         EEPROM43;
    tlf4973EEPROM44         EEPROM44;
    tlf4973EEPROM45         EEPROM45;
    tlf4973EEPROM46         EEPROM46;
    tlf4973EEPROM47         EEPROM47;
    tlf4973EEPROM48         EEPROM48;
    tlf4973EEPROM49         EEPROM49;
    tlf4973EEPROM4A         EEPROM4A;
    tlf4973EEPROM52         EEPROM52;
    tlf4973EEPROM53         EEPROM53;
    tlf4973GETDIAG          GETDIAG;
    tlf4973DIAG             DIAG;
} tle4973_REG;

typedef struct
{
    uint8           CRC:3;
    commandType     Cmd:1;
    uint8          Addr:4;
} COMMANDBYTEBits;

typedef struct
{
    uint8           CRC:5;
    uint8            ST:1;
    uint8            RC:2;
} SAFETYBYTEBits;

typedef struct
{
    comFlagType             frameRequest:2;
    OPMode                  measureMode:3;
    uint8                   reserved:3;
} comFlagBits;

typedef struct
{
    uint32          Data:16;
    uint32        Safety:8;
    uint32      reserved:8;
} TLE4973FrameBits;

typedef union
{
    uint8 U;
    sint8 I;
    COMMANDBYTEBits B;
} COMMANDBYTE;

typedef union
{
    uint8 U;
    sint8 I;
    SAFETYBYTEBits B;
} SAFETYBYTE;

typedef union
{
    uint8 U;
    sint8 I;
    comFlagBits B;
} comFlag;

typedef union
{
    uint32 U;
    sint32 I;
    TLE4973FrameBits B;
} TLE4973Frame;

uint8 crc3Calculation(uint8 data);
uint8 crc3Verification(uint8 data);
void createCRC5LUT(void);
uint8 calculateCRC5(uint8 *data, uint8 numberOfBytes, uint8 initialValue);
void sendTLE9010Buffer(commandType cmd, tle4973RegAddr addr, uint16 data, uint8 size, uint8 deviceAddr);
void writeHLCommand(tle4973RegAddr addr, commandHLType data, uint8 deviceID);
void sendReset(uint8 deviceID);
uint16 readHLCommand(tle4973RegAddr addr, uint8 deviceID);
void sendBroadCastCmd(commandBCType cmd);
void dataStreamToFrame(uint8 *stock);
int getDiag(getDiagBFLD selDiag, uint8 index);
float measureVoltageSensor(uint8 index);
void measureCurrent(uint8 index);
void multiMeasureCurrent(void);
void configOutPut(OPMode output, MEASRange sense);
void setOutputMode(OPMode OPM, uint8 DeviceID);
void configSensorSense(int current, uint8 Index);
void setMeasRange(MEASRange sense, uint8 DeviceID);

void setRequestSize(comFlagType command);
comFlagType getRequestSize(void);
#endif /* TLE4973_H_ */
