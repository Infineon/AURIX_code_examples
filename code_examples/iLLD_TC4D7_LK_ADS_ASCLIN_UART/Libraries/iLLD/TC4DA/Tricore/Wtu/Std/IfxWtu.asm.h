/**
 * \file IfxWtu.asm.h
 * \brief WTU  basic functionality
 * \ingroup IfxLld_Wtu
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxLld_Wtu_Std_Wtu_Operative Wdt Operative Functionality
 * \ingroup IfxLld_Wtu_Std
 */
#ifndef IFXWTU_ASM_H
#define IFXWTU_ASM_H 1

#include "Cpu/Std/Ifx_Types.h"
#include "IfxWtu_reg.h"

/** \addtogroup IfxLld_Scu_Std_Wdt_Operative
 * \{ */
#define IFXWTU_CALCULATELFSR(pwd) ((((((pwd) >> 14) ^ ((pwd) >> 13) ^ ((pwd) >> 12) ^ ((pwd) >> 2) ^ 1) & 1)) | (((pwd) << 1) & 0x7FFF))
/**
 * \brief WTU Inline API utility to Calculte new 14-bit LFSR.
 *
 * This API will Calculte new 15-bit LFSR (Linear Feedback Shift Register) with characteristic polynomial
 * x15+x14+x13+x3+1.
 *
 * \param password Password for which LFSR value to be calculated.
 * \return New LFSR.
 */
IFX_INLINE uint16 IfxWtu_calculateLfsr(uint16 password);
/** \}  */

/**
 * \brief WTU Inline API utility to Calculte new 15-bit LFSR.
 */
#if defined(__TASKING__)
IFX_INLINE uint16 IfxWtu_calculateLfsr(uint16 pwd)
{
    /* *INDENT-OFF* */
    uint32 temp = pwd;
    uint16 res;

    __asm("xor.t  %0,%1,14,%1,13 \n\
           xor.t  %0,%0,0,%1,12  \n\
           xor.t    %0,%0,0,%1,2   \n\
           xor      %0,%0,#1        \n\
           sh.or.t  %1,%0,0,%0,0   \n\
           mov d4,#0 \n\
           mov d5,#15 \n\
           extr.u %0,%1,e4     \n" : "=&d" (res) : "d" (temp));
    return res;
    /* *INDENT-ON* */
}


#elif defined(__GNUC__)
IFX_INLINE uint16 IfxWtu_calculateLfsr(uint16 pwd)
{
    /* *INDENT-OFF* */
    uint32 temp = pwd;
    uint16 res;

    __asm("xor.t    %0,%1,14,%1,13 \n\
           xor.t    %0,%0,0,%1,12  \n\
           xor.t    %0,%0,0,%1,2   \n\
           xor      %0,%0,1        \n\
           sh.or.t  %1,%0,0,%0,0   \n\
           extr.u %0,%1,0,15     \n" : "=&d" (res) : "d" (temp));
    return res;
    /* *INDENT-ON* */
}


#elif defined(__DCC__)
/* *INDENT-OFF* */
asm uint16 IfxWtu_calculateLfsr_asm(uint16 password)
{
%reg password
!"%d2"
    xor.t   %d2, password, 14, password, 13
    xor.t   %d2, %d2, 0, password, 12
	xor.t   %d2,%d2,0,password,2
	xor     %d2,%d2,1
	sh.or.t password,%d2,0,%d2,0
	extr.u %d2,password,0,15
}
/* *INDENT-ON* */
IFX_INLINE uint16 IfxWtu_calculateLfsr(uint16 pwd)
{
    return IfxWtu_calculateLfsr_asm(pwd);
}


#elif defined(__ghs__)
IFX_INLINE uint16 IfxWtu_calculateLfsr(uint16 pwd)
{
    /* *INDENT-OFF* */
    uint32 temp = pwd;
    uint16 res;

    __asm("xor.t    %0,%1,14,%1,13 \n\
           xor.t    %0,%0,0,%1,12  \n\
           xor.t    %0,%0,0,%1,2   \n\
           xor      %0,%0,1        \n\
           sh.or.t  %1,%0,0,%0,0   \n\
           extr.u %0,%1,0,15     \n" : "=&d" (res) : "d" (temp));
    return res;
    /* *INDENT-ON* */
}


#endif
#endif
