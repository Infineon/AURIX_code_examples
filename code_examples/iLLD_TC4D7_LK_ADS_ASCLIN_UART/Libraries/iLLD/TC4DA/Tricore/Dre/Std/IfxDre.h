/**
 * \file IfxDre.h
 * \brief DRE  basic functionality
 * \ingroup IfxLld_Dre
 *
 * \version iLLD-TC4-v2.2.0
 * \copyright Copyright (c) 2022 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Dre_Std_Enumerations Enumerations
 * \ingroup IfxLld_Dre_Std
 * \defgroup IfxLld_Dre_Std_Data_Structures Data Structures
 * \ingroup IfxLld_Dre_Std
 * \defgroup IfxLld_Dre_Std_Functions Functions
 * \ingroup IfxLld_Dre_Std
 * \defgroup IfxLld_Dre_Std_Data_Structures_Group_1 Data_Structures_Group_1
 * \ingroup IfxLld_Dre_Std
 * \defgroup IfxLld_Dre_Std_Data_Structures_Group_2 Data_Structures_Group_2
 * \ingroup IfxLld_Dre_Std
 */

#ifndef IFXDRE_H
#define IFXDRE_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "_Impl/IfxDre_cfg.h"
#include "Cpu/Std/IfxCpu_Intrinsics.h"
#include "Src/Std/IfxSrc.h"
#include "Clock/Std/IfxClock.h"
#include "Can/Std/IfxCan.h"
#include "Geth/Std/IfxGeth.h"
#include "Leth/Std/IfxLeth.h"

/******************************************************************************/
/*--------------------------------Enumerations--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Dre_Std_Enumerations
 * \{ */
/** \brief CAD CAN Index. Refer to Figure: CAN Address Database RAM structure
 */
typedef enum
{
    IfxDre_CAD_Index_0  = 0,   /**< \brief Index of CAN0 element in CAD */
    IfxDre_CAD_Index_1  = 1,   /**< \brief Index of CAN1 element in CAD */
    IfxDre_CAD_Index_2  = 2,   /**< \brief Index of CAN2 element in CAD */
    IfxDre_CAD_Index_3  = 3,   /**< \brief Index of CAN3 element in CAD */
    IfxDre_CAD_Index_4  = 4,   /**< \brief Index of CAN4 element in CAD */
    IfxDre_CAD_Index_5  = 5,   /**< \brief Index of CAN5 element in CAD */
    IfxDre_CAD_Index_6  = 6,   /**< \brief Index of CAN6 element in CAD */
    IfxDre_CAD_Index_7  = 7,   /**< \brief Index of CAN7 element in CAD */
    IfxDre_CAD_Index_8  = 8,   /**< \brief Index of CAN8 element in CAD */
    IfxDre_CAD_Index_9  = 9,   /**< \brief Index of CAN9 element in CAD */
    IfxDre_CAD_Index_10 = 10,  /**< \brief Index of CAN10 element in CAD */
    IfxDre_CAD_Index_11 = 11,  /**< \brief Index of CAN11 element in CAD */
    IfxDre_CAD_Index_12 = 12,  /**< \brief Index of CAN12 element in CAD */
    IfxDre_CAD_Index_13 = 13,  /**< \brief Index of CAN13 element in CAD */
    IfxDre_CAD_Index_14 = 14,  /**< \brief Index of CAN14 element in CAD */
    IfxDre_CAD_Index_15 = 15,  /**< \brief Index of CAN15 element in CAD */
    IfxDre_CAD_Index_16 = 16,  /**< \brief Index of CAN16 element in CAD */
    IfxDre_CAD_Index_17 = 17,  /**< \brief Index of CAN17 element in CAD */
    IfxDre_CAD_Index_18 = 18,  /**< \brief Index of CAN18 element in CAD */
    IfxDre_CAD_Index_19 = 19   /**< \brief Index of CAN19 element in CAD */
} IfxDre_CAD_Index;

/** \brief Can Interface Index
 */
typedef enum
{
    IfxDre_CanIndex_Can0_Node0 = 0,  /**< \brief Node 0 of MCMCAN0 */
    IfxDre_CanIndex_Can0_Node1,      /**< \brief Node 1 of MCMCAN0 */
    IfxDre_CanIndex_Can0_Node2,      /**< \brief Node 2 of MCMCAN0 */
    IfxDre_CanIndex_Can0_Node3,      /**< \brief Node 3 of MCMCAN0 */
    IfxDre_CanIndex_Can1_Node0,      /**< \brief Node 0 of MCMCAN1 */
    IfxDre_CanIndex_Can1_Node1,      /**< \brief Node 1 of MCMCAN1 */
    IfxDre_CanIndex_Can1_Node2,      /**< \brief Node 2 of MCMCAN1 */
    IfxDre_CanIndex_Can1_Node3,      /**< \brief Node 3 of MCMCAN1 */
    IfxDre_CanIndex_Can2_Node0,      /**< \brief Node 0 of MCMCAN2 */
    IfxDre_CanIndex_Can2_Node1,      /**< \brief Node 1 of MCMCAN2 */
    IfxDre_CanIndex_Can2_Node2,      /**< \brief Node 2 of MCMCAN2 */
    IfxDre_CanIndex_Can2_Node3,      /**< \brief Node 3 of MCMCAN2 */
    IfxDre_CanIndex_Can3_Node0,      /**< \brief Node 0 of MCMCAN3 */
    IfxDre_CanIndex_Can3_Node1,      /**< \brief Node 1 of MCMCAN3 */
    IfxDre_CanIndex_Can3_Node2,      /**< \brief Node 2 of MCMCAN3 */
    IfxDre_CanIndex_Can3_Node3,      /**< \brief Node 3 of MCMCAN3 */
    IfxDre_CanIndex_Can4_Node0,      /**< \brief Node 0 of MCMCAN4 */
    IfxDre_CanIndex_Can4_Node1,      /**< \brief Node 1 of MCMCAN4 */
    IfxDre_CanIndex_Can4_Node2,      /**< \brief Node 2 of MCMCAN4 */
    IfxDre_CanIndex_Can4_Node3       /**< \brief Node 3 of MCMCAN4 */
} IfxDre_CanIndex;

/** \brief Destination Memory Buffer Mode, refer to DMEMi_MODE.BUF
 */
typedef enum
{
    IfxDre_DMemBufferMode_single     = 0, /**< \brief Single buffer mode */
    IfxDre_DMemBufferMode_continuous = 1  /**< \brief Continuous buffer mode */
} IfxDre_DMemBufferMode;

/** \brief DRE DMEM Interrupt Line Index
 * Valid values are 0 - 7, 8 - 15 are reserved and considered as 0
 * Interrupts of 28 DMEM blocks can be mapped to any of the 8 DRE DMEM Interrupt Lines.
 * INTSIG.INTi and DMEMj_CONFIG.INP
 */
typedef enum
{
    IfxDre_DMemInterruptLine_0 = 0,  /**< \brief DMEM Interrupt Line 0 */
    IfxDre_DMemInterruptLine_1 = 1,  /**< \brief DMEM Interrupt Line 1 */
    IfxDre_DMemInterruptLine_2 = 2,  /**< \brief DMEM Interrupt Line 2 */
    IfxDre_DMemInterruptLine_3 = 3,  /**< \brief DMEM Interrupt Line 3 */
    IfxDre_DMemInterruptLine_4 = 4,  /**< \brief DMEM Interrupt Line 4 */
    IfxDre_DMemInterruptLine_5 = 5,  /**< \brief DMEM Interrupt Line 5 */
    IfxDre_DMemInterruptLine_6 = 6,  /**< \brief DMEM Interrupt Line 6 */
    IfxDre_DMemInterruptLine_7 = 7   /**< \brief DMEM Interrupt Line 7 */
} IfxDre_DMemInterruptLine;

/** \brief Type of CAN message, refer to DMEMi_CONFIG.CTYP
 */
typedef enum
{
    IfxDre_DMemMessageType_frame = 0,  /**< \brief CAN Frame */
    IfxDre_DMemMessageType_iPdu  = 1   /**< \brief CAN I-PDU */
} IfxDre_DMemMessageType;

/** \brief FDBI overflow mode, refer to DMEMi_MODE.CTYP
 */
typedef enum
{
    IfxDre_DMemOverflowMode_continue = 0,  /**< \brief Continue mode */
    IfxDre_DMemOverflowMode_overflow = 1   /**< \brief Overflow mode */
} IfxDre_DMemOverflowMode;

/** \brief DMEM Parameter Index. Refer to Figure: DMEM parameter table layout structure
 */
typedef enum
{
    IfxDre_DMemParamIndex_0  = 0,   /**< \brief Index of DMEM parameter element 0 in parameter table */
    IfxDre_DMemParamIndex_1  = 1,   /**< \brief Index of DMEM parameter element 1 in parameter table */
    IfxDre_DMemParamIndex_2  = 2,   /**< \brief Index of DMEM parameter element 2 in parameter table */
    IfxDre_DMemParamIndex_3  = 3,   /**< \brief Index of DMEM parameter element 3 in parameter table */
    IfxDre_DMemParamIndex_4  = 4,   /**< \brief Index of DMEM parameter element 4 in parameter table */
    IfxDre_DMemParamIndex_5  = 5,   /**< \brief Index of DMEM parameter element 5 in parameter table */
    IfxDre_DMemParamIndex_6  = 6,   /**< \brief Index of DMEM parameter element 6 in parameter table */
    IfxDre_DMemParamIndex_7  = 7,   /**< \brief Index of DMEM parameter element 7 in parameter table */
    IfxDre_DMemParamIndex_8  = 8,   /**< \brief Index of DMEM parameter element 8 in parameter table */
    IfxDre_DMemParamIndex_9  = 9,   /**< \brief Index of DMEM parameter element 9 in parameter table */
    IfxDre_DMemParamIndex_10 = 10,  /**< \brief Index of DMEM parameter element 10 in parameter table */
    IfxDre_DMemParamIndex_11 = 11,  /**< \brief Index of DMEM parameter element 11 in parameter table */
    IfxDre_DMemParamIndex_12 = 12,  /**< \brief Index of DMEM parameter element 12 in parameter table */
    IfxDre_DMemParamIndex_13 = 13,  /**< \brief Index of DMEM parameter element 13 in parameter table */
    IfxDre_DMemParamIndex_14 = 14,  /**< \brief Index of DMEM parameter element 14 in parameter table */
    IfxDre_DMemParamIndex_15 = 15,  /**< \brief Index of DMEM parameter element 15 in parameter table */
    IfxDre_DMemParamIndex_16 = 16,  /**< \brief Index of DMEM parameter element 16 in parameter table */
    IfxDre_DMemParamIndex_17 = 17,  /**< \brief Index of DMEM parameter element 17 in parameter table */
    IfxDre_DMemParamIndex_18 = 18,  /**< \brief Index of DMEM parameter element 18 in parameter table */
    IfxDre_DMemParamIndex_19 = 19,  /**< \brief Index of DMEM parameter element 19 in parameter table */
    IfxDre_DMemParamIndex_20 = 20,  /**< \brief Index of DMEM parameter element 20 in parameter table */
    IfxDre_DMemParamIndex_21 = 21,  /**< \brief Index of DMEM parameter element 21 in parameter table */
    IfxDre_DMemParamIndex_22 = 22,  /**< \brief Index of DMEM parameter element 22 in parameter table */
    IfxDre_DMemParamIndex_23 = 23,  /**< \brief Index of DMEM parameter element 23 in parameter table */
    IfxDre_DMemParamIndex_24 = 24,  /**< \brief Index of DMEM parameter element 24 in parameter table */
    IfxDre_DMemParamIndex_25 = 25,  /**< \brief Index of DMEM parameter element 25 in parameter table */
    IfxDre_DMemParamIndex_26 = 26,  /**< \brief Index of DMEM parameter element 26 in parameter table */
    IfxDre_DMemParamIndex_27 = 27   /**< \brief Index of DMEM parameter element 27 in parameter table */
} IfxDre_DMemParamIndex;

/** \brief Destination Memory Pdu Mode, refer to DMEMi_MODE.TYP
 */
typedef enum
{
    IfxDre_DMemPduMode_muxDisabled = 0,  /**< \brief Pdu mode is disabled */
    IfxDre_DMemPduMode_muxEnabled  = 1   /**< \brief Pdu mode is enabled */
} IfxDre_DMemPduMode;

/** \brief Destination Memory Interrupt Trigger Mode, refer to DMEMi_MODE.TRIG
 */
typedef enum
{
    IfxDre_DMemTriggerMode_index = 0,  /**< \brief Index based Interrupt trigger */
    IfxDre_DMemTriggerMode_count = 1   /**< \brief Count based Interrupt trigger */
} IfxDre_DMemTriggerMode;

/** \brief Ethernet DMA Channel. Refer to number of DMA Channels in GETH/LETH respective DMAs.
 */
typedef enum
{
    IfxDre_EthDmaChannel_0 = 0,  /**< \brief Eth DMA Channel 0 */
    IfxDre_EthDmaChannel_1,      /**< \brief Eth DMA Channel 1 */
    IfxDre_EthDmaChannel_2,      /**< \brief Eth DMA Channel 2 */
    IfxDre_EthDmaChannel_3,      /**< \brief Eth DMA Channel 3 */
    IfxDre_EthDmaChannel_4,      /**< \brief Eth DMA Channel 4 */
    IfxDre_EthDmaChannel_5,      /**< \brief Eth DMA Channel 5 */
    IfxDre_EthDmaChannel_6,      /**< \brief Eth DMA Channel 6 */
    IfxDre_EthDmaChannel_7       /**< \brief Eth DMA Channel 7 */
} IfxDre_EthDmaChannel;

/** \brief Eth Filter Mode, refer to FT_FEj_FRULE.FMODE
 */
typedef enum
{
    IfxDre_EthFilterMode_classic = 0,  /**< \brief Classic filter. Forward Filter ID1 = filter, Forward Filter ID2 = mask */
    IfxDre_EthFilterMode_dualId  = 1,  /**< \brief Dual ID filter. Forward Filter ID1 or Forward Filter ID2 used as filter and it should be exact match with one of the Forward Filter IDs */
    IfxDre_EthFilterMode_range   = 2   /**< \brief Range ID filter. Range of IDs between Forward Filter ID1 and Forward Filter ID2 are used as Filter IDs. The FWD ID must match the values between Filter ID1 and Filter ID2. */
} IfxDre_EthFilterMode;

/** \brief Ethernet Interface
 */
typedef enum
{
    IfxDre_EthInterface_GethMac0 = 0,  /**< \brief Geth Mac0 */
    IfxDre_EthInterface_GethMac1,      /**< \brief Geth Mac1 */
    IfxDre_EthInterface_LethMac0,      /**< \brief Leth Mac0 */
    IfxDre_EthInterface_LethMac1,      /**< \brief Leth Mac1 */
    IfxDre_EthInterface_LethMac2,      /**< \brief Leth Mac2 */
    IfxDre_EthInterface_LethMac3       /**< \brief Leth Mac3 */
} IfxDre_EthInterface;

/** \brief ETH DMA RP Index, refer to Resource partition configuration section in UM
 */
typedef enum
{
    IfxDre_EthRPIndex_GethMac0 = 0,  /**< \brief Geth Mac 0 */
    IfxDre_EthRPIndex_GethMac1 = 1,  /**< \brief Geth Mac 1 */
    IfxDre_EthRPIndex_LethMac0 = 2,  /**< \brief Leth Mac 0 */
    IfxDre_EthRPIndex_LethMac1 = 3,  /**< \brief Leth Mac 1 */
    IfxDre_EthRPIndex_LethMac2 = 4,  /**< \brief Leth Mac 2 */
    IfxDre_EthRPIndex_LethMac3 = 5   /**< \brief Leth Mac 3 */
} IfxDre_EthRPIndex;

/** \brief CAN Filter Mode, refer to CIDFC.MODE
 */
typedef enum
{
    IfxDre_FilterMode_classic = 0,  /**< \brief Classic filter: CAN ID1 = filter, CAN ID2 = mask */
    IfxDre_FilterMode_dualId  = 1,  /**< \brief Dual ID filter for CAN ID1 or CAN ID2 */
    IfxDre_FilterMode_range   = 2   /**< \brief Range filter from CAN ID1 to CAN ID2 (CAN ID1 is less than CAN ID2) */
} IfxDre_FilterMode;

/** \brief DRE Interrupt Line Index
 */
typedef enum
{
    IfxDre_InterruptLine_0  = 0,   /**< \brief Interrupt Line 0. DMEM Line option 0 */
    IfxDre_InterruptLine_1  = 1,   /**< \brief Interrupt Line 1. DMEM Line option 1 */
    IfxDre_InterruptLine_2  = 2,   /**< \brief Interrupt Line 2. DMEM Line option 2 */
    IfxDre_InterruptLine_3  = 3,   /**< \brief Interrupt Line 3. DMEM Line option 3 */
    IfxDre_InterruptLine_4  = 4,   /**< \brief Interrupt Line 4. DMEM Line option 4 */
    IfxDre_InterruptLine_5  = 5,   /**< \brief Interrupt Line 5. DMEM Line option 5 */
    IfxDre_InterruptLine_6  = 6,   /**< \brief Interrupt Line 6. DMEM Line option 6 */
    IfxDre_InterruptLine_7  = 7,   /**< \brief Interrupt Line 7. DMEM Line option 7 */
    IfxDre_InterruptLine_8  = 8,   /**< \brief Interrupt Line 8. CAN Input buffer list interrupts */
    IfxDre_InterruptLine_9  = 9,   /**< \brief Interrupt Line 9. CAN Output buffer list interrupts */
    IfxDre_InterruptLine_10 = 10,  /**< \brief Interrupt Line 10. EIBUF Error interrupts */
    IfxDre_InterruptLine_11 = 11,  /**< \brief Interrupt Line 11. Ethernet Frame Receive Request Interrupts */
    IfxDre_InterruptLine_12 = 12,  /**< \brief Interrupt Line 12. Routing Table error interrupts */
    IfxDre_InterruptLine_13 = 13,  /**< \brief Interrupt Line 13. ME Routing Transaction lost interrupts */
    IfxDre_InterruptLine_14 = 14,  /**< \brief Interrupt Line 14. EOBUF Error Interrupts */
    IfxDre_InterruptLine_15 = 15   /**< \brief Interrupt Line 15. EOBUF Transmit request interrupts */
} IfxDre_InterruptLine;

/** \brief Type of Routing Rule
 */
typedef enum
{
    IfxDre_RoutingType_unicast   = 0, /**< \brief Unicast Routing Rule */
    IfxDre_RoutingType_multicast = 1  /**< \brief Multicast Routing Rule */
} IfxDre_RoutingType;

/** \brief Stream Filter Mode, refer to SIDF_FC.MODE
 */
typedef enum
{
    IfxDre_StreamFilterMode_classic = 0,  /**< \brief Classic filter: Stream Filter 1 = filter, Stream Filter 2 = mask */
    IfxDre_StreamFilterMode_range   = 1   /**< \brief Range Filter from Stream Filter 1 to Stream Filter 2 */
} IfxDre_StreamFilterMode;

/** \brief Transmit Trigger Mode, refer to EOBUF.CONFIG.TTM
 */
typedef enum
{
    IfxDre_TriggerMode_software        = 0,  /**< \brief Software Trigger */
    IfxDre_TriggerMode_frameCount      = 1,  /**< \brief Configured number of CAN frames */
    IfxDre_TriggerMode_bufferFillLevel = 2,  /**< \brief Fill size of the EOBUF */
    IfxDre_TriggerMode_timeTriggered   = 3   /**< \brief Time Triggered Transmit Mode */
} IfxDre_TriggerMode;

/** \} */

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Dre_Std_Data_Structures_Group_1
 * \{ */
/** \brief Configuration for Timed Trigger Transmit of Ethernet Fames. Refer to EOBUF0/1.TTC.TP and EOBUF0/1.TTS.B.TRV
 */
typedef struct
{
    uint8  timerPrescalar;         /**< \brief prescalar for timer */
    uint16 timerReloadValue;       /**< \brief reload value for timer */
} IfxDre_TimerConfig;

/** \} */

/** \addtogroup IfxLld_Dre_Std_Data_Structures_Group_1
 * \{ */
/** \brief PROT and APU configuration
 */
typedef struct
{
    IfxApProt_ProtConfig proteConfig;                                  /**< \brief PROTE configuration */
    IfxApProt_ProtConfig protseConfig;                                 /**< \brief PROTSE Configuration */
    IfxApApu_ApuConfig   apuConfig;                                    /**< \brief APU Configurations */
    IfxApApu_ApuConfig   ethApuConfig[IFXDRE_NUM_EIBUF_BUFFERS];       /**< \brief ETH APU Configurations */
} IfxDre_ApConfig;

/** \} */

/** \addtogroup IfxLld_Dre_Std_Data_Structures_Group_2
 * \{ */
/** \brief Ethernet descriptor list status. Refer to EDLSTAT
 */
typedef struct
{
    uint8 txCount;       /**< \brief Transmit and forward count */
    uint8 rxCount;       /**< \brief Receive count */
} IfxDre_EdlStatus;

/** \brief Ethernet requests summary. Refer to EREQ
 */
typedef struct
{
    boolean tx0 : 1;                   /**< \brief Tx request from EOBUF 0 */
    boolean tx1 : 1;                   /**< \brief Tx request from EOBUF 1 */
    boolean tx2 : 1;                   /**< \brief Tx request from EOBUF 2 */
    boolean tx3 : 1;                   /**< \brief Tx request from EOBUF 3 */
    boolean tx4 : 1;                   /**< \brief Tx request from EOBUF 4 */
    boolean tx5 : 1;                   /**< \brief Tx request from EOBUF 5 */
    boolean fwd0 : 1;                  /**< \brief Forward request from EIBUF 0 */
    boolean fwd1 : 1;                  /**< \brief Forward request from EIBUF 1 */
    boolean fwd2 : 1;                  /**< \brief Forward request from EIBUF 2 */
    boolean fwd3 : 1;                  /**< \brief Forward request from EIBUF 3 */
    boolean fwd4 : 1;                  /**< \brief Forward request from EIBUF 4 */
    boolean fwd5 : 1;                  /**< \brief Forward request from EIBUF 5 */
    uint8   currentBufferIndex0;       /**< \brief Indicates the buffer index that is currently being processed */
    uint8   currentBufferIndex1;       /**< \brief Indicates the buffer index that is currently being processed */
    uint8   currentBufferIndex2;       /**< \brief Indicates the buffer index that is currently being processed */
    uint8   currentBufferIndex3;       /**< \brief Indicates the buffer index that is currently being processed */
    uint8   currentBufferIndex4;       /**< \brief Indicates the buffer index that is currently being processed */
    uint8   currentBufferIndex5;       /**< \brief Indicates the buffer index that is currently being processed */
} IfxDre_ErsStatus;

/** \brief Configuration Structure of Ethernet Input Buffer
 */
typedef struct
{
    uint8   ntscfStartAddress;             /**< \brief 32 bit aligned Offset address from EIBUF_SA.ADR at which the NTSCF header starts. Refer to EIBUF_CONFIG.NTSCF_SA. Provide offset address, driver will configure bits [7:2] of the address to NTSCF_SA */
    boolean enableRejectRemoteFrame;       /**< \brief enable(1)/disable(0) remote frame rejection */
} IfxDre_EthernetInputBufConfig;

/** \brief Flags to store EIBUF status
 */
typedef struct
{
    boolean bufferPendingRequest;          /**< \brief status flag for BPR */
    boolean ethernetFrameError;            /**< \brief status flag for FE */
    boolean invalidFrameType;              /**< \brief status flag for IFT */
    boolean invalidDestinationId;          /**< \brief status flag for IDID */
    boolean avtpLengthMismatchError;       /**< \brief status flag for LME */
    boolean canFormatError;                /**< \brief status flag for CFE */
    boolean remoteFrameError;              /**< \brief status flag for RFE */
    boolean ethernetFrameComplete;         /**< \brief status flag for FC */
    boolean ethernetReceiveRequest;        /**< \brief status flag for RXREQ */
} IfxDre_EthernetInputBufStatus;

/** \brief Configuration Structure of Ethernet Output Buffer
 */
typedef struct
{
    uint16               payloadLength;                /**< \brief ACF Payload Length in bytes. 0:Buffer is disabled, Min:8 bytes, Max:1484 bytes, must also be multiple of 32-bit. (Refer EOBUF_CONFIG.PL), (Value 4 is also considered as 8 bytes (min), Values > 1484 considered as 1484 bytes (max)) */
    IfxCan_DestinationId destinationId;                /**< \brief Only Ethernet IDs to be used. IfxCan_DestinationId_Ethernetx, x=1 to max index of EOBUFx. */
    boolean              headerEnable;                 /**< \brief Enable(1)/Disable(0) Ethernet Header Insertion */
    IfxDre_TriggerMode   triggerMode;                  /**< \brief Ethernet Frame Transmit Trigger Mode */
    uint16               macDestinationAddress0;       /**< \brief 16 bit Destination Address 0. Refer H0 */
    uint32               macDestinationAddress1;       /**< \brief 32 bit Destination Address 1. Refer H1 */
    uint32               macSourceAddress0;            /**< \brief 32 bit Source Address 0. Refer H2 */
    uint16               macSourceAddress1;            /**< \brief 16 bit Source Address 1. Refer H3 */
    uint16               tpId;                         /**< \brief 16 bit Tagged Protocol Identifier. It is configured to a value of 8100h for tagged ethernet frames, as required by IEEE Std. 802.1Q */
    uint16               vlanTag;                      /**< \brief 16 bit VLAN Tag. The VLAT tag contains PCP (3 bits), DEI (1 bit) & VID (12 bits). */
    uint16               avtpEtherType;                /**< \brief 16 bit AVTP EtherType, 0x22F0 for AVTP Frames */
    boolean              isStreamIdValid;              /**< \brief sets the validity of Stream ID field */
    uint8                ntscfSequenceNumber;          /**< \brief NTSCF Header Sequence Number */
    uint32               streamIdLower;                /**< \brief Lower 32-bits of 64-bit Stream ID */
    uint32               streamIdHigher;               /**< \brief Higher 32-bits of 64-bit Stream ID */
    uint16               bufferThreshold;              /**< \brief Threshold size of the EOBUF ACF Payload, when Trigger Mode = IfxDre_TriggerMode_bufferFillLevel */
    uint8                triggerFillLevel;             /**< \brief Threshold for number of CAN frames in an EOBUF for transmit trigger condition, when Trigger Mode = IfxDre_TriggerMode_frameCount */
    IfxDre_TimerConfig   timer;                        /**< \brief Timer Trigger Configuration */
} IfxDre_EthernetOutputBufConfig;

/** \brief Interrupt configuration
 */
typedef struct
{
    boolean      enable;              /**< \brief Set as TRUE to configure the Interrupt Node */
    Ifx_Priority priority;            /**< \brief Priority of the interrupt */
    IfxSrc_Tos   typeOfService;       /**< \brief Type of Service */
    IfxSrc_VmId  vmId;                /**< \brief Virtual Machine Number */
} IfxDre_InterruptConfig;

/** \brief EIBUF Error Interrupt Status (Interrupt Line 10)
 */
typedef struct
{
    uint32 EIBUF0_CFE : 1;           /**< \brief EIBUF0 CAN Format Error Status */
    uint32 EIBUF0_RFE : 1;           /**< \brief EIBUF0 Remote Format Error Status */
    uint32 EIBUF0_FE : 1;            /**< \brief EIBUF0 Input Ethernet Frame Error Status */
    uint32 EIBUF0_IDID : 1;          /**< \brief EIBUF0 Invalid destination ID Status */
    uint32 EIBUF0_WDTE : 1;          /**< \brief EIBUF0 Ethernet Watchdog Timeout Error Status */
    uint32 EIBUF0_RDESE : 1;         /**< \brief EIBUF0 Rx Descriptor Error Status */
    uint32 EIBUF0_BF : 1;            /**< \brief EIBUF0 Buffer full Error Status */
    uint32 EIBUF0_DERRTYP : 3;       /**< \brief EIBUF0 Descriptor error type */
    uint32 EIBUF1_CFE : 1;           /**< \brief EIBUF1 CAN Format Error Status */
    uint32 EIBUF1_RFE : 1;           /**< \brief EIBUF1 Remote Format Error Status */
    uint32 EIBUF1_FE : 1;            /**< \brief EIBUF1 Input Ethernet Frame Error Status */
    uint32 EIBUF1_IDID : 1;          /**< \brief EIBUF1 Invalid destination ID Status */
    uint32 EIBUF1_WDTE : 1;          /**< \brief EIBUF1 Ethernet Watchdog Timeout Error Status */
    uint32 EIBUF1_RDESE : 1;         /**< \brief EIBUF1 Rx Descriptor Error Status */
    uint32 EIBUF1_BF : 1;            /**< \brief EIBUF1 Buffer full Error Status */
    uint32 EIBUF1_DERRTYP : 3;       /**< \brief EIBUF1 Descriptor error type */
    uint32 EIBUF2_CFE : 1;           /**< \brief EIBUF2 CAN Format Error Status */
    uint32 EIBUF2_RFE : 1;           /**< \brief EIBUF2 Remote Format Error Status */
    uint32 EIBUF2_FE : 1;            /**< \brief EIBUF2 Input Ethernet Frame Error Status */
    uint32 EIBUF2_IDID : 1;          /**< \brief EIBUF2 Invalid destination ID Status */
    uint32 EIBUF2_WDTE : 1;          /**< \brief EIBUF2 Ethernet Watchdog Timeout Error Status */
    uint32 EIBUF2_RDESE : 1;         /**< \brief EIBUF2 Rx Descriptor Error Status */
    uint32 EIBUF2_BF : 1;            /**< \brief EIBUF2 Buffer full Error Status */
    uint32 EIBUF2_DERRTYP : 3;       /**< \brief EIBUF2 Descriptor error type */
    uint32 EIBUF3_CFE : 1;           /**< \brief EIBUF3 CAN Format Error Status */
    uint32 EIBUF3_RFE : 1;           /**< \brief EIBUF3 Remote Format Error Status */
    uint32 EIBUF3_FE : 1;            /**< \brief EIBUF3 Input Ethernet Frame Error Status */
    uint32 EIBUF3_IDID : 1;          /**< \brief EIBUF3 Invalid destination ID Status */
    uint32 EIBUF3_WDTE : 1;          /**< \brief EIBUF3 Ethernet Watchdog Timeout Error Status */
    uint32 EIBUF3_RDESE : 1;         /**< \brief EIBUF3 Rx Descriptor Error Status */
    uint32 EIBUF3_BF : 1;            /**< \brief EIBUF3 Buffer full Error Status */
    uint32 EIBUF3_DERRTYP : 3;       /**< \brief EIBUF3 Descriptor error type */
    uint32 EIBUF4_CFE : 1;           /**< \brief EIBUF4 CAN Format Error Status */
    uint32 EIBUF4_RFE : 1;           /**< \brief EIBUF4 Remote Format Error Status */
    uint32 EIBUF4_FE : 1;            /**< \brief EIBUF4 Input Ethernet Frame Error Status */
    uint32 EIBUF4_IDID : 1;          /**< \brief EIBUF4 Invalid destination ID Status */
    uint32 EIBUF4_WDTE : 1;          /**< \brief EIBUF4 Ethernet Watchdog Timeout Error Status */
    uint32 EIBUF4_RDESE : 1;         /**< \brief EIBUF4 Rx Descriptor Error Status */
    uint32 EIBUF4_BF : 1;            /**< \brief EIBUF4 Buffer full Error Status */
    uint32 EIBUF4_DERRTYP : 3;       /**< \brief EIBUF4 Descriptor error type */
    uint32 EIBUF5_CFE : 1;           /**< \brief EIBUF5 CAN Format Error Status */
    uint32 EIBUF5_RFE : 1;           /**< \brief EIBUF5 Remote Format Error Status */
    uint32 EIBUF5_FE : 1;            /**< \brief EIBUF5 Input Ethernet Frame Error Status */
    uint32 EIBUF5_IDID : 1;          /**< \brief EIBUF5 Invalid destination ID Status */
    uint32 EIBUF5_WDTE : 1;          /**< \brief EIBUF5 Ethernet Watchdog Timeout Error Status */
    uint32 EIBUF5_RDESE : 1;         /**< \brief EIBUF5 Rx Descriptor Error Status */
    uint32 EIBUF5_BF : 1;            /**< \brief EIBUF5 Buffer full Error Status */
    uint32 EIBUF5_DERRTYP : 3;       /**< \brief EIBUF5 Descriptor error type */
} IfxDre_Interrupt_Line10_Status;

/** \brief Ethernet Frame Receive Request Interrupt Status (Interrupt Line 11)
 */
typedef struct
{
    uint32 EIBUF0_RXREQ : 1;       /**< \brief EIBUF0 Ethernet receive request */
    uint32 EIBUF1_RXREQ : 1;       /**< \brief EIBUF1 Ethernet receive request */
    uint32 EIBUF2_RXREQ : 1;       /**< \brief EIBUF2 Ethernet receive request */
    uint32 EIBUF3_RXREQ : 1;       /**< \brief EIBUF3 Ethernet receive request */
    uint32 EIBUF4_RXREQ : 1;       /**< \brief EIBUF4 Ethernet receive request */
    uint32 EIBUF5_RXREQ : 1;       /**< \brief EIBUF5 Ethernet receive request */
} IfxDre_Interrupt_Line11_Status;

/** \brief Routing Table Error Interrupt Status (Interrupt Line 12)
 */
typedef struct
{
    uint32 RS_IRT : 1;        /**< \brief In-Valid Routing Table Status */
    uint32 RS_NMFE : 1;       /**< \brief Non-Matching Filter Element Error Status */
} IfxDre_Interrupt_Line12_Status;

/** \brief ME Routing Transaction Lost interrupt Status (Interrupt Line 13)
 */
typedef struct
{
    uint32  SPBBE : 1;       /**< \brief SPB Bus Transaction Error Status */
    uint32  SRIBE : 1;       /**< \brief SRI Bus Error Status */
    uint32  DBOE : 1;        /**< \brief Destination Buffer Overflow Error Status */
    uint32  IRDE : 1;        /**< \brief Invalid Routing Destination Error Status */
    uint32  FEC : 3;         /**< \brief First Error Code */
    uint8   FESID;           /**< \brief First Error Source ID */
    uint8   FEDID;           /**< \brief First Error Destination ID */
    boolean FEDIR;           /**< \brief First Error Direction */
} IfxDre_Interrupt_Line13_Status;

/** \brief EOBUF Frame Error Interrupt Status (Interrupt Line 14)
 */
typedef struct
{
    uint32 EOBUF0_BF : 1;            /**< \brief EOBUF0 Buffer Full */
    uint32 EOBUF0_WDTE : 1;          /**< \brief EOBUF0 Ethernet watchdog timeout error */
    uint32 EOBUF0_TDESE : 1;         /**< \brief EOBUF0 Tx descriptor error */
    uint32 EOBUF0_DERRTYP : 3;       /**< \brief EIBUF0 Descriptor error type */
    uint32 EOBUF1_BF : 1;            /**< \brief EOBUF1 Buffer Full */
    uint32 EOBUF1_WDTE : 1;          /**< \brief EOBUF1 Ethernet watchdog timeout error */
    uint32 EOBUF1_TDESE : 1;         /**< \brief EOBUF1 Tx descriptor error */
    uint32 EOBUF1_DERRTYP : 3;       /**< \brief EIBUF1 Descriptor error type */
    uint32 EOBUF2_BF : 1;            /**< \brief EOBUF2 Buffer Full */
    uint32 EOBUF2_WDTE : 1;          /**< \brief EOBUF2 Ethernet watchdog timeout error */
    uint32 EOBUF2_TDESE : 1;         /**< \brief EOBUF2 Tx descriptor error */
    uint32 EOBUF2_DERRTYP : 3;       /**< \brief EIBUF2 Descriptor error type */
    uint32 EOBUF3_BF : 1;            /**< \brief EOBUF3 Buffer Full */
    uint32 EOBUF3_WDTE : 1;          /**< \brief EOBUF3 Ethernet watchdog timeout error */
    uint32 EOBUF3_TDESE : 1;         /**< \brief EOBUF3 Tx descriptor error */
    uint32 EOBUF3_DERRTYP : 3;       /**< \brief EIBUF3 Descriptor error type */
    uint32 EOBUF4_BF : 1;            /**< \brief EOBUF4 Buffer Full */
    uint32 EOBUF4_WDTE : 1;          /**< \brief EOBUF4 Ethernet watchdog timeout error */
    uint32 EOBUF4_TDESE : 1;         /**< \brief EOBUF4 Tx descriptor error */
    uint32 EOBUF4_DERRTYP : 3;       /**< \brief EIBUF4 Descriptor error type */
    uint32 EOBUF5_BF : 1;            /**< \brief EOBUF5 Buffer Full */
    uint32 EOBUF5_WDTE : 1;          /**< \brief EOBUF5 Ethernet watchdog timeout error */
    uint32 EOBUF5_TDESE : 1;         /**< \brief EOBUF5 Tx descriptor error */
    uint32 EOBUF5_DERRTYP : 3;       /**< \brief EIBUF5 Descriptor error type */
} IfxDre_Interrupt_Line14_Status;

/** \brief EOBUF Transmit Request Interrupt Status (Interrupt Line 15)
 */
typedef struct
{
    uint32 EOBUF0_TXREQ : 1;       /**< \brief EOBUF0 Ethernet transmit request */
    uint32 EOBUF1_TXREQ : 1;       /**< \brief EOBUF1 Ethernet transmit request */
    uint32 EOBUF2_TXREQ : 1;       /**< \brief EOBUF2 Ethernet transmit request */
    uint32 EOBUF3_TXREQ : 1;       /**< \brief EOBUF3 Ethernet transmit request */
    uint32 EOBUF4_TXREQ : 1;       /**< \brief EOBUF4 Ethernet transmit request */
    uint32 EOBUF5_TXREQ : 1;       /**< \brief EOBUF5 Ethernet transmit request */
} IfxDre_Interrupt_Line15_Status;

/** \brief CAN Input Buffer List Interrupt Status (Interrupt Line 8)
 */
typedef struct
{
    uint32 CIBL_BF : 1;         /**< \brief CIBL Buffer Full Status */
    uint32 CIBL_CRCE : 1;       /**< \brief CIBL CRC error Status */
    uint32 CIBL_WDTE : 1;       /**< \brief CIBL Watchdog timeout error Status */
} IfxDre_Interrupt_Line8_Status;

/** \brief CAN Output Buffer List Interrupt Status (Interrupt Line 9)
 */
typedef struct
{
    uint32 COBL_BF : 1;         /**< \brief COBL Buffer Full Status */
    uint32 COBL_WDTE : 1;       /**< \brief COBL Watchdog timeout error Status */
} IfxDre_Interrupt_Line9_Status;

/** \brief Configuration Structure for Destination Memory
 */
typedef struct
{
    boolean                  enable;                       /**< \brief configure the corresponding memory element if set */
    uint8                    resourcePartitionIndex;       /**< \brief The RP allocated to memory destination */
    boolean                  addressIncrement;             /**< \brief specifies whether the address is incremented or decremented with the specified offset size */
    boolean                  appendStatus;                 /**< \brief enables/disables the append of status along with the CAN message at the destination */
    boolean                  appendTiming;                 /**< \brief enables/disables the append of timing header along with the CAN message at the destination */
    IfxDre_DMemInterruptLine interruptNodePointer;         /**< \brief interrupt line to be triggered in case of a Watermark or Address Wraparound event */
    uint8                    offsetAddress;                /**< \brief 64 bit aligned offset address by which the destination address is incremented or decremented after every routing operation to the destination memory. Valid values are 32 (0x20) bytes for Classical CAN frames and 82 (0x58) bytes for CAN FD frames */
    IfxDre_DMemPduMode       pduMode;                      /**< \brief Destination Memory Pdu Mode */
    IfxDre_DMemTriggerMode   triggerMode;                  /**< \brief Destination Memory Trigger Mode */
    IfxDre_DMemBufferMode    bufferMode;                   /**< \brief Destination Memory Buffer Mode */
    IfxDre_DMemMessageType   messageType;                  /**< \brief Type of CAN message */
    IfxDre_DMemOverflowMode  overflowMode;                 /**< \brief Type of CAN message */
} IfxDre_MemoryConfig;

/** \brief Routing Table Configurations. Refer to RT[i].SA and RT[i].CONFIG.
 */
typedef struct
{
    uint8 size;       /**< \brief Number of Routing Rules (0-128), 0:Disabled, 128: Max */
} IfxDre_RoutingTableConfig;

/** \brief Configuration Structure for Stream ID Filter
 */
typedef struct
{
    boolean                 enable;                  /**< \brief enable/disable the filter */
    IfxDre_StreamFilterMode mode;                    /**< \brief Stream ID Filter Mode */
    uint8                   routingTableIndex;       /**< \brief Index of the Routing Table to be used by CAN Transmit Routing Engine */
    uint32                  filter1LowerId;          /**< \brief Lower 32 bit of Stream ID Filter 1 */
    uint32                  filter1HigherId;         /**< \brief Higher 32 bit of Stream ID Filter 1 */
    uint32                  filter2LowerId;          /**< \brief Lower 32 bit of Stream ID Filter 2 */
    uint32                  filter2HigherId;         /**< \brief Higher 32 bit of Stream ID Filter 2 */
} IfxDre_StreamIdConfig;

/** \brief Watchdog configuration
 */
typedef struct
{
    boolean enable;                /**< \brief 1:Enables / 0:Disables watchdog */
    boolean interruptEnable;       /**< \brief 1:Enables / 0:Disables the generation of interrupt when there is a timeout */
    uint16  timeoutValue;          /**< \brief timeout prescaler of the fSRI clock */
} IfxDre_WatchDogConfig;

/** \} */

/** \addtogroup IfxLld_Dre_Std_Data_Structures
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Returns the status of module (enabled or disabled)
 * \param dre Specifies the pointer to the DRE registers
 * \return Status TRUE: Enabled / FALSE: Disabled
 */
IFX_INLINE boolean IfxDre_isModuleEnabled(Ifx_DRE *dre);

/** \} */

/** \addtogroup IfxLld_Dre_Std_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Resets DRE kernel
 * \param dre Specifies the pointer to the DRE registers
 * \return None
 */
IFX_EXTERN void IfxDre_resetModule(Ifx_DRE *dre);

/** \brief Disables the module (sets the disable request)
 * \param dre Specifies the pointer to the DRE registers
 * \return None
 */
IFX_EXTERN void IfxDre_disableModule(Ifx_DRE *dre);

/** \brief Enables the module (clears the disable request)
 * \param dre Specifies the pointer to the DRE registers
 * \return None
 */
IFX_EXTERN void IfxDre_enableModule(Ifx_DRE *dre);

/** \brief Gets the various flags of EIBUF_STATUS register
 * \param dre Specifies the pointer to the DRE registers
 * \param bufferIndex Index of Ethernet Input Buffer (Range: 0 to (n-1), n = number of buffers)
 * \param status Specifies the pointer to the software flags
 * \return None
 */
IFX_EXTERN void IfxDre_getEibufStatusFlags(Ifx_DRE *dre, uint8 bufferIndex, IfxDre_EthernetInputBufStatus *status);

/** \brief Sets the Ethernet receive request in EIBUF_STATUS register.
 * \param dre Specifies the pointer to the DRE registers
 * \param bufferIndex Index of Ethernet Input Buffer (Range: 0 to (n-1), n = number of buffers)
 * \return None
 */
IFX_EXTERN void IfxDre_setEibufNewEthernetFrameRequest(Ifx_DRE *dre, uint8 bufferIndex);

/** \brief Clear the EIBUF Buffer Pending Request Flag
 * \param dre Specifies the pointer to the DRE registers
 * \param bufferIndex index of EIBUF (Range: 0 to (n-1), n = number of buffers)
 * \return None
 */
IFX_EXTERN void IfxDre_clearBufferPendingRequest(Ifx_DRE *dre, uint8 bufferIndex);

/** \brief Gets the status of corresponding Ethernet Input Buffer's Buffer Pending Request
 * \param dre Specifies the pointer to the DRE registers
 * \param bufferIndex index of EIBUF (Range: 0 to (n-1), n = number of buffers)
 * \return status of Buffer Pending Request (1 means pending), cleared by H/w
 */
IFX_EXTERN boolean IfxDre_getEibufPendingRequest(Ifx_DRE *dre, uint8 bufferIndex);

/** \brief Initialize the PROTs and APU with default configuration
 * \param config Configuration pointer for the Access Protection
 * \return None
 */
IFX_EXTERN void IfxDre_initApConfig(IfxDre_ApConfig *config);

/** \brief Initialize the PORTs and APU register set
 * \param dre DRE module pointer
 * \param config Configuration pointer to the AP Config structure
 * \return None
 */
IFX_EXTERN void IfxDre_initAp(Ifx_DRE *dre, IfxDre_ApConfig *config);

/** \brief Enable or Disable the DRE Interrupt Enable Bits
 * \param dre DRE module pointer
 * \param enable TRUE: Enable the Interrupt Line. FALSE: Disable the Interrupt Line.
 * \param index Interrupt Line Index
 * \return None
 */
IFX_EXTERN void IfxDre_setInterruptEnable(Ifx_DRE *dre, boolean enable, IfxDre_InterruptLine index);

/** \brief Returns the DRE Interrupt Line status
 * \param dre DRE module pointer
 * \param index Interrupt Line Index
 * \return interrupt flag status
 */
IFX_EXTERN boolean IfxDre_getInterruptLineStatusFlag(Ifx_DRE *dre, IfxDre_InterruptLine index);

/** \brief Returns the DMEM Water Mark Flag Status
 * \param dre DRE module pointer
 * \param index DMEM Index
 * \return Water Mark Flag Status
 */
IFX_EXTERN boolean IfxDre_getDMemWaterMarkFlag(Ifx_DRE *dre, uint8 index);

/** \brief Returns the DMEM Warp Around Flag Status
 * \param dre DRE module pointer
 * \param index DMEM Index
 * \return Warp Around Flag Status
 */
IFX_EXTERN boolean IfxDre_getDMemWrapAroundFlag(Ifx_DRE *dre, uint8 index);

/** \brief Clears the DMEM Water Mark Flag Status
 * \param dre DRE module pointer
 * \param index DMEM Index
 * \return None
 */
IFX_EXTERN void IfxDre_clearDMemWaterMarkFlag(Ifx_DRE *dre, uint8 index);

/** \brief Clears the DMEM Wrap Around Flag Status
 * \param dre DRE module pointer
 * \param index DMEM Index
 * \return None
 */
IFX_EXTERN void IfxDre_clearDMemWrapAroundFlag(Ifx_DRE *dre, uint8 index);

/** \brief Returns the status of Buffer Full Flag in CAN Input Buffer List Status register
 * \param dre DRE module pointer
 * \return Buffer Full Flag Status
 */
IFX_EXTERN boolean IfxDre_get_CIBL_Status_BufferFullFlag(Ifx_DRE *dre);

/** \brief Returns the status of Buffer Full Flag in CAN Output Buffer List Status register
 * \param dre DRE module pointer
 * \return Buffer Full Flag Status
 */
IFX_EXTERN boolean IfxDre_get_COBL_Status_BufferFullFlag(Ifx_DRE *dre);

/** \brief Returns the status of Ethernet Frame Error Flag in Ethernet Input Buffer Status register
 * \param dre DRE module pointer
 * \param index EIBUF index
 * \return Frame Error Flag Status
 */
IFX_EXTERN boolean IfxDre_get_EIBUF_Status_EthernetFrameErrorFlag(Ifx_DRE *dre, uint8 index);

/** \brief Clears the status of Ethernet Frame Error Flag in Ethernet Input Buffer Status register
 * \param dre DRE module pointer
 * \param index EIBUF index
 * \return None
 */
IFX_EXTERN void IfxDre_clear_EIBUF_Status_EthernetFrameErrorFlag(Ifx_DRE *dre, uint8 index);

/** \brief Returns the status of Transmit Request Flag in Ethernet Output Buffer Status register
 * \param dre DRE module pointer
 * \param index EOBUF index
 * \return TXREQ Flag Status
 */
IFX_EXTERN boolean IfxDre_get_EOBUF_Status_TxRequestFlag(Ifx_DRE *dre, uint8 index);

/** \brief Clears the status of Transmit Request Flag in Ethernet Output Buffer Status register
 * \param dre DRE module pointer
 * \param index EOBUF index
 * \return None
 */
IFX_EXTERN void IfxDre_clear_EOBUF_Status_TxRequestFlag(Ifx_DRE *dre, uint8 index);

/** \brief Returns the status of Frame Complete Flag in Ethernet Input Buffer Status register
 * \param dre DRE module pointer
 * \param index EIBUF index
 * \return FC Flag Status
 */
IFX_EXTERN boolean IfxDre_get_EIBUF_Status_EthernetFrameCompleteFlag(Ifx_DRE *dre, uint8 index);

/** \brief Clears the status of Frame Complete Flag in Ethernet Input Buffer Status register
 * \param dre DRE module pointer
 * \param index EOBUF index
 * \return None
 */
IFX_EXTERN void IfxDre_clear_EIBUF_Status_EthernetFrameCompleteFlag(Ifx_DRE *dre, uint8 index);

/** \brief Gets and Clears the Flags linked to Interrupt Line 8
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 8 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine8Status(Ifx_DRE *dre, IfxDre_Interrupt_Line8_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 9
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 9 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine9Status(Ifx_DRE *dre, IfxDre_Interrupt_Line9_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 10
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 10 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine10Status(Ifx_DRE *dre, IfxDre_Interrupt_Line10_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 11
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 11 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine11Status(Ifx_DRE *dre, IfxDre_Interrupt_Line11_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 12
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 12 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine12Status(Ifx_DRE *dre, IfxDre_Interrupt_Line12_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 13
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 13 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine13Status(Ifx_DRE *dre, IfxDre_Interrupt_Line13_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 14
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 14 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine14Status(Ifx_DRE *dre, IfxDre_Interrupt_Line14_Status *status);

/** \brief Gets and Clears the Flags linked to Interrupt Line 15
 * \param dre DRE module pointer
 * \param status pointer to structure containing interrupt line 15 flags
 * \return None
 */
IFX_EXTERN void IfxDre_getAndClearInterruptLine15Status(Ifx_DRE *dre, IfxDre_Interrupt_Line15_Status *status);

/** \brief Returns the SRC pointer for corresponding line
 * \param index index of interrupt line
 * \return address of SRC register
 */
IFX_EXTERN volatile Ifx_SRC_SRCR *IfxDre_getSrcAddress(IfxDre_InterruptLine index);

/** \brief Clears Tx Count in Ethernet descriptor list status
 * \param dre DRE module pointer
 * \return None
 */
IFX_EXTERN void IfxDre_resetEthTxCount(Ifx_DRE *dre);

/** \brief Clears Rx Count in Ethernet descriptor list status
 * \param dre DRE module pointer
 * \return None
 */
IFX_EXTERN void IfxDre_resetEthRxCount(Ifx_DRE *dre);

/** \brief Get Ethernet descriptor list status
 * \param dre DRE module pointer
 * \param status pointer to store status
 * \return None
 */
IFX_EXTERN void IfxDre_getEthDescListStatus(Ifx_DRE *dre, IfxDre_EdlStatus *status);

/** \brief Clears Tx Requests in Ethernet requests summary. Refer to EREQ.
 * \param dre DRE module pointer
 * \param value clear logic. Set the respective bit to 1 to clear. Setting Bit[n] in value clears TXn_REQ in Ifx_DRE_EREQ register. Multiple available bits can be configured to 1.
 * \return None
 */
IFX_EXTERN void IfxDre_clearEthTxSummary(Ifx_DRE *dre, uint8 value);

/** \brief Clears Forward Requests in Ethernet requests summary. Refer to EREQ.
 * \param dre DRE module pointer
 * \param value clear logic. Set the respective bit to 1 to clear. Setting Bit[n] in value clears FWDn_REQ in Ifx_DRE_EREQ register. Multiple available bits can be configured to 1.
 * \return None
 */
IFX_EXTERN void IfxDre_clearEthFwdSummary(Ifx_DRE *dre, uint8 value);

/** \brief Get Ethernet request summary status
 * \param dre DRE module pointer
 * \param status pointer to store status
 * \return None
 */
IFX_EXTERN void IfxDre_getEthReqSummary(Ifx_DRE *dre, IfxDre_ErsStatus *status);

/** \brief Configures access to all masters to all the DRE in the device
 * \param apConfig pointer to configuration structure.
 * \return None
 */
IFX_EXTERN void IfxDre_configureAccessToDre(IfxApApu_ApuConfig *apConfig);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE boolean IfxDre_isModuleEnabled(Ifx_DRE *dre)
{
    return dre->CLC.B.DISS == 0;
}


#endif /* IFXDRE_H */
