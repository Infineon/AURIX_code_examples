/**
 * \file IfxPcieLib_Device.h
 * \brief PCIE DEVICE details
 * \ingroup IfxLld_Pcie
 *
 * \version iLLD-TC4-v2.1.1
 * \copyright Copyright (c) 2023 Infineon Technologies AG. All rights reserved.
 *
 *
 *
 *                                 IMPORTANT NOTICE
 *
 * Use of this file is subject to the terms of use agreed between (i) you or
 * the company in which ordinary course of business you are acting and (ii)
 * Infineon Technologies AG or its licensees. If and as long as no such terms
 * of use are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 *
 * \defgroup IfxLld_Pcie_Lib_Device DEVICE
 * \ingroup IfxLld_Pcie_Lib
 * \defgroup IfxLld_Pcie_Lib_Device_Structures Structures
 * \ingroup IfxLld_Pcie_Lib_Device
 * \defgroup IfxLld_Pcie_Lib_Device_Functions Functions
 * \ingroup IfxLld_Pcie_Lib_Device
 */

#ifndef IFXPCIELIB_DEVICE_H
#define IFXPCIELIB_DEVICE_H 1

/******************************************************************************/
/*----------------------------------Includes----------------------------------*/
/******************************************************************************/

#include "Pcie/Std/IfxPcie.h"
#include "Pcie/Std/IfxPcieDevice.h"
#include "Pcie/Lib/Cap/IfxPcieLib_Cap.h"

/******************************************************************************/
/*-----------------------------Data Structures--------------------------------*/
/******************************************************************************/

/** \addtogroup IfxLld_Pcie_Lib_Device_Structures
 * \{ */
/** \brief TLP Header configuration for ATU
 * For outbound: This sets the Bytes 0 to 7 of the TLP header
 * For inbound: These field determine values for filtering of TLP based on bytes 0-7
 * NOTE: only configurations relevant to the use-case (Requirements) are configurable here.
 * To set additional bits, user can use TLP header field replacement feature of HW
 * NOTE: TLP Format is automatically set by the ATU based on address width
 */
typedef struct
{
    uint16                     tag;                /**< \brief bit [9:0] specifies 10 bit TAG. else [7:0]. Optional setting */
    IfxPcie_TlpType            type;               /**< \brief Type of TLP */
    IfxPcie_TlpTrafficClass    trafficClass;       /**< \brief TC of TLP */
    IfxPcie_TlpOrdering        orderingAttr;       /**< \brief Ordering of TLP [Defined by IDO (Attr[2]) and Attr[1] */
    uint8                      messageCode;        /**< \brief Message code, if TLP Type is Message Type */
    IfxPcie_TlpMsgRoute        messageRoute;       /**< \brief Message Routing Mechanism */
    IfxPcieDevice_TlpHdrDword2 dword3;             /**< \brief TLP Bytes 8-11 */
    uint32                     dword4;             /**< \brief TLP Bytes 12-15 */
} IfxPcieLib_Device_TlpHdr;

/** \} */

/** \addtogroup IfxLld_Pcie_Lib_Device_Structures
 * \{ */
/** \brief ATU Region Inbound TLP Configuration
 * This describes the parameters of the inbound TLP of an ATU region.
 * This is to be used for filtering TLP based on specific TLP header parameters.
 * These changes take effect for all TLP's on address match of the ATU region.
 */
typedef struct
{
    IfxPcieLib_Device_TlpHdr tlpHeader;       /**< \brief TLP Header parameters */
} IfxPcieLib_Device_InboundTlpCfg;

/** \brief ATU Region Outound TLP Configuration
 * This describes the parameters of the outbound TLP of an ATU region.
 * This is to be used for vendor messages, specific TLP header changes for outgoing TLP
 * These changes take effect for all TLP's on address match of the ATU region.
 */
typedef struct
{
    boolean                  payloadInhibit;       /**< \brief if TRUE, Payload is inhibited (No Data) */
    boolean                  dmaBypass;            /**< \brief if TRUE, DMA BYPASS is enabled */
    IfxPcieLib_Device_TlpHdr tlpHeader;            /**< \brief TLP Header parameters */
} IfxPcieLib_Device_OutboundTlpCfg;

/** \} */

/** \addtogroup IfxLld_Pcie_Lib_Device_Structures
 * \{ */
/** \brief ATU Region Handle
 */
typedef struct
{
    boolean              enabled;            /**< \brief if TRUE, ATU region is enabled */
    IfxPcie_AtuDirection direction;          /**< \brief Direction (inbound, outbound) */
    IfxPcie_AtuRegion    regionIndex;        /**< \brief Index of the ATU region */
    boolean              barMapped;          /**< \brief if TRUE, then Memory regions are defined by BAR */
    IfxPcie_BarNum       barIndex;           /**< \brief BAR Index, if BAR MAPPED */
    uint32               localMemBase;       /**< \brief Start address of the memory (in SOC Bus space) */
    uint64               wireMemBase;        /**< \brief Start address of the memory (in PCIE topology) */
    uint32               memSize;            /**< \brief Size of memory */
    IfxPcie_AtuLock      lockStatus;         /**< \brief Lock Status of this ATU Region */
    IfxPcie_TlpType      tlpType;            /**< \brief TLP Header associated with this ATU region */
} IfxPcieLib_Device_AtuRegion;

/** \brief ATU Region Configuration.
 * TODO: THis needs improvement.
 */
typedef struct
{
    boolean                          enable;             /**< \brief if TRUE, ATU region is enabled */
    IfxPcie_AtuRegion                regionIndex;        /**< \brief Index of the ATU region */
    IfxPcie_AtuDirection             direction;          /**< \brief Direction (inbound, outbound) */
    boolean                          barMapped;          /**< \brief if TRUE, then Memory regions are defined by BAR */
    IfxPcie_BarNum                   barIndex;           /**< \brief BAR Index, if BAR MAPPED */
    uint32                           localMemBase;       /**< \brief Start address of the memory (in SOC Bus space) */
    uint32                           memSize;            /**< \brief Size of memory */
    uint64                           wireMemBase;        /**< \brief Start address of the memory (in PCIE topology) */
    IfxPcieLib_Device_OutboundTlpCfg outboundTlp;        /**< \brief configuration of outbound TLP parameters */
    IfxPcieLib_Device_InboundTlpCfg  inboundTlp;         /**< \brief configuration of inbound TLP parameters */
} IfxPcieLib_Device_AtuRegionCfg;

/** \} */

/** \addtogroup IfxLld_Pcie_Lib_Device_Structures
 * \{ */
/** \brief ATU Handle
 */
typedef struct
{
    IfxPcieLib_Device_AtuRegion outboundRegion[IfxPcie_AtuRegion_max];       /**< \brief ATU Outbound Regions */
    IfxPcieLib_Device_AtuRegion inboundRegion[IfxPcie_AtuRegion_max];        /**< \brief ATU Inbound Regions */
} IfxPcieLib_Device_Atu;

/** \brief ATU Configuration. Make it an array??
 */
typedef struct
{
    IfxPcie_AtuRegion               numOutboundRegion;      /**< \brief Number of Outbound Regions configured */
    IfxPcie_AtuRegion               numInboundRegion;       /**< \brief Number of Inbound Regions configured */
    IfxPcieLib_Device_AtuRegionCfg *outboundRegion;         /**< \brief Pointer to list of ATU outbound region Configs */
    IfxPcieLib_Device_AtuRegionCfg *inboundRegion;          /**< \brief Pointer to list of ATU inbound region Configs */
} IfxPcieLib_Device_AtuCfg;

/** \brief BAr control data structure
 */
typedef struct
{
    IfxPcie_BarNum       barNum;          /**< \brief Bar Number */
    IfxPcie_MemType      MemType;         /**< \brief Type of memory */
    IfxPcie_AddressWidth addrWidth;       /**< \brief 32BIT, 64BIT */
    uint32               memSize;         /**< \brief Size of memory */
} IfxPcieLib_Device_BarCfg;

/** \brief End Point Function Handle
 */
typedef struct
{
    boolean                    enabled;                   /**< \brief Bridge is enabled */
    uint8                      primaryBus;                /**< \brief BUS to which this EP belongs */
    uint8                      device;                    /**< \brief Device to which this EP belongs */
    uint8                      function;                  /**< \brief function Number */
    uint8                      secondaryBus;              /**< \brief Secondary bus underneath this bridge */
    uint8                      subordinateBus;            /**< \brief Subordinate bus underneath this bridge */
    uint32                     wireMemBase;               /**< \brief Start address of the PCIE memory free area */
    uint32                     wireMemLimit;              /**< \brief End address of PCIE memory topology */
    uint64                     wireMemPrefetchBase;       /**< \brief Start address of the PCIE memory Prefetch free area */
    uint64                     wireMemPrefetchLimit;      /**< \brief End address of PCIE memory Prefetch topology */
    IfxPcieLib_Cap             capabilities;              /**< \brief Pointer to the capabilities */
    IfxPcieDevice_Type1CfgHdr *cfgHeader;                 /**< \brief Pointer to the type1 header */
} IfxPcieLib_Device_Bridge;

/** \brief End Point Function Handle
 */
typedef struct
{
    boolean                    enabled;           /**< \brief End Point is properly initialized and enabled */
    uint8                      bus;               /**< \brief BUS to which this EP belongs */
    uint8                      device;            /**< \brief Device to which this EP belongs */
    uint8                      function;          /**< \brief function Number */
    uint16                     vendorId;          /**< \brief Vendor ID */
    uint16                     deviceId;          /**< \brief Device ID */
    IfxPcieLib_Cap             capabilities;      /**< \brief Pointer to the capabilities */
    IfxPcieDevice_Type0CfgHdr *cfgHeader;         /**< \brief Pointer to the type0 header */
} IfxPcieLib_Device_EndPoint;

/** \brief End Point Function Configuration
 */
typedef struct
{
    uint16  deviceId;        /**< \brief Device ID */
    uint16  vendorId;        /**< \brief Vendor ID */
    boolean pmeEnable;       /**< \brief Enable Power Management Feature */
} IfxPcieLib_Device_FunctionCfg;

/** \brief Device Interrupt Node Config
 */
typedef struct
{
    IfxSrc_Tos        typeOfService;       /**< \brief Type of Service */
    Ifx_Priority      priority;            /**< \brief Priority Number of Interrupt */
    IfxSrc_VmId       vmNumber;            /**< \brief VM ID, if virtualization Enabled */
    IfxPcie_IntVector intVector;           /**< \brief Interrupt Vector to IR */
} IfxPcieLib_Device_IntNodeCfg;

/** \brief Memory Handle
 */
typedef struct
{
    uint64               wireMemBase;        /**< \brief Start address of the wire memory */
    uint64               size;               /**< \brief Size of memory region */
    IfxPcie_AddressWidth addressWidth;       /**< \brief Address bus width */
    IfxPcie_BarNum       barIndex;           /**< \brief Index of BAR region */
} IfxPcieLib_Device_Mem;

/** \brief Root Complex Device Handle
 */
typedef struct
{
    uint16                     vendorId;            /**< \brief vendor ID */
    uint16                     deviceId;            /**< \brief device ID */
    uint8                      primaryBus;          /**< \brief primary Bus Number */
    uint8                      secondaryBus;        /**< \brief secondary Bus Number */
    uint8                      subordinateBus;      /**< \brief subordinate Bus Number */
    IfxPcieDevice_Type1CfgHdr *cfgHeader;           /**< \brief Pointer to the type1 header */
    IfxPcieLib_Cap             capabilities;        /**< \brief Pointer to the capabilities */
} IfxPcieLib_Device_RootComplex;

/** \brief Root Complex Device Configuration
 */
typedef struct
{
    uint8   primaryBus;           /**< \brief primary Bus Number */
    uint8   subordinateBus;       /**< \brief subordinate Bus Number */
    uint16  vendorId;             /**< \brief vendor ID */
    uint16  deviceId;             /**< \brief device ID */
    boolean pmeEnable;            /**< \brief Power Management Enabled */
} IfxPcieLib_Device_RootComplexCfg;

/** \} */

/** \addtogroup IfxLld_Pcie_Lib_Device_Functions
 * \{ */

/******************************************************************************/
/*-------------------------Inline Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Check if ATU region is locked
 * \param atuRegion pointer to the ATU region handle
 * \return TRUE: ATU region is locked
 * FALSE: ATU region is free
 */
IFX_INLINE boolean IfxPcieLib_Device_isAtuRegionLocked(IfxPcieLib_Device_AtuRegion *atuRegion);

/** \brief Initialize the SRC node
 * \param pcie base pointer to the PCIE SFR region (union to accomodate DSP, USP)
 * \param index Pcie index
 * \param intVectCfg Pointer to the interrupt vector configuration
 * \return None
 */
IFX_INLINE void IfxPcieLib_Device_initSrcNode(IfxPcie *pcie, IfxPcie_Index index, IfxPcieLib_Device_IntNodeCfg *intVectCfg);

/******************************************************************************/
/*-------------------------Global Function Prototypes-------------------------*/
/******************************************************************************/

/** \brief Configure  ATU
 * \param pcieSFR base pointer to the PCIE SFR region (union to accomodate DSP, USP)
 * \param atu pointer to the ATU handle
 * \param atuCfg pointer to the ATU configuration
 * \return status of Initialization
 */
IFX_EXTERN IfxPcie_Status IfxPcieLib_Device_initAtu(IfxPcie *pcieSFR, IfxPcieLib_Device_Atu *atu, IfxPcieLib_Device_AtuCfg *atuCfg);

/** \brief Configure  ATU region
 * \param pcieSFR base pointer to the PCIE SFR region (union to accomodate DSP, USP)
 * \param atuRegion pointer to the ATU region handle
 * \param atuCfg pointer to the ATU region configuration
 * \return None
 */
IFX_EXTERN void IfxPcieLib_Device_initAtuRegion(IfxPcie *pcieSFR, IfxPcieLib_Device_AtuRegion *atuRegion, IfxPcieLib_Device_AtuRegionCfg *atuCfg);

/** \brief Free  ATU region
 * \param pcieSFR base pointer to the PCIE SFR region (union to accomodate DSP, USP)
 * \param atuRegion pointer to the ATU region handle
 * \return None
 */
IFX_EXTERN void IfxPcieLib_Device_freeAtuRegion(IfxPcie *pcieSFR, IfxPcieLib_Device_AtuRegion *atuRegion);

/** \brief Setup Outbound TLP for the ATU
 * \param outBoundPtr base pointer to the ATU outbound region
 * \param atuRegion pointer to the ATU region handle
 * \param outboundTlp pointer to the ATU outbound TLP configuration
 * \return None
 */
IFX_EXTERN void IfxPcieLib_Device_setupOutboundTlp(Ifx_PCIE_DSP_ATU_OUTBOUND *outBoundPtr, IfxPcieLib_Device_AtuRegion *atuRegion, IfxPcieLib_Device_OutboundTlpCfg *outboundTlp);

/** \} */

/******************************************************************************/
/*---------------------Inline Function Implementations------------------------*/
/******************************************************************************/

IFX_INLINE boolean IfxPcieLib_Device_isAtuRegionLocked(IfxPcieLib_Device_AtuRegion *atuRegion)
{
    boolean lockStatus = FALSE;

    if (atuRegion->lockStatus == IfxPcie_AtuLock_locked)
    {
        lockStatus = TRUE;
    }

    return lockStatus;
}


IFX_INLINE void IfxPcieLib_Device_initSrcNode(IfxPcie *pcie, IfxPcie_Index index, IfxPcieLib_Device_IntNodeCfg *intVectCfg)
{
    volatile Ifx_SRC_SRCR *srcRegPtr = IfxPcie_getSrcPointer(index, intVectCfg->intVector);
    IfxSrc_init(srcRegPtr, intVectCfg->typeOfService, intVectCfg->priority, intVectCfg->vmNumber);
    IfxSrc_enable(srcRegPtr);
}


#endif /* IFXPCIELIB_DEVICE_H */
