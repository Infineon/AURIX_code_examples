/**
 * \file IfxVtmon_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_VTMON/V13.1.2.1.1
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Vtmon_Registers Vtmon Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Vtmon_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Vtmon_Registers
 * 
 * \defgroup IfxSfr_Vtmon_Registers_union Register unions
 * \ingroup IfxSfr_Vtmon_Registers
 * 
 * \defgroup IfxSfr_Vtmon_Registers_struct Memory map
 * \ingroup IfxSfr_Vtmon_Registers
 */
#ifndef IFXVTMON_REGDEF_H
#define IFXVTMON_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Vtmon_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_VTMON_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_VTMON_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_VTMON_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_VTMON_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_VTMON_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_VTMON_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_VTMON_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_VTMON_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_VTMON_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_VTMON_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_VTMON_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_VTMON_ACCEN_WRB_FPI_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_VTMON_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_VTMON_CLC_Bits;

/** \brief Die Temperature Sensor 0 Control Register */
typedef struct _Ifx_VTMON_DTS_CON_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] DTS enable (rwh) */
    __IO Ifx_UReg_32Bit START:1;           /**< \brief [1:1] ADC conversion control (rwh) */
    __IO Ifx_UReg_32Bit WRNEN:1;           /**< \brief [2:2] Warning enable (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __IO Ifx_UReg_32Bit PEAKDETRST:1;      /**< \brief [4:4] DTS peak temperature detector reset (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit LOWERFILT:4;       /**< \brief [11:8] Temperature-sensing mode warning filter (rwh) */
    __IO Ifx_UReg_32Bit UPPERFILT:4;       /**< \brief [15:12] Temperature-sensing mode warning filter (rwh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [30:16] \internal Reserved */
    __I  Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock bit (rh) */
} Ifx_VTMON_DTS_CON_Bits;

/** \brief Die Temperature Sensor 0 Data Register */
typedef struct _Ifx_VTMON_DTS_DATA_Bits
{
    __IO Ifx_UReg_32Bit REQ:1;             /**< \brief [0:0] Data Transfer Request from DTSx to VTMON (rwh) */
    __I  Ifx_UReg_32Bit VALID:1;           /**< \brief [1:1] Data Valid bit (rh) */
    __O  Ifx_UReg_32Bit CLR:1;             /**< \brief [2:2] Clear Request (w) */
    __IO Ifx_UReg_32Bit BCAST:1;           /**< \brief [3:3] Broadcast write enable (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit LLUALRM:1;         /**< \brief [16:16] Under Temperature Alarm (rh) */
    __I  Ifx_UReg_32Bit UOFALRM:1;         /**< \brief [17:17] Over Temperature Alarm (rh) */
    __I  Ifx_UReg_32Bit TSDALRM:1;         /**< \brief [18:18] DTS thermal shutdown alarm (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_VTMON_DTS_DATA_Bits;

/** \brief Die Temperature Sensor 0 Limit Register 1 */
typedef struct _Ifx_VTMON_DTS_LIM1_Bits
{
    __IO Ifx_UReg_32Bit LOWER:12;          /**< \brief [11:0] DTS lower warning threshold (rwh) */
    __IO Ifx_UReg_32Bit LOWERHYST:3;       /**< \brief [14:12] Temperature-sensing mode warning hysteresis (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit UPPER:12;          /**< \brief [27:16] DTS upper warning threshold (rwh) */
    __IO Ifx_UReg_32Bit UPPERHYST:3;       /**< \brief [30:28] Temperature-sensing mode warning hysteresis (rwh) */
    __I  Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock bit (rh) */
} Ifx_VTMON_DTS_LIM1_Bits;

/** \brief Die Temperature Sensor 0 Limit Register 2 */
typedef struct _Ifx_VTMON_DTS_LIM2_Bits
{
    __IO Ifx_UReg_32Bit TSDLIMIT:12;       /**< \brief [11:0] Temperature shut down warning threshold (rwh) */
    __IO Ifx_UReg_32Bit TSDHYST:3;         /**< \brief [14:12] Temperature-sensing mode warning hysteresis (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit TSDFILT:4;         /**< \brief [19:16] Temperature-sensing mode warning filter (rwh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [30:20] \internal Reserved */
    __I  Ifx_UReg_32Bit LCK:1;             /**< \brief [31:31] Lock bit (rh) */
} Ifx_VTMON_DTS_LIM2_Bits;

/** \brief Die Temperature Sensor 0 Status Register */
typedef struct _Ifx_VTMON_DTS_STAT_Bits
{
    __I  Ifx_UReg_32Bit RESULT:12;         /**< \brief [11:0] DTS result (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit PEAK:12;           /**< \brief [27:16] DTS peak temperature result (rh) */
    __I  Ifx_UReg_32Bit LLU:1;             /**< \brief [28:28] Low Temperature Warning (rh) */
    __I  Ifx_UReg_32Bit UOF:1;             /**< \brief [29:29] High Temperature Warning (rh) */
    __I  Ifx_UReg_32Bit TSD:1;             /**< \brief [30:30] Thermal Shutdown Warning (rh) */
    __I  Ifx_UReg_32Bit DTSREADY:1;        /**< \brief [31:31] Ready indicator (rh) */
} Ifx_VTMON_DTS_STAT_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_VTMON_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_VTMON_ID_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_VTMON_OCS_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 Bus Select - TGB - not used (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_VTMON_OCS_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_VTMON_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_VTMON_PROT_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_VTMON_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_VTMON_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_VTMON_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_VTMON_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_VTMON_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_VTMON_RST_STAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_vtmon_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ACCEN_PRS_Bits B;            /**< \brief Bitfield access */
} Ifx_VTMON_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ACCEN_RDA_Bits B;            /**< \brief Bitfield access */
} Ifx_VTMON_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ACCEN_RDB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_VTMON_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ACCEN_VM_Bits B;             /**< \brief Bitfield access */
} Ifx_VTMON_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ACCEN_WRA_Bits B;            /**< \brief Bitfield access */
} Ifx_VTMON_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ACCEN_WRB_FPI_Bits B;        /**< \brief Bitfield access */
} Ifx_VTMON_ACCEN_WRB_FPI;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_CLC_Bits B;                  /**< \brief Bitfield access */
} Ifx_VTMON_CLC;

/** \brief Die Temperature Sensor 0 Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_DTS_CON_Bits B;              /**< \brief Bitfield access */
} Ifx_VTMON_DTS_CON;

/** \brief Die Temperature Sensor 0 Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_DTS_DATA_Bits B;             /**< \brief Bitfield access */
} Ifx_VTMON_DTS_DATA;

/** \brief Die Temperature Sensor 0 Limit Register 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_DTS_LIM1_Bits B;             /**< \brief Bitfield access */
} Ifx_VTMON_DTS_LIM1;

/** \brief Die Temperature Sensor 0 Limit Register 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_DTS_LIM2_Bits B;             /**< \brief Bitfield access */
} Ifx_VTMON_DTS_LIM2;

/** \brief Die Temperature Sensor 0 Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_DTS_STAT_Bits B;             /**< \brief Bitfield access */
} Ifx_VTMON_DTS_STAT;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_ID_Bits B;                   /**< \brief Bitfield access */
} Ifx_VTMON_ID;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_OCS_Bits B;                  /**< \brief Bitfield access */
} Ifx_VTMON_OCS;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_PROT_Bits B;                 /**< \brief Bitfield access */
} Ifx_VTMON_PROT;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_RST_CTRLA_Bits B;            /**< \brief Bitfield access */
} Ifx_VTMON_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_RST_CTRLB_Bits B;            /**< \brief Bitfield access */
} Ifx_VTMON_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_VTMON_RST_STAT_Bits B;             /**< \brief Bitfield access */
} Ifx_VTMON_RST_STAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vtmon_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_VTMON_RST
{
       __IO Ifx_VTMON_RST_CTRLA                 CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_VTMON_RST_CTRLB                 CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_VTMON_RST_STAT                  STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_VTMON_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vtmon_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_VTMON_ACCEN
{
       __IO Ifx_VTMON_ACCEN_WRA                 WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_VTMON_ACCEN_WRB_FPI             WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_VTMON_ACCEN_RDA                 RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_VTMON_ACCEN_RDB_FPI             RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_VTMON_ACCEN_VM                  VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_VTMON_ACCEN_PRS                 PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_VTMON_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Vtmon_DTS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DTS object */
typedef volatile struct _Ifx_VTMON_DTS
{
       __IO Ifx_VTMON_DTS_CON                   CON;                    /**< \brief 0, Die Temperature Sensor 0 Control Register*/
       __IO Ifx_VTMON_DTS_LIM1                  LIM1;                   /**< \brief 4, Die Temperature Sensor 0 Limit Register 1*/
       __IO Ifx_VTMON_DTS_LIM2                  LIM2;                   /**< \brief 8, Die Temperature Sensor 0 Limit Register 2*/
       __IO Ifx_VTMON_DTS_DATA                  DATA;                   /**< \brief C, Die Temperature Sensor 0 Data Register*/
       __I  Ifx_VTMON_DTS_STAT                  STAT;                   /**< \brief 10, Die Temperature Sensor 0 Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_14[12];        /**< \brief 14, \internal Reserved */
} Ifx_VTMON_DTS;

/******************************************************************************/
/** \addtogroup IfxSfr_Vtmon_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief VTMON object */
typedef volatile struct _Ifx_VTMON
{
       __IO Ifx_VTMON_CLC                       CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_VTMON_OCS                       OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_VTMON_ID                        ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_VTMON_RST                       RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_VTMON_PROT                      PROTE;                  /**< \brief 20, PROT Register Endinit*/
       __IO Ifx_VTMON_PROT                      PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_VTMON_ACCEN                     ACCEN;                  /**< \brief 40, */
       __IO Ifx_VTMON_DTS                       DTS[5];                 /**< \brief 60, Reserved*/
       __I  Ifx_UReg_8Bit                       reserved_100[16128];    /**< \brief 100, \internal Reserved */
} Ifx_VTMON;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXVTMON_REGDEF_H */
