/**
 * \file IfxDom_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_SRI/V0.2.1.1.8
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Dom_Registers Dom Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Dom_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Dom_Registers
 * 
 * \defgroup IfxSfr_Dom_Registers_union Register unions
 * \ingroup IfxSfr_Dom_Registers
 * 
 * \defgroup IfxSfr_Dom_Registers_struct Memory map
 * \ingroup IfxSfr_Dom_Registers
 */
#ifndef IFXDOM_REGDEF_H
#define IFXDOM_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Dom_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_DOM_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DOM_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_DOM_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_DOM_ACCEN_RDB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Read access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Read access enable for TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_RDB_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_DOM_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DOM_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_DOM_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_DOM_ACCEN_WRB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Write access enable for TAG ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Write access enable for TAG ID q - ENq (rw) */
} Ifx_DOM_ACCEN_WRB_Bits;

/** \brief Bridge control register */
typedef struct _Ifx_DOM_BRCON_Bits
{
    __IO Ifx_Strict_32Bit OLDAEN:1;        /**< \brief [0:0] Online data acquisition enable - OLDAEN (rw) */
    __I  Ifx_Strict_32Bit :31;             /**< \brief [31:1] \internal Reserved */
} Ifx_DOM_BRCON_Bits;

/** \brief Identification register */
typedef struct _Ifx_DOM_ID_Bits
{
    __I  Ifx_Strict_32Bit MOD_REV:8;       /**< \brief [7:0] Module revision number - MOD_REV (r) */
    __I  Ifx_Strict_32Bit MOD_TYPE:8;      /**< \brief [15:8] Module type - MOD_TYPE (r) */
    __I  Ifx_Strict_32Bit MOD_NUM:16;      /**< \brief [31:16] Module number value - MOD_NUM (r) */
} Ifx_DOM_ID_Bits;

/** \brief Protocol error status register */
typedef struct _Ifx_DOM_PESTAT_Bits
{
    __I  Ifx_Strict_32Bit :16;             /**< \brief [15:0] \internal Reserved */
    __IO Ifx_Strict_32Bit PESCI0:1;        /**< \brief [16:16] Protocol error status of SCI0 - PESCI0 (rwh) */
    __IO Ifx_Strict_32Bit PESCI1:1;        /**< \brief [17:17] Protocol error status of SCI1 - PESCI1 (rwh) */
    __IO Ifx_Strict_32Bit PESCI2:1;        /**< \brief [18:18] Protocol error status of SCI2 - PESCI2 (rwh) */
    __IO Ifx_Strict_32Bit PESCI3:1;        /**< \brief [19:19] Protocol error status of SCI3 - PESCI3 (rwh) */
    __IO Ifx_Strict_32Bit PESCI4:1;        /**< \brief [20:20] Protocol error status of SCI4 - PESCI4 (rwh) */
    __IO Ifx_Strict_32Bit PESCI5:1;        /**< \brief [21:21] Protocol error status of SCI5 - PESCI5 (rwh) */
    __IO Ifx_Strict_32Bit PESCI6:1;        /**< \brief [22:22] Protocol error status of SCI6 - PESCI6 (rwh) */
    __IO Ifx_Strict_32Bit PESCI7:1;        /**< \brief [23:23] Protocol error status of SCI7 - PESCI7 (rwh) */
    __IO Ifx_Strict_32Bit PESCI8:1;        /**< \brief [24:24] Protocol error status of SCI8 - PESCI8 (rwh) */
    __IO Ifx_Strict_32Bit PESCI9:1;        /**< \brief [25:25] Protocol error status of SCI9 - PESCI9 (rwh) */
    __IO Ifx_Strict_32Bit PESCI10:1;       /**< \brief [26:26] Protocol error status of SCI10 - PESCI10 (rwh) */
    __IO Ifx_Strict_32Bit PESCI11:1;       /**< \brief [27:27] Protocol error status of SCI11 - PESCI11 (rwh) */
    __IO Ifx_Strict_32Bit PESCI12:1;       /**< \brief [28:28] Protocol error status of SCI12 - PESCI12 (rwh) */
    __IO Ifx_Strict_32Bit PESCI13:1;       /**< \brief [29:29] Protocol error status of SCI13 - PESCI13 (rwh) */
    __IO Ifx_Strict_32Bit PESCI14:1;       /**< \brief [30:30] Protocol error status of SCI14 - PESCI14 (rwh) */
    __IO Ifx_Strict_32Bit PESCI15:1;       /**< \brief [31:31] Protocol error status of SCI15 - PESCI15 (rwh) */
} Ifx_DOM_PESTAT_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_DOM_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_DOM_PROT_Bits;

/** \brief ARP0 cycle count capture register */
typedef struct _Ifx_DOM_QOS_ARP_CCC_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __I  Ifx_UReg_32Bit CAPTURE:19;        /**< \brief [22:4] ARP0 captured cycle count (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_DOM_QOS_ARP_CCC_Bits;

/** \brief ARP0 current counter value register */
typedef struct _Ifx_DOM_QOS_ARP_CCV_Bits
{
    __I  Ifx_UReg_32Bit COUNTER:23;        /**< \brief [22:0] ARP0 cycle count (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_DOM_QOS_ARP_CCV_Bits;

/** \brief ARP0 control register */
typedef struct _Ifx_DOM_QOS_ARP_CTRL_Bits
{
    __IO Ifx_UReg_32Bit EN:1;              /**< \brief [0:0] ARP0 enable (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [29:1] \internal Reserved */
    __O  Ifx_UReg_32Bit CLR:1;             /**< \brief [30:30] ARP0 status clear (w) */
    __I  Ifx_UReg_32Bit STAT:1;            /**< \brief [31:31] ARP0 status (rh) */
} Ifx_DOM_QOS_ARP_CTRL_Bits;

/** \brief ARP0 TAG-ID assignment register A */
typedef struct _Ifx_DOM_QOS_ARP_TAGIDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] TAG-ID q - ENq counted by ARP0 (rw) */
} Ifx_DOM_QOS_ARP_TAGIDA_Bits;

/** \brief ARP0 TAG-ID assignment register B */
typedef struct _Ifx_DOM_QOS_ARP_TAGIDB_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] TAG-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] TAG-ID q - ENq counted by ARP0 (rw) */
} Ifx_DOM_QOS_ARP_TAGIDB_Bits;

/** \brief ARP0 threshold register */
typedef struct _Ifx_DOM_QOS_ARP_THR_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit THV:19;            /**< \brief [22:4] ARP0 threshold value (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_DOM_QOS_ARP_THR_Bits;

/** \brief ARP0 VM assignment register */
typedef struct _Ifx_DOM_QOS_ARP_VM_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] VM-ID q - ENq counted by ARP0 (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] VM-ID q - ENq counted by ARP0 (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_DOM_QOS_ARP_VM_Bits;

/** \brief QoS time interval counter */
typedef struct _Ifx_DOM_QOS_ICNT_Bits
{
    __I  Ifx_UReg_32Bit QOSICNT:23;        /**< \brief [22:0] QoS time interval counter (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_DOM_QOS_ICNT_Bits;

/** \brief QoS time interval control register */
typedef struct _Ifx_DOM_QOS_ICTRL_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit QOSINT:19;         /**< \brief [22:4] QoS time interval (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [30:23] \internal Reserved */
    __IO Ifx_UReg_32Bit QOSEN:1;           /**< \brief [31:31] QoS enable (rw) */
} Ifx_DOM_QOS_ICTRL_Bits;

/** \brief SCI0 error capture register */
typedef struct _Ifx_DOM_SCICTRL_ERR_Bits
{
    __I  Ifx_Strict_32Bit RD_N:1;          /**< \brief [0:0] Read status - RD (rh) */
    __I  Ifx_Strict_32Bit WR_N:1;          /**< \brief [1:1] Write status - WR (rh) */
    __I  Ifx_Strict_32Bit SVM:1;           /**< \brief [2:2] Supervisor mode status - SVM (rh) */
    __I  Ifx_Strict_32Bit LOCK_N:1;        /**< \brief [3:3] Lock status - LK (rh) */
    __I  Ifx_Strict_32Bit OPC:3;           /**< \brief [6:4] Operation code - OPC (rh) */
    __I  Ifx_Strict_32Bit SM:1;            /**< \brief [7:7] Special master - SM (rh) */
    __I  Ifx_Strict_32Bit TR_ID:8;         /**< \brief [15:8] Transaction ID - TR_ID (rh) */
    __I  Ifx_Strict_32Bit ADDR_EDC:8;      /**< \brief [23:16] Address phase error detection information - ADDR_EDC (rh) */
    __I  Ifx_Strict_32Bit PRS:3;           /**< \brief [26:24] Protection register set - PRS (rh) */
    __I  Ifx_Strict_32Bit PRS_EN:1;        /**< \brief [27:27] PRS enable (rh) */
    __I  Ifx_Strict_32Bit VM:3;            /**< \brief [30:28] Virtual machine - VM (rh) */
    __I  Ifx_Strict_32Bit VM_EN:1;         /**< \brief [31:31] VM Enable (rh) */
} Ifx_DOM_SCICTRL_ERR_Bits;

/** \brief SCI0 error address capture register */
typedef struct _Ifx_DOM_SCICTRL_ERRADDR_Bits
{
    __I  Ifx_Strict_32Bit ADDR:32;         /**< \brief [31:0] Transaction address - ADDR (rh) */
} Ifx_DOM_SCICTRL_ERRADDR_Bits;

/** \brief Protocol error control register 0 */
typedef struct _Ifx_DOM_SCICTRL_PECON_Bits
{
    __IO Ifx_Strict_32Bit PEEN:1;          /**< \brief [0:0] Protocol error enable - PEEN (rw) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [1:1] \internal Reserved */
    __IO Ifx_Strict_32Bit SETPE:1;         /**< \brief [2:2] Set protocol error - SETPE (rwh) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __IO Ifx_Strict_32Bit PEACK:1;         /**< \brief [4:4] Protocol error acknowledge - PEACK (rwh) */
    __I  Ifx_Strict_32Bit :27;             /**< \brief [31:5] \internal Reserved */
} Ifx_DOM_SCICTRL_PECON_Bits;

/** \brief SCI0 arbiter priority register */
typedef struct _Ifx_DOM_SCICTRL_PRIORITY_Bits
{
    __IO Ifx_Strict_32Bit MCI0_P:1;        /**< \brief [0:0] MCI0 Priority - MCI0_P (rw) */
    __IO Ifx_Strict_32Bit MCI1_P:1;        /**< \brief [1:1] MCI1 Priority - MCI1_P (rw) */
    __IO Ifx_Strict_32Bit MCI2_P:1;        /**< \brief [2:2] MCI2 Priority - MCI2_P (rw) */
    __IO Ifx_Strict_32Bit MCI3_P:1;        /**< \brief [3:3] MCI3 Priority - MCI3_P (rw) */
    __IO Ifx_Strict_32Bit MCI4_P:1;        /**< \brief [4:4] MCI4 Priority - MCI4_P (rw) */
    __IO Ifx_Strict_32Bit MCI5_P:1;        /**< \brief [5:5] MCI5 Priority - MCI5_P (rw) */
    __IO Ifx_Strict_32Bit MCI6_P:1;        /**< \brief [6:6] MCI6 Priority - MCI6_P (rw) */
    __IO Ifx_Strict_32Bit MCI7_P:1;        /**< \brief [7:7] MCI7 Priority - MCI7_P (rw) */
    __IO Ifx_Strict_32Bit MCI8_P:1;        /**< \brief [8:8] MCI8 Priority - MCI8_P (rw) */
    __IO Ifx_Strict_32Bit MCI9_P:1;        /**< \brief [9:9] MCI9 Priority - MCI9_P (rw) */
    __IO Ifx_Strict_32Bit MCI10_P:1;       /**< \brief [10:10] MCI10 Priority - MCI10_P (rw) */
    __IO Ifx_Strict_32Bit MCI11_P:1;       /**< \brief [11:11] MCI11 Priority - MCI11_P (rw) */
    __IO Ifx_Strict_32Bit MCI12_P:1;       /**< \brief [12:12] MCI12 Priority - MCI12_P (rw) */
    __IO Ifx_Strict_32Bit MCI13_P:1;       /**< \brief [13:13] MCI13 Priority - MCI13_P (rw) */
    __IO Ifx_Strict_32Bit MCI14_P:1;       /**< \brief [14:14] MCI14 Priority - MCI14_P (rw) */
    __IO Ifx_Strict_32Bit MCI15_P:1;       /**< \brief [15:15] MCI15 Priority - MCI15_P (rw) */
    __IO Ifx_Strict_32Bit HPRS:4;          /**< \brief [19:16] High priority round share - HPRS (rw) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [31:20] \internal Reserved */
} Ifx_DOM_SCICTRL_PRIORITY_Bits;

/** \brief Transaction ID enable register */
typedef struct _Ifx_DOM_TIDEN_Bits
{
    __IO Ifx_Strict_32Bit ENSCI0:1;        /**< \brief [0:0] Enable transaction ID error from SCIn - ENSCI0 (rw) */
    __IO Ifx_Strict_32Bit ENSCI1:1;        /**< \brief [1:1] Enable transaction ID error from SCIn - ENSCI1 (rw) */
    __IO Ifx_Strict_32Bit ENSCI2:1;        /**< \brief [2:2] Enable transaction ID error from SCIn - ENSCI2 (rw) */
    __IO Ifx_Strict_32Bit ENSCI3:1;        /**< \brief [3:3] Enable transaction ID error from SCIn - ENSCI3 (rw) */
    __IO Ifx_Strict_32Bit ENSCI4:1;        /**< \brief [4:4] Enable transaction ID error from SCIn - ENSCI4 (rw) */
    __IO Ifx_Strict_32Bit ENSCI5:1;        /**< \brief [5:5] Enable transaction ID error from SCIn - ENSCI5 (rw) */
    __IO Ifx_Strict_32Bit ENSCI6:1;        /**< \brief [6:6] Enable transaction ID error from SCIn - ENSCI6 (rw) */
    __IO Ifx_Strict_32Bit ENSCI7:1;        /**< \brief [7:7] Enable transaction ID error from SCIn - ENSCI7 (rw) */
    __IO Ifx_Strict_32Bit ENSCI8:1;        /**< \brief [8:8] Enable transaction ID error from SCIn - ENSCI8 (rw) */
    __IO Ifx_Strict_32Bit ENSCI9:1;        /**< \brief [9:9] Enable transaction ID error from SCIn - ENSCI9 (rw) */
    __IO Ifx_Strict_32Bit ENSCI10:1;       /**< \brief [10:10] Enable transaction ID error from SCIn - ENSCI10 (rw) */
    __IO Ifx_Strict_32Bit ENSCI11:1;       /**< \brief [11:11] Enable transaction ID error from SCIn - ENSCI11 (rw) */
    __IO Ifx_Strict_32Bit ENSCI12:1;       /**< \brief [12:12] Enable transaction ID error from SCIn - ENSCI12 (rw) */
    __IO Ifx_Strict_32Bit ENSCI13:1;       /**< \brief [13:13] Enable transaction ID error from SCIn - ENSCI13 (rw) */
    __IO Ifx_Strict_32Bit ENSCI14:1;       /**< \brief [14:14] Enable transaction ID error from SCIn - ENSCI14 (rw) */
    __IO Ifx_Strict_32Bit ENSCI15:1;       /**< \brief [15:15] Enable transaction ID error from SCIn - ENSCI15 (rw) */
    __IO Ifx_Strict_32Bit ENMCI0:1;        /**< \brief [16:16] Enable transaction ID error from MCIn - ENMCI0 (rw) */
    __IO Ifx_Strict_32Bit ENMCI1:1;        /**< \brief [17:17] Enable transaction ID error from MCIn - ENMCI1 (rw) */
    __IO Ifx_Strict_32Bit ENMCI2:1;        /**< \brief [18:18] Enable transaction ID error from MCIn - ENMCI2 (rw) */
    __IO Ifx_Strict_32Bit ENMCI3:1;        /**< \brief [19:19] Enable transaction ID error from MCIn - ENMCI3 (rw) */
    __IO Ifx_Strict_32Bit ENMCI4:1;        /**< \brief [20:20] Enable transaction ID error from MCIn - ENMCI4 (rw) */
    __IO Ifx_Strict_32Bit ENMCI5:1;        /**< \brief [21:21] Enable transaction ID error from MCIn - ENMCI5 (rw) */
    __IO Ifx_Strict_32Bit ENMCI6:1;        /**< \brief [22:22] Enable transaction ID error from MCIn - ENMCI6 (rw) */
    __IO Ifx_Strict_32Bit ENMCI7:1;        /**< \brief [23:23] Enable transaction ID error from MCIn - ENMCI7 (rw) */
    __IO Ifx_Strict_32Bit ENMCI8:1;        /**< \brief [24:24] Enable transaction ID error from MCIn - ENMCI8 (rw) */
    __IO Ifx_Strict_32Bit ENMCI9:1;        /**< \brief [25:25] Enable transaction ID error from MCIn - ENMCI9 (rw) */
    __IO Ifx_Strict_32Bit ENMCI10:1;       /**< \brief [26:26] Enable transaction ID error from MCIn - ENMCI10 (rw) */
    __IO Ifx_Strict_32Bit ENMCI11:1;       /**< \brief [27:27] Enable transaction ID error from MCIn - ENMCI11 (rw) */
    __IO Ifx_Strict_32Bit ENMCI12:1;       /**< \brief [28:28] Enable transaction ID error from MCIn - ENMCI12 (rw) */
    __IO Ifx_Strict_32Bit ENMCI13:1;       /**< \brief [29:29] Enable transaction ID error from MCIn - ENMCI13 (rw) */
    __IO Ifx_Strict_32Bit ENMCI14:1;       /**< \brief [30:30] Enable transaction ID error from MCIn - ENMCI14 (rw) */
    __IO Ifx_Strict_32Bit ENMCI15:1;       /**< \brief [31:31] Enable transaction ID error from MCIn - ENMCI15 (rw) */
} Ifx_DOM_TIDEN_Bits;

/** \brief Transaction ID status register */
typedef struct _Ifx_DOM_TIDSTAT_Bits
{
    __IO Ifx_Strict_32Bit TIDSCI0:1;       /**< \brief [0:0] Transaction ID error from SCIn status - TIDSCI0 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI1:1;       /**< \brief [1:1] Transaction ID error from SCIn status - TIDSCI1 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI2:1;       /**< \brief [2:2] Transaction ID error from SCIn status - TIDSCI2 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI3:1;       /**< \brief [3:3] Transaction ID error from SCIn status - TIDSCI3 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI4:1;       /**< \brief [4:4] Transaction ID error from SCIn status - TIDSCI4 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI5:1;       /**< \brief [5:5] Transaction ID error from SCIn status - TIDSCI5 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI6:1;       /**< \brief [6:6] Transaction ID error from SCIn status - TIDSCI6 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI7:1;       /**< \brief [7:7] Transaction ID error from SCIn status - TIDSCI7 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI8:1;       /**< \brief [8:8] Transaction ID error from SCIn status - TIDSCI8 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI9:1;       /**< \brief [9:9] Transaction ID error from SCIn status - TIDSCI9 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI10:1;      /**< \brief [10:10] Transaction ID error from SCIn status - TIDSCI10 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI11:1;      /**< \brief [11:11] Transaction ID error from SCIn status - TIDSCI11 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI12:1;      /**< \brief [12:12] Transaction ID error from SCIn status - TIDSCI12 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI13:1;      /**< \brief [13:13] Transaction ID error from SCIn status - TIDSCI13 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI14:1;      /**< \brief [14:14] Transaction ID error from SCIn status - TIDSCI14 (rwh) */
    __IO Ifx_Strict_32Bit TIDSCI15:1;      /**< \brief [15:15] Transaction ID error from SCIn status - TIDSCI15 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI0:1;       /**< \brief [16:16] Trasaction ID Error from MCIn status - TIDMCI0 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI1:1;       /**< \brief [17:17] Trasaction ID Error from MCIn status - TIDMCI1 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI2:1;       /**< \brief [18:18] Trasaction ID Error from MCIn status - TIDMCI2 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI3:1;       /**< \brief [19:19] Trasaction ID Error from MCIn status - TIDMCI3 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI4:1;       /**< \brief [20:20] Trasaction ID Error from MCIn status - TIDMCI4 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI5:1;       /**< \brief [21:21] Trasaction ID Error from MCIn status - TIDMCI5 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI6:1;       /**< \brief [22:22] Trasaction ID Error from MCIn status - TIDMCI6 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI7:1;       /**< \brief [23:23] Trasaction ID Error from MCIn status - TIDMCI7 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI8:1;       /**< \brief [24:24] Trasaction ID Error from MCIn status - TIDMCI8 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI9:1;       /**< \brief [25:25] Trasaction ID Error from MCIn status - TIDMCI9 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI10:1;      /**< \brief [26:26] Trasaction ID Error from MCIn status - TIDMCI10 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI11:1;      /**< \brief [27:27] Trasaction ID Error from MCIn status - TIDMCI11 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI12:1;      /**< \brief [28:28] Trasaction ID Error from MCIn status - TIDMCI12 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI13:1;      /**< \brief [29:29] Trasaction ID Error from MCIn status - TIDMCI13 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI14:1;      /**< \brief [30:30] Trasaction ID Error from MCIn status - TIDMCI14 (rwh) */
    __IO Ifx_Strict_32Bit TIDMCI15:1;      /**< \brief [31:31] Trasaction ID Error from MCIn status - TIDMCI15 (rwh) */
} Ifx_DOM_TIDSTAT_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_dom_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_RDB_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_RDB;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ACCEN_WRB_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_ACCEN_WRB;

/** \brief Bridge control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_BRCON_Bits B;                  /**< \brief Bitfield access */
} Ifx_DOM_BRCON;

/** \brief Identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_ID_Bits B;                     /**< \brief Bitfield access */
} Ifx_DOM_ID;

/** \brief Protocol error status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_PESTAT_Bits B;                 /**< \brief Bitfield access */
} Ifx_DOM_PESTAT;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_PROT_Bits B;                   /**< \brief Bitfield access */
} Ifx_DOM_PROT;

/** \brief ARP0 cycle count capture register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_CCC_Bits B;            /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_CCC;

/** \brief ARP0 current counter value register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_CCV_Bits B;            /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_CCV;

/** \brief ARP0 control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_CTRL_Bits B;           /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_CTRL;

/** \brief ARP0 TAG-ID assignment register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_TAGIDA_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_TAGIDA;

/** \brief ARP0 TAG-ID assignment register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_TAGIDB_Bits B;         /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_TAGIDB;

/** \brief ARP0 threshold register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_THR_Bits B;            /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_THR;

/** \brief ARP0 VM assignment register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ARP_VM_Bits B;             /**< \brief Bitfield access */
} Ifx_DOM_QOS_ARP_VM;

/** \brief QoS time interval counter   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ICNT_Bits B;               /**< \brief Bitfield access */
} Ifx_DOM_QOS_ICNT;

/** \brief QoS time interval control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_QOS_ICTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_DOM_QOS_ICTRL;

/** \brief SCI0 error capture register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_ERR_Bits B;            /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_ERR;

/** \brief SCI0 error address capture register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_ERRADDR_Bits B;        /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_ERRADDR;

/** \brief Protocol error control register 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_PECON_Bits B;          /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_PECON;

/** \brief SCI0 arbiter priority register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_SCICTRL_PRIORITY_Bits B;       /**< \brief Bitfield access */
} Ifx_DOM_SCICTRL_PRIORITY;

/** \brief Transaction ID enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_TIDEN_Bits B;                  /**< \brief Bitfield access */
} Ifx_DOM_TIDEN;

/** \brief Transaction ID status register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DOM_TIDSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_DOM_TIDSTAT;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dom_SCICTRL_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SCICTRL object */
typedef volatile struct _Ifx_DOM_SCICTRL
{
       __IO Ifx_DOM_SCICTRL_PECON               PECON;                  /**< \brief 0, Protocol error control register 0*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_DOM_SCICTRL_PRIORITY            PRIORITY;               /**< \brief 8, SCI0 arbiter priority register*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __I  Ifx_DOM_SCICTRL_ERRADDR             ERRADDR;                /**< \brief 10, SCI0 error address capture register*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __I  Ifx_DOM_SCICTRL_ERR                 ERR;                    /**< \brief 18, SCI0 error capture register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
} Ifx_DOM_SCICTRL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dom_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_DOM_ACCEN
{
       __IO Ifx_DOM_ACCEN_WRA                   WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_DOM_ACCEN_WRB                   WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_DOM_ACCEN_RDA                   RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_DOM_ACCEN_RDB                   RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_DOM_ACCEN_VM                    VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_DOM_ACCEN_PRS                   PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[4];         /**< \brief 18, \internal Reserved */
} Ifx_DOM_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dom_QOS_ARP_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ARP object */
typedef volatile struct _Ifx_DOM_QOS_ARP
{
       __IO Ifx_DOM_QOS_ARP_TAGIDA              TAGIDA;                 /**< \brief 0, ARP0 TAG-ID assignment register A*/
       __IO Ifx_DOM_QOS_ARP_TAGIDB              TAGIDB;                 /**< \brief 4, ARP0 TAG-ID assignment register B*/
       __IO Ifx_DOM_QOS_ARP_VM                  VM;                     /**< \brief 8, ARP0 VM assignment register*/
       __IO Ifx_DOM_QOS_ARP_THR                 THR;                    /**< \brief C, ARP0 threshold register*/
       __IO Ifx_DOM_QOS_ARP_CTRL                CTRL;                   /**< \brief 10, ARP0 control register*/
       __I  Ifx_DOM_QOS_ARP_CCC                 CCC;                    /**< \brief 14, ARP0 cycle count capture register*/
       __I  Ifx_DOM_QOS_ARP_CCV                 CCV;                    /**< \brief 18, ARP0 current counter value register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
} Ifx_DOM_QOS_ARP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dom_QOS_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief QOS object */
typedef volatile struct _Ifx_DOM_QOS
{
       __IO Ifx_DOM_QOS_ARP                     ARP[8];                 /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_100[256];      /**< \brief 100, \internal Reserved */
} Ifx_DOM_QOS;

/******************************************************************************/
/** \addtogroup IfxSfr_Dom_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief DOM object */
typedef volatile struct _Ifx_DOM
{
       __IO Ifx_DOM_SCICTRL                     SCICTRL[16];            /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_200[520];      /**< \brief 200, \internal Reserved */
       __I  Ifx_DOM_ID                          ID;                     /**< \brief 408, Identification register*/
       __I  Ifx_UReg_8Bit                       reserved_40C[4];        /**< \brief 40C, \internal Reserved */
       __IO Ifx_DOM_PESTAT                      PESTAT;                 /**< \brief 410, Protocol error status register*/
       __I  Ifx_UReg_8Bit                       reserved_414[4];        /**< \brief 414, \internal Reserved */
       __IO Ifx_DOM_TIDSTAT                     TIDSTAT;                /**< \brief 418, Transaction ID status register*/
       __I  Ifx_UReg_8Bit                       reserved_41C[4];        /**< \brief 41C, \internal Reserved */
       __IO Ifx_DOM_TIDEN                       TIDEN;                  /**< \brief 420, Transaction ID enable register*/
       __I  Ifx_UReg_8Bit                       reserved_424[12];       /**< \brief 424, \internal Reserved */
       __IO Ifx_DOM_BRCON                       BRCON;                  /**< \brief 430, Bridge control register*/
       __I  Ifx_UReg_8Bit                       reserved_434[140];      /**< \brief 434, \internal Reserved */
       __IO Ifx_DOM_ACCEN                       ACCEN;                  /**< \brief 4C0, */
       __I  Ifx_UReg_8Bit                       reserved_4DC[4];        /**< \brief 4DC, \internal Reserved */
       __IO Ifx_DOM_PROT                        PROTSE;                 /**< \brief 4E0, Resource protection register*/
       __I  Ifx_UReg_8Bit                       reserved_4E4[2844];     /**< \brief 4E4, \internal Reserved */
       __IO Ifx_DOM_QOS_ICTRL                   QOS_ICTRL;              /**< \brief 1000, QoS time interval control register*/
       __I  Ifx_DOM_QOS_ICNT                    QOS_ICNT;               /**< \brief 1004, QoS time interval counter*/
       __I  Ifx_UReg_8Bit                       reserved_1008[24];      /**< \brief 1008, \internal Reserved */
       __IO Ifx_DOM_QOS                         QOS[16];                /**< \brief 1020, */
       __I  Ifx_UReg_8Bit                       reserved_3020[53216];    /**< \brief 3020, \internal Reserved */
} Ifx_DOM;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXDOM_REGDEF_H */
