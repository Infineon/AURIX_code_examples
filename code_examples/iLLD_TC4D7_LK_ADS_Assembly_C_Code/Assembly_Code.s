;/**********************************************************************************************************************
; * \file Assembly_Code.src
; * \copyright Copyright (C) Infineon Technologies AG 2019
; *
; * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
; * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
; * are agreed, use of this file is subject to following:
; *
; * Boost Software License - Version 1.0 - August 17th, 2003
; *
; * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
; * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
; * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
; * Software is furnished to do so, all subject to the following:
; *
; * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
; * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
; * derivative works of the Software, unless such copies or derivative works are solely in the form of
; * machine-executable object code generated by a source language processor.
; *
; * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
; * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
; * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
; * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
; * IN THE SOFTWARE.
; *********************************************************************************************************************/

;/*********************************************************************************************************************/
;/*------------------------------------------------Function Prototypes------------------------------------------------*/
;/*********************************************************************************************************************/
.section .text,"ax",@progbits
.align 4

.global set_LED1_State_Assembly
.type   set_LED1_State_Assembly, @function

;/*********************************************************************************************************************/
;/*---------------------------------------------Function Implementations----------------------------------------------*/
;/*********************************************************************************************************************/
    
set_LED1_State_Assembly:
    
    jne %d4, 0, switch_on  /* Check the passed value, stored in D4*/
    mov %d0, 0x20          /* If 0 "LED_OFF", switch off LED1: by writing 0x20 */
    sh %d0, %d1, 4         /* Shift of 4 bits*/
    j common
    
    switch_on:              /* Else 1 "LED_ON", switch on LED1 by writing 0x200000 */
    mov %d1, 0x20
    sh %d0, %d1, 20         /* Shift of 20 bits*/
    
  common:
    movh.a %a0, 0xF004   /* Load the address of P03_OMR 0xF003AC3Cu*/
    lea %a0, [%a0]-0x53C4
    st.w [%a0], %d0      /* Store the D0 value to the target register */
 
  ret                    /* Return from the call needed to restore the context */
