/**********************************************************************************************************************
 * \file TLF35584.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 *
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are solely in the form of
 * machine-executable object code generated by a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef TLF35584_H_
#define TLF35584_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define DUMMY_DATA                  0           /* Dummy data used to read the content of the TLF35584 registers     */
#define CLEAR_STATUS_FLAGS          0x3F        /* Mask used to clear system status flags given in several register  */
#define CLEAR_WAKEUP_FLAGS          0x1F        /* Mask used to clear system status flags from wake-up register      */

/*********************************************************************************************************************/
/*---------------------------------------------------Enumerations----------------------------------------------------*/
/*********************************************************************************************************************/
/* TLF35584 SPI commands */
typedef enum
{
    SpiCommand_read  = 0,                       /* Read operation SPI command                   */
    SpiCommand_write = 1                        /* Write operation SPI command                  */
} spiCommandType;

/* TLF35584 register address space */
typedef enum
{
    DEVCFG0RegAddr      = 0x00,                 /* Device configuration 0                       */
    DEVCFG1RegAddr      = 0x01,                 /* Device configuration 1                       */
    DEVCFG2RegAddr      = 0x02,                 /* Device configuration 2                       */
    ProtcfgRegAddr      = 0x03,                 /* Protection register                          */
    SYSPCFG0RegAddr     = 0x04,                 /* Protected System configuration request 0     */
    Syspcfg1RegAddr     = 0x05,                 /* Protected System configuration request 1     */
    Wdcfg0RegAddr       = 0x06,                 /* Protected Watchdog configuration request 0   */
    RSYSPCFG0RegAddr    = 0x0B,                 /* System configuration 0 status                */
    Rsyspcfg1RegAddr    = 0x0C,                 /* System configuration 1 status                */
    Rwdcfg0RegAddr      = 0x0D,                 /* Watchdog configuration 0 status              */
    Wktimcfg0           = 0x12,                 /* Wake timer configuration 0                   */
    Wktimcfg1           = 0x13,                 /* Wake timer configuration 1                   */
    Wktimcfg2           = 0x14,                 /* Wake timer configuration 2                   */
    DevctrlRegAddr      = 0x15,                 /* Device control request                       */
    DevctrlnRegAddr     = 0x16,                 /* Device control inverted request              */
    WwdscmdRegAddr      = 0x17,                 /* Window watchdog service command              */
    SysfailRegAddr      = 0x1A,                 /* Failure status flags                         */
    SyssfRegAddr        = 0x1D,                 /* System status flags                          */
    SpisfRegAddr        = 0x1F,                 /* SPI status flags                             */
    MONSF0RegAddr       = 0x20,                 /* Monitor status flags 0                       */
    MONSF1RegAddr       = 0x21,                 /* Monitor status flags 1                       */
    MONSF2RegAddr       = 0x22,                 /* Monitor status flags 2                       */
    VmonstatRegAddr     = 0x26,                 /* Voltage monitor status                       */
    DevstatRegAddr      = 0x27,                 /* Device status                                */
    WKSFRegAddr         = 0x1E,                 /* Wakeup status flags                          */
    ABISTslc0RegAddr    = 0x2E,                 /* ABIST overvoltage comparator configuration   */
    ABISTslc1RegAddr    = 0x2F,                 /* ABIST undervoltage comparator configuration  */
} tlf35584RegAddr;

/* Protection key */
typedef enum
{
    UnlockKey1  = 0xAB,                         /* Key 1 to unlock protected registers          */
    UnlockKey2  = 0xEF,                         /* Key 2 to unlock protected registers          */
    UnlockKey3  = 0x56,                         /* Key 3 to unlock protected registers          */
    UnlockKey4  = 0x12,                         /* Key 4 to unlock protected registers          */
    LockKey1    = 0xDF,                         /* Key 1 to lock protected registers            */
    LockKey2    = 0x34,                         /* Key 2 to lock protected registers            */
    LockKey3    = 0xBE,                         /* Key 3 to lock protected registers            */
    LockKey4    = 0xCA,                         /* Key 4 to lock protected registers            */
} keyType;

/* Request ERR pin monitor recovery time */
typedef enum
{
    ErrPinMonitorRecoveryTime_1ms   = 0,        /* 1ms      */
    ErrPinMonitorRecoveryTime_2_5ms = 1,        /* 2.5ms    */
    ErrPinMonitorRecoveryTime_5ms   = 2,        /* 5ms      */
    ErrPinMonitorRecoveryTime_10ms  = 3         /* 10ms     */
} errrecType;

/* Request ERR pin monitor recovery enable */
typedef enum
{
    ErrPinMonitorRecovery_disabled = 0,         /* Disabled */
    ErrPinMonitorRecovery_enabled  = 1          /* Enabled  */
} errrecenType;

/* setting variables */
typedef enum
{
    Disable = 0,                                /* Disabled */
    Enable  = 1                                  /* Enabled  */
} SettingType;

/* Request ERR pin monitor enable */
typedef enum
{
    ErrPinMonitor_disabled = 0,                 /* Disabled */
    ErrPinMonitor_enabled  = 1                  /* Enabled  */
} errentype;

/* Request ERR pin monitor functionality enable while the system is in SLEEP */
typedef enum
{
    ErrPinMonitorInSleep_disabled = 0,          /* ERR pin monitor is disabled in SLEEP                                 */
    ErrPinMonitorInSleep_enabled  = 1           /* ERR pin monitor can be active in SLEEP depending on ERREN bit value  */
} errslpenType;

/* Request safe state 2 delay */
typedef enum
{
    SafeState2Delay_noDelay = 0,                /* No delay */
    SafeState2Delay_10ms    = 1,                /* 10ms     */
    SafeState2Delay_50ms    = 2,                /* 50ms     */
    SafeState2Delay_100ms   = 3,                /* 100ms    */
    SafeState2Delay_250ms   = 4                 /* 250ms    */
} ss2delType;

/* Request watchdog cycle time */
typedef enum
{
    WatchdogCycleTime_0_1ms = 0,                /* 0.1ms tick period */
    WatchdogCycleTime_1ms   = 1                 /* 1ms tick period */
} wdcycType;

/* Request window watchdog trigger selection */
typedef enum
{
    WindowWatchdogTriggerSelection_external   = 0,  /* External WDI input used as a WWD trigger             */
    WindowWatchdogTriggerSelection_spiCommand = 1   /* WWD is triggered by SPI write to WWDSCMD register    */
} wwdtselType;

/* Request functional watchdog enable */
typedef enum
{
    FunctionalWatchdog_disabled = 0,            /* Disabled */
    FunctionalWatchdog_enabled  = 1             /* Enabled  */
} fwdenType;

/* Request window watchdog enable */
typedef enum
{
    WindowWatchdog_disabled = 0,                /* Disabled */
    WindowWatchdog_enabled  = 1                 /* Enabled  */
} wwdenType;

/* Request for device state transition
 * Cleared to 0b000 by the HW after the request is processed. After writing a new state
 * value a user should not change the value before it's cleared by HW.
 */
typedef enum
{
    DeviceStateTransition_none     = 0,         /* NONE     */
    DeviceStateTransition_init     = 1,         /* INIT     */
    DeviceStateTransition_normal   = 2,         /* NORMAL   */
    DeviceStateTransition_sleep    = 3,         /* SLEEP    */
    DeviceStateTransition_standby  = 4,         /* STANDBY  */
    DeviceStateTransition_wake     = 5,         /* WAKE     */
    DeviceStateTransition_reserved = 6,         /* RESERVED */
} statereqType;

/* Request voltage reference QVR enable */
typedef enum
{
    VoltageReferenceQVR_disabled = 0,           /* QVR will be disabled after valid request */
    VoltageReferenceQVR_enabled  = 1            /* QVR will be enabled after valid request  */
} vrefenType;

/* Request communication LDO QCO enable */
typedef enum
{
    CommunicationLdoQCO_disabled = 0,           /* QCO will be disabled after valid request */
    CommunicationLdoQCO_enabled  = 1            /* QCO will be enabled after valid request  */
} comenType;

/* Request tracker1 QT1 enable */
typedef enum
{
    Tracker1QT_disabled = 0,                    /* QT1 will be disabled after valid request */
    Tracker1QT_enabled  = 1                     /* QT1 will be enabled after valid request  */
} trk1enType;

/* Request tracker2 QT2 enable */
typedef enum
{
    Tracker2QT_disabled = 0,                    /* QT2 will be disabled after valid request */
    Tracker2QT_enabled  = 1                     /* QT2 will be enabled after valid request  */
} trk2enType;

/* State transition request failure flag
 * Requested state transition via DEVCTRL & DEVCTRLN could not be performed because of wrong protocol
 */
typedef enum
{
    StateTransitionRequest_noError = 0,         /* Write 0 - no action                          */
    StateTransitionRequest_errorDetected = 1    /* Event detected, write 1 to clear the flag    */
} no_opType;

/* Transition to low power failed flag
 * Transition to low power failed either due to the QUC current monitor,
 * WAK high level or a rising edge on ENA during TRDEL time
 */
typedef enum
{
    TransitionToLowPower_noError = 0,           /* Write 0 - no action                          */
    TransitionToLowPower_errorDetected = 1      /* Event detected, write 1 to clear the flag    */
} trfailType;

/* MCU error miss status flag
 * Set only when SYSPCFG1.ERRRECEN='1'
 */
typedef enum
{
    McuErrorMiss_noError = 0,                   /* Write 0 - no action                          */
    McuErrorMiss_errorDetected = 1              /* Event detected, write 1 to clear the flag    */
} errmissType;

/* Functional watchdog error interrupt flag */
typedef enum
{
    FunctionalWatchdog_noError = 0,             /* Write 0 - no action                          */
    FunctionalWatchdog_errorDetected = 1        /* Event detected, write 1 to clear the flag    */
} fwdeType;

/* Window watchdog error interrupt flag */
typedef enum
{
    WindowWatchdog_noError = 0,                 /* Write 0 - no action                          */
    WindowWatchdog_errorDetected = 1            /* Event detected, write 1 to clear the flag    */
} wwdeType;

/* Protected configuration double bit error flag
 * Double bit error occurred on protected configuration register.
 * Status registers shall be read in order to determine which configuration has changed.
 */
typedef enum
{
    ProtectedConfigurationDoubleBit_noError = 0,        /* Write 0 - no action                          */
    ProtectedConfigurationDoubleBit_errorDetected = 1   /* Event detected, write 1 to clear the flag    */
} cfgeType;

/* SPI frame parity error flag
 * Number of detected SPI clock cycles different than 16.
 */
typedef enum
{
    SpiFrameParity_noError       = 0,           /* Write 0 - no action                          */
    SpiFrameParity_errorDetected = 1            /* Event detected, write 1 to clear the flag    */
} pareType;

/* SPI frame parity error flag
 * Number of detected SPI clock cycles different than 16.
 */
typedef enum
{
    SpiFrameLengthInvalid_noError       = 0,    /* Write 0 - no action                          */
    SpiFrameLengthInvalid_errorDetected = 1     /* Event detected, write 1 to clear the flag    */
} leneType;

/* SPI address invalid flag */
typedef enum
{
    SpiAddressInvalid_noError       = 0,        /* Write 0 - no action                          */
    SpiAddressInvalid_errorDetected = 1         /* Event detected, write 1 to clear the flag    */
} addreType;

/* SPI frame duration error flag
 * SCS low for more than 2ms.
 */
typedef enum
{
    SpiFrameDuration_noError       = 0,         /* Write 0 - no action                          */
    SpiFrameDuration_errorDetected = 1          /* Event detected, write 1 to clear the flag    */
} dureType;

/* LOCK or UNLOCK procedure error flag */
typedef enum
{
    LockOrUnlockProcedure_noError       = 0,    /* Write 0 - no action                          */
    LockOrUnlockProcedure_errorDetected = 1     /* Event detected, write 1 to clear the flag    */
} lockType;

/* Device state */
typedef enum
{
    DeviceState_none     = 0,                   /* NONE     */
    DeviceState_init     = 1,                   /* INIT     */
    DeviceState_normal   = 2,                   /* NORMAL   */
    DeviceState_sleep    = 3,                   /* SLEEP    */
    DeviceState_standby  = 4,                   /* STANDBY  */
    DeviceState_wake     = 5,                   /* WAKE     */
    DeviceState_reserved = 6,                   /* RESERVED */
} stateStatusType;

/* Reference voltage enable status */
typedef enum
{
    ReferenceVoltage_disabled = 0,              /* Voltage is disabled  */
    ReferenceVoltage_enabled  = 1               /* Voltage is enabled   */
} vrefenStatusType;

/* Standby LDO enable status */
typedef enum
{
    StandbyLdoVoltage_disabled = 0,             /* Voltage is disabled  */
    StandbyLdoVoltage_enabled  = 1              /* Voltage is enabled   */
} stbyenStatusType;

/* Communication LDO enable status */
typedef enum
{
    CommunicationLdoVoltage_disabled = 0,       /* Voltage is disabled  */
    CommunicationLdoVoltage_enabled  = 1        /* Voltage is enabled   */
} comenStatusType;

/* Tracker1 voltage enable status */
typedef enum
{
    Tracker1Voltage_disabled = 0,               /* Voltage is disabled  */
    Tracker1Voltage_enabled  = 1                /* Voltage is enabled   */
} trk1enStatusType;

/* Tracker2 voltage enable status */
typedef enum
{
    Tracker2Voltage_disabled = 0,               /* Voltage is disabled  */
    Tracker2Voltage_enabled  = 1                /* Voltage is enabled   */
} trk2enStatusType;

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
/* Protected System configuration request 1 bitfields*/
typedef struct
{
    errrecType      ERRREC:2;           /* Request ERR pin monitor recovery time                                     */
    errrecenType    ERRRECEN:1;         /* Request ERR pin monitor recovery enable                                   */
    errentype       ERREN:1;            /* Request ERR pin monitor enable                                            */
    errslpenType    ERRSLPEN:1;         /* Request ERR pin monitor functionality enable while the system is in SLEEP */
    ss2delType      SS2DEL:3;           /* Request safe state 2 delay                                                */
} tlf35584Syspcfg1Bits;

/* Protected Watchdog configuration request 0 bitfields */
typedef struct
{
    wdcycType       WDCYC:1;            /* Request watchdog cycle time                                               */
    wwdtselType     WWDTSEL:1;          /* Request window watchdog trigger selection                                 */
    fwdenType       FWDEN:1;            /* Request functional watchdog enable                                        */
    wwdenType       WWDEN:1;            /* Request window watchdog enable                                            */
    uint8           WWDETHR:4;          /* Request window watchdog error threshold                                   */
} tlf35584Wdcfg0Bits;

/* Device control request bitfields*/
typedef struct
{
    statereqType    STATEREQ:3;         /* Request for device state transition                                       */
    vrefenType      VREFEN:1;           /* Request voltage reference QVR enable                                      */
    uint8           reserved:1;         /* unused bit                                                                */
    comenType       COMEN:1;            /* Request communication ldo QCO enable                                      */
    trk1enType      TRK1EN:1;           /* Request tracker1 QT1 enable                                               */
    trk2enType      TRK2EN:1;           /* Request tracker2 QT2 enable                                               */
} tlf35584DevctrlBits;

/* Window watchdog service command bitfields*/
typedef struct
{
    uint8           TRIG:1;             /* Window watchdog SPI trigger command                                       */
    uint8           reserved:6;         /* unused bits                                                               */
    uint8           TRIG_STATUS:1;      /* Last SPI trigger received                                                 */
} tlf35584WwdscmdBits;

/* System status flags bitfields*/
typedef struct
{
    cfgeType        CFGE:1;             /* Protected configuration double bit error flag                             */
    wwdeType        WWDE:1;             /* Window watchdog error interrupt flag                                      */
    fwdeType        FWDE:1;             /* Functional watchdog error interrupt flag                                  */
    errmissType     ERRMISS:1;          /* MCU error miss status flag                                                */
    trfailType      TRFAIL:1;           /* Transition to low power failed flag                                       */
    no_opType       NO_OP:1;            /* State transition request failure flag                                     */
    uint8           reserved:2;         /* unused bits                                                               */
} tlf35584SyssfBits;

typedef struct
{
    SettingType     INITF:1;          /* Double Bit error on voltage selection flag                                   */
    SettingType     WWDE:1;           /* Over temperature failure flag                                                */
    SettingType     FWDE:1;           /* Voltage monitor failure flag                                                 */
    uint8           reserved:3;       /* unused bits                                                                  */
    SettingType     ERRMISS:1;           /* ABIST operation interrupted flag                                          */
    SettingType     RFAIL:1;           /* INIT failure flag                                                           */
} tlf35584SysfailBits;

/* SPI status flags bitfields*/
typedef struct
{
    pareType        PARE:1;             /* SPI frame parity error flag                                               */
    leneType        LENE:1;             /* SPI frame length invalid flag                                             */
    addreType       ADDRE:1;            /* SPI address invalid flag                                                  */
    dureType        DURE:1;             /* SPI frame duration error flag                                             */
    lockType        LOCK:1;             /* LOCK or UNLOCK procedure error flag                                       */
    uint8           reserved:3;         /* unused bits                                                               */
} tlf35584SpisfBits;

typedef struct
{
    uint8           reserved:2;            /* unused bits                                                               */
    SettingType     STBYST:1;
    SettingType     VCOREST:1;
    SettingType     COMST:1;
    SettingType     VREFST:1;
    SettingType     TRK1ST:1;
    SettingType     TRK2ST:1;
} tlf35584VmonstatBits;

/* Device status bitfields */
typedef struct
{
    stateStatusType     STATE:3;        /* Device status                                                             */
    vrefenStatusType    VREFEN:1;       /* Reference voltage enable status                                           */
    stbyenStatusType    STBYEN:1;       /* Standby LDO enable status                                                 */
    comenStatusType     COMEN:1;        /* Communication LDO enable status                                           */
    trk1enStatusType    TRK1EN:1;       /* Tracker1 voltage enable status                                            */
    trk2enStatusType    TRK2EN:1;       /* Tracker2 voltage enable status                                            */
} tlf35584DevstatBits;

/* SPI status flags bitfields*/
typedef struct
{
    SettingType        WAK:1;                 /* WAK signal wakeup flag                                                    */
    SettingType        ENA:1;                 /* ENA signal wakeup flag                                                    */
    SettingType        CMON:1;                /* QUC current monitor threshold wakeup flag                                 */
    SettingType        WKTIM:1;               /* Wake timer wakeup flag                                                    */
    SettingType        WKSPI:1;               /* Wakeup from SLEEP by SPI flag                                             */
    uint8              reserved:3;            /* unused bits                                                               */
} tlf35584WksffBits;

typedef struct
{
    SettingType        PREGOV:1;              /* Select Pre-regulator OV comparator for ABIST operation                    */
    SettingType        UCOV:1;                /* Select uC LDO OV comparator for ABIST operation                           */
    SettingType        STBYOV:1;              /* Select Standby LDO OV comparator for ABIST operation                      */
    SettingType        VCOREOV:1;             /* Select Core voltage OV comparator for ABIST operation                     */
    SettingType        COMOV:1;               /* Select COM OV comparator for ABIST operation                              */
    SettingType        VREFOV:1;              /* Select VREF OV comparator for ABIST operation                             */
    SettingType        TRK1OV:1;              /* Select TRK1 OV comparator for ABIST operation                             */
    SettingType        TRK2OV:1;              /* Select TRK2 OV comparator for ABIST operation                             */
} tlf35584ABISTslc0Bits;

typedef struct
{
    SettingType        PREGUV:1;              /* Select Pre-regulator UV comparator for ABIST operation                    */
    SettingType        UCUV:1;                /* Select uC LDO UV comparator for ABIST operation                           */
    SettingType        STBYUV:1;              /* Select Standby LDO UV comparator for ABIST operation                      */
    SettingType        VCOREUV:1;             /* Select Core voltage UV comparator for ABIST operation                     */
    SettingType        COMUV:1;               /* Select COM UV comparator for ABIST operation                              */
    SettingType        VREFUV:1;              /* Select VREF UV comparator for ABIST operation                             */
    SettingType        TRK1UV:1;              /* Select TRK1 UV comparator for ABIST operation                             */
    SettingType        TRK2UV:1;              /* Select TRK2 UV comparator for ABIST operation                             */
} tlf35584ABISTslc1Bits;

typedef struct
{
    SettingType        TREDL:4;               /* Transition delay into low power states                                    */
    uint8              reserved:2;            /* unused bits                                                               */
    SettingType        WKTIMCYC:1;            /* Wake timer cycle period                                                   */
    SettingType        WKTIMEN:1;             /* Wake timer enable                                                         */
} tlf35584DEVCFG0Bits;

typedef struct
{
    SettingType        RESDEL:3;               /* Reset release delay time                                                  */
    uint8              reserved:5;            /* unused bits                                                               */
} tlf35584DEVCFG1Bits;

typedef struct
{
    SettingType        ESYNEN:1;              /* Synchronization output for external switchmode regulator enable           */
    SettingType        ESYNPHA:1;             /* External synchronization output phase                                     */
    uint8              CTHR:2;                /* QUC current monitoring threshold value                                    */
    SettingType        CMONEN:1;              /* QUC current monitor enable for transition to a low power state            */
    SettingType        FRE:1;                 /*Step-down converter frequency selection status                             */
    SettingType        STU:1;                 /*Step-up converter enable status                                            */
    SettingType        EVCEN:1;               /*External core supply enable status                                         */
} tlf35584DEVCFG2Bits;

typedef struct
{
    SettingType        STBIEN:1;              /* Request standby regulator QST enable                                      */
    uint8              reserved:7;            /* unused bits                                                               */
} tlf35584SYSPCFG0Bits;

typedef struct
{
    SettingType        STBIEN:1;              /* Standby regulator QST enable status                                       */
    uint8              reserved:7;            /* unused bits                                                               */
} tlf35584RSYSPCFG0Bits;

typedef struct
{
    SettingType        PREGSG:1;              /* Pre-regulator voltage short to ground status flag                         */
    SettingType        UCSG:1;                /* uC LDO short to ground status flag                                        */
    SettingType        STBYSG:1;              /* Standby LDO short to ground status flag                                   */
    SettingType        VCORESG:1;             /* Core voltage short to ground status flag                                  */
    SettingType        COMSG:1;               /* Communication LDO short to ground status flag                             */
    SettingType        VREFSG:1;              /* Voltage reference short to ground status flag                             */
    SettingType        TRK1SG:1;              /* Tracker1 short to ground status flag                                      */
    SettingType        TRK2SG:1;              /* Tracker2 short to ground status flag                                      */
} tlf35584MONSF0Bits;

typedef struct
{
    SettingType        PREGOV:1;              /* Pre-regulator  over voltage status flag                                    */
    SettingType        UCOV:1;                /* uC LDO short  over voltage status flag                                     */
    SettingType        STBYOV:1;              /* Standby LDO  over voltage status flag                                      */
    SettingType        VCOREOV:1;             /* Core voltage  over voltage status flag                                     */
    SettingType        COMOV:1;               /* Communication LDO  over voltage status flag                                */
    SettingType        VREFOV:1;              /* Voltage reference  over voltage status flag                                */
    SettingType        TRK1OV:1;              /* Tracker1  over voltage status flag                                         */
    SettingType        TRK2OV:1;              /* Tracker2  over voltage status flag                                         */
} tlf35584MONSF1Bits;

typedef struct
{
    SettingType        PREGUV:1;              /* Pre-regulator  under voltage status flag                                    */
    SettingType        UCUV:1;                /* uC LDO short  under voltage status flag                                     */
    SettingType        STBYUV:1;              /* Standby LDO  under voltage status flag                                      */
    SettingType        VCOREUV:1;             /* Core voltage  under voltage status flag                                     */
    SettingType        COMUV:1;               /* Communication LDO  under voltage status flag                                */
    SettingType        VREFUV:1;              /* Voltage reference  under voltage status flag                                */
    SettingType        TRK1UV:1;              /* Tracker1  under voltage status flag                                         */
    SettingType        TRK2UV:1;              /* Tracker2  under voltage status flag                                         */
} tlf35584MONSF2Bits;

typedef struct
{
    uint8              TIMVALL:8;                /* Wake timer value lower bits                                              */
} tlf35584WKTIMCFG0Bits;

typedef struct
{
    uint8              TIMVALM:8;                /* Wake timer value middle bits                                             */
} tlf35584WKTIMCFG1Bits;

typedef struct
{
    uint8              TIMVALH:8;                /* Wake timer value higher bits                                             */
} tlf35584WKTIMCFG2Bits;


/* Protection register bitfields*/
typedef struct
{
    keyType           KEY:8;            /* Protection key   */
} tlf35584ProtcfgBits;

/* Protection register */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584ProtcfgBits B;              /* Bitfield access  */
} tlf35584Protcfg;

/* Protected System configuration request 1 */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584Syspcfg1Bits B;             /* Bitfield access  */
} tlf35584Syspcfg1;

/* Protected Watchdog configuration request 0 */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584Wdcfg0Bits B;               /* Bitfield access  */
} tlf35584Wdcfg0;

/* Device control request */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584DevctrlBits B;              /* Bitfield access  */
} tlf35584Devctrl;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584WwdscmdBits B;              /* Bitfield access  */
} tlf35584Wwdscmd;

/* System status flags */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584SyssfBits B;                /* Bitfield access  */
} tlf35584Syssf;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584SysfailBits B;                /* Bitfield access  */
} tlf35584Sysfail;

/* SPI status flags */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584SpisfBits B;                /* Bitfield access  */
} tlf35584Spisf;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584VmonstatBits B;              /* Bitfield access  */
} tlf35584Vmonstat;

/* Device status */
typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584DevstatBits B;              /* Bitfield access  */
} tlf35584Devstat;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584WksffBits B;                /* Bitfield access  */
} tlf35584Wksf;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584ABISTslc0Bits B;            /* Bitfield access  */
} tlf35584Abisslc0;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584ABISTslc1Bits B;            /* Bitfield access  */
} tlf35584Abisslc1;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584DEVCFG0Bits B;              /* Bitfield access  */
} tlf35584Devcfg0;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584DEVCFG1Bits B;              /* Bitfield access  */
} tlf35584Devcfg1;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584DEVCFG2Bits B;              /* Bitfield access  */
} tlf35584Devcfg2;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584SYSPCFG0Bits B;             /* Bitfield access  */
} tlf35584Syspcfg0;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584RSYSPCFG0Bits B;            /* Bitfield access  */
} tlf35584Rsyspcfg0;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584MONSF0Bits B;               /* Bitfield access  */
} tlf35584Monsf0;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584MONSF1Bits B;               /* Bitfield access  */
} tlf35584Monsf1;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584MONSF2Bits B;                /* Bitfield access  */
} tlf35584Monsf2;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584WKTIMCFG0Bits B;                /* Bitfield access  */
} tlf35584Wktimcfg0;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584WKTIMCFG1Bits B;                /* Bitfield access  */
} tlf35584Wktimcfg1;

typedef union
{
    uint8 U;                            /* Unsigned access  */
    sint8 I;                            /* Signed access    */
    tlf35584WKTIMCFG2Bits B;                /* Bitfield access  */
} tlf35584Wktimcfg2;

/* TLF35584 register structure */
typedef volatile struct
{
    tlf35584Protcfg      PROTCFG;       /* 0x03, Protection register                        */
    tlf35584Syspcfg1     SYSPCFG1;      /* 0x05, Protected System configuration request 1   */
    tlf35584Wdcfg0       WDCFG0;        /* 0x06, Protected Watchdog configuration request 0 */
    tlf35584Syspcfg1     RSYSPCFG1;     /* 0x0C, System configuration 1 status              */
    tlf35584Wdcfg0       RWDCFG0;       /* 0x0D, Watchdog configuration 0 status            */
    tlf35584Devctrl      DEVCTRL;       /* 0x15, Device control request                     */
    tlf35584Devctrl      DEVCTRLN;      /* 0x16, Device control inverted request            */
    tlf35584Wwdscmd      WWDSCMD;       /* 0x17, Window watchdog service command            */
    tlf35584Syssf        SYSSF;         /* 0x1D, System status flags                        */
    tlf35584Sysfail      SYSFAIL;       /* 0x1A, Failure status flags                       */
    tlf35584Spisf        SPISF;         /* 0x1F, SPI status flags                           */
    tlf35584Vmonstat     VMONSTAT;      /* 0x26, Voltage monitor status                     */
    tlf35584Devstat      DEVSTAT;       /* 0x27, Device status                              */
    tlf35584Wksf         WKSF;          /* 0x1E, Wakeup status                              */
    tlf35584Abisslc0     ABISSLC0;      /* 0x2E, ABIST_SELECT0                              */
    tlf35584Abisslc1     ABISSLC1;      /* 0x2F, ABIST_SELECT1                              */
    tlf35584Devcfg0      DEVCFG0;       /* 0x00, Device_Config                              */
    tlf35584Devcfg1      DEVCFG1;       /* 0x00, Device_Config                              */
    tlf35584Devcfg2      DEVCFG2;       /* 0x00, Device_Config                              */
    tlf35584Syspcfg0     SYSPCFG0;      /* 0x04, Protected System configuration request 0   */
    tlf35584Rsyspcfg0    RSYSPCFG0;     /* 0x0B, System configuration 0 status              */
    tlf35584Monsf0       MONSF0;        /* 0x20, Monitor status flags 0                     */
    tlf35584Monsf1       MONSF1;        /* 0x21, Monitor status flags 1                     */
    tlf35584Monsf2       MONSF2;        /* 0x22, Monitor status flags 2                     */
    tlf35584Wktimcfg0    WKTIMCFG0;      /* 0x12, Wake timer low part                       */
    tlf35584Wktimcfg1    WKTIMCFG1;      /* 0x12, Wake timer low part                       */
    tlf35584Wktimcfg2    WKTIMCFG2;      /* 0x12, Wake timer low part                       */
} tlf35584;

typedef struct
{

    uint32                  data:8;     /* Data part of the SPI frame structure             */
    tlf35584RegAddr         addr:6;     /* Address part of the SPI frame structure          */
    spiCommandType          cmd:1;      /* Command part of the SPI frame structure          */
    uint32                  reserved:1; /* Parity part is automatically generated by the HW */
} tlf35584SpiFrameTypeBits;

typedef union
{
    uint16 U;                           /* Unsigned access  */
    sint16 I;                           /* Signed access    */
    tlf35584SpiFrameTypeBits B;         /* Bitfield access  */
} tlf35584SpiFrameType;

/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN tlf35584 g_tlfDevice;

/*********************************************************************************************************************/
/*------------------------------------------------Function Prototypes------------------------------------------------*/
/*********************************************************************************************************************/
void initQSPI(void);
void initTLF35584(tlf35584 *tlfDevice);
uint8 getSystemStatusFlagsTLF35584(tlf35584 *tlfDevice);
uint8 getWakeupStatusFlagsTLF35584(tlf35584 *tlfDevice);
void STANDBYConfig(tlf35584 *tlfDevice);
void clearSystemStatusFlagsTLF35584(tlf35584 *tlfDevice);
void clearWakeupStatusFlagsTLF35584(tlf35584 *tlfDevice);
void setStateTransitionTLF35584(tlf35584 *tlfDevice, statereqType requestedStateTransition);
stateStatusType getCurrentStateTLF35584(tlf35584 *tlfDevice);
void unlockRegisterTLF35584(void);
void enableWindowWatchdogTLF35584(tlf35584 *tlfDevice);
void disableWindowWatchdogTLF35584(tlf35584 *tlfDevice);
void enableWatchdogTLF35584(tlf35584 *tlfDevice);
void disableWatchdogTLF35584(tlf35584 *tlfDevice);
void enableErrPinMonitorTLF35584(tlf35584 *tlfDevice);
void lockRegisterTLF35584(void);
void EnableSTANDBYQST(tlf35584 *tlfDevice);
void globalClearStatus(tlf35584 *tlfDevice);
#endif /* TLF35584_H_ */
