/**
 * \file IfxHsct_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_HSSL/V0.2.1.1.4
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Hsct_Registers Hsct Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Hsct_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Hsct_Registers
 * 
 * \defgroup IfxSfr_Hsct_Registers_union Register unions
 * \ingroup IfxSfr_Hsct_Registers
 * 
 * \defgroup IfxSfr_Hsct_Registers_struct Memory map
 * \ingroup IfxSfr_Hsct_Registers
 */
#ifndef IFXHSCT_REGDEF_H
#define IFXHSCT_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Hsct_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_HSCT_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_HSCT_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_HSCT_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_HSCT_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_HSCT_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_HSCT_ACCEN_RDB_FPI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_HSCT_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_HSCT_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_HSCT_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_HSCT_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_HSCT_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_HSCT_ACCEN_WRB_FPI_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_HSCT_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Sleep Mode Enable Control - EDIS (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_HSCT_CLC_Bits;

/** \brief Configuration Physical Layer Register */
typedef struct _Ifx_HSCT_CONFIGPHY_Bits
{
    __IO Ifx_UReg_32Bit PON:1;             /**< \brief [0:0] Physical Layer Power On. (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [15:1] \internal Reserved */
    __IO Ifx_UReg_32Bit CORCEN:5;          /**< \brief [20:16] Correlator phase enable - allows to en/dis each of the 5 Phase o/p separately. (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_HSCT_CONFIGPHY_Bits;

/** \brief Clear To Send Control Register */
typedef struct _Ifx_HSCT_CTSCTRL_Bits
{
    __IO Ifx_UReg_32Bit CTS_FRAME:1;       /**< \brief [0:0] Transmit CTS Frame Generation - CTS_FRAME (rw) */
    __IO Ifx_UReg_32Bit CTS_TXD:1;         /**< \brief [1:1] Disable TX CTS signaling - CTS_TXD (rw) */
    __IO Ifx_UReg_32Bit CTS_RXD:1;         /**< \brief [2:2] Disable RX CTS detection - CTS_RXD (rw) */
    __IO Ifx_UReg_32Bit HSSL_CTS_FBD:1;    /**< \brief [3:3] Disable HSSL interface CTS Frame Blocking - HSSL_CTS_FBD (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_HSCT_CTSCTRL_Bits;

/** \brief Transmission Disable Register */
typedef struct _Ifx_HSCT_DISABLE_Bits
{
    __IO Ifx_UReg_32Bit TX_DIS:1;          /**< \brief [0:0] Disable HSCT Transmit path in Master interface - TX_DIS (rw) */
    __IO Ifx_UReg_32Bit RX_DIS:1;          /**< \brief [1:1] Disable HSCT Receive path in Master interface - RX_DIS (rw) */
    __IO Ifx_UReg_32Bit RX_HEPD:1;         /**< \brief [2:2] Disable RX Header Error Discard Payload data. - RX_HEPD (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_HSCT_DISABLE_Bits;

/** \brief Module Identification Register */
typedef struct _Ifx_HSCT_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUMBER (r) */
} Ifx_HSCT_ID_Bits;

/** \brief Interface Control Register */
typedef struct _Ifx_HSCT_IFCTRL_Bits
{
    __IO Ifx_UReg_32Bit IFCVS:8;           /**< \brief [7:0] Master Mode - Trigger for Interface Control Value to be send to Slave interface (rw) */
    __O  Ifx_UReg_32Bit SIFCV:1;           /**< \brief [8:8] Master Mode - Slave IF control frame trigger - SIFCV (w) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit MRXSPEED:2;        /**< \brief [17:16] Master Mode RX speed - MRXSPEED (rw) */
    __IO Ifx_UReg_32Bit MTXSPEED:2;        /**< \brief [19:18] Master Mode TX speed - MTXSPEED (rw) */
    __IO Ifx_UReg_32Bit IFTESTMD:1;        /**< \brief [20:20] Interface TX Test Mode - IFTESTMD (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [31:21] \internal Reserved */
} Ifx_HSCT_IFCTRL_Bits;

/** \brief Interface Status Register */
typedef struct _Ifx_HSCT_IFSTAT_Bits
{
    __I  Ifx_UReg_32Bit RX_STAT:3;         /**< \brief [2:0] HSCT Slave interface Status for RX link - RX_STAT (rh) */
    __I  Ifx_UReg_32Bit TX_STAT:2;         /**< \brief [4:3] HSCT Slave interface Status for TX link - TX_STAT (rh) */
    __I  Ifx_UReg_32Bit TX_EN:1;           /**< \brief [5:5] HSCT LVDS Slave interface TX enable - TX_EN (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_HSCT_IFSTAT_Bits;

/** \brief Initialization Register */
typedef struct _Ifx_HSCT_INIT_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SYS_CLK_EN:1;      /**< \brief [1:1] Enable HSCT SysClk in Master interface - SYS_CLK_EN (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit IFM:1;             /**< \brief [3:3] Select Interface Mode - IFM (rw) */
    __IO Ifx_UReg_32Bit SRCF:2;            /**< \brief [5:4] Select Reference Clock Frequency Divider - SRCF (rw) */
    __IO Ifx_UReg_32Bit SSCF:2;            /**< \brief [7:6] Select SysClk Frequency Divider - SSCF (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TXHD:3;            /**< \brief [18:16] Transmit High Speed Divider. - TXHD (rw) */
    __IO Ifx_UReg_32Bit RXHD:3;            /**< \brief [21:19] Receive High Speed Divider. - RXHD (rw) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_HSCT_INIT_Bits;

/** \brief Interrupt register */
typedef struct _Ifx_HSCT_IRQ_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit HER:1;             /**< \brief [1:1] Header error detected - HER (rh) */
    __I  Ifx_UReg_32Bit PYER:1;            /**< \brief [2:2] Payload error detected - PYER (rh) */
    __I  Ifx_UReg_32Bit CER:1;             /**< \brief [3:3] HSCT command error - CER (rh) */
    __I  Ifx_UReg_32Bit IFCFS:1;           /**< \brief [4:4] HSCT interface control frame send - IFCFS (rh) */
    __I  Ifx_UReg_32Bit SMER:1;            /**< \brief [5:5] Speed Mode Switch Error (Master Mode only) - SMER (rh) */
    __I  Ifx_UReg_32Bit USMSF:1;           /**< \brief [6:6] Unsolicited message frame send finished - USMSF (rh) */
    __I  Ifx_UReg_32Bit PLER:1;            /**< \brief [7:7] PLL lost lock error - PLER (rh) */
    __I  Ifx_UReg_32Bit USM:1;             /**< \brief [8:8] Unsolicited Message Received - USM (rh) */
    __I  Ifx_UReg_32Bit PAR:1;             /**< \brief [9:9] PING Answer Received - PAR (rh) */
    __I  Ifx_UReg_32Bit TXTE:1;            /**< \brief [10:10] TX transfer error occurred on a disabled TX channel. - TXTE (rh) */
    __I  Ifx_UReg_32Bit SFO:1;             /**< \brief [11:11] Synchronization FIFO overflow (in RX direction) - SFO (rh) */
    __I  Ifx_UReg_32Bit SFU:1;             /**< \brief [12:12] Synchronization FIFO underflow (in TX direction) - SFU (rh) */
    __I  Ifx_UReg_32Bit MSCE:1;            /**< \brief [13:13] Multi Slave scenario Command Error - MSCE (rh) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_HSCT_IRQ_Bits;

/** \brief Interrupt Clear Register */
typedef struct _Ifx_HSCT_IRQCLR_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __O  Ifx_UReg_32Bit HERCLR:1;          /**< \brief [1:1] Header error detected interrupt clear - HERCLR (w) */
    __O  Ifx_UReg_32Bit PYERCLR:1;         /**< \brief [2:2] Payload error detected interrupt clear - PYERCLR (w) */
    __O  Ifx_UReg_32Bit CERCLR:1;          /**< \brief [3:3] HSCT command error interrupt clear - CERCLR (w) */
    __O  Ifx_UReg_32Bit IFCFSCLR:1;        /**< \brief [4:4] HSCT interface control command send interrupt clear - IFCFSCLR (w) */
    __O  Ifx_UReg_32Bit SMERCLR:1;         /**< \brief [5:5] Speed Mode Switch Error interrupt clear - SMERCLR (w) */
    __O  Ifx_UReg_32Bit USMSFCLR:1;        /**< \brief [6:6] Unsolicited message frame send finished interrupt clear - USMSFCLR (w) */
    __O  Ifx_UReg_32Bit PLERCLR:1;         /**< \brief [7:7] PLL lost lock error interrupt clear - PLERCLR (w) */
    __O  Ifx_UReg_32Bit USMCLR:1;          /**< \brief [8:8] Unsolicited Message received clear - USMCLR (w) */
    __O  Ifx_UReg_32Bit PARCLR:1;          /**< \brief [9:9] PING Answer received clear - PARCLR (w) */
    __O  Ifx_UReg_32Bit TXTECLR:1;         /**< \brief [10:10] TX disable error interrupt clear - TXTECLR (w) */
    __O  Ifx_UReg_32Bit SFOCLR:1;          /**< \brief [11:11] Synchronization FIFO overflow (in RX direction) interrupt clear - SFOCLR (w) */
    __O  Ifx_UReg_32Bit SFUCLR:1;          /**< \brief [12:12] Synchronization FIFO underflow (in TX direction) interrupt clear - SFUCLR (w) */
    __O  Ifx_UReg_32Bit MSCELR:1;          /**< \brief [13:13] Multi Slave scenario Command Error interrupt clear - MSCELR (w) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_HSCT_IRQCLR_Bits;

/** \brief Interrupt Enable Register */
typedef struct _Ifx_HSCT_IRQEN_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit HEREN:1;           /**< \brief [1:1] Header error detected interrupt enable - HEREN (rw) */
    __IO Ifx_UReg_32Bit PYEREN:1;          /**< \brief [2:2] Payload error detected interrupt enable - PYEREN (rw) */
    __IO Ifx_UReg_32Bit CEREN:1;           /**< \brief [3:3] HSCT command error interrupt enable - CEREN (rw) */
    __IO Ifx_UReg_32Bit IFCFSEN:1;         /**< \brief [4:4] HSCT interface control command send enable - IFCFSEN (rw) */
    __IO Ifx_UReg_32Bit SMEREN:1;          /**< \brief [5:5] Speed Mode Switch Error interrupt enable - SMEREN (rw) */
    __IO Ifx_UReg_32Bit USMSFEN:1;         /**< \brief [6:6] Unsolicited message frame send finished - USMSFEN (rw) */
    __IO Ifx_UReg_32Bit PLEREN:1;          /**< \brief [7:7] PLL lost lock error interrupt enable - PLEREN (rw) */
    __IO Ifx_UReg_32Bit USMEN:1;           /**< \brief [8:8] Unsolicited Message received enable - USMEN (rw) */
    __IO Ifx_UReg_32Bit PAREN:1;           /**< \brief [9:9] PING Answer Received enable - PAREN (rw) */
    __IO Ifx_UReg_32Bit TXTEEN:1;          /**< \brief [10:10] TX disable error interrupt enable - TXTEEN (rw) */
    __IO Ifx_UReg_32Bit SFOEN:1;           /**< \brief [11:11] Synchronization FIFO overflow (in RX direction) interrupt enable - SFOEN (rw) */
    __IO Ifx_UReg_32Bit SFUEN:1;           /**< \brief [12:12] Synchronization FIFO underflow (in TX direction) interrupt enable - SFUEN (rw) */
    __IO Ifx_UReg_32Bit MSCEEN:1;          /**< \brief [13:13] Multi Slave scenario Command Error interrupt enable - MSCEEN (rw) */
    __I  Ifx_UReg_32Bit :18;               /**< \brief [31:14] \internal Reserved */
} Ifx_HSCT_IRQEN_Bits;

/** \brief OCDS Control and Status Register */
typedef struct _Ifx_HSCT_OCS_Bits
{
    __IO Ifx_UReg_32Bit TGS:2;             /**< \brief [1:0] Trigger Set for OTGB0/1 - TGS (rw) */
    __IO Ifx_UReg_32Bit TGB:1;             /**< \brief [2:2] OTGB0/1 Bus Select - TGB (rw) */
    __O  Ifx_UReg_32Bit TG_P:1;            /**< \brief [3:3] TGS, TGB Write Protection - TG_P (w) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [23:4] \internal Reserved */
    __IO Ifx_UReg_32Bit SUS:4;             /**< \brief [27:24] OCDS Suspend Control - SUS (rw) */
    __O  Ifx_UReg_32Bit SUS_P:1;           /**< \brief [28:28] SUS Write Protection - SUS_P (w) */
    __I  Ifx_UReg_32Bit SUSSTA:1;          /**< \brief [29:29] Suspend State - SUSSTA (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_HSCT_OCS_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_HSCT_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_HSCT_PROT_Bits;

/** \brief Reset Control Register A */
typedef struct _Ifx_HSCT_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group 0 - GRSTEN0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group 1 - GRSTEN1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group 2 - GRSTEN2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group 3 - GRSTEN3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_HSCT_RST_CTRLA_Bits;

/** \brief Reset Control Register B */
typedef struct _Ifx_HSCT_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_HSCT_RST_CTRLB_Bits;

/** \brief Reset Status Register */
typedef struct _Ifx_HSCT_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group 0 - GRST0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group 1 - GRST1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group 2 - GRST2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group 3 - GRST3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_HSCT_RST_STAT_Bits;

/** \brief Status Register */
typedef struct _Ifx_HSCT_STAT_Bits
{
    __I  Ifx_UReg_32Bit RX_PSIZE:3;        /**< \brief [2:0] RX (Receiving) Payload Size - RX_PSIZE (rh) */
    __I  Ifx_UReg_32Bit RX_CHANNEL:4;      /**< \brief [6:3] RX (Receiving) Logical Channel Type - RX_CHANNEL (rh) */
    __I  Ifx_UReg_32Bit RX_SLEEP:1;        /**< \brief [7:7] RX (Receiving) Sleep Mode Status - RX_SLEEP (rh) */
    __I  Ifx_UReg_32Bit TX_SLEEP:1;        /**< \brief [8:8] TX (Transmission) Sleep Mode Status - TX_SLEEP (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __I  Ifx_UReg_32Bit TX_PSIZE:3;        /**< \brief [14:12] Transmission Payload Size - TX_PSIZE (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit TX_CHANNEL_TYPE:4;    /**< \brief [19:16] Transmission Logical Channel Type - TX_CHANNEL_TYPE (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __I  Ifx_UReg_32Bit LIFCCMDR:8;        /**< \brief [31:24] Last Interface Control Command Received - LIFCCMDR (rh) */
} Ifx_HSCT_STAT_Bits;

/** \brief STATPHY */
typedef struct _Ifx_HSCT_STATPHY_Bits
{
    __I  Ifx_UReg_32Bit PLOCK:1;           /**< \brief [0:0] PLL locked - PLOCK (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __I  Ifx_UReg_32Bit TXSA:2;            /**< \brief [3:2] Transmitter speed - TXSA (rh) */
    __I  Ifx_UReg_32Bit RXSA:2;            /**< \brief [5:4] Receiver speed - RXSA (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_HSCT_STATPHY_Bits;

/** \brief Test Control Register */
typedef struct _Ifx_HSCT_TESTCTRL_Bits
{
    __O  Ifx_UReg_32Bit TXENS:1;           /**< \brief [0:0] Enable Slave TX path (Slave interface mode only) - TXENS (w) */
    __O  Ifx_UReg_32Bit TXDISS:1;          /**< \brief [1:1] Disable Slave TX path (Slave Interface mode only) - TXDISS (w) */
    __IO Ifx_UReg_32Bit LLOPTXRX:1;        /**< \brief [2:2] LVDS loop back TX to RX enable - LLOPTXRX (rw) */
    __IO Ifx_UReg_32Bit PRBSEN:1;          /**< \brief [3:3] PRBS Pattern enable - PRBSEN (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_HSCT_TESTCTRL_Bits;

/** \brief Unsolicited Status Message Received */
typedef struct _Ifx_HSCT_USMR_Bits
{
    __I  Ifx_UReg_32Bit USMR:32;           /**< \brief [31:0] Unsolicited status message received - USMR (rh) */
} Ifx_HSCT_USMR_Bits;

/** \brief Unsolicited Status Message Send */
typedef struct _Ifx_HSCT_USMS_Bits
{
    __IO Ifx_UReg_32Bit USMS:32;           /**< \brief [31:0] Unsolicited status message send - USMS (rw) */
} Ifx_HSCT_USMS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_hsct_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ACCEN_PRS_Bits B;             /**< \brief Bitfield access */
} Ifx_HSCT_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ACCEN_RDA_Bits B;             /**< \brief Bitfield access */
} Ifx_HSCT_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ACCEN_RDB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_HSCT_ACCEN_RDB_FPI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ACCEN_VM_Bits B;              /**< \brief Bitfield access */
} Ifx_HSCT_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ACCEN_WRA_Bits B;             /**< \brief Bitfield access */
} Ifx_HSCT_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ACCEN_WRB_FPI_Bits B;         /**< \brief Bitfield access */
} Ifx_HSCT_ACCEN_WRB_FPI;

/** \brief Clock Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_CLC_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSCT_CLC;

/** \brief Configuration Physical Layer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_CONFIGPHY_Bits B;             /**< \brief Bitfield access */
} Ifx_HSCT_CONFIGPHY;

/** \brief Clear To Send Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_CTSCTRL_Bits B;               /**< \brief Bitfield access */
} Ifx_HSCT_CTSCTRL;

/** \brief Transmission Disable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_DISABLE_Bits B;               /**< \brief Bitfield access */
} Ifx_HSCT_DISABLE;

/** \brief Module Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_ID_Bits B;                    /**< \brief Bitfield access */
} Ifx_HSCT_ID;

/** \brief Interface Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_IFCTRL_Bits B;                /**< \brief Bitfield access */
} Ifx_HSCT_IFCTRL;

/** \brief Interface Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_IFSTAT_Bits B;                /**< \brief Bitfield access */
} Ifx_HSCT_IFSTAT;

/** \brief Initialization Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_INIT_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSCT_INIT;

/** \brief Interrupt register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_IRQ_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSCT_IRQ;

/** \brief Interrupt Clear Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_IRQCLR_Bits B;                /**< \brief Bitfield access */
} Ifx_HSCT_IRQCLR;

/** \brief Interrupt Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_IRQEN_Bits B;                 /**< \brief Bitfield access */
} Ifx_HSCT_IRQEN;

/** \brief OCDS Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_OCS_Bits B;                   /**< \brief Bitfield access */
} Ifx_HSCT_OCS;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_PROT_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSCT_PROT;

/** \brief Reset Control Register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_RST_CTRLA_Bits B;             /**< \brief Bitfield access */
} Ifx_HSCT_RST_CTRLA;

/** \brief Reset Control Register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_RST_CTRLB_Bits B;             /**< \brief Bitfield access */
} Ifx_HSCT_RST_CTRLB;

/** \brief Reset Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_RST_STAT_Bits B;              /**< \brief Bitfield access */
} Ifx_HSCT_RST_STAT;

/** \brief Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_STAT_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSCT_STAT;

/** \brief STATPHY   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_STATPHY_Bits B;               /**< \brief Bitfield access */
} Ifx_HSCT_STATPHY;

/** \brief Test Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_TESTCTRL_Bits B;              /**< \brief Bitfield access */
} Ifx_HSCT_TESTCTRL;

/** \brief Unsolicited Status Message Received   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_USMR_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSCT_USMR;

/** \brief Unsolicited Status Message Send   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_HSCT_USMS_Bits B;                  /**< \brief Bitfield access */
} Ifx_HSCT_USMS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsct_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_HSCT_RST
{
       __IO Ifx_HSCT_RST_CTRLA                  CTRLA;                  /**< \brief 0, Reset Control Register A*/
       __IO Ifx_HSCT_RST_CTRLB                  CTRLB;                  /**< \brief 4, Reset Control Register B*/
       __I  Ifx_HSCT_RST_STAT                   STAT;                   /**< \brief 8, Reset Status Register*/
} Ifx_HSCT_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Hsct_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_HSCT_ACCEN
{
       __IO Ifx_HSCT_ACCEN_WRA                  WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_HSCT_ACCEN_WRB_FPI              WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_HSCT_ACCEN_RDA                  RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_HSCT_ACCEN_RDB_FPI              RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_HSCT_ACCEN_VM                   VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_HSCT_ACCEN_PRS                  PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_HSCT_ACCEN;

/******************************************************************************/
/** \addtogroup IfxSfr_Hsct_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief HSCT object */
typedef volatile struct _Ifx_HSCT
{
       __IO Ifx_HSCT_CLC                        CLC;                    /**< \brief 0, Clock Control Register*/
       __IO Ifx_HSCT_OCS                        OCS;                    /**< \brief 4, OCDS Control and Status Register*/
       __I  Ifx_HSCT_ID                         ID;                     /**< \brief 8, Module Identification Register*/
       __IO Ifx_HSCT_RST                        RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_HSCT_PROT                       PROTE;                  /**< \brief 20, Register Endinit*/
       __IO Ifx_HSCT_PROT                       PROTSE;                 /**< \brief 24, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_HSCT_ACCEN                      ACCEN;                  /**< \brief 40, */
       __IO Ifx_HSCT_INIT                       INIT;                   /**< \brief 60, Initialization Register*/
       __IO Ifx_HSCT_IFCTRL                     IFCTRL;                 /**< \brief 64, Interface Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_68[4];         /**< \brief 68, \internal Reserved */
       __IO Ifx_HSCT_CTSCTRL                    CTSCTRL;                /**< \brief 6C, Clear To Send Control Register*/
       __IO Ifx_HSCT_DISABLE                    DISABLE;                /**< \brief 70, Transmission Disable Register*/
       __I  Ifx_HSCT_STAT                       STAT;                   /**< \brief 74, Status Register*/
       __I  Ifx_HSCT_IFSTAT                     IFSTAT;                 /**< \brief 78, Interface Status Register*/
       __IO Ifx_HSCT_CONFIGPHY                  CONFIGPHY;              /**< \brief 7C, Configuration Physical Layer Register*/
       __I  Ifx_HSCT_STATPHY                    STATPHY;                /**< \brief 80, STATPHY*/
       __I  Ifx_HSCT_IRQ                        IRQ;                    /**< \brief 84, Interrupt register*/
       __IO Ifx_HSCT_IRQEN                      IRQEN;                  /**< \brief 88, Interrupt Enable Register*/
       __O  Ifx_HSCT_IRQCLR                     IRQCLR;                 /**< \brief 8C, Interrupt Clear Register*/
       __I  Ifx_HSCT_USMR                       USMR;                   /**< \brief 90, Unsolicited Status Message Received*/
       __IO Ifx_HSCT_USMS                       USMS;                   /**< \brief 94, Unsolicited Status Message Send*/
       __IO Ifx_HSCT_TESTCTRL                   TESTCTRL;               /**< \brief 98, Test Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_9C[65380];     /**< \brief 9C, \internal Reserved */
} Ifx_HSCT;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXHSCT_REGDEF_H */
