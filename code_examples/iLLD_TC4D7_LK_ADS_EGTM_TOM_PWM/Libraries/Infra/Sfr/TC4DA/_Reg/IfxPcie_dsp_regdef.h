/**
 * \file IfxPcie_dsp_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_PCIE/V13.1.1.0.11
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Pcie_dsp_Registers Pcie_dsp Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Pcie_dsp_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Pcie_dsp_Registers
 * 
 * \defgroup IfxSfr_Pcie_dsp_Registers_union Register unions
 * \ingroup IfxSfr_Pcie_dsp_Registers
 * 
 * \defgroup IfxSfr_Pcie_dsp_Registers_struct Memory map
 * \ingroup IfxSfr_Pcie_dsp_Registers
 */
#ifndef IFXPCIE_DSP_REGDEF_H
#define IFXPCIE_DSP_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Pcie_dsp_Registers_Bitfields
 * \{  */
/** \brief PRS access enable register */
typedef struct _Ifx_PCIE_DSP_ACCEN_PRS_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_PCIE_DSP_ACCEN_RDA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_PCIE_DSP_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_PCIE_DSP_ACCEN_RDB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_ACCEN_RDB_FPI_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_PCIE_DSP_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Read access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Read access enable for TAG-ID q - ENq (rw) */
} Ifx_PCIE_DSP_ACCEN_RDB_SRI_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_PCIE_DSP_ACCEN_RGNLA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:26;           /**< \brief [31:6] Bits 31:6 of the lower bound of the access protected region (rw) */
} Ifx_PCIE_DSP_ACCEN_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_PCIE_DSP_ACCEN_RGNUA_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ADDR:26;           /**< \brief [31:6] Bits 31:6 of the upper bound of the access protected region (rw) */
} Ifx_PCIE_DSP_ACCEN_RGNUA_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_PCIE_DSP_ACCEN_VM_Bits
{
    __IO Ifx_UReg_32Bit RD00:1;            /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD01:1;            /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD02:1;            /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD03:1;            /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD04:1;            /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD05:1;            /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD06:1;            /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit RD07:1;            /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR00:1;            /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR01:1;            /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR02:1;            /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR03:1;            /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR04:1;            /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR05:1;            /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR06:1;            /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_UReg_32Bit WR07:1;            /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_PCIE_DSP_ACCEN_WRA_Bits
{
    __IO Ifx_UReg_32Bit EN00:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN01:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN02:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN03:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN04:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN05:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN06:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN07:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN08:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN09:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN10:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN11:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN12:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN13:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN14:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN15:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN16:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN17:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN18:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN19:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN20:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN21:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN22:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN23:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN24:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN25:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN26:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN27:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN28:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN29:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN30:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN31:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_PCIE_DSP_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_PCIE_DSP_ACCEN_WRB_FPI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_ACCEN_WRB_FPI_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_PCIE_DSP_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_UReg_32Bit EN32:1;            /**< \brief [0:0] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN33:1;            /**< \brief [1:1] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN34:1;            /**< \brief [2:2] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN35:1;            /**< \brief [3:3] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN36:1;            /**< \brief [4:4] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN37:1;            /**< \brief [5:5] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN38:1;            /**< \brief [6:6] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN39:1;            /**< \brief [7:7] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN40:1;            /**< \brief [8:8] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN41:1;            /**< \brief [9:9] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN42:1;            /**< \brief [10:10] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN43:1;            /**< \brief [11:11] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN44:1;            /**< \brief [12:12] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN45:1;            /**< \brief [13:13] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN46:1;            /**< \brief [14:14] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN47:1;            /**< \brief [15:15] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN48:1;            /**< \brief [16:16] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN49:1;            /**< \brief [17:17] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN50:1;            /**< \brief [18:18] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN51:1;            /**< \brief [19:19] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN52:1;            /**< \brief [20:20] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN53:1;            /**< \brief [21:21] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN54:1;            /**< \brief [22:22] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN55:1;            /**< \brief [23:23] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN56:1;            /**< \brief [24:24] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN57:1;            /**< \brief [25:25] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN58:1;            /**< \brief [26:26] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN59:1;            /**< \brief [27:27] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN60:1;            /**< \brief [28:28] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN61:1;            /**< \brief [29:29] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN62:1;            /**< \brief [30:30] Write access enable for TAG-ID q - ENq (rw) */
    __IO Ifx_UReg_32Bit EN63:1;            /**< \brief [31:31] Write access enable for TAG-ID q - ENq (rw) */
} Ifx_PCIE_DSP_ACCEN_WRB_SRI_Bits;

/** \brief Advanced Error Reporting Extended Capability Header */
typedef struct _Ifx_PCIE_DSP_AERCAP_AER_EXT_CAP_HDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit CAP_ID:16;         /**< \brief [15:0] AER Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit CAP_VERSION:4;     /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_AERCAP_AER_EXT_CAP_HDR_OFF_Bits;

/** \brief Correctable Error Mask Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_CORR_ERR_MASK_Bits
{
    __IO Ifx_UReg_32Bit RX_ERR_MASK:1;     /**< \brief [0:0] Receiver Error Mask (Optional) (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [5:1] \internal Reserved */
    __IO Ifx_UReg_32Bit BAD_TLP_MASK:1;    /**< \brief [6:6] Bad TLP Mask (rw) */
    __IO Ifx_UReg_32Bit BAD_DLLP_MASK:1;    /**< \brief [7:7] Bad DLLP Mask (rw) */
    __IO Ifx_UReg_32Bit REPLAY_NO_ROLEOVER_MASK:1;    /**< \brief [8:8] REPLAY_NUM Rollover Mask (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __IO Ifx_UReg_32Bit RPL_TIMER_TIMEOUT_MASK:1;    /**< \brief [12:12] Replay Timer Timeout Mask (rw) */
    __IO Ifx_UReg_32Bit ADVISORY_NON_FATAL_ERR_MASK:1;    /**< \brief [13:13] Advisory Non-Fatal Error Mask (rw) */
    __IO Ifx_UReg_32Bit CORRECTED_INT_ERR_MASK:1;    /**< \brief [14:14] Corrected Internal Error Mask (Optional) (rw) */
    __IO Ifx_UReg_32Bit HEADER_LOG_OVERFLOW_MASK:1;    /**< \brief [15:15] Header Log Overflow Error Mask (Optional) (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_CORR_ERR_MASK_Bits;

/** \brief Correctable Error Status Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_CORR_ERR_STATUS_Bits
{
    __IO Ifx_UReg_32Bit RX_ERR_STATUS:1;    /**< \brief [0:0] Receiver Error Status (Optional) (rw1ch) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [5:1] \internal Reserved */
    __IO Ifx_UReg_32Bit BAD_TLP_STATUS:1;    /**< \brief [6:6] Bad TLP Status (rw1ch) */
    __IO Ifx_UReg_32Bit BAD_DLLP_STATUS:1;    /**< \brief [7:7] Bad DLLP Status (rw1ch) */
    __IO Ifx_UReg_32Bit REPLAY_NO_ROLEOVER_STATUS:1;    /**< \brief [8:8] REPLAY_NUM Rollover Status (rw1ch) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [11:9] \internal Reserved */
    __IO Ifx_UReg_32Bit RPL_TIMER_TIMEOUT_STATUS:1;    /**< \brief [12:12] Replay Timer Timeout Status (rw1ch) */
    __IO Ifx_UReg_32Bit ADVISORY_NON_FATAL_ERR_STATUS:1;    /**< \brief [13:13] Advisory Non-Fatal Error Status (rw1ch) */
    __IO Ifx_UReg_32Bit CORRECTED_INT_ERR_STATUS:1;    /**< \brief [14:14] Corrected Internal Error Status (Optional) (rw1ch) */
    __IO Ifx_UReg_32Bit HEADER_LOG_OVERFLOW_STATUS:1;    /**< \brief [15:15] Header Log Overflow Error Status (Optional) (rw1ch) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_CORR_ERR_STATUS_Bits;

/** \brief Advanced Error Capabilities and Control Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_ERR_CAP_CTRL_Bits
{
    __I  Ifx_UReg_32Bit FIRST_ERR_POINTER:5;    /**< \brief [4:0] First Error Pointer (rh) */
    __I  Ifx_UReg_32Bit ECRC_GEN_CAP:1;    /**< \brief [5:5] ECRC Generation Capable (r) */
    __IO Ifx_UReg_32Bit ECRC_GEN_EN:1;     /**< \brief [6:6] ECRC Generation Enable (rw) */
    __I  Ifx_UReg_32Bit ECRC_CHECK_CAP:1;    /**< \brief [7:7] ECRC Check Capable (r) */
    __IO Ifx_UReg_32Bit ECRC_CHECK_EN:1;    /**< \brief [8:8] ECRC Check Enable (rw) */
    __I  Ifx_UReg_32Bit MULTIPLE_HEADER_CAP:1;    /**< \brief [9:9] Multiple Header Recording Capable (r) */
    __IO Ifx_UReg_32Bit MULTIPLE_HEADER_EN:1;    /**< \brief [10:10] Multiple Header Recording Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __I  Ifx_UReg_32Bit CTO_PRFX_HDR_LOG_CAP:1;    /**< \brief [12:12] Completion Timeout Prefix/Header Log Capable (r) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_ERR_CAP_CTRL_Bits;

/** \brief Error Source Identification Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_ERR_SRC_ID_OFF_Bits
{
    __I  Ifx_UReg_32Bit ERR_COR_SOURCE_ID:16;    /**< \brief [15:0] Source of Correctable Error (rh) */
    __I  Ifx_UReg_32Bit ERR_FATAL_NON_FATAL_SOURCE_ID:16;    /**< \brief [31:16] Source of Fatal/Non-Fatal Error (rh) */
} Ifx_PCIE_DSP_AERCAP_ERR_SRC_ID_OFF_Bits;

/** \brief Header Log Register 0 */
typedef struct _Ifx_PCIE_DSP_AERCAP_HDR_LOG_Bits
{
    __I  Ifx_UReg_32Bit FIRST_DWORD_FIRST_BYTE:8;    /**< \brief [7:0] Byte 0 of Header log register of First 32-bit Data Word (rh) */
    __I  Ifx_UReg_32Bit FIRST_DWORD_SECOND_BYTE:8;    /**< \brief [15:8] Byte 1 of Header log register of First 32-bit Data Word (rh) */
    __I  Ifx_UReg_32Bit FIRST_DWORD_THIRD_BYTE:8;    /**< \brief [23:16] Byte 2 of Header log register of First 32-bit Data Word (rh) */
    __I  Ifx_UReg_32Bit FIRST_DWORD_FOURTH_BYTE:8;    /**< \brief [31:24] Byte 3 of Header log register of First 32-bit Data Word (rh) */
} Ifx_PCIE_DSP_AERCAP_HDR_LOG_Bits;

/** \brief Root Error Command Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_CMD_OFF_Bits
{
    __IO Ifx_UReg_32Bit CORR_ERR_REPORTING_EN:1;    /**< \brief [0:0] Correctable Error Reporting Enable (rw) */
    __IO Ifx_UReg_32Bit NON_FATAL_ERR_REPORTING_EN:1;    /**< \brief [1:1] Non-Fatal Error Reporting Enable (rw) */
    __IO Ifx_UReg_32Bit FATAL_ERR_REPORTING_EN:1;    /**< \brief [2:2] Fatal Error Reporting Enable (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_CMD_OFF_Bits;

/** \brief Root Error Status Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit ERR_COR_RX:1;      /**< \brief [0:0] Correctable Error Received (rw1ch) */
    __IO Ifx_UReg_32Bit MUL_ERR_COR_RX:1;    /**< \brief [1:1] Multiple Correctable Errors Received (rw1ch) */
    __IO Ifx_UReg_32Bit ERR_FATAL_NON_FATAL_RX:1;    /**< \brief [2:2] Fatal or Non-Fatal Error Received (rw1ch) */
    __IO Ifx_UReg_32Bit MUL_ERR_FATAL_NON_FATAL_RX:1;    /**< \brief [3:3] Multiple Fatal or Non-Fatal Errors Received (rw1ch) */
    __IO Ifx_UReg_32Bit FIRST_UNCORR_FATAL:1;    /**< \brief [4:4] First Uncorrectable Error is Fatal (rw1ch) */
    __IO Ifx_UReg_32Bit NON_FATAL_ERR_MSG_RX:1;    /**< \brief [5:5] One or more Non-Fatal Error Messages Received (rw1ch) */
    __IO Ifx_UReg_32Bit FATAL_ERR_MSG_RX:1;    /**< \brief [6:6] One or more Fatal Error Messages Received (rw1ch) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [26:7] \internal Reserved */
    __IO Ifx_UReg_32Bit ADV_ERR_INT_MSG_NUM:5;    /**< \brief [31:27] Advanced Error Interrupt Message Number (rw) */
} Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_STATUS_OFF_Bits;

/** \brief TLP Prefix Log Register 1 */
typedef struct _Ifx_PCIE_DSP_AERCAP_TLP_PREFIX_LOG_Bits
{
    __I  Ifx_UReg_32Bit CFG_TLP_PFX_LOG_1_FIRST_BYTE:8;    /**< \brief [7:0] Byte 0 of Error TLP Prefix Log 1 (rh) */
    __I  Ifx_UReg_32Bit CFG_TLP_PFX_LOG_1_SECOND_BYTE:8;    /**< \brief [15:8] Byte 1 of Error TLP Prefix Log 1 (rh) */
    __I  Ifx_UReg_32Bit CFG_TLP_PFX_LOG_1_THIRD_BYTE:8;    /**< \brief [23:16] Byte 2 of Error TLP Prefix Log 1 (rh) */
    __I  Ifx_UReg_32Bit CFG_TLP_PFX_LOG_1_FOURTH_BYTE:8;    /**< \brief [31:24] Byte 3 of Error TLP Prefix Log 1 (rh) */
} Ifx_PCIE_DSP_AERCAP_TLP_PREFIX_LOG_Bits;

/** \brief Uncorrectable Error Mask Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_MASK_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DL_PROTOCOL_ERR_MASK:1;    /**< \brief [4:4] Data Link Protocol Error Mask (rw) */
    __IO Ifx_UReg_32Bit SURPRISE_DOWN_ERR_MASK:1;    /**< \brief [5:5] Surprise Down Error Mask (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit POIS_TLP_ERR_MASK:1;    /**< \brief [12:12] Poisoned TLP Error Mask (rw) */
    __IO Ifx_UReg_32Bit FC_PROTOCOL_ERR_MASK:1;    /**< \brief [13:13] Flow Control Protocol Error Mask (rw) */
    __IO Ifx_UReg_32Bit CMPLT_TIMEOUT_ERR_MASK:1;    /**< \brief [14:14] Completion Timeout Error Mask (rw) */
    __IO Ifx_UReg_32Bit CMPLT_ABORT_ERR_MASK:1;    /**< \brief [15:15] Completer Abort Error Mask (Optional) (rw) */
    __IO Ifx_UReg_32Bit UNEXP_CMPLT_ERR_MASK:1;    /**< \brief [16:16] Unexpected Completion Mask (rw) */
    __IO Ifx_UReg_32Bit REC_OVERFLOW_ERR_MASK:1;    /**< \brief [17:17] Receiver Overflow Mask (Optional) (rw) */
    __IO Ifx_UReg_32Bit MALF_TLP_ERR_MASK:1;    /**< \brief [18:18] Malformed TLP Mask (rw) */
    __IO Ifx_UReg_32Bit ECRC_ERR_MASK:1;    /**< \brief [19:19] ECRC Error Mask (Optional) (rw) */
    __IO Ifx_UReg_32Bit UNSUPPORTED_REQ_ERR_MASK:1;    /**< \brief [20:20] Unsupported Request Error Mask (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [21:21] \internal Reserved */
    __IO Ifx_UReg_32Bit INTERNAL_ERR_MASK:1;    /**< \brief [22:22] Uncorrectable Internal Error Mask (Optional) (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_MASK_Bits;

/** \brief Uncorrectable Error Severity Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_SEV_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DL_PROTOCOL_ERR_SEVERITY:1;    /**< \brief [4:4] Data Link Protocol Error Severity (rw) */
    __IO Ifx_UReg_32Bit SURPRISE_DOWN_ERR_SVRITY:1;    /**< \brief [5:5] Surprise Down Error Severity (Optional) (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit POIS_TLP_ERR_SEVERITY:1;    /**< \brief [12:12] Poisoned TLP Severity (rw) */
    __IO Ifx_UReg_32Bit FC_PROTOCOL_ERR_SEVERITY:1;    /**< \brief [13:13] Flow Control Protocol Error Severity (Optional) (rw) */
    __IO Ifx_UReg_32Bit CMPLT_TIMEOUT_ERR_SEVERITY:1;    /**< \brief [14:14] Completion Timeout Error Severity (rw) */
    __IO Ifx_UReg_32Bit CMPLT_ABORT_ERR_SEVERITY:1;    /**< \brief [15:15] Completer Abort Error Severity (Optional) (rw) */
    __IO Ifx_UReg_32Bit UNEXP_CMPLT_ERR_SEVERITY:1;    /**< \brief [16:16] Unexpected Completion Error Severity (rw) */
    __IO Ifx_UReg_32Bit REC_OVERFLOW_ERR_SEVERITY:1;    /**< \brief [17:17] Receiver Overflow Error Severity (Optional) (rw) */
    __IO Ifx_UReg_32Bit MALF_TLP_ERR_SEVERITY:1;    /**< \brief [18:18] Malformed TLP Severity (rw) */
    __IO Ifx_UReg_32Bit ECRC_ERR_SEVERITY:1;    /**< \brief [19:19] ECRC Error Severity (Optional) (rw) */
    __IO Ifx_UReg_32Bit UNSUPPORTED_REQ_ERR_SEVERITY:1;    /**< \brief [20:20] Unsupported Request Error Severity (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [21:21] \internal Reserved */
    __IO Ifx_UReg_32Bit INTERNAL_ERR_SEVERITY:1;    /**< \brief [22:22] Uncorrectable Internal Error Severity (Optional) (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_SEV_Bits;

/** \brief Uncorrectable Error Status Register */
typedef struct _Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_STATUS_Bits
{
    __I  Ifx_UReg_32Bit :4;                /**< \brief [3:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DL_PROTOCOL_ERR_STATUS:1;    /**< \brief [4:4] Data Link Protocol Error Status (rw1ch) */
    __IO Ifx_UReg_32Bit SURPRISE_DOWN_ERR_STATUS:1;    /**< \brief [5:5] Surprise Down Error Status (Optional) (rw1ch) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [11:6] \internal Reserved */
    __IO Ifx_UReg_32Bit POIS_TLP_ERR_STATUS:1;    /**< \brief [12:12] Poisoned TLP Status (rw1ch) */
    __IO Ifx_UReg_32Bit FC_PROTOCOL_ERR_STATUS:1;    /**< \brief [13:13] Flow Control Protocol Error Status (rw1ch) */
    __IO Ifx_UReg_32Bit CMPLT_TIMEOUT_ERR_STATUS:1;    /**< \brief [14:14] Completion Timeout Status (rw1ch) */
    __IO Ifx_UReg_32Bit CMPLT_ABORT_ERR_STATUS:1;    /**< \brief [15:15] Completer Abort Status (rw1ch) */
    __IO Ifx_UReg_32Bit UNEXP_CMPLT_ERR_STATUS:1;    /**< \brief [16:16] Unexpected Completion Status (rw1ch) */
    __IO Ifx_UReg_32Bit REC_OVERFLOW_ERR_STATUS:1;    /**< \brief [17:17] Receiver Overflow Status (rw1ch) */
    __IO Ifx_UReg_32Bit MALF_TLP_ERR_STATUS:1;    /**< \brief [18:18] Malformed TLP Status (rw1ch) */
    __IO Ifx_UReg_32Bit ECRC_ERR_STATUS:1;    /**< \brief [19:19] ECRC Error Status (rw1ch) */
    __IO Ifx_UReg_32Bit UNSUPPORTED_REQ_ERR_STATUS:1;    /**< \brief [20:20] Unsupported Request Error Status (rw1ch) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [21:21] \internal Reserved */
    __IO Ifx_UReg_32Bit INTERNAL_ERR_STATUS:1;    /**< \brief [22:22] Uncorrectable Internal Error Status (rw1ch) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_STATUS_Bits;

/** \brief Interrupt/alarm clear */
typedef struct _Ifx_PCIE_DSP_ALARM_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit RCERRCLR:1;        /**< \brief [0:0] Clear the RCERRINT bit. (w) */
    __O  Ifx_UReg_32Bit SAFTCORRCLR:1;     /**< \brief [1:1] Clear the SAFCORR bit. (w) */
    __O  Ifx_UReg_32Bit SAFUNCORRCLR:1;    /**< \brief [2:2] Clear the SAFUNCORR bit. (w) */
    __O  Ifx_UReg_32Bit SYSERRCLR:1;       /**< \brief [3:3] Clear the SYSERR bit. (w) */
    __O  Ifx_UReg_32Bit A2SDCLR:1;         /**< \brief [4:4] Clear the A2SDAT bit. (w) */
    __O  Ifx_UReg_32Bit A2SACLR:1;         /**< \brief [5:5] Clear the A2SADDR bit. (w) */
    __O  Ifx_UReg_32Bit S2ADCLR:1;         /**< \brief [6:6] Clear the S2ADAT bit. (w) */
    __O  Ifx_UReg_32Bit S2AACLR:1;         /**< \brief [7:7] Clear the S2AADDR bit. (w) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_ALARM_INTCLR_Bits;

/** \brief Interrupt/alarm enable */
typedef struct _Ifx_PCIE_DSP_ALARM_INTEN_Bits
{
    __IO Ifx_UReg_32Bit RCERREN:1;         /**< \brief [0:0] Enable the RCERRINT bit. (rw) */
    __IO Ifx_UReg_32Bit SAFCORREN:1;       /**< \brief [1:1] Enable the SAFCORR bit. (rw) */
    __IO Ifx_UReg_32Bit SAFUNCORREN:1;     /**< \brief [2:2] Enable the SAFUNCORR bit. (rw) */
    __IO Ifx_UReg_32Bit SYSERREN:1;        /**< \brief [3:3] Enable the SYSERR bit. (rw) */
    __IO Ifx_UReg_32Bit A2SDEN:1;          /**< \brief [4:4] Enable the A2SDAT bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit A2SAEN:1;          /**< \brief [5:5] Enable the A2SADDR bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit S2ADEN:1;          /**< \brief [6:6] Enable the S2ADAT bit to generate alarm. (rw) */
    __IO Ifx_UReg_32Bit S2AAEN:1;          /**< \brief [7:7] Enable the S2AADDR bit to generate alarm. (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_ALARM_INTEN_Bits;

/** \brief Interrupt/alarm status */
typedef struct _Ifx_PCIE_DSP_ALARM_STAT_Bits
{
    __I  Ifx_UReg_32Bit RCERRINT:1;        /**< \brief [0:0] Error reported. The interrupt can be triggered when the ALARM_INTEN.RCERREN is asserted. (rh) */
    __I  Ifx_UReg_32Bit SAFCORR:1;         /**< \brief [1:1] Indicate correctable error. The interrupt can be triggered when the ALARM_INTEN.SAFCORREN is asserted. (rh) */
    __I  Ifx_UReg_32Bit SAFUNCORR:1;       /**< \brief [2:2] Indicate uncorrectable error. The interrupt can be triggered when the ALARM_INTEN.SAFUNCORR is asserted. (rh) */
    __I  Ifx_UReg_32Bit SYSERR:1;          /**< \brief [3:3] System error detected.  The interrupt can be triggered when the ALARM_INTEN.SYSERREN is asserted. (rh) */
    __I  Ifx_UReg_32Bit A2SDAT:1;          /**< \brief [4:4] Error detected during the data phase in the A2S bridge. The interrupt can be triggered when the ALARM_INTEN.A2SDEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit A2SADDR:1;         /**< \brief [5:5] Error detected during the address phase in the A2S bridge. The interrupt can be triggered when the ALARM_INTEN.A2SAEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit S2ADAT:1;          /**< \brief [6:6] Error detected during the data phase in the S2A bridge. The interrupt can be triggered when the ALARM_INTEN.S2ADEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit S2AADDR:1;         /**< \brief [7:7] Error detected during the address phase in the S2A bridge. The interrupt can be triggered when the ALARM_INTEN.S2AAEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit MSTERRM:1;         /**< \brief [8:8] The controller has entered RASDP error mode at the master interface of AXI. (rh) */
    __I  Ifx_UReg_32Bit SLVERRM:1;         /**< \brief [9:9] The controller has entered RASDP error mode at the slave interface of AXI. (rh) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PCIE_DSP_ALARM_STAT_Bits;

/** \brief iATU Limit Address Register Inbound */
typedef struct _Ifx_PCIE_DSP_ATU_INBOUND_LIMIT_ADDR_Bits
{
    __IO Ifx_UReg_32Bit CBUF_INCR:4;       /**< \brief [3:0] Circular Buffer Increment (rw) */
    __I  Ifx_UReg_32Bit LIMIT_ADDR_HW:8;    /**< \brief [11:4] Forms lower bits of the end address of the address region to be translated (r) */
    __IO Ifx_UReg_32Bit LIMIT_ADDR_RW:20;    /**< \brief [31:12] Forms upper bits of the end address of the address region to be translated (rw) */
} Ifx_PCIE_DSP_ATU_INBOUND_LIMIT_ADDR_Bits;

/** \brief iATU Lower Base Address Register Inbound */
typedef struct _Ifx_PCIE_DSP_ATU_INBOUND_LWR_BASE_ADDR_Bits
{
    __I  Ifx_UReg_32Bit LWR_BASE_HW:12;    /**< \brief [11:0] Forms bits of the start address of the address region to be translated (r) */
    __IO Ifx_UReg_32Bit LWR_BASE_RW:20;    /**< \brief [31:12] Forms bits of the start address of the address region to be translated (rw) */
} Ifx_PCIE_DSP_ATU_INBOUND_LWR_BASE_ADDR_Bits;

/** \brief iATU Lower Target Address Register Inbound */
typedef struct _Ifx_PCIE_DSP_ATU_INBOUND_LWR_TARGET_ADD_Bits
{
    __I  Ifx_UReg_32Bit LWR_TARGET_HW:12;    /**< \brief [11:0] "Forms the LSB's of the Lower Target part of the new address of the translated region" (r) */
    __IO Ifx_UReg_32Bit LWR_TARGET_RW:20;    /**< \brief [31:12] "Forms MSB's of the Lower Target part of the new address of the translated region" (rw) */
} Ifx_PCIE_DSP_ATU_INBOUND_LWR_TARGET_ADD_Bits;

/** \brief iATU Region Control 1 Register Inbound */
typedef struct _Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_1_Bits
{
    __IO Ifx_UReg_32Bit TYPE:5;            /**< \brief [4:0] When the TYPE field of an inbound TLP is matched to this value, then address translation proceeds (when all other enabled field-matches are successful) (rw) */
    __IO Ifx_UReg_32Bit TC:3;              /**< \brief [7:5] When the TC field of an inbound TLP is matched to this value, then address translation proceeds (when all other enabled field-matches are successful) (rw) */
    __IO Ifx_UReg_32Bit TD:1;              /**< \brief [8:8] When the TD field of an inbound TLP is matched to this value, then address translation proceeds (when all other enabled field-matches are successful) (rw) */
    __IO Ifx_UReg_32Bit ATTR:2;            /**< \brief [10:9] When the ATTR field of an inbound TLP is matched to this value, then address translation proceeds (when all other enabled field-matches are successful) (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [19:11] \internal Reserved */
    __IO Ifx_UReg_32Bit CTRL_1_FUNC_NUM:3;    /**< \brief [22:20] Function Number (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_1_Bits;

/** \brief iATU Region Control 2 Register Inbound */
typedef struct _Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_2_Bits
{
    __IO Ifx_UReg_32Bit MSG_CODE:8;        /**< \brief [7:0] MSG TLPs: (Message Code) (rw) */
    __IO Ifx_UReg_32Bit BAR_NUM:3;         /**< \brief [10:8] BAR Number (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [12:11] \internal Reserved */
    __IO Ifx_UReg_32Bit MSG_TYPE_MATCH_MODE:1;    /**< \brief [13:13] Message Type Match Mode (rw) */
    __IO Ifx_UReg_32Bit TC_MATCH_EN:1;     /**< \brief [14:14] TC Match Enable (rw) */
    __IO Ifx_UReg_32Bit TD_MATCH_EN:1;     /**< \brief [15:15] TD Match Enable (rw) */
    __IO Ifx_UReg_32Bit ATTR_MATCH_EN:1;    /**< \brief [16:16] ATTR Match Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [18:17] \internal Reserved */
    __IO Ifx_UReg_32Bit FUNC_NUM_MATCH_EN:1;    /**< \brief [19:19] Function Number Match Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [20:20] \internal Reserved */
    __IO Ifx_UReg_32Bit MSG_CODE_MATCH_EN:1;    /**< \brief [21:21] Message Code Match Enable (Msg TLPS) (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [22:22] \internal Reserved */
    __IO Ifx_UReg_32Bit SINGLE_ADDR_LOC_TRANS_EN:1;    /**< \brief [23:23] Single Address Location Translate Enable (rw) */
    __IO Ifx_UReg_32Bit RESPONSE_CODE:2;    /**< \brief [25:24] Response Code (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [28:26] \internal Reserved */
    __IO Ifx_UReg_32Bit INVERT_MODE:1;     /**< \brief [29:29] Invert Mode Enable (rw) */
    __IO Ifx_UReg_32Bit MATCH_MODE:1;      /**< \brief [30:30] Match Mode (rw) */
    __IO Ifx_UReg_32Bit REGION_EN:1;       /**< \brief [31:31] Region Enable (rw) */
} Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_2_Bits;

/** \brief iATU Upper Base Address Register Inbound */
typedef struct _Ifx_PCIE_DSP_ATU_INBOUND_UPPER_BASE_ADDR_Bits
{
    __IO Ifx_UReg_32Bit UPPER_BASE_RW:32;    /**< \brief [31:0] Forms bits [63:32] of the start (and end) address of the address region to be translated (rw) */
} Ifx_PCIE_DSP_ATU_INBOUND_UPPER_BASE_ADDR_Bits;

/** \brief iATU Limit Address Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_LIMIT_ADDR_Bits
{
    __I  Ifx_UReg_32Bit CBUF_INCR:4;       /**< \brief [3:0] Circular Buffer (r) */
    __I  Ifx_UReg_32Bit LIMIT_ADDR_HW:8;    /**< \brief [11:4] Forms lower bits of the end address of the address region to be translated (r) */
    __IO Ifx_UReg_32Bit LIMIT_ADDR_RW:20;    /**< \brief [31:12] Forms upper bits of the end address of the address region to be translated (rw) */
} Ifx_PCIE_DSP_ATU_OUTBOUND_LIMIT_ADDR_Bits;

/** \brief iATU Lower Base Address Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_BASE_ADDR_Bits
{
    __I  Ifx_UReg_32Bit LWR_BASE_HW:12;    /**< \brief [11:0] Forms bits of the start address of the address region to be translated (r) */
    __IO Ifx_UReg_32Bit LWR_BASE_RW:20;    /**< \brief [31:12] Forms bits of the start address of the address region to be translated (rw) */
} Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_BASE_ADDR_Bits;

/** \brief iATU Lower Target Address Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_TARGET_ADD_Bits
{
    __IO Ifx_UReg_32Bit LWR_TARGET_RW_OUTBOUND:32;    /**< \brief [31:0] Containing the Lower Target part of the new address of the translated region, or the outbound TLP header information (rw) */
} Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_TARGET_ADD_Bits;

/** \brief iATU Region Control 1 Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_1_Bits
{
    __IO Ifx_UReg_32Bit TYPE:5;            /**< \brief [4:0] When the address of an outbound TLP is matched to this region, then the TYPE field of the TLP is changed to the value in this register (rw) */
    __IO Ifx_UReg_32Bit TC:3;              /**< \brief [7:5] When the address of an outbound TLP is matched to this region, then the TC field of the TLP is changed to the value in this register (rw) */
    __IO Ifx_UReg_32Bit TD:1;              /**< \brief [8:8] This is a reserved field (rw) */
    __IO Ifx_UReg_32Bit ATTR:2;            /**< \brief [10:9] When the address of an outbound TLP is matched to this region, then the ATTR field of the TLP is changed to the value in this register (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [19:11] \internal Reserved */
    __IO Ifx_UReg_32Bit CTRL_1_FUNC_NUM:3;    /**< \brief [22:20] Function Number (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_1_Bits;

/** \brief iATU Region Control 2 Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_2_Bits
{
    __IO Ifx_UReg_32Bit MSG_CODE:8;        /**< \brief [7:0] MSG TLPs (Message Code) (rw) */
    __IO Ifx_UReg_32Bit TAG:8;             /**< \brief [15:8] TAG (rw) */
    __IO Ifx_UReg_32Bit TAG_SUBSTITUTE_EN:1;    /**< \brief [16:16] TAG Substitute Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [18:17] \internal Reserved */
    __IO Ifx_UReg_32Bit FUNC_BYPASS:1;     /**< \brief [19:19] Function Number Translation Bypass (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [21:20] \internal Reserved */
    __IO Ifx_UReg_32Bit INHIBIT_PAYLOAD:1;    /**< \brief [22:22] "Inhibit TLP Payload Data for TLP's in Matched Region; assign iATU region to be TLP without data" (rw) */
    __IO Ifx_UReg_32Bit HEADER_SUBSTITUTE_EN:1;    /**< \brief [23:23] Header Substitute Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [26:24] \internal Reserved */
    __IO Ifx_UReg_32Bit DMA_BYPASS:1;      /**< \brief [27:27] DMA Bypass Mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [28:28] \internal Reserved */
    __IO Ifx_UReg_32Bit INVERT_MODE:1;     /**< \brief [29:29] Invert Mode (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [30:30] \internal Reserved */
    __IO Ifx_UReg_32Bit REGION_EN:1;       /**< \brief [31:31] Region Enable (rw) */
} Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_2_Bits;

/** \brief iATU Upper Base Address Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_BASE_ADDR_Bits
{
    __IO Ifx_UReg_32Bit UPPER_BASE_RW:32;    /**< \brief [31:0] Forms bits [63:32] of the start (and end) address of the address region to be translated (rw) */
} Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_BASE_ADDR_Bits;

/** \brief iATU Upper Target Address Register Outbound */
typedef struct _Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_TARGET_ADDR_Bits
{
    __IO Ifx_UReg_32Bit UPPER_TARGET_RW:32;    /**< \brief [31:0] Forms bits [63:32] of the start address (Upper Target part) of the new address of the translated region (rw) */
} Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_TARGET_ADDR_Bits;

/** \brief PCIe configuration control */
typedef struct _Ifx_PCIE_DSP_CFGBD_Bits
{
    __IO Ifx_UReg_32Bit BUSNUM:8;          /**< \brief [7:0] Bus number (rw) */
    __IO Ifx_UReg_32Bit DEVNUM:5;          /**< \brief [12:8] Device number (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PCIE_DSP_CFGBD_Bits;

/** \brief Bus/device number */
typedef struct _Ifx_PCIE_DSP_CFG_BUSNUM_Bits
{
    __I  Ifx_UReg_32Bit PBUSNUM:8;         /**< \brief [7:0] The primary bus number assigned to the function. (rh) */
    __I  Ifx_UReg_32Bit DEVNUM:5;          /**< \brief [12:8] The device number assigned to the function. (rh) */
    __I  Ifx_UReg_32Bit SECBUSNUM:8;       /**< \brief [20:13] Configured Secondary Bus Number. (rh) */
    __I  Ifx_UReg_32Bit SUBBUSNUM:8;       /**< \brief [28:21] Configured Subordinate Bus Number. (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_CFG_BUSNUM_Bits;

/** \brief Configuration information */
typedef struct _Ifx_PCIE_DSP_CFG_INFO_Bits
{
    __IO Ifx_UReg_32Bit CDMCHCKEN:1;       /**< \brief [0:0] Signal to enter test mode in the Register Checking Logic. (rw) */
    __I  Ifx_UReg_32Bit OBFFEN:2;          /**< \brief [2:1] The OBFF Enable field of the Device Control 2 register of function 0 (rh) */
    __I  Ifx_UReg_32Bit LTREN:1;           /**< \brief [3:3] The LTR Mechanism Enable field of the Device Control 2 register of function 0. (rh) */
    __I  Ifx_UReg_32Bit LTRDIS:1;          /**< \brief [4:4] Disable the autonomous generation of LTR clear message. (rh) */
    __I  Ifx_UReg_32Bit BUSMEN:1;          /**< \brief [5:5] The state of the bus master enable bit in the PCI-compatible Command register. (rh) */
    __I  Ifx_UReg_32Bit MEMEN:1;           /**< \brief [6:6] The state of the Memory Space Enable bit in the PCI-compatible (rh) */
    __I  Ifx_UReg_32Bit NOSOFTRST:1;       /**< \brief [7:7] No Soft Reset bit (rh) */
    __IO Ifx_UReg_32Bit SRITAG:2;          /**< \brief [9:8] Selection of the VM or the PRS on the SRI (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PCIE_DSP_CFG_INFO_Bits;

/** \brief Clock control register */
typedef struct _Ifx_PCIE_DSP_CLC_Bits
{
    __IO Ifx_UReg_32Bit DISR:1;            /**< \brief [0:0] Module Disable Request Bit - DISR (rw) */
    __I  Ifx_UReg_32Bit DISS:1;            /**< \brief [1:1] Module Disable Status Bit - DISS (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit EDIS:1;            /**< \brief [3:3] Reserved (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_PCIE_DSP_CLC_Bits;

/** \brief Debug information */
typedef struct _Ifx_PCIE_DSP_DBG_DATA_Bits
{
    __I  Ifx_UReg_32Bit RFCDAT:32;         /**< \brief [31:0] The data from the previously received flow control update DLLP. (rh) */
} Ifx_PCIE_DSP_DBG_DATA_Bits;

/** \brief Debug status */
typedef struct _Ifx_PCIE_DSP_DBG_STAT_Bits
{
    __I  Ifx_UReg_32Bit LINKUP:1;          /**< \brief [0:0] Data link layer up/down indicator: (rh) */
    __I  Ifx_UReg_32Bit BRDGPD:1;          /**< \brief [1:1] AXI Slave non-DBI transfer pending status. (rh) */
    __I  Ifx_UReg_32Bit DMAPD:1;           /**< \brief [2:2] eDMA transfer pending status. (rh) */
    __I  Ifx_UReg_32Bit XFERPD:1;          /**< \brief [3:3] Receive request pending status. (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __I  Ifx_UReg_32Bit QNEMPTY:1;         /**< \brief [5:5] Level indicating that the receive queues contain TLP header/data (rh) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PCIE_DSP_DBG_STAT_Bits;

/** \brief Doorbell for DMA read channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_DOORBELL_Bits
{
    __O  Ifx_UReg_32Bit RD_DOORBELL:1;     /**< \brief [0:0] Doorbell Number for the DMA channel  $ii (w) */
    __O  Ifx_UReg_32Bit RD_STOP:1;         /**< \brief [1:1] Stop for the DMA channel  $ii (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_DOORBELL_Bits;

/** \brief Error status for DMA read channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_Bits
{
    __I  Ifx_UReg_32Bit APP_READ_ERR_DETECT:1;    /**< \brief [0:0] Application Read Error Detected for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit LINKLIST_ELEMENT_FETCH_ERR_DETECT:1;    /**< \brief [1:1] Linked List Element Fetch Error Detected for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_Bits;

/** \brief Higher error status for DMA read channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_HIGH_Bits
{
    __I  Ifx_UReg_32Bit UNSUPPORTED_REQ:1;    /**< \brief [0:0] Unsupported Request for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit CPL_ABORT:1;       /**< \brief [1:1] Completer Abort for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit CPL_TIMEOUT:1;     /**< \brief [2:2] Completion Time Out for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit DATA_POISIONING:1;    /**< \brief [3:3] Data Poisoning for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_HIGH_Bits;

/** \brief Interrupt clear for DMA read channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_CLEAR_Bits
{
    __O  Ifx_UReg_32Bit RD_DONE_INT_CLEAR:1;    /**< \brief [0:0] Done Interrupt Clear for the DMA channel  $ii (w) */
    __O  Ifx_UReg_32Bit RD_ABORT_INT_CLEAR:1;    /**< \brief [1:1] Abort Interrupt Clear for the DMA channel  $ii (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_CLEAR_Bits;

/** \brief Interrupt status for DMA read channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit RD_DONE_INT_STATUS:1;    /**< \brief [0:0] Done Interrupt Status for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit RD_ABORT_INT_STATUS:1;    /**< \brief [1:1] Abort Interrupt Status for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_STATUS_Bits;

/** \brief DMA Read Channel Control 1 Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_CONTROL1_Bits
{
    __IO Ifx_UReg_32Bit CB:1;              /**< \brief [0:0] Cycle Bit (CB) (rwh) */
    __IO Ifx_UReg_32Bit TCB:1;             /**< \brief [1:1] Toggle Cycle Bit (TCB) (rwh) */
    __IO Ifx_UReg_32Bit LLP:1;             /**< \brief [2:2] Load Link Pointer (LLP) (rwh) */
    __IO Ifx_UReg_32Bit LIE:1;             /**< \brief [3:3] Local Interrupt Enable (LIE) (rwh) */
    __IO Ifx_UReg_32Bit RIE:1;             /**< \brief [4:4] Remote Interrupt Enable (RIE) (rwh) */
    __IO Ifx_UReg_32Bit CS:2;              /**< \brief [6:5] Channel Status (CS) (rwh) */
    __IO Ifx_UReg_32Bit DMA_RESERVED0:1;    /**< \brief [7:7] Reserved (rwh) */
    __IO Ifx_UReg_32Bit CCS:1;             /**< \brief [8:8] Consumer Cycle State (CCS) (rwh) */
    __IO Ifx_UReg_32Bit LLE:1;             /**< \brief [9:9] Linked List Enable (LLE) (rwh) */
    __IO Ifx_UReg_32Bit DMA_RESERVED1:2;    /**< \brief [11:10] Reserved (rwh) */
    __IO Ifx_UReg_32Bit DMA_FUNC_NUM:5;    /**< \brief [16:12] DMA Channel Physical Function Number (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [22:17] \internal Reserved */
    __IO Ifx_UReg_32Bit DMA_NS_DST:1;      /**< \brief [23:23] Destination No Snoop TLP Header Bit (rwh) */
    __IO Ifx_UReg_32Bit DMA_NS_SRC:1;      /**< \brief [24:24] Source No Snoop TLP Header Bit (rwh) */
    __IO Ifx_UReg_32Bit DMA_RO:1;          /**< \brief [25:25] Relaxed Ordering TLP Header Bit (RO)   The DMA uses this TLP header field when generating MRd/MWr (not IMWr) TLPs (rwh) */
    __IO Ifx_UReg_32Bit DMA_RESERVED5:1;    /**< \brief [26:26] Reserved (rwh) */
    __IO Ifx_UReg_32Bit DMA_TC:3;          /**< \brief [29:27] Traffic Class TLP Header Bit (TC) (rwh) */
    __IO Ifx_UReg_32Bit DMA_AT:2;          /**< \brief [31:30] Address Translation TLP Header Bit (AT) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_CONTROL1_Bits;

/** \brief DMA Read DAR High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_HIGH_Bits
{
    __IO Ifx_UReg_32Bit DST_ADDR_REG_HIGH:32;    /**< \brief [31:0] Destination Address Register (higher 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_HIGH_Bits;

/** \brief DMA Read DAR Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_LOW_Bits
{
    __IO Ifx_UReg_32Bit DST_ADDR_REG_LOW:32;    /**< \brief [31:0] Destination Address Register (Lower 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_LOW_Bits;

/** \brief DMA Read Linked List Pointer High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_HIGH_Bits
{
    __IO Ifx_UReg_32Bit LLP_HIGH:32;       /**< \brief [31:0] Higher 32 bits of the address of the linked list transfer list in local memory (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_HIGH_Bits;

/** \brief DMA Read Linked List Pointer Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_LOW_Bits
{
    __IO Ifx_UReg_32Bit LLP_LOW:32;        /**< \brief [31:0] Lower bits of the address of the linked list transfer list in local memory (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_LOW_Bits;

/** \brief DMA Read SAR High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_HIGH_Bits
{
    __IO Ifx_UReg_32Bit SRC_ADDR_REG_HIGH:32;    /**< \brief [31:0] Source Address Register (higher 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_HIGH_Bits;

/** \brief DMA Read SAR Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_LOW_Bits
{
    __IO Ifx_UReg_32Bit SRC_ADDR_REG_LOW:32;    /**< \brief [31:0] Source Address Register (Lower 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_LOW_Bits;

/** \brief DMA Read Transfer Size Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_READ_TRANSFER_SIZE_Bits
{
    __IO Ifx_UReg_32Bit DMA_TRANSFER_SIZE:32;    /**< \brief [31:0] DMA Transfer Size (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_READ_TRANSFER_SIZE_Bits;

/** \brief Doorbell for DMA write channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_DOORBELL_Bits
{
    __O  Ifx_UReg_32Bit WR_DOORBELL:1;     /**< \brief [0:0] Doorbell Number for the DMA channel  $ii (w) */
    __O  Ifx_UReg_32Bit WR_STOP:1;         /**< \brief [1:1] Stop for the DMA channel  $ii (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_DOORBELL_Bits;

/** \brief Error status for DMA write channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_ERR_STATUS_Bits
{
    __I  Ifx_UReg_32Bit APP_READ_ERR_DETECT:1;    /**< \brief [0:0] Application Read Error Detected for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit LINKLIST_ELEMENT_FETCH_ERR_DETECT:1;    /**< \brief [1:1] Linked List Element Fetch Error Detected for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_ERR_STATUS_Bits;

/** \brief Interrupt clear for DMA write channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_CLEAR_Bits
{
    __O  Ifx_UReg_32Bit WR_DONE_INT_CLEAR:1;    /**< \brief [0:0] Done Interrupt Clear for the DMA channel  $ii (w) */
    __O  Ifx_UReg_32Bit WR_ABORT_INT_CLEAR:1;    /**< \brief [1:1] Abort Interrupt Clear for the DMA channel  $ii (w) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_CLEAR_Bits;

/** \brief Interrupt status for DMA write channel  $i */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_STATUS_Bits
{
    __I  Ifx_UReg_32Bit WR_DONE_INT_STATUS:1;    /**< \brief [0:0] Done Interrupt Status for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit WR_ABORT_INT_STATUS:1;    /**< \brief [1:1] Abort Interrupt Status for the DMA channel  $ii (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_STATUS_Bits;

/** \brief DMA Write Channel Control 1 Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_CONTROL1_Bits
{
    __IO Ifx_UReg_32Bit CB:1;              /**< \brief [0:0] Cycle Bit (CB) (rwh) */
    __IO Ifx_UReg_32Bit TCB:1;             /**< \brief [1:1] Toggle Cycle Bit (TCB) (rwh) */
    __IO Ifx_UReg_32Bit LLP:1;             /**< \brief [2:2] Load Link Pointer (LLP) (rwh) */
    __IO Ifx_UReg_32Bit LIE:1;             /**< \brief [3:3] Local Interrupt Enable (LIE) (rwh) */
    __IO Ifx_UReg_32Bit RIE:1;             /**< \brief [4:4] Remote Interrupt Enable (RIE) (rwh) */
    __IO Ifx_UReg_32Bit CS:2;              /**< \brief [6:5] Channel Status (CS) (rwh) */
    __IO Ifx_UReg_32Bit DMA_RESERVED0:1;    /**< \brief [7:7] Reserved (rwh) */
    __IO Ifx_UReg_32Bit CCS:1;             /**< \brief [8:8] Consumer Cycle State (CCS) (rwh) */
    __IO Ifx_UReg_32Bit LLE:1;             /**< \brief [9:9] Linked List Enable (LLE) (rwh) */
    __IO Ifx_UReg_32Bit DMA_RESERVED1:2;    /**< \brief [11:10] Reserved (rwh) */
    __IO Ifx_UReg_32Bit DMA_FUNC_NUM:5;    /**< \brief [16:12] DMA Channel Physical Function Number (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [22:17] \internal Reserved */
    __IO Ifx_UReg_32Bit DMA_NS_DST:1;      /**< \brief [23:23] Destination No Snoop TLP Header Bit (rwh) */
    __IO Ifx_UReg_32Bit DMA_NS_SRC:1;      /**< \brief [24:24] Source No Snoop TLP Header Bit (rwh) */
    __IO Ifx_UReg_32Bit DMA_RO:1;          /**< \brief [25:25] Relaxed Ordering TLP Header Bit (RO) (rwh) */
    __IO Ifx_UReg_32Bit DMA_RESERVED5:1;    /**< \brief [26:26] Reserved (rwh) */
    __IO Ifx_UReg_32Bit DMA_TC:3;          /**< \brief [29:27] Traffic Class TLP Header Bit (TC) (rwh) */
    __IO Ifx_UReg_32Bit DMA_AT:2;          /**< \brief [31:30] Address Translation TLP Header Bit (AT) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_CONTROL1_Bits;

/** \brief DMA Write DAR High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_HIGH_Bits
{
    __IO Ifx_UReg_32Bit DST_ADDR_REG_HIGH:32;    /**< \brief [31:0] Destination Address Register (Higher 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_HIGH_Bits;

/** \brief DMA Write DAR Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_LOW_Bits
{
    __IO Ifx_UReg_32Bit DST_ADDR_REG_LOW:32;    /**< \brief [31:0] Destination Address Register (lower 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_LOW_Bits;

/** \brief DMA Write Linked List Pointer High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_HIGH_Bits
{
    __IO Ifx_UReg_32Bit LLP_HIGH:32;       /**< \brief [31:0] Higher 32 bits of the address of the linked list transfer list in local memory (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_HIGH_Bits;

/** \brief DMA Write Linked List Pointer Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_LOW_Bits
{
    __IO Ifx_UReg_32Bit LLP_LOW:32;        /**< \brief [31:0] Lower bits of the address of the linked list transfer list in local memory (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_LOW_Bits;

/** \brief DMA Write SAR High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_HIGH_Bits
{
    __IO Ifx_UReg_32Bit SRC_ADDR_REG_HIGH:32;    /**< \brief [31:0] Source Address Register (higher 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_HIGH_Bits;

/** \brief DMA Write SAR Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_LOW_Bits
{
    __IO Ifx_UReg_32Bit SRC_ADDR_REG_LOW:32;    /**< \brief [31:0] Source Address Register (lower 32 bits) (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_LOW_Bits;

/** \brief DMA Write Transfer Size Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE_TRANSFER_SIZE_Bits
{
    __IO Ifx_UReg_32Bit DMA_TRANSFER_SIZE:32;    /**< \brief [31:0] DMA Transfer Size (rwh) */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_TRANSFER_SIZE_Bits;

/** \brief DMA Arbitration Scheme for TRGT1 Interface */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_CTRL_DATA_ARB_PRIOR_OFF_Bits
{
    __IO Ifx_UReg_32Bit RTRGT1_WEIGHT:3;    /**< \brief [2:0] Non-DMA Rx Requests (rw) */
    __IO Ifx_UReg_32Bit WR_CTRL_TRGT_WEIGHT:3;    /**< \brief [5:3] DMA Write Channel MRd Requests (for DMA data requests and LL element/descriptor access) (rw) */
    __IO Ifx_UReg_32Bit RD_CTRL_TRGT_WEIGHT:3;    /**< \brief [8:6] DMA Read Channel MRd Requests (for LL element/descriptor access) (rw) */
    __IO Ifx_UReg_32Bit RDBUFF_TRGT_WEIGHT:3;    /**< \brief [11:9] DMA Read Channel MWr Requests (rw) */
    __I  Ifx_UReg_32Bit VERSION:5;         /**< \brief [16:12] Reports the version of Register Map of eDMA (r) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_CTRL_DATA_ARB_PRIOR_OFF_Bits;

/** \brief DMA Number of Channels Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_CTRL_OFF_Bits
{
    __I  Ifx_UReg_32Bit NUM_DMA_WR_CHAN:4;    /**< \brief [3:0] Number of Write Channels (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit NUM_DMA_RD_CHAN:4;    /**< \brief [19:16] Number of Read Channels (r) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_CTRL_OFF_Bits;

/** \brief DMA Read Abort IMWr Address High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_HIGH_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_READ_ABORT_HIGH_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [63:32] of the address field for the Abort IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_HIGH_OFF_Bits;

/** \brief DMA Read Abort IMWr Address Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_READ_ABORT_LOW_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [31:0] of the address field for the Abort IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_LOW_OFF_Bits;

/** \brief DMA Read Channel 1 and 0 IMWr Data Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_CH01_IMWR_DATA_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_CHANNEL_0_DATA:16;    /**< \brief [15:0] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for read channel 0 (rw) */
    __IO Ifx_UReg_32Bit RD_CHANNEL_1_DATA:16;    /**< \brief [31:16] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for read channel 1 (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_CH01_IMWR_DATA_OFF_Bits;

/** \brief DMA Read Channel 3 and 2 IMWr Data Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_CH23_IMWR_DATA_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_CHANNEL_2_DATA:16;    /**< \brief [15:0] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for read channel 2 (rw) */
    __IO Ifx_UReg_32Bit RD_CHANNEL_3_DATA:16;    /**< \brief [31:16] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for read channel 3 (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_CH23_IMWR_DATA_OFF_Bits;

/** \brief DMA Read Engine Channel Arbitration Weight Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_CHANNEL_ARB_WEIGHT_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit READ_CHANNEL0_WEIGHT:5;    /**< \brief [4:0] Channel 0 Weight (rw) */
    __IO Ifx_UReg_32Bit READ_CHANNEL1_WEIGHT:5;    /**< \brief [9:5] Channel 1 Weight (rw) */
    __IO Ifx_UReg_32Bit READ_CHANNEL2_WEIGHT:5;    /**< \brief [14:10] Channel 2 Weight (rw) */
    __IO Ifx_UReg_32Bit READ_CHANNEL3_WEIGHT:5;    /**< \brief [19:15] Channel 3 Weight (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_CHANNEL_ARB_WEIGHT_LOW_OFF_Bits;

/** \brief DMA Read Done IMWr Address High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_HIGH_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_READ_DONE_HIGH_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [63:32] of the address field for the Done IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_HIGH_OFF_Bits;

/** \brief DMA Read Done IMWr Address Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_READ_DONE_LOW_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [31:0] of the address field for the Done IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_LOW_OFF_Bits;

/** \brief DMA Read Doorbell Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_DOORBELL_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_DOORBELL_NUM:3;    /**< \brief [2:0] Doorbell Number (rwh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [30:3] \internal Reserved */
    __IO Ifx_UReg_32Bit RD_STOP:1;         /**< \brief [31:31] Stop (rwh) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_DOORBELL_OFF_Bits;

/** \brief DMA Read Engine Enable Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_EN_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_READ_ENGINE:1;    /**< \brief [0:0] DMA Read Engine Enable (rwh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [15:1] \internal Reserved */
    __IO Ifx_UReg_32Bit DMA_READ_ENGINE_EN_HSHAKE_CH0:1;    /**< \brief [16:16] Enable Handshake for DMA Read Engine Channel 0 (rw) */
    __IO Ifx_UReg_32Bit DMA_READ_ENGINE_EN_HSHAKE_CH1:1;    /**< \brief [17:17] Enable Handshake for DMA Read Engine Channel 1 (rw) */
    __IO Ifx_UReg_32Bit DMA_READ_ENGINE_EN_HSHAKE_CH2:1;    /**< \brief [18:18] Enable Handshake for DMA Read Engine Channel 2 (rw) */
    __IO Ifx_UReg_32Bit DMA_READ_ENGINE_EN_HSHAKE_CH3:1;    /**< \brief [19:19] Enable Handshake for DMA Read Engine Channel 3 (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_EN_OFF_Bits;

/** \brief DMA Read Engine Handshake Counter Channel 0/1/2/3 Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_HSHAKE_CNT_LOW_OFF_Bits
{
    __I  Ifx_UReg_32Bit DMA_READ_ENGINE_HSHAKE_CNT_CH0:5;    /**< \brief [4:0] DMA handshake counter for DMA Read Engine Channel 0 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __I  Ifx_UReg_32Bit DMA_READ_ENGINE_HSHAKE_CNT_CH1:5;    /**< \brief [12:8] DMA handshake counter for DMA Read Engine Channel 1 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit DMA_READ_ENGINE_HSHAKE_CNT_CH2:5;    /**< \brief [20:16] DMA handshake counter for DMA Read Engine Channel 2 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __I  Ifx_UReg_32Bit DMA_READ_ENGINE_HSHAKE_CNT_CH3:5;    /**< \brief [28:24] DMA handshake counter for DMA Read Engine Channel 3 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_HSHAKE_CNT_LOW_OFF_Bits;

/** \brief DMA Read Error Status High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_HIGH_OFF_Bits
{
    __I  Ifx_UReg_32Bit UNSUPPORTED_REQ:8;    /**< \brief [7:0] Unsupported Request (rh) */
    __I  Ifx_UReg_32Bit CPL_ABORT:8;       /**< \brief [15:8] Completer Abort (rh) */
    __I  Ifx_UReg_32Bit CPL_TIMEOUT:8;     /**< \brief [23:16] Completion Time Out (rh) */
    __I  Ifx_UReg_32Bit DATA_POISIONING:8;    /**< \brief [31:24] Data Poisoning (rh) */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_HIGH_OFF_Bits;

/** \brief DMA Read Error Status Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_LOW_OFF_Bits
{
    __I  Ifx_UReg_32Bit APP_WR_ERR_DETECT:8;    /**< \brief [7:0] Application Write Error Detected (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit LINK_LIST_ELEMENT_FETCH_ERR_DETECT:8;    /**< \brief [23:16] Linked List Element Fetch Error Detected (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_LOW_OFF_Bits;

/** \brief DMA Read Interrupt Clear Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_CLEAR_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_DONE_INT_CLEAR:8;    /**< \brief [7:0] Done Interrupt Clear (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RD_ABORT_INT_CLEAR:8;    /**< \brief [23:16] Abort Interrupt Clear (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_CLEAR_OFF_Bits;

/** \brief DMA Read Interrupt Mask Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_MASK_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_DONE_INT_MASK:4;    /**< \brief [3:0] Done Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit RD_ABORT_INT_MASK:4;    /**< \brief [19:16] Abort Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_MASK_OFF_Bits;

/** \brief DMA Read Interrupt Status Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_DONE_INT_STATUS:8;    /**< \brief [7:0] Done Interrupt Status (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit RD_ABORT_INT_STATUS:8;    /**< \brief [23:16] Abort Interrupt Status (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_STATUS_OFF_Bits;

/** \brief DMA Read Linked List Error Enable Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_READ_LINKED_LIST_ERR_EN_OFF_Bits
{
    __IO Ifx_UReg_32Bit RD_CHANNEL_LLRAIE:4;    /**< \brief [3:0] Read Channel LL Remote Abort Interrupt Enable (LLRAIE) (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit RD_CHANNEL_LLLAIE:4;    /**< \brief [19:16] Read Channel LL Local Abort Interrupt Enable (LLLAIE) (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_LINKED_LIST_ERR_EN_OFF_Bits;

/** \brief DMA Write Abort IMWr Address High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_HIGH_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_WRITE_ABORT_HIGH_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [63:32] of the address field for the Abort IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_HIGH_OFF_Bits;

/** \brief DMA Write Abort IMWr Address Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_WRITE_ABORT_LOW_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [31:0] of the address field for the Abort IMWr TLP it generates (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_LOW_OFF_Bits;

/** \brief DMA Write Channel 1 and 0 IMWr Data Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH01_IMWR_DATA_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_CHANNEL_0_DATA:16;    /**< \brief [15:0] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for write channel 0 (rw) */
    __IO Ifx_UReg_32Bit WR_CHANNEL_1_DATA:16;    /**< \brief [31:16] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for write channel 1 (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH01_IMWR_DATA_OFF_Bits;

/** \brief DMA Write Channel 3 and 2 IMWr Data Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH23_IMWR_DATA_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_CHANNEL_2_DATA:16;    /**< \brief [15:0] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for write channel 2 (rw) */
    __IO Ifx_UReg_32Bit WR_CHANNEL_3_DATA:16;    /**< \brief [31:16] The DMA uses this field to generate the data field for the Done or Abort IMWr TLPs it generates for write channel 3 (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH23_IMWR_DATA_OFF_Bits;

/** \brief DMA Write Engine Channel Arbitration Weight Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CHANNEL_ARB_WEIGHT_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit WRITE_CHANNEL0_WEIGHT:5;    /**< \brief [4:0] Channel 0 Weight (rw) */
    __IO Ifx_UReg_32Bit WRITE_CHANNEL1_WEIGHT:5;    /**< \brief [9:5] Channel 1 Weight (rw) */
    __IO Ifx_UReg_32Bit WRITE_CHANNEL2_WEIGHT:5;    /**< \brief [14:10] Channel 2 Weight (rw) */
    __IO Ifx_UReg_32Bit WRITE_CHANNEL3_WEIGHT:5;    /**< \brief [19:15] Channel 3 Weight (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CHANNEL_ARB_WEIGHT_LOW_OFF_Bits;

/** \brief DMA Write Done IMWr Interrupt Address High Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_HIGH_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_WRITE_DONE_HIGH_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [63:32] of the address field for the Done IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_HIGH_OFF_Bits;

/** \brief DMA Write Done IMWr Address Low Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_WRITE_DONE_LOW_REG:32;    /**< \brief [31:0] The DMA uses this field to generate bits [31:0] of the address field for the Done IMWr TLP (rw) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_LOW_OFF_Bits;

/** \brief DMA Write Doorbell Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DOORBELL_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_DOORBELL_NUM:3;    /**< \brief [2:0] Doorbell Number (rwh) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [30:3] \internal Reserved */
    __IO Ifx_UReg_32Bit WR_STOP:1;         /**< \brief [31:31] Stop (rwh) */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DOORBELL_OFF_Bits;

/** \brief DMA Write Engine Enable Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_EN_OFF_Bits
{
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE:1;    /**< \brief [0:0] DMA Write Engine Enable (rwh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [15:1] \internal Reserved */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH0:1;    /**< \brief [16:16] Enable Handshake for DMA Write Engine Channel 0 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH1:1;    /**< \brief [17:17] Enable Handshake for DMA Write Engine Channel 1 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH2:1;    /**< \brief [18:18] Enable Handshake for DMA Write Engine Channel 2 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH3:1;    /**< \brief [19:19] Enable Handshake for DMA Write Engine Channel 3 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH4:1;    /**< \brief [20:20] Enable Handshake for DMA Write Engine Channel 4 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH5:1;    /**< \brief [21:21] Enable Handshake for DMA Write Engine Channel 5 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH6:1;    /**< \brief [22:22] Enable Handshake for DMA Write Engine Channel 6 (rw) */
    __IO Ifx_UReg_32Bit DMA_WRITE_ENGINE_EN_HSHAKE_CH7:1;    /**< \brief [23:23] Enable Handshake for DMA Write Engine Channel 7 (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_EN_OFF_Bits;

/** \brief DMA Write Engine Handshake Counter Channel 0/1/2/3 Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_HSHAKE_CNT_LOW_OFF_Bits
{
    __I  Ifx_UReg_32Bit DMA_WRITE_ENGINE_HSHAKE_CNT_CH0:5;    /**< \brief [4:0] DMA handshake counter for DMA Write Engine Channel 0 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __I  Ifx_UReg_32Bit DMA_WRITE_ENGINE_HSHAKE_CNT_CH1:5;    /**< \brief [12:8] DMA handshake counter for DMA Write Engine Channel 1 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __I  Ifx_UReg_32Bit DMA_WRITE_ENGINE_HSHAKE_CNT_CH2:5;    /**< \brief [20:16] DMA handshake counter for DMA Write Engine Channel 2 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __I  Ifx_UReg_32Bit DMA_WRITE_ENGINE_HSHAKE_CNT_CH3:5;    /**< \brief [28:24] DMA handshake counter for DMA Write Engine Channel 3 (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_HSHAKE_CNT_LOW_OFF_Bits;

/** \brief DMA Write Error Status Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ERR_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit APP_READ_ERR_DETECT:8;    /**< \brief [7:0] Application Read Error Detected (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit LINKLIST_ELEMENT_FETCH_ERR_DETECT:8;    /**< \brief [23:16] Linked List Element Fetch Error Detected (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ERR_STATUS_OFF_Bits;

/** \brief DMA Write Interrupt Clear Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_CLEAR_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_DONE_INT_CLEAR:4;    /**< \brief [3:0] Done Interrupt Clear (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit WR_ABORT_INT_CLEAR:4;    /**< \brief [19:16] Abort Interrupt Clear (rwh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_CLEAR_OFF_Bits;

/** \brief DMA Write Interrupt Mask Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_MASK_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_DONE_INT_MASK:4;    /**< \brief [3:0] Done Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit WR_ABORT_INT_MASK:4;    /**< \brief [19:16] Abort Interrupt Mask (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_MASK_OFF_Bits;

/** \brief DMA Write Interrupt Status Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_DONE_INT_STATUS:8;    /**< \brief [7:0] Done Interrupt Status (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit WR_ABORT_INT_STATUS:8;    /**< \brief [23:16] Abort Interrupt Status (rwh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_STATUS_OFF_Bits;

/** \brief DMA Write Linked List Error Enable Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_DMA_WRITE_LINKED_LIST_ERR_EN_OFF_Bits
{
    __IO Ifx_UReg_32Bit WR_CHANNEL_LLRAIE:4;    /**< \brief [3:0] Write Channel LL Remote Abort Interrupt Enable (LLRAIE) (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit WR_CHANNEL_LLLAIE:4;    /**< \brief [19:16] Write Channel LL Local Abort Interrupt Enable (LLLAIE) (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_LINKED_LIST_ERR_EN_OFF_Bits;

/** \brief DMA Read Channel 0 Power Enable Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH_CH_Bits
{
    __IO Ifx_UReg_32Bit DMA_READ_CH0_PWR_EN:1;    /**< \brief [0:0] DMA Read Channel 0 Power enable/disable (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH_CH_Bits;

/** \brief DMA Write Channel 0 Power Enable Register */
typedef struct _Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH_CH_Bits
{
    __IO Ifx_UReg_32Bit DMA_WRITE_CH0_PWR_EN:1;    /**< \brief [0:0] DMA Write Channel 0 Power enable/disable (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH_CH_Bits;

/** \brief Error clear */
typedef struct _Ifx_PCIE_DSP_ERR_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit CORRCLR:1;         /**< \brief [0:0] Clear the CORR bit. (w) */
    __O  Ifx_UReg_32Bit NFATCLR:1;         /**< \brief [1:1] Clear the NFAT bit. (w) */
    __O  Ifx_UReg_32Bit FATCLR:1;          /**< \brief [2:2] Clear the FAT bit. (w) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PCIE_DSP_ERR_INTCLR_Bits;

/** \brief Error enable */
typedef struct _Ifx_PCIE_DSP_ERR_INTEN_Bits
{
    __IO Ifx_UReg_32Bit CORREN:1;          /**< \brief [0:0] Enable the CORR bit. (rw) */
    __IO Ifx_UReg_32Bit NFATEN:1;          /**< \brief [1:1] Enable the NFAT bit. (rw) */
    __IO Ifx_UReg_32Bit FATEN:1;           /**< \brief [2:2] Enable the FAT bit. (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PCIE_DSP_ERR_INTEN_Bits;

/** \brief Error status */
typedef struct _Ifx_PCIE_DSP_ERR_STAT_Bits
{
    __I  Ifx_UReg_32Bit CORR:1;            /**< \brief [0:0] Received an ERR_COR message. The interrupt can be triggered when the ERR_INTEN.CORREN is asserted. (rh) */
    __I  Ifx_UReg_32Bit NFAT:1;            /**< \brief [1:1] Indicates that the controller received an ERR_NONFATAL message. The interrupt can be triggered when the ERR_INTEN.NFATEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit FAT:1;             /**< \brief [2:2] Indicates that the controller received an ERR_FATAL message. The interrupt can be triggered when the ERR_INTEN.FATEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PCIE_DSP_ERR_STAT_Bits;

/** \brief Module identification register */
typedef struct _Ifx_PCIE_DSP_ID_Bits
{
    __I  Ifx_UReg_32Bit MOD_REV:8;         /**< \brief [7:0] Module Revision - MOD_REV (r) */
    __I  Ifx_UReg_32Bit MOD_TYPE:8;        /**< \brief [15:8] Module Type - MOD_TYPE (r) */
    __I  Ifx_UReg_32Bit MOD_NUM:16;        /**< \brief [31:16] Module Number - MOD_NUM (r) */
} Ifx_PCIE_DSP_ID_Bits;

/** \brief Trigger INTX interrupt, EP only. */
typedef struct _Ifx_PCIE_DSP_INT_INTXCTRL_Bits
{
    __IO Ifx_UReg_32Bit INTX:1;            /**< \brief [0:0] INTX interrupt (rw) */
    __I  Ifx_UReg_32Bit PB:1;              /**< \brief [1:1] Pending status of INTx interrupt request (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_INT_INTXCTRL_Bits;

/** \brief Request MSI interrupt, EP only. */
typedef struct _Ifx_PCIE_DSP_INT_MSICTRL_Bits
{
    __O  Ifx_UReg_32Bit INT0:1;            /**< \brief [0:0] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT1:1;            /**< \brief [1:1] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT2:1;            /**< \brief [2:2] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT3:1;            /**< \brief [3:3] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT4:1;            /**< \brief [4:4] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT5:1;            /**< \brief [5:5] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT6:1;            /**< \brief [6:6] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT7:1;            /**< \brief [7:7] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT8:1;            /**< \brief [8:8] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT9:1;            /**< \brief [9:9] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT10:1;           /**< \brief [10:10] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT11:1;           /**< \brief [11:11] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT12:1;           /**< \brief [12:12] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT13:1;           /**< \brief [13:13] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT14:1;           /**< \brief [14:14] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT15:1;           /**< \brief [15:15] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT16:1;           /**< \brief [16:16] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT17:1;           /**< \brief [17:17] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT18:1;           /**< \brief [18:18] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT19:1;           /**< \brief [19:19] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT20:1;           /**< \brief [20:20] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT21:1;           /**< \brief [21:21] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT22:1;           /**< \brief [22:22] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT23:1;           /**< \brief [23:23] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT24:1;           /**< \brief [24:24] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT25:1;           /**< \brief [25:25] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT26:1;           /**< \brief [26:26] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT27:1;           /**< \brief [27:27] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT28:1;           /**< \brief [28:28] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT29:1;           /**< \brief [29:29] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT30:1;           /**< \brief [30:30] MSI interrupt request "INT"+    $z (w) */
    __O  Ifx_UReg_32Bit INT31:1;           /**< \brief [31:31] MSI interrupt request "INT"+    $z (w) */
} Ifx_PCIE_DSP_INT_MSICTRL_Bits;

/** \brief Pending status of MSI interrupt request, EP only. */
typedef struct _Ifx_PCIE_DSP_INT_MSISTAT_Bits
{
    __I  Ifx_UReg_32Bit PD0:1;             /**< \brief [0:0] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD1:1;             /**< \brief [1:1] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD2:1;             /**< \brief [2:2] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD3:1;             /**< \brief [3:3] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD4:1;             /**< \brief [4:4] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD5:1;             /**< \brief [5:5] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD6:1;             /**< \brief [6:6] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD7:1;             /**< \brief [7:7] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD8:1;             /**< \brief [8:8] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD9:1;             /**< \brief [9:9] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD10:1;            /**< \brief [10:10] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD11:1;            /**< \brief [11:11] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD12:1;            /**< \brief [12:12] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD13:1;            /**< \brief [13:13] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD14:1;            /**< \brief [14:14] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD15:1;            /**< \brief [15:15] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD16:1;            /**< \brief [16:16] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD17:1;            /**< \brief [17:17] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD18:1;            /**< \brief [18:18] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD19:1;            /**< \brief [19:19] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD20:1;            /**< \brief [20:20] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD21:1;            /**< \brief [21:21] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD22:1;            /**< \brief [22:22] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD23:1;            /**< \brief [23:23] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD24:1;            /**< \brief [24:24] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD25:1;            /**< \brief [25:25] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD26:1;            /**< \brief [26:26] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD27:1;            /**< \brief [27:27] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD28:1;            /**< \brief [28:28] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD29:1;            /**< \brief [29:29] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD30:1;            /**< \brief [30:30] Pending status of interrupt request (rh) */
    __I  Ifx_UReg_32Bit PD31:1;            /**< \brief [31:31] Pending status of interrupt request (rh) */
} Ifx_PCIE_DSP_INT_MSISTAT_Bits;

/** \brief Receive incoming interrupt request, EP only. */
typedef struct _Ifx_PCIE_DSP_INT_REQTRIG_Bits
{
    __I  Ifx_UReg_32Bit REQTRIG:5;         /**< \brief [4:0] Receive incoming interrupt request (rh) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_PCIE_DSP_INT_REQTRIG_Bits;

/** \brief Interrupt clear, EP only. */
typedef struct _Ifx_PCIE_DSP_INT_TRIGCLR_Bits
{
    __O  Ifx_UReg_32Bit RQCLR0:1;          /**< \brief [0:0] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR1:1;          /**< \brief [1:1] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR2:1;          /**< \brief [2:2] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR3:1;          /**< \brief [3:3] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR4:1;          /**< \brief [4:4] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR5:1;          /**< \brief [5:5] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR6:1;          /**< \brief [6:6] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR7:1;          /**< \brief [7:7] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR8:1;          /**< \brief [8:8] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR9:1;          /**< \brief [9:9] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR10:1;         /**< \brief [10:10] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR11:1;         /**< \brief [11:11] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR12:1;         /**< \brief [12:12] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR13:1;         /**< \brief [13:13] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR14:1;         /**< \brief [14:14] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR15:1;         /**< \brief [15:15] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR16:1;         /**< \brief [16:16] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR17:1;         /**< \brief [17:17] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR18:1;         /**< \brief [18:18] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR19:1;         /**< \brief [19:19] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR20:1;         /**< \brief [20:20] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR21:1;         /**< \brief [21:21] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR22:1;         /**< \brief [22:22] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR23:1;         /**< \brief [23:23] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR24:1;         /**< \brief [24:24] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR25:1;         /**< \brief [25:25] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR26:1;         /**< \brief [26:26] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR27:1;         /**< \brief [27:27] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR28:1;         /**< \brief [28:28] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR29:1;         /**< \brief [29:29] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR30:1;         /**< \brief [30:30] Clears the corresponding incoming interrupt request. (w) */
    __O  Ifx_UReg_32Bit RQCLR31:1;         /**< \brief [31:31] Clears the corresponding incoming interrupt request. (w) */
} Ifx_PCIE_DSP_INT_TRIGCLR_Bits;

/** \brief Interrupt enable EP only. */
typedef struct _Ifx_PCIE_DSP_INT_TRIGEN_Bits
{
    __IO Ifx_UReg_32Bit RQEN0:1;           /**< \brief [0:0] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN1:1;           /**< \brief [1:1] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN2:1;           /**< \brief [2:2] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN3:1;           /**< \brief [3:3] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN4:1;           /**< \brief [4:4] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN5:1;           /**< \brief [5:5] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN6:1;           /**< \brief [6:6] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN7:1;           /**< \brief [7:7] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN8:1;           /**< \brief [8:8] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN9:1;           /**< \brief [9:9] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN10:1;          /**< \brief [10:10] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN11:1;          /**< \brief [11:11] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN12:1;          /**< \brief [12:12] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN13:1;          /**< \brief [13:13] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN14:1;          /**< \brief [14:14] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN15:1;          /**< \brief [15:15] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN16:1;          /**< \brief [16:16] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN17:1;          /**< \brief [17:17] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN18:1;          /**< \brief [18:18] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN19:1;          /**< \brief [19:19] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN20:1;          /**< \brief [20:20] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN21:1;          /**< \brief [21:21] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN22:1;          /**< \brief [22:22] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN23:1;          /**< \brief [23:23] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN24:1;          /**< \brief [24:24] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN25:1;          /**< \brief [25:25] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN26:1;          /**< \brief [26:26] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN27:1;          /**< \brief [27:27] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN28:1;          /**< \brief [28:28] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN29:1;          /**< \brief [29:29] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN30:1;          /**< \brief [30:30] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
    __IO Ifx_UReg_32Bit RQEN31:1;          /**< \brief [31:31] Enable bit to block the incoming interrupt to the local interrupt router. (rw) */
} Ifx_PCIE_DSP_INT_TRIGEN_Bits;

/** \brief Trigger status */
typedef struct _Ifx_PCIE_DSP_INT_TRIGSTAT_Bits
{
    __I  Ifx_UReg_32Bit RQ0:1;             /**< \brief [0:0] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ1:1;             /**< \brief [1:1] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ2:1;             /**< \brief [2:2] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ3:1;             /**< \brief [3:3] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ4:1;             /**< \brief [4:4] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ5:1;             /**< \brief [5:5] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ6:1;             /**< \brief [6:6] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ7:1;             /**< \brief [7:7] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ8:1;             /**< \brief [8:8] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ9:1;             /**< \brief [9:9] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ10:1;            /**< \brief [10:10] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ11:1;            /**< \brief [11:11] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ12:1;            /**< \brief [12:12] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ13:1;            /**< \brief [13:13] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ14:1;            /**< \brief [14:14] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ15:1;            /**< \brief [15:15] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ16:1;            /**< \brief [16:16] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ17:1;            /**< \brief [17:17] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ18:1;            /**< \brief [18:18] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ19:1;            /**< \brief [19:19] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ20:1;            /**< \brief [20:20] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ21:1;            /**< \brief [21:21] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ22:1;            /**< \brief [22:22] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ23:1;            /**< \brief [23:23] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ24:1;            /**< \brief [24:24] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ25:1;            /**< \brief [25:25] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ26:1;            /**< \brief [26:26] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ27:1;            /**< \brief [27:27] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ28:1;            /**< \brief [28:28] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ29:1;            /**< \brief [29:29] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ30:1;            /**< \brief [30:30] MSI request received (rh) */
    __I  Ifx_UReg_32Bit RQ31:1;            /**< \brief [31:31] MSI request received (rh) */
} Ifx_PCIE_DSP_INT_TRIGSTAT_Bits;

/** \brief L1 Substates Capability Register */
typedef struct _Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAPABILITY_REG_Bits
{
    __IO Ifx_UReg_32Bit L1_2_PCIPM_SUPPORT:1;    /**< \brief [0:0] PCI-PM L12 Supported (rw) */
    __IO Ifx_UReg_32Bit L1_1_PCIPM_SUPPORT:1;    /**< \brief [1:1] PCI-PM L11 Supported (rw) */
    __IO Ifx_UReg_32Bit L1_2_ASPM_SUPPORT:1;    /**< \brief [2:2] ASPM L12 Supported (rw) */
    __IO Ifx_UReg_32Bit L1_1_ASPM_SUPPORT:1;    /**< \brief [3:3] ASPM L11 Supported (rw) */
    __IO Ifx_UReg_32Bit L1_PMSUB_SUPPORT:1;    /**< \brief [4:4] L1 PM Substates ECN Supported (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit COMM_MODE_SUPPORT:8;    /**< \brief [15:8] Port Common Mode Restore Time (rw) */
    __IO Ifx_UReg_32Bit PWR_ON_SCALE_SUPPORT:2;    /**< \brief [17:16] Port T Power On Scale (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit PWR_ON_VALUE_SUPPORT:5;    /**< \brief [23:19] Port T Power On Value (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAPABILITY_REG_Bits;

/** \brief L1 Substates Extended Capability Header */
typedef struct _Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAP_HEADER_REG_Bits
{
    __IO Ifx_UReg_32Bit EXTENDED_CAP_ID:16;    /**< \brief [15:0] L1SUB Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit CAP_VERSION:4;     /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAP_HEADER_REG_Bits;

/** \brief L1 Substates Control 1 Register */
typedef struct _Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL1_REG_Bits
{
    __IO Ifx_UReg_32Bit L1_2_PCIPM_EN:1;    /**< \brief [0:0] PCI-PM L12 Enable (rw) */
    __IO Ifx_UReg_32Bit L1_1_PCIPM_EN:1;    /**< \brief [1:1] PCI-PM L11 Enable (rw) */
    __IO Ifx_UReg_32Bit L1_2_ASPM_EN:1;    /**< \brief [2:2] ASPM L12 Enable (rw) */
    __IO Ifx_UReg_32Bit L1_1_ASPM_EN:1;    /**< \brief [3:3] ASPM L11 Enable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit T_COMMON_MODE:8;    /**< \brief [15:8] Common Mode Restore Time (rw) */
    __IO Ifx_UReg_32Bit L1_2_TH_VAL:10;    /**< \brief [25:16] LTR L12 Threshold Value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [28:26] \internal Reserved */
    __IO Ifx_UReg_32Bit L1_2_TH_SCA:3;     /**< \brief [31:29] LTR L12 Threshold Scale (rw) */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL1_REG_Bits;

/** \brief L1 Substates Control 2 Register */
typedef struct _Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL2_REG_Bits
{
    __IO Ifx_UReg_32Bit T_POWER_ON_SCALE:2;    /**< \brief [1:0] T Power On Scale (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit T_POWER_ON_VALUE:5;    /**< \brief [7:3] T Power On Value (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL2_REG_Bits;

/** \brief DMA link list control register */
typedef struct _Ifx_PCIE_DSP_LLCTRL_Bits
{
    __IO Ifx_UReg_32Bit WRTOGG0:1;         /**< \brief [0:0] DMA Write engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit WRTOGG1:1;         /**< \brief [1:1] DMA Write engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit WRTOGG2:1;         /**< \brief [2:2] DMA Write engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit WRTOGG3:1;         /**< \brief [3:3] DMA Write engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit RDTOGG0:1;         /**< \brief [4:4] DMA Read engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit RDTOGG1:1;         /**< \brief [5:5] DMA Read engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit RDTOGG2:1;         /**< \brief [6:6] DMA Read engine descriptor transfer go toggle (rw) */
    __IO Ifx_UReg_32Bit RDTOGG3:1;         /**< \brief [7:7] DMA Read engine descriptor transfer go toggle (rw) */
    __I  Ifx_UReg_32Bit WRDONE0:1;         /**< \brief [8:8] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit WRDONE1:1;         /**< \brief [9:9] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit WRDONE2:1;         /**< \brief [10:10] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit WRDONE3:1;         /**< \brief [11:11] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit RDDONE0:1;         /**< \brief [12:12] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit RDDONE1:1;         /**< \brief [13:13] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit RDDONE2:1;         /**< \brief [14:14] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit RDDONE3:1;         /**< \brief [15:15] DMA write engine descriptor transfer done toggle (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_LLCTRL_Bits;

/** \brief Controller control */
typedef struct _Ifx_PCIE_DSP_LNK_CORECTRL_Bits
{
    __IO Ifx_UReg_32Bit SRISMD:1;          /**< \brief [0:0] SRIS operating mode (rw) */
    __IO Ifx_UReg_32Bit LTSSMEN:1;         /**< \brief [1:1] Start link training. (rw) */
    __IO Ifx_UReg_32Bit RQRTYEN:1;         /**< \brief [2:2] Defer incoming configuration requests (rw) */
    __IO Ifx_UReg_32Bit PFRQRTYEN:1;       /**< \brief [3:3] Per Physical Function (PF) to defer incoming configuration requests (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __O  Ifx_UReg_32Bit HOTRST:1;          /**< \brief [5:5] Request from your application to send a hot reset to the upstream port, RC only. (w) */
    __I  Ifx_UReg_32Bit PERSTSTA:1;        /**< \brief [6:6] PERST# pin status (rh) */
    __IO Ifx_UReg_32Bit PERSTVAL:1;        /**< \brief [7:7] PERST# override value (rw) */
    __IO Ifx_UReg_32Bit PERSTOVR:1;        /**< \brief [8:8] PERST# override enable (rw) */
    __O  Ifx_UReg_32Bit PERSTCLR:1;        /**< \brief [9:9] Clear the interrupt status of the PERSTINT. (w) */
    __IO Ifx_UReg_32Bit PERST:2;           /**< \brief [11:10] Alternate Input Select - PERST# (rw) */
    __IO Ifx_UReg_32Bit WAKE:2;            /**< \brief [13:12] Alternate input and output select - WAKE# (rw) */
    __IO Ifx_UReg_32Bit CLKREQ:2;          /**< \brief [15:14] Alternate input and output select - CLKREQ# (rw) */
    __IO Ifx_UReg_32Bit WAKEN:1;           /**< \brief [16:16] WAKE#  enable control. (rw) */
    __IO Ifx_UReg_32Bit CLKREQEN:1;        /**< \brief [17:17] CLKREQ#  enable control. (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PCIE_DSP_LNK_CORECTRL_Bits;

/** \brief Select device/port type */
typedef struct _Ifx_PCIE_DSP_LNK_DVCTYP_Bits
{
    __IO Ifx_UReg_32Bit TYP:4;             /**< \brief [3:0] Device/port type (rw) */
    __I  Ifx_UReg_32Bit PWD:1;             /**< \brief [4:4] Power down status of the PCIe controller (rh) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_PCIE_DSP_LNK_DVCTYP_Bits;

/** \brief Enable the interrupt requests to SRC_PCIELNK */
typedef struct _Ifx_PCIE_DSP_LNK_INTEN_Bits
{
    __IO Ifx_UReg_32Bit LINKINTEN:1;       /**< \brief [0:0] Enable the LINKINT (rw) */
    __IO Ifx_UReg_32Bit BWINTEN:1;         /**< \brief [1:1] Enable the BWINT bit. (rw) */
    __IO Ifx_UReg_32Bit EQINTEN:1;         /**< \brief [2:2] Enable the EQINT bit. (rw) */
    __IO Ifx_UReg_32Bit PERSTEN:1;         /**< \brief [3:3] Enable the PERSTINT bit. (rw) */
    __I  Ifx_UReg_32Bit :28;               /**< \brief [31:4] \internal Reserved */
} Ifx_PCIE_DSP_LNK_INTEN_Bits;

/** \brief Indicate link status */
typedef struct _Ifx_PCIE_DSP_LNK_STAT_Bits
{
    __I  Ifx_UReg_32Bit LINKUP:1;          /**< \brief [0:0] PHY Link up/down indicator (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __I  Ifx_UReg_32Bit LINKRQRST:1;       /**< \brief [2:2] Reset request (rh) */
    __I  Ifx_UReg_32Bit LINKINT:1;         /**< \brief [3:3] Link Autonomous Bandwidth Interrupt. The interrupt can be triggered when the LNK_INTEN.LINKINTEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit BWINT:1;           /**< \brief [4:4] Link Bandwidth Management Interrupt. The interrupt can be triggered when the LIK_INTEN.BWINTEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit EQINT:1;           /**< \brief [5:5] Link Equalization Request. The interrupt can be triggered when the LIK_INTEN.EQINTEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit PERSTINT:1;        /**< \brief [6:6] Interrupt status of the PERST#. The interrupt can be triggered when the LIK_INTEN.PERSTEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_PCIE_DSP_LNK_STAT_Bits;

/** \brief LTR control */
typedef struct _Ifx_PCIE_DSP_LTR_CTRL_Bits
{
    __IO Ifx_UReg_32Bit MSGREQ:1;          /**< \brief [0:0] Trigger to send an LTR message. (rwh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [6:1] \internal Reserved */
    __I  Ifx_UReg_32Bit RLTR:1;            /**< \brief [7:7] Received an LTR message. The interrupt can be triggered when the RLTREN is asserted. (rh) */
    __O  Ifx_UReg_32Bit RLTRCLR:1;         /**< \brief [8:8] Clear the RLTR bit. (w) */
    __IO Ifx_UReg_32Bit RLTREN:1;          /**< \brief [9:9] Enable the RLTR bit. (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PCIE_DSP_LTR_CTRL_Bits;

/** \brief LTR message */
typedef struct _Ifx_PCIE_DSP_LTR_GNRTN_Bits
{
    __IO Ifx_UReg_32Bit LTRLAT:32;         /**< \brief [31:0] LTR message that your application is requesting to send. (rw) */
} Ifx_PCIE_DSP_LTR_GNRTN_Bits;

/** \brief ELBI mailbox register */
typedef struct _Ifx_PCIE_DSP_MAILBOX_DATA_Bits
{
    __IO Ifx_UReg_32Bit DATA:32;           /**< \brief [31:0] ELBI mailbox registers. (rwh) */
} Ifx_PCIE_DSP_MAILBOX_DATA_Bits;

/** \brief Message information */
typedef struct _Ifx_PCIE_DSP_MSG_INFO_Bits
{
    __I  Ifx_UReg_32Bit REQID:16;          /**< \brief [15:0] The requester ID of the received Message. (rh) */
    __I  Ifx_UReg_32Bit CORERR:1;          /**< \brief [16:16] Sent Correctable Error, EP only. (rh) */
    __I  Ifx_UReg_32Bit NONFAT:1;          /**< \brief [17:17] Sent Non-Fatal Error, EP only. (rh) */
    __I  Ifx_UReg_32Bit FATERR:1;          /**< \brief [18:18] Sent Fatal Error, EP only. (rh) */
    __I  Ifx_UReg_32Bit SURPDWN:1;         /**< \brief [19:19] Indicates that a surprise down event is occurring in the controller. (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [20:20] \internal Reserved */
    __IO Ifx_UReg_32Bit DRSRDY:1;          /**< \brief [21:21] "Defers DRS messaging when set to '0', EP only." (rw) */
    __I  Ifx_UReg_32Bit DRSSTAT:1;         /**< \brief [22:22] DRS Message Received Interrupt, RC only. The interrupt can be triggered when the DRSEN is asserted. (rh) */
    __O  Ifx_UReg_32Bit DRSCLR:1;          /**< \brief [23:23] Clear the DRS state, RC only. (w) */
    __IO Ifx_UReg_32Bit DRSEN:1;           /**< \brief [24:24] Enable the DRS interrupt, RC only. (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PCIE_DSP_MSG_INFO_Bits;

/** \brief Message payload information */
typedef struct _Ifx_PCIE_DSP_MSG_PAYLOAD_Bits
{
    __I  Ifx_UReg_32Bit PAYLOAD:32;        /**< \brief [31:0] Received message header information. (rh) */
} Ifx_PCIE_DSP_MSG_PAYLOAD_Bits;

/** \brief Message Address Register for MSI (Offset 04h) */
typedef struct _Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_04H_REG_Bits
{
    __I  Ifx_UReg_32Bit :2;                /**< \brief [1:0] \internal Reserved */
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_OFF_04H:30;    /**< \brief [31:2] Message Address - System-specified message address (rw) */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_04H_REG_Bits;

/** \brief Message Address Register for MSI (Offset 08h) */
typedef struct _Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_08H_REG_Bits
{
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_OFF_08H:16;    /**< \brief [15:0] For a function that supports a 32-bit message address, this field contains Message Data (System-specified message data) (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_OFF_0AH:16;    /**< \brief [31:16] For a function that supports a 32-bit message address, this field contains Extended Message Data (System-specified message data) (rw) */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_08H_REG_Bits;

/** \brief Message Address Register for MSI (Offset 0Ch) */
typedef struct _Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_0CH_REG_Bits
{
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_OFF_0CH:16;    /**< \brief [15:0] For a function that supports a 32-bit message address, this field contains the lower Mask Bits when the Per Vector Masking Capable bit (PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_PVM_SUPPORT) is set (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_OFF_0EH:16;    /**< \brief [31:16] For a function that supports a 32-bit message address, this field contains the upper Mask Bits when the Per Vector Masking Capable bit (PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_PVM_SUPPORT) is set (rw) */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_0CH_REG_Bits;

/** \brief Message Address Register for MSI (Offset 10h) */
typedef struct _Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_10H_REG_Bits
{
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_OFF_10H:32;    /**< \brief [31:0] Used for MSI when the Per Vector Masking Capable bit (PCI_MSI_CAP_ID_NEXT_CTRL_REG.PCI_PVM_SUPPORT) is set (rw) */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_10H_REG_Bits;

/** \brief Message Address Register for MSI (Offset 14h) */
typedef struct _Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_14H_REG_Bits
{
    __I  Ifx_UReg_32Bit PCI_MSI_CAP_OFF_14H:32;    /**< \brief [31:0] Pending Bits (r) */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_14H_REG_Bits;

/** \brief MSI Capability Header and Message Control Register */
typedef struct _Ifx_PCIE_DSP_MSICAP_PCI_MSI_CAP_ID_NEXT_CTRL_REG_Bits
{
    __I  Ifx_UReg_32Bit PCI_MSI_CAP_ID:8;    /**< \brief [7:0] Capability ID (r) */
    __IO Ifx_UReg_32Bit PCI_MSI_CAP_NEXT_OFFSET:8;    /**< \brief [15:8] Next Capability Pointer (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_ENABLE:1;    /**< \brief [16:16] MSI Enable (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_MULTIPLE_MSG_CAP:3;    /**< \brief [19:17] Multiple Message Capable (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_MULTIPLE_MSG_EN:3;    /**< \brief [22:20] Multiple Message Enable (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_64_BIT_ADDR_CAP:1;    /**< \brief [23:23] 64 bit address capable (rw) */
    __I  Ifx_UReg_32Bit PCI_PVM_SUPPORT:1;    /**< \brief [24:24] Per-Vector Masking Capable (r) */
    __IO Ifx_UReg_32Bit PCI_MSI_EXT_DATA_CAP:1;    /**< \brief [25:25] Extended Message Data Capable (rw) */
    __IO Ifx_UReg_32Bit PCI_MSI_EXT_DATA_EN:1;    /**< \brief [26:26] Extended Message Data Enable (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_PCIE_DSP_MSICAP_PCI_MSI_CAP_ID_NEXT_CTRL_REG_Bits;

/** \brief MSI-X Capability ID, Next Pointer, Control Register */
typedef struct _Ifx_PCIE_DSP_MSIXCAPDBI_SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG_Bits
{
    __I  Ifx_UReg_32Bit PCI_MSIX_RESERVED0:16;    /**< \brief [15:0] reserved field 0 in the shadow register (r) */
    __I  Ifx_UReg_32Bit PCI_MSIX_TABLE_SIZE:11;    /**< \brief [26:16] MSI-X Table Size in the shadow register (rh) */
    __I  Ifx_UReg_32Bit PCI_MSIX_RESERVED1:5;    /**< \brief [31:27] reserved field 1 in the shadow register (r) */
} Ifx_PCIE_DSP_MSIXCAPDBI_SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG_Bits;

/** \brief MSI-X PBA Offset and BIR Register */
typedef struct _Ifx_PCIE_DSP_MSIXCAP_MSIX_PBA_OFFSET_REG_Bits
{
    __IO Ifx_UReg_32Bit PCI_MSIX_PBA_BIR:3;    /**< \brief [2:0] MSI-X PBA BIR (rw) */
    __IO Ifx_UReg_32Bit PCI_MSIX_PBA_OFFSET:29;    /**< \brief [31:3] MSI-X PBA Offset (rw) */
} Ifx_PCIE_DSP_MSIXCAP_MSIX_PBA_OFFSET_REG_Bits;

/** \brief MSI-X Table Offset and BIR Register */
typedef struct _Ifx_PCIE_DSP_MSIXCAP_MSIX_TABLE_OFFSET_REG_Bits
{
    __IO Ifx_UReg_32Bit PCI_MSIX_BIR:3;    /**< \brief [2:0] MSI-X Table BAR Indicator Register Field (rw) */
    __IO Ifx_UReg_32Bit PCI_MSIX_TABLE_OFFSET:29;    /**< \brief [31:3] MSI-X Table Offset (rw) */
} Ifx_PCIE_DSP_MSIXCAP_MSIX_TABLE_OFFSET_REG_Bits;

/** \brief MSI-X Capability ID, Next Pointer, Control Register */
typedef struct _Ifx_PCIE_DSP_MSIXCAP_PCI_MSIX_CAP_ID_NEXT_CTRL_REG_Bits
{
    __I  Ifx_UReg_32Bit PCI_MSIX_CAP_ID:8;    /**< \brief [7:0] MSI-X Capability ID (r) */
    __IO Ifx_UReg_32Bit PCI_MSIX_CAP_NEXT_OFFSET:8;    /**< \brief [15:8] MSI-X Next Capability Pointer (rw) */
    __IO Ifx_UReg_32Bit PCI_MSIX_TABLE_SIZE:11;    /**< \brief [26:16] MSI-X Table Size (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [29:27] \internal Reserved */
    __IO Ifx_UReg_32Bit PCI_MSIX_FUNCTION_MASK:1;    /**< \brief [30:30] Function Mask (rw) */
    __IO Ifx_UReg_32Bit PCI_MSIX_ENABLE:1;    /**< \brief [31:31] MSI-X Enable (rw) */
} Ifx_PCIE_DSP_MSIXCAP_PCI_MSIX_CAP_ID_NEXT_CTRL_REG_Bits;

/** \brief MSIX table DWORD */
typedef struct _Ifx_PCIE_DSP_MSIXPBA_DWORD_Bits
{
    __I  Ifx_UReg_32Bit PB0:1;             /**< \brief [0:0] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB1:1;             /**< \brief [1:1] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB2:1;             /**< \brief [2:2] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB3:1;             /**< \brief [3:3] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB4:1;             /**< \brief [4:4] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB5:1;             /**< \brief [5:5] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB6:1;             /**< \brief [6:6] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB7:1;             /**< \brief [7:7] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB8:1;             /**< \brief [8:8] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB9:1;             /**< \brief [9:9] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB10:1;            /**< \brief [10:10] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB11:1;            /**< \brief [11:11] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB12:1;            /**< \brief [12:12] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB13:1;            /**< \brief [13:13] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB14:1;            /**< \brief [14:14] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB15:1;            /**< \brief [15:15] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB16:1;            /**< \brief [16:16] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB17:1;            /**< \brief [17:17] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB18:1;            /**< \brief [18:18] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB19:1;            /**< \brief [19:19] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB20:1;            /**< \brief [20:20] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB21:1;            /**< \brief [21:21] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB22:1;            /**< \brief [22:22] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB23:1;            /**< \brief [23:23] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB24:1;            /**< \brief [24:24] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB25:1;            /**< \brief [25:25] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB26:1;            /**< \brief [26:26] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB27:1;            /**< \brief [27:27] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB28:1;            /**< \brief [28:28] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB29:1;            /**< \brief [29:29] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB30:1;            /**< \brief [30:30] Pending bit, as defined in the PCIe spec. (rh) */
    __I  Ifx_UReg_32Bit PB31:1;            /**< \brief [31:31] Pending bit, as defined in the PCIe spec. (rh) */
} Ifx_PCIE_DSP_MSIXPBA_DWORD_Bits;

/** \brief OBFF message control */
typedef struct _Ifx_PCIE_DSP_OBFFMSG_Bits
{
    __I  Ifx_UReg_32Bit GRNT:1;            /**< \brief [0:0] Request accepted to generate an OBFF message (rh) */
    __O  Ifx_UReg_32Bit IDLEREQ:1;         /**< \brief [1:1] "To generate an 'IDLE' OBFF message." (w) */
    __O  Ifx_UReg_32Bit OBFFREQ:1;         /**< \brief [2:2] "Request to generate an 'OBFF' OBFF message." (w) */
    __O  Ifx_UReg_32Bit ACTREQ:1;          /**< \brief [3:3] "Request to generate a 'CPU Active' OBFF message." (w) */
    __I  Ifx_UReg_32Bit IDLE:1;            /**< \brief [4:4] "The controller received an 'IDLE' OBFF message. The interrupt can be triggered when the IDLEEN is asserted." (rh) */
    __O  Ifx_UReg_32Bit IDLECLR:1;         /**< \brief [5:5] Clear the IDLE bit (w) */
    __IO Ifx_UReg_32Bit IDLEEN:1;          /**< \brief [6:6] Enable the idle bit. (rw) */
    __I  Ifx_UReg_32Bit OBFF:1;            /**< \brief [7:7] "The controller received an 'OBFF' OBFF message.  The interrupt can be triggered when the OBFFEN is asserted." (rh) */
    __O  Ifx_UReg_32Bit OBFFCLR:1;         /**< \brief [8:8] Clear the OBFFbit (w) */
    __IO Ifx_UReg_32Bit OBFFEN:1;          /**< \brief [9:9] Enable the OBFFbit. (rw) */
    __I  Ifx_UReg_32Bit ACT:1;             /**< \brief [10:10] "Received a 'CPU Active' OBFF message. The interrupt can be triggered when the ACTEN is asserted." (rh) */
    __O  Ifx_UReg_32Bit ACTCLR:1;          /**< \brief [11:11] Clear the ACT bit (w) */
    __IO Ifx_UReg_32Bit ACTEN:1;           /**< \brief [12:12] Enable the ACT bit. (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PCIE_DSP_OBFFMSG_Bits;

/** \brief OBFF WAKE control */
typedef struct _Ifx_PCIE_DSP_OBFFWAKE_Bits
{
    __I  Ifx_UReg_32Bit GRNT:1;            /**< \brief [0:0] Request received to generate a WAKE# signal. (rh) */
    __O  Ifx_UReg_32Bit IDLEREQ:1;         /**< \brief [1:1] "Request to generate an 'IDLE'  WAKE# signal" (w) */
    __O  Ifx_UReg_32Bit OBFFREQ:1;         /**< \brief [2:2] "Request to generate an 'OBFF' WAKE# signal." (w) */
    __O  Ifx_UReg_32Bit ACTREQ:1;          /**< \brief [3:3] "Request to generate a 'CPU Active'  WAKE# signal." (w) */
    __I  Ifx_UReg_32Bit IDLE:1;            /**< \brief [4:4] "Received an 'IDLE' OBFF message. The interrupt can be triggered when the IDLEEN is asserted." (rh) */
    __O  Ifx_UReg_32Bit IDLECLR:1;         /**< \brief [5:5] Clear the IDLE bit (w) */
    __IO Ifx_UReg_32Bit IDLEEN:1;          /**< \brief [6:6] Enable the idle bit. (rw) */
    __I  Ifx_UReg_32Bit OBFF:1;            /**< \brief [7:7] "Received an 'OBFF' OBFF message. The interrupt can be triggered when the OBFFEN is asserted." (rh) */
    __O  Ifx_UReg_32Bit OBFFCLR:1;         /**< \brief [8:8] Clear the OBFFbit (w) */
    __IO Ifx_UReg_32Bit OBFFEN:1;          /**< \brief [9:9] Enable the OBFFbit. (rw) */
    __I  Ifx_UReg_32Bit ACT:1;             /**< \brief [10:10] "Received a 'CPU Active' OBFF message. The interrupt can be triggered when the ACTEN is asserted." (rh) */
    __O  Ifx_UReg_32Bit ACTCLR:1;          /**< \brief [11:11] Clear the ACT bit (w) */
    __IO Ifx_UReg_32Bit ACTEN:1;           /**< \brief [12:12] Enable the ACT bit. (rw) */
    __I  Ifx_UReg_32Bit WAKERR:1;          /**< \brief [13:13] The WAKE# signal decoder has received an invalid WAKE# pattern. The interrupt can be triggered when the ERREN is asserted. (rh) */
    __O  Ifx_UReg_32Bit ERRCLR:1;          /**< \brief [14:14] Clear the WAKERR bit (w) */
    __IO Ifx_UReg_32Bit ERREN:1;           /**< \brief [15:15] Enable the WAKERR bit. (rw) */
    __O  Ifx_UReg_32Bit DECRST:1;          /**< \brief [16:16] Reset the OBFF WAKE# signaling decoder. (w) */
    __IO Ifx_UReg_32Bit INITSTAT:2;        /**< \brief [18:17] The intial state after the OBFF WAKE# signaling decoder is reset by teh DECRST. (rw) */
    __I  Ifx_UReg_32Bit DFSMSTAT:4;        /**< \brief [22:19] Current decoder FSM state for debug. Not equal to OBFF code. (rh) */
    __I  Ifx_UReg_32Bit EFSMSTAT:4;        /**< \brief [26:23] Current encoder FSM state for debug. Not equal to OBFF code. (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_PCIE_DSP_OBFFWAKE_Bits;

/** \brief PCIe OCDS Trigger Set Select */
typedef struct _Ifx_PCIE_DSP_OTSS_Bits
{
    __IO Ifx_UReg_32Bit TGS0:5;            /**< \brief [4:0] Trigger set select 0 (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __IO Ifx_UReg_32Bit TGS1:5;            /**< \brief [12:8] Trigger Set for OTGB1 (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PCIE_DSP_OTSS_Bits;

/** \brief Device Capabilities 2 Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES2_REG_Bits
{
    __I  Ifx_UReg_32Bit PCIE_CAP_CPL_TIMEOUT_RANGE:4;    /**< \brief [3:0] Completion Timeout Ranges Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_CPL_TIMEOUT_DISABLE_SUPPORT:1;    /**< \brief [4:4] Completion Timeout Disable Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_ARI_FORWARD_SUPPORT:1;    /**< \brief [5:5] ARI Forwarding Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_ATOMIC_ROUTING_SUPP:1;    /**< \brief [6:6] AtomicOp Routing Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_32_ATOMIC_CPL_SUPP:1;    /**< \brief [7:7] 32-bit AtomicOp Completer Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_64_ATOMIC_CPL_SUPP:1;    /**< \brief [8:8] 64-bit AtomicOp Completer Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_128_CAS_CPL_SUPP:1;    /**< \brief [9:9] 128-bit CAS Completer Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_NO_RO_EN_PR2PR_PAR:1;    /**< \brief [10:10] No RO-enabled PR-PR Passing (r) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LTR_SUPP:1;    /**< \brief [11:11] LTR Mechanism Supported (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_TPH_CMPLT_SUPPORT_0:1;    /**< \brief [12:12] TPH Completer Supported Bit 0 (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_TPH_CMPLT_SUPPORT_1:1;    /**< \brief [13:13] TPH Completer Supported Bit 1 (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit PCIE_CAP2_10_BIT_TAG_COMP_SUPPORT:1;    /**< \brief [16:16] 10-Bit Tag Completer Supported (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP2_10_BIT_TAG_REQ_SUPPORT:1;    /**< \brief [17:17] 10-Bit Tag Requester Supported (r) */
    __IO Ifx_UReg_32Bit PCIE_CAP_OBFF_SUPPORT:2;    /**< \brief [19:18] OBFF Supported (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES2_REG_Bits;

/** \brief Device Capabilities Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_MAX_PAYLOAD_SIZE:3;    /**< \brief [2:0] Max_Payload_Size Supported (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_PHANTOM_FUNC_SUPPORT:2;    /**< \brief [4:3] Phantom Functions Supported (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_EXT_TAG_SUPP:1;    /**< \brief [5:5] Extended Tag Field Supported (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [14:6] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_ROLE_BASED_ERR_REPORT:1;    /**< \brief [15:15] Role-Based Error Reporting (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES_REG_Bits;

/** \brief Device Control 2 and Status 2 Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL2_DEVICE_STATUS2_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_CPL_TIMEOUT_VALUE:4;    /**< \brief [3:0] Completion Timeout Value (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_CPL_TIMEOUT_DISABLE:1;    /**< \brief [4:4] Completion Timeout Disable (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_ARI_FORWARD_SUPPORT_CS:1;    /**< \brief [5:5] ARI Forwarding Enable (r) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [9:6] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_LTR_EN:1;    /**< \brief [10:10] LTR Mechanism Enable (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [12:11] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_OBFF_EN:2;    /**< \brief [14:13] OBFF Enable (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL2_DEVICE_STATUS2_REG_Bits;

/** \brief Device Control and Device Status Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL_DEVICE_STATUS_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_CORR_ERR_REPORT_EN:1;    /**< \brief [0:0] Correctable Error Reporting Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_NON_FATAL_ERR_REPORT_EN:1;    /**< \brief [1:1] Non-Fatal Error Reporting Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_FATAL_ERR_REPORT_EN:1;    /**< \brief [2:2] Fatal Error Reporting Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_UNSUPPORT_REQ_REP_EN:1;    /**< \brief [3:3] Unsupported Request Reporting Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_EN_REL_ORDER:1;    /**< \brief [4:4] Enable Relaxed Ordering (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_MAX_PAYLOAD_SIZE_CS:3;    /**< \brief [7:5] Max_Payload_Size (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_EXT_TAG_EN:1;    /**< \brief [8:8] Extended Tag Field Enable (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_PHANTOM_FUNC_EN:1;    /**< \brief [9:9] Phantom Functions Enable (rh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_AUX_POWER_PM_EN:1;    /**< \brief [10:10] Aux Power PM Enable (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_EN_NO_SNOOP:1;    /**< \brief [11:11] Enable No Snoop (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_MAX_READ_REQ_SIZE:3;    /**< \brief [14:12] Max_Read_Request_Size (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_CORR_ERR_DETECTED:1;    /**< \brief [16:16] Correctable Error Detected (rw1ch) */
    __IO Ifx_UReg_32Bit PCIE_CAP_NON_FATAL_ERR_DETECTED:1;    /**< \brief [17:17] Non-Fatal Error Detected (rw1ch) */
    __IO Ifx_UReg_32Bit PCIE_CAP_FATAL_ERR_DETECTED:1;    /**< \brief [18:18] Fatal Error Detected (rw1ch) */
    __IO Ifx_UReg_32Bit PCIE_CAP_UNSUPPORTED_REQ_DETECTED:1;    /**< \brief [19:19] Unsupported Request Detected (rw1ch) */
    __I  Ifx_UReg_32Bit PCIE_CAP_AUX_POWER_DETECTED:1;    /**< \brief [20:20] AUX Power Detected (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_TRANS_PENDING:1;    /**< \brief [21:21] Transactions Pending (r) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [31:22] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL_DEVICE_STATUS_Bits;

/** \brief Link Capabilities 2 Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES2_REG_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __I  Ifx_UReg_32Bit PCIE_CAP_SUPPORT_LINK_SPEED_VECTOR:7;    /**< \brief [7:1] Supported Link Speeds Vector (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_CROSS_LINK_SUPPORT:1;    /**< \brief [8:8] Crosslink Supported (r) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [30:9] \internal Reserved */
    __IO Ifx_UReg_32Bit DRS_SUPPORTED:1;    /**< \brief [31:31] DRS Supported (rw) */
} Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES2_REG_Bits;

/** \brief Link Capabilities Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_MAX_LINK_SPEED:4;    /**< \brief [3:0] Max Link Speed (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_MAX_LINK_WIDTH:6;    /**< \brief [9:4] Maximum Link Width (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ACTIVE_STATE_LINK_PM_SUPPORT:2;    /**< \brief [11:10] Active State Power Management (ASPM) Support (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_L0S_EXIT_LATENCY:3;    /**< \brief [14:12] L0s Exit Latency (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_L1_EXIT_LATENCY:3;    /**< \brief [17:15] L1 Exit Latency (rwh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_CLOCK_POWER_MAN:1;    /**< \brief [18:18] Clock Power Management (rh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SURPRISE_DOWN_ERR_REP_CAP:1;    /**< \brief [19:19] Surprise Down Error Reporting Capable (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_DLL_ACTIVE_REP_CAP:1;    /**< \brief [20:20] Data Link Layer Link Active Reporting Capable (r) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_BW_NOT_CAP:1;    /**< \brief [21:21] Link Bandwidth Notification Capability (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ASPM_OPT_COMPLIANCE:1;    /**< \brief [22:22] ASPM Optionality Compliance (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_PORT_NUM:8;    /**< \brief [31:24] Port Number (rw) */
} Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES_REG_Bits;

/** \brief Link Control 2 and Status 2 Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL2_LINK_STATUS2_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_TARGET_LINK_SPEED:4;    /**< \brief [3:0] Target Link Speed (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ENTER_COMPLIANCE:1;    /**< \brief [4:4] Enter Compliance (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_HW_AUTO_SPEED_DISABLE:1;    /**< \brief [5:5] Hardware Autonomous Speed Disable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SEL_DEEMPHASIS:1;    /**< \brief [6:6] Selectable De-emphasis (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_TX_MARGIN:3;    /**< \brief [9:7] Transmit Margin, This field controls the value of the non-deemphasized voltage level at the Transmitter pins (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ENTER_MODIFIED_COMPLIANCE:1;    /**< \brief [10:10] Enter Modified Compliance (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_COMPLIANCE_SOS:1;    /**< \brief [11:11] Compliance SOS (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_COMPLIANCE_PRESET:4;    /**< \brief [15:12] Compliance Preset/De-emphasis (rwh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_CURR_DEEMPHASIS:1;    /**< \brief [16:16] Current De-emphasis Level (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_EQ_CPL:1;    /**< \brief [17:17] Equalization 8.0 GT/s Complete (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_EQ_CPL_P1:1;    /**< \brief [18:18] Equalization 8.0 GT/s Phase 1 Successful (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_EQ_CPL_P2:1;    /**< \brief [19:19] Equalization 8.0 GT/s Phase 2 Successful (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_EQ_CPL_P3:1;    /**< \brief [20:20] EEqualization 8.0 GT/s Phase 3 Successful (rh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_EQ_REQ:1;    /**< \brief [21:21] Link Equalization Request 8.0 GT/s (rw1ch) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [27:22] \internal Reserved */
    __I  Ifx_UReg_32Bit DOWNSTREAM_COMPO_PRESENCE:3;    /**< \brief [30:28] Downstream Component Presence (r) */
    __IO Ifx_UReg_32Bit DRS_MESSAGE_RECEIVED:1;    /**< \brief [31:31] DRS Message Received (rw1ch) */
} Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL2_LINK_STATUS2_REG_Bits;

/** \brief Link Control and Link Status Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL_LINK_STATUS_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_ACTIVE_STATE_LINK_PM_CONTROL:2;    /**< \brief [1:0] Active State Power Management (ASPM) Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_RCB:1;    /**< \brief [3:3] Read Completion Boundary (RCB) (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_DISABLE:1;    /**< \brief [4:4] Link Disable (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_RETRAIN_LINK:1;    /**< \brief [5:5] Retrain Link (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_COMMON_CLK_CONFIG:1;    /**< \brief [6:6] Common Clock Configuration (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_EXTENDED_SYNCH:1;    /**< \brief [7:7] Extended Synch (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_EN_CLK_POWER_MAN:1;    /**< \brief [8:8] Enable Clock Power Management (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_HW_AUTO_WIDTH_DISABLE:1;    /**< \brief [9:9] Hardware Autonomous Width Disable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_BW_MAN_INT_EN:1;    /**< \brief [10:10] Link Bandwidth Management Interrupt Enable (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_AUTO_BW_INT_EN:1;    /**< \brief [11:11] Link Autonomous Bandwidth Management Interrupt Enable (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [13:12] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_DRS_SIGNALING_CONTROL:2;    /**< \brief [15:14] DRS Signaling Control (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_LINK_SPEED:4;    /**< \brief [19:16] Current Link Speed (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_NEGO_LINK_WIDTH:6;    /**< \brief [25:20] Negotiated Link Width (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [26:26] \internal Reserved */
    __I  Ifx_UReg_32Bit PCIE_CAP_LINK_TRAINING:1;    /**< \brief [27:27] Link Training (rh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SLOT_CLK_CONFIG:1;    /**< \brief [28:28] Slot Clock Configuration (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_DLL_ACTIVE:1;    /**< \brief [29:29] Data Link Layer Link Active (rh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_BW_MAN_STATUS:1;    /**< \brief [30:30] Link Bandwidth Management Status (rw1ch) */
    __IO Ifx_UReg_32Bit PCIE_CAP_LINK_AUTO_BW_STATUS:1;    /**< \brief [31:31] Link Autonomous Bandwidth Status (rw1c) */
} Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL_LINK_STATUS_REG_Bits;

/** \brief PCI Express Capabilities, ID, Next Pointer Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_PCIE_CAP_ID_PCIE_NEXT_CAP_PTR_PCIE_CAP_REG_Bits
{
    __I  Ifx_UReg_32Bit PCIE_CAP_ID:8;     /**< \brief [7:0] Capability ID (r) */
    __IO Ifx_UReg_32Bit PCIE_CAP_NEXT_PTR:8;    /**< \brief [15:8] Next Capability Pointer (rw) */
    __I  Ifx_UReg_32Bit PCIE_CAP_REG:4;    /**< \brief [19:16] Capability Version (r) */
    __I  Ifx_UReg_32Bit PCIE_DEV_PORT_TYPE:4;    /**< \brief [23:20] Device/Port Type (rh) */
    __IO Ifx_UReg_32Bit PCIE_SLOT_IMP:1;    /**< \brief [24:24] Slot Implemented (rw) */
    __IO Ifx_UReg_32Bit PCIE_INT_MSG_NUM:5;    /**< \brief [29:25] PCIE Interrupt Message Number (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_PCIE_CAP_ID_PCIE_NEXT_CAP_PTR_PCIE_CAP_REG_Bits;

/** \brief Root Control and Capabilities Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_ROOT_CONTROL_ROOT_CAPABILITIES_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_SYS_ERR_ON_CORR_ERR_EN:1;    /**< \brief [0:0] System Error on Correctable Error Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SYS_ERR_ON_NON_FATAL_ERR_EN:1;    /**< \brief [1:1] System Error on Non-Fatal Error Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SYS_ERR_ON_FATAL_ERR_EN:1;    /**< \brief [2:2] System Error on Fatal Error Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_PME_INT_EN:1;    /**< \brief [3:3] PME Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_CRS_SW_VISIBILITY_EN:1;    /**< \brief [4:4] CRS Software Visibility Enable (rw) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_CRS_SW_VISIBILITY:1;    /**< \brief [16:16] CRS Software Visibility Capable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_ROOT_CONTROL_ROOT_CAPABILITIES_REG_Bits;

/** \brief Root Status Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_ROOT_STATUS_REG_Bits
{
    __I  Ifx_UReg_32Bit PCIE_CAP_PME_REQ_ID:16;    /**< \brief [15:0] PME Requester ID (r) */
    __IO Ifx_UReg_32Bit PCIE_CAP_PME_STATUS:1;    /**< \brief [16:16] PME Status (rw1c) */
    __I  Ifx_UReg_32Bit PCIE_CAP_PME_PENDING:1;    /**< \brief [17:17] PME Pending (r) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_ROOT_STATUS_REG_Bits;

/** \brief Slot Capabilities Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_SLOT_CAPABILITIES_REG_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_ATTENTION_INDICATOR_BUTTON:1;    /**< \brief [0:0] Attention Button Present (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_POWER_CONTROLLER:1;    /**< \brief [1:1] Power Controller Present (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_MRL_SENSOR:1;    /**< \brief [2:2] MRL Sensor Present (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ATTENTION_INDICATOR:1;    /**< \brief [3:3] Attention Indicator Present (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_POWER_INDICATOR:1;    /**< \brief [4:4] Power Indicator Present (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_HOT_PLUG_SURPRISE:1;    /**< \brief [5:5] Hot-Plug Surprise (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_HOT_PLUG_CAPABLE:1;    /**< \brief [6:6] Hot-Plug Capable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SLOT_POWER_LIMIT_VALUE:8;    /**< \brief [14:7] Slot Power Limit Value (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_SLOT_POWER_LIMIT_SCALE:2;    /**< \brief [16:15] Slot Power Limit Scale (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ELECTROMECH_INTERLOCK:1;    /**< \brief [17:17] Electromechanical Interlock Present (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_NO_CMD_CPL_SUPPORT:1;    /**< \brief [18:18] No Command Completed Support (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_PHY_SLOT_NUM:13;    /**< \brief [31:19] Physical Slot Number (rw) */
} Ifx_PCIE_DSP_PCIECAP_SLOT_CAPABILITIES_REG_Bits;

/** \brief Slot Control and Status Register */
typedef struct _Ifx_PCIE_DSP_PCIECAP_SLOT_CONTROL_SLOT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit PCIE_CAP_ATTENTION_BUTTON_PRESSED_EN:1;    /**< \brief [0:0] Attention Button Pressed Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_POWER_FAULT_DETECTED_EN:1;    /**< \brief [1:1] Power Fault Detected Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_MRL_SENSOR_CHANGED_EN:1;    /**< \brief [2:2] MRL Sensor Changed Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_PRESENCE_DETECT_CHANGE_EN:1;    /**< \brief [3:3] Presence Detect Changed Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_CMD_CPL_INT_EN:1;    /**< \brief [4:4] Command Completed Interrupt Enable (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_HOT_PLUG_INT_EN:1;    /**< \brief [5:5] Hot-Plug Interrupt Enable (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ATTENTION_INDICATOR_CTRL:2;    /**< \brief [7:6] Attention Indicator Control (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_POWER_INDICATOR_CTRL:2;    /**< \brief [9:8] Power Indicator Control (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_POWER_CONTROLLER_CTRL:1;    /**< \brief [10:10] Power Controller Control (rw) */
    __IO Ifx_UReg_32Bit PCIE_CAP_ELECTROMECH_INTERLOCK_CTRL:1;    /**< \brief [11:11] Electromechanical Interlock Control (rwh) */
    __IO Ifx_UReg_32Bit PCIE_CAP_DLL_STATE_CHANGED_EN:1;    /**< \brief [12:12] Data Link Layer State Changed Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [15:13] \internal Reserved */
    __IO Ifx_UReg_32Bit PCIE_CAP_ATTENTION_BUTTON_PRESSED:1;    /**< \brief [16:16] Attention Button Pressed (rw1c) */
    __IO Ifx_UReg_32Bit PCIE_CAP_POWER_FAULT_DETECTED:1;    /**< \brief [17:17] Power Fault Detected (rw1c) */
    __IO Ifx_UReg_32Bit PCIE_CAP_MRL_SENSOR_CHANGED:1;    /**< \brief [18:18] MRL Sensor Changed (rw1c) */
    __IO Ifx_UReg_32Bit PCIE_CAP_PRESENCE_DETECTED_CHANGED:1;    /**< \brief [19:19] Presence Detect Changed (rw1c) */
    __IO Ifx_UReg_32Bit PCIE_CAP_CMD_CPLD:1;    /**< \brief [20:20] Command Completed (rw1c) */
    __I  Ifx_UReg_32Bit PCIE_CAP_MRL_SENSOR_STATE:1;    /**< \brief [21:21] MRL Sensor State (r) */
    __I  Ifx_UReg_32Bit PCIE_CAP_PRESENCE_DETECT_STATE:1;    /**< \brief [22:22] Presence Detect State (rh) */
    __I  Ifx_UReg_32Bit PCIE_CAP_ELECTROMECH_INTERLOCK_STATUS:1;    /**< \brief [23:23] Electromechanical Interlock Status (r) */
    __IO Ifx_UReg_32Bit PCIE_CAP_DLL_STATE_CHANGED:1;    /**< \brief [24:24] Data Link Layer State Changed (rw1c) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PCIE_DSP_PCIECAP_SLOT_CONTROL_SLOT_STATUS_Bits;

/** \brief Power Management Capabilities Register */
typedef struct _Ifx_PCIE_DSP_PMCAP_CAP_ID_NXT_PTR_REG_Bits
{
    __I  Ifx_UReg_32Bit PM_CAP_ID:8;       /**< \brief [7:0] Capability ID (r) */
    __IO Ifx_UReg_32Bit PM_NEXT_POINTER:8;    /**< \brief [15:8] Next Capability Pointer (rw) */
    __IO Ifx_UReg_32Bit PM_SPEC_VER:3;     /**< \brief [18:16] Version (rw) */
    __I  Ifx_UReg_32Bit PME_CLK:1;         /**< \brief [19:19] PME Clock (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [20:20] \internal Reserved */
    __IO Ifx_UReg_32Bit DSI:1;             /**< \brief [21:21] Device Specific Initialization (rw) */
    __IO Ifx_UReg_32Bit AUX_CURR:3;        /**< \brief [24:22] Aux_Current (rw) */
    __IO Ifx_UReg_32Bit D1_SUPPORT:1;      /**< \brief [25:25] D1_Support (rw) */
    __IO Ifx_UReg_32Bit D2_SUPPORT:1;      /**< \brief [26:26] D2_Support (rw) */
    __IO Ifx_UReg_32Bit PME_SUPPORT:5;     /**< \brief [31:27] PME_Support (rwh) */
} Ifx_PCIE_DSP_PMCAP_CAP_ID_NXT_PTR_REG_Bits;

/** \brief Power Management Control and Status Register */
typedef struct _Ifx_PCIE_DSP_PMCAP_CON_STATUS_REG_Bits
{
    __IO Ifx_UReg_32Bit POWER_STATE:2;     /**< \brief [1:0] PowerState (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit NO_SOFT_RST:1;     /**< \brief [3:3] No_Soft_Reset (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PME_ENABLE:1;      /**< \brief [8:8] PME_En (rwh) */
    __I  Ifx_UReg_32Bit DATA_SELECT:4;     /**< \brief [12:9] Data_Select (r) */
    __I  Ifx_UReg_32Bit DATA_SCALE:2;      /**< \brief [14:13] Data_Scale (r) */
    __IO Ifx_UReg_32Bit PME_STATUS:1;      /**< \brief [15:15] PME_Status (rw1ch) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [21:16] \internal Reserved */
    __I  Ifx_UReg_32Bit B2_B3_SUPPORT:1;    /**< \brief [22:22] B2B3 Support for D3hot (r) */
    __I  Ifx_UReg_32Bit BUS_PWR_CLK_CON_EN:1;    /**< \brief [23:23] Bus Power/Clock Control Enable (r) */
    __I  Ifx_UReg_32Bit DATA_REG_ADD_INFO:8;    /**< \brief [31:24] Data (r) */
} Ifx_PCIE_DSP_PMCAP_CON_STATUS_REG_Bits;

/** \brief Power management control */
typedef struct _Ifx_PCIE_DSP_PM_CTRL_Bits
{
    __IO Ifx_UReg_32Bit WKUPCMD:1;         /**< \brief [0:0] Wake Up. (rw) */
    __IO Ifx_UReg_32Bit AUXPWRDET:1;       /**< \brief [1:1] Auxiliary Power Detected. (rw) */
    __IO Ifx_UReg_32Bit REQENTRL1:1;       /**< \brief [2:2] Application request to Enter L1 ASPM state. (rw) */
    __IO Ifx_UReg_32Bit RDYENTRL23:1;      /**< \brief [3:3] Application Ready to Enter L23. (rw) */
    __IO Ifx_UReg_32Bit REQEXITL1:1;       /**< \brief [4:4] Application request to Exit L1. (rw) */
    __IO Ifx_UReg_32Bit XFERPND:1;         /**< \brief [5:5] Indicates that your application has transfers pending (rw) */
    __I  Ifx_UReg_32Bit CLKREQ:1;          /**< \brief [6:6] Status of the CLKREQ# (rh) */
    __IO Ifx_UReg_32Bit CLKPMEN:1;         /**< \brief [7:7] Clock PM feature enabled by application. (rw) */
    __I  Ifx_UReg_32Bit PMEINT:1;          /**< \brief [8:8] PME interrupt received. The interrupt can be triggered when the PM_INTEN.PMEINTEN is asserted. (rh) */
    __IO Ifx_UReg_32Bit CLKRM:1;           /**< \brief [9:9] Indicates that the application is ready to have reference clock removed. (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [13:10] \internal Reserved */
    __O  Ifx_UReg_32Bit TURNOFF:1;         /**< \brief [14:14] Request from your application to generate a PM_Turn_Off message. (w) */
    __I  Ifx_UReg_32Bit PMEMSG:1;          /**< \brief [15:15] The controller received a PM_PME message.The interrupt can be triggered when the PM_INTEN.PMEMSGEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit TRNACK:1;          /**< \brief [16:16] The controller received a PME_TO_Ack message. Upstream port: Reserved. The interrupt can be triggered when the PM_INTEN.TOACKEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit TRN:1;             /**< \brief [17:17] The controller received a PME Turnoff message. The interrupt can be triggered when the PM_INTEN.TOEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PCIE_DSP_PM_CTRL_Bits;

/** \brief Power management interrupt clear */
typedef struct _Ifx_PCIE_DSP_PM_INTCLR_Bits
{
    __O  Ifx_UReg_32Bit PMEINTCLR:1;       /**< \brief [0:0] Clear the PMEINT bit. (w) */
    __O  Ifx_UReg_32Bit PMEMSGCLR:1;       /**< \brief [1:1] Clear the PMEMSG bit. (w) */
    __O  Ifx_UReg_32Bit TOACKCLR:1;        /**< \brief [2:2] Clear the TRNACK  bit. (w) */
    __O  Ifx_UReg_32Bit TOCLR:1;           /**< \brief [3:3] Clear the TRN bit. (w) */
    __O  Ifx_UReg_32Bit WAKINTCLR:1;       /**< \brief [4:4] Clear the WAKINT bit. (w) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_PCIE_DSP_PM_INTCLR_Bits;

/** \brief Power management  interrupt enable */
typedef struct _Ifx_PCIE_DSP_PM_INTEN_Bits
{
    __IO Ifx_UReg_32Bit PMEINTEN:1;        /**< \brief [0:0] Enable PME interrupt (rw) */
    __IO Ifx_UReg_32Bit PMEMSGEN:1;        /**< \brief [1:1] Enable the PMEMSG interrupt (rw) */
    __IO Ifx_UReg_32Bit TOACKEN:1;         /**< \brief [2:2] Enable the TRNACK interrupt (rw) */
    __IO Ifx_UReg_32Bit TOEN:1;            /**< \brief [3:3] Enable the TRN interrupt (rw) */
    __IO Ifx_UReg_32Bit WAKINTEN:1;        /**< \brief [4:4] Enable the WAKINT interrupt (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_PCIE_DSP_PM_INTEN_Bits;

/** \brief Power management status 0 */
typedef struct _Ifx_PCIE_DSP_PM_STAT0_Bits
{
    __I  Ifx_UReg_32Bit CURNTSTAT:3;       /**< \brief [2:0] Indicates the current power state. (rh) */
    __I  Ifx_UReg_32Bit LTSSMSTAT:6;       /**< \brief [8:3] Current state of the LTSSM. Encoding is defined as follows: (rh) */
    __I  Ifx_UReg_32Bit WAKE:1;            /**< \brief [9:9] Wake Up. Driving WAKE# for USP (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [10:10] \internal Reserved */
    __I  Ifx_UReg_32Bit DSTAT:3;           /**< \brief [13:11] The current power management D-state of the function: (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __I  Ifx_UReg_32Bit LINKSTL1:1;        /**< \brief [16:16] Power management is in L1 state. (rh) */
    __I  Ifx_UReg_32Bit LINKSTL2:1;        /**< \brief [17:17] Power management is in L2 state. (rh) */
    __I  Ifx_UReg_32Bit LINKSTL2E:1;       /**< \brief [18:18] Power management is exiting L2 state. (rh) */
    __I  Ifx_UReg_32Bit MSTRSTAT:5;        /**< \brief [23:19] Power management master FSM state. (rh) */
    __I  Ifx_UReg_32Bit SLVSTAT:5;         /**< \brief [28:24] Power management slave FSM state. (rh) */
    __I  Ifx_UReg_32Bit L1SUBSTAT:3;       /**< \brief [31:29] Power management L1 sub-states FSM state (rh) */
} Ifx_PCIE_DSP_PM_STAT0_Bits;

/** \brief Power management status 1 */
typedef struct _Ifx_PCIE_DSP_PM_STAT1_Bits
{
    __I  Ifx_UReg_32Bit WAKINT:1;          /**< \brief [0:0] For DSP, indicate that the WAKE# is driven from high to low. The interrupt can be triggered when the PM_INTEN.WAKINTEN is asserted. (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __I  Ifx_UReg_32Bit LINKSTL1SUB:1;     /**< \brief [2:2] Power management is in L1 substate. (rh) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_PCIE_DSP_PM_STAT1_Bits;

/** \brief Ack Frequency and L0-L1 ASPM Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_ACK_F_ASPM_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit ACK_FREQ:8;        /**< \brief [7:0] Ack Frequency (rw) */
    __IO Ifx_UReg_32Bit ACK_N_FTS:8;       /**< \brief [15:8] The number of Fast Training Sequence(N_FTS) ordered sets to be transmitted when transitioning from L0s to L0 (rw) */
    __I  Ifx_UReg_32Bit COMMON_CLK_N_FTS:8;    /**< \brief [23:16] Common Clock N_FTS (r) */
    __IO Ifx_UReg_32Bit L0S_ENTRANCE_LATENCY:3;    /**< \brief [26:24] L0s Entrance Latency (rw) */
    __IO Ifx_UReg_32Bit L1_ENTRANCE_LATENCY:3;    /**< \brief [29:27] L1 Entrance Latency (rw) */
    __IO Ifx_UReg_32Bit ENTER_ASPM:1;      /**< \brief [30:30] ASPM L1 Entry Control (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_ACK_F_ASPM_CTRL_OFF_Bits;

/** \brief Ack Latency Timer and Replay Timer Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_ACK_LATENCY_TIMER_OFF_Bits
{
    __IO Ifx_UReg_32Bit ROUND_TRIP_LATENCY_TIME_LIMIT:16;    /**< \brief [15:0] Ack Latency Timer Limit (rwh) */
    __IO Ifx_UReg_32Bit REPLAY_TIME_LIMIT:16;    /**< \brief [31:16] Replay Timer Limit (rwh) */
} Ifx_PCIE_DSP_PORTLOGIC_ACK_LATENCY_TIMER_OFF_Bits;

/** \brief AXI Bridge Slave Error Response Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_AMBA_ERROR_RESPONSE_DEFAULT_OFF_Bits
{
    __IO Ifx_UReg_32Bit AMBA_ERROR_RESPONSE_GLOBAL:1;    /**< \brief [0:0] Global Slave Error Response Mapping (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [1:1] \internal Reserved */
    __IO Ifx_UReg_32Bit AMBA_ERROR_RESPONSE_VENDORID:1;    /**< \brief [2:2] Vendor ID Non-existent Slave Error Response Mapping (rw) */
    __IO Ifx_UReg_32Bit AMBA_ERROR_RESPONSE_CRS:2;    /**< \brief [4:3] CRS Slave Error Response Mapping (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [9:5] \internal Reserved */
    __IO Ifx_UReg_32Bit AMBA_ERROR_RESPONSE_MAP:6;    /**< \brief [15:10] AXI Slave Response Error Map (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_AMBA_ERROR_RESPONSE_DEFAULT_OFF_Bits;

/** \brief Link Down AXI Bridge Slave Timeout Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_AMBA_LINK_TIMEOUT_OFF_Bits
{
    __IO Ifx_UReg_32Bit LINK_TIMEOUT_PERIOD_DEFAULT:8;    /**< \brief [7:0] Timeout Value (ms) (rw) */
    __IO Ifx_UReg_32Bit LINK_TIMEOUT_ENABLE_DEFAULT:1;    /**< \brief [8:8] Disable Flush (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_AMBA_LINK_TIMEOUT_OFF_Bits;

/** \brief AXI Bridge Ordering Control */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_AMBA_ORDERING_CTRL_OFF_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit AX_SNP_EN:1;       /**< \brief [1:1] AXI Serialize Non-Posted Requests Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit AX_MSTR_ORDR_P_EVENT_SEL:2;    /**< \brief [4:3] AXI Master Posted Ordering Event Selector (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [6:5] \internal Reserved */
    __IO Ifx_UReg_32Bit AX_MSTR_ZEROLREAD_FW:1;    /**< \brief [7:7] AXI Master Zero Length Read Forward to the application (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_AMBA_ORDERING_CTRL_OFF_Bits;

/** \brief Auxiliary Clock Frequency Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_AUX_CLK_FREQ_OFF_Bits
{
    __IO Ifx_UReg_32Bit AUX_CLK_FREQ:10;    /**< \brief [9:0] The aux_clk frequency in MHz (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_AUX_CLK_FREQ_OFF_Bits;

/** \brief Clock Gating Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_CLOCK_GATING_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit RADM_CLK_GATING_EN:1;    /**< \brief [0:0] RADM Clock Gating Enable (rw) */
    __IO Ifx_UReg_32Bit AXI_CLK_GATING_EN:1;    /**< \brief [1:1] AXI Clock Gating Enable (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_CLOCK_GATING_CTRL_OFF_Bits;

/** \brief Filter Mask 2 Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_FILTER_MASK_2_OFF_Bits
{
    __IO Ifx_UReg_32Bit MASK_RADM_2:32;    /**< \brief [31:0] Filter Mask 2 (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_FILTER_MASK_2_OFF_Bits;

/** \brief Link Width and Speed Change Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_GEN2_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit FAST_TRAINING_SEQ:8;    /**< \brief [7:0] Sets the Number of Fast Training Sequences (N_FTS) that the controller advertises as its N_FTS during Gen2 or Gen3 link training (rw) */
    __IO Ifx_UReg_32Bit NUM_OF_LANES:5;    /**< \brief [12:8] Predetermined Number of Lanes (rw) */
    __IO Ifx_UReg_32Bit PRE_DET_LANE:3;    /**< \brief [15:13] Predetermined Lane for Auto Flip (rw) */
    __IO Ifx_UReg_32Bit AUTO_LANE_FLIP_CTRL_EN:1;    /**< \brief [16:16] Enable Auto flipping of the lanes (rw) */
    __IO Ifx_UReg_32Bit DIRECT_SPEED_CHANGE:1;    /**< \brief [17:17] Directed Speed Change (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [18:18] \internal Reserved */
    __IO Ifx_UReg_32Bit CONFIG_TX_COMP_RX:1;    /**< \brief [19:19] Config Tx Compliance Receive Bit (rw) */
    __IO Ifx_UReg_32Bit SEL_DEEMPHASIS:1;    /**< \brief [20:20] Used to set the de-emphasis level for upstream ports (rw) */
    __IO Ifx_UReg_32Bit GEN1_EI_INFERENCE:1;    /**< \brief [21:21] Electrical Idle Inference Mode at Gen1 Rate (rw) */
    __IO Ifx_UReg_32Bit SELECT_DEEMPH_VAR_MUX:1;    /**< \brief [22:22] The select_deemphasis variable for DSP on entry to Recovery.RcvrCfg state is muxed between the Selectable De-emphasis field in the Link Control 2 register and the value requested by the Upstream Port in the eight consecutive TS1 Ordered Sets it received (rw) */
    __IO Ifx_UReg_32Bit SELECTABLE_DEEMPH_BIT_MUX:1;    /**< \brief [23:23] The selectable deemphasis bit (Symbol 4 bit 6) of the transmitted TS2 Ordered Sets for DSP in Recovery.RcvrCfg state is muxed between the Selectable De-emphasis field in the Link Control 2 register and the value requested by USP in Recovery.RcvrLock state through Tx TS1s from USP (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_GEN2_CTRL_OFF_Bits;

/** \brief Gen3 EQ Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_CONTROL_OFF_Bits
{
    __IO Ifx_UReg_32Bit GEN3_EQ_FB_MODE:4;    /**< \brief [3:0] Feedback Mode (rwh) */
    __IO Ifx_UReg_32Bit GEN3_EQ_PHASE23_EXIT_MODE:1;    /**< \brief [4:4] Behavior After 24 ms Timeout (when optimal settings are not found) (rwh) */
    __IO Ifx_UReg_32Bit GEN3_EQ_EVAL_2MS_DISABLE:1;    /**< \brief [5:5] Phase2_3 2 ms Timeout Disable (rwh) */
    __IO Ifx_UReg_32Bit GEN3_LOWER_RATE_EQ_REDO_ENABLE:1;    /**< \brief [6:6] Support EQ redo and lower rate change (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit GEN3_EQ_PSET_REQ_VEC:16;    /**< \brief [23:8] Preset Request Vector (rwh) */
    __IO Ifx_UReg_32Bit GEN3_EQ_FOM_INC_INITIAL_EVAL:1;    /**< \brief [24:24] Include Initial FOM (rwh) */
    __IO Ifx_UReg_32Bit GEN3_EQ_PSET_REQ_AS_COEF:1;    /**< \brief [25:25] GEN3_EQ_PSET_REQ_AS_COEF is an internally reserved field (rwh) */
    __IO Ifx_UReg_32Bit GEN3_REQ_SEND_CONSEC_EIEOS_FOR_PSET_MAP:1;    /**< \brief [26:26] Request controller to send back-to-back EIEOS in Recovery.RcvrLock state until presets to coefficients mapping is complete (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [31:27] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_CONTROL_OFF_Bits;

/** \brief Gen3 EQ Direction Change Feedback Mode Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_FB_MODE_DIR_CHANGE_OFF_Bits
{
    __IO Ifx_UReg_32Bit GEN3_EQ_FMDC_T_MIN_PHASE23:5;    /**< \brief [4:0] Minimum Time (in ms) To Remain in EQ Master Phase (rw) */
    __IO Ifx_UReg_32Bit GEN3_EQ_FMDC_N_EVALS:5;    /**< \brief [9:5] Convergence Window Depth (rw) */
    __IO Ifx_UReg_32Bit GEN3_EQ_FMDC_MAX_PRE_CUSROR_DELTA:4;    /**< \brief [13:10] Convergence Window Aperture for C-1 (rw) */
    __IO Ifx_UReg_32Bit GEN3_EQ_FMDC_MAX_POST_CUSROR_DELTA:4;    /**< \brief [17:14] Convergence Window Aperture for C+1 (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_FB_MODE_DIR_CHANGE_OFF_Bits;

/** \brief Gen3 Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_GEN3_RELATED_OFF_Bits
{
    __IO Ifx_UReg_32Bit GEN3_ZRXDC_NONCOMPL:1;    /**< \brief [0:0] Gen3 Receiver Impedance ZRX-DC Not Compliant (rw) */
    __IO Ifx_UReg_32Bit NO_SEED_VALUE_CHANGE:1;    /**< \brief [1:1] If this bit is set to 1, the seed value of LFSR for scrambler at Gen3 rate does not change after LinkUp = 1 (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __IO Ifx_UReg_32Bit DISABLE_SCRAMBLER_GEN_3:1;    /**< \brief [8:8] Disable Scrambler for Gen3 and Gen4 Data Rate (rw) */
    __IO Ifx_UReg_32Bit EQ_PHASE_2_3:1;    /**< \brief [9:9] Equalization Phase 2 and Phase 3 Disable (rw) */
    __IO Ifx_UReg_32Bit EQ_EIEOS_CNT:1;    /**< \brief [10:10] Equalization EIEOS Count Reset Disable (rw) */
    __IO Ifx_UReg_32Bit EQ_REDO:1;         /**< \brief [11:11] Equalization Redo Disable (rw) */
    __IO Ifx_UReg_32Bit RXEQ_PH01_EN:1;    /**< \brief [12:12] Rx Equalization Phase 0/Phase 1 Hold Enable (rw) */
    __IO Ifx_UReg_32Bit RXEQ_RGRDLESS_RXTS:1;    /**< \brief [13:13] "When set to '1', the controller as Gen3 EQ master asserts RxEqEval to instruct the PHY to do Rx adaptation and evaluation after a 500ns timeout from a new preset request" (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit GEN3_EQUALIZATION_DISABLE:1;    /**< \brief [16:16] Equalization Disable (rw) */
    __IO Ifx_UReg_32Bit GEN3_DLLP_XMT_DELAY_DISABLE:1;    /**< \brief [17:17] DLLP Transmission Delay Disable (rw) */
    __IO Ifx_UReg_32Bit GEN3_DC_BALANCE_DISABLE:1;    /**< \brief [18:18] DC Balance Disable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [22:19] \internal Reserved */
    __IO Ifx_UReg_32Bit GEN3_EQ_INVREQ_EVAL_DIFF_DISABLE:1;    /**< \brief [23:23] Eq InvalidRequest and RxEqEval Different Time Assertion Disable (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_GEN3_RELATED_OFF_Bits;

/** \brief Interface Timer Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_CONTROL_OFF_Bits
{
    __IO Ifx_UReg_32Bit INTERFACE_TIMER_EN:1;    /**< \brief [0:0] Interface timer enable (rw) */
    __IO Ifx_UReg_32Bit INTERFACE_TIMER_AER_EN:1;    /**< \brief [1:1] When set to 1 the Interface timer internal uncorrectable error generation is enabled (rw) */
    __IO Ifx_UReg_32Bit INTERFACE_TIMER_SCALING:2;    /**< \brief [3:2] Interface timer scaling (rw) */
    __IO Ifx_UReg_32Bit FORCE_PENDING:1;    /**< \brief [4:4] Writing to this bit forces the value of the pending flags (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_CONTROL_OFF_Bits;

/** \brief Interface Timer Status Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit MESSAGE_INTERFACE_TIMEOUT:1;    /**< \brief [0:0] Message interface timeout (rw1ch) */
    __IO Ifx_UReg_32Bit CPL_INTERFACE_TIMEOUT:1;    /**< \brief [1:1] CPL interface timeout (rw1ch) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [2:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CLIENT1_INTERFACE_TIMEOUT:1;    /**< \brief [3:3] Client1 interface (XALI1) timeout (rw1ch) */
    __IO Ifx_UReg_32Bit CLIENT2_INTERFACE_TIMEOUT:1;    /**< \brief [4:4] Client2 interface (XALI2) timeout (rw1ch) */
    __IO Ifx_UReg_32Bit MASTER_WR_RES_TIMEOUT:1;    /**< \brief [5:5] Master write response channel timeout (rw1ch) */
    __IO Ifx_UReg_32Bit MASTER_RD_DATA_TIMEOUT:1;    /**< \brief [6:6] Master read data channel timeout (rw1ch) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [8:7] \internal Reserved */
    __IO Ifx_UReg_32Bit SLAVE_WR_ADD_TIMEOUT:1;    /**< \brief [9:9] Slave write address channel timeout (rw1ch) */
    __IO Ifx_UReg_32Bit SLAVE_WR_DATA_TIMEOUT:1;    /**< \brief [10:10] Slave write data channel timeout (rw1ch) */
    __IO Ifx_UReg_32Bit SLAVE_RD_ADD_TIMEOUT:1;    /**< \brief [11:11] Slave read address channel timeout (rw1ch) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_STATUS_OFF_Bits;

/** \brief Interface Timer Target Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_TARGET_OFF_Bits
{
    __IO Ifx_UReg_32Bit INTERFACE_TIMER_TARGET:16;    /**< \brief [15:0] Interface timer target value (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_TARGET_OFF_Bits;

/** \brief Lane Skew Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_LANE_SKEW_OFF_Bits
{
    __IO Ifx_UReg_32Bit INSERT_LANE_SKEW:24;    /**< \brief [23:0] INSERT_LANE_SKEW is an internally reserved field (rw) */
    __IO Ifx_UReg_32Bit FLOW_CTRL_DISABLE:1;    /**< \brief [24:24] Flow Control Disable (rw) */
    __IO Ifx_UReg_32Bit ACK_NAK_DISABLE:1;    /**< \brief [25:25] Ack/Nak Disable (rw) */
    __IO Ifx_UReg_32Bit ELASTIC_BUFFER_MODE:1;    /**< \brief [26:26] Selects Elasticity Buffer operating mode: (rw) */
    __IO Ifx_UReg_32Bit IMPLEMENT_NUM_LANES:4;    /**< \brief [30:27] Implementation-specific Number of Lanes (rw) */
    __IO Ifx_UReg_32Bit DISABLE_LANE_TO_LANE_DESKEW:1;    /**< \brief [31:31] Disable Lane-to-Lane Deskew (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_LANE_SKEW_OFF_Bits;

/** \brief Link Reset Request Flush Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_LINK_FLUSH_CONTROL_OFF_Bits
{
    __IO Ifx_UReg_32Bit AUTO_FLUSH_EN:1;    /**< \brief [0:0] Enables automatic flushing of pending requests before sending the reset request to the application logic to reset the PCIe controller and the AXI Bridge (rw) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_LINK_FLUSH_CONTROL_OFF_Bits;

/** \brief DBI Read-Only Write Enable Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MISC_CONTROL_1_OFF_Bits
{
    __IO Ifx_UReg_32Bit DBI_RO_WR_EN:1;    /**< \brief [0:0] Write to RO Registers Using DBI (rwh) */
    __IO Ifx_UReg_32Bit DEFAULT_TARGET:1;    /**< \brief [1:1] Default target for an IO or MEM request with UR/CA/CRS received (rw) */
    __IO Ifx_UReg_32Bit UR_CA_MASK_4_TRGT1:1;    /**< \brief [2:2] "When this field is set to '1', the controller suppresses error logging, error message generation, and CPL generation for non-posted requests TLPs (with UR filtering status) forwarded to your application (that is, when DEFAULT_TARGET =1)" (rw) */
    __IO Ifx_UReg_32Bit SIMPLIFIED_REPLAY_TIMER:1;    /**< \brief [3:3] Enables Simplified Replay Timer (Gen4) (rw) */
    __IO Ifx_UReg_32Bit DISABLE_AUTO_LTR_CLR_MSG:1;    /**< \brief [4:4] Disable the autonomous generation of LTR clear message in upstream port (rw) */
    __IO Ifx_UReg_32Bit ARI_DEVICE_NUMBER:1;    /**< \brief [5:5] When ARI is enabled, this field enables use of the device ID (rw) */
    __IO Ifx_UReg_32Bit CPLQ_MNG_EN:1;     /**< \brief [6:6] This field enables the Completion Queue Management feature (rw) */
    __IO Ifx_UReg_32Bit CFG_TLP_BYPASS_EN_REG:1;    /**< \brief [7:7] Setting of this field defines how to decide the destination of Configuration requests (rw) */
    __IO Ifx_UReg_32Bit CONFIG_LIMIT_REG:10;    /**< \brief [17:8] Configuration requests are directed either to CDM or ELBI/RTRGT1 based on the value of this field (rw) */
    __IO Ifx_UReg_32Bit TARGET_ABOVE_CONFIG_LIMIT_REG:2;    /**< \brief [19:18] Configuration requests with an address greater than CONFIG_LIMIT_REG are directed to either ELBI or TRGT1 interface based on the setting of this field (rw) */
    __IO Ifx_UReg_32Bit P2P_TRACK_CPL_TO_REG:1;    /**< \brief [20:20] Determines whether to track completion of transmitted Non-Posted TLPs in P2P mode (rw) */
    __IO Ifx_UReg_32Bit P2P_ERR_RPT_CTRL:1;    /**< \brief [21:21] Determines whether to enable Peer to Peer (P2P) error reporting (rw) */
    __IO Ifx_UReg_32Bit PORT_LOGIC_WR_DISABLE:1;    /**< \brief [22:22] Disable port logic register write from wire side (rw) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_MISC_CONTROL_1_OFF_Bits;

/** \brief MSIX Address Match High Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_HIGH_OFF_Bits
{
    __IO Ifx_UReg_32Bit MSIX_ADDRESS_MATCH_HIGH:32;    /**< \brief [31:0] MSI-X Address Match High Address (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_HIGH_OFF_Bits;

/** \brief MSI-X Address Match Low Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_LOW_OFF_Bits
{
    __IO Ifx_UReg_32Bit MSIX_ADDRESS_MATCH_EN:1;    /**< \brief [0:0] MSI-X Match Enable (rw) */
    __I  Ifx_UReg_32Bit MSIX_ADDRESS_MATCH_RESERVED_1:1;    /**< \brief [1:1] Reserved (r) */
    __IO Ifx_UReg_32Bit MSIX_ADDRESS_MATCH_LOW:30;    /**< \brief [31:2] MSI-X Address Match Low Address (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_LOW_OFF_Bits;

/** \brief MSI-X Doorbell Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSIX_DOORBELL_OFF_Bits
{
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_VECTOR:11;    /**< \brief [10:0] MSI-X Doorbell Vector (w) */
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_RESERVED_11:1;    /**< \brief [11:11] Reserved (w) */
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_TC:3;    /**< \brief [14:12] MSIX Doorbell Traffic Class (w) */
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_VF_ACTIVE:1;    /**< \brief [15:15] MSIX Doorbell Virtual Function Active (w) */
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_VF:8;    /**< \brief [23:16] MSIX Doorbell Virtual Function (w) */
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_PF:5;    /**< \brief [28:24] MSIX Doorbell Physical Function (w) */
    __O  Ifx_UReg_32Bit MSIX_DOORBELL_RESERVED_29_31:3;    /**< \brief [31:29] Reserved (w) */
} Ifx_PCIE_DSP_PORTLOGIC_MSIX_DOORBELL_OFF_Bits;

/** \brief Integrated MSI Reception Module Interrupt0 Enable Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_EN_Bits
{
    __IO Ifx_UReg_32Bit MSI_CTRL_INT_0_EN:32;    /**< \brief [31:0] MSI Interrupt0 Enable (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_EN_Bits;

/** \brief Integrated MSI Reception Module Interrupt0 Mask Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_MASK_Bits
{
    __IO Ifx_UReg_32Bit MSI_CTRL_INT_0_MASK:32;    /**< \brief [31:0] MSI Interrupt0 Mask (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_MASK_Bits;

/** \brief Integrated MSI Reception Module Interrupt0 Status Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_STATUS_Bits
{
    __IO Ifx_UReg_32Bit MSI_CTRL_INT_0_STATUS:32;    /**< \brief [31:0] MSI Interrupt0 Status (rw1ch) */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_STATUS_Bits;

/** \brief Integrated MSI Reception Module (iMRM) Address Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_ADDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit MSI_CTRL_ADDR:32;    /**< \brief [31:0] Integrated MSI Reception Module Address (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_ADDR_OFF_Bits;

/** \brief Integrated MSI Reception Module Upper Address Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_UPPER_ADDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit MSI_CTRL_UPPER_ADDR:32;    /**< \brief [31:0] Integrated MSI Reception Module Upper Address (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_UPPER_ADDR_OFF_Bits;

/** \brief Integrated MSI Reception Module General Purpose IO Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_MSI_GPIO_IO_OFF_Bits
{
    __IO Ifx_UReg_32Bit MSI_GPIO_REG:32;    /**< \brief [31:0] MSI GPIO Register (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_MSI_GPIO_IO_OFF_Bits;

/** \brief Order Rule Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_ORDER_RULE_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit NP_PASS_P:8;       /**< \brief [7:0] Non-Posted Passing Posted Ordering Rule Control (rw) */
    __IO Ifx_UReg_32Bit CPL_PASS_P:8;      /**< \brief [15:8] Completion Passing Posted Ordering Rule Control (rw) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_ORDER_RULE_CTRL_OFF_Bits;

/** \brief PCIe Controller IIP Release Version Number */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_NUMBER_OFF_Bits
{
    __I  Ifx_UReg_32Bit VERSION_NUMBER:32;    /**< \brief [31:0] Version Number (r) */
} Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_NUMBER_OFF_Bits;

/** \brief PCIe Controller IIP Release Version Type */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_TYPE_OFF_Bits
{
    __I  Ifx_UReg_32Bit VERSION_TYPE:32;    /**< \brief [31:0] Version Type (r) */
} Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_TYPE_OFF_Bits;

/** \brief PIPE Loopback Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PIPE_LOOPBACK_CONTROL_OFF_Bits
{
    __IO Ifx_UReg_32Bit LPBK_RXVALID:16;    /**< \brief [15:0] LPBK_RXVALID is an internally reserved field (rw) */
    __IO Ifx_UReg_32Bit RXSTATUS_LANE:6;    /**< \brief [21:16] RXSTATUS_LANE is an internally reserved field (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit RXSTATUS_VALUE:3;    /**< \brief [26:24] RXSTATUS_VALUE is an internally reserved field (rwh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [30:27] \internal Reserved */
    __IO Ifx_UReg_32Bit PIPE_LOOPBACK:1;    /**< \brief [31:31] PIPE Loopback Enable (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_PIPE_LOOPBACK_CONTROL_OFF_Bits;

/** \brief Application driven bus and device number register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_APP_BUS_DEV_NUM_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit :3;                /**< \brief [2:0] \internal Reserved */
    __I  Ifx_UReg_32Bit RC_DSW_DEV_NUM:5;    /**< \brief [7:3] This field reflects the value of device number driven on CFGBD.DEVNUM input signal by your application (rh) */
    __I  Ifx_UReg_32Bit RC_DSW_BUS_NUM:8;    /**< \brief [15:8] This field reflects the value of bus number driven on CFGBD.BUSNUM  input signal by your application (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_PL_APP_BUS_DEV_NUM_STATUS_OFF_Bits;

/** \brief CDM Register Checking Control and Status Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_CONTROL_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit CHK_REG_START:1;    /**< \brief [0:0] Begins a checking sequence (rw) */
    __IO Ifx_UReg_32Bit CHK_REG_CONTINUOUS:1;    /**< \brief [1:1] Set Continuous Checking Sequence (rwh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [15:2] \internal Reserved */
    __IO Ifx_UReg_32Bit CHK_REG_COMPARISON_ERROR:1;    /**< \brief [16:16] The system has detected that there is a bit error in the CDM Register Data (rw1ch) */
    __IO Ifx_UReg_32Bit CHK_REG_LOGIC_ERROR:1;    /**< \brief [17:17] The system has detected an error in its own checking logic (rw1ch) */
    __IO Ifx_UReg_32Bit CHK_REG_COMPLETE:1;    /**< \brief [18:18] The system has completed a checking cycle (rw1ch) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_CONTROL_STATUS_OFF_Bits;

/** \brief CDM Register Checking Error Address */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_ADDR_OFF_Bits
{
    __I  Ifx_UReg_32Bit CHK_REG_ERR_ADDR:32;    /**< \brief [31:0] The address at which an error has been detected (rh) */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_ADDR_OFF_Bits;

/** \brief CDM Register Checking error PF Numbers */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_PF_VF_OFF_Bits
{
    __I  Ifx_UReg_32Bit CHK_REG_PF_ERR_NUMBER:5;    /**< \brief [4:0] The PF number at which the error was detected (rh) */
    __I  Ifx_UReg_32Bit :11;               /**< \brief [15:5] \internal Reserved */
    __I  Ifx_UReg_32Bit CHK_REG_VF_ERR_NUMBER:12;    /**< \brief [27:16] The VF number at which the error was detected (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_PF_VF_OFF_Bits;

/** \brief CDM Register Checking First and Last address to check */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_START_END_OFF_Bits
{
    __IO Ifx_UReg_32Bit CHK_REG_START_ADDR:16;    /**< \brief [15:0] The first address that is checked by the system (rw) */
    __IO Ifx_UReg_32Bit CHK_REG_END_ADDR:16;    /**< \brief [31:16] The last address that is checked by the system (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_START_END_OFF_Bits;

/** \brief Debug Register 0 */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG0_OFF_Bits
{
    __I  Ifx_UReg_32Bit DEB_REG_0:32;      /**< \brief [31:0] The value on cxpl_debug_info[31:0] (rh) */
} Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG0_OFF_Bits;

/** \brief Debug Register 1 */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG1_OFF_Bits
{
    __I  Ifx_UReg_32Bit DEB_REG_1:32;      /**< \brief [31:0] The value on cxpl_debug_info[63:32] (rh) */
} Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG1_OFF_Bits;

/** \brief LTR Latency Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PL_LTR_LATENCY_OFF_Bits
{
    __IO Ifx_UReg_32Bit SNOOP_LATENCY_VALUE:10;    /**< \brief [9:0] Snoop Latency Value (rw) */
    __IO Ifx_UReg_32Bit SNOOP_LATENCY_SCALE:3;    /**< \brief [12:10] Snoop Latency Scale (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [14:13] \internal Reserved */
    __IO Ifx_UReg_32Bit SNOOP_LATENCY_REQUIRE:1;    /**< \brief [15:15] Snoop Latency Requirement (rw) */
    __IO Ifx_UReg_32Bit NO_SNOOP_LATENCY_VALUE:10;    /**< \brief [25:16] No Snoop Latency Value (rw) */
    __IO Ifx_UReg_32Bit NO_SNOOP_LATENCY_SCALE:3;    /**< \brief [28:26] No Snoop Latency Scale (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [30:29] \internal Reserved */
    __IO Ifx_UReg_32Bit NO_SNOOP_LATENCY_REQUIRE:1;    /**< \brief [31:31] No Snoop Latency Requirement (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_PL_LTR_LATENCY_OFF_Bits;

/** \brief Port Force Link Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PORT_FORCE_OFF_Bits
{
    __IO Ifx_UReg_32Bit LINK_NUM:8;        /**< \brief [7:0] Link Number (rw) */
    __IO Ifx_UReg_32Bit FORCED_LTSSM:4;    /**< \brief [11:8] Forced Link Command (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [14:12] \internal Reserved */
    __IO Ifx_UReg_32Bit FORCE_EN:1;        /**< \brief [15:15] Force Link (rwh) */
    __IO Ifx_UReg_32Bit LINK_STATE:6;      /**< \brief [21:16] Forced LTSSM State (rw) */
    __IO Ifx_UReg_32Bit SUPPORT_PART_LANES_RXEI_EXIT:1;    /**< \brief [22:22] Support LTSSM transition from Polling.Active to Polling.Config based on Rx 8 TSs on any lanes which are Rx EI exit too from base spec after 24ms timeout (rw) */
    __IO Ifx_UReg_32Bit DO_DESKEW_FOR_SRIS:1;    /**< \brief [23:23] "Use the transitions from TS2 to Logical Idle Symbol, SKP OS to Logical Idle Symbol, EIEOS to Logical Idle Symbol, and FTS Sequence to SKP OS to do deskew instead of using received SKP OS or TS1 to TS2 transition if DO_DESKEW_FOR_SRIS is set to '1'" (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_PORT_FORCE_OFF_Bits;

/** \brief Port Link Control Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_PORT_LINK_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit VENDOR_SPECIFIC_DLLP_REQ:1;    /**< \brief [0:0] Vendor Specific DLLP Request (rw1ch) */
    __IO Ifx_UReg_32Bit SCRAMBLE_DISABLE:1;    /**< \brief [1:1] Scramble Disable (rw) */
    __IO Ifx_UReg_32Bit LOOPBACK_ENABLE:1;    /**< \brief [2:2] Loopback Enable (rw) */
    __IO Ifx_UReg_32Bit RESET_ASSERT:1;    /**< \brief [3:3] Reset Assert (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [4:4] \internal Reserved */
    __IO Ifx_UReg_32Bit DLL_LINK_EN:1;     /**< \brief [5:5] DLL Link Enable (rw) */
    __IO Ifx_UReg_32Bit LINK_DISABLE:1;    /**< \brief [6:6] LINK_DISABLE is an internally reserved field (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit LINK_RATE:4;       /**< \brief [11:8] LINK_RATE is an internally reserved field (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit LINK_CAPABLE:6;    /**< \brief [21:16] Link Mode Enable (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [23:22] \internal Reserved */
    __IO Ifx_UReg_32Bit BEACON_ENABLE:1;    /**< \brief [24:24] BEACON_ENABLE is an internally reserved field (rw) */
    __IO Ifx_UReg_32Bit CORRUPT_LCRC_ENABLE:1;    /**< \brief [25:25] CORRUPT_LCRC_ENABLE is an internally reserved field (rw) */
    __IO Ifx_UReg_32Bit EXTENDED_SYNCH:1;    /**< \brief [26:26] EXTENDED_SYNCH is an internally reserved field (rw) */
    __IO Ifx_UReg_32Bit TRANSMIT_LANE_REVERSALE_ENABLE:1;    /**< \brief [27:27] TRANSMIT_LANE_REVERSALE_ENABLE is an internally reserved field (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_PORT_LINK_CTRL_OFF_Bits;

/** \brief Powerdown Control and Status Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_POWERDOWN_CTRL_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit POWERDOWN_FORCE:1;    /**< \brief [0:0] This field is a one shot field (rwh) */
    __IO Ifx_UReg_32Bit POWERDOWN_VMAIN_ACK:1;    /**< \brief [1:1] Set this bit to 1 if you do not want to perform the handshake with the power-switch after PERST# assertion (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [3:2] \internal Reserved */
    __I  Ifx_UReg_32Bit POWERDOWN_MAC_POWERDOWN:4;    /**< \brief [7:4] This field represents the Powerdown value driven by the controller to the PHY (rh) */
    __I  Ifx_UReg_32Bit POWERDOWN_PHY_POWERDOWN:4;    /**< \brief [11:8] This field represents the Powerdown value that has been acknowledged by the PHY (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_POWERDOWN_CTRL_STATUS_OFF_Bits;

/** \brief Queue Status */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_QUEUE_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit RX_TLP_FC_CREDIT_NON_RETURN:1;    /**< \brief [0:0] Received TLP FC Credits Not Returned (rh) */
    __I  Ifx_UReg_32Bit TX_RETRY_BUFFER_NE:1;    /**< \brief [1:1] Transmit Retry Buffer Not Empty (rh) */
    __I  Ifx_UReg_32Bit RX_QUEUE_NON_EMPTY:1;    /**< \brief [2:2] Receive Credit Queue Not Empty (rh) */
    __IO Ifx_UReg_32Bit RX_QUEUE_OVERFLOW:1;    /**< \brief [3:3] Receive Credit Queue Overflow (rw1ch) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [12:4] \internal Reserved */
    __I  Ifx_UReg_32Bit RX_SERIALIZATION_Q_NON_EMPTY:1;    /**< \brief [13:13] Receive Serialization Queue Not Empty (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [15:14] \internal Reserved */
    __IO Ifx_UReg_32Bit TIMER_MOD_FLOW_CONTROL:13;    /**< \brief [28:16] FC Latency Timer Override Value (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [30:29] \internal Reserved */
    __IO Ifx_UReg_32Bit TIMER_MOD_FLOW_CONTROL_EN:1;    /**< \brief [31:31] FC Latency Timer Override Enable (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_QUEUE_STATUS_OFF_Bits;

/** \brief Functional Safety Interrupt Events Mask Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_SAFETY_MASK_OFF_Bits
{
    __IO Ifx_UReg_32Bit SAFETY_INT_MASK_0:1;    /**< \brief [0:0] Mask for functional safety interrupt event 0 (RASDP) (rw) */
    __IO Ifx_UReg_32Bit SAFETY_INT_MASK_1:1;    /**< \brief [1:1] Mask for functional safety interrupt event 1 (Interface timers) (rw) */
    __IO Ifx_UReg_32Bit SAFETY_INT_MASK_2:1;    /**< \brief [2:2] Mask for functional safety interrupt event 2 (CDM register checker) (rw) */
    __IO Ifx_UReg_32Bit SAFETY_INT_MASK_3:1;    /**< \brief [3:3] Mask for functional safety interrupt event 3 (PCIe uncorrectable) (rw) */
    __IO Ifx_UReg_32Bit SAFETY_INT_MASK_4:1;    /**< \brief [4:4] Mask for functional safety interrupt event 4 (PCIe correctable) (rw) */
    __IO Ifx_UReg_32Bit SAFETY_INT_MASK_5:1;    /**< \brief [5:5] Mask for functional safety interrupt event 5 (RASDP correctable) (rw) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_SAFETY_MASK_OFF_Bits;

/** \brief Status for functional safety interrupt events */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_SAFETY_STATUS_OFF_Bits
{
    __IO Ifx_UReg_32Bit SAFETY_INT_STATUS_0:1;    /**< \brief [0:0] Status for functional safety interrupt event 0 (RASDP) (rw1ch) */
    __IO Ifx_UReg_32Bit SAFETY_INT_STATUS_1:1;    /**< \brief [1:1] Status for functional safety interrupt event 1 (Interface timers) (rw1ch) */
    __IO Ifx_UReg_32Bit SAFETY_INT_STATUS_2:1;    /**< \brief [2:2] Status for functional safety interrupt event 2 (CDM register checker) (rw1ch) */
    __IO Ifx_UReg_32Bit SAFETY_INT_STATUS_3:1;    /**< \brief [3:3] Status for functional safety interrupt event 3 (PCIe uncorrectable) (rw1ch) */
    __IO Ifx_UReg_32Bit SAFETY_INT_STATUS_4:1;    /**< \brief [4:4] Status for functional safety interrupt event 4 (PCIe correctable) (rw1ch) */
    __IO Ifx_UReg_32Bit SAFETY_INT_STATUS_5:1;    /**< \brief [5:5] Status for functional safety interrupt event 5 (RASDP correctable) (rw1ch) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [31:6] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_SAFETY_STATUS_OFF_Bits;

/** \brief Symbol Timer Register and Filter Mask 1 Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_SYMBOL_TIMER_FILTER_1_OFF_Bits
{
    __IO Ifx_UReg_32Bit SKP_INT_VAL:11;    /**< \brief [10:0] SKP Interval Value (rw) */
    __IO Ifx_UReg_32Bit EIDLE_TIMER:4;     /**< \brief [14:11] EIDLE_TIMER is an internally reserved field (rw) */
    __IO Ifx_UReg_32Bit DISABLE_FC_WD_TIMER:1;    /**< \brief [15:15] Disable FC Watchdog Timer (rw) */
    __IO Ifx_UReg_32Bit MASK_RADM_1:16;    /**< \brief [31:16] Filter Mask 1 (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_SYMBOL_TIMER_FILTER_1_OFF_Bits;

/** \brief Timer Control and Max Function Number Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_TIMER_CTRL_MAX_FUNC_NUM_OFF_Bits
{
    __IO Ifx_UReg_32Bit MAX_FUNC_NUM:8;    /**< \brief [7:0] Maximum function number that can be used in a request (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [13:8] \internal Reserved */
    __IO Ifx_UReg_32Bit TIMER_MOD_REPLAY_TIMER:5;    /**< \brief [18:14] Replay Timer Limit Modifier (rwh) */
    __IO Ifx_UReg_32Bit TIMER_MOD_ACK_NAK:5;    /**< \brief [23:19] Ack Latency Timer Modifier (rw) */
    __IO Ifx_UReg_32Bit UPDATE_FREQ_TIMER:5;    /**< \brief [28:24] UPDATE_FREQ_TIMER is an internally reserved field (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_TIMER_CTRL_MAX_FUNC_NUM_OFF_Bits;

/** \brief Transmit Completion FC Credit Status */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_TX_CPL_FC_CREDIT_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit TX_CPL_DATA_FC_CREDIT:12;    /**< \brief [11:0] Transmit Completion Data FC Credits (rh) */
    __I  Ifx_UReg_32Bit TX_CPL_HEADER_FC_CREDIT:8;    /**< \brief [19:12] Transmit Completion Header FC Credits (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_TX_CPL_FC_CREDIT_STATUS_OFF_Bits;

/** \brief Transmit Non-Posted FC Credit Status */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_TX_NP_FC_CREDIT_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit TX_NP_DATA_FC_CREDIT:12;    /**< \brief [11:0] Transmit Non-Posted Data FC Credits (rh) */
    __I  Ifx_UReg_32Bit TX_NP_HEADER_FC_CREDIT:8;    /**< \brief [19:12] Transmit Non-Posted Header FC Credits (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_TX_NP_FC_CREDIT_STATUS_OFF_Bits;

/** \brief Transmit Posted FC Credit Status */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_TX_P_FC_CREDIT_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit TX_P_DATA_FC_CREDIT:12;    /**< \brief [11:0] Transmit Posted Data FC Credits (rh) */
    __I  Ifx_UReg_32Bit TX_P_HEADER_FC_CREDIT:8;    /**< \brief [19:12] Transmit Posted Header FC Credits (rh) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [31:20] \internal Reserved */
} Ifx_PCIE_DSP_PORTLOGIC_TX_P_FC_CREDIT_STATUS_OFF_Bits;

/** \brief Segmented-Buffer VC0 Completion Receive Queue Control */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_VC0_CPL_RX_Q_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit VC0_CPL_DATA_CREDIT:12;    /**< \brief [11:0] VC0 Completion Data Credits (rw) */
    __IO Ifx_UReg_32Bit VC0_CPL_HEADER_CREDIT:8;    /**< \brief [19:12] VC0 Completion Header Credits (rw) */
    __IO Ifx_UReg_32Bit RESERVED8:1;       /**< \brief [20:20] Reserved (rw) */
    __IO Ifx_UReg_32Bit VC0_CPL_TLP_Q_MODE:3;    /**< \brief [23:21] Reserved (rw) */
    __IO Ifx_UReg_32Bit VC0_CPL_HDR_SCALE:2;    /**< \brief [25:24] VC0 Scale CPL Header Credits (rw) */
    __IO Ifx_UReg_32Bit VC0_CPL_DATA_SCALE:2;    /**< \brief [27:26] VC0 Scale CPL Data Credits (rw) */
    __IO Ifx_UReg_32Bit RESERVED9:4;       /**< \brief [31:28] Reserved (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_VC0_CPL_RX_Q_CTRL_OFF_Bits;

/** \brief Segmented-Buffer VC0 Non-Posted Receive Queue Control */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_VC0_NP_RX_Q_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit VC0_NP_DATA_CREDIT:12;    /**< \brief [11:0] VC0 Non-Posted Data Credits (rw) */
    __IO Ifx_UReg_32Bit VC0_NP_HEADER_CREDIT:8;    /**< \brief [19:12] VC0 Non-Posted Header Credits (rw) */
    __IO Ifx_UReg_32Bit RESERVED6:1;       /**< \brief [20:20] Reserved (rw) */
    __IO Ifx_UReg_32Bit VC0_NP_TLP_Q_MODE:3;    /**< \brief [23:21] Reserved (rw) */
    __IO Ifx_UReg_32Bit VC0_NP_HDR_SCALE:2;    /**< \brief [25:24] VC0 Scale Non-Posted Header Credits (rw) */
    __IO Ifx_UReg_32Bit VC0_NP_DATA_SCALE:2;    /**< \brief [27:26] VC0 Scale Non-Posted Data Credits (rw) */
    __IO Ifx_UReg_32Bit RESERVED7:4;       /**< \brief [31:28] Reserved (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_VC0_NP_RX_Q_CTRL_OFF_Bits;

/** \brief Segmented-Buffer VC0 Posted Receive Queue Control */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_VC0_P_RX_Q_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit VC0_P_DATA_CREDIT:12;    /**< \brief [11:0] VC0 Posted Data Credits (rw) */
    __IO Ifx_UReg_32Bit VC0_P_HEADER_CREDIT:8;    /**< \brief [19:12] VC0 Posted Header Credits (rw) */
    __IO Ifx_UReg_32Bit RESERVED4:1;       /**< \brief [20:20] Reserved (rw) */
    __IO Ifx_UReg_32Bit VC0_P_TLP_Q_MODE:3;    /**< \brief [23:21] Reserved (rw) */
    __IO Ifx_UReg_32Bit VC0_P_HDR_SCALE:2;    /**< \brief [25:24] VC0 Scale Posted Header Credits (rw) */
    __IO Ifx_UReg_32Bit VC0_P_DATA_SCALE:2;    /**< \brief [27:26] VC0 Scale Posted Data Credits (rw) */
    __IO Ifx_UReg_32Bit RESERVED5:2;       /**< \brief [29:28] Reserved (rw) */
    __IO Ifx_UReg_32Bit TLP_TYPE_ORDERING_VC0:1;    /**< \brief [30:30] TLP Type Ordering for VC0 (rw) */
    __IO Ifx_UReg_32Bit VC_ORDERING_RX_Q:1;    /**< \brief [31:31] VC Ordering for Receive Queues (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_VC0_P_RX_Q_CTRL_OFF_Bits;

/** \brief Vendor Specific DLLP Register */
typedef struct _Ifx_PCIE_DSP_PORTLOGIC_VENDOR_SPEC_DLLP_OFF_Bits
{
    __IO Ifx_UReg_32Bit VENDOR_SPEC_DLLP:32;    /**< \brief [31:0] Vendor Specific DLLP Register (rw) */
} Ifx_PCIE_DSP_PORTLOGIC_VENDOR_SPEC_DLLP_OFF_Bits;

/** \brief Resource protection register */
typedef struct _Ifx_PCIE_DSP_PROT_Bits
{
    __IO Ifx_UReg_32Bit STATE:3;           /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_UReg_32Bit SWEN:1;            /**< \brief [3:3] State write enable (w) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __IO Ifx_UReg_32Bit VM:3;              /**< \brief [18:16] Virtual machine definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit VMEN:1;            /**< \brief [19:19] Virtual machine definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRS:3;             /**< \brief [22:20] Protection set definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit PRSEN:1;           /**< \brief [23:23] Protection set definition enable for PROT owner (rw) */
    __IO Ifx_UReg_32Bit TAGID:6;           /**< \brief [29:24] TAG-ID definition for PROT owner (rw) */
    __IO Ifx_UReg_32Bit ODEF:1;            /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_UReg_32Bit OWEN:1;            /**< \brief [31:31] Owner write enable (w) */
} Ifx_PCIE_DSP_PROT_Bits;

/** \brief PTM Capability Register */
typedef struct _Ifx_PCIE_DSP_PTMCAP_PTM_CAP_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_REQ_CAPABLE:1;    /**< \brief [0:0] PTM Requester Capable (rw) */
    __IO Ifx_UReg_32Bit PTM_RES_CAPABLE:1;    /**< \brief [1:1] PTM Responder Capable (rwh) */
    __IO Ifx_UReg_32Bit PTM_ROOT_CAPABLE:1;    /**< \brief [2:2] PTM Root Capable (rw) */
    __IO Ifx_UReg_32Bit EPTM_CAPABLE:1;    /**< \brief [3:3] ePTM Capable (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [7:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PTM_CLK_GRAN:8;    /**< \brief [15:8] PTM Local Clock Granularity (rwh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PTMCAP_PTM_CAP_OFF_Bits;

/** \brief PTM Control Register */
typedef struct _Ifx_PCIE_DSP_PTMCAP_PTM_CONTROL_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_ENABLE:1;      /**< \brief [0:0] PTM Enable (rw) */
    __IO Ifx_UReg_32Bit ROOT_SELECT:1;     /**< \brief [1:1] PTM Root Select (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [7:2] \internal Reserved */
    __I  Ifx_UReg_32Bit EFF_GRAN:8;        /**< \brief [15:8] PTM Effective Granularity (rh) */
    __I  Ifx_UReg_32Bit :16;               /**< \brief [31:16] \internal Reserved */
} Ifx_PCIE_DSP_PTMCAP_PTM_CONTROL_OFF_Bits;

/** \brief Precision Time Measurement Capability Header */
typedef struct _Ifx_PCIE_DSP_PTMCAP_PTM_EXT_CAP_HDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_CAP_ID:16;     /**< \brief [15:0] Precision Time Measurement PCI Express Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit PTM_CAP_VERSION:4;    /**< \brief [19:16] Precision Time Measurement PCI Express Extended Capability Version (rw) */
    __IO Ifx_UReg_32Bit PTM_NEXT_OFFSET:12;    /**< \brief [31:20] Precision Time Measurement PCI Express Extended Capability Next Offset (rw) */
} Ifx_PCIE_DSP_PTMCAP_PTM_EXT_CAP_HDR_OFF_Bits;

/** \brief Precision Time Measurement Responder Capability Header (VSEC) */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CAP_HDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_EXT_CAP_ID:16;    /**< \brief [15:0] Precision Time Measurement Responder VSEC ID (rw) */
    __IO Ifx_UReg_32Bit PTM_RES_EXT_CAP_VER:4;    /**< \brief [19:16] Precision Time Measurement Responder VSEC Version (rw) */
    __IO Ifx_UReg_32Bit PTM_RES_EXT_CAP_NEXT_OFFS:12;    /**< \brief [31:20] Precision Time Measurement Responder VSEC Next Pointer (rw) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CAP_HDR_OFF_Bits;

/** \brief PTM Responder Control Register */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CONTROL_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_CCONTEXT_VALID:1;    /**< \brief [0:0] PTM Responder Control Context Valid (rwh) */
    __IO Ifx_UReg_32Bit PTM_RES_PDEL_BYTE_REV:1;    /**< \brief [1:1] PTM Requester Propagation Delay Byte Reversal (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CONTROL_OFF_Bits;

/** \brief Precision Time Measurement Responder Vendor Specific Header */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_HDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_VSEC_ID:16;    /**< \brief [15:0] PTM Responder VSEC ID (rw) */
    __IO Ifx_UReg_32Bit PTM_RES_VSEC_REV:4;    /**< \brief [19:16] PTM Responder VSEC Revision (rw) */
    __IO Ifx_UReg_32Bit PTM_RES_VSEC_LENGTH:12;    /**< \brief [31:20] PTM Responder VSEC Length (rw) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_HDR_OFF_Bits;

/** \brief PTM Responder Latency Viewport Register Select */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LATENCY_REG_SEL_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_LATENCY_REG_SEL:4;    /**< \brief [3:0] Selects the PTM Responder Tx and Rx Latency Viewport register to be written or read, together with the PTM_RES_ESM_SEL field (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [6:4] \internal Reserved */
    __IO Ifx_UReg_32Bit PTM_RES_ESM_SEL:1;    /**< \brief [7:7] Selection Mode for PTM Responder Tx and Rx Latency Viewport register to be written or read (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LATENCY_REG_SEL_OFF_Bits;

/** \brief PTM Responder Local Clock LSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_LSB_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_LOCAL_LSB:32;    /**< \brief [31:0] PTM Responder Local Clock LSB (rwh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_LSB_OFF_Bits;

/** \brief PTM Responder Local Clock MSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_MSB_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_LOCAL_MSB:32;    /**< \brief [31:0] PTM Responder Local Clock MSB (rwh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_MSB_OFF_Bits;

/** \brief PTM Responder Nominal Clock Period */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_NOM_CLOCK_T_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_NOM_CLOCK_T_FRAC:16;    /**< \brief [15:0] PTM Responder Nominal Clock Period Fractional (rh) */
    __I  Ifx_UReg_32Bit PTM_RES_NOM_CLOCK_T_INT:8;    /**< \brief [23:16] PTM Responder Nominal Clock Period Integral &#8211; Integral part of the nominal PTM local clock period, in nanoseconds (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_NOM_CLOCK_T_OFF_Bits;

/** \brief PTM Responder RX Latency */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_RX_LATENCY_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_RX_LATENCY:12;    /**< \brief [11:0] PTM Responder RX Latency (rwh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_RX_LATENCY_OFF_Bits;

/** \brief PTM Responder Scaled Clock Period */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_SCALED_CLOCK_T_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_SCALED_CLOCK_T_FRAC:16;    /**< \brief [15:0] PTM Responder Scaled Clock Period Fractional (rw) */
    __IO Ifx_UReg_32Bit PTM_RES_SCALED_CLOCK_T_INT:8;    /**< \brief [23:16] PTM Responder Scaled Clock Period Integral (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [30:24] \internal Reserved */
    __IO Ifx_UReg_32Bit PTM_RES_SCALED_CLOCK_T_EN:1;    /**< \brief [31:31] PTM Responder Scaled Clock Period Enable (rw) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_SCALED_CLOCK_T_OFF_Bits;

/** \brief PTM Responder Status Register */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_STATUS_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_CONTEXT_VALID:1;    /**< \brief [0:0] PTM Responder Status Context Valid (rh) */
    __I  Ifx_UReg_32Bit PTM_RES_REQUEST_RECEIVED:1;    /**< \brief [1:1] PTM 1st Request Received (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_STATUS_OFF_Bits;

/** \brief PTM Responder T2 Previous Timestamp LSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_LSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T2P_LSB:32;    /**< \brief [31:0] PTM Responder T2 Previous Timestamp LSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_LSB_OFF_Bits;

/** \brief PTM Responder T2 Previous Timestamp MSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_MSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T2P_MSB:32;    /**< \brief [31:0] PTM Responder T2 Previous Timestamp MSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_MSB_OFF_Bits;

/** \brief PTM Responder T2 Timestamp LSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_LSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T2_LSB:32;    /**< \brief [31:0] PTM Responder T2 Timestamp LSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_LSB_OFF_Bits;

/** \brief PTM Responder T2 Timestamp MSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_MSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T2_MSB:32;    /**< \brief [31:0] PTM Responder T2 Timestamp MSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_MSB_OFF_Bits;

/** \brief PTM Responder T3 Previous Timestamp LSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_LSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T3P_LSB:32;    /**< \brief [31:0] PTM Responder T3 Previous Timestamp LSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_LSB_OFF_Bits;

/** \brief PTM Responder T3 Previous Timestamp MSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_MSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T3P_MSB:32;    /**< \brief [31:0] PTM Responder T3 Previous Timestamp MSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_MSB_OFF_Bits;

/** \brief PTM Responder T3 Timestamp LSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_LSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T3_LSB:32;    /**< \brief [31:0] PTM Responder T3 Timestamp LSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_LSB_OFF_Bits;

/** \brief PTM Responder T3 Timestamp MSB */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_MSB_OFF_Bits
{
    __I  Ifx_UReg_32Bit PTM_RES_T3_MSB:32;    /**< \brief [31:0] PTM Responder T3 Timestamp MSB (rh) */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_MSB_OFF_Bits;

/** \brief PTM Responder TX Latency */
typedef struct _Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_TX_LATENCY_OFF_Bits
{
    __IO Ifx_UReg_32Bit PTM_RES_TX_LATENCY:12;    /**< \brief [11:0] PTM Responder TX Latency (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_TX_LATENCY_OFF_Bits;

/** \brief Clock correction */
typedef struct _Ifx_PCIE_DSP_PTM_CLKCORR_Bits
{
    __I  Ifx_UReg_32Bit CLKCORR:32;        /**< \brief [31:0] Amount by which Local Clock has been corrected (rh) */
} Ifx_PCIE_DSP_PTM_CLKCORR_Bits;

/** \brief PTM control */
typedef struct _Ifx_PCIE_DSP_PTM_CTRL_Bits
{
    __I  Ifx_UReg_32Bit CNTXTVLD:1;        /**< \brief [0:0] Context Valid. (rh) */
    __I  Ifx_UReg_32Bit RDYVLDT:1;         /**< \brief [1:1] PTM Responder Ready to Validate. (rh) */
    __O  Ifx_UReg_32Bit MSTSTRB:1;         /**< \brief [2:2] PTM External Master Time Strobe. (w) */
    __IO Ifx_UReg_32Bit AUTOUPDT:1;        /**< \brief [3:3] Update the Context and Clock automatically (rw) */
    __I  Ifx_UReg_32Bit TRGG:1;            /**< \brief [4:4] Indicates that a PTM Requester manual update trigger is allowed (rh) */
    __I  Ifx_UReg_32Bit UPDATING:1;        /**< \brief [5:5] Indicates that a PTM update is in progress. (rh) */
    __I  Ifx_UReg_32Bit UPDATED:1;         /**< \brief [6:6] Indicates that the controller has updated the Local Clock (rh) */
    __I  Ifx_UReg_32Bit TRN:1;             /**< \brief [7:7] PTM Requester Response Timeout status. The interrupt can be triggered when the TRNEN is asserted. (rh) */
    __O  Ifx_UReg_32Bit TRNCLR:1;          /**< \brief [8:8] Clear the TRN bit. (w) */
    __IO Ifx_UReg_32Bit TRNEN:1;           /**< \brief [9:9] Enable the TRN bit. (rw) */
    __I  Ifx_UReg_32Bit DUP:1;             /**< \brief [10:10] PTM Requester Duplicate Received. The interrupt can be triggered when the DUPEN is asserted. (rh) */
    __O  Ifx_UReg_32Bit DUPCLR:1;          /**< \brief [11:11] Clear the DUP bit. (w) */
    __IO Ifx_UReg_32Bit DUPEN:1;           /**< \brief [12:12] Enable the DUP bit. (rw) */
    __I  Ifx_UReg_32Bit :19;               /**< \brief [31:13] \internal Reserved */
} Ifx_PCIE_DSP_PTM_CTRL_Bits;

/** \brief Local Clock value */
typedef struct _Ifx_PCIE_DSP_PTM_LCLCLK_Bits
{
    __I  Ifx_UReg_32Bit LCLCLK:32;         /**< \brief [31:0] Local Clock value. (rh) */
} Ifx_PCIE_DSP_PTM_LCLCLK_Bits;

/** \brief PTM External Master Time */
typedef struct _Ifx_PCIE_DSP_PTM_MSKCLK_Bits
{
    __IO Ifx_UReg_32Bit MSKCLK:32;         /**< \brief [31:0] PTM External Master Time. (rw) */
} Ifx_PCIE_DSP_PTM_MSKCLK_Bits;

/** \brief Error Injection Control 0 (CRC Error) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ0_CRC_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ0_COUNT:8;     /**< \brief [7:0] Error injection count (rwh) */
    __IO Ifx_UReg_32Bit EINJ0_CRC_TYPE:4;    /**< \brief [11:8] Error injection type (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ0_CRC_REG_Bits;

/** \brief Error Injection Control 1 (Sequence Number Error).<br> */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ1_SEQNUM_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ1_COUNT:8;     /**< \brief [7:0] Error injection count (rwh) */
    __IO Ifx_UReg_32Bit EINJ1_SEQNUM_TYPE:1;    /**< \brief [8:8] Sequence number type (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit EINJ1_BAD_SEQNUM:13;    /**< \brief [28:16] Bad sequence number (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ1_SEQNUM_REG_Bits;

/** \brief Error Injection Control 2 (DLLP Error) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ2_DLLP_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ2_COUNT:8;     /**< \brief [7:0] Error injection count (rwh) */
    __IO Ifx_UReg_32Bit EINJ2_DLLP_TYPE:2;    /**< \brief [9:8] DLLP Type (rw) */
    __I  Ifx_UReg_32Bit :22;               /**< \brief [31:10] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ2_DLLP_REG_Bits;

/** \brief Error Injection Control 3 (Symbol Error) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ3_SYMBOL_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ3_COUNT:8;     /**< \brief [7:0] Error injection count (rwh) */
    __IO Ifx_UReg_32Bit EINJ3_SYMBOL_TYPE:3;    /**< \brief [10:8] Error Type (rw) */
    __I  Ifx_UReg_32Bit :21;               /**< \brief [31:11] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ3_SYMBOL_REG_Bits;

/** \brief Error Injection Control 4 (FC Credit Error) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ4_FC_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ4_COUNT:8;     /**< \brief [7:0] Error injection count (rwh) */
    __IO Ifx_UReg_32Bit EINJ4_UPDFC_TYPE:3;    /**< \brief [10:8] Update-FC type (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [11:11] \internal Reserved */
    __IO Ifx_UReg_32Bit EINJ4_VC_NUMBER:3;    /**< \brief [14:12] VC Number (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __IO Ifx_UReg_32Bit EINJ4_BAD_UPDFC_VALUE:13;    /**< \brief [28:16] Bad update-FC credit value (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ4_FC_REG_Bits;

/** \brief Error Injection Control 5 (Specific TLP Error) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ5_SP_TLP_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ5_COUNT:8;     /**< \brief [7:0] Error injection count (rwh) */
    __IO Ifx_UReg_32Bit EINJ5_SPECIFIED_TLP:1;    /**< \brief [8:8] Specified TLP (rw) */
    __I  Ifx_UReg_32Bit :23;               /**< \brief [31:9] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ5_SP_TLP_REG_Bits;

/** \brief Error Injection Control 6 (Change Point Header DWORD #0) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_POINTH_Bits
{
    __IO Ifx_UReg_32Bit EINJ6_CHANGE_POINT_H0:32;    /**< \brief [31:0] Packet Change Point: 1st DWORD (rw) */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_POINTH_Bits;

/** \brief Error Injection Control 6 (Change Value Header DWORD #0) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_VALUEH_Bits
{
    __IO Ifx_UReg_32Bit EINJ6_CHANGE_VALUE_H0:32;    /**< \brief [31:0] Packet Change Value: 1st DWORD (rw) */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_VALUEH_Bits;

/** \brief Error Injection Control 6 (Compare Point Header DWORD #0) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_POINTH_Bits
{
    __IO Ifx_UReg_32Bit EINJ6_COMPARE_POINT_H0:32;    /**< \brief [31:0] Packet Compare Point: 1st DWORD (rw) */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_POINTH_Bits;

/** \brief Error Injection Control 6 (Compare Value Header DWORD #0) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_VALUEH_Bits
{
    __IO Ifx_UReg_32Bit EINJ6_COMPARE_VALUE_H0:32;    /**< \brief [31:0] Packet Compare Value: 1st DWORD (rw) */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_VALUEH_Bits;

/** \brief Error Injection Control 6 (Packet Error) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_EINJ6_TLP_REG_Bits
{
    __IO Ifx_UReg_32Bit EINJ6_COUNT:8;     /**< \brief [7:0] Error Injection Count (rwh) */
    __IO Ifx_UReg_32Bit EINJ6_INVERTED_CONTROL:1;    /**< \brief [8:8] Inverted Error Injection Control (rw) */
    __IO Ifx_UReg_32Bit EINJ6_PACKET_TYPE:3;    /**< \brief [11:9] Packet type (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_EINJ6_TLP_REG_Bits;

/** \brief Error Injection Enable */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EINJ_ENABLE_REG_Bits
{
    __IO Ifx_UReg_32Bit ERROR_INJECTION0_ENABLE:1;    /**< \brief [0:0] Error Injection0 Enable (CRC Error) (rwh) */
    __IO Ifx_UReg_32Bit ERROR_INJECTION1_ENABLE:1;    /**< \brief [1:1] Error Injection1 Enable (Sequence Number Error) (rwh) */
    __IO Ifx_UReg_32Bit ERROR_INJECTION2_ENABLE:1;    /**< \brief [2:2] Error Injection2 Enable (DLLP Error) (rwh) */
    __IO Ifx_UReg_32Bit ERROR_INJECTION3_ENABLE:1;    /**< \brief [3:3] Error Injection3 Enable (Symbol DataK Mask Error or Sync Header Error) (rwh) */
    __IO Ifx_UReg_32Bit ERROR_INJECTION4_ENABLE:1;    /**< \brief [4:4] Error Injection4 Enable (FC Credit Update Error) (rwh) */
    __IO Ifx_UReg_32Bit ERROR_INJECTION5_ENABLE:1;    /**< \brief [5:5] Error Injection5 Enable (TLP Duplicate/Nullify Error) (rwh) */
    __IO Ifx_UReg_32Bit ERROR_INJECTION6_ENABLE:1;    /**< \brief [6:6] Error Injection6 Enable (Specific TLP Error) (rwh) */
    __I  Ifx_UReg_32Bit :25;               /**< \brief [31:7] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EINJ_ENABLE_REG_Bits;

/** \brief Event Counter Control */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_CONTROL_REG_Bits
{
    __IO Ifx_UReg_32Bit EVENT_COUNTER_CLEAR:2;    /**< \brief [1:0] Event Counter Clear (rwh) */
    __IO Ifx_UReg_32Bit EVENT_COUNTER_ENABLE:3;    /**< \brief [4:2] Event Counter Enable (rwh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [6:5] \internal Reserved */
    __I  Ifx_UReg_32Bit EVENT_COUNTER_STATUS:1;    /**< \brief [7:7] Event Counter Status (rh) */
    __IO Ifx_UReg_32Bit EVENT_COUNTER_LANE_SELECT:4;    /**< \brief [11:8] Event Counter Lane Select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __IO Ifx_UReg_32Bit EVENT_COUNTER_EVENT_SELECT:12;    /**< \brief [27:16] Event Counter Data Select (rw) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_CONTROL_REG_Bits;

/** \brief Event Counter Data */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_DATA_REG_Bits
{
    __I  Ifx_UReg_32Bit EVENT_COUNTER_DATA:32;    /**< \brief [31:0] Event Counter Data (rh) */
} Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_DATA_REG_Bits;

/** \brief Vendor-Specific Extended Capability Header */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_RAS_DES_CAP_HEADER_REG_Bits
{
    __IO Ifx_UReg_32Bit EXTENDED_CAP_ID:16;    /**< \brief [15:0] PCI Express Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit CAP_VERSION:4;     /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_RASDESCAP_RAS_DES_CAP_HEADER_REG_Bits;

/** \brief Silicon Debug EQ Control 1 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL1_Bits
{
    __IO Ifx_UReg_32Bit EQ_LANE_SEL:4;     /**< \brief [3:0] EQ Status Lane Select (rw) */
    __IO Ifx_UReg_32Bit EQ_RATE_SEL:2;     /**< \brief [5:4] EQ Status Rate Select (rw) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [7:6] \internal Reserved */
    __IO Ifx_UReg_32Bit EXT_EQ_TIMEOUT:2;    /**< \brief [9:8] Extends EQ Phase2/3 Timeout (rw) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __IO Ifx_UReg_32Bit EVAL_INTERVAL_TIME:2;    /**< \brief [17:16] Eval Interval Time (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [22:18] \internal Reserved */
    __IO Ifx_UReg_32Bit FOM_TARGET_ENABLE:1;    /**< \brief [23:23] FOM Target Enable (rw) */
    __IO Ifx_UReg_32Bit FOM_TARGET:8;      /**< \brief [31:24] FOM Target (rw) */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL1_Bits;

/** \brief Silicon Debug EQ Control 2 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL2_Bits
{
    __IO Ifx_UReg_32Bit FORCE_LOCAL_TX_PRE_CURSOR:6;    /**< \brief [5:0] Force Local Transmitter Pre-cursor (rwh) */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_TX_CURSOR:6;    /**< \brief [11:6] Force Local Transmitter Cursor (rwh) */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_TX_POST_CURSOR:6;    /**< \brief [17:12] Force Local Transmitter Post-Cursor (rwh) */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_RX_HINT:3;    /**< \brief [20:18] Force Local Receiver Preset Hint (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_TX_PRESET:4;    /**< \brief [27:24] Force Local Transmitter Preset (rwh) */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_TX_COEF_ENABLE:1;    /**< \brief [28:28] Force Local Transmitter Coefficient Enable (rwh) */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_RX_HINT_ENABLE:1;    /**< \brief [29:29] Force Local Receiver Preset Hint Enable (rwh) */
    __IO Ifx_UReg_32Bit FORCE_LOCAL_TX_PRESET_ENABLE:1;    /**< \brief [30:30] Force Local Transmitter Preset Enable (rwh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [31:31] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL2_Bits;

/** \brief Silicon Debug EQ Control 3 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL3_Bits
{
    __IO Ifx_UReg_32Bit FORCE_REMOTE_TX_PRE_CURSOR:6;    /**< \brief [5:0] Force Remote Transmitter Pre-Cursor (rwh) */
    __IO Ifx_UReg_32Bit FORCE_REMOTE_TX_CURSOR:6;    /**< \brief [11:6] Force Remote Transmitter Cursor (rwh) */
    __IO Ifx_UReg_32Bit FORCE_REMOTE_TX_POST_CURSOR:6;    /**< \brief [17:12] Force Remote Transmitter Post-Cursor (rwh) */
    __I  Ifx_UReg_32Bit :10;               /**< \brief [27:18] \internal Reserved */
    __IO Ifx_UReg_32Bit FORCE_REMOTE_TX_COEF_ENABLE:1;    /**< \brief [28:28] Force Remote Transmitter Coefficient Enable (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL3_Bits;

/** \brief Silicon Debug EQ Status 1 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS1_Bits
{
    __I  Ifx_UReg_32Bit EQ_SEQUENCE:1;     /**< \brief [0:0] EQ Sequence (rh) */
    __I  Ifx_UReg_32Bit EQ_CONVERGENCE_INFO:2;    /**< \brief [2:1] EQ Convergence Info (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit EQ_RULEA_VIOLATION:1;    /**< \brief [4:4] EQ Rule A Violation (rh) */
    __I  Ifx_UReg_32Bit EQ_RULEB_VIOLATION:1;    /**< \brief [5:5] EQ Rule B Violation (rh) */
    __I  Ifx_UReg_32Bit EQ_RULEC_VIOLATION:1;    /**< \brief [6:6] EQ Rule C Violation (rh) */
    __I  Ifx_UReg_32Bit EQ_REJECT_EVENT:1;    /**< \brief [7:7] EQ Reject Event (rh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS1_Bits;

/** \brief Silicon Debug EQ Status 2 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS2_Bits
{
    __I  Ifx_UReg_32Bit EQ_LOCAL_PRE_CURSOR:6;    /**< \brief [5:0] EQ Local Pre-Cursor (rh) */
    __I  Ifx_UReg_32Bit EQ_LOCAL_CURSOR:6;    /**< \brief [11:6] EQ Local Cursor (rh) */
    __I  Ifx_UReg_32Bit EQ_LOCAL_POST_CURSOR:6;    /**< \brief [17:12] EQ Local Post-Cursor (rh) */
    __I  Ifx_UReg_32Bit EQ_LOCAL_RX_HINT:3;    /**< \brief [20:18] EQ Local Receiver Preset Hint (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __I  Ifx_UReg_32Bit EQ_LOCAL_FOM_VALUE:8;    /**< \brief [31:24] EQ Local Figure of Merit (rh) */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS2_Bits;

/** \brief Silicon Debug EQ Status 3 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS3_Bits
{
    __I  Ifx_UReg_32Bit EQ_REMOTE_PRE_CURSOR:6;    /**< \brief [5:0] EQ Remote Pre-Cursor (rh) */
    __I  Ifx_UReg_32Bit EQ_REMOTE_CURSOR:6;    /**< \brief [11:6] EQ Remote Cursor (rh) */
    __I  Ifx_UReg_32Bit EQ_REMOTE_POST_CURSOR:6;    /**< \brief [17:12] EQ Remote Post-Cursor (rh) */
    __I  Ifx_UReg_32Bit EQ_REMOTE_LF:6;    /**< \brief [23:18] EQ Remote LF (rh) */
    __I  Ifx_UReg_32Bit EQ_REMOTE_FS:6;    /**< \brief [29:24] EQ Remote FS (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS3_Bits;

/** \brief Silicon Debug Control 1 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL1_REG_Bits
{
    __IO Ifx_UReg_32Bit FORCE_DETECT_LANE:16;    /**< \brief [15:0] Force Detect Lane (rw) */
    __IO Ifx_UReg_32Bit FORCE_DETECT_LANE_EN:1;    /**< \brief [16:16] Force Detect Lane Enable (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [19:17] \internal Reserved */
    __IO Ifx_UReg_32Bit TX_EIOS_NUM:2;     /**< \brief [21:20] Number of Tx EIOS (rw) */
    __IO Ifx_UReg_32Bit LOW_POWER_INTERVAL:2;    /**< \brief [23:22] Low Power Entry Interval Time (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL1_REG_Bits;

/** \brief Silicon Debug Control 2 */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL2_REG_Bits
{
    __IO Ifx_UReg_32Bit HOLD_LTSSM:1;      /**< \brief [0:0] Hold and Release LTSSM (rw) */
    __IO Ifx_UReg_32Bit RECOVERY_REQUEST:1;    /**< \brief [1:1] "Recovery Request. Reading register field always returns a '0'." (rwh) */
    __IO Ifx_UReg_32Bit NOACK_FORCE_LINKDOWN:1;    /**< \brief [2:2] Force LinkDown (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit DIRECT_RECIDLE_TO_CONFIG:1;    /**< \brief [8:8] Direct Recovery.Idle to Configuration (rw) */
    __IO Ifx_UReg_32Bit DIRECT_POLCOMP_TO_DETECT:1;    /**< \brief [9:9] Direct Polling.Compliance to Detect (rw) */
    __IO Ifx_UReg_32Bit DIRECT_LPBKSLV_TO_EXIT:1;    /**< \brief [10:10] Direct Loopback Slave To Exit (rw) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [15:11] \internal Reserved */
    __IO Ifx_UReg_32Bit FRAMING_ERR_RECOVERY_DISABLE:1;    /**< \brief [16:16] Framing Error Recovery Disable (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL2_REG_Bits;

/** \brief Silicon Debug Status(Layer1 Per-lane) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1LANE_Bits
{
    __IO Ifx_UReg_32Bit LANE_SELECT:4;     /**< \brief [3:0] Lane Select (rw) */
    __I  Ifx_UReg_32Bit :12;               /**< \brief [15:4] \internal Reserved */
    __I  Ifx_UReg_32Bit PIPE_RXPOLARITY:1;    /**< \brief [16:16] PIPE:RxPolarity (rh) */
    __I  Ifx_UReg_32Bit PIPE_DETECT_LANE:1;    /**< \brief [17:17] PIPE:Detect Lane (rh) */
    __I  Ifx_UReg_32Bit PIPE_RXVALID:1;    /**< \brief [18:18] PIPE:RxValid (rh) */
    __I  Ifx_UReg_32Bit PIPE_RXELECIDLE:1;    /**< \brief [19:19] PIPE:RxElecIdle (rh) */
    __I  Ifx_UReg_32Bit PIPE_TXELECIDLE:1;    /**< \brief [20:20] PIPE:TxElecIdle (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [23:21] \internal Reserved */
    __I  Ifx_UReg_32Bit DESKEW_POINTER:8;    /**< \brief [31:24] Deskew Pointer (rh) */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1LANE_Bits;

/** \brief Silicon Debug Status(Layer1 LTSSM) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1TSSM_Bits
{
    __I  Ifx_UReg_32Bit FRAMING_ERR_PTR:7;    /**< \brief [6:0] First Framing Error Pointer (rh) */
    __IO Ifx_UReg_32Bit FRAMING_ERR:1;     /**< \brief [7:7] Framing Error (rw1ch) */
    __I  Ifx_UReg_32Bit PIPE_POWER_DOWN:3;    /**< \brief [10:8] PIPE:PowerDown (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [14:11] \internal Reserved */
    __I  Ifx_UReg_32Bit LANE_REVERSAL:1;    /**< \brief [15:15] Lane Reversal Operation (rh) */
    __I  Ifx_UReg_32Bit LTSSM_VARIABLE:16;    /**< \brief [31:16] LTSSM Variable (rh) */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1TSSM_Bits;

/** \brief Silicon Debug Status(Layer2) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L2REG_Bits
{
    __I  Ifx_UReg_32Bit TX_TLP_SEQ_NO:12;    /**< \brief [11:0] Tx Tlp Sequence Number (rh) */
    __I  Ifx_UReg_32Bit RX_ACK_SEQ_NO:12;    /**< \brief [23:12] Tx Ack Sequence Number (rh) */
    __I  Ifx_UReg_32Bit DLCMSM:2;          /**< \brief [25:24] DLCMSM (rh) */
    __I  Ifx_UReg_32Bit FC_INIT1:1;        /**< \brief [26:26] FC_INIT1 (rh) */
    __I  Ifx_UReg_32Bit FC_INIT2:1;        /**< \brief [27:27] FC_INIT2 (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L2REG_Bits;

/** \brief Silicon Debug Status(Layer3 FC) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3L3FC_Bits
{
    __IO Ifx_UReg_32Bit CREDIT_SEL_VC:3;    /**< \brief [2:0] Credit Select(VC) (rw) */
    __IO Ifx_UReg_32Bit CREDIT_SEL_CREDIT_TYPE:1;    /**< \brief [3:3] Credit Select(Credit Type) (rw) */
    __IO Ifx_UReg_32Bit CREDIT_SEL_TLP_TYPE:2;    /**< \brief [5:4] Credit Select(TLP Type) (rw) */
    __IO Ifx_UReg_32Bit CREDIT_SEL_HD:1;    /**< \brief [6:6] Credit Select(HeaderData) (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __I  Ifx_UReg_32Bit CREDIT_DATA0:12;    /**< \brief [19:8] Credit Data0 (rh) */
    __I  Ifx_UReg_32Bit CREDIT_DATA1:12;    /**< \brief [31:20] Credit Data1 (rh) */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3L3FC_Bits;

/** \brief Silicon Debug Status(Layer3) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3REG_Bits
{
    __I  Ifx_UReg_32Bit MFTLP_POINTER:7;    /**< \brief [6:0] First Malformed TLP Error Pointer (rh) */
    __IO Ifx_UReg_32Bit MFTLP_STATUS:1;    /**< \brief [7:7] Malformed TLP Status (rw1ch) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3REG_Bits;

/** \brief Silicon Debug Status(PM) */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_PMREG_Bits
{
    __I  Ifx_UReg_32Bit INTERNAL_PM_MSTATE:5;    /**< \brief [4:0] Internal PM State(Master) (rh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [7:5] \internal Reserved */
    __I  Ifx_UReg_32Bit INTERNAL_PM_SSTATE:4;    /**< \brief [11:8] Internal PM State(Slave) (rh) */
    __IO Ifx_UReg_32Bit PME_RESEND_FLAG:1;    /**< \brief [12:12] PME Re-send flag (rw1ch) */
    __I  Ifx_UReg_32Bit L1SUB_STATE:3;     /**< \brief [15:13] L1Sub State (rh) */
    __I  Ifx_UReg_32Bit LATCHED_NFTS:8;    /**< \brief [23:16] Latched N_FTS (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_PMREG_Bits;

/** \brief Time-based Analysis Control */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_CONTROL_REG_Bits
{
    __IO Ifx_UReg_32Bit TIMER_START:1;     /**< \brief [0:0] Timer Start (rwh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit TIME_BASED_DURATION_SELECT:8;    /**< \brief [15:8] Time-based Duration Select (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [23:16] \internal Reserved */
    __IO Ifx_UReg_32Bit TIME_BASED_REPORT_SELECT:8;    /**< \brief [31:24] Time-based Report Select (rw) */
} Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_CONTROL_REG_Bits;

/** \brief Upper 32 bits of Time-based Analysis Data */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_63_32_REG_Bits
{
    __I  Ifx_UReg_32Bit TIME_BASED_ANALYSIS_DATA_63_32:32;    /**< \brief [31:0] Upper 32 bits of Time Based Analysis Data (rh) */
} Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_63_32_REG_Bits;

/** \brief Time-based Analysis Data */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_REG_Bits
{
    __I  Ifx_UReg_32Bit TIME_BASED_ANALYSIS_DATA:32;    /**< \brief [31:0] Time Based Analysis Data (rh) */
} Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_REG_Bits;

/** \brief Vendor-Specific Header */
typedef struct _Ifx_PCIE_DSP_RASDESCAP_VENDOR_SPECIFIC_HEADER_REG_Bits
{
    __I  Ifx_UReg_32Bit VSEC_ID:16;        /**< \brief [15:0] VSEC ID (r) */
    __I  Ifx_UReg_32Bit VSEC_REV:4;        /**< \brief [19:16] VSEC Rev (r) */
    __I  Ifx_UReg_32Bit VSEC_LENGTH:12;    /**< \brief [31:20] VSEC Length (r) */
} Ifx_PCIE_DSP_RASDESCAP_VENDOR_SPECIFIC_HEADER_REG_Bits;

/** \brief Reset control register A */
typedef struct _Ifx_PCIE_DSP_RST_CTRLA_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __IO Ifx_UReg_32Bit GRSTEN0:1;         /**< \brief [8:8] Enable for Global Module Reset Group     0     - GRSTEN    0 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN1:1;         /**< \brief [9:9] Enable for Global Module Reset Group     1     - GRSTEN    1 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN2:1;         /**< \brief [10:10] Enable for Global Module Reset Group     2     - GRSTEN    2 (rw) */
    __IO Ifx_UReg_32Bit GRSTEN3:1;         /**< \brief [11:11] Enable for Global Module Reset Group     3     - GRSTEN    3 (rw) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_RST_CTRLA_Bits;

/** \brief Reset control register B */
typedef struct _Ifx_PCIE_DSP_RST_CTRLB_Bits
{
    __IO Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset - KRST (rw1sh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [30:1] \internal Reserved */
    __O  Ifx_UReg_32Bit STATCLR:1;         /**< \brief [31:31] Kernel Reset Status Clear - STATCLR (w) */
} Ifx_PCIE_DSP_RST_CTRLB_Bits;

/** \brief Reset status register */
typedef struct _Ifx_PCIE_DSP_RST_STAT_Bits
{
    __I  Ifx_UReg_32Bit KRST:1;            /**< \brief [0:0] Kernel Reset Status - KRST (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [7:1] \internal Reserved */
    __I  Ifx_UReg_32Bit GRST0:1;           /**< \brief [8:8] Status for Global Module Reset Group     0     - GRST    0 (rh) */
    __I  Ifx_UReg_32Bit GRST1:1;           /**< \brief [9:9] Status for Global Module Reset Group     1     - GRST    1 (rh) */
    __I  Ifx_UReg_32Bit GRST2:1;           /**< \brief [10:10] Status for Global Module Reset Group     2     - GRST    2 (rh) */
    __I  Ifx_UReg_32Bit GRST3:1;           /**< \brief [11:11] Status for Global Module Reset Group     3     - GRST    3 (rh) */
    __I  Ifx_UReg_32Bit :20;               /**< \brief [31:12] \internal Reserved */
} Ifx_PCIE_DSP_RST_STAT_Bits;

/** \brief Serial Number 1 Register */
typedef struct _Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_1_Bits
{
    __IO Ifx_UReg_32Bit SN_SER_NUM_REG_1_DW:32;    /**< \brief [31:0] IEEE 64 bit Device Serial Number (DW 1) (rw) */
} Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_1_Bits;

/** \brief Serial Number 2 Register */
typedef struct _Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_2_Bits
{
    __IO Ifx_UReg_32Bit SN_SER_NUM_REG_2_DW:32;    /**< \brief [31:0] IEEE 64 bit Device Serial Number (DW 2) (rw) */
} Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_2_Bits;

/** \brief Device Serial Number Extended Capability Header */
typedef struct _Ifx_PCIE_DSP_SNCAP_SN_BASE_Bits
{
    __IO Ifx_UReg_32Bit SN_PCIE_EXTENDED_CAP_ID:16;    /**< \brief [15:0] Serial Number Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit SN_CAP_VERSION:4;    /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit SN_NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_SNCAP_SN_BASE_Bits;

/** \brief Lane Error Status Register */
typedef struct _Ifx_PCIE_DSP_SPCIECAP_LANE_ERR_STATUS_REG_Bits
{
    __IO Ifx_UReg_32Bit LANE_ERR_STATUS:1;    /**< \brief [0:0] Lane Error Status Bits per Lane (rw1ch) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PCIE_DSP_SPCIECAP_LANE_ERR_STATUS_REG_Bits;

/** \brief Link Control 3 Register */
typedef struct _Ifx_PCIE_DSP_SPCIECAP_LINK_CONTROL3_REG_Bits
{
    __IO Ifx_UReg_32Bit PERFORM_EQ:1;      /**< \brief [0:0] Perform Equalization (rwh) */
    __IO Ifx_UReg_32Bit EQ_REQ_INT_EN:1;    /**< \brief [1:1] Link Equalization Request Interrupt Enable (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_SPCIECAP_LINK_CONTROL3_REG_Bits;

/** \brief SPCIE Capability Header */
typedef struct _Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_HEADER_REG_Bits
{
    __IO Ifx_UReg_32Bit EXTENDED_CAP_ID:16;    /**< \brief [15:0] Secondary PCI Express Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit CAP_VERSION:4;     /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_HEADER_REG_Bits;

/** \brief Lane Equalization Control Register for lanes 1 and 0 */
typedef struct _Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_OFF_0CH_REG_Bits
{
    __IO Ifx_UReg_32Bit DSP_TX_PRESET0:4;    /**< \brief [3:0] Downstream Port 8.0 GT/s Transmitter Preset 0 (rw) */
    __IO Ifx_UReg_32Bit DSP_RX_PRESET_HINT0:3;    /**< \brief [6:4] Downstream Port 8.0 GT/s Receiver Preset Hint 0 (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [7:7] \internal Reserved */
    __IO Ifx_UReg_32Bit USP_TX_PRESET0:4;    /**< \brief [11:8] Upstream Port 8.0 GT/s Transmitter Preset 0 (rw) */
    __IO Ifx_UReg_32Bit USP_RX_PRESET_HINT0:3;    /**< \brief [14:12] Upstream Port 8.0 GT/s Receiver Preset Hint 0 (rw) */
    __I  Ifx_UReg_32Bit :17;               /**< \brief [31:15] \internal Reserved */
} Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_OFF_0CH_REG_Bits;

/** \brief Rx control */
typedef struct _Ifx_PCIE_DSP_TXRX_RXCTRL_Bits
{
    __I  Ifx_UReg_32Bit CPLTO:1;           /**< \brief [0:0] Indicates that the completion TLP for a request has not been received (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [5:1] \internal Reserved */
    __I  Ifx_UReg_32Bit CPLTC:3;           /**< \brief [8:6] The Traffic Class of the timed out completion (rh) */
    __I  Ifx_UReg_32Bit CPLATTR:2;         /**< \brief [10:9] The Attributes field of the timed out completion (rh) */
    __I  Ifx_UReg_32Bit CPLLEN:12;         /**< \brief [22:11] Length (in bytes) of the timed out completion. (rh) */
    __I  Ifx_UReg_32Bit :9;                /**< \brief [31:23] \internal Reserved */
} Ifx_PCIE_DSP_TXRX_RXCTRL_Bits;

/** \brief Tx control 0 */
typedef struct _Ifx_PCIE_DSP_TXRX_TXCTRL0_Bits
{
    __I  Ifx_UReg_32Bit BLCKTLP:1;         /**< \brief [0:0] Block TLP generation (rh) */
    __I  Ifx_UReg_32Bit PRTYERR:3;         /**< \brief [3:1] Indicates that the controller detected a datapath parity error (rh) */
    __I  Ifx_UReg_32Bit CPLTO:1;           /**< \brief [4:4] No completion for an incoming request (rh) */
    __I  Ifx_UReg_32Bit CPLFNUM:3;         /**< \brief [7:5] The function number of the timed out completion. (rh) */
    __I  Ifx_UReg_32Bit CPLTC:3;           /**< \brief [10:8] The TC of the timed out completion. (rh) */
    __I  Ifx_UReg_32Bit CPLATTR:2;         /**< \brief [12:11] The Attributes value of the timed out completion. (rh) */
    __I  Ifx_UReg_32Bit CPLLEN:12;         /**< \brief [24:13] The Length of the timed out completion. (rh) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [31:25] \internal Reserved */
} Ifx_PCIE_DSP_TXRX_TXCTRL0_Bits;

/** \brief BAR0 Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_BAR_Bits
{
    __IO Ifx_UReg_32Bit BAR0_MEM_IO:1;     /**< \brief [0:0] BAR0 Memory Space Indicator (rwh) */
    __IO Ifx_UReg_32Bit BAR0_TYPE:2;       /**< \brief [2:1] BAR0 Type (rwh) */
    __IO Ifx_UReg_32Bit BAR0_PREFETCH:1;    /**< \brief [3:3] BAR0 Prefetchable (rwh) */
    __IO Ifx_UReg_32Bit BAR0_START:28;     /**< \brief [31:4] BAR0 Base Address (rwh) */
} Ifx_PCIE_DSP_TYPE1HDR_BAR_Bits;

/** \brief Bridge Control, Interrupt Pin, and Interrupt Line Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_BRIDGE_CTRL_INT_PIN_INT_LINE_REG_Bits
{
    __IO Ifx_UReg_32Bit INT_LINE:8;        /**< \brief [7:0] Interrupt Line (rw) */
    __IO Ifx_UReg_32Bit INT_PIN:8;         /**< \brief [15:8] Interrupt PIN (rw) */
    __IO Ifx_UReg_32Bit PERE:1;            /**< \brief [16:16] Parity Error Response Enable (rw) */
    __IO Ifx_UReg_32Bit SERR_EN:1;         /**< \brief [17:17] SERR# Enable (rw) */
    __IO Ifx_UReg_32Bit ISA_EN:1;          /**< \brief [18:18] ISA Enable (rw) */
    __I  Ifx_UReg_32Bit VGA_EN:1;          /**< \brief [19:19] VGA Enable (r) */
    __I  Ifx_UReg_32Bit VGA_16B_DEC:1;     /**< \brief [20:20] VGA 16 bit decode (r) */
    __I  Ifx_UReg_32Bit MSTR_ABORT_MODE:1;    /**< \brief [21:21] Master Abort Mode (rh) */
    __IO Ifx_UReg_32Bit SBR:1;             /**< \brief [22:22] Secondary Bus Reset (rw) */
    __I  Ifx_UReg_32Bit BRIDGE_CTRL_RESERV:9;    /**< \brief [31:23] Reserved (r) */
} Ifx_PCIE_DSP_TYPE1HDR_BRIDGE_CTRL_INT_PIN_INT_LINE_REG_Bits;

/** \brief I/O Limit and Base Upper 16 Bits Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_IO_LIMIT_UPPER_IO_BASE_UPPER_REG_Bits
{
    __I  Ifx_UReg_32Bit IO_BASE_UPPER:16;    /**< \brief [15:0] I/O Base Upper 16 Bits (r) */
    __I  Ifx_UReg_32Bit IO_LIMIT_UPPER:16;    /**< \brief [31:16] I/O Limit Upper 16 Bits (r) */
} Ifx_PCIE_DSP_TYPE1HDR_IO_LIMIT_UPPER_IO_BASE_UPPER_REG_Bits;

/** \brief Memory Limit and Base Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_MEM_LIMIT_MEM_BASE_REG_Bits
{
    __I  Ifx_UReg_32Bit MEM_BASE_RESERV:4;    /**< \brief [3:0] Reserved (r) */
    __IO Ifx_UReg_32Bit MEM_BASE:12;       /**< \brief [15:4] Memory Base Address (rw) */
    __I  Ifx_UReg_32Bit MEM_LIMIT_RESERV:4;    /**< \brief [19:16] Reserved (r) */
    __IO Ifx_UReg_32Bit MEM_LIMIT:12;      /**< \brief [31:20] Memory Limit Address (rw) */
} Ifx_PCIE_DSP_TYPE1HDR_MEM_LIMIT_MEM_BASE_REG_Bits;

/** \brief Prefetchable Base Upper 32 Bits Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_PREF_BASE_UPPER_REG_Bits
{
    __IO Ifx_UReg_32Bit PREF_MEM_BASE_UPPER:32;    /**< \brief [31:0] Prefetchable Base Upper 32 Bit (rw) */
} Ifx_PCIE_DSP_TYPE1HDR_PREF_BASE_UPPER_REG_Bits;

/** \brief Prefetchable Limit Upper 32 Bits Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_PREF_LIMIT_UPPER_REG_Bits
{
    __IO Ifx_UReg_32Bit PREF_MEM_LIMIT_UPPER:32;    /**< \brief [31:0] Prefetchable Limit Upper 32 Bit (rw) */
} Ifx_PCIE_DSP_TYPE1HDR_PREF_LIMIT_UPPER_REG_Bits;

/** \brief Prefetchable Memory Limit and Base Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_PREF_MEM_LIMIT_PREF_MEM_BASE_REG_Bits
{
    __IO Ifx_UReg_32Bit PREF_MEM_DECODE:1;    /**< \brief [0:0] Prefetchable Memory Base Decode (rw) */
    __I  Ifx_UReg_32Bit PREF_RESERV:3;     /**< \brief [3:1] Reserved (r) */
    __IO Ifx_UReg_32Bit PREF_MEM_BASE:12;    /**< \brief [15:4] Prefetchable Memory Base Address (rwh) */
    __I  Ifx_UReg_32Bit PREF_MEM_LIMIT_DECODE:1;    /**< \brief [16:16] Prefetchable Memory Limit Decode (rh) */
    __I  Ifx_UReg_32Bit PREF_RESERV1:3;    /**< \brief [19:17] Reserved (r) */
    __IO Ifx_UReg_32Bit PREF_MEM_LIMIT:12;    /**< \brief [31:20] Prefetchable Memory Limit Address (rwh) */
} Ifx_PCIE_DSP_TYPE1HDR_PREF_MEM_LIMIT_PREF_MEM_BASE_REG_Bits;

/** \brief Secondary Latency Timer, Subordinate Bus Number, Secondary Bus Number, and  Primary Bus Number Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_SEC_LAT_TIMER_SUB_BUS_SEC_BUS_PRI_BUS_REG_Bits
{
    __IO Ifx_UReg_32Bit PRIM_BUS:8;        /**< \brief [7:0] Primary Bus Number (rw) */
    __IO Ifx_UReg_32Bit SEC_BUS:8;         /**< \brief [15:8] Secondary Bus Number (rw) */
    __IO Ifx_UReg_32Bit SUB_BUS:8;         /**< \brief [23:16] Subordinate Bus Number (rw) */
    __I  Ifx_UReg_32Bit SEC_LAT_TIMER:8;    /**< \brief [31:24] Secondary Latency Timer (r) */
} Ifx_PCIE_DSP_TYPE1HDR_SEC_LAT_TIMER_SUB_BUS_SEC_BUS_PRI_BUS_REG_Bits;

/** \brief Secondary Status, and I/O Limit and Base Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_SEC_STAT_IO_LIMIT_IO_BASE_REG_Bits
{
    __IO Ifx_UReg_32Bit IO_DECODE:1;       /**< \brief [0:0] I/O Addressing Encode (IO Base Address) (rw) */
    __I  Ifx_UReg_32Bit IO_RESERV:3;       /**< \brief [3:1] Reserved (r) */
    __IO Ifx_UReg_32Bit IO_BASE:4;         /**< \brief [7:4] I/O Base Address (rw) */
    __IO Ifx_UReg_32Bit IO_DECODE_BIT8:1;    /**< \brief [8:8] I/O Addressing Encode (IO Limit Address) (rwh) */
    __I  Ifx_UReg_32Bit IO_RESERV1:3;      /**< \brief [11:9] Reserved (r) */
    __IO Ifx_UReg_32Bit IO_LIMIT:4;        /**< \brief [15:12] I/O Limit Address (rw) */
    __I  Ifx_UReg_32Bit SEC_STAT_RESERV:7;    /**< \brief [22:16] Reserved (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [23:23] \internal Reserved */
    __IO Ifx_UReg_32Bit SEC_STAT_MDPE:1;    /**< \brief [24:24] Master Data Parity Error (rw1ch) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [26:25] \internal Reserved */
    __IO Ifx_UReg_32Bit SEC_STAT_SIG_TRGT_ABRT:1;    /**< \brief [27:27] Signaled Target Abort (rw1ch) */
    __IO Ifx_UReg_32Bit SEC_STAT_RCVD_TRGT_ABRT:1;    /**< \brief [28:28] Received Target Abort (rw1ch) */
    __IO Ifx_UReg_32Bit SEC_STAT_RCVD_MSTR_ABRT:1;    /**< \brief [29:29] Received Master Abort (rw1ch) */
    __IO Ifx_UReg_32Bit SEC_STAT_RCVD_SYS_ERR:1;    /**< \brief [30:30] Received System Error (rw1ch) */
    __IO Ifx_UReg_32Bit SEC_STAT_DPE:1;    /**< \brief [31:31] Detected Parity Error (rw1ch) */
} Ifx_PCIE_DSP_TYPE1HDR_SEC_STAT_IO_LIMIT_IO_BASE_REG_Bits;

/** \brief BIST, Header Type, Latency Timer, and Cache Line Size Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_TYPE1_BIST_HDR_TYPE_LAT_CACHE_LINE_SIZE_REG_Bits
{
    __IO Ifx_UReg_32Bit CACHE_LINE_SIZE:8;    /**< \brief [7:0] Cache Line Size (rw) */
    __I  Ifx_UReg_32Bit LATENCY_MASTER_TIMER:8;    /**< \brief [15:8] Latency Timer (r) */
    __I  Ifx_UReg_32Bit HEADER_TYPE:7;     /**< \brief [22:16] Header Layout (r) */
    __I  Ifx_UReg_32Bit MULTI_FUNC:1;      /**< \brief [23:23] Multi-Function Device (r) */
    __I  Ifx_UReg_32Bit BIST:8;            /**< \brief [31:24] BIST (r) */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_BIST_HDR_TYPE_LAT_CACHE_LINE_SIZE_REG_Bits;

/** \brief Capabilities Pointer Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CAP_PTR_REG_Bits
{
    __IO Ifx_UReg_32Bit CAP_POINTER:8;     /**< \brief [7:0] Capabilities Pointer (rw) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CAP_PTR_REG_Bits;

/** \brief Class Code and Revision ID Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CLASS_CODE_REV_ID_REG_Bits
{
    __IO Ifx_UReg_32Bit REVISION_ID:8;     /**< \brief [7:0] Revision ID (rw) */
    __IO Ifx_UReg_32Bit PROGRAM_INTERFACE:8;    /**< \brief [15:8] Programming Interface (rw) */
    __IO Ifx_UReg_32Bit SUBCLASS_CODE:8;    /**< \brief [23:16] Sub-Class Code (rw) */
    __IO Ifx_UReg_32Bit BASE_CLASS_CODE:8;    /**< \brief [31:24] Base Class Code (rw) */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CLASS_CODE_REV_ID_REG_Bits;

/** \brief Device ID and Vendor ID Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_TYPE1_DEV_ID_VEND_ID_REG_Bits
{
    __IO Ifx_UReg_32Bit VENDOR_ID:16;      /**< \brief [15:0] Vendor ID (rw) */
    __IO Ifx_UReg_32Bit DEVICE_ID:16;      /**< \brief [31:16] Device ID (rw) */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_DEV_ID_VEND_ID_REG_Bits;

/** \brief Expansion ROM BAR Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_TYPE1_EXP_ROM_BASE_REG_Bits
{
    __IO Ifx_UReg_32Bit ROM_BAR_ENABLE:1;    /**< \brief [0:0] Expansion ROM Enable (rwh) */
    __IO Ifx_UReg_32Bit ROM_BAR_VALIDATION_STATUS:3;    /**< \brief [3:1] Expansion ROM Validation Status (rwh) */
    __IO Ifx_UReg_32Bit ROM_BAR_VALIDATION_DETAILS:4;    /**< \brief [7:4] Expansion ROM Validation Details (rwh) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [10:8] \internal Reserved */
    __IO Ifx_UReg_32Bit EXP_ROM_BASE_ADDRESS:21;    /**< \brief [31:11] Expansion ROM Base Address (rwh) */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_EXP_ROM_BASE_REG_Bits;

/** \brief Status and Command Register */
typedef struct _Ifx_PCIE_DSP_TYPE1HDR_TYPE1_STATUS_COMMAND_REG_Bits
{
    __IO Ifx_UReg_32Bit IO_EN:1;           /**< \brief [0:0] IO Space Enable (rwh) */
    __IO Ifx_UReg_32Bit MSE:1;             /**< \brief [1:1] Memory Space Enable (rwh) */
    __IO Ifx_UReg_32Bit BME:1;             /**< \brief [2:2] Bus Master Enable (rw) */
    __I  Ifx_UReg_32Bit SCO:1;             /**< \brief [3:3] Special Cycle Enable (r) */
    __I  Ifx_UReg_32Bit MWI_EN:1;          /**< \brief [4:4] Memory Write and Invalidate (r) */
    __I  Ifx_UReg_32Bit VGAPS:1;           /**< \brief [5:5] VGA Palette Snoop (r) */
    __IO Ifx_UReg_32Bit PERREN:1;          /**< \brief [6:6] Parity Error Response (rw) */
    __I  Ifx_UReg_32Bit IDSEL:1;           /**< \brief [7:7] IDSEL Stepping/Wait Cycle Control (r) */
    __IO Ifx_UReg_32Bit SERREN:1;          /**< \brief [8:8] SERR# Enable (rw) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [9:9] \internal Reserved */
    __IO Ifx_UReg_32Bit INT_EN:1;          /**< \brief [10:10] Interrupt Disable (rw) */
    __I  Ifx_UReg_32Bit RESERV:5;          /**< \brief [15:11] Reserved (r) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [18:16] \internal Reserved */
    __I  Ifx_UReg_32Bit INT_STATUS:1;      /**< \brief [19:19] Interrupt Status (rh) */
    __I  Ifx_UReg_32Bit CAP_LIST:1;        /**< \brief [20:20] Capabilities List (r) */
    __I  Ifx_UReg_32Bit FAST_66MHZ_CAP:1;    /**< \brief [21:21] 66 MHz Capable (r) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [22:22] \internal Reserved */
    __I  Ifx_UReg_32Bit FAST_B2B_CAP:1;    /**< \brief [23:23] Fast Back-to-Back Transactions Capable (r) */
    __IO Ifx_UReg_32Bit MASTER_DPE:1;      /**< \brief [24:24] Master Data Parity Error (rw1ch) */
    __I  Ifx_UReg_32Bit DEV_SEL_TIMING:2;    /**< \brief [26:25] DEVSEL Timing (r) */
    __IO Ifx_UReg_32Bit SIGNALED_TARGET_ABORT:1;    /**< \brief [27:27] Signaled Target Abort (rw1ch) */
    __IO Ifx_UReg_32Bit RCVD_TARGET_ABORT:1;    /**< \brief [28:28] Received Target Abort (rw1ch) */
    __IO Ifx_UReg_32Bit RCVD_MASTER_ABORT:1;    /**< \brief [29:29] Received Master Abort (rw1ch) */
    __IO Ifx_UReg_32Bit SIGNALED_SYS_ERROR:1;    /**< \brief [30:30] Signaled System Error (rw1ch) */
    __IO Ifx_UReg_32Bit DETECTED_PARITY_ERROR:1;    /**< \brief [31:31] Detected Parity Error (rw1ch) */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_STATUS_COMMAND_REG_Bits;

/** \brief DMA and related AXI Bridge Implementation Information */
typedef struct _Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_DEVICE_INFORMATION_OFF_Bits
{
    __I  Ifx_UReg_32Bit MAP_FORMAT:3;      /**< \brief [2:0] Defines the register map format and features to be one of the following values: Other values are reserved (r) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __I  Ifx_UReg_32Bit BARN:3;            /**< \brief [10:8] Bar Number (r) */
    __I  Ifx_UReg_32Bit PFN:5;             /**< \brief [15:11] Physical Function Number (r) */
    __I  Ifx_UReg_32Bit CHANNEL_SEPARATION:3;    /**< \brief [18:16] If the MAP_FORMAT is set to HDMA_NATIVE, this field specifies the read write channel address separation (r) */
    __I  Ifx_UReg_32Bit AXI:1;             /**< \brief [19:19] This field provides information about AXI interface usage (r) */
    __I  Ifx_UReg_32Bit MASTER_BUS_WIDTH:3;    /**< \brief [22:20] This field provides information regarding the AXI master data bus width (r) */
    __I  Ifx_UReg_32Bit MASTER_BURST_LENGTH:3;    /**< \brief [25:23] Reports the maximum burst length (in beats) of an AXI transfer at the master interface (r) */
    __I  Ifx_UReg_32Bit MASTER_PAGE_BOUNDARY_POINTER_WIDTH:4;    /**< \brief [29:26] This field provides address page boundary information (r) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [31:30] \internal Reserved */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_DEVICE_INFORMATION_OFF_Bits;

/** \brief PCIe Extended Capability ID, Capability Version, and Next Capability Offset Register */
typedef struct _Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_EXT_CAP_HDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit ID:16;             /**< \brief [15:0] PCI Express Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit CAP:4;             /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_EXT_CAP_HDR_OFF_Bits;

/** \brief Number of Implemented Channels Register */
typedef struct _Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_NUM_CHAN_OFF_Bits
{
    __I  Ifx_UReg_32Bit NUM_DMA_WR_CHAN:10;    /**< \brief [9:0] This field provides information regarding the number of implemented write channels (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __I  Ifx_UReg_32Bit NUM_DMA_RD_CHAN:10;    /**< \brief [25:16] This field provides information regarding the number of implemented read channels (r) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_NUM_CHAN_OFF_Bits;

/** \brief DMA Register Map Start Address Offset High Register */
typedef struct _Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_HIGH_OFF_Bits
{
    __I  Ifx_UReg_32Bit UNROLL_ADDR_OFFSET_HIGH:32;    /**< \brief [31:0] BAR address offset, 32-bit MSB (r) */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_HIGH_OFF_Bits;

/** \brief DMA Register Map Start Address Offset Low Register */
typedef struct _Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_LOW_OFF_Bits
{
    __I  Ifx_UReg_32Bit UNROLL_ADDR_OFFSET_LOW:32;    /**< \brief [31:0] BAR address offset, 32-bit LSB (r) */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_LOW_OFF_Bits;

/** \brief Vendor Specific Header Register */
typedef struct _Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_VENDOR_SPECIFIC_HDR_OFF_Bits
{
    __I  Ifx_UReg_32Bit VSEC_ID:16;        /**< \brief [15:0] VSEC ID (r) */
    __I  Ifx_UReg_32Bit VSEC_REV:4;        /**< \brief [19:16] VSEC Rev (r) */
    __I  Ifx_UReg_32Bit VSEC_LENGTH:12;    /**< \brief [31:20] VSEC Length (r) */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_VENDOR_SPECIFIC_HDR_OFF_Bits;

/** \brief RASDP Error Mode Clear Register */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_CLEAR_OFF_Bits
{
    __IO Ifx_UReg_32Bit ERROR_MODE_CLEAR:1;    /**< \brief [0:0] "Write '1' to take the controller out of RASDP error mode" (rwh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_CLEAR_OFF_Bits;

/** \brief RASDP error mode enable. */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_EN_OFF_Bits
{
    __IO Ifx_UReg_32Bit ERROR_MODE_EN:1;    /**< \brief [0:0] "Write '1' to enable the controller enter RASDP error mode when it detects an uncorrectable error" (rw) */
    __IO Ifx_UReg_32Bit AUTO_LINK_DOWN_EN:1;    /**< \brief [1:1] "Write '1' to enable the controller to bring the link down when the controller enters RASDP error mode" (rw) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_EN_OFF_Bits;

/** \brief ECC Error Correction and Control Register */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_PROT_CTRL_OFF_Bits
{
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_TX:1;    /**< \brief [0:0] Global error correction disable for all Tx layers (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_AXI_BRIDGE_MASTER:1;    /**< \brief [1:1] Error correction disable for AXI bridge master completion buffer (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_AXI_BRIDGE_OUTBOUND:1;    /**< \brief [2:2] Error correction disable for AXI bridge outbound request path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_DMA_WRITE:1;    /**< \brief [3:3] Error correction disable for DMA write engine (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_LAYER2_TX:1;    /**< \brief [4:4] Error correction disable for layer 2 Tx path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_LAYER3_TX:1;    /**< \brief [5:5] Error correction disable for layer 3 Tx path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_ADM_TX:1;    /**< \brief [6:6] Error correction disable for Adm Tx path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_CXS_TX:1;    /**< \brief [7:7] Error correction disable for CXS Rx path (PCIe Tx path) (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_DTIM_TX:1;    /**< \brief [8:8] Error correction disable for DTIM Tx path (rw) */
    __I  Ifx_UReg_32Bit :7;                /**< \brief [15:9] \internal Reserved */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_RX:1;    /**< \brief [16:16] Global error correction disable for all Rx layers (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_AXI_BRIDGE_INBOUND_COMPLETION:1;    /**< \brief [17:17] Error correction disable for AXI bridge inbound completion composer (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_AXI_BRIDGE_INBOUND_REQUEST:1;    /**< \brief [18:18] Error correction disable for AXI bridge inbound request path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_DMA_READ:1;    /**< \brief [19:19] Error correction disable for DMA read engine (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_LAYER2_RX:1;    /**< \brief [20:20] Error correction disable for layer 2 Rx path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_LAYER3_RX:1;    /**< \brief [21:21] Error correction disable for layer 3 Rx path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_ADM_RX:1;    /**< \brief [22:22] Error correction disable for ADM Rx path (rw) */
    __IO Ifx_UReg_32Bit ERROR_PROT_DISABLE_CXS_RX:1;    /**< \brief [23:23] Error correction disable for CXS Tx path (PCIe Rx path) (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_PROT_CTRL_OFF_Bits;

/** \brief PCIe Extended capability ID, Capability version and Next capability offset */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_EXT_CAP_HDR_OFF_Bits
{
    __IO Ifx_UReg_32Bit ID:16;             /**< \brief [15:0] PCI Express Extended Capability ID (rw) */
    __IO Ifx_UReg_32Bit CAP:4;             /**< \brief [19:16] Capability Version (rw) */
    __IO Ifx_UReg_32Bit NEXT_OFFSET:12;    /**< \brief [31:20] Next Capability Offset (rw) */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_EXT_CAP_HDR_OFF_Bits;

/** \brief RAM Address where a corrected error (1-bit ECC) is detected */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_CORR_ERROR_OFF_Bits
{
    __I  Ifx_UReg_32Bit RAM_ADDR_CORR_ERROR:27;    /**< \brief [26:0] RAM Address where a corrected error (1-bit ECC) is detected (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __I  Ifx_UReg_32Bit RAM_INDEX_CORR_ERROR:4;    /**< \brief [31:28] RAM index where a corrected error (1-bit ECC) is detected (rh) */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_CORR_ERROR_OFF_Bits;

/** \brief RAM Address where an uncorrected error (2-bit ECC) is detected */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_UNCORR_ERROR_OFF_Bits
{
    __I  Ifx_UReg_32Bit RAM_ADDR_UNCORR_ERROR:27;    /**< \brief [26:0] RAM Address where an uncorrected error (2-bit ECC) is detected (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [27:27] \internal Reserved */
    __I  Ifx_UReg_32Bit RAM_INDEX_UNCORR_ERROR:4;    /**< \brief [31:28] RAM index where an uncorrected error (2-bit ECC) is detected (rh) */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_UNCORR_ERROR_OFF_Bits;

/** \brief Vendor Specific Header */
typedef struct _Ifx_PCIE_DSP_VSECRASCAP_RASDP_VENDOR_SPECIFIC_HDR_OFF_Bits
{
    __I  Ifx_UReg_32Bit VSEC_ID:16;        /**< \brief [15:0] VSEC ID (r) */
    __I  Ifx_UReg_32Bit VSEC_REV:4;        /**< \brief [19:16] VSEC Rev (r) */
    __I  Ifx_UReg_32Bit VSEC_LENGTH:12;    /**< \brief [31:20] VSEC Length (r) */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_VENDOR_SPECIFIC_HDR_OFF_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_pcie_dsp_Registers_union
 * \{   */
/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_PRS_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_RDA_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_RDB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_RDB_FPI;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_RDB_SRI_Bits B;     /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_RDB_SRI;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_RGNLA_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_RGNUA_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_RGNUA;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_VM_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_WRA_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_WRB_FPI_Bits B;     /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_WRB_FPI;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ACCEN_WRB_SRI_Bits B;     /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ACCEN_WRB_SRI;

/** \brief Advanced Error Reporting Extended Capability Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_AER_EXT_CAP_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_AER_EXT_CAP_HDR_OFF;

/** \brief Correctable Error Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_CORR_ERR_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_CORR_ERR_MASK;

/** \brief Correctable Error Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_CORR_ERR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_CORR_ERR_STATUS;

/** \brief Advanced Error Capabilities and Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_ERR_CAP_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_ERR_CAP_CTRL;

/** \brief Error Source Identification Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_ERR_SRC_ID_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_ERR_SRC_ID_OFF;

/** \brief Header Log Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_HDR_LOG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_HDR_LOG;

/** \brief Root Error Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_CMD_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_CMD_OFF;

/** \brief Root Error Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_STATUS_OFF;

/** \brief TLP Prefix Log Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_TLP_PREFIX_LOG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_TLP_PREFIX_LOG;

/** \brief Uncorrectable Error Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_MASK;

/** \brief Uncorrectable Error Severity Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_SEV_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_SEV;

/** \brief Uncorrectable Error Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_STATUS;

/** \brief Interrupt/alarm clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ALARM_INTCLR_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ALARM_INTCLR;

/** \brief Interrupt/alarm enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ALARM_INTEN_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ALARM_INTEN;

/** \brief Interrupt/alarm status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ALARM_STAT_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ALARM_STAT;

/** \brief iATU Limit Address Register Inbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_INBOUND_LIMIT_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_INBOUND_LIMIT_ADDR;

/** \brief iATU Lower Base Address Register Inbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_INBOUND_LWR_BASE_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_INBOUND_LWR_BASE_ADDR;

/** \brief iATU Lower Target Address Register Inbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_INBOUND_LWR_TARGET_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_INBOUND_LWR_TARGET_ADD;

/** \brief iATU Region Control 1 Register Inbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_1;

/** \brief iATU Region Control 2 Register Inbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_2_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_2;

/** \brief iATU Upper Base Address Register Inbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_INBOUND_UPPER_BASE_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_INBOUND_UPPER_BASE_ADDR;

/** \brief iATU Limit Address Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_LIMIT_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_LIMIT_ADDR;

/** \brief iATU Lower Base Address Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_BASE_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_BASE_ADDR;

/** \brief iATU Lower Target Address Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_TARGET_ADD_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_TARGET_ADD;

/** \brief iATU Region Control 1 Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_1;

/** \brief iATU Region Control 2 Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_2_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_2;

/** \brief iATU Upper Base Address Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_BASE_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_BASE_ADDR;

/** \brief iATU Upper Target Address Register Outbound   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_TARGET_ADDR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_TARGET_ADDR;

/** \brief PCIe configuration control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_CFGBD_Bits B;             /**< \brief Bitfield access */
} Ifx_PCIE_DSP_CFGBD;

/** \brief Bus/device number   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_CFG_BUSNUM_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_CFG_BUSNUM;

/** \brief Configuration information   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_CFG_INFO_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_CFG_INFO;

/** \brief Clock control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_CLC_Bits B;               /**< \brief Bitfield access */
} Ifx_PCIE_DSP_CLC;

/** \brief Debug information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DBG_DATA_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DBG_DATA;

/** \brief Debug status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DBG_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DBG_STAT;

/** \brief Doorbell for DMA read channel  $i   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_DOORBELL_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_DOORBELL;

/** \brief Error status for DMA read channel  $i   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS;

/** \brief Higher error status for DMA read channel  $i   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_HIGH;

/** \brief Interrupt clear for DMA read channel  $i   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_CLEAR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_CLEAR;

/** \brief Interrupt status for DMA read channel  $i   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_STATUS;

/** \brief DMA Read Channel Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_CONTROL1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_CONTROL1;

/** \brief DMA Read DAR High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_HIGH;

/** \brief DMA Read DAR Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_LOW;

/** \brief DMA Read Linked List Pointer High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_HIGH;

/** \brief DMA Read Linked List Pointer Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_LOW;

/** \brief DMA Read SAR High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_HIGH;

/** \brief DMA Read SAR Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_LOW;

/** \brief DMA Read Transfer Size Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_READ_TRANSFER_SIZE_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_READ_TRANSFER_SIZE;

/** \brief Doorbell for DMA write channel  $i   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_DOORBELL_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_DOORBELL;

/** \brief Error status for DMA write channel  $i   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_ERR_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_ERR_STATUS;

/** \brief Interrupt clear for DMA write channel  $i   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_CLEAR_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_CLEAR;

/** \brief Interrupt status for DMA write channel  $i   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_STATUS;

/** \brief DMA Write Channel Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_CONTROL1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_CONTROL1;

/** \brief DMA Write DAR High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_HIGH;

/** \brief DMA Write DAR Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_LOW;

/** \brief DMA Write Linked List Pointer High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_HIGH;

/** \brief DMA Write Linked List Pointer Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_LOW;

/** \brief DMA Write SAR High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_HIGH;

/** \brief DMA Write SAR Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_LOW;

/** \brief DMA Write Transfer Size Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_CH_WRITE_TRANSFER_SIZE_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_CH_WRITE_TRANSFER_SIZE;

/** \brief DMA Arbitration Scheme for TRGT1 Interface   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_CTRL_DATA_ARB_PRIOR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_CTRL_DATA_ARB_PRIOR_OFF;

/** \brief DMA Number of Channels Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_CTRL_OFF;

/** \brief DMA Read Abort IMWr Address High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_HIGH_OFF;

/** \brief DMA Read Abort IMWr Address Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_LOW_OFF;

/** \brief DMA Read Channel 1 and 0 IMWr Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_CH01_IMWR_DATA_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_CH01_IMWR_DATA_OFF;

/** \brief DMA Read Channel 3 and 2 IMWr Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_CH23_IMWR_DATA_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_CH23_IMWR_DATA_OFF;

/** \brief DMA Read Engine Channel Arbitration Weight Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_CHANNEL_ARB_WEIGHT_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_CHANNEL_ARB_WEIGHT_LOW_OFF;

/** \brief DMA Read Done IMWr Address High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_HIGH_OFF;

/** \brief DMA Read Done IMWr Address Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_LOW_OFF;

/** \brief DMA Read Doorbell Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_DOORBELL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_DOORBELL_OFF;

/** \brief DMA Read Engine Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_EN_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_EN_OFF;

/** \brief DMA Read Engine Handshake Counter Channel 0/1/2/3 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_HSHAKE_CNT_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_HSHAKE_CNT_LOW_OFF;

/** \brief DMA Read Error Status High Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_HIGH_OFF;

/** \brief DMA Read Error Status Low Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_LOW_OFF;

/** \brief DMA Read Interrupt Clear Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_CLEAR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_CLEAR_OFF;

/** \brief DMA Read Interrupt Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_MASK_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_MASK_OFF;

/** \brief DMA Read Interrupt Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_STATUS_OFF;

/** \brief DMA Read Linked List Error Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_READ_LINKED_LIST_ERR_EN_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_READ_LINKED_LIST_ERR_EN_OFF;

/** \brief DMA Write Abort IMWr Address High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_HIGH_OFF;

/** \brief DMA Write Abort IMWr Address Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_LOW_OFF;

/** \brief DMA Write Channel 1 and 0 IMWr Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH01_IMWR_DATA_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH01_IMWR_DATA_OFF;

/** \brief DMA Write Channel 3 and 2 IMWr Data Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH23_IMWR_DATA_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH23_IMWR_DATA_OFF;

/** \brief DMA Write Engine Channel Arbitration Weight Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CHANNEL_ARB_WEIGHT_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CHANNEL_ARB_WEIGHT_LOW_OFF;

/** \brief DMA Write Done IMWr Interrupt Address High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_HIGH_OFF;

/** \brief DMA Write Done IMWr Address Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_LOW_OFF;

/** \brief DMA Write Doorbell Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DOORBELL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DOORBELL_OFF;

/** \brief DMA Write Engine Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_EN_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_EN_OFF;

/** \brief DMA Write Engine Handshake Counter Channel 0/1/2/3 Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_HSHAKE_CNT_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_HSHAKE_CNT_LOW_OFF;

/** \brief DMA Write Error Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ERR_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ERR_STATUS_OFF;

/** \brief DMA Write Interrupt Clear Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_CLEAR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_CLEAR_OFF;

/** \brief DMA Write Interrupt Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_MASK_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_MASK_OFF;

/** \brief DMA Write Interrupt Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_STATUS_OFF;

/** \brief DMA Write Linked List Error Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_DMA_WRITE_LINKED_LIST_ERR_EN_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_DMA_WRITE_LINKED_LIST_ERR_EN_OFF;

/** \brief DMA Read Channel 0 Power Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH_CH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH_CH;

/** \brief DMA Write Channel 0 Power Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH_CH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH_CH;

/** \brief Error clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ERR_INTCLR_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ERR_INTCLR;

/** \brief Error enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ERR_INTEN_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ERR_INTEN;

/** \brief Error status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ERR_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ERR_STAT;

/** \brief Module identification register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_ID_Bits B;                /**< \brief Bitfield access */
} Ifx_PCIE_DSP_ID;

/** \brief Trigger INTX interrupt, EP only.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_INTXCTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_INTXCTRL;

/** \brief Request MSI interrupt, EP only.   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_MSICTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_MSICTRL;

/** \brief Pending status of MSI interrupt request, EP only.   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_MSISTAT_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_MSISTAT;

/** \brief Receive incoming interrupt request, EP only.   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_REQTRIG_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_REQTRIG;

/** \brief Interrupt clear, EP only.   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_TRIGCLR_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_TRIGCLR;

/** \brief Interrupt enable EP only.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_TRIGEN_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_TRIGEN;

/** \brief Trigger status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_INT_TRIGSTAT_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_INT_TRIGSTAT;

/** \brief L1 Substates Capability Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAPABILITY_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAPABILITY_REG;

/** \brief L1 Substates Extended Capability Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAP_HEADER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAP_HEADER_REG;

/** \brief L1 Substates Control 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL1_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL1_REG;

/** \brief L1 Substates Control 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL2_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL2_REG;

/** \brief DMA link list control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LLCTRL_Bits B;            /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LLCTRL;

/** \brief Controller control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LNK_CORECTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LNK_CORECTRL;

/** \brief Select device/port type   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LNK_DVCTYP_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LNK_DVCTYP;

/** \brief Enable the interrupt requests to SRC_PCIELNK   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LNK_INTEN_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LNK_INTEN;

/** \brief Indicate link status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LNK_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LNK_STAT;

/** \brief LTR control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LTR_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LTR_CTRL;

/** \brief LTR message   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_LTR_GNRTN_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_LTR_GNRTN;

/** \brief ELBI mailbox register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MAILBOX_DATA_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MAILBOX_DATA;

/** \brief Message information   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSG_INFO_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSG_INFO;

/** \brief Message payload information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSG_PAYLOAD_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSG_PAYLOAD;

/** \brief Message Address Register for MSI (Offset 04h)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_04H_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_04H_REG;

/** \brief Message Address Register for MSI (Offset 08h)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_08H_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_08H_REG;

/** \brief Message Address Register for MSI (Offset 0Ch)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_0CH_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_0CH_REG;

/** \brief Message Address Register for MSI (Offset 10h)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_10H_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_10H_REG;

/** \brief Message Address Register for MSI (Offset 14h)   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_14H_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_14H_REG;

/** \brief MSI Capability Header and Message Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSICAP_PCI_MSI_CAP_ID_NEXT_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSICAP_PCI_MSI_CAP_ID_NEXT_CTRL_REG;

/** \brief MSI-X Capability ID, Next Pointer, Control Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSIXCAPDBI_SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSIXCAPDBI_SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG;

/** \brief MSI-X PBA Offset and BIR Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSIXCAP_MSIX_PBA_OFFSET_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSIXCAP_MSIX_PBA_OFFSET_REG;

/** \brief MSI-X Table Offset and BIR Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSIXCAP_MSIX_TABLE_OFFSET_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSIXCAP_MSIX_TABLE_OFFSET_REG;

/** \brief MSI-X Capability ID, Next Pointer, Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSIXCAP_PCI_MSIX_CAP_ID_NEXT_CTRL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSIXCAP_PCI_MSIX_CAP_ID_NEXT_CTRL_REG;

/** \brief MSIX table DWORD   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_MSIXPBA_DWORD_Bits B;     /**< \brief Bitfield access */
} Ifx_PCIE_DSP_MSIXPBA_DWORD;

/** \brief OBFF message control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_OBFFMSG_Bits B;           /**< \brief Bitfield access */
} Ifx_PCIE_DSP_OBFFMSG;

/** \brief OBFF WAKE control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_OBFFWAKE_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_OBFFWAKE;

/** \brief OCDS control and status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
} Ifx_PCIE_DSP_OCS;

/** \brief PCIe OCDS Trigger Set Select   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_OTSS_Bits B;              /**< \brief Bitfield access */
} Ifx_PCIE_DSP_OTSS;

/** \brief Device Capabilities 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES2_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES2_REG;

/** \brief Device Capabilities Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES_REG;

/** \brief Device Control 2 and Status 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL2_DEVICE_STATUS2_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL2_DEVICE_STATUS2_REG;

/** \brief Device Control and Device Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL_DEVICE_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL_DEVICE_STATUS;

/** \brief Link Capabilities 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES2_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES2_REG;

/** \brief Link Capabilities Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES_REG;

/** \brief Link Control 2 and Status 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL2_LINK_STATUS2_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL2_LINK_STATUS2_REG;

/** \brief Link Control and Link Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL_LINK_STATUS_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL_LINK_STATUS_REG;

/** \brief PCI Express Capabilities, ID, Next Pointer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_PCIE_CAP_ID_PCIE_NEXT_CAP_PTR_PCIE_CAP_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_PCIE_CAP_ID_PCIE_NEXT_CAP_PTR_PCIE_CAP_REG;

/** \brief Root Control and Capabilities Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_ROOT_CONTROL_ROOT_CAPABILITIES_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_ROOT_CONTROL_ROOT_CAPABILITIES_REG;

/** \brief Root Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_ROOT_STATUS_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_ROOT_STATUS_REG;

/** \brief Slot Capabilities Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_SLOT_CAPABILITIES_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_SLOT_CAPABILITIES_REG;

/** \brief Slot Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PCIECAP_SLOT_CONTROL_SLOT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PCIECAP_SLOT_CONTROL_SLOT_STATUS;

/** \brief Power Management Capabilities Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PMCAP_CAP_ID_NXT_PTR_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PMCAP_CAP_ID_NXT_PTR_REG;

/** \brief Power Management Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PMCAP_CON_STATUS_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PMCAP_CON_STATUS_REG;

/** \brief Power management control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PM_CTRL_Bits B;           /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PM_CTRL;

/** \brief Power management interrupt clear   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PM_INTCLR_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PM_INTCLR;

/** \brief Power management  interrupt enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PM_INTEN_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PM_INTEN;

/** \brief Power management status 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PM_STAT0_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PM_STAT0;

/** \brief Power management status 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PM_STAT1_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PM_STAT1;

/** \brief Ack Frequency and L0-L1 ASPM Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_ACK_F_ASPM_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_ACK_F_ASPM_CTRL_OFF;

/** \brief Ack Latency Timer and Replay Timer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_ACK_LATENCY_TIMER_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_ACK_LATENCY_TIMER_OFF;

/** \brief AXI Bridge Slave Error Response Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_AMBA_ERROR_RESPONSE_DEFAULT_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_AMBA_ERROR_RESPONSE_DEFAULT_OFF;

/** \brief Link Down AXI Bridge Slave Timeout Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_AMBA_LINK_TIMEOUT_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_AMBA_LINK_TIMEOUT_OFF;

/** \brief AXI Bridge Ordering Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_AMBA_ORDERING_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_AMBA_ORDERING_CTRL_OFF;

/** \brief Auxiliary Clock Frequency Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_AUX_CLK_FREQ_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_AUX_CLK_FREQ_OFF;

/** \brief Clock Gating Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_CLOCK_GATING_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_CLOCK_GATING_CTRL_OFF;

/** \brief Filter Mask 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_FILTER_MASK_2_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_FILTER_MASK_2_OFF;

/** \brief Link Width and Speed Change Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_GEN2_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_GEN2_CTRL_OFF;

/** \brief Gen3 EQ Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_CONTROL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_CONTROL_OFF;

/** \brief Gen3 EQ Direction Change Feedback Mode Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_FB_MODE_DIR_CHANGE_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_FB_MODE_DIR_CHANGE_OFF;

/** \brief Gen3 Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_GEN3_RELATED_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_GEN3_RELATED_OFF;

/** \brief Interface Timer Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_CONTROL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_CONTROL_OFF;

/** \brief Interface Timer Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_STATUS_OFF;

/** \brief Interface Timer Target Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_TARGET_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_TARGET_OFF;

/** \brief Lane Skew Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_LANE_SKEW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_LANE_SKEW_OFF;

/** \brief Link Reset Request Flush Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_LINK_FLUSH_CONTROL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_LINK_FLUSH_CONTROL_OFF;

/** \brief DBI Read-Only Write Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MISC_CONTROL_1_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MISC_CONTROL_1_OFF;

/** \brief MSIX Address Match High Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_HIGH_OFF;

/** \brief MSI-X Address Match Low Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_LOW_OFF;

/** \brief MSI-X Doorbell Register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSIX_DOORBELL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSIX_DOORBELL_OFF;

/** \brief Integrated MSI Reception Module Interrupt0 Enable Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_EN_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_EN;

/** \brief Integrated MSI Reception Module Interrupt0 Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_MASK_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_MASK;

/** \brief Integrated MSI Reception Module Interrupt0 Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_STATUS_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_STATUS;

/** \brief Integrated MSI Reception Module (iMRM) Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_ADDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_ADDR_OFF;

/** \brief Integrated MSI Reception Module Upper Address Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_UPPER_ADDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_UPPER_ADDR_OFF;

/** \brief Integrated MSI Reception Module General Purpose IO Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_MSI_MSI_GPIO_IO_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_MSI_GPIO_IO_OFF;

/** \brief Order Rule Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_ORDER_RULE_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_ORDER_RULE_CTRL_OFF;

/** \brief PCIe Controller IIP Release Version Number   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_NUMBER_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_NUMBER_OFF;

/** \brief PCIe Controller IIP Release Version Type   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_TYPE_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_TYPE_OFF;

/** \brief PIPE Loopback Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PIPE_LOOPBACK_CONTROL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PIPE_LOOPBACK_CONTROL_OFF;

/** \brief Application driven bus and device number register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_APP_BUS_DEV_NUM_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_APP_BUS_DEV_NUM_STATUS_OFF;

/** \brief CDM Register Checking Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_CONTROL_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_CONTROL_STATUS_OFF;

/** \brief CDM Register Checking Error Address   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_ADDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_ADDR_OFF;

/** \brief CDM Register Checking error PF Numbers   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_PF_VF_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_PF_VF_OFF;

/** \brief CDM Register Checking First and Last address to check   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_START_END_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_START_END_OFF;

/** \brief Debug Register 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG0_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG0_OFF;

/** \brief Debug Register 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG1_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG1_OFF;

/** \brief LTR Latency Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PL_LTR_LATENCY_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PL_LTR_LATENCY_OFF;

/** \brief Port Force Link Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PORT_FORCE_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PORT_FORCE_OFF;

/** \brief Port Link Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_PORT_LINK_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_PORT_LINK_CTRL_OFF;

/** \brief Powerdown Control and Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_POWERDOWN_CTRL_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_POWERDOWN_CTRL_STATUS_OFF;

/** \brief Queue Status   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_QUEUE_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_QUEUE_STATUS_OFF;

/** \brief Functional Safety Interrupt Events Mask Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_SAFETY_MASK_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_SAFETY_MASK_OFF;

/** \brief Status for functional safety interrupt events   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_SAFETY_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_SAFETY_STATUS_OFF;

/** \brief Symbol Timer Register and Filter Mask 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_SYMBOL_TIMER_FILTER_1_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_SYMBOL_TIMER_FILTER_1_OFF;

/** \brief Timer Control and Max Function Number Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_TIMER_CTRL_MAX_FUNC_NUM_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_TIMER_CTRL_MAX_FUNC_NUM_OFF;

/** \brief Transmit Completion FC Credit Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_TX_CPL_FC_CREDIT_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_TX_CPL_FC_CREDIT_STATUS_OFF;

/** \brief Transmit Non-Posted FC Credit Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_TX_NP_FC_CREDIT_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_TX_NP_FC_CREDIT_STATUS_OFF;

/** \brief Transmit Posted FC Credit Status   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_TX_P_FC_CREDIT_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_TX_P_FC_CREDIT_STATUS_OFF;

/** \brief Segmented-Buffer VC0 Completion Receive Queue Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_VC0_CPL_RX_Q_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_VC0_CPL_RX_Q_CTRL_OFF;

/** \brief Segmented-Buffer VC0 Non-Posted Receive Queue Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_VC0_NP_RX_Q_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_VC0_NP_RX_Q_CTRL_OFF;

/** \brief Segmented-Buffer VC0 Posted Receive Queue Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_VC0_P_RX_Q_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_VC0_P_RX_Q_CTRL_OFF;

/** \brief Vendor Specific DLLP Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PORTLOGIC_VENDOR_SPEC_DLLP_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PORTLOGIC_VENDOR_SPEC_DLLP_OFF;

/** \brief Resource protection register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PROT_Bits B;              /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PROT;

/** \brief PTM Capability Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMCAP_PTM_CAP_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMCAP_PTM_CAP_OFF;

/** \brief PTM Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMCAP_PTM_CONTROL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMCAP_PTM_CONTROL_OFF;

/** \brief Precision Time Measurement Capability Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMCAP_PTM_EXT_CAP_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMCAP_PTM_EXT_CAP_HDR_OFF;

/** \brief Precision Time Measurement Responder Capability Header (VSEC)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CAP_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CAP_HDR_OFF;

/** \brief PTM Responder Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CONTROL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CONTROL_OFF;

/** \brief Precision Time Measurement Responder Vendor Specific Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_HDR_OFF;

/** \brief PTM Responder Latency Viewport Register Select   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LATENCY_REG_SEL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LATENCY_REG_SEL_OFF;

/** \brief PTM Responder Local Clock LSB   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_LSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_LSB_OFF;

/** \brief PTM Responder Local Clock MSB   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_MSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_MSB_OFF;

/** \brief PTM Responder Nominal Clock Period   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_NOM_CLOCK_T_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_NOM_CLOCK_T_OFF;

/** \brief PTM Responder RX Latency   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_RX_LATENCY_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_RX_LATENCY_OFF;

/** \brief PTM Responder Scaled Clock Period   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_SCALED_CLOCK_T_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_SCALED_CLOCK_T_OFF;

/** \brief PTM Responder Status Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_STATUS_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_STATUS_OFF;

/** \brief PTM Responder T2 Previous Timestamp LSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_LSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_LSB_OFF;

/** \brief PTM Responder T2 Previous Timestamp MSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_MSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_MSB_OFF;

/** \brief PTM Responder T2 Timestamp LSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_LSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_LSB_OFF;

/** \brief PTM Responder T2 Timestamp MSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_MSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_MSB_OFF;

/** \brief PTM Responder T3 Previous Timestamp LSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_LSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_LSB_OFF;

/** \brief PTM Responder T3 Previous Timestamp MSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_MSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_MSB_OFF;

/** \brief PTM Responder T3 Timestamp LSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_LSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_LSB_OFF;

/** \brief PTM Responder T3 Timestamp MSB   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_MSB_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_MSB_OFF;

/** \brief PTM Responder TX Latency   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_TX_LATENCY_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_TX_LATENCY_OFF;

/** \brief Clock correction   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTM_CLKCORR_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTM_CLKCORR;

/** \brief PTM control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTM_CTRL_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTM_CTRL;

/** \brief Local Clock value   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTM_LCLCLK_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTM_LCLCLK;

/** \brief PTM External Master Time   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_PTM_MSKCLK_Bits B;        /**< \brief Bitfield access */
} Ifx_PCIE_DSP_PTM_MSKCLK;

/** \brief Error Injection Control 0 (CRC Error)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ0_CRC_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ0_CRC_REG;

/** \brief Error Injection Control 1 (Sequence Number Error).<br>   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ1_SEQNUM_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ1_SEQNUM_REG;

/** \brief Error Injection Control 2 (DLLP Error)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ2_DLLP_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ2_DLLP_REG;

/** \brief Error Injection Control 3 (Symbol Error)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ3_SYMBOL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ3_SYMBOL_REG;

/** \brief Error Injection Control 4 (FC Credit Error)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ4_FC_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ4_FC_REG;

/** \brief Error Injection Control 5 (Specific TLP Error)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ5_SP_TLP_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ5_SP_TLP_REG;

/** \brief Error Injection Control 6 (Change Point Header DWORD #0)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_POINTH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_POINTH;

/** \brief Error Injection Control 6 (Change Value Header DWORD #0)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_VALUEH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_VALUEH;

/** \brief Error Injection Control 6 (Compare Point Header DWORD #0)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_POINTH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_POINTH;

/** \brief Error Injection Control 6 (Compare Value Header DWORD #0)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_VALUEH_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_VALUEH;

/** \brief Error Injection Control 6 (Packet Error)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ6_EINJ6_TLP_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_EINJ6_TLP_REG;

/** \brief Error Injection Enable   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EINJ_ENABLE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EINJ_ENABLE_REG;

/** \brief Event Counter Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_CONTROL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_CONTROL_REG;

/** \brief Event Counter Data   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_DATA_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_DATA_REG;

/** \brief Vendor-Specific Extended Capability Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_RAS_DES_CAP_HEADER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_RAS_DES_CAP_HEADER_REG;

/** \brief Silicon Debug EQ Control 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL1;

/** \brief Silicon Debug EQ Control 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL2_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL2;

/** \brief Silicon Debug EQ Control 3   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL3_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL3;

/** \brief Silicon Debug EQ Status 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS1;

/** \brief Silicon Debug EQ Status 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS2_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS2;

/** \brief Silicon Debug EQ Status 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS3_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS3;

/** \brief Silicon Debug Control 1   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL1_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL1_REG;

/** \brief Silicon Debug Control 2   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL2_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL2_REG;

/** \brief Silicon Debug Status(Layer1 Per-lane)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1LANE_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1LANE;

/** \brief Silicon Debug Status(Layer1 LTSSM)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1TSSM_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1TSSM;

/** \brief Silicon Debug Status(Layer2)   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L2REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L2REG;

/** \brief Silicon Debug Status(Layer3 FC)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3L3FC_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3L3FC;

/** \brief Silicon Debug Status(Layer3)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3REG;

/** \brief Silicon Debug Status(PM)   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_PMREG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_PMREG;

/** \brief Time-based Analysis Control   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_CONTROL_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_CONTROL_REG;

/** \brief Upper 32 bits of Time-based Analysis Data   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_63_32_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_63_32_REG;

/** \brief Time-based Analysis Data   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_REG;

/** \brief Vendor-Specific Header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RASDESCAP_VENDOR_SPECIFIC_HEADER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RASDESCAP_VENDOR_SPECIFIC_HEADER_REG;

/** \brief Reset control register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RST_CTRLA_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RST_CTRLA;

/** \brief Reset control register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RST_CTRLB_Bits B;         /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RST_CTRLB;

/** \brief Reset status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_RST_STAT_Bits B;          /**< \brief Bitfield access */
} Ifx_PCIE_DSP_RST_STAT;

/** \brief Serial Number 1 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_1_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_1;

/** \brief Serial Number 2 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_2_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_2;

/** \brief Device Serial Number Extended Capability Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SNCAP_SN_BASE_Bits B;     /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SNCAP_SN_BASE;

/** \brief Lane Error Status Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SPCIECAP_LANE_ERR_STATUS_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SPCIECAP_LANE_ERR_STATUS_REG;

/** \brief Link Control 3 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SPCIECAP_LINK_CONTROL3_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SPCIECAP_LINK_CONTROL3_REG;

/** \brief SPCIE Capability Header   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_HEADER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_HEADER_REG;

/** \brief Lane Equalization Control Register for lanes 1 and 0   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_OFF_0CH_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_OFF_0CH_REG;

/** \brief Rx control   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TXRX_RXCTRL_Bits B;       /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TXRX_RXCTRL;

/** \brief Tx control 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TXRX_TXCTRL0_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TXRX_TXCTRL0;

/** \brief BAR0 Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_BAR_Bits B;      /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_BAR;

/** \brief Bridge Control, Interrupt Pin, and Interrupt Line Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_BRIDGE_CTRL_INT_PIN_INT_LINE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_BRIDGE_CTRL_INT_PIN_INT_LINE_REG;

/** \brief I/O Limit and Base Upper 16 Bits Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_IO_LIMIT_UPPER_IO_BASE_UPPER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_IO_LIMIT_UPPER_IO_BASE_UPPER_REG;

/** \brief Memory Limit and Base Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_MEM_LIMIT_MEM_BASE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_MEM_LIMIT_MEM_BASE_REG;

/** \brief Prefetchable Base Upper 32 Bits Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_PREF_BASE_UPPER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_PREF_BASE_UPPER_REG;

/** \brief Prefetchable Limit Upper 32 Bits Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_PREF_LIMIT_UPPER_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_PREF_LIMIT_UPPER_REG;

/** \brief Prefetchable Memory Limit and Base Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_PREF_MEM_LIMIT_PREF_MEM_BASE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_PREF_MEM_LIMIT_PREF_MEM_BASE_REG;

/** \brief Secondary Latency Timer, Subordinate Bus Number, Secondary Bus Number, and  Primary Bus Number Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_SEC_LAT_TIMER_SUB_BUS_SEC_BUS_PRI_BUS_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_SEC_LAT_TIMER_SUB_BUS_SEC_BUS_PRI_BUS_REG;

/** \brief Secondary Status, and I/O Limit and Base Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_SEC_STAT_IO_LIMIT_IO_BASE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_SEC_STAT_IO_LIMIT_IO_BASE_REG;

/** \brief BIST, Header Type, Latency Timer, and Cache Line Size Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_TYPE1_BIST_HDR_TYPE_LAT_CACHE_LINE_SIZE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_BIST_HDR_TYPE_LAT_CACHE_LINE_SIZE_REG;

/** \brief Capabilities Pointer Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CAP_PTR_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CAP_PTR_REG;

/** \brief Class Code and Revision ID Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CLASS_CODE_REV_ID_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CLASS_CODE_REV_ID_REG;

/** \brief Device ID and Vendor ID Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_TYPE1_DEV_ID_VEND_ID_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_DEV_ID_VEND_ID_REG;

/** \brief Expansion ROM BAR Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_TYPE1_EXP_ROM_BASE_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_EXP_ROM_BASE_REG;

/** \brief Status and Command Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_TYPE1HDR_TYPE1_STATUS_COMMAND_REG_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_TYPE1HDR_TYPE1_STATUS_COMMAND_REG;

/** \brief DMA and related AXI Bridge Implementation Information   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_DEVICE_INFORMATION_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_DEVICE_INFORMATION_OFF;

/** \brief PCIe Extended Capability ID, Capability Version, and Next Capability Offset Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_EXT_CAP_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_EXT_CAP_HDR_OFF;

/** \brief Number of Implemented Channels Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_NUM_CHAN_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_NUM_CHAN_OFF;

/** \brief DMA Register Map Start Address Offset High Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_HIGH_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_HIGH_OFF;

/** \brief DMA Register Map Start Address Offset Low Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_LOW_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_LOW_OFF;

/** \brief Vendor Specific Header Register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_VENDOR_SPECIFIC_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_VENDOR_SPECIFIC_HDR_OFF;

/** \brief RASDP Error Mode Clear Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_CLEAR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_CLEAR_OFF;

/** \brief RASDP error mode enable.   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_EN_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_EN_OFF;

/** \brief ECC Error Correction and Control Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_PROT_CTRL_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_PROT_CTRL_OFF;

/** \brief PCIe Extended capability ID, Capability version and Next capability offset   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_EXT_CAP_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_EXT_CAP_HDR_OFF;

/** \brief RAM Address where a corrected error (1-bit ECC) is detected   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_CORR_ERROR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_CORR_ERROR_OFF;

/** \brief RAM Address where an uncorrected error (2-bit ECC) is detected   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_UNCORR_ERROR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_UNCORR_ERROR_OFF;

/** \brief Vendor Specific Header   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_PCIE_DSP_VSECRASCAP_RASDP_VENDOR_SPECIFIC_HDR_OFF_Bits B;    /**< \brief Bitfield access */
} Ifx_PCIE_DSP_VSECRASCAP_RASDP_VENDOR_SPECIFIC_HDR_OFF;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief RST object */
typedef volatile struct _Ifx_PCIE_DSP_RST
{
       __IO Ifx_PCIE_DSP_RST_CTRLA              CTRLA;                  /**< \brief 0, Reset control register A*/
       __IO Ifx_PCIE_DSP_RST_CTRLB              CTRLB;                  /**< \brief 4, Reset control register B*/
       __I  Ifx_PCIE_DSP_RST_STAT               STAT;                   /**< \brief 8, Reset status register*/
} Ifx_PCIE_DSP_RST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PCIE_DSP_ACCEN
{
       __IO Ifx_PCIE_DSP_ACCEN_WRA              WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PCIE_DSP_ACCEN_WRB_FPI          WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PCIE_DSP_ACCEN_RDA              RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PCIE_DSP_ACCEN_RDB_FPI          RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PCIE_DSP_ACCEN_VM               VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PCIE_DSP_ACCEN_PRS              PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_PCIE_DSP_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMA_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DMA_ACCEN object */
typedef volatile struct _Ifx_PCIE_DSP_DMA_ACCEN
{
       __IO Ifx_PCIE_DSP_ACCEN_WRA              WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PCIE_DSP_ACCEN_WRB_FPI          WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PCIE_DSP_ACCEN_RDA              RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PCIE_DSP_ACCEN_RDB_FPI          RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PCIE_DSP_ACCEN_VM               VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PCIE_DSP_ACCEN_PRS              PRS;                    /**< \brief 14, PRS access enable register*/
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
} Ifx_PCIE_DSP_DMA_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_INT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief INT object */
typedef volatile struct _Ifx_PCIE_DSP_INT
{
       __O  Ifx_PCIE_DSP_INT_MSICTRL            MSICTRL;                /**< \brief 0, Request MSI interrupt, EP only.*/
       __I  Ifx_PCIE_DSP_INT_MSISTAT            MSISTAT;                /**< \brief 4, Pending status of MSI interrupt request, EP only.*/
       __IO Ifx_PCIE_DSP_INT_INTXCTRL           INTXCTRL;               /**< \brief 8, Trigger INTX interrupt, EP only.*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __I  Ifx_PCIE_DSP_INT_TRIGSTAT           TRIGSTAT;               /**< \brief 10, Trigger status*/
       __O  Ifx_PCIE_DSP_INT_TRIGCLR            TRIGCLR;                /**< \brief 14, Interrupt clear, EP only.*/
       __IO Ifx_PCIE_DSP_INT_TRIGEN             TRIGEN;                 /**< \brief 18, Interrupt enable EP only.*/
       __I  Ifx_PCIE_DSP_INT_REQTRIG            REQTRIG;                /**< \brief 1C, Receive incoming interrupt request, EP only.*/
} Ifx_PCIE_DSP_INT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_CFG_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CFG object */
typedef volatile struct _Ifx_PCIE_DSP_CFG
{
       __IO Ifx_PCIE_DSP_CFG_INFO               INFO;                   /**< \brief 0, Configuration information*/
       __I  Ifx_PCIE_DSP_CFG_BUSNUM             BUSNUM;                 /**< \brief 4, Bus/device number*/
} Ifx_PCIE_DSP_CFG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_LNK_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief LNK object */
typedef volatile struct _Ifx_PCIE_DSP_LNK
{
       __IO Ifx_PCIE_DSP_LNK_DVCTYP             DVCTYP;                 /**< \brief 0, Select device/port type*/
       __I  Ifx_PCIE_DSP_LNK_STAT               STAT;                   /**< \brief 4, Indicate link status*/
       __IO Ifx_PCIE_DSP_LNK_CORECTRL           CORECTRL;               /**< \brief 8, Controller control*/
       __IO Ifx_PCIE_DSP_LNK_INTEN              INTEN;                  /**< \brief C, Enable the interrupt requests to SRC_PCIELNK*/
} Ifx_PCIE_DSP_LNK;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_TXRX_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief TXRX object */
typedef volatile struct _Ifx_PCIE_DSP_TXRX
{
       __I  Ifx_PCIE_DSP_TXRX_RXCTRL            RXCTRL;                 /**< \brief 0, Rx control*/
       __I  Ifx_PCIE_DSP_TXRX_TXCTRL0           TXCTRL0;                /**< \brief 4, Tx control 0*/
} Ifx_PCIE_DSP_TXRX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_MSG_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MSG object */
typedef volatile struct _Ifx_PCIE_DSP_MSG
{
       __I  Ifx_PCIE_DSP_MSG_PAYLOAD            PAYLOAD[2];             /**< \brief 0, Message payload information*/
       __IO Ifx_PCIE_DSP_MSG_INFO               INFO;                   /**< \brief 8, Message information*/
} Ifx_PCIE_DSP_MSG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PM object */
typedef volatile struct _Ifx_PCIE_DSP_PM
{
       __IO Ifx_PCIE_DSP_PM_CTRL                CTRL;                   /**< \brief 0, Power management control*/
       __I  Ifx_PCIE_DSP_PM_STAT0               STAT0;                  /**< \brief 4, Power management status 0*/
       __I  Ifx_UReg_8Bit                       reserved_8[4];          /**< \brief 8, \internal Reserved */
       __I  Ifx_PCIE_DSP_PM_STAT1               STAT1;                  /**< \brief C, Power management status 1*/
       __O  Ifx_PCIE_DSP_PM_INTCLR              INTCLR;                 /**< \brief 10, Power management interrupt clear*/
       __IO Ifx_PCIE_DSP_PM_INTEN               INTEN;                  /**< \brief 14, Power management  interrupt enable*/
} Ifx_PCIE_DSP_PM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_ERR_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ERR object */
typedef volatile struct _Ifx_PCIE_DSP_ERR
{
       __I  Ifx_PCIE_DSP_ERR_STAT               STAT;                   /**< \brief 0, Error status*/
       __O  Ifx_PCIE_DSP_ERR_INTCLR             INTCLR;                 /**< \brief 4, Error clear*/
       __IO Ifx_PCIE_DSP_ERR_INTEN              INTEN;                  /**< \brief 8, Error enable*/
} Ifx_PCIE_DSP_ERR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DBG_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief DBG object */
typedef volatile struct _Ifx_PCIE_DSP_DBG
{
       __I  Ifx_PCIE_DSP_DBG_STAT               STAT;                   /**< \brief 0, Debug status*/
       __I  Ifx_PCIE_DSP_DBG_DATA               DATA;                   /**< \brief 4, Debug information*/
} Ifx_PCIE_DSP_DBG;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_LTR_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief LTR object */
typedef volatile struct _Ifx_PCIE_DSP_LTR
{
       __IO Ifx_PCIE_DSP_LTR_GNRTN              GNRTN;                  /**< \brief 0, LTR message*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_PCIE_DSP_LTR_CTRL               CTRL;                   /**< \brief 8, LTR control*/
} Ifx_PCIE_DSP_LTR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PTM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PTM object */
typedef volatile struct _Ifx_PCIE_DSP_PTM
{
       __IO Ifx_PCIE_DSP_PTM_CTRL               CTRL;                   /**< \brief 0, PTM control*/
       __I  Ifx_PCIE_DSP_PTM_LCLCLK             LCLCLK[2];              /**< \brief 4, Local Clock value*/
       __I  Ifx_PCIE_DSP_PTM_CLKCORR            CLKCORR[2];             /**< \brief C, Clock correction*/
       __IO Ifx_PCIE_DSP_PTM_MSKCLK             MSKCLK[2];              /**< \brief 14, PTM External Master Time*/
} Ifx_PCIE_DSP_PTM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_MAILBOX_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MAILBOX object */
typedef volatile struct _Ifx_PCIE_DSP_MAILBOX
{
       __IO Ifx_PCIE_DSP_MAILBOX_DATA           DATA[8];                /**< \brief 0, ELBI mailbox register*/
} Ifx_PCIE_DSP_MAILBOX;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_ALARM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ALARM object */
typedef volatile struct _Ifx_PCIE_DSP_ALARM
{
       __I  Ifx_PCIE_DSP_ALARM_STAT             STAT;                   /**< \brief 0, Interrupt/alarm status*/
       __O  Ifx_PCIE_DSP_ALARM_INTCLR           INTCLR;                 /**< \brief 4, Interrupt/alarm clear*/
       __IO Ifx_PCIE_DSP_ALARM_INTEN            INTEN;                  /**< \brief 8, Interrupt/alarm enable*/
} Ifx_PCIE_DSP_ALARM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_ATU_OUTBOUND_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief OUTBOUND object */
typedef volatile struct _Ifx_PCIE_DSP_ATU_OUTBOUND
{
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_1 REGION_CTRL_1;          /**< \brief 0, iATU Region Control 1 Register Outbound*/
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_REGION_CTRL_2 REGION_CTRL_2;          /**< \brief 4, iATU Region Control 2 Register Outbound*/
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_BASE_ADDR LWR_BASE_ADDR;          /**< \brief 8, iATU Lower Base Address Register Outbound*/
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_BASE_ADDR UPPER_BASE_ADDR;        /**< \brief C, iATU Upper Base Address Register Outbound*/
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_LIMIT_ADDR LIMIT_ADDR;             /**< \brief 10, iATU Limit Address Register Outbound*/
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_LWR_TARGET_ADD LWR_TARGET_ADD;         /**< \brief 14, iATU Lower Target Address Register Outbound*/
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND_UPPER_TARGET_ADDR UPPER_TARGET_ADDR;      /**< \brief 18, iATU Upper Target Address Register Outbound*/
} Ifx_PCIE_DSP_ATU_OUTBOUND;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_ATU_INBOUND_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief INBOUND object */
typedef volatile struct _Ifx_PCIE_DSP_ATU_INBOUND
{
       __IO Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_1 REGION_CTRL_1;          /**< \brief 0, iATU Region Control 1 Register Inbound*/
       __IO Ifx_PCIE_DSP_ATU_INBOUND_REGION_CTRL_2 REGION_CTRL_2;          /**< \brief 4, iATU Region Control 2 Register Inbound*/
       __IO Ifx_PCIE_DSP_ATU_INBOUND_LWR_BASE_ADDR LWR_BASE_ADDR;          /**< \brief 8, iATU Lower Base Address Register Inbound*/
       __IO Ifx_PCIE_DSP_ATU_INBOUND_UPPER_BASE_ADDR UPPER_BASE_ADDR;        /**< \brief C, iATU Upper Base Address Register Inbound*/
       __IO Ifx_PCIE_DSP_ATU_INBOUND_LIMIT_ADDR LIMIT_ADDR;             /**< \brief 10, iATU Limit Address Register Inbound*/
       __IO Ifx_PCIE_DSP_ATU_INBOUND_LWR_TARGET_ADD LWR_TARGET_ADD;         /**< \brief 14, iATU Lower Target Address Register Inbound*/
} Ifx_PCIE_DSP_ATU_INBOUND;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_ATU_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief ATU object */
typedef volatile struct _Ifx_PCIE_DSP_ATU
{
       __IO Ifx_PCIE_DSP_ATU_OUTBOUND           OUTBOUND;               /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_1C[228];       /**< \brief 1C, \internal Reserved */
       __IO Ifx_PCIE_DSP_ATU_INBOUND            INBOUND;                /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_118[232];      /**< \brief 118, \internal Reserved */
} Ifx_PCIE_DSP_ATU;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_TYPE1HDR_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief TYPE1HDR object */
typedef volatile struct _Ifx_PCIE_DSP_TYPE1HDR
{
       __IO Ifx_PCIE_DSP_TYPE1HDR_TYPE1_DEV_ID_VEND_ID_REG TYPE1_DEV_ID_VEND_ID_REG;    /**< \brief 0, Device ID and Vendor ID Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_TYPE1_STATUS_COMMAND_REG TYPE1_STATUS_COMMAND_REG;    /**< \brief 4, Status and Command Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CLASS_CODE_REV_ID_REG TYPE1_CLASS_CODE_REV_ID_REG;    /**< \brief 8, Class Code and Revision ID Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_TYPE1_BIST_HDR_TYPE_LAT_CACHE_LINE_SIZE_REG TYPE1_BIST_HDR_TYPE_LAT_CACHE_LINE_SIZE_REG;    /**< \brief C, BIST, Header Type, Latency Timer, and Cache Line Size Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_BAR           BAR[2];                 /**< \brief 10, BAR0 Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_SEC_LAT_TIMER_SUB_BUS_SEC_BUS_PRI_BUS_REG SEC_LAT_TIMER_SUB_BUS_SEC_BUS_PRI_BUS_REG;    /**< \brief 18, Secondary Latency Timer, Subordinate Bus Number, Secondary Bus Number, and  Primary Bus Number Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_SEC_STAT_IO_LIMIT_IO_BASE_REG SEC_STAT_IO_LIMIT_IO_BASE_REG;    /**< \brief 1C, Secondary Status, and I/O Limit and Base Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_MEM_LIMIT_MEM_BASE_REG MEM_LIMIT_MEM_BASE_REG;    /**< \brief 20, Memory Limit and Base Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_PREF_MEM_LIMIT_PREF_MEM_BASE_REG PREF_MEM_LIMIT_PREF_MEM_BASE_REG;    /**< \brief 24, Prefetchable Memory Limit and Base Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_PREF_BASE_UPPER_REG PREF_BASE_UPPER_REG;    /**< \brief 28, Prefetchable Base Upper 32 Bits Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_PREF_LIMIT_UPPER_REG PREF_LIMIT_UPPER_REG;    /**< \brief 2C, Prefetchable Limit Upper 32 Bits Register*/
       __I  Ifx_PCIE_DSP_TYPE1HDR_IO_LIMIT_UPPER_IO_BASE_UPPER_REG IO_LIMIT_UPPER_IO_BASE_UPPER_REG;    /**< \brief 30, I/O Limit and Base Upper 16 Bits Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_TYPE1_CAP_PTR_REG TYPE1_CAP_PTR_REG;      /**< \brief 34, Capabilities Pointer Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_TYPE1_EXP_ROM_BASE_REG TYPE1_EXP_ROM_BASE_REG;    /**< \brief 38, Expansion ROM BAR Register*/
       __IO Ifx_PCIE_DSP_TYPE1HDR_BRIDGE_CTRL_INT_PIN_INT_LINE_REG BRIDGE_CTRL_INT_PIN_INT_LINE_REG;    /**< \brief 3C, Bridge Control, Interrupt Pin, and Interrupt Line Register*/
} Ifx_PCIE_DSP_TYPE1HDR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PMCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PMCAP object */
typedef volatile struct _Ifx_PCIE_DSP_PMCAP
{
       __IO Ifx_PCIE_DSP_PMCAP_CAP_ID_NXT_PTR_REG CAP_ID_NXT_PTR_REG;     /**< \brief 0, Power Management Capabilities Register*/
       __IO Ifx_PCIE_DSP_PMCAP_CON_STATUS_REG   CON_STATUS_REG;         /**< \brief 4, Power Management Control and Status Register*/
} Ifx_PCIE_DSP_PMCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_MSICAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief MSICAP object */
typedef volatile struct _Ifx_PCIE_DSP_MSICAP
{
       __IO Ifx_PCIE_DSP_MSICAP_PCI_MSI_CAP_ID_NEXT_CTRL_REG PCI_MSI_CAP_ID_NEXT_CTRL_REG;    /**< \brief 0, MSI Capability Header and Message Control Register*/
       __IO Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_04H_REG MSI_CAP_OFF_04H_REG;    /**< \brief 4, Message Address Register for MSI (Offset 04h)*/
       __IO Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_08H_REG MSI_CAP_OFF_08H_REG;    /**< \brief 8, Message Address Register for MSI (Offset 08h)*/
       __IO Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_0CH_REG MSI_CAP_OFF_0CH_REG;    /**< \brief C, Message Address Register for MSI (Offset 0Ch)*/
       __IO Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_10H_REG MSI_CAP_OFF_10H_REG;    /**< \brief 10, Message Address Register for MSI (Offset 10h)*/
       __I  Ifx_PCIE_DSP_MSICAP_MSI_CAP_OFF_14H_REG MSI_CAP_OFF_14H_REG;    /**< \brief 14, Message Address Register for MSI (Offset 14h)*/
} Ifx_PCIE_DSP_MSICAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PCIECAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PCIECAP object */
typedef volatile struct _Ifx_PCIE_DSP_PCIECAP
{
       __IO Ifx_PCIE_DSP_PCIECAP_PCIE_CAP_ID_PCIE_NEXT_CAP_PTR_PCIE_CAP_REG PCIE_CAP_ID_PCIE_NEXT_CAP_PTR_PCIE_CAP_REG;    /**< \brief 0, PCI Express Capabilities, ID, Next Pointer Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES_REG DEVICE_CAPABILITIES_REG;    /**< \brief 4, Device Capabilities Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL_DEVICE_STATUS DEVICE_CONTROL_DEVICE_STATUS;    /**< \brief 8, Device Control and Device Status Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES_REG LINK_CAPABILITIES_REG;    /**< \brief C, Link Capabilities Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL_LINK_STATUS_REG LINK_CONTROL_LINK_STATUS_REG;    /**< \brief 10, Link Control and Link Status Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_SLOT_CAPABILITIES_REG SLOT_CAPABILITIES_REG;    /**< \brief 14, Slot Capabilities Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_SLOT_CONTROL_SLOT_STATUS SLOT_CONTROL_SLOT_STATUS;    /**< \brief 18, Slot Control and Status Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_ROOT_CONTROL_ROOT_CAPABILITIES_REG ROOT_CONTROL_ROOT_CAPABILITIES_REG;    /**< \brief 1C, Root Control and Capabilities Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_ROOT_STATUS_REG ROOT_STATUS_REG;        /**< \brief 20, Root Status Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_DEVICE_CAPABILITIES2_REG DEVICE_CAPABILITIES2_REG;    /**< \brief 24, Device Capabilities 2 Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_DEVICE_CONTROL2_DEVICE_STATUS2_REG DEVICE_CONTROL2_DEVICE_STATUS2_REG;    /**< \brief 28, Device Control 2 and Status 2 Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_LINK_CAPABILITIES2_REG LINK_CAPABILITIES2_REG;    /**< \brief 2C, Link Capabilities 2 Register*/
       __IO Ifx_PCIE_DSP_PCIECAP_LINK_CONTROL2_LINK_STATUS2_REG LINK_CONTROL2_LINK_STATUS2_REG;    /**< \brief 30, Link Control 2 and Status 2 Register*/
} Ifx_PCIE_DSP_PCIECAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_MSIXCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief MSIXCAP object */
typedef volatile struct _Ifx_PCIE_DSP_MSIXCAP
{
       __IO Ifx_PCIE_DSP_MSIXCAP_PCI_MSIX_CAP_ID_NEXT_CTRL_REG PCI_MSIX_CAP_ID_NEXT_CTRL_REG;    /**< \brief 0, MSI-X Capability ID, Next Pointer, Control Register*/
       __IO Ifx_PCIE_DSP_MSIXCAP_MSIX_TABLE_OFFSET_REG MSIX_TABLE_OFFSET_REG;    /**< \brief 4, MSI-X Table Offset and BIR Register*/
       __IO Ifx_PCIE_DSP_MSIXCAP_MSIX_PBA_OFFSET_REG MSIX_PBA_OFFSET_REG;    /**< \brief 8, MSI-X PBA Offset and BIR Register*/
} Ifx_PCIE_DSP_MSIXCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_AERCAP_UNCORR_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief UNCORR object */
typedef volatile struct _Ifx_PCIE_DSP_AERCAP_UNCORR
{
       __IO Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_STATUS ERR_STATUS;             /**< \brief 0, Uncorrectable Error Status Register*/
       __IO Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_MASK ERR_MASK;               /**< \brief 4, Uncorrectable Error Mask Register*/
       __IO Ifx_PCIE_DSP_AERCAP_UNCORR_ERR_SEV  ERR_SEV;                /**< \brief 8, Uncorrectable Error Severity Register*/
} Ifx_PCIE_DSP_AERCAP_UNCORR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_AERCAP_CORR_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CORR object */
typedef volatile struct _Ifx_PCIE_DSP_AERCAP_CORR
{
       __IO Ifx_PCIE_DSP_AERCAP_CORR_ERR_STATUS ERR_STATUS;             /**< \brief 0, Correctable Error Status Register*/
       __IO Ifx_PCIE_DSP_AERCAP_CORR_ERR_MASK   ERR_MASK;               /**< \brief 4, Correctable Error Mask Register*/
} Ifx_PCIE_DSP_AERCAP_CORR;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_AERCAP_ROOT_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ROOT object */
typedef volatile struct _Ifx_PCIE_DSP_AERCAP_ROOT
{
       __IO Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_CMD_OFF ROOT_ERR_CMD_OFF;       /**< \brief 0, Root Error Command Register*/
       __IO Ifx_PCIE_DSP_AERCAP_ROOT_ROOT_ERR_STATUS_OFF ROOT_ERR_STATUS_OFF;    /**< \brief 4, Root Error Status Register*/
} Ifx_PCIE_DSP_AERCAP_ROOT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_AERCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief AERCAP object */
typedef volatile struct _Ifx_PCIE_DSP_AERCAP
{
       __IO Ifx_PCIE_DSP_AERCAP_AER_EXT_CAP_HDR_OFF AER_EXT_CAP_HDR_OFF;    /**< \brief 0, Advanced Error Reporting Extended Capability Header*/
       __IO Ifx_PCIE_DSP_AERCAP_UNCORR          UNCORR;                 /**< \brief 4, */
       __IO Ifx_PCIE_DSP_AERCAP_CORR            CORR;                   /**< \brief 10, */
       __IO Ifx_PCIE_DSP_AERCAP_ERR_CAP_CTRL    ERR_CAP_CTRL;           /**< \brief 18, Advanced Error Capabilities and Control Register*/
       __I  Ifx_PCIE_DSP_AERCAP_HDR_LOG         HDR_LOG[4];             /**< \brief 1C, Header Log Register 0*/
       __IO Ifx_PCIE_DSP_AERCAP_ROOT            ROOT;                   /**< \brief 2C, */
       __I  Ifx_PCIE_DSP_AERCAP_ERR_SRC_ID_OFF  ERR_SRC_ID_OFF;         /**< \brief 34, Error Source Identification Register*/
       __I  Ifx_PCIE_DSP_AERCAP_TLP_PREFIX_LOG  TLP_PREFIX_LOG[4];      /**< \brief 38, TLP Prefix Log Register 1*/
} Ifx_PCIE_DSP_AERCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_SNCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SNCAP object */
typedef volatile struct _Ifx_PCIE_DSP_SNCAP
{
       __IO Ifx_PCIE_DSP_SNCAP_SN_BASE          SN_BASE;                /**< \brief 0, Device Serial Number Extended Capability Header*/
       __IO Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_1 SER_NUM_REG_DW_1;       /**< \brief 4, Serial Number 1 Register*/
       __IO Ifx_PCIE_DSP_SNCAP_SER_NUM_REG_DW_2 SER_NUM_REG_DW_2;       /**< \brief 8, Serial Number 2 Register*/
} Ifx_PCIE_DSP_SNCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_SPCIECAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief SPCIECAP object */
typedef volatile struct _Ifx_PCIE_DSP_SPCIECAP
{
       __IO Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_HEADER_REG SPCIE_CAP_HEADER_REG;    /**< \brief 0, SPCIE Capability Header*/
       __IO Ifx_PCIE_DSP_SPCIECAP_LINK_CONTROL3_REG LINK_CONTROL3_REG;      /**< \brief 4, Link Control 3 Register*/
       __IO Ifx_PCIE_DSP_SPCIECAP_LANE_ERR_STATUS_REG LANE_ERR_STATUS_REG;    /**< \brief 8, Lane Error Status Register*/
       __IO Ifx_PCIE_DSP_SPCIECAP_SPCIE_CAP_OFF_0CH_REG SPCIE_CAP_OFF_0CH_REG;    /**< \brief C, Lane Equalization Control Register for lanes 1 and 0*/
} Ifx_PCIE_DSP_SPCIECAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_L1SUBCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief L1SUBCAP object */
typedef volatile struct _Ifx_PCIE_DSP_L1SUBCAP
{
       __IO Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAP_HEADER_REG L1SUB_CAP_HEADER_REG;    /**< \brief 0, L1 Substates Extended Capability Header*/
       __IO Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CAPABILITY_REG L1SUB_CAPABILITY_REG;    /**< \brief 4, L1 Substates Capability Register*/
       __IO Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL1_REG L1SUB_CONTROL1_REG;     /**< \brief 8, L1 Substates Control 1 Register*/
       __IO Ifx_PCIE_DSP_L1SUBCAP_L1SUB_CONTROL2_REG L1SUB_CONTROL2_REG;     /**< \brief C, L1 Substates Control 2 Register*/
} Ifx_PCIE_DSP_L1SUBCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_EINJ6_COMPARE_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief COMPARE object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE
{
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_POINTH POINTH[4];              /**< \brief 0, Error Injection Control 6 (Compare Point Header DWORD #0)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE_VALUEH VALUEH[4];              /**< \brief 10, Error Injection Control 6 (Compare Value Header DWORD #0)*/
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_EINJ6_CHANGE_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CHANGE object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE
{
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_POINTH POINTH[4];              /**< \brief 0, Error Injection Control 6 (Change Point Header DWORD #0)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE_VALUEH VALUEH[4];              /**< \brief 10, Error Injection Control 6 (Change Value Header DWORD #0)*/
} Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_EINJ6_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief EINJ6 object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP_EINJ6
{
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_COMPARE COMPARE;                /**< \brief 0, */
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_CHANGE CHANGE;                 /**< \brief 20, */
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6_EINJ6_TLP_REG EINJ6_TLP_REG;          /**< \brief 40, Error Injection Control 6 (Packet Error)*/
} Ifx_PCIE_DSP_RASDESCAP_EINJ6;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_SD_STATUS_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief STATUS object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP_SD_STATUS
{
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1LANE L1LANE;                 /**< \brief 0, Silicon Debug Status(Layer1 Per-lane)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L1TSSM L1TSSM;                 /**< \brief 4, Silicon Debug Status(Layer1 LTSSM)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_PMREG PMREG;                  /**< \brief 8, Silicon Debug Status(PM)*/
       __I  Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L2REG L2REG;                  /**< \brief C, Silicon Debug Status(Layer2)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3L3FC L3L3FC;                 /**< \brief 10, Silicon Debug Status(Layer3 FC)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_STATUS_L3REG L3REG;                  /**< \brief 14, Silicon Debug Status(Layer3)*/
} Ifx_PCIE_DSP_RASDESCAP_SD_STATUS;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_SD_EQ_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief EQ object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP_SD_EQ
{
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL1 CONTROL1;               /**< \brief 0, Silicon Debug EQ Control 1*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL2 CONTROL2;               /**< \brief 4, Silicon Debug EQ Control 2*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_EQ_CONTROL3 CONTROL3;               /**< \brief 8, Silicon Debug EQ Control 3*/
       __I  Ifx_UReg_8Bit                       reserved_C[4];          /**< \brief C, \internal Reserved */
       __I  Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS1 STATUS1;                /**< \brief 10, Silicon Debug EQ Status 1*/
       __I  Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS2 STATUS2;                /**< \brief 14, Silicon Debug EQ Status 2*/
       __I  Ifx_PCIE_DSP_RASDESCAP_SD_EQ_STATUS3 STATUS3;                /**< \brief 18, Silicon Debug EQ Status 3*/
} Ifx_PCIE_DSP_RASDESCAP_SD_EQ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_SD_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief SD object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP_SD
{
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL1_REG SD_CONTROL1_REG;        /**< \brief 0, Silicon Debug Control 1*/
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_SD_CONTROL2_REG SD_CONTROL2_REG;        /**< \brief 4, Silicon Debug Control 2*/
       __I  Ifx_UReg_8Bit                       reserved_8[8];          /**< \brief 8, \internal Reserved */
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_STATUS    STATUS;                 /**< \brief 10, */
       __I  Ifx_UReg_8Bit                       reserved_28[8];         /**< \brief 28, \internal Reserved */
       __IO Ifx_PCIE_DSP_RASDESCAP_SD_EQ        EQ;                     /**< \brief 30, */
} Ifx_PCIE_DSP_RASDESCAP_SD;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_RASDESCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief RASDESCAP object */
typedef volatile struct _Ifx_PCIE_DSP_RASDESCAP
{
       __IO Ifx_PCIE_DSP_RASDESCAP_RAS_DES_CAP_HEADER_REG RAS_DES_CAP_HEADER_REG;    /**< \brief 0, Vendor-Specific Extended Capability Header*/
       __I  Ifx_PCIE_DSP_RASDESCAP_VENDOR_SPECIFIC_HEADER_REG VENDOR_SPECIFIC_HEADER_REG;    /**< \brief 4, Vendor-Specific Header*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_CONTROL_REG EVENT_COUNTER_CONTROL_REG;    /**< \brief 8, Event Counter Control*/
       __I  Ifx_PCIE_DSP_RASDESCAP_EVENT_COUNTER_DATA_REG EVENT_COUNTER_DATA_REG;    /**< \brief C, Event Counter Data*/
       __IO Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_CONTROL_REG TIME_BASED_ANALYSIS_CONTROL_REG;    /**< \brief 10, Time-based Analysis Control*/
       __I  Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_REG TIME_BASED_ANALYSIS_DATA_REG;    /**< \brief 14, Time-based Analysis Data*/
       __I  Ifx_PCIE_DSP_RASDESCAP_TIME_BASED_ANALYSIS_DATA_63_32_REG TIME_BASED_ANALYSIS_DATA_63_32_REG;    /**< \brief 18, Upper 32 bits of Time-based Analysis Data*/
       __I  Ifx_UReg_8Bit                       reserved_1C[20];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ_ENABLE_REG EINJ_ENABLE_REG;        /**< \brief 30, Error Injection Enable*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ0_CRC_REG EINJ0_CRC_REG;          /**< \brief 34, Error Injection Control 0 (CRC Error)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ1_SEQNUM_REG EINJ1_SEQNUM_REG;       /**< \brief 38, Error Injection Control 1 (Sequence Number Error).<br>*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ2_DLLP_REG EINJ2_DLLP_REG;         /**< \brief 3C, Error Injection Control 2 (DLLP Error)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ3_SYMBOL_REG EINJ3_SYMBOL_REG;       /**< \brief 40, Error Injection Control 3 (Symbol Error)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ4_FC_REG EINJ4_FC_REG;           /**< \brief 44, Error Injection Control 4 (FC Credit Error)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ5_SP_TLP_REG EINJ5_SP_TLP_REG;       /**< \brief 48, Error Injection Control 5 (Specific TLP Error)*/
       __IO Ifx_PCIE_DSP_RASDESCAP_EINJ6        EINJ6;                  /**< \brief 4C, */
       __I  Ifx_UReg_8Bit                       reserved_90[16];        /**< \brief 90, \internal Reserved */
       __IO Ifx_PCIE_DSP_RASDESCAP_SD           SD;                     /**< \brief A0, */
} Ifx_PCIE_DSP_RASDESCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_VSECRASCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VSECRASCAP object */
typedef volatile struct _Ifx_PCIE_DSP_VSECRASCAP
{
       __IO Ifx_PCIE_DSP_VSECRASCAP_RASDP_EXT_CAP_HDR_OFF RASDP_EXT_CAP_HDR_OFF;    /**< \brief 0, PCIe Extended capability ID, Capability version and Next capability offset*/
       __I  Ifx_PCIE_DSP_VSECRASCAP_RASDP_VENDOR_SPECIFIC_HDR_OFF RASDP_VENDOR_SPECIFIC_HDR_OFF;    /**< \brief 4, Vendor Specific Header*/
       __IO Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_PROT_CTRL_OFF RASDP_ERROR_PROT_CTRL_OFF;    /**< \brief 8, ECC Error Correction and Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_C[28];         /**< \brief C, \internal Reserved */
       __IO Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_EN_OFF RASDP_ERROR_MODE_EN_OFF;    /**< \brief 28, RASDP error mode enable.*/
       __IO Ifx_PCIE_DSP_VSECRASCAP_RASDP_ERROR_MODE_CLEAR_OFF RASDP_ERROR_MODE_CLEAR_OFF;    /**< \brief 2C, RASDP Error Mode Clear Register*/
       __I  Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_CORR_ERROR_OFF RASDP_RAM_ADDR_CORR_ERROR_OFF;    /**< \brief 30, RAM Address where a corrected error (1-bit ECC) is detected*/
       __I  Ifx_PCIE_DSP_VSECRASCAP_RASDP_RAM_ADDR_UNCORR_ERROR_OFF RASDP_RAM_ADDR_UNCORR_ERROR_OFF;    /**< \brief 34, RAM Address where an uncorrected error (2-bit ECC) is detected*/
} Ifx_PCIE_DSP_VSECRASCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PTMCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PTMCAP object */
typedef volatile struct _Ifx_PCIE_DSP_PTMCAP
{
       __IO Ifx_PCIE_DSP_PTMCAP_PTM_EXT_CAP_HDR_OFF PTM_EXT_CAP_HDR_OFF;    /**< \brief 0, Precision Time Measurement Capability Header*/
       __IO Ifx_PCIE_DSP_PTMCAP_PTM_CAP_OFF     PTM_CAP_OFF;            /**< \brief 4, PTM Capability Register*/
       __IO Ifx_PCIE_DSP_PTMCAP_PTM_CONTROL_OFF PTM_CONTROL_OFF;        /**< \brief 8, PTM Control Register*/
} Ifx_PCIE_DSP_PTMCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PTMRESCAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PTMRESCAP object */
typedef volatile struct _Ifx_PCIE_DSP_PTMRESCAP
{
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CAP_HDR_OFF PTM_RES_CAP_HDR_OFF;    /**< \brief 0, Precision Time Measurement Responder Capability Header (VSEC)*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_HDR_OFF PTM_RES_HDR_OFF;        /**< \brief 4, Precision Time Measurement Responder Vendor Specific Header*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_CONTROL_OFF PTM_RES_CONTROL_OFF;    /**< \brief 8, PTM Responder Control Register*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_STATUS_OFF PTM_RES_STATUS_OFF;     /**< \brief C, PTM Responder Status Register*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_LSB_OFF PTM_RES_LOCAL_LSB_OFF;    /**< \brief 10, PTM Responder Local Clock LSB*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LOCAL_MSB_OFF PTM_RES_LOCAL_MSB_OFF;    /**< \brief 14, PTM Responder Local Clock MSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_LSB_OFF PTM_RES_T2_LSB_OFF;     /**< \brief 18, PTM Responder T2 Timestamp LSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2_MSB_OFF PTM_RES_T2_MSB_OFF;     /**< \brief 1C, PTM Responder T2 Timestamp MSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_LSB_OFF PTM_RES_T2P_LSB_OFF;    /**< \brief 20, PTM Responder T2 Previous Timestamp LSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T2P_MSB_OFF PTM_RES_T2P_MSB_OFF;    /**< \brief 24, PTM Responder T2 Previous Timestamp MSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_LSB_OFF PTM_RES_T3_LSB_OFF;     /**< \brief 28, PTM Responder T3 Timestamp LSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3_MSB_OFF PTM_RES_T3_MSB_OFF;     /**< \brief 2C, PTM Responder T3 Timestamp MSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_LSB_OFF PTM_RES_T3P_LSB_OFF;    /**< \brief 30, PTM Responder T3 Previous Timestamp LSB*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_T3P_MSB_OFF PTM_RES_T3P_MSB_OFF;    /**< \brief 34, PTM Responder T3 Previous Timestamp MSB*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_TX_LATENCY_OFF PTM_RES_TX_LATENCY_OFF;    /**< \brief 38, PTM Responder TX Latency*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_RX_LATENCY_OFF PTM_RES_RX_LATENCY_OFF;    /**< \brief 3C, PTM Responder RX Latency*/
       __I  Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_NOM_CLOCK_T_OFF PTM_RES_NOM_CLOCK_T_OFF;    /**< \brief 40, PTM Responder Nominal Clock Period*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_SCALED_CLOCK_T_OFF PTM_RES_SCALED_CLOCK_T_OFF;    /**< \brief 44, PTM Responder Scaled Clock Period*/
       __IO Ifx_PCIE_DSP_PTMRESCAP_PTM_RES_LATENCY_REG_SEL_OFF PTM_RES_LATENCY_REG_SEL_OFF;    /**< \brief 48, PTM Responder Latency Viewport Register Select*/
} Ifx_PCIE_DSP_PTMRESCAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_VSECDMACAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief VSECDMACAP object */
typedef volatile struct _Ifx_PCIE_DSP_VSECDMACAP
{
       __IO Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_EXT_CAP_HDR_OFF VSECDMA_EXT_CAP_HDR_OFF;    /**< \brief 0, PCIe Extended Capability ID, Capability Version, and Next Capability Offset Register*/
       __I  Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_VENDOR_SPECIFIC_HDR_OFF VSECDMA_VENDOR_SPECIFIC_HDR_OFF;    /**< \brief 4, Vendor Specific Header Register*/
       __I  Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_DEVICE_INFORMATION_OFF VSECDMA_DEVICE_INFORMATION_OFF;    /**< \brief 8, DMA and related AXI Bridge Implementation Information*/
       __I  Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_NUM_CHAN_OFF VSECDMA_NUM_CHAN_OFF;    /**< \brief C, Number of Implemented Channels Register*/
       __I  Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_LOW_OFF VSECDMA_UNROLL_ADDR_OFFSET_LOW_OFF;    /**< \brief 10, DMA Register Map Start Address Offset Low Register*/
       __I  Ifx_PCIE_DSP_VSECDMACAP_VSECDMA_UNROLL_ADDR_OFFSET_HIGH_OFF VSECDMA_UNROLL_ADDR_OFFSET_HIGH_OFF;    /**< \brief 14, DMA Register Map Start Address Offset High Register*/
} Ifx_PCIE_DSP_VSECDMACAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PORTLOGIC_MSI_CTRL_INT_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief INT object */
typedef volatile struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT
{
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_EN EN;                     /**< \brief 0, Integrated MSI Reception Module Interrupt0 Enable Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_MASK MASK;                   /**< \brief 4, Integrated MSI Reception Module Interrupt0 Mask Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT_STATUS STATUS;                 /**< \brief 8, Integrated MSI Reception Module Interrupt0 Status Register*/
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PORTLOGIC_MSI_CTRL_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief CTRL object */
typedef volatile struct _Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL
{
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_ADDR_OFF MSI_CTRL_ADDR_OFF;      /**< \brief 0, Integrated MSI Reception Module (iMRM) Address Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_MSI_CTRL_UPPER_ADDR_OFF MSI_CTRL_UPPER_ADDR_OFF;    /**< \brief 4, Integrated MSI Reception Module Upper Address Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL_INT INT[8];                 /**< \brief 8, */
} Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PORTLOGIC_MSI_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MSI object */
typedef volatile struct _Ifx_PCIE_DSP_PORTLOGIC_MSI
{
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_CTRL     CTRL;                   /**< \brief 0, */
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI_MSI_GPIO_IO_OFF MSI_GPIO_IO_OFF;        /**< \brief 68, Integrated MSI Reception Module General Purpose IO Register*/
} Ifx_PCIE_DSP_PORTLOGIC_MSI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_PORTLOGIC_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PORTLOGIC object */
typedef volatile struct _Ifx_PCIE_DSP_PORTLOGIC
{
       __IO Ifx_PCIE_DSP_PORTLOGIC_ACK_LATENCY_TIMER_OFF ACK_LATENCY_TIMER_OFF;    /**< \brief 0, Ack Latency Timer and Replay Timer Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_VENDOR_SPEC_DLLP_OFF VENDOR_SPEC_DLLP_OFF;    /**< \brief 4, Vendor Specific DLLP Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_PORT_FORCE_OFF PORT_FORCE_OFF;         /**< \brief 8, Port Force Link Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_ACK_F_ASPM_CTRL_OFF ACK_F_ASPM_CTRL_OFF;    /**< \brief C, Ack Frequency and L0-L1 ASPM Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_PORT_LINK_CTRL_OFF PORT_LINK_CTRL_OFF;     /**< \brief 10, Port Link Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_LANE_SKEW_OFF LANE_SKEW_OFF;          /**< \brief 14, Lane Skew Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_TIMER_CTRL_MAX_FUNC_NUM_OFF TIMER_CTRL_MAX_FUNC_NUM_OFF;    /**< \brief 18, Timer Control and Max Function Number Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_SYMBOL_TIMER_FILTER_1_OFF SYMBOL_TIMER_FILTER_1_OFF;    /**< \brief 1C, Symbol Timer Register and Filter Mask 1 Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_FILTER_MASK_2_OFF FILTER_MASK_2_OFF;      /**< \brief 20, Filter Mask 2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_24[4];         /**< \brief 24, \internal Reserved */
       __I  Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG0_OFF PL_DEBUG0_OFF;          /**< \brief 28, Debug Register 0*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_PL_DEBUG1_OFF PL_DEBUG1_OFF;          /**< \brief 2C, Debug Register 1*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_TX_P_FC_CREDIT_STATUS_OFF TX_P_FC_CREDIT_STATUS_OFF;    /**< \brief 30, Transmit Posted FC Credit Status*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_TX_NP_FC_CREDIT_STATUS_OFF TX_NP_FC_CREDIT_STATUS_OFF;    /**< \brief 34, Transmit Non-Posted FC Credit Status*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_TX_CPL_FC_CREDIT_STATUS_OFF TX_CPL_FC_CREDIT_STATUS_OFF;    /**< \brief 38, Transmit Completion FC Credit Status*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_QUEUE_STATUS_OFF QUEUE_STATUS_OFF;       /**< \brief 3C, Queue Status*/
       __I  Ifx_UReg_8Bit                       reserved_40[8];         /**< \brief 40, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_VC0_P_RX_Q_CTRL_OFF VC0_P_RX_Q_CTRL_OFF;    /**< \brief 48, Segmented-Buffer VC0 Posted Receive Queue Control*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_VC0_NP_RX_Q_CTRL_OFF VC0_NP_RX_Q_CTRL_OFF;    /**< \brief 4C, Segmented-Buffer VC0 Non-Posted Receive Queue Control*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_VC0_CPL_RX_Q_CTRL_OFF VC0_CPL_RX_Q_CTRL_OFF;    /**< \brief 50, Segmented-Buffer VC0 Completion Receive Queue Control*/
       __I  Ifx_UReg_8Bit                       reserved_54[184];       /**< \brief 54, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_GEN2_CTRL_OFF GEN2_CTRL_OFF;          /**< \brief 10C, Link Width and Speed Change Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_110[16];       /**< \brief 110, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSI          MSI;                    /**< \brief 120, */
       __IO Ifx_PCIE_DSP_PORTLOGIC_CLOCK_GATING_CTRL_OFF CLOCK_GATING_CTRL_OFF;    /**< \brief 18C, Clock Gating Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_GEN3_RELATED_OFF GEN3_RELATED_OFF;       /**< \brief 190, Gen3 Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_194[20];       /**< \brief 194, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_CONTROL_OFF GEN3_EQ_CONTROL_OFF;    /**< \brief 1A8, Gen3 EQ Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_GEN3_EQ_FB_MODE_DIR_CHANGE_OFF GEN3_EQ_FB_MODE_DIR_CHANGE_OFF;    /**< \brief 1AC, Gen3 EQ Direction Change Feedback Mode Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_1B0[4];        /**< \brief 1B0, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_ORDER_RULE_CTRL_OFF ORDER_RULE_CTRL_OFF;    /**< \brief 1B4, Order Rule Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_PIPE_LOOPBACK_CONTROL_OFF PIPE_LOOPBACK_CONTROL_OFF;    /**< \brief 1B8, PIPE Loopback Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_MISC_CONTROL_1_OFF MISC_CONTROL_1_OFF;     /**< \brief 1BC, DBI Read-Only Write Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_1C0[12];       /**< \brief 1C0, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_LINK_FLUSH_CONTROL_OFF LINK_FLUSH_CONTROL_OFF;    /**< \brief 1CC, Link Reset Request Flush Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_AMBA_ERROR_RESPONSE_DEFAULT_OFF AMBA_ERROR_RESPONSE_DEFAULT_OFF;    /**< \brief 1D0, AXI Bridge Slave Error Response Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_AMBA_LINK_TIMEOUT_OFF AMBA_LINK_TIMEOUT_OFF;    /**< \brief 1D4, Link Down AXI Bridge Slave Timeout Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_AMBA_ORDERING_CTRL_OFF AMBA_ORDERING_CTRL_OFF;    /**< \brief 1D8, AXI Bridge Ordering Control*/
       __I  Ifx_UReg_8Bit                       reserved_1DC[28];       /**< \brief 1DC, \internal Reserved */
       __I  Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_NUMBER_OFF PCIE_VERSION_NUMBER_OFF;    /**< \brief 1F8, PCIe Controller IIP Release Version Number*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_PCIE_VERSION_TYPE_OFF PCIE_VERSION_TYPE_OFF;    /**< \brief 1FC, PCIe Controller IIP Release Version Type*/
       __I  Ifx_UReg_8Bit                       reserved_200[48];       /**< \brief 200, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_CONTROL_OFF INTERFACE_TIMER_CONTROL_OFF;    /**< \brief 230, Interface Timer Control Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_TARGET_OFF INTERFACE_TIMER_TARGET_OFF;    /**< \brief 234, Interface Timer Target Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_INTERFACE_TIMER_STATUS_OFF INTERFACE_TIMER_STATUS_OFF;    /**< \brief 238, Interface Timer Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_23C[4];        /**< \brief 23C, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_LOW_OFF MSIX_ADDRESS_MATCH_LOW_OFF;    /**< \brief 240, MSI-X Address Match Low Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_MSIX_ADDRESS_MATCH_HIGH_OFF MSIX_ADDRESS_MATCH_HIGH_OFF;    /**< \brief 244, MSIX Address Match High Register*/
       __O  Ifx_PCIE_DSP_PORTLOGIC_MSIX_DOORBELL_OFF MSIX_DOORBELL_OFF;      /**< \brief 248, MSI-X Doorbell Register*/
       __I  Ifx_UReg_8Bit                       reserved_24C[20];       /**< \brief 24C, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_SAFETY_MASK_OFF SAFETY_MASK_OFF;        /**< \brief 260, Functional Safety Interrupt Events Mask Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_SAFETY_STATUS_OFF SAFETY_STATUS_OFF;      /**< \brief 264, Status for functional safety interrupt events*/
       __I  Ifx_UReg_8Bit                       reserved_268[424];      /**< \brief 268, \internal Reserved */
       __I  Ifx_PCIE_DSP_PORTLOGIC_PL_APP_BUS_DEV_NUM_STATUS_OFF PL_APP_BUS_DEV_NUM_STATUS_OFF;    /**< \brief 410, Application driven bus and device number register*/
       __I  Ifx_UReg_8Bit                       reserved_414[12];       /**< \brief 414, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_CONTROL_STATUS_OFF PL_CHK_REG_CONTROL_STATUS_OFF;    /**< \brief 420, CDM Register Checking Control and Status Register*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_START_END_OFF PL_CHK_REG_START_END_OFF;    /**< \brief 424, CDM Register Checking First and Last address to check*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_ADDR_OFF PL_CHK_REG_ERR_ADDR_OFF;    /**< \brief 428, CDM Register Checking Error Address*/
       __I  Ifx_PCIE_DSP_PORTLOGIC_PL_CHK_REG_ERR_PF_VF_OFF PL_CHK_REG_ERR_PF_VF_OFF;    /**< \brief 42C, CDM Register Checking error PF Numbers*/
       __IO Ifx_PCIE_DSP_PORTLOGIC_PL_LTR_LATENCY_OFF PL_LTR_LATENCY_OFF;     /**< \brief 430, LTR Latency Register*/
       __I  Ifx_UReg_8Bit                       reserved_434[12];       /**< \brief 434, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_AUX_CLK_FREQ_OFF AUX_CLK_FREQ_OFF;       /**< \brief 440, Auxiliary Clock Frequency Control Register*/
       __I  Ifx_UReg_8Bit                       reserved_444[4];        /**< \brief 444, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC_POWERDOWN_CTRL_STATUS_OFF POWERDOWN_CTRL_STATUS_OFF;    /**< \brief 448, Powerdown Control and Status Register*/
} Ifx_PCIE_DSP_PORTLOGIC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_MSIXPBA_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief MSIXPBA object */
typedef volatile struct _Ifx_PCIE_DSP_MSIXPBA
{
       __I  Ifx_PCIE_DSP_MSIXPBA_DWORD          DWORD;                  /**< \brief 0, MSIX table DWORD*/
} Ifx_PCIE_DSP_MSIXPBA;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_MSIXCAPDBI_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief MSIXCAPDBI object */
typedef volatile struct _Ifx_PCIE_DSP_MSIXCAPDBI
{
       __I  Ifx_PCIE_DSP_MSIXCAPDBI_SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG SHADOW_PCI_MSIX_CAP_ID_NEXT_CTRL_REG;    /**< \brief 0, MSI-X Capability ID, Next Pointer, Control Register*/
} Ifx_PCIE_DSP_MSIXCAPDBI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_PWREN_WRITE_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH
{
       __IO Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH_CH CH;                     /**< \brief 0, DMA Write Channel 0 Power Enable Register*/
} Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_PWREN_WRITE_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief WRITE object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_PWREN_WRITE
{
       __IO Ifx_PCIE_DSP_DMACAP_PWREN_WRITE_CH  CH[4];                  /**< \brief 0, */
} Ifx_PCIE_DSP_DMACAP_PWREN_WRITE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_PWREN_READ_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L4
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH
{
       __IO Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH_CH CH;                     /**< \brief 0, DMA Read Channel 0 Power Enable Register*/
} Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_PWREN_READ_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief READ object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_PWREN_READ
{
       __IO Ifx_PCIE_DSP_DMACAP_PWREN_READ_CH   CH[4];                  /**< \brief 0, */
} Ifx_PCIE_DSP_DMACAP_PWREN_READ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_PWREN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief PWREN object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_PWREN
{
       __IO Ifx_PCIE_DSP_DMACAP_PWREN_WRITE     WRITE;                  /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_10[48];        /**< \brief 10, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_PWREN_READ      READ;                   /**< \brief 40, */
} Ifx_PCIE_DSP_DMACAP_PWREN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_CH_WRITE_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief WRITE object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_CH_WRITE
{
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_CONTROL1 CONTROL1;               /**< \brief 0, DMA Write Channel Control 1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_TRANSFER_SIZE TRANSFER_SIZE;          /**< \brief 8, DMA Write Transfer Size Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_LOW SAR_LOW;                /**< \brief C, DMA Write SAR Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_SAR_HIGH SAR_HIGH;               /**< \brief 10, DMA Write SAR High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_LOW DAR_LOW;                /**< \brief 14, DMA Write DAR Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_DAR_HIGH DAR_HIGH;               /**< \brief 18, DMA Write DAR High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_LOW LLP_LOW;                /**< \brief 1C, DMA Write Linked List Pointer Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE_LLP_HIGH LLP_HIGH;               /**< \brief 20, DMA Write Linked List Pointer High Register*/
} Ifx_PCIE_DSP_DMACAP_CH_WRITE;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_CH_WRCHN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief WRCHN object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_CH_WRCHN
{
       __O  Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_CLEAR WR_INT_CLEAR;           /**< \brief 0, Interrupt clear for DMA write channel  $i*/
       __I  Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_INT_STATUS WR_INT_STATUS;          /**< \brief 4, Interrupt status for DMA write channel  $i*/
       __I  Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_ERR_STATUS WR_ERR_STATUS;          /**< \brief 8, Error status for DMA write channel  $i*/
       __O  Ifx_PCIE_DSP_DMACAP_CH_WRCHN_WR_DOORBELL WR_DOORBELL;            /**< \brief C, Doorbell for DMA write channel  $i*/
} Ifx_PCIE_DSP_DMACAP_CH_WRCHN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_CH_READ_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief READ object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_CH_READ
{
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_CONTROL1 CONTROL1;               /**< \brief 0, DMA Read Channel Control 1 Register*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_TRANSFER_SIZE TRANSFER_SIZE;          /**< \brief 8, DMA Read Transfer Size Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_LOW SAR_LOW;                /**< \brief C, DMA Read SAR Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_SAR_HIGH SAR_HIGH;               /**< \brief 10, DMA Read SAR High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_LOW DAR_LOW;                /**< \brief 14, DMA Read DAR Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_DAR_HIGH DAR_HIGH;               /**< \brief 18, DMA Read DAR High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_LOW LLP_LOW;                /**< \brief 1C, DMA Read Linked List Pointer Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ_LLP_HIGH LLP_HIGH;               /**< \brief 20, DMA Read Linked List Pointer High Register*/
} Ifx_PCIE_DSP_DMACAP_CH_READ;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_CH_RDCHN_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief RDCHN object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_CH_RDCHN
{
       __O  Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_CLEAR RD_INT_CLEAR;           /**< \brief 0, Interrupt clear for DMA read channel  $i*/
       __I  Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_INT_STATUS RD_INT_STATUS;          /**< \brief 4, Interrupt status for DMA read channel  $i*/
       __I  Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS RD_ERR_STATUS;          /**< \brief 8, Error status for DMA read channel  $i*/
       __I  Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_ERR_STATUS_HIGH RD_ERR_STATUS_HIGH;     /**< \brief C, Higher error status for DMA read channel  $i*/
       __O  Ifx_PCIE_DSP_DMACAP_CH_RDCHN_RD_DOORBELL RD_DOORBELL;            /**< \brief 10, Doorbell for DMA read channel  $i*/
} Ifx_PCIE_DSP_DMACAP_CH_RDCHN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_CH_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CH object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP_CH
{
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRITE        WRITE;                  /**< \brief 0, */
       __IO Ifx_PCIE_DSP_DMACAP_CH_WRCHN        WRCHN;                  /**< \brief 24, */
       __I  Ifx_UReg_8Bit                       reserved_34[204];       /**< \brief 34, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_CH_READ         READ;                   /**< \brief 100, */
       __IO Ifx_PCIE_DSP_DMACAP_CH_RDCHN        RDCHN;                  /**< \brief 124, */
       __I  Ifx_UReg_8Bit                       reserved_138[200];      /**< \brief 138, \internal Reserved */
} Ifx_PCIE_DSP_DMACAP_CH;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_DMACAP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DMACAP object */
typedef volatile struct _Ifx_PCIE_DSP_DMACAP
{
       __IO Ifx_PCIE_DSP_DMACAP_DMA_CTRL_DATA_ARB_PRIOR_OFF DMA_CTRL_DATA_ARB_PRIOR_OFF;    /**< \brief 0, DMA Arbitration Scheme for TRGT1 Interface*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __I  Ifx_PCIE_DSP_DMACAP_DMA_CTRL_OFF    DMA_CTRL_OFF;           /**< \brief 8, DMA Number of Channels Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_EN_OFF DMA_WRITE_ENGINE_EN_OFF;    /**< \brief C, DMA Write Engine Enable Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DOORBELL_OFF DMA_WRITE_DOORBELL_OFF;    /**< \brief 10, DMA Write Doorbell Register*/
       __I  Ifx_UReg_8Bit                       reserved_14[4];         /**< \brief 14, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CHANNEL_ARB_WEIGHT_LOW_OFF DMA_WRITE_CHANNEL_ARB_WEIGHT_LOW_OFF;    /**< \brief 18, DMA Write Engine Channel Arbitration Weight Low Register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[16];        /**< \brief 1C, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_EN_OFF DMA_READ_ENGINE_EN_OFF;    /**< \brief 2C, DMA Read Engine Enable Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_DOORBELL_OFF DMA_READ_DOORBELL_OFF;    /**< \brief 30, DMA Read Doorbell Register*/
       __I  Ifx_UReg_8Bit                       reserved_34[4];         /**< \brief 34, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_CHANNEL_ARB_WEIGHT_LOW_OFF DMA_READ_CHANNEL_ARB_WEIGHT_LOW_OFF;    /**< \brief 38, DMA Read Engine Channel Arbitration Weight Low Register*/
       __I  Ifx_UReg_8Bit                       reserved_3C[16];        /**< \brief 3C, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_STATUS_OFF DMA_WRITE_INT_STATUS_OFF;    /**< \brief 4C, DMA Write Interrupt Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_50[4];         /**< \brief 50, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_MASK_OFF DMA_WRITE_INT_MASK_OFF;    /**< \brief 54, DMA Write Interrupt Mask Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_INT_CLEAR_OFF DMA_WRITE_INT_CLEAR_OFF;    /**< \brief 58, DMA Write Interrupt Clear Register*/
       __I  Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ERR_STATUS_OFF DMA_WRITE_ERR_STATUS_OFF;    /**< \brief 5C, DMA Write Error Status Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_LOW_OFF DMA_WRITE_DONE_IMWR_LOW_OFF;    /**< \brief 60, DMA Write Done IMWr Address Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_DONE_IMWR_HIGH_OFF DMA_WRITE_DONE_IMWR_HIGH_OFF;    /**< \brief 64, DMA Write Done IMWr Interrupt Address High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_LOW_OFF DMA_WRITE_ABORT_IMWR_LOW_OFF;    /**< \brief 68, DMA Write Abort IMWr Address Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ABORT_IMWR_HIGH_OFF DMA_WRITE_ABORT_IMWR_HIGH_OFF;    /**< \brief 6C, DMA Write Abort IMWr Address High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH01_IMWR_DATA_OFF DMA_WRITE_CH01_IMWR_DATA_OFF;    /**< \brief 70, DMA Write Channel 1 and 0 IMWr Data Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_CH23_IMWR_DATA_OFF DMA_WRITE_CH23_IMWR_DATA_OFF;    /**< \brief 74, DMA Write Channel 3 and 2 IMWr Data Register*/
       __I  Ifx_UReg_8Bit                       reserved_78[24];        /**< \brief 78, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_WRITE_LINKED_LIST_ERR_EN_OFF DMA_WRITE_LINKED_LIST_ERR_EN_OFF;    /**< \brief 90, DMA Write Linked List Error Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_94[12];        /**< \brief 94, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_STATUS_OFF DMA_READ_INT_STATUS_OFF;    /**< \brief A0, DMA Read Interrupt Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_A4[4];         /**< \brief A4, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_MASK_OFF DMA_READ_INT_MASK_OFF;    /**< \brief A8, DMA Read Interrupt Mask Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_INT_CLEAR_OFF DMA_READ_INT_CLEAR_OFF;    /**< \brief AC, DMA Read Interrupt Clear Register*/
       __I  Ifx_UReg_8Bit                       reserved_B0[4];         /**< \brief B0, \internal Reserved */
       __I  Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_LOW_OFF DMA_READ_ERR_STATUS_LOW_OFF;    /**< \brief B4, DMA Read Error Status Low Register*/
       __I  Ifx_PCIE_DSP_DMACAP_DMA_READ_ERR_STATUS_HIGH_OFF DMA_READ_ERR_STATUS_HIGH_OFF;    /**< \brief B8, DMA Read Error Status High Register*/
       __I  Ifx_UReg_8Bit                       reserved_BC[8];         /**< \brief BC, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_LINKED_LIST_ERR_EN_OFF DMA_READ_LINKED_LIST_ERR_EN_OFF;    /**< \brief C4, DMA Read Linked List Error Enable Register*/
       __I  Ifx_UReg_8Bit                       reserved_C8[4];         /**< \brief C8, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_LOW_OFF DMA_READ_DONE_IMWR_LOW_OFF;    /**< \brief CC, DMA Read Done IMWr Address Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_DONE_IMWR_HIGH_OFF DMA_READ_DONE_IMWR_HIGH_OFF;    /**< \brief D0, DMA Read Done IMWr Address High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_LOW_OFF DMA_READ_ABORT_IMWR_LOW_OFF;    /**< \brief D4, DMA Read Abort IMWr Address Low Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_ABORT_IMWR_HIGH_OFF DMA_READ_ABORT_IMWR_HIGH_OFF;    /**< \brief D8, DMA Read Abort IMWr Address High Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_CH01_IMWR_DATA_OFF DMA_READ_CH01_IMWR_DATA_OFF;    /**< \brief DC, DMA Read Channel 1 and 0 IMWr Data Register*/
       __IO Ifx_PCIE_DSP_DMACAP_DMA_READ_CH23_IMWR_DATA_OFF DMA_READ_CH23_IMWR_DATA_OFF;    /**< \brief E0, DMA Read Channel 3 and 2 IMWr Data Register*/
       __I  Ifx_UReg_8Bit                       reserved_E4[36];        /**< \brief E4, \internal Reserved */
       __I  Ifx_PCIE_DSP_DMACAP_DMA_WRITE_ENGINE_HSHAKE_CNT_LOW_OFF DMA_WRITE_ENGINE_HSHAKE_CNT_LOW_OFF;    /**< \brief 108, DMA Write Engine Handshake Counter Channel 0/1/2/3 Register*/
       __I  Ifx_UReg_8Bit                       reserved_10C[12];       /**< \brief 10C, \internal Reserved */
       __I  Ifx_PCIE_DSP_DMACAP_DMA_READ_ENGINE_HSHAKE_CNT_LOW_OFF DMA_READ_ENGINE_HSHAKE_CNT_LOW_OFF;    /**< \brief 118, DMA Read Engine Handshake Counter Channel 0/1/2/3 Register*/
       __I  Ifx_UReg_8Bit                       reserved_11C[12];       /**< \brief 11C, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_PWREN           PWREN;                  /**< \brief 128, */
       __I  Ifx_UReg_8Bit                       reserved_178[136];      /**< \brief 178, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP_CH              CH[4];                  /**< \brief 200, */
} Ifx_PCIE_DSP_DMACAP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_S2A_ACCEN_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCEN object */
typedef volatile struct _Ifx_PCIE_DSP_S2A_ACCEN
{
       __IO Ifx_PCIE_DSP_ACCEN_WRA              WRA;                    /**< \brief 0, Write access enable register A*/
       __IO Ifx_PCIE_DSP_ACCEN_WRB_SRI          WRB;                    /**< \brief 4, Write access enable register B*/
       __IO Ifx_PCIE_DSP_ACCEN_RDA              RDA;                    /**< \brief 8, Read access enable register A*/
       __IO Ifx_PCIE_DSP_ACCEN_RDB_SRI          RDB;                    /**< \brief C, Read access enable register B*/
       __IO Ifx_PCIE_DSP_ACCEN_VM               VM;                     /**< \brief 10, VM access enable register*/
       __IO Ifx_PCIE_DSP_ACCEN_PRS              PRS;                    /**< \brief 14, PRS access enable register*/
       __IO Ifx_PCIE_DSP_ACCEN_RGNLA            RGNLA;                  /**< \brief 18, Region lower address register*/
       __IO Ifx_PCIE_DSP_ACCEN_RGNUA            RGNUA;                  /**< \brief 1C, Region upper address register*/
} Ifx_PCIE_DSP_S2A_ACCEN;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_S2A_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief S2A object */
typedef volatile struct _Ifx_PCIE_DSP_S2A
{
       __IO Ifx_PCIE_DSP_S2A_ACCEN              ACCEN[8];               /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_100[4];        /**< \brief 100, \internal Reserved */
       __IO Ifx_PCIE_DSP_PROT                   PROTSE;                 /**< \brief 104, PROT Register Safe Endinit*/
} Ifx_PCIE_DSP_S2A;

/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_SRI_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PCIE_DSP_SRI object */
typedef volatile struct _Ifx_PCIE_DSP_SRI
{
       __IO Ifx_PCIE_DSP_S2A                    S2A;                    /**< \brief 0, PROT Register Safe Endinit*/
       __I  Ifx_UReg_8Bit                       reserved_108[248];      /**< \brief 108, \internal Reserved */
} Ifx_PCIE_DSP_SRI;

/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/** \addtogroup IfxSfr_Pcie_dsp_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief PCIE_DSP object */
typedef volatile struct _Ifx_PCIE_DSP
{
       __IO Ifx_PCIE_DSP_CLC                    CLC;                    /**< \brief 0, Clock control register*/
       __I  Ifx_PCIE_DSP_OCS                    OCS;                    /**< \brief 4, OCDS control and status register*/
       __I  Ifx_PCIE_DSP_ID                     ID;                     /**< \brief 8, Module identification register*/
       __IO Ifx_PCIE_DSP_RST                    RST;                    /**< \brief C, */
       __I  Ifx_UReg_8Bit                       reserved_18[8];         /**< \brief 18, \internal Reserved */
       __IO Ifx_PCIE_DSP_PROT                   PROTE;                  /**< \brief 20, PROT register endinit*/
       __IO Ifx_PCIE_DSP_PROT                   PROTSE;                 /**< \brief 24, PROT register safe endinit*/
       __I  Ifx_UReg_8Bit                       reserved_28[24];        /**< \brief 28, \internal Reserved */
       __IO Ifx_PCIE_DSP_ACCEN                  ACCEN;                  /**< \brief 40, */
       __IO Ifx_PCIE_DSP_DMA_ACCEN              DMA_ACCEN[4];           /**< \brief 60, */
       __I  Ifx_UReg_8Bit                       reserved_E0[544];       /**< \brief E0, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_300[72];       /**< \brief 300, \internal Reserved */
       __IO Ifx_PCIE_DSP_INT                    INT;                    /**< \brief 348, */
       __IO Ifx_PCIE_DSP_CFG                    CFG;                    /**< \brief 368, */
       __IO Ifx_PCIE_DSP_LNK                    LNK;                    /**< \brief 370, */
       __IO Ifx_PCIE_DSP_TXRX                   TXRX;                   /**< \brief 380, */
       __I  Ifx_UReg_8Bit                       reserved_388[4];        /**< \brief 388, \internal Reserved */
       __IO Ifx_PCIE_DSP_MSG                    MSG;                    /**< \brief 38C, */
       __IO Ifx_PCIE_DSP_PM                     PM;                     /**< \brief 398, */
       __IO Ifx_PCIE_DSP_ERR                    ERR;                    /**< \brief 3B0, */
       __IO Ifx_PCIE_DSP_DBG                    DBG;                    /**< \brief 3BC, */
       __IO Ifx_PCIE_DSP_LTR                    LTR;                    /**< \brief 3C4, */
       __IO Ifx_PCIE_DSP_PTM                    PTM;                    /**< \brief 3D0, */
       __I  Ifx_UReg_8Bit                       reserved_3EC[4];        /**< \brief 3EC, \internal Reserved */
       __IO Ifx_PCIE_DSP_OBFFMSG                OBFFMSG;                /**< \brief 3F0, OBFF message control*/
       __IO Ifx_PCIE_DSP_OBFFWAKE               OBFFWAKE;               /**< \brief 3F4, OBFF WAKE control*/
       __IO Ifx_PCIE_DSP_CFGBD                  CFGBD;                  /**< \brief 3F8, PCIe configuration control*/
       __IO Ifx_PCIE_DSP_MAILBOX                MAILBOX;                /**< \brief 3FC, */
       __IO Ifx_PCIE_DSP_LLCTRL                 LLCTRL;                 /**< \brief 41C, DMA link list control register*/
       __IO Ifx_PCIE_DSP_OTSS                   OTSS;                   /**< \brief 420, PCIe OCDS Trigger Set Select*/
       __IO Ifx_PCIE_DSP_ALARM                  ALARM;                  /**< \brief 424, */
       __I  Ifx_UReg_8Bit                       reserved_430[11216];    /**< \brief 430, \internal Reserved */
       __IO Ifx_PCIE_DSP_ATU                    ATU[8];                 /**< \brief 3000, */
       __IO Ifx_PCIE_DSP_TYPE1HDR               TYPE1HDR;               /**< \brief 4000, Bridge Control, Interrupt Pin, and Interrupt Line Register*/
       __IO Ifx_PCIE_DSP_PMCAP                  PMCAP;                  /**< \brief 4040, Power Management Control and Status Register*/
       __I  Ifx_UReg_8Bit                       reserved_4048[8];       /**< \brief 4048, \internal Reserved */
       __IO Ifx_PCIE_DSP_MSICAP                 MSICAP;                 /**< \brief 4050, Message Address Register for MSI (Offset 14h)*/
       __I  Ifx_UReg_8Bit                       reserved_4068[8];       /**< \brief 4068, \internal Reserved */
       __IO Ifx_PCIE_DSP_PCIECAP                PCIECAP;                /**< \brief 4070, Link Control 2 and Status 2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_40A4[12];      /**< \brief 40A4, \internal Reserved */
       __IO Ifx_PCIE_DSP_MSIXCAP                MSIXCAP;                /**< \brief 40B0, MSI-X PBA Offset and BIR Register*/
       __I  Ifx_UReg_8Bit                       reserved_40BC[68];      /**< \brief 40BC, \internal Reserved */
       __IO Ifx_PCIE_DSP_AERCAP                 AERCAP;                 /**< \brief 4100, */
       __IO Ifx_PCIE_DSP_SNCAP                  SNCAP;                  /**< \brief 4148, Serial Number 2 Register*/
       __I  Ifx_UReg_8Bit                       reserved_4154[4];       /**< \brief 4154, \internal Reserved */
       __IO Ifx_PCIE_DSP_SPCIECAP               SPCIECAP;               /**< \brief 4158, Lane Equalization Control Register for lanes 1 and 0*/
       __I  Ifx_UReg_8Bit                       reserved_4168[8];       /**< \brief 4168, \internal Reserved */
       __IO Ifx_PCIE_DSP_L1SUBCAP               L1SUBCAP;               /**< \brief 4170, L1 Substates Control 2 Register*/
       __IO Ifx_PCIE_DSP_RASDESCAP              RASDESCAP;              /**< \brief 4180, */
       __I  Ifx_UReg_8Bit                       reserved_426C[20];      /**< \brief 426C, \internal Reserved */
       __IO Ifx_PCIE_DSP_VSECRASCAP             VSECRASCAP;             /**< \brief 4280, RAM Address where an uncorrected error (2-bit ECC) is detected*/
       __IO Ifx_PCIE_DSP_PTMCAP                 PTMCAP;                 /**< \brief 42B8, PTM Control Register*/
       __IO Ifx_PCIE_DSP_PTMRESCAP              PTMRESCAP;              /**< \brief 42C4, PTM Responder Latency Viewport Register Select*/
       __I  Ifx_UReg_8Bit                       reserved_4310[28];      /**< \brief 4310, \internal Reserved */
       __IO Ifx_PCIE_DSP_VSECDMACAP             VSECDMACAP;             /**< \brief 432C, DMA Register Map Start Address Offset High Register*/
       __I  Ifx_UReg_8Bit                       reserved_4344[956];     /**< \brief 4344, \internal Reserved */
       __IO Ifx_PCIE_DSP_PORTLOGIC              PORTLOGIC;              /**< \brief 4700, PIPE Related Register*/
       __I  Ifx_UReg_8Bit                       reserved_4B4C[1204];    /**< \brief 4B4C, \internal Reserved */
       __I  Ifx_UReg_8Bit                       reserved_5000[3600];    /**< \brief 5000, \internal Reserved */
       __IO Ifx_PCIE_DSP_MSIXPBA                MSIXPBA[2];             /**< \brief 5E10, MSIX PBA table*/
       __I  Ifx_UReg_8Bit                       reserved_5E18[664];     /**< \brief 5E18, \internal Reserved */
       __IO Ifx_PCIE_DSP_MSIXCAPDBI             MSIXCAPDBI;             /**< \brief 60B0, MSI-X PBA Offset and BIR Register*/
       __I  Ifx_UReg_8Bit                       reserved_60B4[3916];    /**< \brief 60B4, \internal Reserved */
       __IO Ifx_PCIE_DSP_DMACAP                 DMACAP;                 /**< \brief 7000, */
       __I  Ifx_UReg_8Bit                       reserved_7A00[1536];    /**< \brief 7A00, \internal Reserved */
} Ifx_PCIE_DSP;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXPCIE_DSP_REGDEF_H */
