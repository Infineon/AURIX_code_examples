/**
 * \file IfxDmu_regdef.h
 * \brief
 * \copyright Copyright (c) 2024 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: MC_ACE_A3G_HSI_NVM_DMU/V0.2.2.1.2
 * Specification: latest @ 2024-03-02 instance sheet @ MC_A3G_HWDDSOC_FUNCTIONAL_INSTANCE_SHEET/V13.2.1.1.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Dmu_Registers Dmu Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Dmu_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Dmu_Registers
 * 
 * \defgroup IfxSfr_Dmu_Registers_union Register unions
 * \ingroup IfxSfr_Dmu_Registers
 * 
 * \defgroup IfxSfr_Dmu_Registers_struct Memory map
 * \ingroup IfxSfr_Dmu_Registers
 */
#ifndef IFXDMU_REGDEF_H
#define IFXDMU_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/


/** \addtogroup IfxSfr_Dmu_Registers_Bitfields
 * \{  */
/** \brief Region lower address register */
typedef struct _Ifx_DMU_ACCEN_DF_RGNLA_Bits
{
    __I  Ifx_Strict_32Bit :11;             /**< \brief [10:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:10;         /**< \brief [20:11] Region lower address (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_DMU_ACCEN_DF_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_DMU_ACCEN_DF_RGNUA_Bits
{
    __I  Ifx_Strict_32Bit :11;             /**< \brief [10:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:10;         /**< \brief [20:11] Region upper address (rw) */
    __I  Ifx_Strict_32Bit :11;             /**< \brief [31:21] \internal Reserved */
} Ifx_DMU_ACCEN_DF_RGNUA_Bits;

/** \brief Region lower address register */
typedef struct _Ifx_DMU_ACCEN_PF_RGNLA_Bits
{
    __I  Ifx_Strict_32Bit :14;             /**< \brief [13:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:14;         /**< \brief [27:14] Region lower address (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_DMU_ACCEN_PF_RGNLA_Bits;

/** \brief Region upper address register */
typedef struct _Ifx_DMU_ACCEN_PF_RGNUA_Bits
{
    __I  Ifx_Strict_32Bit :14;             /**< \brief [13:0] \internal Reserved */
    __IO Ifx_Strict_32Bit ADDR:14;         /**< \brief [27:14] Region upper address (rw) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [31:28] \internal Reserved */
} Ifx_DMU_ACCEN_PF_RGNUA_Bits;

/** \brief PRS access enable register */
typedef struct _Ifx_DMU_ACCEN_PRS_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for PRS q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for PRS q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_ACCEN_PRS_Bits;

/** \brief Read access enable register A */
typedef struct _Ifx_DMU_ACCEN_RDA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_DMU_ACCEN_RDA_Bits;

/** \brief Read access enable register B */
typedef struct _Ifx_DMU_ACCEN_RDB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Read access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Read access enable for Master TAG ID q - ENq (rw) */
} Ifx_DMU_ACCEN_RDB_SRI_Bits;

/** \brief VM access enable register */
typedef struct _Ifx_DMU_ACCEN_VM_Bits
{
    __IO Ifx_Strict_32Bit RD00:1;          /**< \brief [0:0] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD01:1;          /**< \brief [1:1] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD02:1;          /**< \brief [2:2] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD03:1;          /**< \brief [3:3] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD04:1;          /**< \brief [4:4] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD05:1;          /**< \brief [5:5] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD06:1;          /**< \brief [6:6] Read access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit RD07:1;          /**< \brief [7:7] Read access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [15:8] \internal Reserved */
    __IO Ifx_Strict_32Bit WR00:1;          /**< \brief [16:16] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR01:1;          /**< \brief [17:17] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR02:1;          /**< \brief [18:18] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR03:1;          /**< \brief [19:19] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR04:1;          /**< \brief [20:20] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR05:1;          /**< \brief [21:21] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR06:1;          /**< \brief [22:22] Write access enable for VM ID q (rw) */
    __IO Ifx_Strict_32Bit WR07:1;          /**< \brief [23:23] Write access enable for VM ID q (rw) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_ACCEN_VM_Bits;

/** \brief Write access enable register A */
typedef struct _Ifx_DMU_ACCEN_WRA_Bits
{
    __IO Ifx_Strict_32Bit EN00:1;          /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN01:1;          /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN02:1;          /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN03:1;          /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN04:1;          /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN05:1;          /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN06:1;          /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN07:1;          /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN08:1;          /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN09:1;          /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN10:1;          /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN11:1;          /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN12:1;          /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN13:1;          /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN14:1;          /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN15:1;          /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN16:1;          /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN17:1;          /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN18:1;          /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN19:1;          /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN20:1;          /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN21:1;          /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN22:1;          /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN23:1;          /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN24:1;          /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN25:1;          /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN26:1;          /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN27:1;          /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN28:1;          /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN29:1;          /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN30:1;          /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN31:1;          /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_DMU_ACCEN_WRA_Bits;

/** \brief Write access enable register B */
typedef struct _Ifx_DMU_ACCEN_WRB_SRI_Bits
{
    __IO Ifx_Strict_32Bit EN32:1;          /**< \brief [0:0] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN33:1;          /**< \brief [1:1] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN34:1;          /**< \brief [2:2] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN35:1;          /**< \brief [3:3] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN36:1;          /**< \brief [4:4] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN37:1;          /**< \brief [5:5] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN38:1;          /**< \brief [6:6] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN39:1;          /**< \brief [7:7] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN40:1;          /**< \brief [8:8] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN41:1;          /**< \brief [9:9] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN42:1;          /**< \brief [10:10] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN43:1;          /**< \brief [11:11] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN44:1;          /**< \brief [12:12] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN45:1;          /**< \brief [13:13] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN46:1;          /**< \brief [14:14] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN47:1;          /**< \brief [15:15] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN48:1;          /**< \brief [16:16] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN49:1;          /**< \brief [17:17] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN50:1;          /**< \brief [18:18] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN51:1;          /**< \brief [19:19] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN52:1;          /**< \brief [20:20] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN53:1;          /**< \brief [21:21] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN54:1;          /**< \brief [22:22] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN55:1;          /**< \brief [23:23] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN56:1;          /**< \brief [24:24] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN57:1;          /**< \brief [25:25] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN58:1;          /**< \brief [26:26] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN59:1;          /**< \brief [27:27] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN60:1;          /**< \brief [28:28] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN61:1;          /**< \brief [29:29] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN62:1;          /**< \brief [30:30] Write access enable for Master TAG ID q - ENq (rw) */
    __IO Ifx_Strict_32Bit EN63:1;          /**< \brief [31:31] Write access enable for Master TAG ID q - ENq (rw) */
} Ifx_DMU_ACCEN_WRB_SRI_Bits;

/** \brief CSRM boot control register */
typedef struct _Ifx_DMU_CSCI_BCONTROL_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DDFD:1;            /**< \brief [6:6] Disable read access from DFLASH (rwh) */
    __IO Ifx_UReg_32Bit DDFP:1;            /**< \brief [7:7] Disable read access from PFLASH (rwh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_DMU_CSCI_BCONTROL_Bits;

/** \brief CSRM command interface clear error register */
typedef struct _Ifx_DMU_CSCI_CLRERR_Bits
{
    __O  Ifx_Strict_32Bit CADER:1;         /**< \brief [0:0] Clear SRI bus Address error (w) */
    __O  Ifx_Strict_32Bit CSQER:1;         /**< \brief [1:1] Clears command sequence error (w) */
    __O  Ifx_Strict_32Bit CPROER:1;        /**< \brief [2:2] Clears protection error (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __O  Ifx_Strict_32Bit CABER:1;         /**< \brief [4:4] Clears abort error (w) */
    __O  Ifx_Strict_32Bit CCLER:1;         /**< \brief [5:5] Clear clear error (w) */
    __O  Ifx_Strict_32Bit CPVER:1;         /**< \brief [6:6] Clear program verify error (w) */
    __O  Ifx_Strict_32Bit CEVER:1;         /**< \brief [7:7] Clear erase verify error (w) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DMU_CSCI_CLRERR_Bits;

/** \brief CSRM command interface error register */
typedef struct _Ifx_DMU_CSCI_ERR_Bits
{
    __I  Ifx_UReg_32Bit ADER:1;            /**< \brief [0:0] SRI bus Address error (rh) */
    __I  Ifx_UReg_32Bit SQER:1;            /**< \brief [1:1] Command sequence error (rh) */
    __I  Ifx_UReg_32Bit PROER:1;           /**< \brief [2:2] Protection error (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit ABER:1;            /**< \brief [4:4] Abort error (rh) */
    __I  Ifx_UReg_32Bit CLER:1;            /**< \brief [5:5] Clear error (rh) */
    __I  Ifx_UReg_32Bit PVER:1;            /**< \brief [6:6] Program verify error (rh) */
    __I  Ifx_UReg_32Bit EVER:1;            /**< \brief [7:7] Erase verify error (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit OPER:1;            /**< \brief [16:16] Flash operation error (rh) */
    __I  Ifx_UReg_32Bit ORIER:1;           /**< \brief [17:17] Original error (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_DMU_CSCI_ERR_Bits;

/** \brief CSRM command interface interrupt enable register */
typedef struct _Ifx_DMU_CSCI_INTEN_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SQERM:1;           /**< \brief [1:1] Command sequence error interrupt mask (rw) */
    __IO Ifx_UReg_32Bit PROERM:1;          /**< \brief [2:2] Protection error interrupt mask (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [5:3] \internal Reserved */
    __IO Ifx_UReg_32Bit PVERM:1;           /**< \brief [6:6] Program verify error interrupt mask (rw) */
    __IO Ifx_UReg_32Bit EVERM:1;           /**< \brief [7:7] Erase verify error interrupt mask (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit OPERM:1;           /**< \brief [16:16] Flash operation error interrupt mask (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [30:17] \internal Reserved */
    __IO Ifx_UReg_32Bit EOBM:1;            /**< \brief [31:31] End of busy interrupt mask (rw) */
} Ifx_DMU_CSCI_INTEN_Bits;

/** \brief CSRM operation control register */
typedef struct _Ifx_DMU_CSCI_OCONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ABORT:1;           /**< \brief [1:1] Abort request (rwh) */
    __IO Ifx_UReg_32Bit CLEAR:1;           /**< \brief [2:2] Clear Request (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit UCG:1;             /**< \brief [8:8] User Command Granularity (rw) */
    __IO Ifx_UReg_32Bit PRMODE:1;          /**< \brief [9:9] Programming mode (rw) */
    __IO Ifx_UReg_32Bit PMPMODE:1;         /**< \brief [10:10] Pump mode (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [25:11] \internal Reserved */
    __O  Ifx_UReg_32Bit CPROG:1;           /**< \brief [26:26] Clear programming State (w) */
    __O  Ifx_UReg_32Bit CERASE:1;          /**< \brief [27:27] Clear erase State (w) */
    __O  Ifx_UReg_32Bit CUSER:1;           /**< \brief [28:28] Clear user State (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_DMU_CSCI_OCONTROL_Bits;

/** \brief CSRM sleep register */
typedef struct _Ifx_DMU_CSCI_SLEEP_Bits
{
    __I  Ifx_Strict_32Bit SLEEPP0A:1;      /**< \brief [0:0] HOST PFLASH P0A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP0B:1;      /**< \brief [1:1] HOST PFLASH P0B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP1A:1;      /**< \brief [2:2] HOST PFLASH P1A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP1B:1;      /**< \brief [3:3] HOST PFLASH P1B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP2A:1;      /**< \brief [4:4] HOST PFLASH P2A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP2B:1;      /**< \brief [5:5] HOST PFLASH P2B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP3A:1;      /**< \brief [6:6] HOST PFLASH P3A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP3B:1;      /**< \brief [7:7] HOST PFLASH P3B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP4A:1;      /**< \brief [8:8] HOST PFLASH P4A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP4B:1;      /**< \brief [9:9] HOST PFLASH P4B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP5A:1;      /**< \brief [10:10] HOST PFLASH P5A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP5B:1;      /**< \brief [11:11] HOST PFLASH P5B sleeping (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __I  Ifx_Strict_32Bit SLEEPHOSTDF:1;    /**< \brief [16:16] HOST DFLASH sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPCSRMDF:1;    /**< \brief [17:17] CSRM DFLASH sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPCSRMPF:1;    /**< \brief [18:18] CSRM PFLASH sleeping (rh) */
    __I  Ifx_Strict_32Bit :13;             /**< \brief [31:19] \internal Reserved */
} Ifx_DMU_CSCI_SLEEP_Bits;

/** \brief CSRM status register */
typedef struct _Ifx_DMU_CSCI_STATUS_Bits
{
    __I  Ifx_UReg_32Bit BUSYP0A:1;         /**< \brief [0:0] HOST PFLASH P0A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP0B:1;         /**< \brief [1:1] HOST PFLASH P0B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP1A:1;         /**< \brief [2:2] HOST PFLASH P1A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP1B:1;         /**< \brief [3:3] HOST PFLASH P1B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP2A:1;         /**< \brief [4:4] HOST PFLASH P2A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP2B:1;         /**< \brief [5:5] HOST PFLASH P2B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP3A:1;         /**< \brief [6:6] HOST PFLASH P3A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP3B:1;         /**< \brief [7:7] HOST PFLASH P3B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP4A:1;         /**< \brief [8:8] HOST PFLASH P4A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP4B:1;         /**< \brief [9:9] HOST PFLASH P4B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP5A:1;         /**< \brief [10:10] HOST PFLASH P5A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP5B:1;         /**< \brief [11:11] HOST PFLASH P5B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit BUSYHOSTDF:1;      /**< \brief [16:16] HOST DFLASH BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYCSRMDF:1;      /**< \brief [17:17] CSRM DFLASH BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYCSRMPF:1;      /**< \brief [18:18] CSRM PFLASH BUSY setting (rh) */
    __I  Ifx_UReg_32Bit FSIACTIVE:1;       /**< \brief [19:19] CSRM FSI active (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __I  Ifx_UReg_32Bit DFPAGE:1;          /**< \brief [24:24] Data Flash in Page Mode (rh) */
    __I  Ifx_UReg_32Bit PFPAGE:1;          /**< \brief [25:25] Program Flash in Page Mode (rh) */
    __I  Ifx_UReg_32Bit PROG:1;            /**< \brief [26:26] Programming State (rh) */
    __I  Ifx_UReg_32Bit ERASE:1;           /**< \brief [27:27] Erasing State (rh) */
    __I  Ifx_UReg_32Bit USER:1;            /**< \brief [28:28] User State (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __I  Ifx_UReg_32Bit REQACK:1;          /**< \brief [30:30] Request acknowledgement (rh) */
    __I  Ifx_UReg_32Bit REQDONE:1;         /**< \brief [31:31] Request done (rh) */
} Ifx_DMU_CSCI_STATUS_Bits;

/** \brief Bank allocation register */
typedef struct _Ifx_DMU_GP_BKALLOC_Bits
{
    __I  Ifx_UReg_32Bit P0A:1;             /**< \brief [0:0] HOST PFLASH P0A bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P0B:1;             /**< \brief [1:1] HOST PFLASH P0B bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P1A:1;             /**< \brief [2:2] HOST PFLASH P1A bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P1B:1;             /**< \brief [3:3] HOST PFLASH P1B bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P2A:1;             /**< \brief [4:4] HOST PFLASH P2A bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P2B:1;             /**< \brief [5:5] HOST PFLASH P2B bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P3A:1;             /**< \brief [6:6] HOST PFLASH P3A bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P3B:1;             /**< \brief [7:7] HOST PFLASH P3B bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P4A:1;             /**< \brief [8:8] HOST PFLASH P4A bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P4B:1;             /**< \brief [9:9] HOST PFLASH P4B bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P5A:1;             /**< \brief [10:10] HOST PFLASH P5A bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit P5B:1;             /**< \brief [11:11] HOST PFLASH P5B bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit HOSTDF:1;          /**< \brief [16:16] HOST DFLASH bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit CSRMDF:1;          /**< \brief [17:17] CSRM DFLASH bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit CSRMPF:1;          /**< \brief [18:18] CSRM PFLASH bank allocation setting (rh) */
    __I  Ifx_UReg_32Bit :13;               /**< \brief [31:19] \internal Reserved */
} Ifx_DMU_GP_BKALLOC_Bits;

/** \brief CSRM UCB confirmation codes register A */
typedef struct _Ifx_DMU_GP_CSRM_CONFIRMA_Bits
{
    __I  Ifx_UReg_32Bit PROINMOCFG:2;      /**< \brief [1:0] UCB_CS_MOCFG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINCFG:2;        /**< \brief [3:2] UCB_CS_CFG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINUDATA0:2;     /**< \brief [5:4] UCB_CS_USER_DATA0 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINUDATA1:2;     /**< \brief [7:6] UCB_CS_USER_DATA1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [13:8] \internal Reserved */
    __I  Ifx_UReg_32Bit PROINRETEST:2;     /**< \brief [15:14] UCB_RETEST confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD0:2;      /**< \brief [17:16] UCB_CS_BMHD0 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD1:2;      /**< \brief [19:18] UCB_CS_BMHD1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD2:2;      /**< \brief [21:20] UCB_CS_BMHD2 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD3:2;      /**< \brief [23:22] UCB_CS_BMHD3 confirmation state (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_GP_CSRM_CONFIRMA_Bits;

/** \brief CSRM UCB confirmation codes register B */
typedef struct _Ifx_DMU_GP_CSRM_CONFIRMB_Bits
{
    __I  Ifx_UReg_32Bit PROINUSERCFGO:2;    /**< \brief [1:0] UCB_CS_USERCFG_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINSWAPO:2;      /**< \brief [3:2] UCB_CS_SWAP_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINFLASHO:2;     /**< \brief [5:4] UCB_CS_FLASH_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINECPRIOO:2;    /**< \brief [7:6] UCB_CS_ECPRIO_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINDBGO:2;       /**< \brief [9:8] UCB_DBGCS_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [15:10] \internal Reserved */
    __I  Ifx_UReg_32Bit PROINUSERCFGC:2;    /**< \brief [17:16] UCB_CS_USERCFG_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINSWAPC:2;      /**< \brief [19:18] UCB_CS_SWAP_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINFLASHC:2;     /**< \brief [21:20] UCB_CS_FLASH_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINECPRIOC:2;    /**< \brief [23:22] UCB_CS_ECPRIO_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINDBGC:2;       /**< \brief [25:24] UCB_DBGCS_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit :6;                /**< \brief [31:26] \internal Reserved */
} Ifx_DMU_GP_CSRM_CONFIRMB_Bits;

/** \brief CSRM UCB confirmation codes register C */
typedef struct _Ifx_DMU_GP_CSRM_CONFIRMC_Bits
{
    __I  Ifx_UReg_32Bit PROINOTP01O:2;     /**< \brief [1:0] UCB_CS_PFLASH_OTP0_ORIG OTP set 1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP02O:2;     /**< \brief [3:2] UCB_CS_PFLASH_OTP0_ORIG OTP set 2 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP03O:2;     /**< \brief [5:4] UCB_CS_PFLASH_OTP0_ORIG OTP set 3 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINAPUBPO:2;     /**< \brief [7:6] UCB_CS_PFLASH_OTP0_ORIG APU bypass confirmation state (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit PROINOTP01C:2;     /**< \brief [17:16] UCB_CS_PFLASH_OTP0_COPY OTP set 1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP02C:2;     /**< \brief [19:18] UCB_CS_PFLASH_OTP0_COPY OTP set 2 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP03C:2;     /**< \brief [21:20] UCB_CS_PFLASH_OTP0_COPY OTP set 3 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINAPUBPC:2;     /**< \brief [23:22] UCB_CS_PFLASH_OTP0_COPY APU bypass confirmation state (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_GP_CSRM_CONFIRMC_Bits;

/** \brief CSRM debug configuration */
typedef struct _Ifx_DMU_GP_CSRM_DBGCFG_Bits
{
    __I  Ifx_UReg_32Bit DESTDBG:2;         /**< \brief [1:0] Destructive Debug Entry (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_DMU_GP_CSRM_DBGCFG_Bits;

/** \brief CSRM debug mode */
typedef struct _Ifx_DMU_GP_CSRM_DBGMODE_Bits
{
    __I  Ifx_UReg_32Bit EDDM:2;            /**< \brief [1:0] Entered Destructive Debug Mode (rh) */
    __I  Ifx_UReg_32Bit :30;               /**< \brief [31:2] \internal Reserved */
} Ifx_DMU_GP_CSRM_DBGMODE_Bits;

/** \brief CSRM DFLASH ECC control register */
typedef struct _Ifx_DMU_GP_CSRM_DFECCC_Bits
{
    __O  Ifx_UReg_32Bit CLR:2;             /**< \brief [1:0] Clear ECC status bits (w) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [27:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ECCCORDIS:2;       /**< \brief [29:28] ECC correction disable (rw) */
    __IO Ifx_UReg_32Bit TRAPDIS:2;         /**< \brief [31:30] ECC trap disable (rw) */
} Ifx_DMU_GP_CSRM_DFECCC_Bits;

/** \brief CSRM DFLASH ECC read register */
typedef struct _Ifx_DMU_GP_CSRM_DFECCR_Bits
{
    __I  Ifx_Strict_32Bit RCODE:22;        /**< \brief [21:0] Error correction code from the last read. (rh) */
    __I  Ifx_Strict_32Bit RES:2;           /**< \brief [23:22] Reserved - RES (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_GP_CSRM_DFECCR_Bits;

/** \brief CSRM DFLASH ECC status register */
typedef struct _Ifx_DMU_GP_CSRM_DFECCS_Bits
{
    __I  Ifx_Strict_32Bit SBER:1;          /**< \brief [0:0] Single Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit DBER:1;          /**< \brief [1:1] Double Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit TBER:1;          /**< \brief [2:2] Triple Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit UCER:1;          /**< \brief [3:3] Uncorrectable ECC Error (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __I  Ifx_Strict_32Bit ANER:1;          /**< \brief [8:8] Any ECC error (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __I  Ifx_Strict_32Bit ASBER:1;         /**< \brief [16:16] Accumulated Single Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit ADBER:1;         /**< \brief [17:17] Accumulated Double Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit ATBER:1;         /**< \brief [18:18] Accumulated Triple Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit AUCER:1;         /**< \brief [19:19] Accumulated Uncorrectable ECC Error (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit AANER:1;         /**< \brief [24:24] Accumulated Any ECC error (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_DMU_GP_CSRM_DFECCS_Bits;

/** \brief CSRM DFLASH ECC write register */
typedef struct _Ifx_DMU_GP_CSRM_DFECCW_Bits
{
    __IO Ifx_UReg_32Bit WCODE:22;          /**< \brief [21:0] Error correction code for write (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [29:22] \internal Reserved */
    __IO Ifx_UReg_32Bit ENCDIS:2;          /**< \brief [31:30] ECC encoding disable (rw) */
} Ifx_DMU_GP_CSRM_DFECCW_Bits;

/** \brief CSRM DFLASH margin control register */
typedef struct _Ifx_DMU_GP_CSRM_DFMARGIN_Bits
{
    __IO Ifx_UReg_32Bit MARSEL:2;          /**< \brief [1:0] Read margin selection (rw) */
    __IO Ifx_UReg_32Bit HMAR:1;            /**< \brief [2:2] Hard margin selection (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_DMU_GP_CSRM_DFMARGIN_Bits;

/** \brief CSRM DFLASH protection register */
typedef struct _Ifx_DMU_GP_CSRM_DFPROCON_Bits
{
    __I  Ifx_UReg_32Bit WP:1;              /**< \brief [0:0] Write protection (rh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMU_GP_CSRM_DFPROCON_Bits;

/** \brief CSRM DFLASH wait cycle register */
typedef struct _Ifx_DMU_GP_CSRM_DFWAIT_Bits
{
    __IO Ifx_UReg_32Bit RFLASH:5;          /**< \brief [4:0] CSRM DFLASH wait cycles for read (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_DMU_GP_CSRM_DFWAIT_Bits;

/** \brief CSRM PFLASH ECC write register */
typedef struct _Ifx_DMU_GP_CSRM_PFECCW_Bits
{
    __IO Ifx_UReg_32Bit WCODE:22;          /**< \brief [21:0] Error correction code for write (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [29:22] \internal Reserved */
    __IO Ifx_UReg_32Bit ENCDIS:2;          /**< \brief [31:30] ECC encoding disable (rw) */
} Ifx_DMU_GP_CSRM_PFECCW_Bits;

/** \brief CSRM PFLASH bank erase counter priority configuration 0 */
typedef struct _Ifx_DMU_GP_CSRM_PFECPRIO0_Bits
{
    __I  Ifx_UReg_32Bit S0LH:1;            /**< \brief [0:0] PFLASH sector 0 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S1LH:1;            /**< \brief [1:1] PFLASH sector 1 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S2LH:1;            /**< \brief [2:2] PFLASH sector 2 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S3LH:1;            /**< \brief [3:3] PFLASH sector 3 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S4LH:1;            /**< \brief [4:4] PFLASH sector 4 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S5LH:1;            /**< \brief [5:5] PFLASH sector 5 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S6LH:1;            /**< \brief [6:6] PFLASH sector 6 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S7LH:1;            /**< \brief [7:7] PFLASH sector 7 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S8LH:1;            /**< \brief [8:8] PFLASH sector 8 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S9LH:1;            /**< \brief [9:9] PFLASH sector 9 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S10LH:1;           /**< \brief [10:10] PFLASH sector 10 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S11LH:1;           /**< \brief [11:11] PFLASH sector 11 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S12LH:1;           /**< \brief [12:12] PFLASH sector 12 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S13LH:1;           /**< \brief [13:13] PFLASH sector 13 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S14LH:1;           /**< \brief [14:14] PFLASH sector 14 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S15LH:1;           /**< \brief [15:15] PFLASH sector 15 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S16LH:1;           /**< \brief [16:16] PFLASH sector 16 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S17LH:1;           /**< \brief [17:17] PFLASH sector 17 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S18LH:1;           /**< \brief [18:18] PFLASH sector 18 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S19LH:1;           /**< \brief [19:19] PFLASH sector 19 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S20LH:1;           /**< \brief [20:20] PFLASH sector 20 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S21LH:1;           /**< \brief [21:21] PFLASH sector 21 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S22LH:1;           /**< \brief [22:22] PFLASH sector 22 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S23LH:1;           /**< \brief [23:23] PFLASH sector 23 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S24LH:1;           /**< \brief [24:24] PFLASH sector 24 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S25LH:1;           /**< \brief [25:25] PFLASH sector 25 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S26LH:1;           /**< \brief [26:26] PFLASH sector 26 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S27LH:1;           /**< \brief [27:27] PFLASH sector 27 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S28LH:1;           /**< \brief [28:28] PFLASH sector 28 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S29LH:1;           /**< \brief [29:29] PFLASH sector 29 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S30LH:1;           /**< \brief [30:30] PFLASH sector 30 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S31LH:1;           /**< \brief [31:31] PFLASH sector 31 erase counter priority (rh) */
} Ifx_DMU_GP_CSRM_PFECPRIO0_Bits;

/** \brief CSRM PFLASH bank erase counter priority configuration 1 */
typedef struct _Ifx_DMU_GP_CSRM_PFECPRIO1_Bits
{
    __I  Ifx_UReg_32Bit S32LH:1;           /**< \brief [0:0] PFLASH sector 32 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S33LH:1;           /**< \brief [1:1] PFLASH sector 33 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S34LH:1;           /**< \brief [2:2] PFLASH sector 34 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S35LH:1;           /**< \brief [3:3] PFLASH sector 35 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S36LH:1;           /**< \brief [4:4] PFLASH sector 36 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S37LH:1;           /**< \brief [5:5] PFLASH sector 37 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S38LH:1;           /**< \brief [6:6] PFLASH sector 38 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S39LH:1;           /**< \brief [7:7] PFLASH sector 39 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S40LH:1;           /**< \brief [8:8] PFLASH sector 40 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S41LH:1;           /**< \brief [9:9] PFLASH sector 41 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S42LH:1;           /**< \brief [10:10] PFLASH sector 42 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S43LH:1;           /**< \brief [11:11] PFLASH sector 43 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S44LH:1;           /**< \brief [12:12] PFLASH sector 44 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S45LH:1;           /**< \brief [13:13] PFLASH sector 45 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S46LH:1;           /**< \brief [14:14] PFLASH sector 46 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S47LH:1;           /**< \brief [15:15] PFLASH sector 47 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S48LH:1;           /**< \brief [16:16] PFLASH sector 48 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S49LH:1;           /**< \brief [17:17] PFLASH sector 49 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S50LH:1;           /**< \brief [18:18] PFLASH sector 50 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S51LH:1;           /**< \brief [19:19] PFLASH sector 51 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S52LH:1;           /**< \brief [20:20] PFLASH sector 52 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S53LH:1;           /**< \brief [21:21] PFLASH sector 53 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S54LH:1;           /**< \brief [22:22] PFLASH sector 54 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S55LH:1;           /**< \brief [23:23] PFLASH sector 55 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S56LH:1;           /**< \brief [24:24] PFLASH sector 56 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S57LH:1;           /**< \brief [25:25] PFLASH sector 57 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S58LH:1;           /**< \brief [26:26] PFLASH sector 58 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S59LH:1;           /**< \brief [27:27] PFLASH sector 59 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S60LH:1;           /**< \brief [28:28] PFLASH sector 60 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S61LH:1;           /**< \brief [29:29] PFLASH sector 61 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S62LH:1;           /**< \brief [30:30] PFLASH sector 62 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S63LH:1;           /**< \brief [31:31] PFLASH sector 63 erase counter priority (rh) */
} Ifx_DMU_GP_CSRM_PFECPRIO1_Bits;

/** \brief CSRM PFLASH bank erase counter priority configuration 2 */
typedef struct _Ifx_DMU_GP_CSRM_PFECPRIO2_Bits
{
    __I  Ifx_UReg_32Bit S64LH:1;           /**< \brief [0:0] PFLASH sector 64 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S65LH:1;           /**< \brief [1:1] PFLASH sector 65 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S66LH:1;           /**< \brief [2:2] PFLASH sector 66 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S67LH:1;           /**< \brief [3:3] PFLASH sector 67 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S68LH:1;           /**< \brief [4:4] PFLASH sector 68 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S69LH:1;           /**< \brief [5:5] PFLASH sector 69 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S70LH:1;           /**< \brief [6:6] PFLASH sector 70 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S71LH:1;           /**< \brief [7:7] PFLASH sector 71 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S72LH:1;           /**< \brief [8:8] PFLASH sector 72 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S73LH:1;           /**< \brief [9:9] PFLASH sector 73 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S74LH:1;           /**< \brief [10:10] PFLASH sector 74 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S75LH:1;           /**< \brief [11:11] PFLASH sector 75 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S76LH:1;           /**< \brief [12:12] PFLASH sector 76 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S77LH:1;           /**< \brief [13:13] PFLASH sector 77 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S78LH:1;           /**< \brief [14:14] PFLASH sector 78 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S79LH:1;           /**< \brief [15:15] PFLASH sector 79 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S80LH:1;           /**< \brief [16:16] PFLASH sector 80 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S81LH:1;           /**< \brief [17:17] PFLASH sector 81 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S82LH:1;           /**< \brief [18:18] PFLASH sector 82 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S83LH:1;           /**< \brief [19:19] PFLASH sector 83 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S84LH:1;           /**< \brief [20:20] PFLASH sector 84 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S85LH:1;           /**< \brief [21:21] PFLASH sector 85 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S86LH:1;           /**< \brief [22:22] PFLASH sector 86 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S87LH:1;           /**< \brief [23:23] PFLASH sector 87 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S88LH:1;           /**< \brief [24:24] PFLASH sector 88 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S89LH:1;           /**< \brief [25:25] PFLASH sector 89 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S90LH:1;           /**< \brief [26:26] PFLASH sector 90 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S91LH:1;           /**< \brief [27:27] PFLASH sector 91 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S92LH:1;           /**< \brief [28:28] PFLASH sector 92 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S93LH:1;           /**< \brief [29:29] PFLASH sector 93 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S94LH:1;           /**< \brief [30:30] PFLASH sector 94 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S95LH:1;           /**< \brief [31:31] PFLASH sector 95 erase counter priority (rh) */
} Ifx_DMU_GP_CSRM_PFECPRIO2_Bits;

/** \brief CSRM PFLASH bank erase counter priority configuration 3 */
typedef struct _Ifx_DMU_GP_CSRM_PFECPRIO3_Bits
{
    __I  Ifx_UReg_32Bit S96LH:1;           /**< \brief [0:0] PFLASH sector 96 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S97LH:1;           /**< \brief [1:1] PFLASH sector 97 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S98LH:1;           /**< \brief [2:2] PFLASH sector 98 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S99LH:1;           /**< \brief [3:3] PFLASH sector 99 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S100LH:1;          /**< \brief [4:4] PFLASH sector 100 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S101LH:1;          /**< \brief [5:5] PFLASH sector 101 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S102LH:1;          /**< \brief [6:6] PFLASH sector 102 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S103LH:1;          /**< \brief [7:7] PFLASH sector 103 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S104LH:1;          /**< \brief [8:8] PFLASH sector 104 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S105LH:1;          /**< \brief [9:9] PFLASH sector 105 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S106LH:1;          /**< \brief [10:10] PFLASH sector 106 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S107LH:1;          /**< \brief [11:11] PFLASH sector 107 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S108LH:1;          /**< \brief [12:12] PFLASH sector 108 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S109LH:1;          /**< \brief [13:13] PFLASH sector 109 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S110LH:1;          /**< \brief [14:14] PFLASH sector 110 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S111LH:1;          /**< \brief [15:15] PFLASH sector 111 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S112LH:1;          /**< \brief [16:16] PFLASH sector 112 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S113LH:1;          /**< \brief [17:17] PFLASH sector 113 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S114LH:1;          /**< \brief [18:18] PFLASH sector 114 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S115LH:1;          /**< \brief [19:19] PFLASH sector 115 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S116LH:1;          /**< \brief [20:20] PFLASH sector 116 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S117LH:1;          /**< \brief [21:21] PFLASH sector 117 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S118LH:1;          /**< \brief [22:22] PFLASH sector 118 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S119LH:1;          /**< \brief [23:23] PFLASH sector 119 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S120LH:1;          /**< \brief [24:24] PFLASH sector 120 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S121LH:1;          /**< \brief [25:25] PFLASH sector 121 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S122LH:1;          /**< \brief [26:26] PFLASH sector 122 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S123LH:1;          /**< \brief [27:27] PFLASH sector 123 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S124LH:1;          /**< \brief [28:28] PFLASH sector 124 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S125LH:1;          /**< \brief [29:29] PFLASH sector 125 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S126LH:1;          /**< \brief [30:30] PFLASH sector 126 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S127LH:1;          /**< \brief [31:31] PFLASH sector 127 erase counter priority (rh) */
} Ifx_DMU_GP_CSRM_PFECPRIO3_Bits;

/** \brief CSRM PFLASH error injection register */
typedef struct _Ifx_DMU_GP_CSRM_PFERRINJ_Bits
{
    __O  Ifx_UReg_32Bit WSERRINJ:1;        /**< \brief [0:0] CSRM PFLASH Wait State ECC error injection (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMU_GP_CSRM_PFERRINJ_Bits;

/** \brief CSRM PFLASH bank permanent write once protection configuration 0 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWOP0_Bits
{
    __I  Ifx_UReg_32Bit S0PWOP:1;          /**< \brief [0:0] PFLASH sector 0 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S1PWOP:1;          /**< \brief [1:1] PFLASH sector 1 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S2PWOP:1;          /**< \brief [2:2] PFLASH sector 2 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S3PWOP:1;          /**< \brief [3:3] PFLASH sector 3 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S4PWOP:1;          /**< \brief [4:4] PFLASH sector 4 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S5PWOP:1;          /**< \brief [5:5] PFLASH sector 5 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S6PWOP:1;          /**< \brief [6:6] PFLASH sector 6 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S7PWOP:1;          /**< \brief [7:7] PFLASH sector 7 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S8PWOP:1;          /**< \brief [8:8] PFLASH sector 8 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S9PWOP:1;          /**< \brief [9:9] PFLASH sector 9 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S10PWOP:1;         /**< \brief [10:10] PFLASH sector 10 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S11PWOP:1;         /**< \brief [11:11] PFLASH sector 11 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S12PWOP:1;         /**< \brief [12:12] PFLASH sector 12 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S13PWOP:1;         /**< \brief [13:13] PFLASH sector 13 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S14PWOP:1;         /**< \brief [14:14] PFLASH sector 14 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S15PWOP:1;         /**< \brief [15:15] PFLASH sector 15 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S16PWOP:1;         /**< \brief [16:16] PFLASH sector 16 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S17PWOP:1;         /**< \brief [17:17] PFLASH sector 17 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S18PWOP:1;         /**< \brief [18:18] PFLASH sector 18 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S19PWOP:1;         /**< \brief [19:19] PFLASH sector 19 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S20PWOP:1;         /**< \brief [20:20] PFLASH sector 20 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S21PWOP:1;         /**< \brief [21:21] PFLASH sector 21 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S22PWOP:1;         /**< \brief [22:22] PFLASH sector 22 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S23PWOP:1;         /**< \brief [23:23] PFLASH sector 23 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S24PWOP:1;         /**< \brief [24:24] PFLASH sector 24 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S25PWOP:1;         /**< \brief [25:25] PFLASH sector 25 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S26PWOP:1;         /**< \brief [26:26] PFLASH sector 26 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S27PWOP:1;         /**< \brief [27:27] PFLASH sector 27 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S28PWOP:1;         /**< \brief [28:28] PFLASH sector 28 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S29PWOP:1;         /**< \brief [29:29] PFLASH sector 29 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S30PWOP:1;         /**< \brief [30:30] PFLASH sector 30 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S31PWOP:1;         /**< \brief [31:31] PFLASH sector 31 permanent write once protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP0_Bits;

/** \brief CSRM PFLASH bank permanent write once protection configuration 1 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWOP1_Bits
{
    __I  Ifx_UReg_32Bit S32PWOP:1;         /**< \brief [0:0] PFLASH sector 32 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S33PWOP:1;         /**< \brief [1:1] PFLASH sector 33 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S34PWOP:1;         /**< \brief [2:2] PFLASH sector 34 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S35PWOP:1;         /**< \brief [3:3] PFLASH sector 35 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S36PWOP:1;         /**< \brief [4:4] PFLASH sector 36 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S37PWOP:1;         /**< \brief [5:5] PFLASH sector 37 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S38PWOP:1;         /**< \brief [6:6] PFLASH sector 38 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S39PWOP:1;         /**< \brief [7:7] PFLASH sector 39 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S40PWOP:1;         /**< \brief [8:8] PFLASH sector 40 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S41PWOP:1;         /**< \brief [9:9] PFLASH sector 41 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S42PWOP:1;         /**< \brief [10:10] PFLASH sector 42 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S43PWOP:1;         /**< \brief [11:11] PFLASH sector 43 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S44PWOP:1;         /**< \brief [12:12] PFLASH sector 44 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S45PWOP:1;         /**< \brief [13:13] PFLASH sector 45 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S46PWOP:1;         /**< \brief [14:14] PFLASH sector 46 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S47PWOP:1;         /**< \brief [15:15] PFLASH sector 47 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S48PWOP:1;         /**< \brief [16:16] PFLASH sector 48 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S49PWOP:1;         /**< \brief [17:17] PFLASH sector 49 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S50PWOP:1;         /**< \brief [18:18] PFLASH sector 50 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S51PWOP:1;         /**< \brief [19:19] PFLASH sector 51 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S52PWOP:1;         /**< \brief [20:20] PFLASH sector 52 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S53PWOP:1;         /**< \brief [21:21] PFLASH sector 53 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S54PWOP:1;         /**< \brief [22:22] PFLASH sector 54 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S55PWOP:1;         /**< \brief [23:23] PFLASH sector 55 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S56PWOP:1;         /**< \brief [24:24] PFLASH sector 56 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S57PWOP:1;         /**< \brief [25:25] PFLASH sector 57 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S58PWOP:1;         /**< \brief [26:26] PFLASH sector 58 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S59PWOP:1;         /**< \brief [27:27] PFLASH sector 59 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S60PWOP:1;         /**< \brief [28:28] PFLASH sector 60 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S61PWOP:1;         /**< \brief [29:29] PFLASH sector 61 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S62PWOP:1;         /**< \brief [30:30] PFLASH sector 62 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S63PWOP:1;         /**< \brief [31:31] PFLASH sector 63 permanent write once protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP1_Bits;

/** \brief CSRM PFLASH bank permanent write once protection configuration 2 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWOP2_Bits
{
    __I  Ifx_UReg_32Bit S64PWOP:1;         /**< \brief [0:0] PFLASH sector 64 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S65PWOP:1;         /**< \brief [1:1] PFLASH sector 65 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S66PWOP:1;         /**< \brief [2:2] PFLASH sector 66 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S67PWOP:1;         /**< \brief [3:3] PFLASH sector 67 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S68PWOP:1;         /**< \brief [4:4] PFLASH sector 68 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S69PWOP:1;         /**< \brief [5:5] PFLASH sector 69 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S70PWOP:1;         /**< \brief [6:6] PFLASH sector 70 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S71PWOP:1;         /**< \brief [7:7] PFLASH sector 71 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S72PWOP:1;         /**< \brief [8:8] PFLASH sector 72 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S73PWOP:1;         /**< \brief [9:9] PFLASH sector 73 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S74PWOP:1;         /**< \brief [10:10] PFLASH sector 74 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S75PWOP:1;         /**< \brief [11:11] PFLASH sector 75 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S76PWOP:1;         /**< \brief [12:12] PFLASH sector 76 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S77PWOP:1;         /**< \brief [13:13] PFLASH sector 77 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S78PWOP:1;         /**< \brief [14:14] PFLASH sector 78 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S79PWOP:1;         /**< \brief [15:15] PFLASH sector 79 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S80PWOP:1;         /**< \brief [16:16] PFLASH sector 80 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S81PWOP:1;         /**< \brief [17:17] PFLASH sector 81 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S82PWOP:1;         /**< \brief [18:18] PFLASH sector 82 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S83PWOP:1;         /**< \brief [19:19] PFLASH sector 83 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S84PWOP:1;         /**< \brief [20:20] PFLASH sector 84 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S85PWOP:1;         /**< \brief [21:21] PFLASH sector 85 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S86PWOP:1;         /**< \brief [22:22] PFLASH sector 86 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S87PWOP:1;         /**< \brief [23:23] PFLASH sector 87 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S88PWOP:1;         /**< \brief [24:24] PFLASH sector 88 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S89PWOP:1;         /**< \brief [25:25] PFLASH sector 89 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S90PWOP:1;         /**< \brief [26:26] PFLASH sector 90 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S91PWOP:1;         /**< \brief [27:27] PFLASH sector 91 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S92PWOP:1;         /**< \brief [28:28] PFLASH sector 92 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S93PWOP:1;         /**< \brief [29:29] PFLASH sector 93 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S94PWOP:1;         /**< \brief [30:30] PFLASH sector 94 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S95PWOP:1;         /**< \brief [31:31] PFLASH sector 95 permanent write once protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP2_Bits;

/** \brief CSRM PFLASH bank permanent write once protection configuration 3 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWOP3_Bits
{
    __I  Ifx_UReg_32Bit S96PWOP:1;         /**< \brief [0:0] PFLASH sector 96 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S97PWOP:1;         /**< \brief [1:1] PFLASH sector 97 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S98PWOP:1;         /**< \brief [2:2] PFLASH sector 98 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S99PWOP:1;         /**< \brief [3:3] PFLASH sector 99 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S100PWOP:1;        /**< \brief [4:4] PFLASH sector 100 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S101PWOP:1;        /**< \brief [5:5] PFLASH sector 101 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S102PWOP:1;        /**< \brief [6:6] PFLASH sector 102 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S103PWOP:1;        /**< \brief [7:7] PFLASH sector 103 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S104PWOP:1;        /**< \brief [8:8] PFLASH sector 104 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S105PWOP:1;        /**< \brief [9:9] PFLASH sector 105 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S106PWOP:1;        /**< \brief [10:10] PFLASH sector 106 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S107PWOP:1;        /**< \brief [11:11] PFLASH sector 107 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S108PWOP:1;        /**< \brief [12:12] PFLASH sector 108 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S109PWOP:1;        /**< \brief [13:13] PFLASH sector 109 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S110PWOP:1;        /**< \brief [14:14] PFLASH sector 110 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S111PWOP:1;        /**< \brief [15:15] PFLASH sector 111 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S112PWOP:1;        /**< \brief [16:16] PFLASH sector 112 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S113PWOP:1;        /**< \brief [17:17] PFLASH sector 113 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S114PWOP:1;        /**< \brief [18:18] PFLASH sector 114 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S115PWOP:1;        /**< \brief [19:19] PFLASH sector 115 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S116PWOP:1;        /**< \brief [20:20] PFLASH sector 116 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S117PWOP:1;        /**< \brief [21:21] PFLASH sector 117 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S118PWOP:1;        /**< \brief [22:22] PFLASH sector 118 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S119PWOP:1;        /**< \brief [23:23] PFLASH sector 119 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S120PWOP:1;        /**< \brief [24:24] PFLASH sector 120 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S121PWOP:1;        /**< \brief [25:25] PFLASH sector 121 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S122PWOP:1;        /**< \brief [26:26] PFLASH sector 122 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S123PWOP:1;        /**< \brief [27:27] PFLASH sector 123 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S124PWOP:1;        /**< \brief [28:28] PFLASH sector 124 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S125PWOP:1;        /**< \brief [29:29] PFLASH sector 125 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S126PWOP:1;        /**< \brief [30:30] PFLASH sector 126 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S127PWOP:1;        /**< \brief [31:31] PFLASH sector 127 permanent write once protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP3_Bits;

/** \brief CSRM PFLASH bank permanent write protection configuration 0 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWP0_Bits
{
    __I  Ifx_UReg_32Bit S0PWP:1;           /**< \brief [0:0] PFLASH sector 0 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S1PWP:1;           /**< \brief [1:1] PFLASH sector 1 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S2PWP:1;           /**< \brief [2:2] PFLASH sector 2 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S3PWP:1;           /**< \brief [3:3] PFLASH sector 3 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S4PWP:1;           /**< \brief [4:4] PFLASH sector 4 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S5PWP:1;           /**< \brief [5:5] PFLASH sector 5 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S6PWP:1;           /**< \brief [6:6] PFLASH sector 6 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S7PWP:1;           /**< \brief [7:7] PFLASH sector 7 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S8PWP:1;           /**< \brief [8:8] PFLASH sector 8 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S9PWP:1;           /**< \brief [9:9] PFLASH sector 9 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S10PWP:1;          /**< \brief [10:10] PFLASH sector 10 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S11PWP:1;          /**< \brief [11:11] PFLASH sector 11 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S12PWP:1;          /**< \brief [12:12] PFLASH sector 12 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S13PWP:1;          /**< \brief [13:13] PFLASH sector 13 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S14PWP:1;          /**< \brief [14:14] PFLASH sector 14 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S15PWP:1;          /**< \brief [15:15] PFLASH sector 15 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S16PWP:1;          /**< \brief [16:16] PFLASH sector 16 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S17PWP:1;          /**< \brief [17:17] PFLASH sector 17 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S18PWP:1;          /**< \brief [18:18] PFLASH sector 18 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S19PWP:1;          /**< \brief [19:19] PFLASH sector 19 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S20PWP:1;          /**< \brief [20:20] PFLASH sector 20 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S21PWP:1;          /**< \brief [21:21] PFLASH sector 21 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S22PWP:1;          /**< \brief [22:22] PFLASH sector 22 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S23PWP:1;          /**< \brief [23:23] PFLASH sector 23 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S24PWP:1;          /**< \brief [24:24] PFLASH sector 24 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S25PWP:1;          /**< \brief [25:25] PFLASH sector 25 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S26PWP:1;          /**< \brief [26:26] PFLASH sector 26 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S27PWP:1;          /**< \brief [27:27] PFLASH sector 27 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S28PWP:1;          /**< \brief [28:28] PFLASH sector 28 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S29PWP:1;          /**< \brief [29:29] PFLASH sector 29 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S30PWP:1;          /**< \brief [30:30] PFLASH sector 30 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S31PWP:1;          /**< \brief [31:31] PFLASH sector 31 permanent write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWP0_Bits;

/** \brief CSRM PFLASH bank permanent write protection configuration 1 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWP1_Bits
{
    __I  Ifx_UReg_32Bit S32PWP:1;          /**< \brief [0:0] PFLASH sector 32 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S33PWP:1;          /**< \brief [1:1] PFLASH sector 33 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S34PWP:1;          /**< \brief [2:2] PFLASH sector 34 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S35PWP:1;          /**< \brief [3:3] PFLASH sector 35 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S36PWP:1;          /**< \brief [4:4] PFLASH sector 36 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S37PWP:1;          /**< \brief [5:5] PFLASH sector 37 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S38PWP:1;          /**< \brief [6:6] PFLASH sector 38 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S39PWP:1;          /**< \brief [7:7] PFLASH sector 39 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S40PWP:1;          /**< \brief [8:8] PFLASH sector 40 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S41PWP:1;          /**< \brief [9:9] PFLASH sector 41 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S42PWP:1;          /**< \brief [10:10] PFLASH sector 42 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S43PWP:1;          /**< \brief [11:11] PFLASH sector 43 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S44PWP:1;          /**< \brief [12:12] PFLASH sector 44 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S45PWP:1;          /**< \brief [13:13] PFLASH sector 45 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S46PWP:1;          /**< \brief [14:14] PFLASH sector 46 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S47PWP:1;          /**< \brief [15:15] PFLASH sector 47 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S48PWP:1;          /**< \brief [16:16] PFLASH sector 48 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S49PWP:1;          /**< \brief [17:17] PFLASH sector 49 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S50PWP:1;          /**< \brief [18:18] PFLASH sector 50 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S51PWP:1;          /**< \brief [19:19] PFLASH sector 51 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S52PWP:1;          /**< \brief [20:20] PFLASH sector 52 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S53PWP:1;          /**< \brief [21:21] PFLASH sector 53 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S54PWP:1;          /**< \brief [22:22] PFLASH sector 54 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S55PWP:1;          /**< \brief [23:23] PFLASH sector 55 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S56PWP:1;          /**< \brief [24:24] PFLASH sector 56 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S57PWP:1;          /**< \brief [25:25] PFLASH sector 57 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S58PWP:1;          /**< \brief [26:26] PFLASH sector 58 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S59PWP:1;          /**< \brief [27:27] PFLASH sector 59 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S60PWP:1;          /**< \brief [28:28] PFLASH sector 60 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S61PWP:1;          /**< \brief [29:29] PFLASH sector 61 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S62PWP:1;          /**< \brief [30:30] PFLASH sector 62 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S63PWP:1;          /**< \brief [31:31] PFLASH sector 63 permanent write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWP1_Bits;

/** \brief CSRM PFLASH bank permanent write protection configuration 2 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWP2_Bits
{
    __I  Ifx_UReg_32Bit S64PWP:1;          /**< \brief [0:0] PFLASH sector 64 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S65PWP:1;          /**< \brief [1:1] PFLASH sector 65 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S66PWP:1;          /**< \brief [2:2] PFLASH sector 66 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S67PWP:1;          /**< \brief [3:3] PFLASH sector 67 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S68PWP:1;          /**< \brief [4:4] PFLASH sector 68 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S69PWP:1;          /**< \brief [5:5] PFLASH sector 69 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S70PWP:1;          /**< \brief [6:6] PFLASH sector 70 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S71PWP:1;          /**< \brief [7:7] PFLASH sector 71 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S72PWP:1;          /**< \brief [8:8] PFLASH sector 72 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S73PWP:1;          /**< \brief [9:9] PFLASH sector 73 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S74PWP:1;          /**< \brief [10:10] PFLASH sector 74 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S75PWP:1;          /**< \brief [11:11] PFLASH sector 75 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S76PWP:1;          /**< \brief [12:12] PFLASH sector 76 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S77PWP:1;          /**< \brief [13:13] PFLASH sector 77 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S78PWP:1;          /**< \brief [14:14] PFLASH sector 78 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S79PWP:1;          /**< \brief [15:15] PFLASH sector 79 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S80PWP:1;          /**< \brief [16:16] PFLASH sector 80 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S81PWP:1;          /**< \brief [17:17] PFLASH sector 81 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S82PWP:1;          /**< \brief [18:18] PFLASH sector 82 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S83PWP:1;          /**< \brief [19:19] PFLASH sector 83 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S84PWP:1;          /**< \brief [20:20] PFLASH sector 84 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S85PWP:1;          /**< \brief [21:21] PFLASH sector 85 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S86PWP:1;          /**< \brief [22:22] PFLASH sector 86 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S87PWP:1;          /**< \brief [23:23] PFLASH sector 87 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S88PWP:1;          /**< \brief [24:24] PFLASH sector 88 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S89PWP:1;          /**< \brief [25:25] PFLASH sector 89 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S90PWP:1;          /**< \brief [26:26] PFLASH sector 90 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S91PWP:1;          /**< \brief [27:27] PFLASH sector 91 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S92PWP:1;          /**< \brief [28:28] PFLASH sector 92 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S93PWP:1;          /**< \brief [29:29] PFLASH sector 93 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S94PWP:1;          /**< \brief [30:30] PFLASH sector 94 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S95PWP:1;          /**< \brief [31:31] PFLASH sector 95 permanent write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWP2_Bits;

/** \brief CSRM PFLASH bank permanent write protection configuration 3 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONPWP3_Bits
{
    __I  Ifx_UReg_32Bit S96PWP:1;          /**< \brief [0:0] PFLASH sector 96 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S97PWP:1;          /**< \brief [1:1] PFLASH sector 97 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S98PWP:1;          /**< \brief [2:2] PFLASH sector 98 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S99PWP:1;          /**< \brief [3:3] PFLASH sector 99 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S100PWP:1;         /**< \brief [4:4] PFLASH sector 100 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S101PWP:1;         /**< \brief [5:5] PFLASH sector 101 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S102PWP:1;         /**< \brief [6:6] PFLASH sector 102 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S103PWP:1;         /**< \brief [7:7] PFLASH sector 103 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S104PWP:1;         /**< \brief [8:8] PFLASH sector 104 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S105PWP:1;         /**< \brief [9:9] PFLASH sector 105 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S106PWP:1;         /**< \brief [10:10] PFLASH sector 106 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S107PWP:1;         /**< \brief [11:11] PFLASH sector 107 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S108PWP:1;         /**< \brief [12:12] PFLASH sector 108 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S109PWP:1;         /**< \brief [13:13] PFLASH sector 109 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S110PWP:1;         /**< \brief [14:14] PFLASH sector 110 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S111PWP:1;         /**< \brief [15:15] PFLASH sector 111 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S112PWP:1;         /**< \brief [16:16] PFLASH sector 112 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S113PWP:1;         /**< \brief [17:17] PFLASH sector 113 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S114PWP:1;         /**< \brief [18:18] PFLASH sector 114 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S115PWP:1;         /**< \brief [19:19] PFLASH sector 115 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S116PWP:1;         /**< \brief [20:20] PFLASH sector 116 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S117PWP:1;         /**< \brief [21:21] PFLASH sector 117 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S118PWP:1;         /**< \brief [22:22] PFLASH sector 118 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S119PWP:1;         /**< \brief [23:23] PFLASH sector 119 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S120PWP:1;         /**< \brief [24:24] PFLASH sector 120 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S121PWP:1;         /**< \brief [25:25] PFLASH sector 121 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S122PWP:1;         /**< \brief [26:26] PFLASH sector 122 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S123PWP:1;         /**< \brief [27:27] PFLASH sector 123 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S124PWP:1;         /**< \brief [28:28] PFLASH sector 124 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S125PWP:1;         /**< \brief [29:29] PFLASH sector 125 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S126PWP:1;         /**< \brief [30:30] PFLASH sector 126 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S127PWP:1;         /**< \brief [31:31] PFLASH sector 127 permanent write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONPWP3_Bits;

/** \brief CSRM PFLASH bank write protection configuration 0 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONWP0_Bits
{
    __I  Ifx_UReg_32Bit S0WP:1;            /**< \brief [0:0] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S1WP:1;            /**< \brief [1:1] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S2WP:1;            /**< \brief [2:2] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S3WP:1;            /**< \brief [3:3] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S4WP:1;            /**< \brief [4:4] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S5WP:1;            /**< \brief [5:5] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S6WP:1;            /**< \brief [6:6] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S7WP:1;            /**< \brief [7:7] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S8WP:1;            /**< \brief [8:8] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S9WP:1;            /**< \brief [9:9] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S10WP:1;           /**< \brief [10:10] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S11WP:1;           /**< \brief [11:11] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S12WP:1;           /**< \brief [12:12] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S13WP:1;           /**< \brief [13:13] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S14WP:1;           /**< \brief [14:14] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S15WP:1;           /**< \brief [15:15] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S16WP:1;           /**< \brief [16:16] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S17WP:1;           /**< \brief [17:17] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S18WP:1;           /**< \brief [18:18] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S19WP:1;           /**< \brief [19:19] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S20WP:1;           /**< \brief [20:20] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S21WP:1;           /**< \brief [21:21] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S22WP:1;           /**< \brief [22:22] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S23WP:1;           /**< \brief [23:23] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S24WP:1;           /**< \brief [24:24] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S25WP:1;           /**< \brief [25:25] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S26WP:1;           /**< \brief [26:26] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S27WP:1;           /**< \brief [27:27] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S28WP:1;           /**< \brief [28:28] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S29WP:1;           /**< \brief [29:29] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S30WP:1;           /**< \brief [30:30] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S31WP:1;           /**< \brief [31:31] PFLASH sector x write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONWP0_Bits;

/** \brief CSRM PFLASH bank write protection configuration 1 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONWP1_Bits
{
    __I  Ifx_UReg_32Bit S32WP:1;           /**< \brief [0:0] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S33WP:1;           /**< \brief [1:1] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S34WP:1;           /**< \brief [2:2] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S35WP:1;           /**< \brief [3:3] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S36WP:1;           /**< \brief [4:4] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S37WP:1;           /**< \brief [5:5] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S38WP:1;           /**< \brief [6:6] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S39WP:1;           /**< \brief [7:7] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S40WP:1;           /**< \brief [8:8] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S41WP:1;           /**< \brief [9:9] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S42WP:1;           /**< \brief [10:10] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S43WP:1;           /**< \brief [11:11] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S44WP:1;           /**< \brief [12:12] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S45WP:1;           /**< \brief [13:13] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S46WP:1;           /**< \brief [14:14] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S47WP:1;           /**< \brief [15:15] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S48WP:1;           /**< \brief [16:16] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S49WP:1;           /**< \brief [17:17] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S50WP:1;           /**< \brief [18:18] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S51WP:1;           /**< \brief [19:19] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S52WP:1;           /**< \brief [20:20] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S53WP:1;           /**< \brief [21:21] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S54WP:1;           /**< \brief [22:22] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S55WP:1;           /**< \brief [23:23] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S56WP:1;           /**< \brief [24:24] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S57WP:1;           /**< \brief [25:25] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S58WP:1;           /**< \brief [26:26] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S59WP:1;           /**< \brief [27:27] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S60WP:1;           /**< \brief [28:28] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S61WP:1;           /**< \brief [29:29] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S62WP:1;           /**< \brief [30:30] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S63WP:1;           /**< \brief [31:31] PFLASH sector x write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONWP1_Bits;

/** \brief CSRM PFLASH bank write protection configuration 2 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONWP2_Bits
{
    __I  Ifx_UReg_32Bit S64WP:1;           /**< \brief [0:0] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S65WP:1;           /**< \brief [1:1] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S66WP:1;           /**< \brief [2:2] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S67WP:1;           /**< \brief [3:3] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S68WP:1;           /**< \brief [4:4] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S69WP:1;           /**< \brief [5:5] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S70WP:1;           /**< \brief [6:6] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S71WP:1;           /**< \brief [7:7] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S72WP:1;           /**< \brief [8:8] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S73WP:1;           /**< \brief [9:9] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S74WP:1;           /**< \brief [10:10] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S75WP:1;           /**< \brief [11:11] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S76WP:1;           /**< \brief [12:12] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S77WP:1;           /**< \brief [13:13] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S78WP:1;           /**< \brief [14:14] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S79WP:1;           /**< \brief [15:15] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S80WP:1;           /**< \brief [16:16] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S81WP:1;           /**< \brief [17:17] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S82WP:1;           /**< \brief [18:18] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S83WP:1;           /**< \brief [19:19] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S84WP:1;           /**< \brief [20:20] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S85WP:1;           /**< \brief [21:21] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S86WP:1;           /**< \brief [22:22] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S87WP:1;           /**< \brief [23:23] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S88WP:1;           /**< \brief [24:24] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S89WP:1;           /**< \brief [25:25] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S90WP:1;           /**< \brief [26:26] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S91WP:1;           /**< \brief [27:27] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S92WP:1;           /**< \brief [28:28] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S93WP:1;           /**< \brief [29:29] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S94WP:1;           /**< \brief [30:30] PFLASH Sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S95WP:1;           /**< \brief [31:31] PFLASH Sector x write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONWP2_Bits;

/** \brief CSRM PFLASH bank write protection configuration 3 */
typedef struct _Ifx_DMU_GP_CSRM_PFPROCONWP3_Bits
{
    __I  Ifx_UReg_32Bit S96WP:1;           /**< \brief [0:0] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S97WP:1;           /**< \brief [1:1] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S98WP:1;           /**< \brief [2:2] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S99WP:1;           /**< \brief [3:3] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S100WP:1;          /**< \brief [4:4] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S101WP:1;          /**< \brief [5:5] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S102WP:1;          /**< \brief [6:6] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S103WP:1;          /**< \brief [7:7] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S104WP:1;          /**< \brief [8:8] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S105WP:1;          /**< \brief [9:9] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S106WP:1;          /**< \brief [10:10] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S107WP:1;          /**< \brief [11:11] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S108WP:1;          /**< \brief [12:12] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S109WP:1;          /**< \brief [13:13] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S110WP:1;          /**< \brief [14:14] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S111WP:1;          /**< \brief [15:15] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S112WP:1;          /**< \brief [16:16] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S113WP:1;          /**< \brief [17:17] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S114WP:1;          /**< \brief [18:18] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S115WP:1;          /**< \brief [19:19] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S116WP:1;          /**< \brief [20:20] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S117WP:1;          /**< \brief [21:21] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S118WP:1;          /**< \brief [22:22] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S119WP:1;          /**< \brief [23:23] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S120WP:1;          /**< \brief [24:24] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S121WP:1;          /**< \brief [25:25] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S122WP:1;          /**< \brief [26:26] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S123WP:1;          /**< \brief [27:27] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S124WP:1;          /**< \brief [28:28] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S125WP:1;          /**< \brief [29:29] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S126WP:1;          /**< \brief [30:30] PFLASH sector x write protection (rh) */
    __I  Ifx_UReg_32Bit S127WP:1;          /**< \brief [31:31] PFLASH sector x write protection (rh) */
} Ifx_DMU_GP_CSRM_PFPROCONWP3_Bits;

/** \brief CSRM PFLASH wait cycle register */
typedef struct _Ifx_DMU_GP_CSRM_PFWAIT_Bits
{
    __IO Ifx_UReg_32Bit RFLASH:5;          /**< \brief [4:0] CSRM PFLASH wait cycles for read (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_DMU_GP_CSRM_PFWAIT_Bits;

/** \brief CSRM UCB password protection register */
typedef struct _Ifx_DMU_GP_CSRM_PROTECT_Bits
{
    __I  Ifx_UReg_32Bit PRODISBMHD:1;      /**< \brief [0:0] UCB_CS_BMHD protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISUSERCFG:1;    /**< \brief [1:1] UCB_CSRM protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISSWAP:1;      /**< \brief [2:2] UCB_CS_SWAP protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISECPRIO:1;    /**< \brief [3:3] UCB_CS_ECPRIO protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISDBG:1;       /**< \brief [4:4] UCB_CS_DBGCS protection disabled (rh) */
    __I  Ifx_UReg_32Bit SRT:1;             /**< \brief [5:5] Secure retest password protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISUDATA0:1;    /**< \brief [6:6] UCB_CS_USER_DATA0 protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISUDATA1:1;    /**< \brief [7:7] UCB_CS_USER_DATA1 protection disabled (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [12:8] \internal Reserved */
    __I  Ifx_UReg_32Bit PRODISFL:1;        /**< \brief [13:13] HOST FLASH Protection Disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISD:1;         /**< \brief [14:14] CSRM DFLASH Protection Disabled (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [15:15] \internal Reserved */
    __I  Ifx_UReg_32Bit PRODISCSRMPF:1;    /**< \brief [16:16] CSRM PFLASH protection disable (rh) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [31:17] \internal Reserved */
} Ifx_DMU_GP_CSRM_PROTECT_Bits;

/** \brief HOST UCB confirmation codes register A */
typedef struct _Ifx_DMU_GP_HOST_CONFIRMA_Bits
{
    __I  Ifx_UReg_32Bit PROINMOID:2;       /**< \brief [1:0] UCB_RTC_MOID confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINMOCFG:2;      /**< \brief [3:2] UCB_RTC_MOCFG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINTEST:2;       /**< \brief [5:4] UCB_TEST confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROININFO:2;       /**< \brief [7:6] UCB_INFO confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINRTCCFG:2;     /**< \brief [9:8] UCB_RTCCFG Confirmation (rh) */
    __I  Ifx_UReg_32Bit PROINADCTRIM:2;    /**< \brief [11:10] UCB_ADCTRIM confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINUDATA0:2;     /**< \brief [13:12] UCB_USER_DATA0 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINUDATA1:2;     /**< \brief [15:14] UCB_USER_DATA1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD0:2;      /**< \brief [17:16] UCB_RTC_BMHD0 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD1:2;      /**< \brief [19:18] UCB_RTC_BMHD1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD2:2;      /**< \brief [21:20] UCB_RTC_BMHD2 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINBMHD3:2;      /**< \brief [23:22] UCB_RTC_BMHD3 confirmation state (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_GP_HOST_CONFIRMA_Bits;

/** \brief HOST UCB confirmation codes register B */
typedef struct _Ifx_DMU_GP_HOST_CONFIRMB_Bits
{
    __I  Ifx_UReg_32Bit PROINUSERCFGO:2;    /**< \brief [1:0] UCB_RTC_USERCFG_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINSWAPO:2;      /**< \brief [3:2] UCB_RTC_SWAP_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINFLASHO:2;     /**< \brief [5:4] UCB_RTC_FLASH_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINECPRIOO:2;    /**< \brief [7:6] UCB_RTC_ECPRIO_ORIG confirmation state (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit PROINUSERCFGC:2;    /**< \brief [17:16] UCB_RTC_USERCFG_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINSWAPC:2;      /**< \brief [19:18] UCB_RTC_SWAP_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINFLASHC:2;     /**< \brief [21:20] UCB_RTC_FLASH_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINECPRIOC:2;    /**< \brief [23:22] UCB_RTC_ECPRIO_COPY confirmation state (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_GP_HOST_CONFIRMB_Bits;

/** \brief HOST UCB confirmation codes register C */
typedef struct _Ifx_DMU_GP_HOST_CONFIRMC_Bits
{
    __I  Ifx_UReg_32Bit PROINOTP01O:2;     /**< \brief [1:0] UCB_RTC_PFLASH_OTP0_ORIG OTP set 1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP02O:2;     /**< \brief [3:2] UCB_RTC_PFLASH_OTP0_ORIG OTP set 2 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP03O:2;     /**< \brief [5:4] UCB_RTC_PFLASH_OTP0_ORIG OTP set 3 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP14O:2;     /**< \brief [7:6] UCB_RTC_PFLASH_OTP1_ORIG OTP set 4 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP15O:2;     /**< \brief [9:8] UCB_RTC_PFLASH_OTP1_ORIG OTP set 5 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP16O:2;     /**< \brief [11:10] UCB_RTC_PFLASH_OTP1_ORIG OTP set 6 confirmation state (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit PROINOTP01C:2;     /**< \brief [17:16] UCB_RTC_PFLASH_OTP0_COPY OTP set 1 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP02C:2;     /**< \brief [19:18] UCB_RTC_PFLASH_OTP0_COPY OTP set 2 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP03C:2;     /**< \brief [21:20] UCB_RTC_PFLASH_OTP0_COPY OTP set 3 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP14C:2;     /**< \brief [23:22] UCB_RTC_PFLASH_OTP1_COPY OTP set 4 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP15C:2;     /**< \brief [25:24] UCB_RTC_PFLASH_OTP1_COPY OTP set 5 confirmation state (rh) */
    __I  Ifx_UReg_32Bit PROINOTP16C:2;     /**< \brief [27:26] UCB_RTC_PFLASH_OTP1_COPY OTP set 6 confirmation state (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_DMU_GP_HOST_CONFIRMC_Bits;

/** \brief HOST DFLASH ECC control register */
typedef struct _Ifx_DMU_GP_HOST_DFECCC_Bits
{
    __O  Ifx_UReg_32Bit CLR:2;             /**< \brief [1:0] Clear ECC status bits (w) */
    __I  Ifx_UReg_32Bit :26;               /**< \brief [27:2] \internal Reserved */
    __IO Ifx_UReg_32Bit ECCCORDIS:2;       /**< \brief [29:28] ECC correction disable (rw) */
    __IO Ifx_UReg_32Bit TRAPDIS:2;         /**< \brief [31:30] ECC trap disable (rw) */
} Ifx_DMU_GP_HOST_DFECCC_Bits;

/** \brief HOST DFLASH ECC read register */
typedef struct _Ifx_DMU_GP_HOST_DFECCR_Bits
{
    __I  Ifx_Strict_32Bit RCODE:22;        /**< \brief [21:0] Error correction code from the last read. (rh) */
    __I  Ifx_Strict_32Bit RES:2;           /**< \brief [23:22] Reserved - RES (rh) */
    __I  Ifx_Strict_32Bit :8;              /**< \brief [31:24] \internal Reserved */
} Ifx_DMU_GP_HOST_DFECCR_Bits;

/** \brief HOST DFLASH ECC status register */
typedef struct _Ifx_DMU_GP_HOST_DFECCS_Bits
{
    __I  Ifx_Strict_32Bit SBER:1;          /**< \brief [0:0] Single Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit DBER:1;          /**< \brief [1:1] Double Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit TBER:1;          /**< \brief [2:2] Triple Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit UCER:1;          /**< \brief [3:3] Uncorrectable ECC Error (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [7:4] \internal Reserved */
    __I  Ifx_Strict_32Bit ANER:1;          /**< \brief [8:8] Any ECC error (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [15:9] \internal Reserved */
    __I  Ifx_Strict_32Bit ASBER:1;         /**< \brief [16:16] Accumulated Single Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit ADBER:1;         /**< \brief [17:17] Accumulated Double Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit ATBER:1;         /**< \brief [18:18] Accumulated Triple Bit ECC Error (rh) */
    __I  Ifx_Strict_32Bit AUCER:1;         /**< \brief [19:19] Accumulated Uncorrectable ECC Error (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [23:20] \internal Reserved */
    __I  Ifx_Strict_32Bit AANER:1;         /**< \brief [24:24] Accumulated Any ECC error (rh) */
    __I  Ifx_Strict_32Bit :7;              /**< \brief [31:25] \internal Reserved */
} Ifx_DMU_GP_HOST_DFECCS_Bits;

/** \brief HOST DFLASH ECC write register */
typedef struct _Ifx_DMU_GP_HOST_DFECCW_Bits
{
    __IO Ifx_UReg_32Bit WCODE:22;          /**< \brief [21:0] Error correction code for write (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [29:22] \internal Reserved */
    __IO Ifx_UReg_32Bit ENCDIS:2;          /**< \brief [31:30] ECC encoding disable (rw) */
} Ifx_DMU_GP_HOST_DFECCW_Bits;

/** \brief HOST DFLASH margin control register */
typedef struct _Ifx_DMU_GP_HOST_DFMARGIN_Bits
{
    __IO Ifx_UReg_32Bit MARSEL:2;          /**< \brief [1:0] Read margin selection (rw) */
    __IO Ifx_UReg_32Bit HMAR:1;            /**< \brief [2:2] Hard margin selection (rw) */
    __I  Ifx_UReg_32Bit :29;               /**< \brief [31:3] \internal Reserved */
} Ifx_DMU_GP_HOST_DFMARGIN_Bits;

/** \brief HOST DFLASH protection register */
typedef struct _Ifx_DMU_GP_HOST_DFPROCON_Bits
{
    __I  Ifx_Strict_32Bit WP:1;            /**< \brief [0:0] Write protection (rh) */
    __I  Ifx_Strict_32Bit :30;             /**< \brief [30:1] \internal Reserved */
    __I  Ifx_Strict_32Bit RWPRO:1;         /**< \brief [31:31] Read and write protections configuration (rh) */
} Ifx_DMU_GP_HOST_DFPROCON_Bits;

/** \brief HOST DFLASH wait cycle register */
typedef struct _Ifx_DMU_GP_HOST_DFWAIT_Bits
{
    __IO Ifx_UReg_32Bit RFLASH:5;          /**< \brief [4:0] Wait cycles for read (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_DMU_GP_HOST_DFWAIT_Bits;

/** \brief HOST PFLASH ECC write register */
typedef struct _Ifx_DMU_GP_HOST_PFECCW_Bits
{
    __IO Ifx_UReg_32Bit WCODE:22;          /**< \brief [21:0] Error correction code for write (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [29:22] \internal Reserved */
    __IO Ifx_UReg_32Bit ENCDIS:2;          /**< \brief [31:30] ECC encoding disable (rw) */
} Ifx_DMU_GP_HOST_PFECCW_Bits;

/** \brief HOST PFLASH error injection register */
typedef struct _Ifx_DMU_GP_HOST_PFERRINJ_Bits
{
    __O  Ifx_UReg_32Bit WSERRINJ:1;        /**< \brief [0:0] HOST PFLASH Wait State ECC error injection (w) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMU_GP_HOST_PFERRINJ_Bits;

/** \brief HOST PFLASH protection register */
typedef struct _Ifx_DMU_GP_HOST_PFPROCON_Bits
{
    __I  Ifx_UReg_32Bit :31;               /**< \brief [30:0] \internal Reserved */
    __I  Ifx_UReg_32Bit RWPRO:1;           /**< \brief [31:31] Read and write protections configuration (rh) */
} Ifx_DMU_GP_HOST_PFPROCON_Bits;

/** \brief HOST PFLASH wait cycle register */
typedef struct _Ifx_DMU_GP_HOST_PFWAIT_Bits
{
    __IO Ifx_UReg_32Bit RFLASH:5;          /**< \brief [4:0] HOST PFLASH wait cycles for read (rw) */
    __I  Ifx_UReg_32Bit :27;               /**< \brief [31:5] \internal Reserved */
} Ifx_DMU_GP_HOST_PFWAIT_Bits;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPA0_Bits
{
    __I  Ifx_UReg_32Bit S0LH:1;            /**< \brief [0:0] PFLASH pA sector 0 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S1LH:1;            /**< \brief [1:1] PFLASH pA sector 1 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S2LH:1;            /**< \brief [2:2] PFLASH pA sector 2 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S3LH:1;            /**< \brief [3:3] PFLASH pA sector 3 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S4LH:1;            /**< \brief [4:4] PFLASH pA sector 4 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S5LH:1;            /**< \brief [5:5] PFLASH pA sector 5 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S6LH:1;            /**< \brief [6:6] PFLASH pA sector 6 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S7LH:1;            /**< \brief [7:7] PFLASH pA sector 7 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S8LH:1;            /**< \brief [8:8] PFLASH pA sector 8 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S9LH:1;            /**< \brief [9:9] PFLASH pA sector 9 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S10LH:1;           /**< \brief [10:10] PFLASH pA sector 10 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S11LH:1;           /**< \brief [11:11] PFLASH pA sector 11 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S12LH:1;           /**< \brief [12:12] PFLASH pA sector 12 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S13LH:1;           /**< \brief [13:13] PFLASH pA sector 13 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S14LH:1;           /**< \brief [14:14] PFLASH pA sector 14 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S15LH:1;           /**< \brief [15:15] PFLASH pA sector 15 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S16LH:1;           /**< \brief [16:16] PFLASH pA sector 16 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S17LH:1;           /**< \brief [17:17] PFLASH pA sector 17 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S18LH:1;           /**< \brief [18:18] PFLASH pA sector 18 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S19LH:1;           /**< \brief [19:19] PFLASH pA sector 19 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S20LH:1;           /**< \brief [20:20] PFLASH pA sector 20 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S21LH:1;           /**< \brief [21:21] PFLASH pA sector 21 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S22LH:1;           /**< \brief [22:22] PFLASH pA sector 22 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S23LH:1;           /**< \brief [23:23] PFLASH pA sector 23 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S24LH:1;           /**< \brief [24:24] PFLASH pA sector 24 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S25LH:1;           /**< \brief [25:25] PFLASH pA sector 25 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S26LH:1;           /**< \brief [26:26] PFLASH pA sector 26 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S27LH:1;           /**< \brief [27:27] PFLASH pA sector 27 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S28LH:1;           /**< \brief [28:28] PFLASH pA sector 28 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S29LH:1;           /**< \brief [29:29] PFLASH pA sector 29 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S30LH:1;           /**< \brief [30:30] PFLASH pA sector 30 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S31LH:1;           /**< \brief [31:31] PFLASH pA sector 31 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA0_Bits;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPA1_Bits
{
    __I  Ifx_UReg_32Bit S32LH:1;           /**< \brief [0:0] PFLASH pA sector 32 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S33LH:1;           /**< \brief [1:1] PFLASH pA sector 33 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S34LH:1;           /**< \brief [2:2] PFLASH pA sector 34 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S35LH:1;           /**< \brief [3:3] PFLASH pA sector 35 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S36LH:1;           /**< \brief [4:4] PFLASH pA sector 36 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S37LH:1;           /**< \brief [5:5] PFLASH pA sector 37 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S38LH:1;           /**< \brief [6:6] PFLASH pA sector 38 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S39LH:1;           /**< \brief [7:7] PFLASH pA sector 39 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S40LH:1;           /**< \brief [8:8] PFLASH pA sector 40 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S41LH:1;           /**< \brief [9:9] PFLASH pA sector 41 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S42LH:1;           /**< \brief [10:10] PFLASH pA sector 42 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S43LH:1;           /**< \brief [11:11] PFLASH pA sector 43 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S44LH:1;           /**< \brief [12:12] PFLASH pA sector 44 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S45LH:1;           /**< \brief [13:13] PFLASH pA sector 45 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S46LH:1;           /**< \brief [14:14] PFLASH pA sector 46 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S47LH:1;           /**< \brief [15:15] PFLASH pA sector 47 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S48LH:1;           /**< \brief [16:16] PFLASH pA sector 48 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S49LH:1;           /**< \brief [17:17] PFLASH pA sector 49 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S50LH:1;           /**< \brief [18:18] PFLASH pA sector 50 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S51LH:1;           /**< \brief [19:19] PFLASH pA sector 51 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S52LH:1;           /**< \brief [20:20] PFLASH pA sector 52 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S53LH:1;           /**< \brief [21:21] PFLASH pA sector 53 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S54LH:1;           /**< \brief [22:22] PFLASH pA sector 54 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S55LH:1;           /**< \brief [23:23] PFLASH pA sector 55 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S56LH:1;           /**< \brief [24:24] PFLASH pA sector 56 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S57LH:1;           /**< \brief [25:25] PFLASH pA sector 57 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S58LH:1;           /**< \brief [26:26] PFLASH pA sector 58 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S59LH:1;           /**< \brief [27:27] PFLASH pA sector 59 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S60LH:1;           /**< \brief [28:28] PFLASH pA sector 60 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S61LH:1;           /**< \brief [29:29] PFLASH pA sector 61 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S62LH:1;           /**< \brief [30:30] PFLASH pA sector 62 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S63LH:1;           /**< \brief [31:31] PFLASH pA sector 63 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA1_Bits;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPA2_Bits
{
    __I  Ifx_UReg_32Bit S64LH:1;           /**< \brief [0:0] PFLASH pA sector 64 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S65LH:1;           /**< \brief [1:1] PFLASH pA sector 65 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S66LH:1;           /**< \brief [2:2] PFLASH pA sector 66 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S67LH:1;           /**< \brief [3:3] PFLASH pA sector 67 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S68LH:1;           /**< \brief [4:4] PFLASH pA sector 68 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S69LH:1;           /**< \brief [5:5] PFLASH pA sector 69 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S70LH:1;           /**< \brief [6:6] PFLASH pA sector 70 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S71LH:1;           /**< \brief [7:7] PFLASH pA sector 71 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S72LH:1;           /**< \brief [8:8] PFLASH pA sector 72 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S73LH:1;           /**< \brief [9:9] PFLASH pA sector 73 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S74LH:1;           /**< \brief [10:10] PFLASH pA sector 74 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S75LH:1;           /**< \brief [11:11] PFLASH pA sector 75 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S76LH:1;           /**< \brief [12:12] PFLASH pA sector 76 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S77LH:1;           /**< \brief [13:13] PFLASH pA sector 77 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S78LH:1;           /**< \brief [14:14] PFLASH pA sector 78 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S79LH:1;           /**< \brief [15:15] PFLASH pA sector 79 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S80LH:1;           /**< \brief [16:16] PFLASH pA sector 80 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S81LH:1;           /**< \brief [17:17] PFLASH pA sector 81 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S82LH:1;           /**< \brief [18:18] PFLASH pA sector 82 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S83LH:1;           /**< \brief [19:19] PFLASH pA sector 83 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S84LH:1;           /**< \brief [20:20] PFLASH pA sector 84 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S85LH:1;           /**< \brief [21:21] PFLASH pA sector 85 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S86LH:1;           /**< \brief [22:22] PFLASH pA sector 86 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S87LH:1;           /**< \brief [23:23] PFLASH pA sector 87 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S88LH:1;           /**< \brief [24:24] PFLASH pA sector 88 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S89LH:1;           /**< \brief [25:25] PFLASH pA sector 89 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S90LH:1;           /**< \brief [26:26] PFLASH pA sector 90 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S91LH:1;           /**< \brief [27:27] PFLASH pA sector 91 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S92LH:1;           /**< \brief [28:28] PFLASH pA sector 92 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S93LH:1;           /**< \brief [29:29] PFLASH pA sector 93 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S94LH:1;           /**< \brief [30:30] PFLASH pA sector 94 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S95LH:1;           /**< \brief [31:31] PFLASH pA sector 95 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA2_Bits;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPA3_Bits
{
    __I  Ifx_UReg_32Bit S96LH:1;           /**< \brief [0:0] PFLASH pA sector 96 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S97LH:1;           /**< \brief [1:1] PFLASH pA sector 97 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S98LH:1;           /**< \brief [2:2] PFLASH pA sector 98 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S99LH:1;           /**< \brief [3:3] PFLASH pA sector 99 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S100LH:1;          /**< \brief [4:4] PFLASH pA sector 100 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S101LH:1;          /**< \brief [5:5] PFLASH pA sector 101 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S102LH:1;          /**< \brief [6:6] PFLASH pA sector 102 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S103LH:1;          /**< \brief [7:7] PFLASH pA sector 103 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S104LH:1;          /**< \brief [8:8] PFLASH pA sector 104 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S105LH:1;          /**< \brief [9:9] PFLASH pA sector 105 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S106LH:1;          /**< \brief [10:10] PFLASH pA sector 106 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S107LH:1;          /**< \brief [11:11] PFLASH pA sector 107 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S108LH:1;          /**< \brief [12:12] PFLASH pA sector 108 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S109LH:1;          /**< \brief [13:13] PFLASH pA sector 109 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S110LH:1;          /**< \brief [14:14] PFLASH pA sector 110 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S111LH:1;          /**< \brief [15:15] PFLASH pA sector 111 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S112LH:1;          /**< \brief [16:16] PFLASH pA sector 112 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S113LH:1;          /**< \brief [17:17] PFLASH pA sector 113 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S114LH:1;          /**< \brief [18:18] PFLASH pA sector 114 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S115LH:1;          /**< \brief [19:19] PFLASH pA sector 115 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S116LH:1;          /**< \brief [20:20] PFLASH pA sector 116 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S117LH:1;          /**< \brief [21:21] PFLASH pA sector 117 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S118LH:1;          /**< \brief [22:22] PFLASH pA sector 118 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S119LH:1;          /**< \brief [23:23] PFLASH pA sector 119 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S120LH:1;          /**< \brief [24:24] PFLASH pA sector 120 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S121LH:1;          /**< \brief [25:25] PFLASH pA sector 121 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S122LH:1;          /**< \brief [26:26] PFLASH pA sector 122 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S123LH:1;          /**< \brief [27:27] PFLASH pA sector 123 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S124LH:1;          /**< \brief [28:28] PFLASH pA sector 124 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S125LH:1;          /**< \brief [29:29] PFLASH pA sector 125 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S126LH:1;          /**< \brief [30:30] PFLASH pA sector 126 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S127LH:1;          /**< \brief [31:31] PFLASH pA sector 127 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA3_Bits;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPB0_Bits
{
    __I  Ifx_UReg_32Bit S0LH:1;            /**< \brief [0:0] PFLASH pB sector 0 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S1LH:1;            /**< \brief [1:1] PFLASH pB sector 1 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S2LH:1;            /**< \brief [2:2] PFLASH pB sector 2 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S3LH:1;            /**< \brief [3:3] PFLASH pB sector 3 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S4LH:1;            /**< \brief [4:4] PFLASH pB sector 4 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S5LH:1;            /**< \brief [5:5] PFLASH pB sector 5 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S6LH:1;            /**< \brief [6:6] PFLASH pB sector 6 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S7LH:1;            /**< \brief [7:7] PFLASH pB sector 7 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S8LH:1;            /**< \brief [8:8] PFLASH pB sector 8 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S9LH:1;            /**< \brief [9:9] PFLASH pB sector 9 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S10LH:1;           /**< \brief [10:10] PFLASH pB sector 10 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S11LH:1;           /**< \brief [11:11] PFLASH pB sector 11 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S12LH:1;           /**< \brief [12:12] PFLASH pB sector 12 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S13LH:1;           /**< \brief [13:13] PFLASH pB sector 13 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S14LH:1;           /**< \brief [14:14] PFLASH pB sector 14 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S15LH:1;           /**< \brief [15:15] PFLASH pB sector 15 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S16LH:1;           /**< \brief [16:16] PFLASH pB sector 16 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S17LH:1;           /**< \brief [17:17] PFLASH pB sector 17 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S18LH:1;           /**< \brief [18:18] PFLASH pB sector 18 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S19LH:1;           /**< \brief [19:19] PFLASH pB sector 19 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S20LH:1;           /**< \brief [20:20] PFLASH pB sector 20 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S21LH:1;           /**< \brief [21:21] PFLASH pB sector 21 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S22LH:1;           /**< \brief [22:22] PFLASH pB sector 22 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S23LH:1;           /**< \brief [23:23] PFLASH pB sector 23 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S24LH:1;           /**< \brief [24:24] PFLASH pB sector 24 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S25LH:1;           /**< \brief [25:25] PFLASH pB sector 25 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S26LH:1;           /**< \brief [26:26] PFLASH pB sector 26 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S27LH:1;           /**< \brief [27:27] PFLASH pB sector 27 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S28LH:1;           /**< \brief [28:28] PFLASH pB sector 28 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S29LH:1;           /**< \brief [29:29] PFLASH pB sector 29 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S30LH:1;           /**< \brief [30:30] PFLASH pB sector 30 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S31LH:1;           /**< \brief [31:31] PFLASH pB sector 31 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB0_Bits;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPB1_Bits
{
    __I  Ifx_UReg_32Bit S32LH:1;           /**< \brief [0:0] PFLASH pB sector 32 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S33LH:1;           /**< \brief [1:1] PFLASH pB sector 33 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S34LH:1;           /**< \brief [2:2] PFLASH pB sector 34 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S35LH:1;           /**< \brief [3:3] PFLASH pB sector 35 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S36LH:1;           /**< \brief [4:4] PFLASH pB sector 36 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S37LH:1;           /**< \brief [5:5] PFLASH pB sector 37 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S38LH:1;           /**< \brief [6:6] PFLASH pB sector 38 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S39LH:1;           /**< \brief [7:7] PFLASH pB sector 39 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S40LH:1;           /**< \brief [8:8] PFLASH pB sector 40 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S41LH:1;           /**< \brief [9:9] PFLASH pB sector 41 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S42LH:1;           /**< \brief [10:10] PFLASH pB sector 42 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S43LH:1;           /**< \brief [11:11] PFLASH pB sector 43 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S44LH:1;           /**< \brief [12:12] PFLASH pB sector 44 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S45LH:1;           /**< \brief [13:13] PFLASH pB sector 45 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S46LH:1;           /**< \brief [14:14] PFLASH pB sector 46 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S47LH:1;           /**< \brief [15:15] PFLASH pB sector 47 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S48LH:1;           /**< \brief [16:16] PFLASH pB sector 48 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S49LH:1;           /**< \brief [17:17] PFLASH pB sector 49 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S50LH:1;           /**< \brief [18:18] PFLASH pB sector 50 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S51LH:1;           /**< \brief [19:19] PFLASH pB sector 51 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S52LH:1;           /**< \brief [20:20] PFLASH pB sector 52 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S53LH:1;           /**< \brief [21:21] PFLASH pB sector 53 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S54LH:1;           /**< \brief [22:22] PFLASH pB sector 54 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S55LH:1;           /**< \brief [23:23] PFLASH pB sector 55 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S56LH:1;           /**< \brief [24:24] PFLASH pB sector 56 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S57LH:1;           /**< \brief [25:25] PFLASH pB sector 57 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S58LH:1;           /**< \brief [26:26] PFLASH pB sector 58 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S59LH:1;           /**< \brief [27:27] PFLASH pB sector 59 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S60LH:1;           /**< \brief [28:28] PFLASH pB sector 60 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S61LH:1;           /**< \brief [29:29] PFLASH pB sector 61 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S62LH:1;           /**< \brief [30:30] PFLASH pB sector 62 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S63LH:1;           /**< \brief [31:31] PFLASH pB sector 63 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB1_Bits;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPB2_Bits
{
    __I  Ifx_UReg_32Bit S64LH:1;           /**< \brief [0:0] PFLASH pB sector 64 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S65LH:1;           /**< \brief [1:1] PFLASH pB sector 65 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S66LH:1;           /**< \brief [2:2] PFLASH pB sector 66 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S67LH:1;           /**< \brief [3:3] PFLASH pB sector 67 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S68LH:1;           /**< \brief [4:4] PFLASH pB sector 68 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S69LH:1;           /**< \brief [5:5] PFLASH pB sector 69 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S70LH:1;           /**< \brief [6:6] PFLASH pB sector 70 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S71LH:1;           /**< \brief [7:7] PFLASH pB sector 71 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S72LH:1;           /**< \brief [8:8] PFLASH pB sector 72 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S73LH:1;           /**< \brief [9:9] PFLASH pB sector 73 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S74LH:1;           /**< \brief [10:10] PFLASH pB sector 74 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S75LH:1;           /**< \brief [11:11] PFLASH pB sector 75 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S76LH:1;           /**< \brief [12:12] PFLASH pB sector 76 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S77LH:1;           /**< \brief [13:13] PFLASH pB sector 77 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S78LH:1;           /**< \brief [14:14] PFLASH pB sector 78 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S79LH:1;           /**< \brief [15:15] PFLASH pB sector 79 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S80LH:1;           /**< \brief [16:16] PFLASH pB sector 80 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S81LH:1;           /**< \brief [17:17] PFLASH pB sector 81 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S82LH:1;           /**< \brief [18:18] PFLASH pB sector 82 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S83LH:1;           /**< \brief [19:19] PFLASH pB sector 83 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S84LH:1;           /**< \brief [20:20] PFLASH pB sector 84 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S85LH:1;           /**< \brief [21:21] PFLASH pB sector 85 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S86LH:1;           /**< \brief [22:22] PFLASH pB sector 86 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S87LH:1;           /**< \brief [23:23] PFLASH pB sector 87 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S88LH:1;           /**< \brief [24:24] PFLASH pB sector 88 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S89LH:1;           /**< \brief [25:25] PFLASH pB sector 89 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S90LH:1;           /**< \brief [26:26] PFLASH pB sector 90 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S91LH:1;           /**< \brief [27:27] PFLASH pB sector 91 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S92LH:1;           /**< \brief [28:28] PFLASH pB sector 92 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S93LH:1;           /**< \brief [29:29] PFLASH pB sector 93 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S94LH:1;           /**< \brief [30:30] PFLASH pB sector 94 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S95LH:1;           /**< \brief [31:31] PFLASH pB sector 95 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB2_Bits;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFECPRIOPB3_Bits
{
    __I  Ifx_UReg_32Bit S96LH:1;           /**< \brief [0:0] PFLASH pB sector 96 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S97LH:1;           /**< \brief [1:1] PFLASH pB sector 97 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S98LH:1;           /**< \brief [2:2] PFLASH pB sector 98 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S99LH:1;           /**< \brief [3:3] PFLASH pB sector 99 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S100LH:1;          /**< \brief [4:4] PFLASH pB sector 100 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S101LH:1;          /**< \brief [5:5] PFLASH pB sector 101 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S102LH:1;          /**< \brief [6:6] PFLASH pB sector 102 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S103LH:1;          /**< \brief [7:7] PFLASH pB sector 103 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S104LH:1;          /**< \brief [8:8] PFLASH pB sector 104 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S105LH:1;          /**< \brief [9:9] PFLASH pB sector 105 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S106LH:1;          /**< \brief [10:10] PFLASH pB sector 106 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S107LH:1;          /**< \brief [11:11] PFLASH pB sector 107 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S108LH:1;          /**< \brief [12:12] PFLASH pB sector 108 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S109LH:1;          /**< \brief [13:13] PFLASH pB sector 109 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S110LH:1;          /**< \brief [14:14] PFLASH pB sector 110 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S111LH:1;          /**< \brief [15:15] PFLASH pB sector 111 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S112LH:1;          /**< \brief [16:16] PFLASH pB sector 112 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S113LH:1;          /**< \brief [17:17] PFLASH pB sector 113 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S114LH:1;          /**< \brief [18:18] PFLASH pB sector 114 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S115LH:1;          /**< \brief [19:19] PFLASH pB sector 115 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S116LH:1;          /**< \brief [20:20] PFLASH pB sector 116 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S117LH:1;          /**< \brief [21:21] PFLASH pB sector 117 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S118LH:1;          /**< \brief [22:22] PFLASH pB sector 118 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S119LH:1;          /**< \brief [23:23] PFLASH pB sector 119 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S120LH:1;          /**< \brief [24:24] PFLASH pB sector 120 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S121LH:1;          /**< \brief [25:25] PFLASH pB sector 121 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S122LH:1;          /**< \brief [26:26] PFLASH pB sector 122 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S123LH:1;          /**< \brief [27:27] PFLASH pB sector 123 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S124LH:1;          /**< \brief [28:28] PFLASH pB sector 124 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S125LH:1;          /**< \brief [29:29] PFLASH pB sector 125 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S126LH:1;          /**< \brief [30:30] PFLASH pB sector 126 erase counter priority (rh) */
    __I  Ifx_UReg_32Bit S127LH:1;          /**< \brief [31:31] PFLASH pB sector 127 erase counter priority (rh) */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB3_Bits;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA0_Bits
{
    __I  Ifx_UReg_32Bit S0WOP:1;           /**< \brief [0:0] PFLASH pA sector 0 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S1WOP:1;           /**< \brief [1:1] PFLASH pA sector 1 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S2WOP:1;           /**< \brief [2:2] PFLASH pA sector 2 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S3WOP:1;           /**< \brief [3:3] PFLASH pA sector 3 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S4WOP:1;           /**< \brief [4:4] PFLASH pA sector 4 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S5WOP:1;           /**< \brief [5:5] PFLASH pA sector 5 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S6WOP:1;           /**< \brief [6:6] PFLASH pA sector 6 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S7WOP:1;           /**< \brief [7:7] PFLASH pA sector 7 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S8WOP:1;           /**< \brief [8:8] PFLASH pA sector 8 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S9WOP:1;           /**< \brief [9:9] PFLASH pA sector 9 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S10WOP:1;          /**< \brief [10:10] PFLASH pA sector 10 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S11WOP:1;          /**< \brief [11:11] PFLASH pA sector 11 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S12WOP:1;          /**< \brief [12:12] PFLASH pA sector 12 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S13WOP:1;          /**< \brief [13:13] PFLASH pA sector 13 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S14WOP:1;          /**< \brief [14:14] PFLASH pA sector 14 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S15WOP:1;          /**< \brief [15:15] PFLASH pA sector 15 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S16WOP:1;          /**< \brief [16:16] PFLASH pA sector 16 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S17WOP:1;          /**< \brief [17:17] PFLASH pA sector 17 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S18WOP:1;          /**< \brief [18:18] PFLASH pA sector 18 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S19WOP:1;          /**< \brief [19:19] PFLASH pA sector 19 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S20WOP:1;          /**< \brief [20:20] PFLASH pA sector 20 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S21WOP:1;          /**< \brief [21:21] PFLASH pA sector 21 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S22WOP:1;          /**< \brief [22:22] PFLASH pA sector 22 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S23WOP:1;          /**< \brief [23:23] PFLASH pA sector 23 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S24WOP:1;          /**< \brief [24:24] PFLASH pA sector 24 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S25WOP:1;          /**< \brief [25:25] PFLASH pA sector 25 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S26WOP:1;          /**< \brief [26:26] PFLASH pA sector 26 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S27WOP:1;          /**< \brief [27:27] PFLASH pA sector 27 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S28WOP:1;          /**< \brief [28:28] PFLASH pA sector 28 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S29WOP:1;          /**< \brief [29:29] PFLASH pA sector 29 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S30WOP:1;          /**< \brief [30:30] PFLASH pA sector 30 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S31WOP:1;          /**< \brief [31:31] PFLASH pA sector 31 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA0_Bits;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA1_Bits
{
    __I  Ifx_UReg_32Bit S32WOP:1;          /**< \brief [0:0] PFLASH pA sector 32 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S33WOP:1;          /**< \brief [1:1] PFLASH pA sector 33 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S34WOP:1;          /**< \brief [2:2] PFLASH pA sector 34 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S35WOP:1;          /**< \brief [3:3] PFLASH pA sector 35 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S36WOP:1;          /**< \brief [4:4] PFLASH pA sector 36 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S37WOP:1;          /**< \brief [5:5] PFLASH pA sector 37 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S38WOP:1;          /**< \brief [6:6] PFLASH pA sector 38 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S39WOP:1;          /**< \brief [7:7] PFLASH pA sector 39 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S40WOP:1;          /**< \brief [8:8] PFLASH pA sector 40 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S41WOP:1;          /**< \brief [9:9] PFLASH pA sector 41 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S42WOP:1;          /**< \brief [10:10] PFLASH pA sector 42 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S43WOP:1;          /**< \brief [11:11] PFLASH pA sector 43 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S44WOP:1;          /**< \brief [12:12] PFLASH pA sector 44 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S45WOP:1;          /**< \brief [13:13] PFLASH pA sector 45 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S46WOP:1;          /**< \brief [14:14] PFLASH pA sector 46 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S47WOP:1;          /**< \brief [15:15] PFLASH pA sector 47 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S48WOP:1;          /**< \brief [16:16] PFLASH pA sector 48 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S49WOP:1;          /**< \brief [17:17] PFLASH pA sector 49 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S50WOP:1;          /**< \brief [18:18] PFLASH pA sector 50 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S51WOP:1;          /**< \brief [19:19] PFLASH pA sector 51 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S52WOP:1;          /**< \brief [20:20] PFLASH pA sector 52 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S53WOP:1;          /**< \brief [21:21] PFLASH pA sector 53 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S54WOP:1;          /**< \brief [22:22] PFLASH pA sector 54 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S55WOP:1;          /**< \brief [23:23] PFLASH pA sector 55 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S56WOP:1;          /**< \brief [24:24] PFLASH pA sector 56 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S57WOP:1;          /**< \brief [25:25] PFLASH pA sector 57 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S58WOP:1;          /**< \brief [26:26] PFLASH pA sector 58 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S59WOP:1;          /**< \brief [27:27] PFLASH pA sector 59 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S60WOP:1;          /**< \brief [28:28] PFLASH pA sector 60 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S61WOP:1;          /**< \brief [29:29] PFLASH pA sector 61 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S62WOP:1;          /**< \brief [30:30] PFLASH pA sector 62 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S63WOP:1;          /**< \brief [31:31] PFLASH pA sector 63 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA1_Bits;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA2_Bits
{
    __I  Ifx_UReg_32Bit S64WOP:1;          /**< \brief [0:0] PFLASH pA sector 64 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S65WOP:1;          /**< \brief [1:1] PFLASH pA sector 65 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S66WOP:1;          /**< \brief [2:2] PFLASH pA sector 66 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S67WOP:1;          /**< \brief [3:3] PFLASH pA sector 67 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S68WOP:1;          /**< \brief [4:4] PFLASH pA sector 68 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S69WOP:1;          /**< \brief [5:5] PFLASH pA sector 69 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S70WOP:1;          /**< \brief [6:6] PFLASH pA sector 70 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S71WOP:1;          /**< \brief [7:7] PFLASH pA sector 71 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S72WOP:1;          /**< \brief [8:8] PFLASH pA sector 72 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S73WOP:1;          /**< \brief [9:9] PFLASH pA sector 73 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S74WOP:1;          /**< \brief [10:10] PFLASH pA sector 74 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S75WOP:1;          /**< \brief [11:11] PFLASH pA sector 75 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S76WOP:1;          /**< \brief [12:12] PFLASH pA sector 76 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S77WOP:1;          /**< \brief [13:13] PFLASH pA sector 77 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S78WOP:1;          /**< \brief [14:14] PFLASH pA sector 78 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S79WOP:1;          /**< \brief [15:15] PFLASH pA sector 79 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S80WOP:1;          /**< \brief [16:16] PFLASH pA sector 80 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S81WOP:1;          /**< \brief [17:17] PFLASH pA sector 81 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S82WOP:1;          /**< \brief [18:18] PFLASH pA sector 82 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S83WOP:1;          /**< \brief [19:19] PFLASH pA sector 83 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S84WOP:1;          /**< \brief [20:20] PFLASH pA sector 84 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S85WOP:1;          /**< \brief [21:21] PFLASH pA sector 85 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S86WOP:1;          /**< \brief [22:22] PFLASH pA sector 86 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S87WOP:1;          /**< \brief [23:23] PFLASH pA sector 87 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S88WOP:1;          /**< \brief [24:24] PFLASH pA sector 88 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S89WOP:1;          /**< \brief [25:25] PFLASH pA sector 89 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S90WOP:1;          /**< \brief [26:26] PFLASH pA sector 90 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S91WOP:1;          /**< \brief [27:27] PFLASH pA sector 91 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S92WOP:1;          /**< \brief [28:28] PFLASH pA sector 92 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S93WOP:1;          /**< \brief [29:29] PFLASH pA sector 93 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S94WOP:1;          /**< \brief [30:30] PFLASH pA sector 94 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S95WOP:1;          /**< \brief [31:31] PFLASH pA sector 95 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA2_Bits;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA3_Bits
{
    __I  Ifx_UReg_32Bit S96WOP:1;          /**< \brief [0:0] PFLASH pA sector 96 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S97WOP:1;          /**< \brief [1:1] PFLASH pA sector 97 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S98WOP:1;          /**< \brief [2:2] PFLASH pA sector 98 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S99WOP:1;          /**< \brief [3:3] PFLASH pA sector 99 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S100WOP:1;         /**< \brief [4:4] PFLASH pA sector 100 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S101WOP:1;         /**< \brief [5:5] PFLASH pA sector 101 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S102WOP:1;         /**< \brief [6:6] PFLASH pA sector 102 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S103WOP:1;         /**< \brief [7:7] PFLASH pA sector 103 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S104WOP:1;         /**< \brief [8:8] PFLASH pA sector 104 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S105WOP:1;         /**< \brief [9:9] PFLASH pA sector 105 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S106WOP:1;         /**< \brief [10:10] PFLASH pA sector 106 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S107WOP:1;         /**< \brief [11:11] PFLASH pA sector 107 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S108WOP:1;         /**< \brief [12:12] PFLASH pA sector 108 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S109WOP:1;         /**< \brief [13:13] PFLASH pA sector 109 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S110WOP:1;         /**< \brief [14:14] PFLASH pA sector 110 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S111WOP:1;         /**< \brief [15:15] PFLASH pA sector 111 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S112WOP:1;         /**< \brief [16:16] PFLASH pA sector 112 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S113WOP:1;         /**< \brief [17:17] PFLASH pA sector 113 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S114WOP:1;         /**< \brief [18:18] PFLASH pA sector 114 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S115WOP:1;         /**< \brief [19:19] PFLASH pA sector 115 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S116WOP:1;         /**< \brief [20:20] PFLASH pA sector 116 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S117WOP:1;         /**< \brief [21:21] PFLASH pA sector 117 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S118WOP:1;         /**< \brief [22:22] PFLASH pA sector 118 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S119WOP:1;         /**< \brief [23:23] PFLASH pA sector 119 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S120WOP:1;         /**< \brief [24:24] PFLASH pA sector 120 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S121WOP:1;         /**< \brief [25:25] PFLASH pA sector 121 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S122WOP:1;         /**< \brief [26:26] PFLASH pA sector 122 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S123WOP:1;         /**< \brief [27:27] PFLASH pA sector 123 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S124WOP:1;         /**< \brief [28:28] PFLASH pA sector 124 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S125WOP:1;         /**< \brief [29:29] PFLASH pA sector 125 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S126WOP:1;         /**< \brief [30:30] PFLASH pA sector 126 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S127WOP:1;         /**< \brief [31:31] PFLASH pA sector 127 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA3_Bits;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB0_Bits
{
    __I  Ifx_UReg_32Bit S0PWOP:1;          /**< \brief [0:0] PFLASH pB sector 0 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S1PWOP:1;          /**< \brief [1:1] PFLASH pB sector 1 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S2PWOP:1;          /**< \brief [2:2] PFLASH pB sector 2 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S3PWOP:1;          /**< \brief [3:3] PFLASH pB sector 3 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S4PWOP:1;          /**< \brief [4:4] PFLASH pB sector 4 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S5PWOP:1;          /**< \brief [5:5] PFLASH pB sector 5 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S6PWOP:1;          /**< \brief [6:6] PFLASH pB sector 6 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S7PWOP:1;          /**< \brief [7:7] PFLASH pB sector 7 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S8PWOP:1;          /**< \brief [8:8] PFLASH pB sector 8 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S9PWOP:1;          /**< \brief [9:9] PFLASH pB sector 9 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S10PWOP:1;         /**< \brief [10:10] PFLASH pB sector 10 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S11PWOP:1;         /**< \brief [11:11] PFLASH pB sector 11 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S12PWOP:1;         /**< \brief [12:12] PFLASH pB sector 12 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S13PWOP:1;         /**< \brief [13:13] PFLASH pB sector 13 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S14PWOP:1;         /**< \brief [14:14] PFLASH pB sector 14 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S15PWOP:1;         /**< \brief [15:15] PFLASH pB sector 15 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S16PWOP:1;         /**< \brief [16:16] PFLASH pB sector 16 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S17PWOP:1;         /**< \brief [17:17] PFLASH pB sector 17 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S18PWOP:1;         /**< \brief [18:18] PFLASH pB sector 18 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S19PWOP:1;         /**< \brief [19:19] PFLASH pB sector 19 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S20PWOP:1;         /**< \brief [20:20] PFLASH pB sector 20 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S21PWOP:1;         /**< \brief [21:21] PFLASH pB sector 21 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S22PWOP:1;         /**< \brief [22:22] PFLASH pB sector 22 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S23PWOP:1;         /**< \brief [23:23] PFLASH pB sector 23 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S24PWOP:1;         /**< \brief [24:24] PFLASH pB sector 24 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S25PWOP:1;         /**< \brief [25:25] PFLASH pB sector 25 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S26PWOP:1;         /**< \brief [26:26] PFLASH pB sector 26 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S27PWOP:1;         /**< \brief [27:27] PFLASH pB sector 27 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S28PWOP:1;         /**< \brief [28:28] PFLASH pB sector 28 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S29PWOP:1;         /**< \brief [29:29] PFLASH pB sector 29 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S30PWOP:1;         /**< \brief [30:30] PFLASH pB sector 30 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S31PWOP:1;         /**< \brief [31:31] PFLASH pB sector 31 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB0_Bits;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB1_Bits
{
    __I  Ifx_UReg_32Bit S32PWOP:1;         /**< \brief [0:0] PFLASH pB sector 32 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S33PWOP:1;         /**< \brief [1:1] PFLASH pB sector 33 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S34PWOP:1;         /**< \brief [2:2] PFLASH pB sector 34 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S35PWOP:1;         /**< \brief [3:3] PFLASH pB sector 35 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S36PWOP:1;         /**< \brief [4:4] PFLASH pB sector 36 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S37PWOP:1;         /**< \brief [5:5] PFLASH pB sector 37 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S38PWOP:1;         /**< \brief [6:6] PFLASH pB sector 38 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S39PWOP:1;         /**< \brief [7:7] PFLASH pB sector 39 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S40PWOP:1;         /**< \brief [8:8] PFLASH pB sector 40 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S41PWOP:1;         /**< \brief [9:9] PFLASH pB sector 41 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S42PWOP:1;         /**< \brief [10:10] PFLASH pB sector 42 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S43PWOP:1;         /**< \brief [11:11] PFLASH pB sector 43 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S44PWOP:1;         /**< \brief [12:12] PFLASH pB sector 44 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S45PWOP:1;         /**< \brief [13:13] PFLASH pB sector 45 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S46PWOP:1;         /**< \brief [14:14] PFLASH pB sector 46 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S47PWOP:1;         /**< \brief [15:15] PFLASH pB sector 47 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S48PWOP:1;         /**< \brief [16:16] PFLASH pB sector 48 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S49PWOP:1;         /**< \brief [17:17] PFLASH pB sector 49 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S50PWOP:1;         /**< \brief [18:18] PFLASH pB sector 50 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S51PWOP:1;         /**< \brief [19:19] PFLASH pB sector 51 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S52PWOP:1;         /**< \brief [20:20] PFLASH pB sector 52 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S53PWOP:1;         /**< \brief [21:21] PFLASH pB sector 53 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S54PWOP:1;         /**< \brief [22:22] PFLASH pB sector 54 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S55PWOP:1;         /**< \brief [23:23] PFLASH pB sector 55 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S56PWOP:1;         /**< \brief [24:24] PFLASH pB sector 56 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S57PWOP:1;         /**< \brief [25:25] PFLASH pB sector 57 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S58PWOP:1;         /**< \brief [26:26] PFLASH pB sector 58 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S59PWOP:1;         /**< \brief [27:27] PFLASH pB sector 59 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S60PWOP:1;         /**< \brief [28:28] PFLASH pB sector 60 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S61PWOP:1;         /**< \brief [29:29] PFLASH pB sector 61 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S62PWOP:1;         /**< \brief [30:30] PFLASH pB sector 62 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S63PWOP:1;         /**< \brief [31:31] PFLASH pB sector 63 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB1_Bits;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB2_Bits
{
    __I  Ifx_UReg_32Bit S64PWOP:1;         /**< \brief [0:0] PFLASH pB sector 64 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S65PWOP:1;         /**< \brief [1:1] PFLASH pB sector 65 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S66PWOP:1;         /**< \brief [2:2] PFLASH pB sector 66 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S67PWOP:1;         /**< \brief [3:3] PFLASH pB sector 67 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S68PWOP:1;         /**< \brief [4:4] PFLASH pB sector 68 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S69PWOP:1;         /**< \brief [5:5] PFLASH pB sector 69 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S70PWOP:1;         /**< \brief [6:6] PFLASH pB sector 70 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S71PWOP:1;         /**< \brief [7:7] PFLASH pB sector 71 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S72PWOP:1;         /**< \brief [8:8] PFLASH pB sector 72 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S73PWOP:1;         /**< \brief [9:9] PFLASH pB sector 73 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S74PWOP:1;         /**< \brief [10:10] PFLASH pB sector 74 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S75PWOP:1;         /**< \brief [11:11] PFLASH pB sector 75 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S76PWOP:1;         /**< \brief [12:12] PFLASH pB sector 76 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S77PWOP:1;         /**< \brief [13:13] PFLASH pB sector 77 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S78PWOP:1;         /**< \brief [14:14] PFLASH pB sector 78 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S79PWOP:1;         /**< \brief [15:15] PFLASH pB sector 79 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S80PWOP:1;         /**< \brief [16:16] PFLASH pB sector 80 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S81PWOP:1;         /**< \brief [17:17] PFLASH pB sector 81 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S82PWOP:1;         /**< \brief [18:18] PFLASH pB sector 82 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S83PWOP:1;         /**< \brief [19:19] PFLASH pB sector 83 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S84PWOP:1;         /**< \brief [20:20] PFLASH pB sector 84 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S85PWOP:1;         /**< \brief [21:21] PFLASH pB sector 85 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S86PWOP:1;         /**< \brief [22:22] PFLASH pB sector 86 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S87PWOP:1;         /**< \brief [23:23] PFLASH pB sector 87 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S88PWOP:1;         /**< \brief [24:24] PFLASH pB sector 88 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S89PWOP:1;         /**< \brief [25:25] PFLASH pB sector 89 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S90PWOP:1;         /**< \brief [26:26] PFLASH pB sector 90 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S91PWOP:1;         /**< \brief [27:27] PFLASH pB sector 91 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S92PWOP:1;         /**< \brief [28:28] PFLASH pB sector 92 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S93PWOP:1;         /**< \brief [29:29] PFLASH pB sector 93 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S94PWOP:1;         /**< \brief [30:30] PFLASH pB sector 94 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S95PWOP:1;         /**< \brief [31:31] PFLASH pB sector 95 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB2_Bits;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB3_Bits
{
    __I  Ifx_UReg_32Bit S96PWOP:1;         /**< \brief [0:0] PFLASH pB sector 96 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S97PWOP:1;         /**< \brief [1:1] PFLASH pB sector 97 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S98PWOP:1;         /**< \brief [2:2] PFLASH pB sector 98 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S99PWOP:1;         /**< \brief [3:3] PFLASH pB sector 99 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S100PWOP:1;        /**< \brief [4:4] PFLASH pB sector 100 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S101PWOP:1;        /**< \brief [5:5] PFLASH pB sector 101 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S102PWOP:1;        /**< \brief [6:6] PFLASH pB sector 102 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S103PWOP:1;        /**< \brief [7:7] PFLASH pB sector 103 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S104PWOP:1;        /**< \brief [8:8] PFLASH pB sector 104 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S105PWOP:1;        /**< \brief [9:9] PFLASH pB sector 105 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S106PWOP:1;        /**< \brief [10:10] PFLASH pB sector 106 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S107PWOP:1;        /**< \brief [11:11] PFLASH pB sector 107 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S108PWOP:1;        /**< \brief [12:12] PFLASH pB sector 108 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S109PWOP:1;        /**< \brief [13:13] PFLASH pB sector 109 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S110PWOP:1;        /**< \brief [14:14] PFLASH pB sector 110 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S111PWOP:1;        /**< \brief [15:15] PFLASH pB sector 111 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S112PWOP:1;        /**< \brief [16:16] PFLASH pB sector 112 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S113PWOP:1;        /**< \brief [17:17] PFLASH pB sector 113 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S114PWOP:1;        /**< \brief [18:18] PFLASH pB sector 114 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S115PWOP:1;        /**< \brief [19:19] PFLASH pB sector 115 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S116PWOP:1;        /**< \brief [20:20] PFLASH pB sector 116 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S117PWOP:1;        /**< \brief [21:21] PFLASH pB sector 117 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S118PWOP:1;        /**< \brief [22:22] PFLASH pB sector 118 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S119PWOP:1;        /**< \brief [23:23] PFLASH pB sector 119 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S120PWOP:1;        /**< \brief [24:24] PFLASH pB sector 120 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S121PWOP:1;        /**< \brief [25:25] PFLASH pB sector 121 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S122PWOP:1;        /**< \brief [26:26] PFLASH pB sector 122 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S123PWOP:1;        /**< \brief [27:27] PFLASH pB sector 123 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S124PWOP:1;        /**< \brief [28:28] PFLASH pB sector 124 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S125PWOP:1;        /**< \brief [29:29] PFLASH pB sector 125 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S126PWOP:1;        /**< \brief [30:30] PFLASH pB sector 126 permanent write once protection (rh) */
    __I  Ifx_UReg_32Bit S127PWOP:1;        /**< \brief [31:31] PFLASH pB sector 127 permanent write once protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB3_Bits;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA0_Bits
{
    __I  Ifx_UReg_32Bit S0PWP:1;           /**< \brief [0:0] PFLASH pA sector 0 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S1PWP:1;           /**< \brief [1:1] PFLASH pA sector 1 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S2PWP:1;           /**< \brief [2:2] PFLASH pA sector 2 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S3PWP:1;           /**< \brief [3:3] PFLASH pA sector 3 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S4PWP:1;           /**< \brief [4:4] PFLASH pA sector 4 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S5PWP:1;           /**< \brief [5:5] PFLASH pA sector 5 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S6PWP:1;           /**< \brief [6:6] PFLASH pA sector 6 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S7PWP:1;           /**< \brief [7:7] PFLASH pA sector 7 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S8PWP:1;           /**< \brief [8:8] PFLASH pA sector 8 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S9PWP:1;           /**< \brief [9:9] PFLASH pA sector 9 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S10PWP:1;          /**< \brief [10:10] PFLASH pA sector 10 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S11PWP:1;          /**< \brief [11:11] PFLASH pA sector 11 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S12PWP:1;          /**< \brief [12:12] PFLASH pA sector 12 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S13PWP:1;          /**< \brief [13:13] PFLASH pA sector 13 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S14PWP:1;          /**< \brief [14:14] PFLASH pA sector 14 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S15PWP:1;          /**< \brief [15:15] PFLASH pA sector 15 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S16PWP:1;          /**< \brief [16:16] PFLASH pA sector 16 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S17PWP:1;          /**< \brief [17:17] PFLASH pA sector 17 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S18PWP:1;          /**< \brief [18:18] PFLASH pA sector 18 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S19PWP:1;          /**< \brief [19:19] PFLASH pA sector 19 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S20PWP:1;          /**< \brief [20:20] PFLASH pA sector 20 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S21PWP:1;          /**< \brief [21:21] PFLASH pA sector 21 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S22PWP:1;          /**< \brief [22:22] PFLASH pA sector 22 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S23PWP:1;          /**< \brief [23:23] PFLASH pA sector 23 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S24PWP:1;          /**< \brief [24:24] PFLASH pA sector 24 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S25PWP:1;          /**< \brief [25:25] PFLASH pA sector 25 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S26PWP:1;          /**< \brief [26:26] PFLASH pA sector 26 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S27PWP:1;          /**< \brief [27:27] PFLASH pA sector 27 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S28PWP:1;          /**< \brief [28:28] PFLASH pA sector 28 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S29PWP:1;          /**< \brief [29:29] PFLASH pA sector 29 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S30PWP:1;          /**< \brief [30:30] PFLASH pA sector 30 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S31PWP:1;          /**< \brief [31:31] PFLASH pA sector 31 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA0_Bits;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA1_Bits
{
    __I  Ifx_UReg_32Bit S32PWP:1;          /**< \brief [0:0] PFLASH pA sector 32 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S33PWP:1;          /**< \brief [1:1] PFLASH pA sector 33 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S34PWP:1;          /**< \brief [2:2] PFLASH pA sector 34 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S35PWP:1;          /**< \brief [3:3] PFLASH pA sector 35 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S36PWP:1;          /**< \brief [4:4] PFLASH pA sector 36 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S37PWP:1;          /**< \brief [5:5] PFLASH pA sector 37 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S38PWP:1;          /**< \brief [6:6] PFLASH pA sector 38 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S39PWP:1;          /**< \brief [7:7] PFLASH pA sector 39 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S40PWP:1;          /**< \brief [8:8] PFLASH pA sector 40 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S41PWP:1;          /**< \brief [9:9] PFLASH pA sector 41 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S42PWP:1;          /**< \brief [10:10] PFLASH pA sector 42 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S43PWP:1;          /**< \brief [11:11] PFLASH pA sector 43 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S44PWP:1;          /**< \brief [12:12] PFLASH pA sector 44 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S45PWP:1;          /**< \brief [13:13] PFLASH pA sector 45 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S46PWP:1;          /**< \brief [14:14] PFLASH pA sector 46 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S47PWP:1;          /**< \brief [15:15] PFLASH pA sector 47 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S48PWP:1;          /**< \brief [16:16] PFLASH pA sector 48 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S49PWP:1;          /**< \brief [17:17] PFLASH pA sector 49 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S50PWP:1;          /**< \brief [18:18] PFLASH pA sector 50 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S51PWP:1;          /**< \brief [19:19] PFLASH pA sector 51 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S52PWP:1;          /**< \brief [20:20] PFLASH pA sector 52 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S53PWP:1;          /**< \brief [21:21] PFLASH pA sector 53 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S54PWP:1;          /**< \brief [22:22] PFLASH pA sector 54 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S55PWP:1;          /**< \brief [23:23] PFLASH pA sector 55 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S56PWP:1;          /**< \brief [24:24] PFLASH pA sector 56 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S57PWP:1;          /**< \brief [25:25] PFLASH pA sector 57 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S58PWP:1;          /**< \brief [26:26] PFLASH pA sector 58 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S59PWP:1;          /**< \brief [27:27] PFLASH pA sector 59 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S60PWP:1;          /**< \brief [28:28] PFLASH pA sector 60 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S61PWP:1;          /**< \brief [29:29] PFLASH pA sector 61 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S62PWP:1;          /**< \brief [30:30] PFLASH pA sector 62 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S63PWP:1;          /**< \brief [31:31] PFLASH pA sector 63 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA1_Bits;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA2_Bits
{
    __I  Ifx_UReg_32Bit S64PWP:1;          /**< \brief [0:0] PFLASH pA sector 64 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S65PWP:1;          /**< \brief [1:1] PFLASH pA sector 65 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S66PWP:1;          /**< \brief [2:2] PFLASH pA sector 66 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S67PWP:1;          /**< \brief [3:3] PFLASH pA sector 67 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S68PWP:1;          /**< \brief [4:4] PFLASH pA sector 68 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S69PWP:1;          /**< \brief [5:5] PFLASH pA sector 69 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S70PWP:1;          /**< \brief [6:6] PFLASH pA sector 70 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S71PWP:1;          /**< \brief [7:7] PFLASH pA sector 71 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S72PWP:1;          /**< \brief [8:8] PFLASH pA sector 72 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S73PWP:1;          /**< \brief [9:9] PFLASH pA sector 73 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S74PWP:1;          /**< \brief [10:10] PFLASH pA sector 74 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S75PWP:1;          /**< \brief [11:11] PFLASH pA sector 75 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S76PWP:1;          /**< \brief [12:12] PFLASH pA sector 76 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S77PWP:1;          /**< \brief [13:13] PFLASH pA sector 77 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S78PWP:1;          /**< \brief [14:14] PFLASH pA sector 78 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S79PWP:1;          /**< \brief [15:15] PFLASH pA sector 79 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S80PWP:1;          /**< \brief [16:16] PFLASH pA sector 80 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S81PWP:1;          /**< \brief [17:17] PFLASH pA sector 81 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S82PWP:1;          /**< \brief [18:18] PFLASH pA sector 82 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S83PWP:1;          /**< \brief [19:19] PFLASH pA sector 83 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S84PWP:1;          /**< \brief [20:20] PFLASH pA sector 84 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S85PWP:1;          /**< \brief [21:21] PFLASH pA sector 85 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S86PWP:1;          /**< \brief [22:22] PFLASH pA sector 86 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S87PWP:1;          /**< \brief [23:23] PFLASH pA sector 87 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S88PWP:1;          /**< \brief [24:24] PFLASH pA sector 88 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S89PWP:1;          /**< \brief [25:25] PFLASH pA sector 89 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S90PWP:1;          /**< \brief [26:26] PFLASH pA sector 90 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S91PWP:1;          /**< \brief [27:27] PFLASH pA sector 91 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S92PWP:1;          /**< \brief [28:28] PFLASH pA sector 92 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S93PWP:1;          /**< \brief [29:29] PFLASH pA sector 93 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S94PWP:1;          /**< \brief [30:30] PFLASH pA sector 94 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S95PWP:1;          /**< \brief [31:31] PFLASH pA sector 95 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA2_Bits;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA3_Bits
{
    __I  Ifx_UReg_32Bit S96PWP:1;          /**< \brief [0:0] PFLASH pA sector 96 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S97PWP:1;          /**< \brief [1:1] PFLASH pA sector 97 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S98PWP:1;          /**< \brief [2:2] PFLASH pA sector 98 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S99PWP:1;          /**< \brief [3:3] PFLASH pA sector 99 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S100PWP:1;         /**< \brief [4:4] PFLASH pA sector 100 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S101PWP:1;         /**< \brief [5:5] PFLASH pA sector 101 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S102PWP:1;         /**< \brief [6:6] PFLASH pA sector 102 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S103PWP:1;         /**< \brief [7:7] PFLASH pA sector 103 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S104PWP:1;         /**< \brief [8:8] PFLASH pA sector 104 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S105PWP:1;         /**< \brief [9:9] PFLASH pA sector 105 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S106PWP:1;         /**< \brief [10:10] PFLASH pA sector 106 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S107PWP:1;         /**< \brief [11:11] PFLASH pA sector 107 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S108PWP:1;         /**< \brief [12:12] PFLASH pA sector 108 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S109PWP:1;         /**< \brief [13:13] PFLASH pA sector 109 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S110PWP:1;         /**< \brief [14:14] PFLASH pA sector 110 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S111PWP:1;         /**< \brief [15:15] PFLASH pA sector 111 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S112PWP:1;         /**< \brief [16:16] PFLASH pA sector 112 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S113PWP:1;         /**< \brief [17:17] PFLASH pA sector 113 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S114PWP:1;         /**< \brief [18:18] PFLASH pA sector 114 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S115PWP:1;         /**< \brief [19:19] PFLASH pA sector 115 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S116PWP:1;         /**< \brief [20:20] PFLASH pA sector 116 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S117PWP:1;         /**< \brief [21:21] PFLASH pA sector 117 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S118PWP:1;         /**< \brief [22:22] PFLASH pA sector 118 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S119PWP:1;         /**< \brief [23:23] PFLASH pA sector 119 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S120PWP:1;         /**< \brief [24:24] PFLASH pA sector 120 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S121PWP:1;         /**< \brief [25:25] PFLASH pA sector 121 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S122PWP:1;         /**< \brief [26:26] PFLASH pA sector 122 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S123PWP:1;         /**< \brief [27:27] PFLASH pA sector 123 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S124PWP:1;         /**< \brief [28:28] PFLASH pA sector 124 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S125PWP:1;         /**< \brief [29:29] PFLASH pA sector 125 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S126PWP:1;         /**< \brief [30:30] PFLASH pA sector 126 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S127PWP:1;         /**< \brief [31:31] PFLASH pA sector 127 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA3_Bits;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB0_Bits
{
    __I  Ifx_UReg_32Bit S0PWP:1;           /**< \brief [0:0] PFLASH pB sector 0 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S1PWP:1;           /**< \brief [1:1] PFLASH pB sector 1 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S2PWP:1;           /**< \brief [2:2] PFLASH pB sector 2 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S3PWP:1;           /**< \brief [3:3] PFLASH pB sector 3 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S4PWP:1;           /**< \brief [4:4] PFLASH pB sector 4 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S5PWP:1;           /**< \brief [5:5] PFLASH pB sector 5 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S6PWP:1;           /**< \brief [6:6] PFLASH pB sector 6 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S7PWP:1;           /**< \brief [7:7] PFLASH pB sector 7 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S8PWP:1;           /**< \brief [8:8] PFLASH pB sector 8 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S9PWP:1;           /**< \brief [9:9] PFLASH pB sector 9 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S10PWP:1;          /**< \brief [10:10] PFLASH pB sector 10 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S11PWP:1;          /**< \brief [11:11] PFLASH pB sector 11 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S12PWP:1;          /**< \brief [12:12] PFLASH pB sector 12 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S13PWP:1;          /**< \brief [13:13] PFLASH pB sector 13 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S14PWP:1;          /**< \brief [14:14] PFLASH pB sector 14 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S15PWP:1;          /**< \brief [15:15] PFLASH pB sector 15 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S16PWP:1;          /**< \brief [16:16] PFLASH pB sector 16 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S17PWP:1;          /**< \brief [17:17] PFLASH pB sector 17 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S18PWP:1;          /**< \brief [18:18] PFLASH pB sector 18 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S19PWP:1;          /**< \brief [19:19] PFLASH pB sector 19 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S20PWP:1;          /**< \brief [20:20] PFLASH pB sector 20 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S21PWP:1;          /**< \brief [21:21] PFLASH pB sector 21 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S22PWP:1;          /**< \brief [22:22] PFLASH pB sector 22 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S23PWP:1;          /**< \brief [23:23] PFLASH pB sector 23 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S24PWP:1;          /**< \brief [24:24] PFLASH pB sector 24 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S25PWP:1;          /**< \brief [25:25] PFLASH pB sector 25 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S26PWP:1;          /**< \brief [26:26] PFLASH pB sector 26 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S27PWP:1;          /**< \brief [27:27] PFLASH pB sector 27 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S28PWP:1;          /**< \brief [28:28] PFLASH pB sector 28 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S29PWP:1;          /**< \brief [29:29] PFLASH pB sector 29 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S30PWP:1;          /**< \brief [30:30] PFLASH pB sector 30 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S31PWP:1;          /**< \brief [31:31] PFLASH pB sector 31 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB0_Bits;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB1_Bits
{
    __I  Ifx_UReg_32Bit S32PWP:1;          /**< \brief [0:0] PFLASH pB sector 32 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S33PWP:1;          /**< \brief [1:1] PFLASH pB sector 33 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S34PWP:1;          /**< \brief [2:2] PFLASH pB sector 34 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S35PWP:1;          /**< \brief [3:3] PFLASH pB sector 35 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S36PWP:1;          /**< \brief [4:4] PFLASH pB sector 36 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S37PWP:1;          /**< \brief [5:5] PFLASH pB sector 37 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S38PWP:1;          /**< \brief [6:6] PFLASH pB sector 38 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S39PWP:1;          /**< \brief [7:7] PFLASH pB sector 39 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S40PWP:1;          /**< \brief [8:8] PFLASH pB sector 40 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S41PWP:1;          /**< \brief [9:9] PFLASH pB sector 41 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S42PWP:1;          /**< \brief [10:10] PFLASH pB sector 42 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S43PWP:1;          /**< \brief [11:11] PFLASH pB sector 43 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S44PWP:1;          /**< \brief [12:12] PFLASH pB sector 44 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S45PWP:1;          /**< \brief [13:13] PFLASH pB sector 45 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S46PWP:1;          /**< \brief [14:14] PFLASH pB sector 46 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S47PWP:1;          /**< \brief [15:15] PFLASH pB sector 47 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S48PWP:1;          /**< \brief [16:16] PFLASH pB sector 48 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S49PWP:1;          /**< \brief [17:17] PFLASH pB sector 49 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S50PWP:1;          /**< \brief [18:18] PFLASH pB sector 50 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S51PWP:1;          /**< \brief [19:19] PFLASH pB sector 51 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S52PWP:1;          /**< \brief [20:20] PFLASH pB sector 52 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S53PWP:1;          /**< \brief [21:21] PFLASH pB sector 53 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S54PWP:1;          /**< \brief [22:22] PFLASH pB sector 54 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S55PWP:1;          /**< \brief [23:23] PFLASH pB sector 55 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S56PWP:1;          /**< \brief [24:24] PFLASH pB sector 56 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S57PWP:1;          /**< \brief [25:25] PFLASH pB sector 57 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S58PWP:1;          /**< \brief [26:26] PFLASH pB sector 58 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S59PWP:1;          /**< \brief [27:27] PFLASH pB sector 59 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S60PWP:1;          /**< \brief [28:28] PFLASH pB sector 60 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S61PWP:1;          /**< \brief [29:29] PFLASH pB sector 61 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S62PWP:1;          /**< \brief [30:30] PFLASH pB sector 62 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S63PWP:1;          /**< \brief [31:31] PFLASH pB sector 63 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB1_Bits;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB2_Bits
{
    __I  Ifx_UReg_32Bit S64PWP:1;          /**< \brief [0:0] PFLASH pB sector 64 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S65PWP:1;          /**< \brief [1:1] PFLASH pB sector 65 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S66PWP:1;          /**< \brief [2:2] PFLASH pB sector 66 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S67PWP:1;          /**< \brief [3:3] PFLASH pB sector 67 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S68PWP:1;          /**< \brief [4:4] PFLASH pB sector 68 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S69PWP:1;          /**< \brief [5:5] PFLASH pB sector 69 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S70PWP:1;          /**< \brief [6:6] PFLASH pB sector 70 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S71PWP:1;          /**< \brief [7:7] PFLASH pB sector 71 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S72PWP:1;          /**< \brief [8:8] PFLASH pB sector 72 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S73PWP:1;          /**< \brief [9:9] PFLASH pB sector 73 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S74PWP:1;          /**< \brief [10:10] PFLASH pB sector 74 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S75PWP:1;          /**< \brief [11:11] PFLASH pB sector 75 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S76PWP:1;          /**< \brief [12:12] PFLASH pB sector 76 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S77PWP:1;          /**< \brief [13:13] PFLASH pB sector 77 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S78PWP:1;          /**< \brief [14:14] PFLASH pB sector 78 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S79PWP:1;          /**< \brief [15:15] PFLASH pB sector 79 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S80PWP:1;          /**< \brief [16:16] PFLASH pB sector 80 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S81PWP:1;          /**< \brief [17:17] PFLASH pB sector 81 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S82PWP:1;          /**< \brief [18:18] PFLASH pB sector 82 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S83PWP:1;          /**< \brief [19:19] PFLASH pB sector 83 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S84PWP:1;          /**< \brief [20:20] PFLASH pB sector 84 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S85PWP:1;          /**< \brief [21:21] PFLASH pB sector 85 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S86PWP:1;          /**< \brief [22:22] PFLASH pB sector 86 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S87PWP:1;          /**< \brief [23:23] PFLASH pB sector 87 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S88PWP:1;          /**< \brief [24:24] PFLASH pB sector 88 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S89PWP:1;          /**< \brief [25:25] PFLASH pB sector 89 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S90PWP:1;          /**< \brief [26:26] PFLASH pB sector 90 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S91PWP:1;          /**< \brief [27:27] PFLASH pB sector 91 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S92PWP:1;          /**< \brief [28:28] PFLASH pB sector 92 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S93PWP:1;          /**< \brief [29:29] PFLASH pB sector 93 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S94PWP:1;          /**< \brief [30:30] PFLASH pB sector 94 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S95PWP:1;          /**< \brief [31:31] PFLASH pB sector 95 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB2_Bits;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB3_Bits
{
    __I  Ifx_UReg_32Bit S96PWP:1;          /**< \brief [0:0] PFLASH pB sector 96 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S97PWP:1;          /**< \brief [1:1] PFLASH pB sector 97 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S98PWP:1;          /**< \brief [2:2] PFLASH pB sector 98 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S99PWP:1;          /**< \brief [3:3] PFLASH pB sector 99 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S100PWP:1;         /**< \brief [4:4] PFLASH pB sector 100 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S101PWP:1;         /**< \brief [5:5] PFLASH pB sector 101 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S102PWP:1;         /**< \brief [6:6] PFLASH pB sector 102 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S103PWP:1;         /**< \brief [7:7] PFLASH pB sector 103 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S104PWP:1;         /**< \brief [8:8] PFLASH pB sector 104 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S105PWP:1;         /**< \brief [9:9] PFLASH pB sector 105 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S106PWP:1;         /**< \brief [10:10] PFLASH pB sector 106 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S107PWP:1;         /**< \brief [11:11] PFLASH pB sector 107 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S108PWP:1;         /**< \brief [12:12] PFLASH pB sector 108 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S109PWP:1;         /**< \brief [13:13] PFLASH pB sector 109 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S110PWP:1;         /**< \brief [14:14] PFLASH pB sector 110 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S111PWP:1;         /**< \brief [15:15] PFLASH pB sector 111 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S112PWP:1;         /**< \brief [16:16] PFLASH pB sector 112 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S113PWP:1;         /**< \brief [17:17] PFLASH pB sector 113 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S114PWP:1;         /**< \brief [18:18] PFLASH pB sector 114 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S115PWP:1;         /**< \brief [19:19] PFLASH pB sector 115 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S116PWP:1;         /**< \brief [20:20] PFLASH pB sector 116 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S117PWP:1;         /**< \brief [21:21] PFLASH pB sector 117 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S118PWP:1;         /**< \brief [22:22] PFLASH pB sector 118 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S119PWP:1;         /**< \brief [23:23] PFLASH pB sector 119 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S120PWP:1;         /**< \brief [24:24] PFLASH pB sector 120 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S121PWP:1;         /**< \brief [25:25] PFLASH pB sector 121 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S122PWP:1;         /**< \brief [26:26] PFLASH pB sector 122 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S123PWP:1;         /**< \brief [27:27] PFLASH pB sector 123 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S124PWP:1;         /**< \brief [28:28] PFLASH pB sector 124 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S125PWP:1;         /**< \brief [29:29] PFLASH pB sector 125 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S126PWP:1;         /**< \brief [30:30] PFLASH pB sector 126 permanent write protection (rh) */
    __I  Ifx_UReg_32Bit S127PWP:1;         /**< \brief [31:31] PFLASH pB sector 127 permanent write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB3_Bits;

/** \brief HOST PFLASH bank P0A write protection configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPA0_Bits
{
    __I  Ifx_UReg_32Bit S0WP:1;            /**< \brief [0:0] PFLASH pA sector 0 write protection (rh) */
    __I  Ifx_UReg_32Bit S1WP:1;            /**< \brief [1:1] PFLASH pA sector 1 write protection (rh) */
    __I  Ifx_UReg_32Bit S2WP:1;            /**< \brief [2:2] PFLASH pA sector 2 write protection (rh) */
    __I  Ifx_UReg_32Bit S3WP:1;            /**< \brief [3:3] PFLASH pA sector 3 write protection (rh) */
    __I  Ifx_UReg_32Bit S4WP:1;            /**< \brief [4:4] PFLASH pA sector 4 write protection (rh) */
    __I  Ifx_UReg_32Bit S5WP:1;            /**< \brief [5:5] PFLASH pA sector 5 write protection (rh) */
    __I  Ifx_UReg_32Bit S6WP:1;            /**< \brief [6:6] PFLASH pA sector 6 write protection (rh) */
    __I  Ifx_UReg_32Bit S7WP:1;            /**< \brief [7:7] PFLASH pA sector 7 write protection (rh) */
    __I  Ifx_UReg_32Bit S8WP:1;            /**< \brief [8:8] PFLASH pA sector 8 write protection (rh) */
    __I  Ifx_UReg_32Bit S9WP:1;            /**< \brief [9:9] PFLASH pA sector 9 write protection (rh) */
    __I  Ifx_UReg_32Bit S10WP:1;           /**< \brief [10:10] PFLASH pA sector 10 write protection (rh) */
    __I  Ifx_UReg_32Bit S11WP:1;           /**< \brief [11:11] PFLASH pA sector 11 write protection (rh) */
    __I  Ifx_UReg_32Bit S12WP:1;           /**< \brief [12:12] PFLASH pA sector 12 write protection (rh) */
    __I  Ifx_UReg_32Bit S13WP:1;           /**< \brief [13:13] PFLASH pA sector 13 write protection (rh) */
    __I  Ifx_UReg_32Bit S14WP:1;           /**< \brief [14:14] PFLASH pA sector 14 write protection (rh) */
    __I  Ifx_UReg_32Bit S15WP:1;           /**< \brief [15:15] PFLASH pA sector 15 write protection (rh) */
    __I  Ifx_UReg_32Bit S16WP:1;           /**< \brief [16:16] PFLASH pA sector 16 write protection (rh) */
    __I  Ifx_UReg_32Bit S17WP:1;           /**< \brief [17:17] PFLASH pA sector 17 write protection (rh) */
    __I  Ifx_UReg_32Bit S18WP:1;           /**< \brief [18:18] PFLASH pA sector 18 write protection (rh) */
    __I  Ifx_UReg_32Bit S19WP:1;           /**< \brief [19:19] PFLASH pA sector 19 write protection (rh) */
    __I  Ifx_UReg_32Bit S20WP:1;           /**< \brief [20:20] PFLASH pA sector 20 write protection (rh) */
    __I  Ifx_UReg_32Bit S21WP:1;           /**< \brief [21:21] PFLASH pA sector 21 write protection (rh) */
    __I  Ifx_UReg_32Bit S22WP:1;           /**< \brief [22:22] PFLASH pA sector 22 write protection (rh) */
    __I  Ifx_UReg_32Bit S23WP:1;           /**< \brief [23:23] PFLASH pA sector 23 write protection (rh) */
    __I  Ifx_UReg_32Bit S24WP:1;           /**< \brief [24:24] PFLASH pA sector 24 write protection (rh) */
    __I  Ifx_UReg_32Bit S25WP:1;           /**< \brief [25:25] PFLASH pA sector 25 write protection (rh) */
    __I  Ifx_UReg_32Bit S26WP:1;           /**< \brief [26:26] PFLASH pA sector 26 write protection (rh) */
    __I  Ifx_UReg_32Bit S27WP:1;           /**< \brief [27:27] PFLASH pA sector 27 write protection (rh) */
    __I  Ifx_UReg_32Bit S28WP:1;           /**< \brief [28:28] PFLASH pA sector 28 write protection (rh) */
    __I  Ifx_UReg_32Bit S29WP:1;           /**< \brief [29:29] PFLASH pA sector 29 write protection (rh) */
    __I  Ifx_UReg_32Bit S30WP:1;           /**< \brief [30:30] PFLASH pA sector 30 write protection (rh) */
    __I  Ifx_UReg_32Bit S31WP:1;           /**< \brief [31:31] PFLASH pA sector 31 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA0_Bits;

/** \brief HOST PFLASH bank P0A write protection configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPA1_Bits
{
    __I  Ifx_UReg_32Bit S32WP:1;           /**< \brief [0:0] PFLASH pA sector 32 write protection (rh) */
    __I  Ifx_UReg_32Bit S33WP:1;           /**< \brief [1:1] PFLASH pA sector 33 write protection (rh) */
    __I  Ifx_UReg_32Bit S34WP:1;           /**< \brief [2:2] PFLASH pA sector 34 write protection (rh) */
    __I  Ifx_UReg_32Bit S35WP:1;           /**< \brief [3:3] PFLASH pA sector 35 write protection (rh) */
    __I  Ifx_UReg_32Bit S36WP:1;           /**< \brief [4:4] PFLASH pA sector 36 write protection (rh) */
    __I  Ifx_UReg_32Bit S37WP:1;           /**< \brief [5:5] PFLASH pA sector 37 write protection (rh) */
    __I  Ifx_UReg_32Bit S38WP:1;           /**< \brief [6:6] PFLASH pA sector 38 write protection (rh) */
    __I  Ifx_UReg_32Bit S39WP:1;           /**< \brief [7:7] PFLASH pA sector 39 write protection (rh) */
    __I  Ifx_UReg_32Bit S40WP:1;           /**< \brief [8:8] PFLASH pA sector 40 write protection (rh) */
    __I  Ifx_UReg_32Bit S41WP:1;           /**< \brief [9:9] PFLASH pA sector 41 write protection (rh) */
    __I  Ifx_UReg_32Bit S42WP:1;           /**< \brief [10:10] PFLASH pA sector 42 write protection (rh) */
    __I  Ifx_UReg_32Bit S43WP:1;           /**< \brief [11:11] PFLASH pA sector 43 write protection (rh) */
    __I  Ifx_UReg_32Bit S44WP:1;           /**< \brief [12:12] PFLASH pA sector 44 write protection (rh) */
    __I  Ifx_UReg_32Bit S45WP:1;           /**< \brief [13:13] PFLASH pA sector 45 write protection (rh) */
    __I  Ifx_UReg_32Bit S46WP:1;           /**< \brief [14:14] PFLASH pA sector 46 write protection (rh) */
    __I  Ifx_UReg_32Bit S47WP:1;           /**< \brief [15:15] PFLASH pA sector 47 write protection (rh) */
    __I  Ifx_UReg_32Bit S48WP:1;           /**< \brief [16:16] PFLASH pA sector 48 write protection (rh) */
    __I  Ifx_UReg_32Bit S49WP:1;           /**< \brief [17:17] PFLASH pA sector 49 write protection (rh) */
    __I  Ifx_UReg_32Bit S50WP:1;           /**< \brief [18:18] PFLASH pA sector 50 write protection (rh) */
    __I  Ifx_UReg_32Bit S51WP:1;           /**< \brief [19:19] PFLASH pA sector 51 write protection (rh) */
    __I  Ifx_UReg_32Bit S52WP:1;           /**< \brief [20:20] PFLASH pA sector 52 write protection (rh) */
    __I  Ifx_UReg_32Bit S53WP:1;           /**< \brief [21:21] PFLASH pA sector 53 write protection (rh) */
    __I  Ifx_UReg_32Bit S54WP:1;           /**< \brief [22:22] PFLASH pA sector 54 write protection (rh) */
    __I  Ifx_UReg_32Bit S55WP:1;           /**< \brief [23:23] PFLASH pA sector 55 write protection (rh) */
    __I  Ifx_UReg_32Bit S56WP:1;           /**< \brief [24:24] PFLASH pA sector 56 write protection (rh) */
    __I  Ifx_UReg_32Bit S57WP:1;           /**< \brief [25:25] PFLASH pA sector 57 write protection (rh) */
    __I  Ifx_UReg_32Bit S58WP:1;           /**< \brief [26:26] PFLASH pA sector 58 write protection (rh) */
    __I  Ifx_UReg_32Bit S59WP:1;           /**< \brief [27:27] PFLASH pA sector 59 write protection (rh) */
    __I  Ifx_UReg_32Bit S60WP:1;           /**< \brief [28:28] PFLASH pA sector 60 write protection (rh) */
    __I  Ifx_UReg_32Bit S61WP:1;           /**< \brief [29:29] PFLASH pA sector 61 write protection (rh) */
    __I  Ifx_UReg_32Bit S62WP:1;           /**< \brief [30:30] PFLASH pA sector 62 write protection (rh) */
    __I  Ifx_UReg_32Bit S63WP:1;           /**< \brief [31:31] PFLASH pA sector 63 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA1_Bits;

/** \brief HOST PFLASH bank P0A write protection configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPA2_Bits
{
    __I  Ifx_UReg_32Bit S64WP:1;           /**< \brief [0:0] PFLASH pA sector 64 write protection (rh) */
    __I  Ifx_UReg_32Bit S65WP:1;           /**< \brief [1:1] PFLASH pA sector 65 write protection (rh) */
    __I  Ifx_UReg_32Bit S66WP:1;           /**< \brief [2:2] PFLASH pA sector 66 write protection (rh) */
    __I  Ifx_UReg_32Bit S67WP:1;           /**< \brief [3:3] PFLASH pA sector 67 write protection (rh) */
    __I  Ifx_UReg_32Bit S68WP:1;           /**< \brief [4:4] PFLASH pA sector 68 write protection (rh) */
    __I  Ifx_UReg_32Bit S69WP:1;           /**< \brief [5:5] PFLASH pA sector 69 write protection (rh) */
    __I  Ifx_UReg_32Bit S70WP:1;           /**< \brief [6:6] PFLASH pA sector 70 write protection (rh) */
    __I  Ifx_UReg_32Bit S71WP:1;           /**< \brief [7:7] PFLASH pA sector 71 write protection (rh) */
    __I  Ifx_UReg_32Bit S72WP:1;           /**< \brief [8:8] PFLASH pA sector 72 write protection (rh) */
    __I  Ifx_UReg_32Bit S73WP:1;           /**< \brief [9:9] PFLASH pA sector 73 write protection (rh) */
    __I  Ifx_UReg_32Bit S74WP:1;           /**< \brief [10:10] PFLASH pA sector 74 write protection (rh) */
    __I  Ifx_UReg_32Bit S75WP:1;           /**< \brief [11:11] PFLASH pA sector 75 write protection (rh) */
    __I  Ifx_UReg_32Bit S76WP:1;           /**< \brief [12:12] PFLASH pA sector 76 write protection (rh) */
    __I  Ifx_UReg_32Bit S77WP:1;           /**< \brief [13:13] PFLASH pA sector 77 write protection (rh) */
    __I  Ifx_UReg_32Bit S78WP:1;           /**< \brief [14:14] PFLASH pA sector 78 write protection (rh) */
    __I  Ifx_UReg_32Bit S79WP:1;           /**< \brief [15:15] PFLASH pA sector 79 write protection (rh) */
    __I  Ifx_UReg_32Bit S80WP:1;           /**< \brief [16:16] PFLASH pA sector 80 write protection (rh) */
    __I  Ifx_UReg_32Bit S81WP:1;           /**< \brief [17:17] PFLASH pA sector 81 write protection (rh) */
    __I  Ifx_UReg_32Bit S82WP:1;           /**< \brief [18:18] PFLASH pA sector 82 write protection (rh) */
    __I  Ifx_UReg_32Bit S83WP:1;           /**< \brief [19:19] PFLASH pA sector 83 write protection (rh) */
    __I  Ifx_UReg_32Bit S84WP:1;           /**< \brief [20:20] PFLASH pA sector 84 write protection (rh) */
    __I  Ifx_UReg_32Bit S85WP:1;           /**< \brief [21:21] PFLASH pA sector 85 write protection (rh) */
    __I  Ifx_UReg_32Bit S86WP:1;           /**< \brief [22:22] PFLASH pA sector 86 write protection (rh) */
    __I  Ifx_UReg_32Bit S87WP:1;           /**< \brief [23:23] PFLASH pA sector 87 write protection (rh) */
    __I  Ifx_UReg_32Bit S88WP:1;           /**< \brief [24:24] PFLASH pA sector 88 write protection (rh) */
    __I  Ifx_UReg_32Bit S89WP:1;           /**< \brief [25:25] PFLASH pA sector 89 write protection (rh) */
    __I  Ifx_UReg_32Bit S90WP:1;           /**< \brief [26:26] PFLASH pA sector 90 write protection (rh) */
    __I  Ifx_UReg_32Bit S91WP:1;           /**< \brief [27:27] PFLASH pA sector 91 write protection (rh) */
    __I  Ifx_UReg_32Bit S92WP:1;           /**< \brief [28:28] PFLASH pA sector 92 write protection (rh) */
    __I  Ifx_UReg_32Bit S93WP:1;           /**< \brief [29:29] PFLASH pA sector 93 write protection (rh) */
    __I  Ifx_UReg_32Bit S94WP:1;           /**< \brief [30:30] PFLASH pA sector 94 write protection (rh) */
    __I  Ifx_UReg_32Bit S95WP:1;           /**< \brief [31:31] PFLASH pA sector 95 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA2_Bits;

/** \brief HOST PFLASH bank P0A write protection configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPA3_Bits
{
    __I  Ifx_UReg_32Bit S96WP:1;           /**< \brief [0:0] PFLASH pA sector 96 write protection (rh) */
    __I  Ifx_UReg_32Bit S97WP:1;           /**< \brief [1:1] PFLASH pA sector 97 write protection (rh) */
    __I  Ifx_UReg_32Bit S98WP:1;           /**< \brief [2:2] PFLASH pA sector 98 write protection (rh) */
    __I  Ifx_UReg_32Bit S99WP:1;           /**< \brief [3:3] PFLASH pA sector 99 write protection (rh) */
    __I  Ifx_UReg_32Bit S100WP:1;          /**< \brief [4:4] PFLASH pA sector 100 write protection (rh) */
    __I  Ifx_UReg_32Bit S101WP:1;          /**< \brief [5:5] PFLASH pA sector 101 write protection (rh) */
    __I  Ifx_UReg_32Bit S102WP:1;          /**< \brief [6:6] PFLASH pA sector 102 write protection (rh) */
    __I  Ifx_UReg_32Bit S103WP:1;          /**< \brief [7:7] PFLASH pA sector 103 write protection (rh) */
    __I  Ifx_UReg_32Bit S104WP:1;          /**< \brief [8:8] PFLASH pA sector 104 write protection (rh) */
    __I  Ifx_UReg_32Bit S105WP:1;          /**< \brief [9:9] PFLASH pA sector 105 write protection (rh) */
    __I  Ifx_UReg_32Bit S106WP:1;          /**< \brief [10:10] PFLASH pA sector 106 write protection (rh) */
    __I  Ifx_UReg_32Bit S107WP:1;          /**< \brief [11:11] PFLASH pA sector 107 write protection (rh) */
    __I  Ifx_UReg_32Bit S108WP:1;          /**< \brief [12:12] PFLASH pA sector 108 write protection (rh) */
    __I  Ifx_UReg_32Bit S109WP:1;          /**< \brief [13:13] PFLASH pA sector 109 write protection (rh) */
    __I  Ifx_UReg_32Bit S110WP:1;          /**< \brief [14:14] PFLASH pA sector 110 write protection (rh) */
    __I  Ifx_UReg_32Bit S111WP:1;          /**< \brief [15:15] PFLASH pA sector 111 write protection (rh) */
    __I  Ifx_UReg_32Bit S112WP:1;          /**< \brief [16:16] PFLASH pA sector 112 write protection (rh) */
    __I  Ifx_UReg_32Bit S113WP:1;          /**< \brief [17:17] PFLASH pA sector 113 write protection (rh) */
    __I  Ifx_UReg_32Bit S114WP:1;          /**< \brief [18:18] PFLASH pA sector 114 write protection (rh) */
    __I  Ifx_UReg_32Bit S115WP:1;          /**< \brief [19:19] PFLASH pA sector 115 write protection (rh) */
    __I  Ifx_UReg_32Bit S116WP:1;          /**< \brief [20:20] PFLASH pA sector 116 write protection (rh) */
    __I  Ifx_UReg_32Bit S117WP:1;          /**< \brief [21:21] PFLASH pA sector 117 write protection (rh) */
    __I  Ifx_UReg_32Bit S118WP:1;          /**< \brief [22:22] PFLASH pA sector 118 write protection (rh) */
    __I  Ifx_UReg_32Bit S119WP:1;          /**< \brief [23:23] PFLASH pA sector 119 write protection (rh) */
    __I  Ifx_UReg_32Bit S120WP:1;          /**< \brief [24:24] PFLASH pA sector 120 write protection (rh) */
    __I  Ifx_UReg_32Bit S121WP:1;          /**< \brief [25:25] PFLASH pA sector 121 write protection (rh) */
    __I  Ifx_UReg_32Bit S122WP:1;          /**< \brief [26:26] PFLASH pA sector 122 write protection (rh) */
    __I  Ifx_UReg_32Bit S123WP:1;          /**< \brief [27:27] PFLASH pA sector 123 write protection (rh) */
    __I  Ifx_UReg_32Bit S124WP:1;          /**< \brief [28:28] PFLASH pA sector 124 write protection (rh) */
    __I  Ifx_UReg_32Bit S125WP:1;          /**< \brief [29:29] PFLASH pA sector 125 write protection (rh) */
    __I  Ifx_UReg_32Bit S126WP:1;          /**< \brief [30:30] PFLASH pA sector 126 write protection (rh) */
    __I  Ifx_UReg_32Bit S127WP:1;          /**< \brief [31:31] PFLASH pA sector 127 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA3_Bits;

/** \brief HOST PFLASH bank P0B write protection configuration 0 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPB0_Bits
{
    __I  Ifx_UReg_32Bit S0WP:1;            /**< \brief [0:0] PFLASH pB sector 0 write protection (rh) */
    __I  Ifx_UReg_32Bit S1WP:1;            /**< \brief [1:1] PFLASH pB sector 1 write protection (rh) */
    __I  Ifx_UReg_32Bit S2WP:1;            /**< \brief [2:2] PFLASH pB sector 2 write protection (rh) */
    __I  Ifx_UReg_32Bit S3WP:1;            /**< \brief [3:3] PFLASH pB sector 3 write protection (rh) */
    __I  Ifx_UReg_32Bit S4WP:1;            /**< \brief [4:4] PFLASH pB sector 4 write protection (rh) */
    __I  Ifx_UReg_32Bit S5WP:1;            /**< \brief [5:5] PFLASH pB sector 5 write protection (rh) */
    __I  Ifx_UReg_32Bit S6WP:1;            /**< \brief [6:6] PFLASH pB sector 6 write protection (rh) */
    __I  Ifx_UReg_32Bit S7WP:1;            /**< \brief [7:7] PFLASH pB sector 7 write protection (rh) */
    __I  Ifx_UReg_32Bit S8WP:1;            /**< \brief [8:8] PFLASH pB sector 8 write protection (rh) */
    __I  Ifx_UReg_32Bit S9WP:1;            /**< \brief [9:9] PFLASH pB sector 9 write protection (rh) */
    __I  Ifx_UReg_32Bit S10WP:1;           /**< \brief [10:10] PFLASH pB sector 10 write protection (rh) */
    __I  Ifx_UReg_32Bit S11WP:1;           /**< \brief [11:11] PFLASH pB sector 11 write protection (rh) */
    __I  Ifx_UReg_32Bit S12WP:1;           /**< \brief [12:12] PFLASH pB sector 12 write protection (rh) */
    __I  Ifx_UReg_32Bit S13WP:1;           /**< \brief [13:13] PFLASH pB sector 13 write protection (rh) */
    __I  Ifx_UReg_32Bit S14WP:1;           /**< \brief [14:14] PFLASH pB sector 14 write protection (rh) */
    __I  Ifx_UReg_32Bit S15WP:1;           /**< \brief [15:15] PFLASH pB sector 15 write protection (rh) */
    __I  Ifx_UReg_32Bit S16WP:1;           /**< \brief [16:16] PFLASH pB sector 16 write protection (rh) */
    __I  Ifx_UReg_32Bit S17WP:1;           /**< \brief [17:17] PFLASH pB sector 17 write protection (rh) */
    __I  Ifx_UReg_32Bit S18WP:1;           /**< \brief [18:18] PFLASH pB sector 18 write protection (rh) */
    __I  Ifx_UReg_32Bit S19WP:1;           /**< \brief [19:19] PFLASH pB sector 19 write protection (rh) */
    __I  Ifx_UReg_32Bit S20WP:1;           /**< \brief [20:20] PFLASH pB sector 20 write protection (rh) */
    __I  Ifx_UReg_32Bit S21WP:1;           /**< \brief [21:21] PFLASH pB sector 21 write protection (rh) */
    __I  Ifx_UReg_32Bit S22WP:1;           /**< \brief [22:22] PFLASH pB sector 22 write protection (rh) */
    __I  Ifx_UReg_32Bit S23WP:1;           /**< \brief [23:23] PFLASH pB sector 23 write protection (rh) */
    __I  Ifx_UReg_32Bit S24WP:1;           /**< \brief [24:24] PFLASH pB sector 24 write protection (rh) */
    __I  Ifx_UReg_32Bit S25WP:1;           /**< \brief [25:25] PFLASH pB sector 25 write protection (rh) */
    __I  Ifx_UReg_32Bit S26WP:1;           /**< \brief [26:26] PFLASH pB sector 26 write protection (rh) */
    __I  Ifx_UReg_32Bit S27WP:1;           /**< \brief [27:27] PFLASH pB sector 27 write protection (rh) */
    __I  Ifx_UReg_32Bit S28WP:1;           /**< \brief [28:28] PFLASH pB sector 28 write protection (rh) */
    __I  Ifx_UReg_32Bit S29WP:1;           /**< \brief [29:29] PFLASH pB sector 29 write protection (rh) */
    __I  Ifx_UReg_32Bit S30WP:1;           /**< \brief [30:30] PFLASH pB sector 30 write protection (rh) */
    __I  Ifx_UReg_32Bit S31WP:1;           /**< \brief [31:31] PFLASH pB sector 31 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB0_Bits;

/** \brief HOST PFLASH bank P0B write protection configuration 1 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPB1_Bits
{
    __I  Ifx_UReg_32Bit S32WP:1;           /**< \brief [0:0] PFLASH pB sector 32 write protection (rh) */
    __I  Ifx_UReg_32Bit S33WP:1;           /**< \brief [1:1] PFLASH pB sector 33 write protection (rh) */
    __I  Ifx_UReg_32Bit S34WP:1;           /**< \brief [2:2] PFLASH pB sector 34 write protection (rh) */
    __I  Ifx_UReg_32Bit S35WP:1;           /**< \brief [3:3] PFLASH pB sector 35 write protection (rh) */
    __I  Ifx_UReg_32Bit S36WP:1;           /**< \brief [4:4] PFLASH pB sector 36 write protection (rh) */
    __I  Ifx_UReg_32Bit S37WP:1;           /**< \brief [5:5] PFLASH pB sector 37 write protection (rh) */
    __I  Ifx_UReg_32Bit S38WP:1;           /**< \brief [6:6] PFLASH pB sector 38 write protection (rh) */
    __I  Ifx_UReg_32Bit S39WP:1;           /**< \brief [7:7] PFLASH pB sector 39 write protection (rh) */
    __I  Ifx_UReg_32Bit S40WP:1;           /**< \brief [8:8] PFLASH pB sector 40 write protection (rh) */
    __I  Ifx_UReg_32Bit S41WP:1;           /**< \brief [9:9] PFLASH pB sector 41 write protection (rh) */
    __I  Ifx_UReg_32Bit S42WP:1;           /**< \brief [10:10] PFLASH pB sector 42 write protection (rh) */
    __I  Ifx_UReg_32Bit S43WP:1;           /**< \brief [11:11] PFLASH pB sector 43 write protection (rh) */
    __I  Ifx_UReg_32Bit S44WP:1;           /**< \brief [12:12] PFLASH pB sector 44 write protection (rh) */
    __I  Ifx_UReg_32Bit S45WP:1;           /**< \brief [13:13] PFLASH pB sector 45 write protection (rh) */
    __I  Ifx_UReg_32Bit S46WP:1;           /**< \brief [14:14] PFLASH pB sector 46 write protection (rh) */
    __I  Ifx_UReg_32Bit S47WP:1;           /**< \brief [15:15] PFLASH pB sector 47 write protection (rh) */
    __I  Ifx_UReg_32Bit S48WP:1;           /**< \brief [16:16] PFLASH pB sector 48 write protection (rh) */
    __I  Ifx_UReg_32Bit S49WP:1;           /**< \brief [17:17] PFLASH pB sector 49 write protection (rh) */
    __I  Ifx_UReg_32Bit S50WP:1;           /**< \brief [18:18] PFLASH pB sector 50 write protection (rh) */
    __I  Ifx_UReg_32Bit S51WP:1;           /**< \brief [19:19] PFLASH pB sector 51 write protection (rh) */
    __I  Ifx_UReg_32Bit S52WP:1;           /**< \brief [20:20] PFLASH pB sector 52 write protection (rh) */
    __I  Ifx_UReg_32Bit S53WP:1;           /**< \brief [21:21] PFLASH pB sector 53 write protection (rh) */
    __I  Ifx_UReg_32Bit S54WP:1;           /**< \brief [22:22] PFLASH pB sector 54 write protection (rh) */
    __I  Ifx_UReg_32Bit S55WP:1;           /**< \brief [23:23] PFLASH pB sector 55 write protection (rh) */
    __I  Ifx_UReg_32Bit S56WP:1;           /**< \brief [24:24] PFLASH pB sector 56 write protection (rh) */
    __I  Ifx_UReg_32Bit S57WP:1;           /**< \brief [25:25] PFLASH pB sector 57 write protection (rh) */
    __I  Ifx_UReg_32Bit S58WP:1;           /**< \brief [26:26] PFLASH pB sector 58 write protection (rh) */
    __I  Ifx_UReg_32Bit S59WP:1;           /**< \brief [27:27] PFLASH pB sector 59 write protection (rh) */
    __I  Ifx_UReg_32Bit S60WP:1;           /**< \brief [28:28] PFLASH pB sector 60 write protection (rh) */
    __I  Ifx_UReg_32Bit S61WP:1;           /**< \brief [29:29] PFLASH pB sector 61 write protection (rh) */
    __I  Ifx_UReg_32Bit S62WP:1;           /**< \brief [30:30] PFLASH pB sector 62 write protection (rh) */
    __I  Ifx_UReg_32Bit S63WP:1;           /**< \brief [31:31] PFLASH pB sector 63 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB1_Bits;

/** \brief HOST PFLASH bank P0B write protection configuration 2 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPB2_Bits
{
    __I  Ifx_UReg_32Bit S64WP:1;           /**< \brief [0:0] PFLASH pB sector 64 write protection (rh) */
    __I  Ifx_UReg_32Bit S65WP:1;           /**< \brief [1:1] PFLASH pB sector 65 write protection (rh) */
    __I  Ifx_UReg_32Bit S66WP:1;           /**< \brief [2:2] PFLASH pB sector 66 write protection (rh) */
    __I  Ifx_UReg_32Bit S67WP:1;           /**< \brief [3:3] PFLASH pB sector 67 write protection (rh) */
    __I  Ifx_UReg_32Bit S68WP:1;           /**< \brief [4:4] PFLASH pB sector 68 write protection (rh) */
    __I  Ifx_UReg_32Bit S69WP:1;           /**< \brief [5:5] PFLASH pB sector 69 write protection (rh) */
    __I  Ifx_UReg_32Bit S70WP:1;           /**< \brief [6:6] PFLASH pB sector 70 write protection (rh) */
    __I  Ifx_UReg_32Bit S71WP:1;           /**< \brief [7:7] PFLASH pB sector 71 write protection (rh) */
    __I  Ifx_UReg_32Bit S72WP:1;           /**< \brief [8:8] PFLASH pB sector 72 write protection (rh) */
    __I  Ifx_UReg_32Bit S73WP:1;           /**< \brief [9:9] PFLASH pB sector 73 write protection (rh) */
    __I  Ifx_UReg_32Bit S74WP:1;           /**< \brief [10:10] PFLASH pB sector 74 write protection (rh) */
    __I  Ifx_UReg_32Bit S75WP:1;           /**< \brief [11:11] PFLASH pB sector 75 write protection (rh) */
    __I  Ifx_UReg_32Bit S76WP:1;           /**< \brief [12:12] PFLASH pB sector 76 write protection (rh) */
    __I  Ifx_UReg_32Bit S77WP:1;           /**< \brief [13:13] PFLASH pB sector 77 write protection (rh) */
    __I  Ifx_UReg_32Bit S78WP:1;           /**< \brief [14:14] PFLASH pB sector 78 write protection (rh) */
    __I  Ifx_UReg_32Bit S79WP:1;           /**< \brief [15:15] PFLASH pB sector 79 write protection (rh) */
    __I  Ifx_UReg_32Bit S80WP:1;           /**< \brief [16:16] PFLASH pB sector 80 write protection (rh) */
    __I  Ifx_UReg_32Bit S81WP:1;           /**< \brief [17:17] PFLASH pB sector 81 write protection (rh) */
    __I  Ifx_UReg_32Bit S82WP:1;           /**< \brief [18:18] PFLASH pB sector 82 write protection (rh) */
    __I  Ifx_UReg_32Bit S83WP:1;           /**< \brief [19:19] PFLASH pB sector 83 write protection (rh) */
    __I  Ifx_UReg_32Bit S84WP:1;           /**< \brief [20:20] PFLASH pB sector 84 write protection (rh) */
    __I  Ifx_UReg_32Bit S85WP:1;           /**< \brief [21:21] PFLASH pB sector 85 write protection (rh) */
    __I  Ifx_UReg_32Bit S86WP:1;           /**< \brief [22:22] PFLASH pB sector 86 write protection (rh) */
    __I  Ifx_UReg_32Bit S87WP:1;           /**< \brief [23:23] PFLASH pB sector 87 write protection (rh) */
    __I  Ifx_UReg_32Bit S88WP:1;           /**< \brief [24:24] PFLASH pB sector 88 write protection (rh) */
    __I  Ifx_UReg_32Bit S89WP:1;           /**< \brief [25:25] PFLASH pB sector 89 write protection (rh) */
    __I  Ifx_UReg_32Bit S90WP:1;           /**< \brief [26:26] PFLASH pB sector 90 write protection (rh) */
    __I  Ifx_UReg_32Bit S91WP:1;           /**< \brief [27:27] PFLASH pB sector 91 write protection (rh) */
    __I  Ifx_UReg_32Bit S92WP:1;           /**< \brief [28:28] PFLASH pB sector 92 write protection (rh) */
    __I  Ifx_UReg_32Bit S93WP:1;           /**< \brief [29:29] PFLASH pB sector 93 write protection (rh) */
    __I  Ifx_UReg_32Bit S94WP:1;           /**< \brief [30:30] PFLASH pB sector 94 write protection (rh) */
    __I  Ifx_UReg_32Bit S95WP:1;           /**< \brief [31:31] PFLASH pB sector 95 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB2_Bits;

/** \brief HOST PFLASH bank P0B write protection configuration 3 */
typedef struct _Ifx_DMU_GP_HOST_PF_PFPROCONWPPB3_Bits
{
    __I  Ifx_UReg_32Bit S96WP:1;           /**< \brief [0:0] PFLASH pB sector 96 write protection (rh) */
    __I  Ifx_UReg_32Bit S97WP:1;           /**< \brief [1:1] PFLASH pB sector 97 write protection (rh) */
    __I  Ifx_UReg_32Bit S98WP:1;           /**< \brief [2:2] PFLASH pB sector 98 write protection (rh) */
    __I  Ifx_UReg_32Bit S99WP:1;           /**< \brief [3:3] PFLASH pB sector 99 write protection (rh) */
    __I  Ifx_UReg_32Bit S100WP:1;          /**< \brief [4:4] PFLASH pB sector 100 write protection (rh) */
    __I  Ifx_UReg_32Bit S101WP:1;          /**< \brief [5:5] PFLASH pB sector 101 write protection (rh) */
    __I  Ifx_UReg_32Bit S102WP:1;          /**< \brief [6:6] PFLASH pB sector 102 write protection (rh) */
    __I  Ifx_UReg_32Bit S103WP:1;          /**< \brief [7:7] PFLASH pB sector 103 write protection (rh) */
    __I  Ifx_UReg_32Bit S104WP:1;          /**< \brief [8:8] PFLASH pB sector 104 write protection (rh) */
    __I  Ifx_UReg_32Bit S105WP:1;          /**< \brief [9:9] PFLASH pB sector 105 write protection (rh) */
    __I  Ifx_UReg_32Bit S106WP:1;          /**< \brief [10:10] PFLASH pB sector 106 write protection (rh) */
    __I  Ifx_UReg_32Bit S107WP:1;          /**< \brief [11:11] PFLASH pB sector 107 write protection (rh) */
    __I  Ifx_UReg_32Bit S108WP:1;          /**< \brief [12:12] PFLASH pB sector 108 write protection (rh) */
    __I  Ifx_UReg_32Bit S109WP:1;          /**< \brief [13:13] PFLASH pB sector 109 write protection (rh) */
    __I  Ifx_UReg_32Bit S110WP:1;          /**< \brief [14:14] PFLASH pB sector 110 write protection (rh) */
    __I  Ifx_UReg_32Bit S111WP:1;          /**< \brief [15:15] PFLASH pB sector 111 write protection (rh) */
    __I  Ifx_UReg_32Bit S112WP:1;          /**< \brief [16:16] PFLASH pB sector 112 write protection (rh) */
    __I  Ifx_UReg_32Bit S113WP:1;          /**< \brief [17:17] PFLASH pB sector 113 write protection (rh) */
    __I  Ifx_UReg_32Bit S114WP:1;          /**< \brief [18:18] PFLASH pB sector 114 write protection (rh) */
    __I  Ifx_UReg_32Bit S115WP:1;          /**< \brief [19:19] PFLASH pB sector 115 write protection (rh) */
    __I  Ifx_UReg_32Bit S116WP:1;          /**< \brief [20:20] PFLASH pB sector 116 write protection (rh) */
    __I  Ifx_UReg_32Bit S117WP:1;          /**< \brief [21:21] PFLASH pB sector 117 write protection (rh) */
    __I  Ifx_UReg_32Bit S118WP:1;          /**< \brief [22:22] PFLASH pB sector 118 write protection (rh) */
    __I  Ifx_UReg_32Bit S119WP:1;          /**< \brief [23:23] PFLASH pB sector 119 write protection (rh) */
    __I  Ifx_UReg_32Bit S120WP:1;          /**< \brief [24:24] PFLASH pB sector 120 write protection (rh) */
    __I  Ifx_UReg_32Bit S121WP:1;          /**< \brief [25:25] PFLASH pB sector 121 write protection (rh) */
    __I  Ifx_UReg_32Bit S122WP:1;          /**< \brief [26:26] PFLASH pB sector 122 write protection (rh) */
    __I  Ifx_UReg_32Bit S123WP:1;          /**< \brief [27:27] PFLASH pB sector 123 write protection (rh) */
    __I  Ifx_UReg_32Bit S124WP:1;          /**< \brief [28:28] PFLASH pB sector 124 write protection (rh) */
    __I  Ifx_UReg_32Bit S125WP:1;          /**< \brief [29:29] PFLASH pB sector 125 write protection (rh) */
    __I  Ifx_UReg_32Bit S126WP:1;          /**< \brief [30:30] PFLASH pB sector 126 write protection (rh) */
    __I  Ifx_UReg_32Bit S127WP:1;          /**< \brief [31:31] PFLASH pB sector 127 write protection (rh) */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB3_Bits;

/** \brief HOST UCB password protection register */
typedef struct _Ifx_DMU_GP_HOST_PROTECT_Bits
{
    __I  Ifx_UReg_32Bit PRODISBMHD:1;      /**< \brief [0:0] UCB_RTC_BMHD protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISUSERCFG:1;    /**< \brief [1:1] UCB_RTC_USERCFG protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISSWAP:1;      /**< \brief [2:2] UCB_RTC_SWAP protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISECPRIO:1;    /**< \brief [3:3] UCB_RTC_ECPRIO protection disabled (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [5:4] \internal Reserved */
    __I  Ifx_UReg_32Bit PRODISUDATA0:1;    /**< \brief [6:6] UCB_USER_DATA0 protection disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISUDATA1:1;    /**< \brief [7:7] UCB_USER_DATA1 protection disabled (rh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [12:8] \internal Reserved */
    __I  Ifx_UReg_32Bit PRODISFL:1;        /**< \brief [13:13] HOST FLASH Protection Disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISD:1;         /**< \brief [14:14] HOST DFLASH Protection Disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISP:1;         /**< \brief [15:15] HOST PFLASH Protection Disabled (rh) */
    __I  Ifx_UReg_32Bit PRODISP0A:1;       /**< \brief [16:16] HOST PFLASH P0A protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP0B:1;       /**< \brief [17:17] HOST PFLASH P0B protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP1A:1;       /**< \brief [18:18] HOST PFLASH P1A protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP1B:1;       /**< \brief [19:19] HOST PFLASH P1B protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP2A:1;       /**< \brief [20:20] HOST PFLASH P2A protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP2B:1;       /**< \brief [21:21] HOST PFLASH P2B protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP3A:1;       /**< \brief [22:22] HOST PFLASH P3A protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP3B:1;       /**< \brief [23:23] HOST PFLASH P3B protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP4A:1;       /**< \brief [24:24] HOST PFLASH P4A protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP4B:1;       /**< \brief [25:25] HOST PFLASH P4B protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP5A:1;       /**< \brief [26:26] HOST PFLASH P5A protection disable (rh) */
    __I  Ifx_UReg_32Bit PRODISP5B:1;       /**< \brief [27:27] HOST PFLASH P5B protection disable (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [31:28] \internal Reserved */
} Ifx_DMU_GP_HOST_PROTECT_Bits;

/** \brief Power control register */
typedef struct _Ifx_DMU_GP_PCONTROL_Bits
{
    __I  Ifx_UReg_32Bit PMPCTRL:1;         /**< \brief [0:0] Pump mode control (rh) */
    __I  Ifx_UReg_32Bit :31;               /**< \brief [31:1] \internal Reserved */
} Ifx_DMU_GP_PCONTROL_Bits;

/** \brief HOST boot control register */
typedef struct _Ifx_DMU_HCI_BCONTROL_Bits
{
    __I  Ifx_UReg_32Bit :6;                /**< \brief [5:0] \internal Reserved */
    __IO Ifx_UReg_32Bit DDFD:1;            /**< \brief [6:6] Disable read access from DFLASH (rwh) */
    __IO Ifx_UReg_32Bit DDFP:1;            /**< \brief [7:7] Disable read access from PFLASH (rwh) */
    __I  Ifx_UReg_32Bit :24;               /**< \brief [31:8] \internal Reserved */
} Ifx_DMU_HCI_BCONTROL_Bits;

/** \brief HOST command interface clear error register */
typedef struct _Ifx_DMU_HCI_CLRERR_Bits
{
    __O  Ifx_Strict_32Bit CADER:1;         /**< \brief [0:0] Clear SRI bus Address error (w) */
    __O  Ifx_Strict_32Bit CSQER:1;         /**< \brief [1:1] Clears command sequence error (w) */
    __O  Ifx_Strict_32Bit CPROER:1;        /**< \brief [2:2] Clears protection error (w) */
    __I  Ifx_Strict_32Bit :1;              /**< \brief [3:3] \internal Reserved */
    __O  Ifx_Strict_32Bit CABER:1;         /**< \brief [4:4] Clears abort error (w) */
    __O  Ifx_Strict_32Bit CCLER:1;         /**< \brief [5:5] Clear clear error (w) */
    __O  Ifx_Strict_32Bit CPVER:1;         /**< \brief [6:6] Clear program verify error (w) */
    __O  Ifx_Strict_32Bit CEVER:1;         /**< \brief [7:7] Clear erase verify error (w) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DMU_HCI_CLRERR_Bits;

/** \brief HOST command interface error register */
typedef struct _Ifx_DMU_HCI_ERR_Bits
{
    __I  Ifx_UReg_32Bit ADER:1;            /**< \brief [0:0] SRI bus Address error (rh) */
    __I  Ifx_UReg_32Bit SQER:1;            /**< \brief [1:1] Command sequence error (rh) */
    __I  Ifx_UReg_32Bit PROER:1;           /**< \brief [2:2] Protection error (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [3:3] \internal Reserved */
    __I  Ifx_UReg_32Bit ABER:1;            /**< \brief [4:4] Abort error (rh) */
    __I  Ifx_UReg_32Bit CLER:1;            /**< \brief [5:5] Clear error (rh) */
    __I  Ifx_UReg_32Bit PVER:1;            /**< \brief [6:6] Program verify error (rh) */
    __I  Ifx_UReg_32Bit EVER:1;            /**< \brief [7:7] Erase verify error (rh) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __I  Ifx_UReg_32Bit OPER:1;            /**< \brief [16:16] Flash operation error (rh) */
    __I  Ifx_UReg_32Bit ORIER:1;           /**< \brief [17:17] Original error (rh) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [31:18] \internal Reserved */
} Ifx_DMU_HCI_ERR_Bits;

/** \brief HOST command interface interrupt enable register */
typedef struct _Ifx_DMU_HCI_INTEN_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit SQERM:1;           /**< \brief [1:1] Command sequence error interrupt mask (rw) */
    __IO Ifx_UReg_32Bit PROERM:1;          /**< \brief [2:2] Protection error interrupt mask (rw) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [5:3] \internal Reserved */
    __IO Ifx_UReg_32Bit PVERM:1;           /**< \brief [6:6] Program verify error interrupt mask (rw) */
    __IO Ifx_UReg_32Bit EVERM:1;           /**< \brief [7:7] Erase verify error interrupt mask (rw) */
    __I  Ifx_UReg_32Bit :8;                /**< \brief [15:8] \internal Reserved */
    __IO Ifx_UReg_32Bit OPERM:1;           /**< \brief [16:16] Flash operation error interrupt mask (rw) */
    __I  Ifx_UReg_32Bit :14;               /**< \brief [30:17] \internal Reserved */
    __IO Ifx_UReg_32Bit EOBM:1;            /**< \brief [31:31] End of busy interrupt mask (rw) */
} Ifx_DMU_HCI_INTEN_Bits;

/** \brief HOST operation control register */
typedef struct _Ifx_DMU_HCI_OCONTROL_Bits
{
    __I  Ifx_UReg_32Bit :1;                /**< \brief [0:0] \internal Reserved */
    __IO Ifx_UReg_32Bit ABORT:1;           /**< \brief [1:1] Abort request (rwh) */
    __IO Ifx_UReg_32Bit CLEAR:1;           /**< \brief [2:2] Clear Request (rwh) */
    __I  Ifx_UReg_32Bit :5;                /**< \brief [7:3] \internal Reserved */
    __IO Ifx_UReg_32Bit UCG:1;             /**< \brief [8:8] User Command Granularity (rw) */
    __IO Ifx_UReg_32Bit PRMODE:1;          /**< \brief [9:9] Programming mode (rw) */
    __IO Ifx_UReg_32Bit PMPMODE:1;         /**< \brief [10:10] Pump mode (rw) */
    __I  Ifx_UReg_32Bit :15;               /**< \brief [25:11] \internal Reserved */
    __O  Ifx_UReg_32Bit CPROG:1;           /**< \brief [26:26] Clear programming State (w) */
    __O  Ifx_UReg_32Bit CERASE:1;          /**< \brief [27:27] Clear erase State (w) */
    __O  Ifx_UReg_32Bit CUSER:1;           /**< \brief [28:28] Clear user State (w) */
    __I  Ifx_UReg_32Bit :3;                /**< \brief [31:29] \internal Reserved */
} Ifx_DMU_HCI_OCONTROL_Bits;

/** \brief HOST sleep register */
typedef struct _Ifx_DMU_HCI_SLEEP_Bits
{
    __I  Ifx_Strict_32Bit SLEEPP0A:1;      /**< \brief [0:0] HOST PFLASH P0A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP0B:1;      /**< \brief [1:1] HOST PFLASH P0B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP1A:1;      /**< \brief [2:2] HOST PFLASH P1A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP1B:1;      /**< \brief [3:3] HOST PFLASH P1B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP2A:1;      /**< \brief [4:4] HOST PFLASH P2A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP2B:1;      /**< \brief [5:5] HOST PFLASH P2B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP3A:1;      /**< \brief [6:6] HOST PFLASH P3A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP3B:1;      /**< \brief [7:7] HOST PFLASH P3B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP4A:1;      /**< \brief [8:8] HOST PFLASH P4A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP4B:1;      /**< \brief [9:9] HOST PFLASH P4B sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP5A:1;      /**< \brief [10:10] HOST PFLASH P5A sleeping (rh) */
    __I  Ifx_Strict_32Bit SLEEPP5B:1;      /**< \brief [11:11] HOST PFLASH P5B sleeping (rh) */
    __I  Ifx_Strict_32Bit :4;              /**< \brief [15:12] \internal Reserved */
    __I  Ifx_Strict_32Bit SLEEPHOSTDF:1;    /**< \brief [16:16] HOST DFLASH sleeping (rh) */
    __I  Ifx_Strict_32Bit :15;             /**< \brief [31:17] \internal Reserved */
} Ifx_DMU_HCI_SLEEP_Bits;

/** \brief HOST status register */
typedef struct _Ifx_DMU_HCI_STATUS_Bits
{
    __I  Ifx_UReg_32Bit BUSYP0A:1;         /**< \brief [0:0] HOST PFLASH P0A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP0B:1;         /**< \brief [1:1] HOST PFLASH P0B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP1A:1;         /**< \brief [2:2] HOST PFLASH P1A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP1B:1;         /**< \brief [3:3] HOST PFLASH P1B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP2A:1;         /**< \brief [4:4] HOST PFLASH P2A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP2B:1;         /**< \brief [5:5] HOST PFLASH P2B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP3A:1;         /**< \brief [6:6] HOST PFLASH P3A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP3B:1;         /**< \brief [7:7] HOST PFLASH P3B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP4A:1;         /**< \brief [8:8] HOST PFLASH P4A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP4B:1;         /**< \brief [9:9] HOST PFLASH P4B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP5A:1;         /**< \brief [10:10] HOST PFLASH P5A BUSY setting (rh) */
    __I  Ifx_UReg_32Bit BUSYP5B:1;         /**< \brief [11:11] HOST PFLASH P5B BUSY setting (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [15:12] \internal Reserved */
    __I  Ifx_UReg_32Bit BUSYHOSTDF:1;      /**< \brief [16:16] HOST DFLASH BUSY setting (rh) */
    __I  Ifx_UReg_32Bit :2;                /**< \brief [18:17] \internal Reserved */
    __I  Ifx_UReg_32Bit FSIACTIVE:1;       /**< \brief [19:19] HOST FSI active (rh) */
    __I  Ifx_UReg_32Bit :4;                /**< \brief [23:20] \internal Reserved */
    __I  Ifx_UReg_32Bit DFPAGE:1;          /**< \brief [24:24] Data Flash in Page Mode (rh) */
    __I  Ifx_UReg_32Bit PFPAGE:1;          /**< \brief [25:25] Program Flash in Page Mode (rh) */
    __I  Ifx_UReg_32Bit PROG:1;            /**< \brief [26:26] Programming State (rh) */
    __I  Ifx_UReg_32Bit ERASE:1;           /**< \brief [27:27] Erasing State (rh) */
    __I  Ifx_UReg_32Bit USER:1;            /**< \brief [28:28] User State (rh) */
    __I  Ifx_UReg_32Bit :1;                /**< \brief [29:29] \internal Reserved */
    __I  Ifx_UReg_32Bit REQACK:1;          /**< \brief [30:30] Request acknowledgement (rh) */
    __I  Ifx_UReg_32Bit REQDONE:1;         /**< \brief [31:31] Request done (rh) */
} Ifx_DMU_HCI_STATUS_Bits;

/** \brief Resource Protection Register */
typedef struct _Ifx_DMU_PROTREG_Bits
{
    __IO Ifx_Strict_32Bit STATE:3;         /**< \brief [2:0] Resource protection state (rwh) */
    __O  Ifx_Strict_32Bit SWEN:1;          /**< \brief [3:3] State write enable (w) */
    __I  Ifx_Strict_32Bit :12;             /**< \brief [15:4] \internal Reserved */
    __IO Ifx_Strict_32Bit VM:3;            /**< \brief [18:16] Virtual Machine definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit VMEN:1;          /**< \brief [19:19] Virtual Machine definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRS:3;           /**< \brief [22:20] Protection Set definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit PRSEN:1;         /**< \brief [23:23] Protection Set definition Enable for PROT owner (rw) */
    __IO Ifx_Strict_32Bit TAGID:6;         /**< \brief [29:24] TAG ID definition for PROT owner (rw) */
    __IO Ifx_Strict_32Bit ODEF:1;          /**< \brief [30:30] Enable for PROT owner definition (rw) */
    __O  Ifx_Strict_32Bit OWEN:1;          /**< \brief [31:31] Owner write enable (w) */
} Ifx_DMU_PROTREG_Bits;

/** \brief APU bypass */
typedef struct _Ifx_DMU_PROT_APUBYPASS_Bits
{
    __I  Ifx_Strict_32Bit BYPASS:8;        /**< \brief [7:0] BYPASS (rh) */
    __I  Ifx_Strict_32Bit :24;             /**< \brief [31:8] \internal Reserved */
} Ifx_DMU_PROT_APUBYPASS_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_dmu_Registers_union
 * \{   */
/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_DF_RGNLA_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_DF_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_DF_RGNUA_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_DF_RGNUA;

/** \brief Region lower address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_PF_RGNLA_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_PF_RGNLA;

/** \brief Region upper address register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_PF_RGNUA_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_PF_RGNUA;

/** \brief PRS access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_PRS_Bits B;              /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_PRS;

/** \brief Read access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_RDA_Bits B;              /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_RDA;

/** \brief Read access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_RDB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_RDB_SRI;

/** \brief VM access enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_VM_Bits B;               /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_VM;

/** \brief Write access enable register A   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_WRA_Bits B;              /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_WRA;

/** \brief Write access enable register B   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_ACCEN_WRB_SRI_Bits B;          /**< \brief Bitfield access */
} Ifx_DMU_ACCEN_WRB_SRI;

/** \brief CSRM boot control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_BCONTROL_Bits B;          /**< \brief Bitfield access */
} Ifx_DMU_CSCI_BCONTROL;

/** \brief CSRM command interface clear error register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_CLRERR_Bits B;            /**< \brief Bitfield access */
} Ifx_DMU_CSCI_CLRERR;

/** \brief CSRM command interface error register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_ERR_Bits B;               /**< \brief Bitfield access */
} Ifx_DMU_CSCI_ERR;

/** \brief CSRM command interface interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_INTEN_Bits B;             /**< \brief Bitfield access */
} Ifx_DMU_CSCI_INTEN;

/** \brief CSRM operation control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_OCONTROL_Bits B;          /**< \brief Bitfield access */
} Ifx_DMU_CSCI_OCONTROL;

/** \brief CSRM sleep register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_SLEEP_Bits B;             /**< \brief Bitfield access */
} Ifx_DMU_CSCI_SLEEP;

/** \brief CSRM status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_CSCI_STATUS_Bits B;            /**< \brief Bitfield access */
} Ifx_DMU_CSCI_STATUS;

/** \brief Bank allocation register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_BKALLOC_Bits B;             /**< \brief Bitfield access */
} Ifx_DMU_GP_BKALLOC;

/** \brief CSRM UCB confirmation codes register A   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_CONFIRMA_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_CONFIRMA;

/** \brief CSRM UCB confirmation codes register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_CONFIRMB_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_CONFIRMB;

/** \brief CSRM UCB confirmation codes register C   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_CONFIRMC_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_CONFIRMC;

/** \brief CSRM debug configuration   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DBGCFG_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DBGCFG;

/** \brief CSRM debug mode   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DBGMODE_Bits B;        /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DBGMODE;

/** \brief CSRM DFLASH ECC control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFECCC_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFECCC;

/** \brief CSRM DFLASH ECC read register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFECCR_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFECCR;

/** \brief CSRM DFLASH ECC status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFECCS_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFECCS;

/** \brief CSRM DFLASH ECC write register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFECCW_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFECCW;

/** \brief CSRM DFLASH margin control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFMARGIN_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFMARGIN;

/** \brief CSRM DFLASH protection register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFPROCON_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFPROCON;

/** \brief CSRM DFLASH wait cycle register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_DFWAIT_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_DFWAIT;

/** \brief CSRM PFLASH ECC write register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFECCW_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFECCW;

/** \brief CSRM PFLASH bank erase counter priority configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFECPRIO0_Bits B;      /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFECPRIO0;

/** \brief CSRM PFLASH bank erase counter priority configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFECPRIO1_Bits B;      /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFECPRIO1;

/** \brief CSRM PFLASH bank erase counter priority configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFECPRIO2_Bits B;      /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFECPRIO2;

/** \brief CSRM PFLASH bank erase counter priority configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFECPRIO3_Bits B;      /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFECPRIO3;

/** \brief CSRM PFLASH error injection register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFERRINJ_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFERRINJ;

/** \brief CSRM PFLASH bank permanent write once protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWOP0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP0;

/** \brief CSRM PFLASH bank permanent write once protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWOP1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP1;

/** \brief CSRM PFLASH bank permanent write once protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWOP2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP2;

/** \brief CSRM PFLASH bank permanent write once protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWOP3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWOP3;

/** \brief CSRM PFLASH bank permanent write protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWP0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWP0;

/** \brief CSRM PFLASH bank permanent write protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWP1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWP1;

/** \brief CSRM PFLASH bank permanent write protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWP2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWP2;

/** \brief CSRM PFLASH bank permanent write protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONPWP3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONPWP3;

/** \brief CSRM PFLASH bank write protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONWP0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONWP0;

/** \brief CSRM PFLASH bank write protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONWP1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONWP1;

/** \brief CSRM PFLASH bank write protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONWP2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONWP2;

/** \brief CSRM PFLASH bank write protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFPROCONWP3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFPROCONWP3;

/** \brief CSRM PFLASH wait cycle register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PFWAIT_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PFWAIT;

/** \brief CSRM UCB password protection register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_CSRM_PROTECT_Bits B;        /**< \brief Bitfield access */
} Ifx_DMU_GP_CSRM_PROTECT;

/** \brief HOST UCB confirmation codes register A   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_CONFIRMA_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_CONFIRMA;

/** \brief HOST UCB confirmation codes register B   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_CONFIRMB_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_CONFIRMB;

/** \brief HOST UCB confirmation codes register C   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_CONFIRMC_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_CONFIRMC;

/** \brief HOST DFLASH ECC control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFECCC_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFECCC;

/** \brief HOST DFLASH ECC read register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFECCR_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFECCR;

/** \brief HOST DFLASH ECC status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFECCS_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFECCS;

/** \brief HOST DFLASH ECC write register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFECCW_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFECCW;

/** \brief HOST DFLASH margin control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFMARGIN_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFMARGIN;

/** \brief HOST DFLASH protection register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFPROCON_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFPROCON;

/** \brief HOST DFLASH wait cycle register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_DFWAIT_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_DFWAIT;

/** \brief HOST PFLASH ECC write register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PFECCW_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PFECCW;

/** \brief HOST PFLASH error injection register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PFERRINJ_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PFERRINJ;

/** \brief HOST PFLASH protection register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PFPROCON_Bits B;       /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PFPROCON;

/** \brief HOST PFLASH wait cycle register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PFWAIT_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PFWAIT;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPA0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA0;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPA1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA1;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPA2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA2;

/** \brief HOST PFLASH bank P0A erase counter priority configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPA3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPA3;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPB0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB0;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPB1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB1;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPB2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB2;

/** \brief HOST PFLASH bank P0B erase counter priority configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFECPRIOPB3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFECPRIOPB3;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA0;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA1;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA2;

/** \brief HOST PFLASH bank P0A permanent write once protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA3;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB0;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB1;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB2;

/** \brief HOST PFLASH bank P0B permanent write once protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB3;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA0;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA1;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA2;

/** \brief HOST PFLASH bank P0A permanent write protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA3;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB0;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB1;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB2;

/** \brief HOST PFLASH bank P0B permanent write protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB3;

/** \brief HOST PFLASH bank P0A write protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPA0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA0;

/** \brief HOST PFLASH bank P0A write protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPA1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA1;

/** \brief HOST PFLASH bank P0A write protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPA2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA2;

/** \brief HOST PFLASH bank P0A write protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPA3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPA3;

/** \brief HOST PFLASH bank P0B write protection configuration 0   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPB0_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB0;

/** \brief HOST PFLASH bank P0B write protection configuration 1   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPB1_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB1;

/** \brief HOST PFLASH bank P0B write protection configuration 2   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPB2_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB2;

/** \brief HOST PFLASH bank P0B write protection configuration 3   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PF_PFPROCONWPPB3_Bits B;    /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PF_PFPROCONWPPB3;

/** \brief HOST UCB password protection register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_HOST_PROTECT_Bits B;        /**< \brief Bitfield access */
} Ifx_DMU_GP_HOST_PROTECT;

/** \brief Power control register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_GP_PCONTROL_Bits B;            /**< \brief Bitfield access */
} Ifx_DMU_GP_PCONTROL;

/** \brief HOST boot control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_BCONTROL_Bits B;           /**< \brief Bitfield access */
} Ifx_DMU_HCI_BCONTROL;

/** \brief HOST command interface clear error register   */
typedef union
{
    __O  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __O  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_CLRERR_Bits B;             /**< \brief Bitfield access */
} Ifx_DMU_HCI_CLRERR;

/** \brief HOST command interface error register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_ERR_Bits B;                /**< \brief Bitfield access */
} Ifx_DMU_HCI_ERR;

/** \brief HOST command interface interrupt enable register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_INTEN_Bits B;              /**< \brief Bitfield access */
} Ifx_DMU_HCI_INTEN;

/** \brief HOST operation control register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_OCONTROL_Bits B;           /**< \brief Bitfield access */
} Ifx_DMU_HCI_OCONTROL;

/** \brief HOST sleep register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_SLEEP_Bits B;              /**< \brief Bitfield access */
} Ifx_DMU_HCI_SLEEP;

/** \brief HOST status register   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_HCI_STATUS_Bits B;             /**< \brief Bitfield access */
} Ifx_DMU_HCI_STATUS;

/** \brief Resource Protection Register   */
typedef union
{
    __IO Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __IO Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_PROTREG_Bits B;                /**< \brief Bitfield access */
} Ifx_DMU_PROTREG;

/** \brief APU bypass   */
typedef union
{
    __I  Ifx_UReg_32Bit U;                 /**< \brief Unsigned access */
    __I  Ifx_SReg_32Bit I;                 /**< \brief Signed access */
    Ifx_DMU_PROT_APUBYPASS_Bits B;         /**< \brief Bitfield access */
} Ifx_DMU_PROT_APUBYPASS;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_HCI_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief HCI object */
typedef volatile struct _Ifx_DMU_HCI
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __I  Ifx_DMU_HCI_STATUS                  STATUS;                 /**< \brief 4, HOST status register*/
       __IO Ifx_DMU_HCI_BCONTROL                BCONTROL;               /**< \brief 8, HOST boot control register*/
       __IO Ifx_DMU_HCI_OCONTROL                OCONTROL;               /**< \brief C, HOST operation control register*/
       __I  Ifx_DMU_HCI_ERR                     ERR;                    /**< \brief 10, HOST command interface error register*/
       __O  Ifx_DMU_HCI_CLRERR                  CLRERR;                 /**< \brief 14, HOST command interface clear error register*/
       __IO Ifx_DMU_HCI_INTEN                   INTEN;                  /**< \brief 18, HOST command interface interrupt enable register*/
       __I  Ifx_DMU_HCI_SLEEP                   SLEEP;                  /**< \brief 1C, HOST sleep register*/
} Ifx_DMU_HCI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_CSCI_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief CSCI object */
typedef volatile struct _Ifx_DMU_CSCI
{
       __I  Ifx_UReg_8Bit                       reserved_0[4];          /**< \brief 0, \internal Reserved */
       __I  Ifx_DMU_CSCI_STATUS                 STATUS;                 /**< \brief 4, CSRM status register*/
       __IO Ifx_DMU_CSCI_BCONTROL               BCONTROL;               /**< \brief 8, CSRM boot control register*/
       __IO Ifx_DMU_CSCI_OCONTROL               OCONTROL;               /**< \brief C, CSRM operation control register*/
       __I  Ifx_DMU_CSCI_ERR                    ERR;                    /**< \brief 10, CSRM command interface error register*/
       __O  Ifx_DMU_CSCI_CLRERR                 CLRERR;                 /**< \brief 14, CSRM command interface clear error register*/
       __IO Ifx_DMU_CSCI_INTEN                  INTEN;                  /**< \brief 18, CSRM command interface interrupt enable register*/
       __I  Ifx_DMU_CSCI_SLEEP                  SLEEP;                  /**< \brief 1C, CSRM sleep register*/
} Ifx_DMU_CSCI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_GP_HOST_PF_struct
 * \{  */
/******************************************************************************/
/** \name Object L3
 * \{  */
/** \brief PF object */
typedef volatile struct _Ifx_DMU_GP_HOST_PF
{
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPA0    PFPROCONWPPA0;          /**< \brief 0, HOST PFLASH bank P0A write protection configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPA1    PFPROCONWPPA1;          /**< \brief 4, HOST PFLASH bank P0A write protection configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPA2    PFPROCONWPPA2;          /**< \brief 8, HOST PFLASH bank P0A write protection configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPA3    PFPROCONWPPA3;          /**< \brief C, HOST PFLASH bank P0A write protection configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA0   PFPROCONPWPPA0;         /**< \brief 10, HOST PFLASH bank P0A permanent write protection configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA1   PFPROCONPWPPA1;         /**< \brief 14, HOST PFLASH bank P0A permanent write protection configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA2   PFPROCONPWPPA2;         /**< \brief 18, HOST PFLASH bank P0A permanent write protection configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPA3   PFPROCONPWPPA3;         /**< \brief 1C, HOST PFLASH bank P0A permanent write protection configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA0  PFPROCONPWOPPA0;        /**< \brief 20, HOST PFLASH bank P0A permanent write once protection configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA1  PFPROCONPWOPPA1;        /**< \brief 24, HOST PFLASH bank P0A permanent write once protection configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA2  PFPROCONPWOPPA2;        /**< \brief 28, HOST PFLASH bank P0A permanent write once protection configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPA3  PFPROCONPWOPPA3;        /**< \brief 2C, HOST PFLASH bank P0A permanent write once protection configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPA0      PFECPRIOPA0;            /**< \brief 30, HOST PFLASH bank P0A erase counter priority configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPA1      PFECPRIOPA1;            /**< \brief 34, HOST PFLASH bank P0A erase counter priority configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPA2      PFECPRIOPA2;            /**< \brief 38, HOST PFLASH bank P0A erase counter priority configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPA3      PFECPRIOPA3;            /**< \brief 3C, HOST PFLASH bank P0A erase counter priority configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPB0    PFPROCONWPPB0;          /**< \brief 40, HOST PFLASH bank P0B write protection configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPB1    PFPROCONWPPB1;          /**< \brief 44, HOST PFLASH bank P0B write protection configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPB2    PFPROCONWPPB2;          /**< \brief 48, HOST PFLASH bank P0B write protection configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONWPPB3    PFPROCONWPPB3;          /**< \brief 4C, HOST PFLASH bank P0B write protection configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB0   PFPROCONPWPPB0;         /**< \brief 50, HOST PFLASH bank P0B permanent write protection configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB1   PFPROCONPWPPB1;         /**< \brief 54, HOST PFLASH bank P0B permanent write protection configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB2   PFPROCONPWPPB2;         /**< \brief 58, HOST PFLASH bank P0B permanent write protection configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWPPB3   PFPROCONPWPPB3;         /**< \brief 5C, HOST PFLASH bank P0B permanent write protection configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB0  PFPROCONPWOPPB0;        /**< \brief 60, HOST PFLASH bank P0B permanent write once protection configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB1  PFPROCONPWOPPB1;        /**< \brief 64, HOST PFLASH bank P0B permanent write once protection configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB2  PFPROCONPWOPPB2;        /**< \brief 68, HOST PFLASH bank P0B permanent write once protection configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFPROCONPWOPPB3  PFPROCONPWOPPB3;        /**< \brief 6C, HOST PFLASH bank P0B permanent write once protection configuration 3*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPB0      PFECPRIOPB0;            /**< \brief 70, HOST PFLASH bank P0B erase counter priority configuration 0*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPB1      PFECPRIOPB1;            /**< \brief 74, HOST PFLASH bank P0B erase counter priority configuration 1*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPB2      PFECPRIOPB2;            /**< \brief 78, HOST PFLASH bank P0B erase counter priority configuration 2*/
       __I  Ifx_DMU_GP_HOST_PF_PFECPRIOPB3      PFECPRIOPB3;            /**< \brief 7C, HOST PFLASH bank P0B erase counter priority configuration 3*/
} Ifx_DMU_GP_HOST_PF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_GP_HOST_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief HOST object */
typedef volatile struct _Ifx_DMU_GP_HOST
{
       __IO Ifx_DMU_GP_HOST_DFWAIT              DFWAIT;                 /**< \brief 0, HOST DFLASH wait cycle register*/
       __IO Ifx_DMU_GP_HOST_DFMARGIN            DFMARGIN;               /**< \brief 4, HOST DFLASH margin control register*/
       __I  Ifx_DMU_GP_HOST_DFECCR              DFECCR;                 /**< \brief 8, HOST DFLASH ECC read register*/
       __I  Ifx_DMU_GP_HOST_DFECCS              DFECCS;                 /**< \brief C, HOST DFLASH ECC status register*/
       __IO Ifx_DMU_GP_HOST_DFECCC              DFECCC;                 /**< \brief 10, HOST DFLASH ECC control register*/
       __IO Ifx_DMU_GP_HOST_DFECCW              DFECCW;                 /**< \brief 14, HOST DFLASH ECC write register*/
       __I  Ifx_DMU_GP_HOST_DFPROCON            DFPROCON;               /**< \brief 18, HOST DFLASH protection register*/
       __IO Ifx_DMU_GP_HOST_PFWAIT              PFWAIT;                 /**< \brief 1C, HOST PFLASH wait cycle register*/
       __O  Ifx_DMU_GP_HOST_PFERRINJ            PFERRINJ;               /**< \brief 20, HOST PFLASH error injection register*/
       __IO Ifx_DMU_GP_HOST_PFECCW              PFECCW;                 /**< \brief 24, HOST PFLASH ECC write register*/
       __I  Ifx_DMU_GP_HOST_PFPROCON            PFPROCON;               /**< \brief 28, HOST PFLASH protection register*/
       __IO Ifx_DMU_GP_HOST_PF                  PF[8];                  /**< \brief 2C, */
       __I  Ifx_DMU_GP_HOST_PROTECT             PROTECT;                /**< \brief 42C, HOST UCB password protection register*/
       __I  Ifx_DMU_GP_HOST_CONFIRMA            CONFIRMA;               /**< \brief 430, HOST UCB confirmation codes register A*/
       __I  Ifx_DMU_GP_HOST_CONFIRMB            CONFIRMB;               /**< \brief 434, HOST UCB confirmation codes register B*/
       __I  Ifx_DMU_GP_HOST_CONFIRMC            CONFIRMC;               /**< \brief 438, HOST UCB confirmation codes register C*/
} Ifx_DMU_GP_HOST;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_GP_CSRM_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief CSRM object */
typedef volatile struct _Ifx_DMU_GP_CSRM
{
       __IO Ifx_DMU_GP_CSRM_DFWAIT              DFWAIT;                 /**< \brief 0, CSRM DFLASH wait cycle register*/
       __IO Ifx_DMU_GP_CSRM_DFMARGIN            DFMARGIN;               /**< \brief 4, CSRM DFLASH margin control register*/
       __I  Ifx_DMU_GP_CSRM_DFECCR              DFECCR;                 /**< \brief 8, CSRM DFLASH ECC read register*/
       __I  Ifx_DMU_GP_CSRM_DFECCS              DFECCS;                 /**< \brief C, CSRM DFLASH ECC status register*/
       __IO Ifx_DMU_GP_CSRM_DFECCC              DFECCC;                 /**< \brief 10, CSRM DFLASH ECC control register*/
       __IO Ifx_DMU_GP_CSRM_DFECCW              DFECCW;                 /**< \brief 14, CSRM DFLASH ECC write register*/
       __I  Ifx_DMU_GP_CSRM_DFPROCON            DFPROCON;               /**< \brief 18, CSRM DFLASH protection register*/
       __I  Ifx_UReg_8Bit                       reserved_1C[4];         /**< \brief 1C, \internal Reserved */
       __IO Ifx_DMU_GP_CSRM_PFWAIT              PFWAIT;                 /**< \brief 20, CSRM PFLASH wait cycle register*/
       __O  Ifx_DMU_GP_CSRM_PFERRINJ            PFERRINJ;               /**< \brief 24, CSRM PFLASH error injection register*/
       __IO Ifx_DMU_GP_CSRM_PFECCW              PFECCW;                 /**< \brief 28, CSRM PFLASH ECC write register*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONWP0         PFPROCONWP0;            /**< \brief 2C, CSRM PFLASH bank write protection configuration 0*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONWP1         PFPROCONWP1;            /**< \brief 30, CSRM PFLASH bank write protection configuration 1*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONWP2         PFPROCONWP2;            /**< \brief 34, CSRM PFLASH bank write protection configuration 2*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONWP3         PFPROCONWP3;            /**< \brief 38, CSRM PFLASH bank write protection configuration 3*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWP0        PFPROCONPWP0;           /**< \brief 3C, CSRM PFLASH bank permanent write protection configuration 0*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWP1        PFPROCONPWP1;           /**< \brief 40, CSRM PFLASH bank permanent write protection configuration 1*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWP2        PFPROCONPWP2;           /**< \brief 44, CSRM PFLASH bank permanent write protection configuration 2*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWP3        PFPROCONPWP3;           /**< \brief 48, CSRM PFLASH bank permanent write protection configuration 3*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWOP0       PFPROCONPWOP0;          /**< \brief 4C, CSRM PFLASH bank permanent write once protection configuration 0*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWOP1       PFPROCONPWOP1;          /**< \brief 50, CSRM PFLASH bank permanent write once protection configuration 1*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWOP2       PFPROCONPWOP2;          /**< \brief 54, CSRM PFLASH bank permanent write once protection configuration 2*/
       __I  Ifx_DMU_GP_CSRM_PFPROCONPWOP3       PFPROCONPWOP3;          /**< \brief 58, CSRM PFLASH bank permanent write once protection configuration 3*/
       __I  Ifx_DMU_GP_CSRM_PFECPRIO0           PFECPRIO0;              /**< \brief 5C, CSRM PFLASH bank erase counter priority configuration 0*/
       __I  Ifx_DMU_GP_CSRM_PFECPRIO1           PFECPRIO1;              /**< \brief 60, CSRM PFLASH bank erase counter priority configuration 1*/
       __I  Ifx_DMU_GP_CSRM_PFECPRIO2           PFECPRIO2;              /**< \brief 64, CSRM PFLASH bank erase counter priority configuration 2*/
       __I  Ifx_DMU_GP_CSRM_PFECPRIO3           PFECPRIO3;              /**< \brief 68, CSRM PFLASH bank erase counter priority configuration 3*/
       __I  Ifx_DMU_GP_CSRM_PROTECT             PROTECT;                /**< \brief 6C, CSRM UCB password protection register*/
       __I  Ifx_DMU_GP_CSRM_CONFIRMA            CONFIRMA;               /**< \brief 70, CSRM UCB confirmation codes register A*/
       __I  Ifx_DMU_GP_CSRM_CONFIRMB            CONFIRMB;               /**< \brief 74, CSRM UCB confirmation codes register B*/
       __I  Ifx_DMU_GP_CSRM_CONFIRMC            CONFIRMC;               /**< \brief 78, CSRM UCB confirmation codes register C*/
       __I  Ifx_DMU_GP_CSRM_DBGCFG              DBGCFG;                 /**< \brief 7C, CSRM debug configuration*/
       __I  Ifx_DMU_GP_CSRM_DBGMODE             DBGMODE;                /**< \brief 80, CSRM debug mode*/
} Ifx_DMU_GP_CSRM;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_GP_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief GP object */
typedef volatile struct _Ifx_DMU_GP
{
       __IO Ifx_DMU_GP_HOST                     HOST;                   /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_43C[964];      /**< \brief 43C, \internal Reserved */
       __IO Ifx_DMU_GP_CSRM                     CSRM;                   /**< \brief 800, */
       __I  Ifx_UReg_8Bit                       reserved_884[124];      /**< \brief 884, \internal Reserved */
       __I  Ifx_DMU_GP_BKALLOC                  BKALLOC;                /**< \brief 900, Bank allocation register*/
       __I  Ifx_UReg_8Bit                       reserved_904[16];       /**< \brief 904, \internal Reserved */
       __I  Ifx_DMU_GP_PCONTROL                 PCONTROL;               /**< \brief 914, Power control register*/
} Ifx_DMU_GP;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENHCI_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENHCI object */
typedef volatile struct _Ifx_DMU_PROT_ACCENHCI
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, HOST command interface and HCI registers, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, HOST command interface and HCI registers, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, HOST command interface and HCI registers, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, HOST command interface and HCI registers, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, HOST command interface and HCI registers, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, HOST command interface and HCI registers, PRS access enable register*/
} Ifx_DMU_PROT_ACCENHCI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENCSCI_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCSCI object */
typedef volatile struct _Ifx_DMU_PROT_ACCENCSCI
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, CSRM command interface and CSCI registers, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CSRM command interface and CSCI registers, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, CSRM command interface and CSCI registers, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CSRM command interface and CSCI registers, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, CSRM command interface and CSCI registers, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, CSRM command interface and CSCI registers, PRS access enable register*/
} Ifx_DMU_PROT_ACCENCSCI;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENHRDC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENHRDC object */
typedef volatile struct _Ifx_DMU_PROT_ACCENHRDC
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, HOST read configurations registers, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, HOST read configurations registers, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, HOST read configurations registers, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, HOST read configurations registers, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, HOST read configurations registers, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, HOST read configurations registers, PRS access enable register*/
} Ifx_DMU_PROT_ACCENHRDC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENCSRDC_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCSRDC object */
typedef volatile struct _Ifx_DMU_PROT_ACCENCSRDC
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, CSRM read configurations registers, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CSRM read configurations registers, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, CSRM read configurations registers, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CSRM read configurations registers, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, CSRM read configurations registers, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, CSRM read configurations registers, PRS access enable register*/
} Ifx_DMU_PROT_ACCENCSRDC;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENHPF_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENHPF object */
typedef volatile struct _Ifx_DMU_PROT_ACCENHPF
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, HOST PFLASH memory P0, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, HOST PFLASH memory P0, write access enable register B*/
       __I  Ifx_UReg_8Bit                       reserved_8[8];          /**< \brief 8, \internal Reserved */
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, HOST PFLASH memory P0, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, HOST PFLASH memory P0, PRS access enable register*/
       __IO Ifx_DMU_ACCEN_PF_RGNLA              RGNLA;                  /**< \brief 18, HOST PFLASH memory P0, region lower address register*/
       __IO Ifx_DMU_ACCEN_PF_RGNUA              RGNUA;                  /**< \brief 1C, HOST PFLASH memory P0, region upper address register*/
} Ifx_DMU_PROT_ACCENHPF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENHDF_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENHDF object */
typedef volatile struct _Ifx_DMU_PROT_ACCENHDF
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, HOST DFLASH (EEPROM) memory D0, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, HOST DFLASH (EEPROM) memory D0, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, HOST DFLASH (EEPROM) memory D0, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, HOST DFLASH (EEPROM) memory D0, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, HOST DFLASH (EEPROM) memory D0, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, HOST DFLASH (EEPROM) memory D0, PRS access enable register*/
       __IO Ifx_DMU_ACCEN_DF_RGNLA              RGNLA;                  /**< \brief 18, HOST DFLASH (EEPROM) memory D0, region lower address register*/
       __IO Ifx_DMU_ACCEN_DF_RGNUA              RGNUA;                  /**< \brief 1C, HOST DFLASH (EEPROM) memory D0, region upper address register*/
} Ifx_DMU_PROT_ACCENHDF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENHDFUCB_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENHDFUCB object */
typedef volatile struct _Ifx_DMU_PROT_ACCENHDFUCB
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, HOST UCB memory, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, HOST UCB memory, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, HOST UCB memory, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, HOST UCB memory, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, HOST UCB memory, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, HOST UCB memory, PRS access enable register*/
} Ifx_DMU_PROT_ACCENHDFUCB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENCSPF_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCSPF object */
typedef volatile struct _Ifx_DMU_PROT_ACCENCSPF
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, CSRM PFLASH memory P0, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CSRM PFLASH memory P0, write access enable register B*/
       __I  Ifx_UReg_8Bit                       reserved_8[8];          /**< \brief 8, \internal Reserved */
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, CSRM PFLASH memory P0, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, CSRM PFLASH memory P0, PRS access enable register*/
       __IO Ifx_DMU_ACCEN_PF_RGNLA              RGNLA;                  /**< \brief 18, CSRM PFLASH memory P0, region lower address register*/
       __IO Ifx_DMU_ACCEN_PF_RGNUA              RGNUA;                  /**< \brief 1C, CSRM PFLASH memory P0, region upper address register*/
} Ifx_DMU_PROT_ACCENCSPF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENCSDF_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCSDF object */
typedef volatile struct _Ifx_DMU_PROT_ACCENCSDF
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, CSRM DFLASH (EEPROM) memory D0, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CSRM DFLASH (EEPROM) memory D0, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, CSRM DFLASH (EEPROM) memory D0, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CSRM DFLASH (EEPROM) memory D0, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, CSRM DFLASH (EEPROM) memory D0, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, CSRM DFLASH (EEPROM) memory D0, PRS access enable register*/
       __IO Ifx_DMU_ACCEN_DF_RGNLA              RGNLA;                  /**< \brief 18, CSRM DFLASH (EEPROM) memory D0, region lower address register*/
       __IO Ifx_DMU_ACCEN_DF_RGNUA              RGNUA;                  /**< \brief 1C, CSRM DFLASH (EEPROM) memory D0, region upper address register*/
} Ifx_DMU_PROT_ACCENCSDF;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_ACCENCSDFUCB_struct
 * \{  */
/******************************************************************************/
/** \name Object L2
 * \{  */
/** \brief ACCENCSDFUCB object */
typedef volatile struct _Ifx_DMU_PROT_ACCENCSDFUCB
{
       __IO Ifx_DMU_ACCEN_WRA                   WRA;                    /**< \brief 0, CSRM UCB memory, write access enable register A*/
       __IO Ifx_DMU_ACCEN_WRB_SRI               WRB;                    /**< \brief 4, CSRM UCB memory, write access enable register B*/
       __IO Ifx_DMU_ACCEN_RDA                   RDA;                    /**< \brief 8, CSRM UCB memory, read access enable register A*/
       __IO Ifx_DMU_ACCEN_RDB_SRI               RDB;                    /**< \brief C, CSRM UCB memory, read access enable register B*/
       __IO Ifx_DMU_ACCEN_VM                    VM;                     /**< \brief 10, CSRM UCB memory, VM access enable register*/
       __IO Ifx_DMU_ACCEN_PRS                   PRS;                    /**< \brief 14, CSRM UCB memory, PRS access enable register*/
} Ifx_DMU_PROT_ACCENCSDFUCB;

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_PROT_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief PROT object */
typedef volatile struct _Ifx_DMU_PROT
{
       __IO Ifx_DMU_PROTREG                     PROTHCI;                /**< \brief 0, PROT register for HOST command interface and HCI registers*/
       __I  Ifx_UReg_8Bit                       reserved_4[4];          /**< \brief 4, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENHCI               ACCENHCI;               /**< \brief 8, NVM APU for HOST command interface and HCI registers*/
       __I  Ifx_UReg_8Bit                       reserved_20[8];         /**< \brief 20, \internal Reserved */
       __IO Ifx_DMU_PROTREG                     PROTCSCI;               /**< \brief 28, PROT register for CSRM command interface and CSCI registers*/
       __I  Ifx_UReg_8Bit                       reserved_2C[4];         /**< \brief 2C, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENCSCI              ACCENCSCI;              /**< \brief 30, NVM APU for CSRM command interface and CSCI registers*/
       __I  Ifx_UReg_8Bit                       reserved_48[8];         /**< \brief 48, \internal Reserved */
       __IO Ifx_DMU_PROTREG                     PROTHRDC;               /**< \brief 50, PROT register for HOST read configurations registers*/
       __I  Ifx_UReg_8Bit                       reserved_54[4];         /**< \brief 54, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENHRDC              ACCENHRDC;              /**< \brief 58, NVM APU for HOST read configurations registers*/
       __I  Ifx_UReg_8Bit                       reserved_70[8];         /**< \brief 70, \internal Reserved */
       __IO Ifx_DMU_PROTREG                     PROTCSRDC;              /**< \brief 78, PROT register for CSRM read configurations registers*/
       __I  Ifx_UReg_8Bit                       reserved_7C[4];         /**< \brief 7C, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENCSRDC             ACCENCSRDC;             /**< \brief 80, NVM APU for CSRM read configurations registers*/
       __I  Ifx_UReg_8Bit                       reserved_98[8];         /**< \brief 98, \internal Reserved */
       __IO Ifx_DMU_PROTREG                     PROTHPF;                /**< \brief A0, PROT register for HOST PFLASH memory*/
       __I  Ifx_UReg_8Bit                       reserved_A4[4];         /**< \brief A4, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENHPF               ACCENHPF[16];           /**< \brief A8, NVM APU for HOST PFLASH memory*/
       __IO Ifx_DMU_PROTREG                     PROTHDF;                /**< \brief 2A8, PROT register for HOST DFLASH (EEPROM) and HOST UCB memory*/
       __I  Ifx_UReg_8Bit                       reserved_2AC[4];        /**< \brief 2AC, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENHDF               ACCENHDF[8];            /**< \brief 2B0, NVM APU for HOST DFLASH (EEPROM) memory*/
       __IO Ifx_DMU_PROT_ACCENHDFUCB            ACCENHDFUCB;            /**< \brief 3B0, NVM APU for HOST UCB memory*/
       __I  Ifx_UReg_8Bit                       reserved_3C8[8];        /**< \brief 3C8, \internal Reserved */
       __IO Ifx_DMU_PROTREG                     PROTCSPF;               /**< \brief 3D0, PROT register for CSRM PFLASH memory*/
       __I  Ifx_UReg_8Bit                       reserved_3D4[4];        /**< \brief 3D4, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENCSPF              ACCENCSPF[4];           /**< \brief 3D8, NVM APU for CSRM PFLASH memory*/
       __IO Ifx_DMU_PROTREG                     PROTCSDF;               /**< \brief 458, PROT register for CSRM DFLASH (EEPROM) and CSRM UCB memory*/
       __I  Ifx_UReg_8Bit                       reserved_45C[4];        /**< \brief 45C, \internal Reserved */
       __IO Ifx_DMU_PROT_ACCENCSDF              ACCENCSDF[4];           /**< \brief 460, NVM APU for CSRM DFLASH (EEPROM) memory*/
       __IO Ifx_DMU_PROT_ACCENCSDFUCB           ACCENCSDFUCB;           /**< \brief 4E0, NVM APU for CSRM UCB memory*/
       __I  Ifx_UReg_8Bit                       reserved_4F8[8];        /**< \brief 4F8, \internal Reserved */
       __I  Ifx_DMU_PROT_APUBYPASS              APUBYPASS;              /**< \brief 500, APU bypass*/
} Ifx_DMU_PROT;

/******************************************************************************/
/** \addtogroup IfxSfr_Dmu_Registers_struct
 * \{  */
/******************************************************************************/
/** \name Object L0
 * \{  */

/** \brief DMU object */
typedef volatile struct _Ifx_DMU
{
       __IO Ifx_DMU_HCI                         HCI;                    /**< \brief 0, */
       __I  Ifx_UReg_8Bit                       reserved_20[96];        /**< \brief 20, \internal Reserved */
       __IO Ifx_DMU_CSCI                        CSCI;                   /**< \brief 80, */
       __I  Ifx_UReg_8Bit                       reserved_A0[96];        /**< \brief A0, \internal Reserved */
       __IO Ifx_DMU_GP                          GP;                     /**< \brief 100, */
       __I  Ifx_UReg_8Bit                       reserved_A18[232];      /**< \brief A18, \internal Reserved */
       __IO Ifx_DMU_PROT                        PROT;                   /**< \brief B00, Special protection for BOOTROM*/
       __I  Ifx_UReg_8Bit                       reserved_1004[258044];    /**< \brief 1004, \internal Reserved */
} Ifx_DMU;

/** \}  */
/******************************************************************************/
/** \}  */


/******************************************************************************/

/******************************************************************************/

#endif /* IFXDMU_REGDEF_H */
