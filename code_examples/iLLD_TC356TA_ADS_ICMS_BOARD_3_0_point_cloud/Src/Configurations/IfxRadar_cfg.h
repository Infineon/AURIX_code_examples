/**********************************************************************************************************************
 * \file Radar_cfg.h
 * \copyright Copyright (C) Infineon Technologies AG 2019
 * 
 * Use of this file is subject to the terms of use agreed between (i) you or the company in which ordinary course of 
 * business you are acting and (ii) Infineon Technologies AG or its licensees. If and as long as no such terms of use
 * are agreed, use of this file is subject to following:
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and 
 * accompanying documentation covered by this license (the "Software") to use, reproduce, display, distribute, execute,
 * and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the
 * Software is furnished to do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including the above license grant, this restriction
 * and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all 
 * derivative works of the Software, unless such copies or derivative works are solely in the form of 
 * machine-executable object code generated by a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE 
 * COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
 * IN THE SOFTWARE.
 *********************************************************************************************************************/

#ifndef SRC_CONFIGURATIONS_IFXRADAR_CFG_H_
#define SRC_CONFIGURATIONS_IFXRADAR_CFG_H_

/*********************************************************************************************************************/
/*-----------------------------------------------------Includes------------------------------------------------------*/
/*********************************************************************************************************************/
#include "Ifx_Types.h"
#include "IfxStm.h"
#include "IfxSpu.h"
#include "IfxQspi.h"
#include "IfxCcu6.h"
#include "IfxEmem.h"
#include "IfxQspi_init.h"
#include "IfxDma.h"
#include "IfxSpu.h"
#include "IfxTargets.h"

/*********************************************************************************************************************/
/*------------------------------------------------------Macros-------------------------------------------------------*/
/*********************************************************************************************************************/
#define IFX_OFFSETOF(T, member) ((unsigned int)&(((T *)0)->member))

#define NUM_CONFIG_SLOTS_SPU0 (16)  /* Number of SPU0 config slots */

#define RADAR_NUM_ADC_BITS      (12)

#define RADAR_NUM_RX             (4)
#define RADAR_NUM_VRX            (8) /* number of virtual antennas */
#define RADAR_NUM_VRX_AZIMUTH    (4) /* number of virtual antennas used in azimuth used to calculate range angle power spectrum */
#define RADAR_NUM_SAMPLES      (256)
#define RADAR_NUM_RAMPS         (16)
#define RADAR_NUM_TX             (1)

#define RADAR_NUM_RANGE_GATES   (RADAR_NUM_SAMPLES/2)
#define RADAR_NUM_ACQ           (1)
#define RADAR_NUM_DTHETA           (32)
#define RANGE_BIN_MIN     (8)
#define RANGE_BIN_MAX     (RADAR_NUM_RANGE_GATES)
#define ANGLE_BIN_MIN     (0)
#define ANGLE_BIN_MAX     (32)


#define RANGE_RESOLUTION (0.0375f)
#define RADAR_CYCLE_MS          (100)
#define RADAR_NUM_MICRO_DOPPLER (64)
#define RECORD_FRAMES (500)

#define RADAR_FFT2_LEN          (1024)
#define PHASE_FFT_FILTER_BIN_MIN     (30)
#define PHASE_FFT_FILTER_BIN_MAX     (75)
#define M_PI                    (3.14159265358979323846)

/*********************************************************************************************************************/
/*-------------------------------------------------Data Structures---------------------------------------------------*/
/*********************************************************************************************************************/
typedef union
{
    uint32 U;
    struct
    {
        uint32 SpiRxData : 24;
        uint32 GlblSts   : 8;
    } B;
}IfxMmicSpiRx;

typedef union
{
    uint32 U;
    struct
    {
        uint32 SpiTxData : 24;
        uint32 SpiCmd    : 1;
        uint32 SpiTxAddr : 7;
    } B;
}IfxMmicSpiTx;

typedef enum
{
    Spi_Single = 0,
    Spi_Burst
} Spi_Mode;

typedef struct
{
    Ifx_QSPI               *spiSfr;
    volatile boolean       spi_busy;
    boolean                spi_read;
    Spi_Mode               mode;
    uint32                 transfer_cnt;
    IfxMmicSpiRx           rxData;
    IfxMmicSpiTx           txData;
    IfxQspi_SpiMaster      spiMaster;            /* QSPI Master handle */
    IfxQspi_SpiMaster_Channel spiMasterChannel;     /* QSPI Master Channel handle */
}IfxMmicSpi;

typedef struct
{
    IfxMmicSpi            spi;
}IfxMmic;


typedef struct
{
    uint32 min_pwr;
    uint32 max_pwr;
    uint32 mean_pwr;
    uint32 variance;
    uint16 min_idx;
    uint16 max_idx;
    uint32 reserved[3];
}stats;

/* States for Radar use case processing*/
typedef volatile enum
{
    Radar_State_init,
    Radar_State_config,
    Radar_State_ready,
    Radar_State_operation,
    Radar_State_acquisition,
    Radar_State_data,
    Radar_State_processing,
    Radar_State_error
} Radar_State;

/* SPU0 CMEM structure holding SPU configurations and window coefficients */
typedef struct
{
    IfxSpu_ConfigSlot   slots[NUM_CONFIG_SLOTS_SPU0];
    uint16              rWndw[RADAR_NUM_SAMPLES];
    csint32             calibWndw[RADAR_NUM_VRX][RADAR_NUM_SAMPLES];
    uint16              filter[RADAR_FFT2_LEN/2];
} SPU_Cmem0_Map_t;

/* DMA structure holding the DMA TCS linked lists */
typedef struct
{
    Ifx_DMA_CH  linkedListCh0[5];
    Ifx_DMA_CH  linkedListCh2[2];
} Dma_linked_list;

/* RADAR MEMORY structure */
typedef struct
{
    sint16    adc_raw[RADAR_NUM_SAMPLES][RADAR_NUM_RX];
    sint16    adc_sort[RADAR_NUM_RAMPS][RADAR_NUM_RX][RADAR_NUM_SAMPLES];
    csint16   rMapcalibrated[RADAR_NUM_RAMPS/2][RADAR_NUM_VRX][RADAR_NUM_RANGE_GATES];
    csint16   microDoppler[RADAR_NUM_MICRO_DOPPLER][RADAR_NUM_VRX][RADAR_NUM_RANGE_GATES];
    csint16   average16[RADAR_NUM_MICRO_DOPPLER][RADAR_NUM_VRX][RADAR_NUM_RANGE_GATES];
    csint32   average32[RADAR_NUM_VRX][RADAR_NUM_RANGE_GATES];
    csint16   microDopplerclutterremoved[RADAR_NUM_MICRO_DOPPLER][RADAR_NUM_VRX][RADAR_NUM_RANGE_GATES];
    csint32   Rn[RADAR_NUM_SAMPLES/2][RADAR_NUM_VRX_AZIMUTH][RADAR_NUM_VRX_AZIMUTH];
    csint32   Rn_filtered[RADAR_NUM_SAMPLES/2][RADAR_NUM_VRX_AZIMUTH-1][RADAR_NUM_VRX_AZIMUTH-1];
    cfloat32  Rnn[RADAR_NUM_SAMPLES/2][RADAR_NUM_VRX_AZIMUTH-1][RADAR_NUM_VRX_AZIMUTH-1];
    uint32    PS[RADAR_NUM_SAMPLES/2][RADAR_NUM_DTHETA];
    float32   asm_aHRn1a[RADAR_NUM_SAMPLES/2][RADAR_NUM_DTHETA];
    uint32    CFARAMap[RADAR_NUM_SAMPLES/2][1]; /* 32 angle bins translate into one 32 bit CFAR value in angle direction */
    uint32    CFARLMRMap[RADAR_NUM_DTHETA][RADAR_NUM_SAMPLES/2/32];
    uint32    CFARRMap[RADAR_NUM_DTHETA][RADAR_NUM_SAMPLES/2/32];
    uint32    CFARLMAMap[RADAR_NUM_SAMPLES/2][1]; /* 32 angle bins translate into one 32 bit CFAR value in angle direction */
    uint32    AMap_combined[RADAR_NUM_SAMPLES/2][1];
    uint32    RMap_combined[RADAR_NUM_DTHETA][RADAR_NUM_SAMPLES/2/32];
    uint32    RMap_combined_transpose[RADAR_NUM_SAMPLES/2][1];
    uint32    DetMap[RADAR_NUM_SAMPLES/2][1];
} SPU_Rmem_Map_t;


/* timing measurements */
typedef struct
{
    uint32          frameacquisition;
    uint32          frameproc;
    uint32          microdopplerproc;
    uint32          capon;
    uint32          detections;
} clockcounts;

/* Global Radar Application variable */
typedef struct
{
    Ifx_SPU                *spu0;  /* pointer to SPU0 */
    SPU_Cmem0_Map_t        *cmem0; /* pointer to CMEM of SPU0 */
    Ifx_EMEM               *emem;
    SPU_Rmem_Map_t         *rmem;  /* pointer to Radar memory */
    Radar_State            rState; /* state machine of radar processing use case */
    IfxMmic                mmic;
    Ifx_CCU6               *ccu60;
    IfxDma_Dma_Channel     dmaChn[3];
    Dma_linked_list        *dmaLinkedList;
    uint16                 rmpCnt;
    uint32                 spuOk;
    uint32                 frameCnt;
    clockcounts            clockcountsICMS;
    TargetGroup            det_targets;

} Radar;


/*********************************************************************************************************************/
/*-------------------------------------------------Global variables--------------------------------------------------*/
/*********************************************************************************************************************/
IFX_EXTERN Radar g_rdr;
IFX_EXTERN const uint16 rWnd_Hann[RADAR_NUM_SAMPLES];
#endif /* SRC_CONFIGURATIONS_IFXRADAR_CFG_H_ */
